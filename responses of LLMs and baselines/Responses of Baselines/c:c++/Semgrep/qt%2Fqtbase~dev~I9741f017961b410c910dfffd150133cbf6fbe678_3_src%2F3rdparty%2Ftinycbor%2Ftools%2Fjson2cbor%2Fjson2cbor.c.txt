                   
                   
┌─────────────────┐
│ 3 Code Findings │
└─────────────────┘
                                                                                                                        
    ../res_files/Qt                                                                                                     
  Base/qt%2Fqtbase~dev~I9741f017961b410c910dfffd150133cbf6fbe678_3_src%2F3rdparty%2Ftinycbor%2Ftools%2Fjson2cbor%2Fjson2
  cbor.c/json2cbor_new-19d672ed13f937123952f5c31bbcc544.c                                                               
   ❯❯❱ cpp.lang.security.filesystem.path-manipulation.path-manipulation
          The application builds a file path from potentially untrusted data, which can lead to a path        
          traversal vulnerability. An attacker can manipulate the path which the application uses to access   
          files. If the application does not validate user input and sanitize file paths, sensitive files such
          as configuration or user data can be accessed, potentially creating or overwriting files. To prevent
          this vulnerability, validate and sanitize any input that is used to create references to file paths.
          Also, enforce strict file access controls. For example, choose privileges allowing public-facing    
          applications to access only the required files.                                                     
          Details: https://sg.run/X5gAA                                                                       
                                                                                                              
          422┆ in = fopen(fname, "r");
   
    ❯❱ cpp.lang.security.memory.allocation.tainted-allocation-size.tainted-allocation-size
          Externally controlled data influences the size of an allocation. This can usually lead to overflow
          or underflow and later trigger an out of bounds conditions.                                       
          Details: https://sg.run/bwzge                                                                     
                                                                                                            
          436┆ buffer = malloc(buffersize);
            ⋮┆----------------------------------------
          450┆ buffer = realloc(buffer, buffersize + chunk);

