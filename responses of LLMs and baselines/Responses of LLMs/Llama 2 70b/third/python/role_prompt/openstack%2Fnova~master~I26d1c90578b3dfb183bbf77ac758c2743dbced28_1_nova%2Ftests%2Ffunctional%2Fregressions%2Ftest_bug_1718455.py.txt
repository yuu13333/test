 No security defects are detected in the code.

However, I do have some suggestions for improvement:

1. Consistent coding style:
The code uses both camelCase and snake_case for variable names. It's better to stick to a single convention throughout the code.
2. Type hints and annotations:
The code uses type hints and annotations inconsistently. It's better to use them consistently throughout the code to make it easier to understand and maintain.
3. docstrings:
The code has very few docstrings. It's a good practice to include docstrings for functions, classes, and methods to provide a brief explanation of what they do and what their purpose is.
4. Function naming:
Some of the function names are quite long and descriptive, while others are very short. It's better to use descriptive names for all functions to make the code easier to understand.
5. Variable naming:
Some of the variable names are not very descriptive. For example, 'server' could be renamed to 'original_server' or 'source_server' to make it clearer what its purpose is.
6. Code organization:
The code has a lot of nested calls, which can make it hard to read and understand. It's better to break the code into smaller functions or methods to make it easier to read and maintain.
7. Error handling:
The code has a few places where it catches and logs exceptions without re-raising them. It's better to re-raise the exceptions so that the caller can handle them appropriately.
8. Test organization:
The test class has a mix of setup and teardown methods, as well as test methods. It's better to separate them into separate classes or methods to make the code easier to understand and maintain.

Overall, the code seems to be well-structured and easy to read. However, following the best practices mentioned above can make it even better.