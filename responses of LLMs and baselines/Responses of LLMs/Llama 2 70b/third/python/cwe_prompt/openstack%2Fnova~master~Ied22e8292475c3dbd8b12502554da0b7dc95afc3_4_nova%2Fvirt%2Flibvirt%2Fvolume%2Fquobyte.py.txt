 No security defects are detected in the code.

However, I do have some suggestions for improvement:

1. Consistent naming conventions:
The code uses both camelCase and snake_case naming conventions. It's better to stick to a single convention throughout the code.
2. Type hints and annotations:
The function parameters and return types are not consistently annotated. Adding type hints and annotations can improve code readability and help catch type-related errors.
3. Docstrings:
The code lacks docstrings for many functions, which makes it difficult to understand their purpose and usage. Adding docstrings can improve code readability and help developers understand the code better.
4. Error handling:
The code catches some exceptions but doesn't handle them consistently. It's better to catch specific exceptions and handle them appropriately, instead of catching a broad "Exception" class.
5. Consistent indentation:
The code indentation is not consistent in some places. It's better to use consistent indentation to improve code readability.
6. Function signature:
Some functions have a signature that is too long and complex. It's better to break down such functions into smaller functions with simpler signatures, which can improve code readability and maintainability.
7. Code organization:
The code is organized into a single file, which can make it difficult to manage and maintain. It's better to break down the code into smaller modules and files, which can improve code organization and maintainability.
8. Testing:
The code lacks tests, which can make it difficult to ensure its correctness and reliability. Adding tests can improve code quality and help catch bugs and errors.

Overall, the code seems to be well-structured, and the author has made efforts to follow security best practices. However, there is always room for improvement, and addressing the above suggestions can further improve the code's quality and security.