 I have reviewed the code and found a potential security defect. The issue is related to the use of raw user input directly in the code without proper sanitization.

Line 50:
```
router_res[name] = from_db(extra_attrs.get(name, info['default']))
```
In this line, the `from_db` function is called with a value that is directly retrieved from the `extra_attrs` dictionary, which is populated by user input. This means that an attacker could potentially inject malicious data into the `extra_attrs` dictionary, leading to arbitrary code execution.

The solution is to sanitize the user input before using it in the code. One way to do this is to use a whitelist of allowed values and sanitize the input using a secure function, such as `str.strip()` or `str.decode()`.

Additionally, it's a good practice to use prepared statements and parameterized queries when interacting with the database, to prevent SQL injection attacks.

Overall, the code should be reviewed and refactored to address these security concerns.