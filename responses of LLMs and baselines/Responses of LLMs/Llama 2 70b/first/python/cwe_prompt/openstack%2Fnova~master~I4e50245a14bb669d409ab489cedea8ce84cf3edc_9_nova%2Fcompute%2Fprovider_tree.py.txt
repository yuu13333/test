 No security defects are detected in the code.

The code seems to be well-structured, and it's good to see that it's using a recognized vulnerability scanning tool (CWE) to identify potential security weaknesses. However, I do have a few suggestions for improvement:

1. Consistent naming conventions: The code uses both camelCase and snake_case naming conventions. It's best to stick to a single convention throughout the code for consistency and readability.
2. Type hints: The function parameters and return types are not consistently annotated with type hints. Adding type hints can make the code more readable and easier to understand, and can also help catch type-related errors at runtime.
3. Docstrings: The code has docstrings for some functions, but not for all of them. It's a good practice to include docstrings for all functions, even if they are short, to provide a brief explanation of what the function does and what its parameters and return values are.
4. Function signature consistency: Some functions have a consistent signature, while others do not. For example, some functions take a single argument, while others take multiple arguments. It's best to standardize the function signatures to make the code more consistent and easier to read.
5. Comments: The code has some comments, but they are not consistently placed throughout the code. It's a good practice to include comments for all functions, as well as for key sections of code, to explain what the code is doing and why.
6. Code organization: The code is organized into separate classes, which is good. However, it might be helpful to break the code up into smaller functions and classes to make it easier to understand and maintain.
7. Testing: The code does not include any testing code. It's important to include tests to ensure that the code functions correctly and to catch any bugs or errors.

Overall, the code seems to be well-written, but there are some areas where it could be improved for readability, maintainability, and security.