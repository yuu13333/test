 No security defects are detected in the code.

However, I would like to point out a few possible improvements:

1. Inconsistent naming conventions:
The code uses both camelCase and snake_case naming conventions. It's better to stick to a single convention throughout the code for consistency and readability.
2. Missing docstrings:
Some functions and classes lack docstrings that describe their purpose, parameters, return types, and other relevant information. Adding docstrings can make the code more understandable and easier to maintain.
3. Type hints and annotations:
The code uses type hints and annotations inconsistently. It's a good practice to use type hints and annotations for all function parameters, return types, and variable declarations. This can help catch type-related errors early and make the code more readable.
4. Consistency in exception handling:
The code uses different exception handling styles. Some functions catch and raise specific exceptions, while others use a bare `except` block without specifying the exception type. It's better to use specific exception types and handle them consistently throughout the code.
5. Consistency in variable naming:
The code uses both lowercase and camelCase variable naming conventions. It's better to stick to a single convention throughout the code for consistency and readability.
6. Redundant imports:
The code imports some modules multiple times. It's better to remove redundant imports to avoid confusion and reduce code verbosity.
7. Unused variables and functions:
The code defines some variables and functions that are not used anywhere. It's better to remove them to avoid confusion and reduce code verbosity.
8. Code organization:
The code is organized into multiple files, but some functions and classes are still quite long. It's a good practice to break down long functions and classes into smaller, more manageable pieces to improve readability and maintainability.
9. Comments and documentation:
The code has limited comments and documentation. Adding comments and documentation can help explain the code's purpose, parameters, return types, and other relevant information, making it easier for others to understand and maintain.

I hope this feedback helps improve the code's quality and readability.