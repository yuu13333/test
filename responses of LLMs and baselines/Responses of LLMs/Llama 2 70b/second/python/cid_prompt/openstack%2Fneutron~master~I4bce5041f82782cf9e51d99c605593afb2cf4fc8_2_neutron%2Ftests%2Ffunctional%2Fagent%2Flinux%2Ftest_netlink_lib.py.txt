 No security defects are detected in the code.

However, I do have some suggestions for improvement:

1. Consistent naming conventions:
The code uses both camelCase and snake_case naming conventions. It's better to stick to a single convention throughout the code.
2. Type hints and annotations:
The function parameters and return types are not annotated. Adding type hints and annotations will make the code more readable and maintainable.
3. Docstrings:
The code lacks docstrings for the functions, classes, and variables. Adding docstrings will help in understanding the purpose and usage of the code.
4. Function signature:
The function signature for `_delete_entry` is inconsistent. The function takes three arguments, but the third argument `zone` is not used in the function body. Remove the unused argument or update the function signature to match the usage.
5. Code organization:
The code is organized into separate functions, but the functions are not grouped logically. Grouping related functions together will make the code more organized and easier to understand.
6. Error handling:
The code doesn't handle errors properly. Add try-except blocks to handle errors and provide meaningful error messages.
7. Test cases:
The code has test cases, but they are not comprehensive. Add more test cases to cover various scenarios and edge cases.
8. Code style:
The code uses both Linux and Windows-style line endings. It's better to stick to a single style throughout the code.
9. Code formatting:
The code has inconsistent indentation and formatting. Use a consistent formatting style throughout the code.
10. Code complexity:
The code has a high cyclomatic complexity, which makes it difficult to understand and maintain. Consider breaking down the code into smaller functions or methods to reduce the complexity.