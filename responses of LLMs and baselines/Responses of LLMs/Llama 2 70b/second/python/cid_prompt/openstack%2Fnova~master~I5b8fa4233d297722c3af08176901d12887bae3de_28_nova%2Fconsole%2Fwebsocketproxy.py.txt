 No security defects are detected in the code.

However, I would like to point out a few potential issues that may not necessarily be security-related but could improve the code's overall quality and readability:

1. Consistent naming conventions: The code uses both camelCase and snake_case naming conventions. It's best to stick to a single convention throughout the code for consistency.
2. Type hints and annotations: The code uses Type hints and annotations for some function parameters and return types, but not for all. It's a good practice to use Type hints and annotations for all function parameters and return types to make the code more readable and maintainable.
3. Docstrings: The code has docstrings for some functions, but not for all. It's a good practice to include docstrings for all functions to provide a clear understanding of what the function does and what its parameters and return types are.
4. Function signature: Some functions have a large number of parameters, which can make the code harder to read and understand. It may be worth considering breaking down these functions into smaller functions with fewer parameters or using a tuple or dictionary to pass parameters instead of individual arguments.
5. Comments: The code has comments, but they are not abundant. Adding more comments to explain the logic and purpose of each section of the code can make it easier for others to understand and maintain.
6. Code organization: The code is organized into different classes, but some classes have a large number of methods. It may be worth considering breaking down these classes into smaller classes with fewer methods or organizing the code into different modules or files to make it easier to navigate and maintain.

Overall, the code appears to be well-structured, and no security defects were detected. However, addressing the above-mentioned issues can improve the code's readability, maintainability, and overall quality.