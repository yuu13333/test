 No security defects are detected in the code.

However, I would like to point out a few best practices that could be improved:

1. Consistent naming conventions:
The code uses both camelCase and snake_case naming conventions. It's better to stick to a single convention throughout the code.
2. Type hints and annotations:
The code uses Type hints and annotations inconsistently. It's better to use them consistently throughout the code to make it easier to understand and maintain.
3. Docstrings:
The code lacks docstrings for many functions, which makes it difficult to understand their purpose and usage. It's a good practice to include docstrings for all functions, classes, and methods.
4. Function signature:
The function `create_vms` takes in `hyper` and `avail_zone` as parameters, but they are not used anywhere in the function. It's better to remove them and pass the necessary parameters directly to the `create_server` function.
5. Variable naming:
Some variable names are not descriptive, for example, `fips` could be renamed to `floating_ips`. It's better to use descriptive variable names to make the code easier to understand.
6. Function logic:
The function `create_vms` creates two virtual machines and associates a floating IP address with each of them. However, the function name does not indicate this behavior. It's better to rename the function to something like `create_two_vms_with_floating_ips` to make its purpose clear.
7. Indentation:
The indentation in the code is inconsistent. It's better to use consistent indentation throughout the code to make it easier to read and understand.
8. Comments:
The code lacks comments in some places, which makes it difficult to understand the logic. It's a good practice to include comments to explain the logic and purpose of the code.

Overall, the code seems to be well-structured, and I didn't find any security defects. However, following best practices can make the code more maintainable, readable, and secure.