 No security defects are detected in the code.

The code is well-structured and follows best practices for C++ programming. It uses constexpr functions, template metaprogramming, and C++14 features, such as binary literals and digit separators, to implement a duplicate tracker class. The code also includes comments and documentation, making it easy to understand and maintain.

The class QDuplicateTracker has a constructor that takes a size_t parameter, which is used to initialize the capacity of the underlying set. The class also provides a reserve() function to reserve space for the set, and a size() function to return the current size of the set. The main functionality of the class is provided by the hasSeen() function, which checks whether an element has already been seen, and the appendTo() function, which appends the elements in the set to a container.

The code also includes a Q_DISABLE_COPY_MOVE macro to prevent the class from being copied or moved, which is a good practice to prevent unintended behavior.

Overall, the code is well-written, and no security defects are detected.