python
Copy code
import os

def get_secret_key():
    return os.getenv('SECRET_KEY')

def encrypt(data, key):
    return f"Encrypted data using {key}: {data}"

def save_encrypted_data(data):
    key = get_secret_key()
    encrypted_data = encrypt(data, key)
    with open('encrypted_data.txt', 'w') as file:
        file.write(encrypted_data)

def main():
    data = input("Enter data to encrypt: ")
    save_encrypted_data(data)

if __name__ == "__main__":
    main()



ANALYSIS:

 1. Sensitive Data Exposure (Line 5): The secret key is retrieved from the
    environment variable using os.getenv('SECRET_KEY'). If an attacker gains
    access to the environment variables, they can obtain the secret key, leading
    to potential data compromise.
    
    Solution: Avoid hardcoding secrets in code. Instead, use a secure secret
    management system or environment variables with proper access controls.
    Also, consider encrypting the stored secrets and rotating them regularly.

 2. Insecure File Permissions (Line 11): The file 'encrypted_data.txt' is
    created with write permissions without explicitly setting file permissions.
    This could allow unauthorized users or processes to modify or access the
    encrypted data.
    
    Solution: Explicitly set file permissions when creating sensitive files to
    limit access only to authorized users or processes. For example, set file
    permissions to only allow the user running the script to read and write to
    the file.

 3. **Input Validat