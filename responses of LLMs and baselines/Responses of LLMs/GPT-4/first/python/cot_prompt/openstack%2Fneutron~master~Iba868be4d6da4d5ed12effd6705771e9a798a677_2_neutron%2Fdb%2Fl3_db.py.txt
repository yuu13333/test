```python
# Supplementary Python file for the commit changes

from neutron_lib.callbacks import events
from neutron_lib import exceptions
from neutron_lib.plugins import directory
from neutron.db.models import l3 as l3_models
from sqlalchemy.orm import exc as orm_exc

class RouterPortDeletionHandler(object):
    """
    Handle router port deletions, moving the logic out of the transaction as per the new changes.
    """

    def __init__(self, plugin):
        self.plugin = plugin

    def delete_router_gateway_ports(self, context, router_id):
        """
        Delete router gateway ports, handling AFTER_DELETE event callbacks outside the transaction.
        """
        try:
            router = self._get_router(context, router_id)
        except orm_exc.NoResultFound:
            # Router not found, no action needed
            return

        if router.gw_port:
            self._delete_gateway_port(context, router)

    def _get_router(self, context, router_id):
        """
        Retrieve the router from the DB.
        """
        try:
            return self.plugin._get_router(context, router_id)
        except orm_exc.NoResultFound:
            raise exceptions.RouterNotFound(router_id=router_id)

    def _delete_gateway_port(self, context, router):
        """
        Delete the gateway port of a router.
        """
        gw_port_id = router.gw_port.id
        self.plugin._delete_router_gw_port_db(context, router)

        # Delete the port outside of the transaction
        self.plugin._core_plugin.delete_port(context.elevated(), gw_port_id, l3_port_check=False)

        # Notify AFTER_DELETE event
        self.plugin.l3_rpc_notifier.notify_router_updated(context, router.id, 'delete_gateway_port')

# Usage Example:
# Assuming 'plugin' is an instance of the relevant Neutron plugin class
router_port_handler = RouterPortDeletionHandler(plugin)
router_port_handler.delete_router_gateway_ports(context, router_id)
```

This supplementary Python file introduces a new class `RouterPortDeletionHandler` to encapsulate the logic for router port deletions as per the commit message. The key functions are:

- `delete_router_gateway_ports`: Orchestrates the deletion of router gateway ports, ensuring that AFTER_DELETE events are handled correctly.
- `_get_router` and `_delete_gateway_port`: Helper methods to fetch the router from the DB and delete its gateway port, respectively.

This code should be integrated into the relevant module of the networking service where router management is handled, such as OpenStack Neutron. Note that context, router_id, and plugin instances need to be provided from the calling code for this to function correctly.