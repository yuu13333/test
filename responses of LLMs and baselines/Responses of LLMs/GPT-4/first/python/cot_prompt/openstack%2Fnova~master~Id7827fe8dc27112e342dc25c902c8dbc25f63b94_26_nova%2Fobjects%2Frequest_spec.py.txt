### Supplementary Python File: `resource_mapping.py`

```python
# Import necessary modules
from nova import exception
from nova.objects import RequestGroup, RequestSpec
import logging

LOG = logging.getLogger(__name__)

class ResourceMappingException(exception.NovaException):
    msg_fmt = _("Error in mapping resources: %(reason)s")

class ResourceMapper:
    def __init__(self, request_spec):
        """
        Initialize the resource mapper with a RequestSpec object.
        """
        self.request_spec = request_spec

    def map_resources_to_providers(self):
        """
        Maps RequestGroups to Resource Providers based on resource requests and traits.
        Raises ResourceMappingException on failure.
        """
        try:
            # Assuming placement_allocations and provider_traits are available in the RequestSpec
            self.request_spec.map_requested_resources_to_providers(
                self.request_spec.placement_allocations, 
                self.request_spec.provider_traits
            )
        except ValueError as e:
            raise ResourceMappingException(reason=str(e))

def parse_neutron_port_resource_request(port_resource_request):
    """
    Parses resource requests from a Neutron port and returns a RequestGroup object.
    """
    try:
        return RequestGroup.from_port_request(None, port_resource_request['port_uuid'], port_resource_request)
    except Exception as e:
        LOG.error("Failed to parse resource request from Neutron port: %s", e)
        raise ResourceMappingException(reason="Failed to parse Neutron port resource request")

def integrate_with_server_creation(request_spec, server_context):
    """
    Integrates resource provider mapping with server creation process.
    """
    resource_mapper = ResourceMapper(request_spec)
    resource_mapper.map_resources_to_providers()
    # Further integration with server creation context

def integrate_with_port_binding(port_binding_context, request_spec):
    """
    Integrates resource provider mapping with port binding process.
    """
    resource_mapper = ResourceMapper(request_spec)
    resource_mapper.map_resources_to_providers()
    # Further integration with port binding context

# Unit tests should be created in a separate test file
```

This code provides a basic structure for the required functionalities. It includes a `ResourceMapper` class to handle the mapping of RequestGroups to Resource Providers and functions to parse Neutron port resource requests and integrate the mapping with server creation and port binding processes. Error handling is incorporated using a custom exception `ResourceMappingException`.

Remember, this is a high-level outline. The actual implementation will require a detailed understanding of the Nova and Neutron codebases, especially concerning how resource requests are formulated and communicated between these components. Additionally, unit tests should be written in a separate test file to validate each component of this functionality.