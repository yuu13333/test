### Supplementary Code for Commit Changes

#### Modified `move_allocations` Method

```python
def move_allocations(context, source_uuid, target_uuid, target_is_new=False):
    """
    Move allocations from source consumer to target consumer.

    :param context: The request context.
    :param source_uuid: UUID of the source consumer.
    :param target_uuid: UUID of the target consumer.
    :param target_is_new: Flag to indicate if the target consumer is new.
    :returns: None
    """
    reportclient = report.SchedulerReportClient()

    # Check if target consumer exists
    target_allocs = reportclient.get_allocs_for_consumer(context, target_uuid)
    if target_allocs.get('allocations') and not target_is_new:
        # Move allocations from source to target
        success = reportclient.move_allocations(context, source_uuid, target_uuid)
        if not success:
            LOG.error("Failed to move allocations from source to target consumer.")
            raise exception.AllocationMoveFailed()
    elif not target_allocs.get('allocations') or target_is_new:
        # Delete source consumer allocations if target consumer is gone
        reportclient.delete_allocation_for_consumer(context, source_uuid)
        LOG.info("Deleted source consumer allocations as target consumer is gone.")
```

#### Integration with Existing Methods

In the existing methods like `replace_allocation_with_migration` and `revert_allocation_for_migration`, we'll call `move_allocations` with the appropriate arguments, including the new `target_is_new` flag based on the context.

#### Unit Tests

Unit tests should be written to cover various scenarios, including cases where the target consumer exists or doesn't exist, and verifying that source allocations are deleted only when appropriate.

#### Documentation

Documentation should be updated to explain the new behavior of the `move_allocations` method, especially the role of the `target_is_new` flag and the conditions under which source allocations are deleted.

---

This supplementary code aligns with the commit message, addressing the specified bug and improving the functionality of the `move_allocations` method according to the described requirements.