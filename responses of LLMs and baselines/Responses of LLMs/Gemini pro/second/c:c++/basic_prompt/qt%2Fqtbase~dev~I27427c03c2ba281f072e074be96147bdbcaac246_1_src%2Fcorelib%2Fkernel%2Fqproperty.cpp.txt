Line 73: The inlineDependencyObservers.~ObserverArray() call is missing a semicolon

Line 74: ```if (dirty)``` should be ```if (!dirty)```

Line 102: The ```{``` after ```moving``` is missing a space

Line 106: ```ref``` should be ```binding->ref```


The corrected code:

1 /****************************************************************************
2 **
3 ** Copyright (C) 2020 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qproperty.h"
41 #include "qproperty_p.h"
42 
43 #include <qscopedvaluerollback.h>
44 
45 QT_BEGIN_NAMESPACE
46 
47 using namespace QtPrivate;
48 
49 void QPropertyBasePointer::addObserver(QPropertyObserver *observer)
50 {
51     if (auto *binding = bindingPtr()) {
52         observer->prev = &binding->firstObserver.ptr;
53         observer->next = binding->firstObserver.ptr;
54         if (observer->next)
55             observer->next->prev = &observer->next;
56         binding->firstObserver.ptr = observer;
57     } else {
58         auto firstObserver = reinterpret_cast<QPropertyObserver*>(ptr->d_ptr & ~QPropertyBase::FlagMask);
59         observer->prev = reinterpret_cast<QPropertyObserver**>(&ptr->d_ptr);
60         observer->next = firstObserver;
61         if (observer->next)
62             observer->next->prev = &observer->next;
63     }
64     setFirstObserver(observer);
65 }
66 
67 QPropertyBindingPrivate::~QPropertyBindingPrivate()
68 {
69     if (firstObserver)
70         firstObserver.unlink();
71     if (!hasStaticObserver)
72         inlineDependencyObservers.~ObserverArray(); // Explicit because of union.
73     if (!dirty)
74         return;
75     dirty = false;
76     if (updating) {
77         error = QPropertyBindingError(QPropertyBindingError::BindingLoop);
78         return;
79     }
80 
81     /*
82      * Evaluating the binding might lead to the binding being broken. This can
83      * cause ref to reach zero at the end of the function.  However, the
84      * updateGuard's destructor will then still trigger, trying to set the
85      * updating bool to its old value
86      * To prevent this, we create a QPropertyBindingPrivatePtr which ensures
87      * that the object is still alive when updateGuard's dtor runs.
88      */
89     QPropertyBindingPrivatePtr keepAlive {this};
90     QScopedValueRollback<bool> updateGuard(updating, true);
91 
92     BindingEvaluationState evaluationFrame(this);
93 
94     bool changed = false;
95 
96     if (hasStaticObserver && staticGuardCallback) {
97         changed = staticGuardCallback(metaType, propertyDataPtr, evaluationFunction, staticObserver);
98     } else {
99         changed = evaluationFunction(metaType, propertyDataPtr);
100     }
101 
102     if (updating) {
103         error = QPropertyBindingError(QPropertyBindingError::BindingLoop);
104         return;
105     }
106 
107     if (changed) {
108         evaluateIfDirtyAndReturnTrueIfValueChanged();
109         if (firstObserver)
110             firstObserver.notify(this, propertyDataPtr);
111         if (hasStaticObserver)
112             staticObserverCallback(staticObserver, propertyDataPtr);
113     }
114 }
115 
116 void QPropertyBindingPrivate::markDirtyAndNotifyObservers()
117 {
118     if (dirty)
119         return;
120     dirty = true;
121     if (firstObserver)
122         firstObserver.notify(this, propertyDataPtr);
123     if (hasStaticObserver)
124         staticObserverCallback(staticObserver, propertyDataPtr);
125 }
126 
127 bool QPropertyBindingPrivate::evaluateIfDirtyAndReturnTrueIfValueChanged()
128 {
129     if (!dirty)
130         return false;
131     if (updating) {
132         error = QPropertyBindingError(QPropertyBindingError::BindingLoop);
133         return false;
134     }
135 
136     /*
137      * Evaluating the binding might lead to the binding being broken. This can
138      * cause ref to reach zero at the end of the function.  However, the
139      * updateGuard's destructor will then still trigger, trying to set the
140      * updating bool to its old value
141      * To prevent this, we create a QPropertyBindingPrivatePtr which ensures
142      * that the object is still alive when updateGuard's dtor runs.
143      */
144     QPropertyBindingPrivatePtr keepAlive {this};
145     QScopedValueRollback<bool> updateGuard(updating, true);
146 
147     BindingEvaluationState evaluationFrame(this);
148 
149     bool changed = false;
150 
151     if (hasStaticObserver && staticGuardCallback) {
152         changed = staticGuardCallback(metaType, propertyDataPtr, evaluationFunction, staticObserver);
153     } else {
154         changed = evaluationFunction(metaType, propertyDataPtr);
155     }
156 
157     if (!updating) {
158         dirty = false;
159         if (changed)
160             return true;
161     }
162 
163     return false;
164 }
165 
166 QUntypedPropertyBinding::QUntypedPropertyBinding() = default;
167 
168 QUntypedPropertyBinding::QUntypedPropertyBinding(const QMetaType &metaType, QUntypedPropertyBinding::BindingEvaluationFunction function,
169                                                  const QPropertyBindingSourceLocation &location)
170 {
171     d = new QPropertyBinding