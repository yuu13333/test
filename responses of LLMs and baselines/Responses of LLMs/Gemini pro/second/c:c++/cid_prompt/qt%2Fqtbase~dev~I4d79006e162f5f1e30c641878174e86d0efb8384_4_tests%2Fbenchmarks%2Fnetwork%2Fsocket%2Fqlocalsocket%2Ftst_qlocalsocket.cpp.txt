**CWE-710: Improper Adherence to Coding Standards**

1. Line 93-94: SocketFactory constructor
    ```cpp
    QLocalSocket *socket = new QLocalSocket(this);
    Q_CHECK_PTR(socket);
    ```
   - The `Q_CHECK_PTR` macro is not recommended to use, because it doesn't terminate the program execution when the pointer is null. It only displays a message in debug mode. It's better to use `Q_ASSERT` instead. The pointer should be checked before using it for the first time.
   - Solution: Replace `Q_CHECK_PTR` with `Q_ASSERT`

2. Line 96: SocketFactory constructor
    ```cpp
    connect(this, &SocketFactory::start, [this, socket]() {
        QCOMPARE(socket->write(this->buffer.data(), this->buffer.size()),
                                       this->buffer.size());
    });
    ```
   - The body of the lambda should be wrapped into curly braces. This improves readability and can prevent bugs caused by forgetting semicolons.
   - Solution: Add curly braces to the lambda body

3. Line 146: tst_QLocalSocket::pingPong
    ```cpp
    QFETCH(int, connections);
    ```
   - The `QFETCH` macro is used to retrieve the value of a test data column. However, it's not followed by a variable name to store the retrieved value.
   - Solution: Add a variable name to store the retrieved value

4. Line 180: tst_QLocalSocket::dataExchange
    ```cpp
    const qint64 iterations = 50000;
    ```
   - The value of `iterations` is hardcoded. It's better to use a test data column to specify the number of iterations.
   - Solution: Add a test data column for the number of iterations and retrieve it using `QFETCH`