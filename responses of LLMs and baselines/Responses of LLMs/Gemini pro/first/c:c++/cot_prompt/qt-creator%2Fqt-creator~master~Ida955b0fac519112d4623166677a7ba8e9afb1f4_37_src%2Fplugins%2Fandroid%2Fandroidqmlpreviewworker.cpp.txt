```cpp\n110 SdkToolResult runAdbCommandAsyncAndWait(const QString &dev, const QStringList &arguments)\n```\n\nThis function runs an ADB command asynchronously and waits for it to finish. However, it does not check the return value of the ADB command to see if it was successful. This means that if the ADB command fails, the function will still return a valid SdkToolResult object, but the `success()` method on that object will return false.\n\nThis could lead to a security issue if an attacker is able to craft an ADB command that will cause the `runAdbCommandAsyncAndWait()` function to fail. The attacker could then use this to gain access to the device or to install malicious software.\n\nTo fix this issue, the `runAdbCommandAsyncAndWait()` function should be modified to check the return value of the ADB command and only return a valid SdkToolResult object if the command was successful.\n\n```cpp\n122 SdkToolResult runAdbShellCommand(const QString &dev, const QStringList &arguments)\n```\n\nThis function runs an ADB shell command and returns the result. However, it does not check the return value of the ADB shell command to see if it was successful. This means that if the ADB shell command fails, the function will still return a valid SdkToolResult object, but the `success()` method on that object will return false.\n\nThis could lead to a security issue if an attacker is able to craft an ADB shell command that will cause the `runAdbShellCommand()` function to fail. The attacker could then use this to gain access to the device or to install malicious software.\n\nTo fix this issue, the `runAdbShellCommand()` function should be modified to check the return value of the ADB shell command and only return a valid SdkToolResult object if the command was successful.\n\n**Solution:**\n\n```cpp\n110 SdkToolResult runAdbCommandAsyncAndWait(const QString &dev, const QStringList &arguments) {\n  SdkToolResult result = AndroidManager::runAdbCommand(args);\n  if (!result.success()) {\n    // Handle the error\n  }\n  return result;\n}\n\n122 SdkToolResult runAdbShellCommand(const QString &dev, const QStringList &arguments) {\n  SdkToolResult result = AndroidManager::runAdbShellCommand(args);\n  if (!result.success()) {\n    // Handle the error\n  }\n  return result;\n}\n```