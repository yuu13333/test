The code uses `psutil` to determine if the host is running a systemd service. The code uses the `is_systemd()` function to check if the host is running systemd. The `is_systemd()` function first checks if the global variable `_is_systemd` is not None. If it is not None, the function returns the value of `_is_systemd`. If it is None, the function checks if the host is running systemd by checking if the process with PID 1 is named "systemd" or if the directory `/run/systemd/system` exists. If either of these conditions is true, the function calls `systemctl is-system-running` to check if the system is running. If the system is running, the function sets `_is_systemd` to True and returns True. Otherwise, the function sets `_is_systemd` to False and returns False.

The code uses the `mount_volume()` and `umount_volume()` functions to mount and unmount Quobyte volumes. The `mount_volume()` function first creates the mount point directory if it does not exist. Then, it checks if the host is running systemd. If it is, the function calls `libvirt.systemd_run_qb_mount()` to mount the volume. Otherwise, the function calls `libvirt.unprivileged_qb_mount()` to mount the volume. The `umount_volume()` function first tries to unmount the volume using `libvirt.umount()` if the host is running systemd. Otherwise, the function calls `libvirt.unprivileged_umount()` to unmount the volume.

The code uses the `validate_volume()` function to validate if a mount is a valid Quobyte volume. The function first gets a list of all partitions on the host. Then, it iterates over the partitions and checks if the mount point of the partition matches the mount path. If it does, the function checks if the partition device starts with "quobyte@". If it does, the function checks the size of the partition. If the size is 0, the function returns. Otherwise, the function raises an `InvalidVolume` exception. If the partition device does not start with "quobyte@", the function raises an `InvalidVolume` exception. If the mount point of the partition does not match the mount path, the function checks if there is a partition with a device that starts with "quobyte@" and a mount point that matches the mount path. If there is, the function returns. Otherwise, the function raises an `InvalidVolume` exception.