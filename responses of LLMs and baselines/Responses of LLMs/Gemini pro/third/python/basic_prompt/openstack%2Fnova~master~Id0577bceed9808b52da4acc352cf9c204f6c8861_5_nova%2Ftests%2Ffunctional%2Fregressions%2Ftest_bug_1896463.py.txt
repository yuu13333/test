163         #    |        x
164         #    |
165         #    |
166         #    x
170         #
171         # but
172         #
173         #   evac
174         #    |
175         #    |
176         #    |     periodic
177         #    |        |
178         #    |        |
179         #    |        |
180         #    x        |
181         #             |
182         #             x
183         #

The code you provided has a race condition between the `Instance.drop_migration_context` method and the `_update_available_resource` periodic task. This race condition can cause the PCI allocation for an instance to be deleted by the periodic task, even though the instance is still running on the destination host.

The race condition occurs because the `_update_available_resource` periodic task starts an _update_available_resource() periodic task and this task loads the list of instances on its host from the DB. Our instance is not in this list due to #1. The evacuation finishes, the instance.host is set to the dest host and the migration context is deleted. The periodic task now loads the list of in-progress migration from the DB to check for incoming our outgoing migrations. However due to #3 our instance is not in this list either. The periodic task cleans up every lingering PCI claim that is not connected to any instance collected above from the instance list and from the migration list. As our instance is not in either of the lists, the resource tracker  cleans up the PCI allocation for the already finished evacuation of our instance.

To fix this race condition, you can use a lock to ensure that only one thread can access the `Instance.drop_migration_context` method and the `_update_available_resource` periodic task at a time.