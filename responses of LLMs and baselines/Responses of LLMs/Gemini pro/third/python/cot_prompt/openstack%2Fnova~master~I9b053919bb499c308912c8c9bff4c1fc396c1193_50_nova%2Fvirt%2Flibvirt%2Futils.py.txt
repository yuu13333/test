```python\ndef save_and_migrate_vtpm_dir(\n    instance_uuid: str,\n    inst_base_resize: str,\n    inst_base: str,\n    dest: str,\n    on_execute: ty.Any,\n    on_completion: ty.Any,\n) -> None:\n    """Save vTPM data to instance directory and migrate to the destination.\n\n    If the instance has vTPM enabled, then we need to save its vTPM data\n    locally (to allow for revert) and then migrate the data to the dest node.\n    Do so by copying vTPM data from the swtpm data directory to a resize\n    working directory, $inst_base_resize, and then copying this to the remote\n    directory at $dest:$inst_base.\n\n    :param instance_uuid: The instance\'s UUID.\n    :param inst_base_resize: The instance\'s base resize working directory.\n    :param inst_base: The instances\'s base directory.\n    :param dest: Destination host.\n    :param on_execute: Callback method to store PID of process in cache.\n    :param on_completion: Callback method to remove PID of process from cache.\n    :returns: None.\n    """\n    vtpm_dir = os.path.join(VTPM_DIR, instance_uuid)\n    if not os.path.exists(vtpm_dir):\n        return\n\n    # We likely need to create the instance swtpm directory on the dest node\n    # with ownership that is not the user running nova. We only have\n    # permissions to copy files to <instance_path> on the dest node so we need\n    # to get creative.\n\n    # First, make a new directory in the local instance directory\n    swtpm_dir = os.path.join(inst_base_resize, \'swtpm\')\n    fileutils.ensure_tree(swtpm_dir)\n    # Now move the per-instance swtpm persistent files into the\n    # local instance directory.\n    nova.privsep.path.move_tree(vtpm_dir, swtpm_dir)\n    # Now adjust ownership.\n    nova.privsep.path.chown(\n        swtpm_dir, os.geteuid(), os.getegid(), recursive=True)\n    # Copy the swtpm subtree to the remote instance directory\n    copy_image(\n        swtpm_dir, inst_base, host=dest, on_execute=on_execute,\n        on_completion=on_completion)\n\n\ndef restore_vtpm_dir(swtpm_dir: str) -> None:\n    """Given a saved TPM directory, restore it where libvirt can find it.\n\n    :path swtpm_dir: Path to swtpm directory.\n    :returns: None\n    """\n    # Ensure global swtpm dir exists with suitable\n    # permissions/ownership\n    if not os.path.exists(VTPM_DIR):\n        nova.privsep.path.makedirs(VTPM_DIR)\n        nova.privsep.path.chmod(VTPM_DIR, 0o711)\n    elif not os.path.isdir(VTPM_DIR):\n        msg = _(\n            \'Guest wants emulated TPM but host path %s is not a directory.\')\n        raise exception.Invalid(msg % VTPM_DIR)\n\n    # Set ownership of instance-specific files\n    nova.privsep.path.chown(\n        swtpm_dir,\n        CONF.libvirt.swtpm_user,\n        CONF.libvirt.swtpm_group,\n        recursive=True)\n    # Move instance-specific directory to global dir\n    nova.privsep.path.move_tree(swtpm_dir, VTPM_DIR)\n\n```\n\nNo security defects are detected in the code