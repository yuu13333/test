This code appears to be missing an exception being raised within the context manager. Since a compute node is disabled if `driver.node_is_available(nodename)` fails, trying to complete the resource update will likely fail and raise an exception. To ensure that the resource update is completed successfully, an exception should be raised within the context manager as seen below:

1343         def _get_instance_type(self, context, instance, prefix, migration):
1344         """Get the instance type from instance."""
1345         stashed_flavors = migration.migration_type in ('resize',)
1346         if stashed_flavors:
1347             return getattr(instance, '%sflavor' % prefix)
1348         else:
1349             # NOTE(ndipanov): Certain migration types (all but resize)
1350             # do not change flavors so there is no need to stash
1351             # them. In that case - just get the instance flavor.
1352             return instance.flavor
1353 
1354     def _get_usage_dict(self, object_or_dict, **updates):
1355         """Make a usage dict _update methods expect.
1356 
1357         Accepts a dict or an Instance or Flavor object, and a set of updates.
1358         Converts the object to a dict and applies the updates.
1359 
1360         :param object_or_dict: instance or flavor as an object or just a dict
1361         :param updates: key-value pairs to update the passed object.
1362                         Currently only considers 'numa_topology', all other
1363                         keys are ignored.
1364 
1365         :returns: a dict with all the information from object_or_dict updated
1366                   with updates
1367         """
1368         usage = {}
1369         if isinstance(object_or_dict, objects.Instance):
1370             usage = {'memory_mb': object_or_dict.flavor.memory_mb,
1371                      'vcpus': object_or_dict.flavor.vcpus,
1372                      'root_gb': object_or_dict.flavor.root_gb,
1373                      'ephemeral_gb': object_or_dict.flavor.ephemeral_gb,
1374                      'numa_topology': object_or_dict.numa_topology}
1375         elif isinstance(object_or_dict, objects.Flavor):
1376             usage = obj_base.obj_to_primitive(object_or_dict)
1377         else:
1378             usage.update(object_or_dict)
1379 
1380         for key in ('numa_topology',):
1381             if key in updates:
1382                 usage[key] = updates[key]
1383         return usage
1384 
1385     def update_available_resource(self, context, nodename, **kwargs):
1386         with utils.synchronized(COMPUTE_RESOURCE_SEMAPHORE):
1387             if not (self.host in kwargs and nodename in kwargs[self.host]):
1388                 assert self.disabled(nodename), (
1389                     'Unexpected failure during the compute node resource '
1390                     'update')
1391                 raise exception.ComputeHostNotFound(host=self.host)
1392             resources = kwargs[self.host][nodename]
1393             LOG.debug("Auditing locally available compute resources for "
1394                       "%(host)s (node: %(node)s)",
1395                      {'node': nodename, 'host': self.host})
1396             # NOTE(jaypipes): The resources['hypervisor_hostname'] field now
1397             # contains a non-None value, even for non-Ironic nova-compute hosts. It
1398             # is this value that will be populated in the compute_nodes table.
1399             resources['host_ip'] = CONF.my_ip
1400             self._verify_resources(resources)
1401             self._report_hypervisor_resource_view(resources)
1402             self._update_available_resource(context, resources)