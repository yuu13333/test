**CWE-20: Improper Input Validation**

CWE-20 occurs when an application fails to validate its inputs, which could allow an attacker to inject malicious or unexpected inputs and compromise the application's security.

In the code above, the function `finalize()` in the class `QmlProfilerStatisticsModel` fails to properly validate the size of the vector `durations` before casting it to a `qint64`. This can lead to undefined behavior and security risks if the size of the vector is unexpectedly large.

**Solution:**

To resolve this issue, the code should be modified to validate the size of the vector `durations` before casting it to a `qint64`. This can be done using a conditional statement or by using the `std::numeric_limits` library to check for overflow.

Here is the modified code:

```cpp
void QmlProfilerStatisticsModel::finalize()
{
    const size_t size = durations.size();
    if (size < std::numeric_limits<qint64>::max()) {
        calls = static_cast<qint64>(size);
    } else {
        calls = std::numeric_limits<qint64>::max();
    }

    if (size > 0) {
        std::sort(durations.begin(), durations.end());
        minimum = durations.front();
        maximum = durations.back();
        const size_t half = size / 2;
        median = (size % 2) ? durations[half + 1]
                              : ((durations[half] + durations[half + 1]) / 2ll);
        durations.clear();
    }
}
```