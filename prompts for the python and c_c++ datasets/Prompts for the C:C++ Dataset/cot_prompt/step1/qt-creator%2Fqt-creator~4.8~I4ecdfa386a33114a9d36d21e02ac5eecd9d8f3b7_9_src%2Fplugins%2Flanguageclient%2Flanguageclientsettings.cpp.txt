Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
LSP: Create settings widget based on settings type

Change-Id: I4ecdfa386a33114a9d36d21e02ac5eecd9d8f3b7

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2018 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "languageclientsettings.h"
27 
28 #include "baseclient.h"
29 #include "languageclientmanager.h"
30 #include "languageclient_global.h"
31 
32 #include <coreplugin/icore.h>
33 #include <utils/algorithm.h>
34 #include <utils/delegates.h>
35 #include <utils/qtcprocess.h>
36 #include <utils/mimetypes/mimedatabase.h>
37 #include <languageserverprotocol/lsptypes.h>
38 
39 #include <QBoxLayout>
40 #include <QCheckBox>
41 #include <QComboBox>
42 #include <QCompleter>
43 #include <QCoreApplication>
44 #include <QDir>
45 #include <QFileInfo>
46 #include <QHeaderView>
47 #include <QLabel>
48 #include <QPushButton>
49 #include <QSettings>
50 #include <QStyledItemDelegate>
51 #include <QTreeView>
52 
53 constexpr char nameKey[] = "name";
54 constexpr char enabledKey[] = "enabled";
55 constexpr char mimeTypeKey[] = "mimeType";
56 constexpr char executableKey[] = "executable";
57 constexpr char argumentsKey[] = "arguments";
58 constexpr char settingsGroupKey[] = "LanguageClient";
59 constexpr char clientsKey[] = "clients";
60 
61 namespace LanguageClient {
62 
63 class LanguageClientSettingsModel : public QAbstractListModel
64 {
65 public:
66     LanguageClientSettingsModel() = default;
67     ~LanguageClientSettingsModel();
68 
69     // QAbstractItemModel interface
70     int rowCount(const QModelIndex &/*parent*/ = QModelIndex()) const final { return m_settings.count(); }
71     QVariant data(const QModelIndex &index, int role) const final;
72     bool removeRows(int row, int count = 1, const QModelIndex &parent = QModelIndex()) final;
73     bool insertRows(int row, int count = 1, const QModelIndex &parent = QModelIndex()) final;
74     bool setData(const QModelIndex &index, const QVariant &value, int role) final;
75     Qt::ItemFlags flags(const QModelIndex &index) const final;
76 
77     void reset(const QList<StdIOSettings *> &settings);
78     QList<StdIOSettings *> settings() const { return m_settings; }
79     QList<StdIOSettings *> removed() const { return m_removed; }
80     StdIOSettings *settingForIndex(const QModelIndex &index) const;
81 
82 private:
83     QList<StdIOSettings *> m_settings; // owned
84     QList<StdIOSettings *> m_removed;
85 };
86 
87 class LanguageClientSettingsPageWidget : public QWidget
88 {
89 public:
90     LanguageClientSettingsPageWidget(LanguageClientSettingsModel &settings);
91     void activated(const QModelIndex &index);
92     void applyCurrentSettings();
93 
94 private:
95     LanguageClientSettingsModel &m_settings;
96     QTreeView *m_view = nullptr;
97     QPair<StdIOSettings *, QWidget*> m_currentSettings = {nullptr, nullptr};
98 
99     void addItem();
100     void deleteItem();
101 };
102 
103 class LanguageClientSettingsPage : public Core::IOptionsPage
104 {
105 public:
106     LanguageClientSettingsPage();
107     ~LanguageClientSettingsPage() override;
108 
109     void init();
110 
111     // IOptionsPage interface
112     QWidget *widget() override;
113     void apply() override;
114     void finish() override;
115 
116 private:
117     LanguageClientSettingsModel m_model;
118     QList<StdIOSettings *> m_settings; // owned
119     QPointer<LanguageClientSettingsPageWidget> m_widget;
120 };
121 
122 class LanguageChooseDelegate : public QStyledItemDelegate
123 {
124 public:
125     QWidget *createEditor(QWidget *parent,
126                           const QStyleOptionViewItem &option,
127                           const QModelIndex &index) const override;
128     void setEditorData(QWidget *editor, const QModelIndex &index) const override;
129 };
130 
131 QWidget *LanguageChooseDelegate::createEditor(QWidget *parent,
132                                               const QStyleOptionViewItem &option,
133                                               const QModelIndex &index) const
134 {
135     Q_UNUSED(option);
136     Q_UNUSED(index);
137     auto editor = new QComboBox(parent);
138     editor->addItem(noLanguageFilter);
139     editor->addItems(LanguageServerProtocol::languageIds().values());
140     return editor;
141 }
142 
143 void LanguageChooseDelegate::setEditorData(QWidget *editor, const QModelIndex &index) const
144 {
145     if (auto comboBox = qobject_cast<QComboBox*>(editor))
146         comboBox->setCurrentText(index.data().toString());
147 }
148 
149 LanguageClientSettingsPageWidget::LanguageClientSettingsPageWidget(LanguageClientSettingsModel &settings)
150     : m_settings(settings)
151     , m_view(new QTreeView())
152 {
153     auto mainLayout = new QVBoxLayout();
154     auto layout = new QHBoxLayout();
155     m_view->setModel(&m_settings);
156     m_view->setHeaderHidden(true);
157     m_view->setSelectionMode(QAbstractItemView::SingleSelection);
158     m_view->setSelectionBehavior(QAbstractItemView::SelectItems);
159     connect(m_view->selectionModel(), &QItemSelectionModel::currentChanged,
160             this, &LanguageClientSettingsPageWidget::activated);
161     auto mimeTypes = Utils::transform(Utils::allMimeTypes(), [](const Utils::MimeType &mimeType){
162         return mimeType.name();
163     });
164     auto buttonLayout = new QVBoxLayout();
165     auto addButton = new QPushButton(tr("&Add"));
166     connect(addButton, &QPushButton::pressed, this, &LanguageClientSettingsPageWidget::addItem);
167     auto deleteButton = new QPushButton(tr("&Delete"));
168     connect(deleteButton, &QPushButton::pressed, this, &LanguageClientSettingsPageWidget::deleteItem);
169 
170     mainLayout->addLayout(layout);
171     setLayout(mainLayout);
172     layout->addWidget(m_view);
173     layout->addLayout(buttonLayout);
174     buttonLayout->addWidget(addButton);
175     buttonLayout->addWidget(deleteButton);
176     buttonLayout->addStretch(10);
177 }
178 
179 void LanguageClientSettingsPageWidget::activated(const QModelIndex &index)
180 {
181     if (m_currentSettings.second) {
182         applyCurrentSettings();
183         layout()->removeWidget(m_currentSettings.second);
184         delete m_currentSettings.second;
185     }
186 
187     m_currentSettings.first = m_settings.settingForIndex(index);
188     m_currentSettings.second = m_currentSettings.first->createSettingsWidget(this);
189     layout()->addWidget(m_currentSettings.second);
190 }
191 
192 void LanguageClientSettingsPageWidget::applyCurrentSettings()
193 {
194     if (m_currentSettings.first)
195         m_currentSettings.first->applyFromSettingsWidget(m_currentSettings.second);
196 }
197 
198 void LanguageClientSettingsPageWidget::addItem()
199 {
200     const int row = m_settings.rowCount();
201     m_settings.insertRows(row);
202 }
203 
204 void LanguageClientSettingsPageWidget::deleteItem()
205 {
206     auto index = m_view->currentIndex();
207     if (index.isValid())
208         m_settings.removeRows(index.row());
209 }
210 
211 LanguageClientSettingsPage::LanguageClientSettingsPage()
212 {
213     setId("LanguageClient.General");
214     setDisplayName(tr("General"));
215     setCategory(Constants::LANGUAGECLIENT_SETTINGS_CATEGORY);
216     setDisplayCategory(QCoreApplication::translate("LanguageClient",
217                                                    Constants::LANGUAGECLIENT_SETTINGS_TR));
218     setCategoryIcon(Utils::Icon({{":/languageclient/images/settingscategory_languageclient.png",
219                     Utils::Theme::PanelTextColorDark}}, Utils::Icon::Tint));
220 }
221 
222 LanguageClientSettingsPage::~LanguageClientSettingsPage()
223 {
224     if (m_widget)
225         delete m_widget;
226     qDeleteAll(m_settings);
227 }
228 
229 void LanguageClientSettingsPage::init()
230 {
231     m_model.reset(LanguageClientSettings::fromSettings(Core::ICore::settings()));
232     apply();
233 }
234 
235 QWidget *LanguageClientSettingsPage::widget()
236 {
237     if (!m_widget)
238         m_widget = new LanguageClientSettingsPageWidget(m_model);
239     return m_widget;
240 }
241 
242 void LanguageClientSettingsPage::apply()
243 {
244     qDeleteAll(m_settings);
245     if (m_widget)
246         m_widget->applyCurrentSettings();
247     m_settings = Utils::transform(m_model.settings(), [](const StdIOSettings *other){
248         return dynamic_cast<StdIOSettings *>(other->copy());
249     });
250     LanguageClientSettings::toSettings(Core::ICore::settings(), m_settings);
251 
252     QList<StdIOSettings *> restarts = Utils::filtered(m_settings, &StdIOSettings::needsRestart);
253     for (auto setting : restarts + m_model.removed()) {
254         if (auto client = setting->m_client) {
255             if (client->reachable())
256                 client->shutdown();
257             else
258                 LanguageClientManager::deleteClient(client);
259         }
260     }
261     for (StdIOSettings *setting : m_settings) {
262         if (setting && setting->isValid() && setting->m_enabled) {
263             if (auto client = setting->createClient()) {
264                 setting->m_client = client;
265                 LanguageClientManager::startClient(client);
266             }
267         }
268     }
269 }
270 
271 void LanguageClientSettingsPage::finish()
272 {
273     m_model.reset(m_settings);
274 }
275 
276 LanguageClientSettingsModel::~LanguageClientSettingsModel()
277 {
278     qDeleteAll(m_settings);
279 }
280 
281 QVariant LanguageClientSettingsModel::data(const QModelIndex &index, int role) const
282 {
283     StdIOSettings *setting = settingForIndex(index);
284     if (!setting)
285         return QVariant();
286     if (role == Qt::DisplayRole)
287         return setting->m_name;
288     else if (role == Qt::CheckStateRole)
289         return setting->m_enabled ? Qt::Checked : Qt::Unchecked;
290     return QVariant();
291 }
292 
293 bool LanguageClientSettingsModel::removeRows(int row, int count, const QModelIndex &parent)
294 {
295     if (row >= int(m_settings.size()))
296         return false;
297     const int end = qMin(row + count - 1, int(m_settings.size()) - 1);
298     beginRemoveRows(parent, row, end);
299     for (auto i = end; i >= row; --i)
300         m_removed << m_settings.takeAt(i);
301     endRemoveRows();
302     return true;
303 }
304 
305 bool LanguageClientSettingsModel::insertRows(int row, int count, const QModelIndex &parent)
306 {
307     if (row > m_settings.size() || row < 0)
308         return false;
309     beginInsertRows(parent, row, row + count - 1);
310     for (int i = 0; i < count; ++i)
311         m_settings.insert(row + i, new StdIOSettings());
312     endInsertRows();
313     return true;
314 }
315 
316 bool LanguageClientSettingsModel::setData(const QModelIndex &index, const QVariant &value, int role)
317 {
318     StdIOSettings *setting = settingForIndex(index);
319     if (!setting || role != Qt::CheckStateRole)
320         return false;
321 
322     if (setting->m_enabled != value.toBool()) {
323         setting->m_enabled = !setting->m_enabled;
324         emit dataChanged(index, index, { Qt::CheckStateRole });
325     }
326     return true;
327 }
328 
329 Qt::ItemFlags LanguageClientSettingsModel::flags(const QModelIndex &/*index*/) const
330 {
331     return Qt::ItemIsSelectable | Qt::ItemIsEnabled | Qt::ItemIsUserCheckable;
332 }
333 
334 void LanguageClientSettingsModel::reset(const QList<StdIOSettings *> &settings)
335 {
336     beginResetModel();
337     qDeleteAll(m_settings);
338     qDeleteAll(m_removed);
339     m_removed.clear();
340     m_settings = Utils::transform(settings, [](const StdIOSettings *other){
341         return dynamic_cast<StdIOSettings *>(other->copy());
342     });
343     endResetModel();
344 }
345 
346 StdIOSettings *LanguageClientSettingsModel::settingForIndex(const QModelIndex &index) const
347 {
348     if (!index.isValid() || index.row() > m_settings.size())
349         return nullptr;
350     return m_settings[index.row()];
351 }
352 
353 void BaseSettings::applyFromSettingsWidget(QWidget *widget)
354 {
355     if (auto settingsWidget = qobject_cast<BaseSettingsWidget *>(widget)) {
356         m_name = settingsWidget->name();
357         m_mimeType = settingsWidget->mimeType();
358     }
359 }
360 
361 QWidget *BaseSettings::createSettingsWidget(QWidget *parent) const
362 {
363     return new BaseSettingsWidget(this, parent);
364 }
365 
366 bool BaseSettings::needsRestart() const
367 {
368     return m_client ? !m_enabled || m_client->needsRestart(this) : m_enabled;
369 }
370 
371 bool BaseSettings::isValid() const
372 {
373     return !m_name.isEmpty();
374 }
375 
376 BaseClient *BaseSettings::createClient() const
377 {
378     return nullptr;
379 }
380 
381 QVariantMap BaseSettings::toMap() const
382 {
383     QVariantMap map;
384     map.insert(nameKey, m_name);
385     map.insert(enabledKey, m_enabled);
386     map.insert(mimeTypeKey, m_mimeType);
387     return map;
388 }
389 
390 void BaseSettings::fromMap(const QVariantMap &map)
391 {
392     m_name = map[nameKey].toString();
393     m_enabled = map[enabledKey].toBool();
394     m_mimeType = map[mimeTypeKey].toString();
395 }
396 
397 void LanguageClientSettings::init()
398 {
399     static LanguageClientSettingsPage settingsPage;
400     settingsPage.init();
401 }
402 
403 QList<StdIOSettings *> LanguageClientSettings::fromSettings(QSettings *settingsIn)
404 {
405     settingsIn->beginGroup(settingsGroupKey);
406     auto variants = settingsIn->value(clientsKey).toList();
407     auto settings = Utils::transform(variants, [](const QVariant& var){
408         auto settings = new StdIOSettings();
409         settings->fromMap(var.toMap());
410         return settings;
411     });
412     settingsIn->endGroup();
413     return settings;
414 }
415 
416 void LanguageClientSettings::toSettings(QSettings *settings, const QList<StdIOSettings *> &languageClientSettings)
417 {
418     settings->beginGroup(settingsGroupKey);
419     settings->setValue(clientsKey, Utils::transform(languageClientSettings,
420                                                     [](const StdIOSettings *setting){
421         return QVariant(setting->toMap());
422     }));
423     settings->endGroup();
424 }
425 
426 void StdIOSettings::applyFromSettingsWidget(QWidget *widget)
427 {
428     if (auto settingsWidget = qobject_cast<StdIOSettingsWidget *>(widget)) {
429         BaseSettings::applyFromSettingsWidget(settingsWidget);
430         m_executable = settingsWidget->executable();
431         m_arguments = settingsWidget->arguments();
432     }
433 }
434 
435 QWidget *StdIOSettings::createSettingsWidget(QWidget *parent) const
436 {
437     return new StdIOSettingsWidget(this, parent);
438 }
439 
440 bool StdIOSettings::needsRestart() const
441 {
442     if (BaseSettings::needsRestart())
443         return true;
444     if (auto stdIOClient = qobject_cast<StdIOClient *>(m_client))
445         return stdIOClient->needsRestart(this);
446     return false;
447 }
448 
449 bool StdIOSettings::isValid() const
450 {
451     return BaseSettings::isValid() && !m_executable.isEmpty();
452 }
453 
454 BaseClient *StdIOSettings::createClient() const
455 {
456     auto client = new StdIOClient(m_executable, m_arguments);
457     client->setName(m_name);
458     if (m_mimeType != noLanguageFilter)
459         client->setSupportedMimeType({m_mimeType});
460     return client;
461 }
462 
463 QVariantMap StdIOSettings::toMap() const
464 {
465     QVariantMap map = BaseSettings::toMap();
466     map.insert(executableKey, m_executable);
467     map.insert(argumentsKey, m_arguments);
468     return map;
469 }
470 
471 void StdIOSettings::fromMap(const QVariantMap &map)
472 {
473     BaseSettings::fromMap(map);
474     m_executable = map[executableKey].toString();
475     m_arguments = map[argumentsKey].toString();
476 }
477 
478 BaseSettingsWidget::BaseSettingsWidget(const BaseSettings *settings, QWidget *parent)
479     : QWidget(parent)
480     , m_name(new QLineEdit(settings->m_name, this))
481     , m_mimeType(new QLineEdit(settings->m_mimeType, this))
482 {
483     auto *mainLayout = new QGridLayout(this);
484     mainLayout->addWidget(new QLabel(tr("Name:")), 0, 0);
485     mainLayout->addWidget(m_name, 0, 1);
486     mainLayout->addWidget(new QLabel(tr("Language:")), 1, 0);
487     mainLayout->addWidget(m_mimeType, 1 , 1);
488 
489     auto mimeTypes = Utils::transform(Utils::allMimeTypes(), [](const Utils::MimeType &mimeType){
490         return mimeType.name();
491     });
492     auto mimeTypeCompleter = new QCompleter(mimeTypes);
493     mimeTypeCompleter->setCaseSensitivity(Qt::CaseInsensitive);
494     mimeTypeCompleter->setFilterMode(Qt::MatchContains);
495     m_mimeType->setCompleter(mimeTypeCompleter);
496 
497     setLayout(mainLayout);
498 }
499 
500 QString BaseSettingsWidget::name() const
501 {
502     return m_name->text();
503 }
504 
505 QString BaseSettingsWidget::mimeType() const
506 {
507     return m_mimeType->text();
508 }
509 
510 StdIOSettingsWidget::StdIOSettingsWidget(const StdIOSettings *settings, QWidget *parent)
511     : BaseSettingsWidget(settings, parent)
512     , m_executable(new Utils::PathChooser(this))
513     , m_arguments(new QLineEdit(settings->m_arguments, this))
514 {
515     auto mainLayout = qobject_cast<QGridLayout *>(layout());
516     QTC_ASSERT(mainLayout, return);
517     const int baseRows = mainLayout->rowCount();
518     mainLayout->addWidget(new QLabel(tr("Executable:")), baseRows, 0);
519     mainLayout->addWidget(m_executable, baseRows, 1);
520     mainLayout->addWidget(new QLabel(tr("Arguments:")), baseRows + 1, 0);
521     m_executable->setExpectedKind(Utils::PathChooser::Command);
522     m_executable->setPath(QDir::toNativeSeparators(settings->m_executable));
523     mainLayout->addWidget(m_arguments, baseRows + 1, 1);
524 }
525 
526 QString StdIOSettingsWidget::executable() const
527 {
528     return m_executable->path();
529 }
530 
531 QString StdIOSettingsWidget::arguments() const
532 {
533     return m_arguments->text();
534 }
535 
536 } // namespace LanguageClient
