Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Add qAddPreRoutine and Q_STARTUP_FUNCTION (convenience wrapper).

This is necessary for initializing things in a library, which require
a QCoreApplication instance (unlike Q_CONSTRUCTOR_FUNCTION, which runs
before that). Example use cases: KCrash (segv handler), and KCheckAccelerators
(debugging tool triggered by magic key combination).

Change-Id: I5f4c4699dd4d21aea72b007989ba57467e86ed10

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
4 ** Contact: http://www.qt-project.org/legal
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and Digia.  For licensing terms and
14 ** conditions see http://qt.digia.com/licensing.  For further information
15 ** use the contact form at http://qt.digia.com/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 2.1 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL included in the
21 ** packaging of this file.  Please review the following information to
22 ** ensure the GNU Lesser General Public License version 2.1 requirements
23 ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
24 **
25 ** In addition, as a special exception, Digia gives you certain additional
26 ** rights.  These rights are described in the Digia Qt LGPL Exception
27 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
28 **
29 ** GNU General Public License Usage
30 ** Alternatively, this file may be used under the terms of the GNU
31 ** General Public License version 3.0 as published by the Free Software
32 ** Foundation and appearing in the file LICENSE.GPL included in the
33 ** packaging of this file.  Please review the following information to
34 ** ensure the GNU General Public License version 3.0 requirements will be
35 ** met: http://www.gnu.org/copyleft/gpl.html.
36 **
37 **
38 ** $QT_END_LICENSE$
39 **
40 ****************************************************************************/
41 
42 #ifndef QCOREAPPLICATION_H
43 #define QCOREAPPLICATION_H
44 
45 #include <QtCore/qobject.h>
46 #include <QtCore/qcoreevent.h>
47 #include <QtCore/qeventloop.h>
48 
49 #if defined(Q_OS_WIN) && !defined(tagMSG)
50 typedef struct tagMSG MSG;
51 #endif
52 
53 QT_BEGIN_HEADER
54 
55 QT_BEGIN_NAMESPACE
56 
57 
58 class QCoreApplicationPrivate;
59 class QTextCodec;
60 class QTranslator;
61 class QPostEventList;
62 class QStringList;
63 class QAbstractEventDispatcher;
64 class QAbstractNativeEventFilter;
65 
66 #define qApp QCoreApplication::instance()
67 
68 class Q_CORE_EXPORT QCoreApplication : public QObject
69 {
70     Q_OBJECT
71     Q_PROPERTY(QString applicationName READ applicationName WRITE setApplicationName)
72     Q_PROPERTY(QString applicationVersion READ applicationVersion WRITE setApplicationVersion)
73     Q_PROPERTY(QString organizationName READ organizationName WRITE setOrganizationName)
74     Q_PROPERTY(QString organizationDomain READ organizationDomain WRITE setOrganizationDomain)
75     Q_PROPERTY(bool quitLockEnabled READ isQuitLockEnabled WRITE setQuitLockEnabled)
76 
77     Q_DECLARE_PRIVATE(QCoreApplication)
78 public:
79     enum { ApplicationFlags = QT_VERSION
80     };
81 
82     QCoreApplication(int &argc, char **argv
83 #ifndef Q_QDOC
84                      , int = ApplicationFlags
85 #endif
86             );
87 
88     ~QCoreApplication();
89 
90     static QStringList arguments();
91 
92     static void setAttribute(Qt::ApplicationAttribute attribute, bool on = true);
93     static bool testAttribute(Qt::ApplicationAttribute attribute);
94 
95     static void setOrganizationDomain(const QString &orgDomain);
96     static QString organizationDomain();
97     static void setOrganizationName(const QString &orgName);
98     static QString organizationName();
99     static void setApplicationName(const QString &application);
100     static QString applicationName();
101     static void setApplicationVersion(const QString &version);
102     static QString applicationVersion();
103 
104     static QCoreApplication *instance() { return self; }
105 
106     static int exec();
107     static void processEvents(QEventLoop::ProcessEventsFlags flags = QEventLoop::AllEvents);
108     static void processEvents(QEventLoop::ProcessEventsFlags flags, int maxtime);
109     static void exit(int retcode=0);
110 
111     static bool sendEvent(QObject *receiver, QEvent *event);
112     static void postEvent(QObject *receiver, QEvent *event, int priority = Qt::NormalEventPriority);
113     static void sendPostedEvents(QObject *receiver = 0, int event_type = 0);
114     static void removePostedEvents(QObject *receiver, int eventType = 0);
115     static bool hasPendingEvents();
116     static QAbstractEventDispatcher *eventDispatcher();
117     static void setEventDispatcher(QAbstractEventDispatcher *eventDispatcher);
118 
119     virtual bool notify(QObject *, QEvent *);
120 
121     static bool startingUp();
122     static bool closingDown();
123 
124     static QString applicationDirPath();
125     static QString applicationFilePath();
126     static qint64 applicationPid();
127 
128 #ifndef QT_NO_LIBRARY
129     static void setLibraryPaths(const QStringList &);
130     static QStringList libraryPaths();
131     static void addLibraryPath(const QString &);
132     static void removeLibraryPath(const QString &);
133 #endif // QT_NO_LIBRARY
134 
135 #ifndef QT_NO_TRANSLATION
136     static bool installTranslator(QTranslator * messageFile);
137     static bool removeTranslator(QTranslator * messageFile);
138 #endif
139 
140     static QString translate(const char * context,
141                              const char * key,
142                              const char * disambiguation = 0,
143                              int n = -1);
144 #if QT_DEPRECATED_SINCE(5, 0)
145     enum Encoding { UnicodeUTF8, Latin1, DefaultCodec = UnicodeUTF8, CodecForTr = UnicodeUTF8 };
146     QT_DEPRECATED static inline QString translate(const char * context, const char * key,
147                              const char * disambiguation, Encoding, int n = -1)
148         { return translate(context, key, disambiguation, n); }
149 #endif
150 
151     static void flush();
152 
153     void installNativeEventFilter(QAbstractNativeEventFilter *filterObj);
154     void removeNativeEventFilter(QAbstractNativeEventFilter *filterObj);
155 
156     static bool isQuitLockEnabled();
157     static void setQuitLockEnabled(bool enabled);
158 
159 public Q_SLOTS:
160     static void quit();
161 
162 Q_SIGNALS:
163     void aboutToQuit(
164 #if !defined(qdoc)
165     QPrivateSignal
166 #endif
167     );
168 
169 protected:
170     bool event(QEvent *);
171 
172     virtual bool compressEvent(QEvent *, QObject *receiver, QPostEventList *);
173 
174 protected:
175     QCoreApplication(QCoreApplicationPrivate &p);
176 
177 private:
178     static bool sendSpontaneousEvent(QObject *receiver, QEvent *event);
179     bool notifyInternal(QObject *receiver, QEvent *event);
180 
181     void init();
182 
183     static QCoreApplication *self;
184 
185     Q_DISABLE_COPY(QCoreApplication)
186 
187     friend class QEventDispatcherUNIXPrivate;
188     friend class QApplication;
189     friend class QApplicationPrivate;
190     friend class QGuiApplication;
191     friend class QGuiApplicationPrivate;
192     friend class QETWidget;
193     friend class QWidget;
194     friend class QWidgetWindow;
195     friend class QWidgetPrivate;
196     friend class QCocoaEventDispatcherPrivate;
197     friend bool qt_sendSpontaneousEvent(QObject*, QEvent*);
198     friend Q_CORE_EXPORT QString qAppName();
199     friend class QClassFactory;
200 };
201 
202 inline bool QCoreApplication::sendEvent(QObject *receiver, QEvent *event)
203 {  if (event) event->spont = false; return self ? self->notifyInternal(receiver, event) : false; }
204 
205 inline bool QCoreApplication::sendSpontaneousEvent(QObject *receiver, QEvent *event)
206 { if (event) event->spont = true; return self ? self->notifyInternal(receiver, event) : false; }
207 
208 #ifdef QT_NO_TRANSLATION
209 inline QString QCoreApplication::translate(const char *, const char *sourceText, const char *, int)
210 {
211     return QString::fromUtf8(sourceText);
212 }
213 #endif
214 
215 #define Q_DECLARE_TR_FUNCTIONS(context) \
216 public: \
217     static inline QString tr(const char *sourceText, const char *disambiguation = 0, int n = -1) \
218         { return QCoreApplication::translate(#context, sourceText, disambiguation, n); } \
219     QT_DEPRECATED static inline QString trUtf8(const char *sourceText, const char *disambiguation = 0, int n = -1) \
220         { return QCoreApplication::translate(#context, sourceText, disambiguation, n); } \
221 private:
222 
223 typedef void (*QtStartUpFunction)();
224 typedef void (*QtCleanUpFunction)();
225 
226 Q_CORE_EXPORT void qAddPreRoutine(QtStartUpFunction);
227 Q_CORE_EXPORT void qAddPostRoutine(QtCleanUpFunction);
228 Q_CORE_EXPORT void qRemovePostRoutine(QtCleanUpFunction);
229 Q_CORE_EXPORT QString qAppName();                // get application name
230 
231 #define Q_COREAPP_STARTUP_FUNCTION(AFUNC) \
232     static void AFUNC ## _ctor_function() {  \
233         qAddPreRoutine(AFUNC);        \
234     }                                 \
235     Q_CONSTRUCTOR_FUNCTION(AFUNC ## _ctor_function)
236 
237 #if defined(Q_OS_WIN) && !defined(QT_NO_DEBUG_STREAM)
238 Q_CORE_EXPORT QString decodeMSG(const MSG &);
239 Q_CORE_EXPORT QDebug operator<<(QDebug, const MSG &);
240 #endif
241 
242 QT_END_NAMESPACE
243 
244 QT_END_HEADER
245 
246 #endif // QCOREAPPLICATION_H
