Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Clang: Optimize clang overview model

Build the tree in only one loop.

Task-number: QTCREATORBUG-20205
Change-Id: I34c58bca30c4494005a029abd82c7e612ecd6fb9

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2018 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "clangoverviewmodel.h"
27 
28 #include "clangeditordocumentprocessor.h"
29 #include "clangutils.h"
30 
31 #include <cplusplus/Icons.h>
32 
33 #include <utils/dropsupport.h>
34 #include <utils/linecolumn.h>
35 #include <utils/qtcassert.h>
36 
37 using TokenContainer = ClangBackEnd::TokenInfoContainer;
38 using TokenContainers = QVector<TokenContainer>;
39 
40 namespace ClangCodeModel {
41 namespace Internal {
42 
43 void addFirstItem(TokenTreeItem *root)
44 {
45     ClangBackEnd::ExtraInfo extraInfo;
46     if (!root->childCount()) {
47         extraInfo.token = Utf8String::fromString(
48                     QString(QT_TRANSLATE_NOOP("ClangCodeModel", "<No Symbols>")));
49     } else {
50         extraInfo.token = Utf8String::fromString(
51                     QString(QT_TRANSLATE_NOOP("ClangCodeModel", "<Select Symbol>")));
52     }
53     ClangBackEnd::HighlightingTypes types;
54     types.mainHighlightingType = ClangBackEnd::HighlightingType::Invalid;
55     TokenContainer firstItem(0, 0, 0, types, extraInfo);
56     root->prependChild(new TokenTreeItem(firstItem));
57 }
58 
59 void buildTree(const TokenContainers& containers,
60                TokenTreeItem *root)
61 {
62     // Most of the nodes are not used at all therefore use unordered_map instead of vector.
63     std::unordered_map<int, TokenTreeItem *> treeItemCache;
64     for (int index = 0; index < containers.size(); ++index) {
65         const TokenContainer &container = containers[index];
66         if (!container.extraInfo.declaration ||
67                 (container.types.mainHighlightingType
68                  == ClangBackEnd::HighlightingType::LocalVariable)) {
69             continue;
70         }
71 
72         auto *item = new TokenTreeItem(container);
73         treeItemCache[index] = item;
74 
75         const int lexicalParentIndex = container.extraInfo.lexicalParentIndex;
76         QTC_ASSERT(lexicalParentIndex < index, return;);
77 
78         TokenTreeItem *parent = root;
79         if (lexicalParentIndex >= 0 && treeItemCache[lexicalParentIndex])
80             parent = treeItemCache[lexicalParentIndex];
81 
82         parent->appendChild(item);
83     }
84 
85     addFirstItem(root);
86 }
87 
88 static QString addResultTypeToFunctionSignature(const QString &signature,
89                                                 const ClangBackEnd::ExtraInfo &extraInfo)
90 {
91     return signature + extraInfo.typeSpelling.toString() + QLatin1String(" -> ", 4)
92             + extraInfo.resultTypeSpelling.toString();
93 }
94 
95 static QString addTypeToVariableName(const QString &name, const ClangBackEnd::ExtraInfo &extraInfo)
96 {
97     return name + QLatin1String(" -> ", 4) + extraInfo.typeSpelling.toString();
98 }
99 
100 QVariant TokenTreeItem::data(int column, int role) const
101 {
102     Q_UNUSED(column)
103 
104     if (token.types.mainHighlightingType == ClangBackEnd::HighlightingType::Invalid
105             && token.line == 0 && token.column == 0 && token.length == 0) {
106         if (role == Qt::DisplayRole)
107             return token.extraInfo.token.toString();
108         return QVariant();
109     }
110 
111     switch (role) {
112     case Qt::DisplayRole: {
113         QString name = token.extraInfo.token.toString();
114         ClangBackEnd::HighlightingType mainType = token.types.mainHighlightingType;
115 
116         if (mainType == ClangBackEnd::HighlightingType::VirtualFunction
117                     || mainType == ClangBackEnd::HighlightingType::Function) {
118             name = addResultTypeToFunctionSignature(name, token.extraInfo);
119         } else if (mainType == ClangBackEnd::HighlightingType::GlobalVariable
120                    || mainType == ClangBackEnd::HighlightingType::Field
121                    || mainType == ClangBackEnd::HighlightingType::QtProperty) {
122             name = addTypeToVariableName(name, token.extraInfo);
123             if (token.types.mixinHighlightingTypes.contains(
124                                         ClangBackEnd::HighlightingType::ObjectiveCProperty)) {
125                 name = QLatin1String("@property ") + name;
126             } else if (token.types.mixinHighlightingTypes.contains(
127                                                ClangBackEnd::HighlightingType::ObjectiveCMethod)) {
128                 if (token.extraInfo.storageClass == ClangBackEnd::StorageClass::Static)
129                     name = QLatin1Char('+') + name;
130                 else
131                     name = QLatin1Char('-') + name;
132             }
133         } else if (mainType == ClangBackEnd::HighlightingType::Type) {
134 
135             if (token.types.mixinHighlightingTypes.contains(
136                         ClangBackEnd::HighlightingType::ObjectiveCClass)) {
137                 name = QLatin1String("@class ") + name;
138             } else if (token.types.mixinHighlightingTypes.contains(
139                                                ClangBackEnd::HighlightingType::ObjectiveCProtocol)) {
140                 name = QLatin1String("@protocol ") + name;
141             } else if (token.types.mixinHighlightingTypes.contains(
142                                                ClangBackEnd::HighlightingType::ObjectiveCInterface)) {
143                 name = QLatin1String("@interface ") + name;
144             } else if (token.types.mixinHighlightingTypes.contains(
145                            ClangBackEnd::HighlightingType::ObjectiveCImplementation)) {
146                 name = QLatin1String("@implementation ") + name;
147             } else if (token.types.mixinHighlightingTypes.contains(
148                                                ClangBackEnd::HighlightingType::ObjectiveCCategory)) {
149                 name = name + " [category]";
150             }
151         }
152         return name;
153     }
154 
155     case Qt::EditRole: {
156         return token.extraInfo.token.toString();
157     }
158 
159     case Qt::DecorationRole: {
160         return CPlusPlus::Icons::iconForType(ClangCodeModel::Utils::iconTypeForToken(token));
161     }
162 
163     case CppTools::AbstractOverviewModel::FileNameRole: {
164         return token.extraInfo.cursorRange.start.filePath.toString();
165     }
166 
167     case CppTools::AbstractOverviewModel::LineNumberRole: {
168         return token.line;
169     }
170 
171     default:
172         return QVariant();
173     } // switch
174 }
175 
176 bool OverviewModel::rebuild(const QString &filePath)
177 {
178     ClangEditorDocumentProcessor *processor = ClangEditorDocumentProcessor::get(filePath);
179     if (!processor)
180         return false;
181     if (m_filePath != filePath) {
182         if (!m_filePath.isEmpty()) {
183             ClangEditorDocumentProcessor *previousProcessor
184                     = ClangEditorDocumentProcessor::get(m_filePath);
185             if (previousProcessor) {
186                 disconnect(previousProcessor, &ClangEditorDocumentProcessor::tokenInfosUpdated,
187                            this, &OverviewModel::needsUpdate);
188             }
189         }
190         m_filePath = filePath;
191         connect(processor, &ClangEditorDocumentProcessor::tokenInfosUpdated, this,
192                 &OverviewModel::needsUpdate);
193     }
194 
195     const TokenContainers &tokenContainers = processor->tokenInfos();
196     auto *root = new TokenTreeItem;
197     buildTree(tokenContainers, root);
198     setRootItem(root);
199 
200     return true;
201 }
202 
203 bool OverviewModel::isGenerated(const QModelIndex &) const
204 {
205     return false;
206 }
207 
208 ::Utils::Link OverviewModel::linkFromIndex(const QModelIndex &sourceIndex) const
209 {
210     TokenTreeItem *item = static_cast<TokenTreeItem *>(itemForIndex(sourceIndex));
211     if (!item)
212         return {};
213     return ::Utils::Link(m_filePath, static_cast<int>(item->token.line),
214                          static_cast<int>(item->token.column) - 1);
215 }
216 
217 ::Utils::LineColumn OverviewModel::lineColumnFromIndex(const QModelIndex &sourceIndex) const
218 {
219     TokenTreeItem *item = static_cast<TokenTreeItem *>(itemForIndex(sourceIndex));
220     if (!item)
221         return {};
222     ::Utils::LineColumn lineColumn;
223     lineColumn.line = static_cast<int>(item->token.line);
224     lineColumn.column = static_cast<int>(item->token.column);
225     return lineColumn;
226 }
227 
228 } // namespace Internal
229 } // namespace ClangCodeModel
