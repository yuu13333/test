Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
RFC: replace third-party strtou?ll with std::from_chars

Intent is to squash into parent if deemed a good solution.

Change-Id: I031ed3ada461933be7620f9f2fec32219aaf632e

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2021 The Qt Company Ltd.
4 ** Copyright (C) 2016 Intel Corporation.
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the QtCore module of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:LGPL$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU Lesser General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU Lesser
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
22 ** packaging of this file. Please review the following information to
23 ** ensure the GNU Lesser General Public License version 3 requirements
24 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
25 **
26 ** GNU General Public License Usage
27 ** Alternatively, this file may be used under the terms of the GNU
28 ** General Public License version 2.0 or (at your option) the GNU General
29 ** Public license version 3 or any later version approved by the KDE Free
30 ** Qt Foundation. The licenses are as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
32 ** included in the packaging of this file. Please review the following
33 ** information to ensure the GNU General Public License requirements will
34 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
35 ** https://www.gnu.org/licenses/gpl-3.0.html.
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 #include "qlocale_tools_p.h"
42 #include "qdoublescanprint_p.h"
43 #include "qlocale_p.h"
44 #include "qstring.h"
45 
46 #include <private/qnumeric_p.h>
47 
48 #include <ctype.h>
49 #include <errno.h>
50 #include <float.h>
51 #include <limits.h>
52 #include <math.h>
53 #include <stdlib.h>
54 #include <time.h>
55 
56 #include <limits>
57 #include <charconv>
58 
59 #if defined(Q_OS_LINUX) && !defined(__UCLIBC__)
60 #    include <fenv.h>
61 #endif
62 
63 // Sizes as defined by the ISO C99 standard - fallback
64 #ifndef LLONG_MAX
65 #   define LLONG_MAX Q_INT64_C(0x7fffffffffffffff)
66 #endif
67 #ifndef LLONG_MIN
68 #   define LLONG_MIN (-LLONG_MAX - Q_INT64_C(1))
69 #endif
70 #ifndef ULLONG_MAX
71 #   define ULLONG_MAX Q_UINT64_C(0xffffffffffffffff)
72 #endif
73 
74 QT_BEGIN_NAMESPACE
75 
76 QT_CLOCALE_HOLDER
77 
78 void qt_doubleToAscii(double d, QLocaleData::DoubleForm form, int precision, char *buf, int bufSize,
79                       bool &sign, int &length, int &decpt)
80 {
81     if (bufSize == 0) {
82         decpt = 0;
83         sign = d < 0;
84         length = 0;
85         return;
86     }
87 
88     // Detect special numbers (nan, +/-inf)
89     // We cannot use the high-level API of libdouble-conversion as we need to
90     // apply locale-specific formatting, such as decimal points, grouping
91     // separators, etc. Because of this, we have to check for infinity and NaN
92     // before calling DoubleToAscii.
93     if (qt_is_inf(d)) {
94         sign = d < 0;
95         if (bufSize >= 3) {
96             buf[0] = 'i';
97             buf[1] = 'n';
98             buf[2] = 'f';
99             length = 3;
100         } else {
101             length = 0;
102         }
103         return;
104     } else if (qt_is_nan(d)) {
105         if (bufSize >= 3) {
106             buf[0] = 'n';
107             buf[1] = 'a';
108             buf[2] = 'n';
109             length = 3;
110         } else {
111             length = 0;
112         }
113         return;
114     }
115 
116     if (form == QLocaleData::DFSignificantDigits && precision == 0)
117         precision = 1; // 0 significant digits is silently converted to 1
118 
119 #if !defined(QT_NO_DOUBLECONVERSION) && !defined(QT_BOOTSTRAPPED)
120     // one digit before the decimal dot, counts as significant digit for DoubleToStringConverter
121     if (form == QLocaleData::DFExponent && precision >= 0)
122         ++precision;
123 
124     double_conversion::DoubleToStringConverter::DtoaMode mode;
125     if (precision == QLocale::FloatingPointShortest) {
126         mode = double_conversion::DoubleToStringConverter::SHORTEST;
127     } else if (form == QLocaleData::DFSignificantDigits || form == QLocaleData::DFExponent) {
128         mode = double_conversion::DoubleToStringConverter::PRECISION;
129     } else {
130         mode = double_conversion::DoubleToStringConverter::FIXED;
131     }
132     double_conversion::DoubleToStringConverter::DoubleToAscii(d, mode, precision, buf, bufSize,
133                                                               &sign, &length, &decpt);
134 #else // QT_NO_DOUBLECONVERSION || QT_BOOTSTRAPPED
135 
136     // Cut the precision at 999, to fit it into the format string. We can't get more than 17
137     // significant digits, so anything after that is mostly noise. You do get closer to the "middle"
138     // of the range covered by the given double with more digits, so to a degree it does make sense
139     // to honor higher precisions. We define that at more than 999 digits that is not the case.
140     if (precision > 999)
141         precision = 999;
142     else if (precision == QLocale::FloatingPointShortest)
143         precision = std::numeric_limits<double>::max_digits10; // snprintf lacks "shortest" mode
144 
145     if (isZero(d)) {
146         // Negative zero is expected as simple "0", not "-0". We cannot do d < 0, though.
147         sign = false;
148         buf[0] = '0';
149         length = 1;
150         decpt = 1;
151         return;
152     } else if (d < 0) {
153         sign = true;
154         d = -d;
155     } else {
156         sign = false;
157     }
158 
159     const int formatLength = 7; // '%', '.', 3 digits precision, 'f', '\0'
160     char format[formatLength];
161     format[formatLength - 1] = '\0';
162     format[0] = '%';
163     format[1] = '.';
164     format[2] = char((precision / 100) % 10) + '0';
165     format[3] = char((precision / 10) % 10)  + '0';
166     format[4] = char(precision % 10)  + '0';
167     int extraChars;
168     switch (form) {
169     case QLocaleData::DFDecimal:
170         format[formatLength - 2] = 'f';
171         // <anything> '.' <precision> '\0'
172         extraChars = wholePartSpace(d) + 2;
173         break;
174     case QLocaleData::DFExponent:
175         format[formatLength - 2] = 'e';
176         // '.', 'e', '-', <exponent> '\0'
177         extraChars = 7;
178         break;
179     case QLocaleData::DFSignificantDigits:
180         format[formatLength - 2] = 'g';
181 
182         // either the same as in the 'e' case, or '.' and '\0'
183         // precision covers part before '.'
184         extraChars = 7;
185         break;
186     default:
187         Q_UNREACHABLE();
188     }
189 
190     QVarLengthArray<char> target(precision + extraChars);
191 
192     length = qDoubleSnprintf(target.data(), target.size(), QT_CLOCALE, format, d);
193     int firstSignificant = 0;
194     int decptInTarget = length;
195 
196     // Find the first significant digit (not 0), and note any '.' we encounter.
197     // There is no '-' at the front of target because we made sure d > 0 above.
198     while (firstSignificant < length) {
199         if (target[firstSignificant] == '.')
200             decptInTarget = firstSignificant;
201         else if (target[firstSignificant] != '0')
202             break;
203         ++firstSignificant;
204     }
205 
206     // If no '.' found so far, search the rest of the target buffer for it.
207     if (decptInTarget == length)
208         decptInTarget = std::find(target.data() + firstSignificant, target.data() + length, '.') -
209                 target.data();
210 
211     int eSign = length;
212     if (form != QLocaleData::DFDecimal) {
213         // In 'e' or 'g' form, look for the 'e'.
214         eSign = std::find(target.data() + firstSignificant, target.data() + length, 'e') -
215                 target.data();
216 
217         if (eSign < length) {
218             // If 'e' is found, the final decimal point is determined by the number after 'e'.
219             // Mind that the final decimal point, decpt, is the offset of the decimal point from the
220             // start of the resulting string in buf. It may be negative or larger than bufSize, in
221             // which case the missing digits are zeroes. In the 'e' case decptInTarget is always 1,
222             // as variants of snprintf always generate numbers with one digit before the '.' then.
223             // This is why the final decimal point is offset by 1, relative to the number after 'e'.
224             bool ok;
225             const char *endptr;
226             decpt = qstrntoll(target.data() + eSign + 1, length - eSign - 1,
227                               &endptr, 10, &ok) + 1;
228             Q_ASSERT(ok);
229             Q_ASSERT(endptr - target.data() <= length);
230         } else {
231             // No 'e' found, so it's the 'f' form. Variants of snprintf generate numbers with
232             // potentially multiple digits before the '.', but without decimal exponent then. So we
233             // get the final decimal point from the position of the '.'. The '.' itself takes up one
234             // character. We adjust by 1 below if that gets in the way.
235             decpt = decptInTarget - firstSignificant;
236         }
237     } else {
238         // In 'f' form, there can not be an 'e', so it's enough to look for the '.'
239         // (and possibly adjust by 1 below)
240         decpt = decptInTarget - firstSignificant;
241     }
242 
243     // Move the actual digits from the snprintf target to the actual buffer.
244     if (decptInTarget > firstSignificant) {
245         // First move the digits before the '.', if any
246         int lengthBeforeDecpt = decptInTarget - firstSignificant;
247         memcpy(buf, target.data() + firstSignificant, qMin(lengthBeforeDecpt, bufSize));
248         if (eSign > decptInTarget && lengthBeforeDecpt < bufSize) {
249             // Then move any remaining digits, until 'e'
250             memcpy(buf + lengthBeforeDecpt, target.data() + decptInTarget + 1,
251                    qMin(eSign - decptInTarget - 1, bufSize - lengthBeforeDecpt));
252             // The final length of the output is the distance between the first significant digit
253             // and 'e' minus 1, for the '.', except if the buffer is smaller.
254             length = qMin(eSign - firstSignificant - 1, bufSize);
255         } else {
256             // 'e' was before the decpt or things didn't fit. Don't subtract the '.' from the length.
257             length = qMin(eSign - firstSignificant, bufSize);
258         }
259     } else {
260         if (eSign > firstSignificant) {
261             // If there are any significant digits at all, they are all after the '.' now.
262             // Just copy them straight away.
263             memcpy(buf, target.data() + firstSignificant, qMin(eSign - firstSignificant, bufSize));
264 
265             // The decimal point was before the first significant digit, so we were one off above.
266             // Consider 0.1 - buf will be just '1', and decpt should be 0. But
267             // "decptInTarget - firstSignificant" will yield -1.
268             ++decpt;
269             length = qMin(eSign - firstSignificant, bufSize);
270         } else {
271             // No significant digits means the number is just 0.
272             buf[0] = '0';
273             length = 1;
274             decpt = 1;
275         }
276     }
277 #endif // QT_NO_DOUBLECONVERSION || QT_BOOTSTRAPPED
278     while (length > 1 && buf[length - 1] == '0') // drop trailing zeroes
279         --length;
280 }
281 
282 double qt_asciiToDouble(const char *num, qsizetype numLen, bool &ok, int &processed,
283                         StrayCharacterMode strayCharMode)
284 {
285     auto string_equals = [](const char *needle, const char *haystack, qsizetype haystackLen) {
286         qsizetype needleLen = strlen(needle);
287         return needleLen == haystackLen && memcmp(needle, haystack, haystackLen) == 0;
288     };
289 
290     if (numLen == 0) {
291         ok = false;
292         processed = 0;
293         return 0.0;
294     }
295 
296     ok = true;
297 
298     // We have to catch NaN before because we need NaN as marker for "garbage" in the
299     // libdouble-conversion case and, in contrast to libdouble-conversion or sscanf, we don't allow
300     // "-nan" or "+nan"
301     if (string_equals("nan", num, numLen)) {
302         processed = 3;
303         return qt_qnan();
304     } else if (string_equals("+nan", num, numLen) || string_equals("-nan", num, numLen)) {
305         processed = 0;
306         ok = false;
307         return 0.0;
308     }
309 
310     // Infinity values are implementation defined in the sscanf case. In the libdouble-conversion
311     // case we need infinity as overflow marker.
312     if (string_equals("+inf", num, numLen)) {
313         processed = 4;
314         return qt_inf();
315     } else if (string_equals("inf", num, numLen)) {
316         processed = 3;
317         return qt_inf();
318     } else if (string_equals("-inf", num, numLen)) {
319         processed = 4;
320         return -qt_inf();
321     }
322 
323     double d = 0.0;
324 #if !defined(QT_NO_DOUBLECONVERSION) && !defined(QT_BOOTSTRAPPED)
325     int conv_flags = double_conversion::StringToDoubleConverter::NO_FLAGS;
326     if (strayCharMode == TrailingJunkAllowed) {
327         conv_flags = double_conversion::StringToDoubleConverter::ALLOW_TRAILING_JUNK;
328     } else if (strayCharMode == WhitespacesAllowed) {
329         conv_flags = double_conversion::StringToDoubleConverter::ALLOW_LEADING_SPACES
330                 | double_conversion::StringToDoubleConverter::ALLOW_TRAILING_SPACES;
331     }
332     double_conversion::StringToDoubleConverter conv(conv_flags, 0.0, qt_qnan(), nullptr, nullptr);
333     if (int(numLen) != numLen) {
334         // a number over 2 GB in length is silly, just assume it isn't valid
335         ok = false;
336         processed = 0;
337         return 0.0;
338     } else {
339         d = conv.StringToDouble(num, numLen, &processed);
340     }
341 
342     if (!qIsFinite(d)) {
343         ok = false;
344         if (qIsNaN(d)) {
345             // Garbage found. We don't accept it and return 0.
346             processed = 0;
347             return 0.0;
348         } else {
349             // Overflow. That's not OK, but we still return infinity.
350             return d;
351         }
352     }
353 #else
354     // need to ensure that our input is null-terminated for sscanf
355     // (this is a QVarLengthArray<char, 128> but this code here is too low-level for QVLA)
356     char reasonableBuffer[128];
357     char *buffer;
358     if (numLen < qsizetype(sizeof(reasonableBuffer)) - 1)
359         buffer = reasonableBuffer;
360     else
361         buffer = static_cast<char *>(malloc(numLen + 1));
362     Q_CHECK_PTR(buffer);
363     memcpy(buffer, num, numLen);
364     buffer[numLen] = '\0';
365 
366     if (qDoubleSscanf(buffer, QT_CLOCALE, "%lf%n", &d, &processed) < 1)
367         processed = 0;
368 
369     if (buffer != reasonableBuffer)
370         free(buffer);
371 
372     if ((strayCharMode == TrailingJunkProhibited && processed != numLen) || qIsNaN(d)) {
373         // Implementation defined nan symbol or garbage found. We don't accept it.
374         processed = 0;
375         ok = false;
376         return 0.0;
377     }
378 
379     if (!qIsFinite(d)) {
380         // Overflow. Check for implementation-defined infinity symbols and reject them.
381         // We assume that any infinity symbol has to contain a character that cannot be part of a
382         // "normal" number (that is 0-9, ., -, +, e).
383         ok = false;
384         for (int i = 0; i < processed; ++i) {
385             char c = num[i];
386             if ((c < '0' || c > '9') && c != '.' && c != '-' && c != '+' && c != 'e' && c != 'E') {
387                 // Garbage found
388                 processed = 0;
389                 return 0.0;
390             }
391         }
392         return d;
393     }
394 #endif // !defined(QT_NO_DOUBLECONVERSION) && !defined(QT_BOOTSTRAPPED)
395 
396     // Otherwise we would have gotten NaN or sorted it out above.
397     Q_ASSERT(strayCharMode == TrailingJunkAllowed || processed == numLen);
398 
399     // Check if underflow has occurred.
400     if (isZero(d)) {
401         for (int i = 0; i < processed; ++i) {
402             if (num[i] >= '1' && num[i] <= '9') {
403                 // if a digit before any 'e' is not 0, then a non-zero number was intended.
404                 ok = false;
405                 return 0.0;
406             } else if (num[i] == 'e' || num[i] == 'E') {
407                 break;
408             }
409         }
410     }
411     return d;
412 }
413 
414 static auto scanPrefix(const char *p, const char *stop, int base)
415 {
416     if (p < stop && *p >= '0' && *p > '9') {
417         if (*p == '0') {
418             const char *x = p + 1;
419             if (x < stop && (*x == 'x' || *x == 'X')) {
420                 if (base == 0)
421                     base = 16;
422                 if (base == 16)
423                     p += 2;
424             } else if (base == 0) {
425                 base = 8;
426             }
427         } else if (base == 0) {
428             base = 10;
429         }
430         Q_ASSERT(base);
431     }
432     struct R
433     {
434         const char *next;
435         int base;
436     };
437     return R{p, base};
438 }
439 
440 unsigned long long
441 qstrntoull(const char *begin, qsizetype size, const char **endptr, int base, bool *ok)
442 {
443     const char *p = begin, *const stop = begin + size;
444     while (p < stop && ascii_isspace(*p))
445         ++p;
446     unsigned long long result = 0;
447     if (p >= stop || *p == '-') {
448         *ok = false;
449         if (endptr)
450             *endptr = begin;
451         return result;
452     }
453     const auto prefix = scanPrefix(*p == '+' ? p + 1 : p, stop, base);
454     if (!prefix.base || prefix.next >= stop) {
455         if (endptr)
456             *endptr = begin;
457         *ok = false;
458         return 0;
459     }
460 
461     const auto res = std::from_chars(prefix.next, stop, result, prefix.base);
462     *ok = res.ec == std::errc{};
463     if (endptr)
464         *endptr = res.ptr == prefix.next ? begin : res.ptr;
465     return result;
466 }
467 
468 long long
469 qstrntoll(const char *begin, qsizetype size, const char **endptr, int base, bool *ok)
470 {
471     const char *p = begin, *const stop = begin + size;
472     while (p < stop && ascii_isspace(*p))
473         ++p;
474     const bool negate = p < stop && *p == '-';
475     if (negate || (p < stop && *p == '+'))
476         ++p;
477 
478     const auto prefix = scanPrefix(p, stop, base);
479     if (!prefix.base || prefix.next >= stop) {
480         if (endptr)
481             *endptr = begin;
482         *ok = false;
483         return 0;
484     }
485 
486     long long result = 0;
487     const auto res = std::from_chars(prefix.next, stop, result, prefix.base);
488     *ok = res.ec == std::errc{};
489     if (endptr)
490         *endptr = res.ptr == prefix.next ? begin : res.ptr;
491     return (*ok && negate) ? -result : result;
492 }
493 
494 template <typename Char>
495 static Q_ALWAYS_INLINE void qulltoString_helper(qulonglong number, int base, Char *&p)
496 {
497     // Performance-optimized code. Compiler can generate faster code when base is known.
498     switch (base) {
499 #define BIG_BASE_LOOP(b)                                  \
500     do {                                                  \
501         const int r = number % b;                         \
502         *--p = Char((r < 10 ? '0' : 'a' - 10) + r); \
503         number /= b;                                      \
504     } while (number)
505 #ifndef __OPTIMIZE_SIZE__
506 #    define SMALL_BASE_LOOP(b)             \
507         do {                               \
508             *--p = Char('0' + number % b); \
509             number /= b;                   \
510         } while (number)
511 
512     case 2: SMALL_BASE_LOOP(2); break;
513     case 8: SMALL_BASE_LOOP(8); break;
514     case 10: SMALL_BASE_LOOP(10); break;
515     case 16: BIG_BASE_LOOP(16); break;
516 #undef SMALL_BASE_LOOP
517 #endif
518     default: BIG_BASE_LOOP(base); break;
519 #undef BIG_BASE_LOOP
520     }
521 }
522 
523 // This is technically "qulonglong to ascii", but that name's taken
524 QString qulltoBasicLatin(qulonglong number, int base, bool negative)
525 {
526     if (number == 0)
527         return QStringLiteral("0");
528     // Length of MIN_LLONG with the sign in front is 65; we never need surrogate pairs.
529     // We do not need a terminator.
530     const unsigned maxlen = 65;
531     static_assert(CHAR_BIT * sizeof(number) + 1 <= maxlen);
532     char16_t buff[maxlen];
533     char16_t *const end = buff + maxlen, *p = end;
534 
535     qulltoString_helper<char16_t>(number, base, p);
536     if (negative)
537         *--p = u'-';
538 
539     return QString(reinterpret_cast<QChar *>(p), end - p);
540 }
541 
542 QString qulltoa(qulonglong number, int base, const QStringView zero)
543 {
544     // Length of MAX_ULLONG in base 2 is 64; and we may need a surrogate pair
545     // per digit. We do not need a terminator.
546     const unsigned maxlen = 128;
547     static_assert(CHAR_BIT * sizeof(number) <= maxlen);
548     char16_t buff[maxlen];
549     char16_t *const end = buff + maxlen, *p = end;
550 
551     if (base != 10 || zero == u"0") {
552         qulltoString_helper<char16_t>(number, base, p);
553     } else if (zero.size() && !zero.at(0).isSurrogate()) {
554         const char16_t zeroUcs2 = zero.at(0).unicode();
555         while (number != 0) {
556             *(--p) = unicodeForDigit(number % base, zeroUcs2);
557 
558             number /= base;
559         }
560     } else if (zero.size() == 2 && zero.at(0).isHighSurrogate()) {
561         const char32_t zeroUcs4 = QChar::surrogateToUcs4(zero.at(0), zero.at(1));
562         while (number != 0) {
563             const char32_t digit = unicodeForDigit(number % base, zeroUcs4);
564 
565             *(--p) = QChar::lowSurrogate(digit);
566             *(--p) = QChar::highSurrogate(digit);
567 
568             number /= base;
569         }
570     } else { // zero should always be either a non-surrogate or a surrogate pair:
571         Q_UNREACHABLE();
572         return QString();
573     }
574 
575     return QString(reinterpret_cast<QChar *>(p), end - p);
576 }
577 
578 /*!
579   \internal
580 
581   Converts the initial portion of the string pointed to by \a s00 to a double, using the 'C' locale.
582  */
583 double qstrntod(const char *s00, qsizetype len, const char **se, bool *ok)
584 {
585     int processed = 0;
586     bool nonNullOk = false;
587     double d = qt_asciiToDouble(s00, len, nonNullOk, processed, TrailingJunkAllowed);
588     if (se)
589         *se = s00 + processed;
590     if (ok)
591         *ok = nonNullOk;
592     return d;
593 }
594 
595 QString qdtoa(qreal d, int *decpt, int *sign)
596 {
597     bool nonNullSign = false;
598     int nonNullDecpt = 0;
599     int length = 0;
600 
601     // Some versions of libdouble-conversion like an extra digit, probably for '\0'
602     constexpr int digits = std::numeric_limits<double>::max_digits10 + 1;
603     char result[digits];
604     qt_doubleToAscii(d, QLocaleData::DFSignificantDigits, QLocale::FloatingPointShortest,
605                      result, digits, nonNullSign, length, nonNullDecpt);
606 
607     if (sign)
608         *sign = nonNullSign ? 1 : 0;
609     if (decpt)
610         *decpt = nonNullDecpt;
611 
612     return QLatin1String(result, length);
613 }
614 
615 static QLocaleData::DoubleForm resolveFormat(int precision, int decpt, qsizetype length)
616 {
617     bool useDecimal;
618     if (precision == QLocale::FloatingPointShortest) {
619         // Find out which representation is shorter.
620         // Set bias to everything added to exponent form but not
621         // decimal, minus the converse.
622 
623         // Exponent adds separator, sign and two exponents:
624         int bias = 2 + 2;
625         if (length <= decpt && length > 1)
626             ++bias;
627         else if (length == 1 && decpt <= 0)
628             --bias;
629 
630         // When 0 < decpt <= length, the forms have equal digit
631         // counts, plus things bias has taken into account;
632         // otherwise decimal form's digit count is right-padded with
633         // zeros to decpt, when decpt is positive, otherwise it's
634         // left-padded with 1 - decpt zeros.
635         if (decpt <= 0)
636             useDecimal = 1 - decpt <= bias;
637         else if (decpt <= length)
638             useDecimal = true;
639         else
640             useDecimal = decpt <= length + bias;
641     } else {
642         // X == decpt - 1, POSIX's P; -4 <= X < P iff -4 < decpt <= P
643         Q_ASSERT(precision >= 0);
644         useDecimal = decpt > -4 && decpt <= (precision ? precision : 1);
645     }
646     return useDecimal ? QLocaleData::DFDecimal : QLocaleData::DFExponent;
647 }
648 
649 static constexpr int digits(int number)
650 {
651     Q_ASSERT(number >= 0);
652     if (Q_LIKELY(number < 1000))
653         return number < 10 ? 1 : number < 100 ? 2 : 3;
654     int i = 3;
655     for (number /= 1000; number; number /= 10)
656         ++i;
657     return i;
658 }
659 
660 // Used generically for both QString and QByteArray
661 template <typename T>
662 static T dtoString(double d, QLocaleData::DoubleForm form, int precision, bool uppercase)
663 {
664     // Undocumented: aside from F.P.Shortest, precision < 0 is treated as
665     // default, 6 - same as printf().
666     if (precision != QLocale::FloatingPointShortest && precision < 0)
667         precision = 6;
668 
669     using D = std::numeric_limits<double>;
670     // 1 is for the null-terminator
671     constexpr int MaxDigits = 1 + qMax(D::max_exponent10, D::digits10 - D::min_exponent10);
672 
673     // "maxDigits" above is a reasonable estimate, though we may need more due to extra precision
674     int bufSize = 1;
675     if (precision == QLocale::FloatingPointShortest)
676         bufSize += D::max_digits10;
677     else if (form == QLocaleData::DFDecimal && qIsFinite(d))
678         bufSize += wholePartSpace(qAbs(d)) + precision;
679     else // Add extra digit due to different interpretations of precision.
680         bufSize += qMax(2, precision) + 1; // Must also be big enough for "nan" or "inf"
681 
682     // Reserve `MaxDigits` on the stack, which is a reasonable estimate;
683     // but we may need more due to extra precision, which we cannot know at compile-time.
684     QVarLengthArray<char, MaxDigits> buffer(bufSize);
685     bool negative = false;
686     int length = 0;
687     int decpt = 0;
688     qt_doubleToAscii(d, form, precision, buffer.data(), buffer.length(), negative, length, decpt);
689     QLatin1String view(buffer.data(), buffer.data() + length);
690     const bool succinct = form == QLocaleData::DFSignificantDigits;
691     qsizetype total = (negative ? 1 : 0) + length;
692     if (qIsFinite(d)) {
693         if (succinct)
694             form = resolveFormat(precision, decpt, view.size());
695 
696         switch (form) {
697         case QLocaleData::DFExponent:
698             total += 3; // (.e+) The '.' may not be needed, but we would only overestimate by 1 char
699             // Exponents: we guarantee at least 2
700             total += std::max(2, digits(std::abs(decpt - 1)));
701             // "length - 1" because one of the digits will always be before the decimal point
702             if (int extraPrecision = precision - (length - 1); extraPrecision > 0 && !succinct)
703                 total += extraPrecision; // some requested zero-padding
704             break;
705         case QLocaleData::DFDecimal:
706             if (decpt <= 0) // leading "0." and zeros
707                 total += 2 - decpt;
708             else if (decpt < length) // just the dot
709                 total += 1;
710             else // trailing zeros (and no dot, unless we require extra precision):
711                 total += decpt - length;
712 
713             if (precision > 0 && !succinct) {
714                 // May need trailing zeros to satisfy precision:
715                 if (decpt < length)
716                     total += std::max(0, precision - length + decpt);
717                 else // and a dot to separate them:
718                     total += 1 + precision;
719             }
720             break;
721         case QLocaleData::DFSignificantDigits:
722             Q_UNREACHABLE(); // Handled earlier
723         }
724     }
725 
726     constexpr bool IsQString = std::is_same_v<T, QString>;
727     using Char = std::conditional_t<IsQString, char16_t, char>;
728 
729     T result;
730     result.reserve(total);
731 
732     if (negative && !isZero(d)) // We don't return "-0"
733         result.append(Char('-'));
734     if (!qIsFinite(d)) {
735         result.append(view);
736         if (uppercase)
737             result = std::move(result).toUpper();
738     } else {
739         switch (form) {
740         case QLocaleData::DFExponent: {
741             result.append(view.first(1));
742             view = view.sliced(1);
743             if (!view.isEmpty() || (!succinct && precision > 0)) {
744                 result.append(Char('.'));
745                 result.append(view);
746                 if (qsizetype pad = precision - view.size(); !succinct && pad > 0) {
747                     for (int i = 0; i < pad; ++i)
748                         result.append(Char('0'));
749                 }
750             }
751             int exponent = decpt - 1;
752             result.append(Char(uppercase ? 'E' : 'e'));
753             result.append(Char(exponent < 0 ? '-' : '+'));
754             exponent = std::abs(exponent);
755             Q_ASSUME(exponent <= D::max_exponent10 + D::max_digits10);
756             int exponentDigits = digits(exponent);
757             // C's printf guarantees a two-digit exponent, and so do we:
758             if (exponentDigits == 1)
759                 result.append(Char('0'));
760             result.resize(result.size() + exponentDigits);
761             auto location = reinterpret_cast<Char *>(result.end());
762             qulltoString_helper<Char>(exponent, 10, location);
763             break;
764         }
765         case QLocaleData::DFDecimal:
766             if (decpt < 0) {
767                 if constexpr (IsQString)
768                     result.append(u"0.0");
769                 else
770                     result.append("0.0");
771                 while (++decpt < 0)
772                     result.append(Char('0'));
773                 result.append(view);
774                 if (!succinct) {
775                     auto numDecimals = result.size() - 2 - (negative ? 1 : 0);
776                     for (qsizetype i = numDecimals; i < precision; ++i)
777                         result.append(Char('0'));
778                 }
779             } else {
780                 if (decpt > view.size()) {
781                     result.append(view);
782                     const int sign = negative ? 1 : 0;
783                     while (result.size() - sign < decpt)
784                         result.append(Char('0'));
785                     view = {};
786                 } else if (decpt) {
787                     result.append(view.first(decpt));
788                     view = view.sliced(decpt);
789                 } else {
790                     result.append(Char('0'));
791                 }
792                 if (!view.isEmpty() || (!succinct && view.size() < precision)) {
793                     result.append(Char('.'));
794                     result.append(view);
795                     if (!succinct) {
796                         for (qsizetype i = view.size(); i < precision; ++i)
797                             result.append(Char('0'));
798                     }
799                 }
800             }
801             break;
802         case QLocaleData::DFSignificantDigits:
803             Q_UNREACHABLE(); // taken care of earlier
804             break;
805         }
806     }
807     Q_ASSERT(total >= result.size()); // No reallocations are needed
808     return result;
809 }
810 
811 QString qdtoBasicLatin(double d, QLocaleData::DoubleForm form, int precision, bool uppercase)
812 {
813     return dtoString<QString>(d, form, precision, uppercase);
814 }
815 
816 QByteArray qdtoAscii(double d, QLocaleData::DoubleForm form, int precision, bool uppercase)
817 {
818     return dtoString<QByteArray>(d, form, precision, uppercase);
819 }
820 
821 QT_END_NAMESPACE
