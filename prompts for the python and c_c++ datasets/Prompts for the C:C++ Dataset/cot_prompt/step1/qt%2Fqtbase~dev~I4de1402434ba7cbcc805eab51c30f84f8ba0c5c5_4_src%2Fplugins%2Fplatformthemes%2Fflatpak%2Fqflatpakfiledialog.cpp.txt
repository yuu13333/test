Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Add support for FileChooser flatpak portal

Adds support for FileChooser Flatpak portal. To support them we just do
specific DBus calls, which are then caught and forwarded by xdg-desktop-
portal daemon/service. This is needed for Qt applications running in
sandbox.

[ChangeLog][Platform Specific Changes][Linux] Added support for flatpak
portals. Flatpak is a software utility for software deployment and
package management. It provides a sandbox environment in which users
can run applications in isolation from the rest of the system. To
communicate with the system flatpak uses portals, which are designed to
be a bridge between sandboxed applications and desktop/system running on
user's computer. Flatpak runs this service (called xdg-desktop-portal)
automatically. It exports the portals via DBus and they are visible by
default to all applications running under Flatpak.

Change-Id: I4de1402434ba7cbcc805eab51c30f84f8ba0c5c5

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2017 Red Hat, Inc
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the plugins of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qflatpakfiledialog_p.h"
41 
42 #include <QtCore/qeventloop.h>
43 
44 #include <QtDBus/QtDBus>
45 #include <QDBusConnection>
46 #include <QDBusMessage>
47 #include <QDBusPendingCall>
48 #include <QDBusPendingCallWatcher>
49 #include <QDBusPendingReply>
50 
51 #include <QMetaType>
52 #include <QMimeType>
53 #include <QMimeDatabase>
54 #include <QWindow>
55 
56 QT_BEGIN_NAMESPACE
57 
58 Q_DECLARE_METATYPE(QFlatpakFileDialog::FilterCondition);
59 Q_DECLARE_METATYPE(QFlatpakFileDialog::FilterConditionList);
60 Q_DECLARE_METATYPE(QFlatpakFileDialog::Filter);
61 Q_DECLARE_METATYPE(QFlatpakFileDialog::FilterList);
62 
63 QDBusArgument &operator <<(QDBusArgument &arg, const QFlatpakFileDialog::FilterCondition &filterCondition)
64 {
65     arg.beginStructure();
66     arg << filterCondition.type << filterCondition.pattern;
67     arg.endStructure();
68     return arg;
69 }
70 
71 const QDBusArgument &operator >>(const QDBusArgument &arg, QFlatpakFileDialog::FilterCondition &filterCondition)
72 {
73     uint type;
74     QString filterPattern;
75     arg.beginStructure();
76     arg >> type >> filterPattern;
77     filterCondition.type = (QFlatpakFileDialog::ConditionType)type;
78     filterCondition.pattern = filterPattern;
79     arg.endStructure();
80 
81     return arg;
82 }
83 
84 QDBusArgument &operator <<(QDBusArgument &arg, const QFlatpakFileDialog::Filter filter)
85 {
86     arg.beginStructure();
87     arg << filter.name << filter.filterConditions;
88     arg.endStructure();
89     return arg;
90 }
91 
92 const QDBusArgument &operator >>(const QDBusArgument &arg, QFlatpakFileDialog::Filter &filter)
93 {
94     QString name;
95     QFlatpakFileDialog::FilterConditionList filterConditions;
96     arg.beginStructure();
97     arg >> name >> filterConditions;
98     filter.name = name;
99     filter.filterConditions = filterConditions;
100     arg.endStructure();
101 
102     return arg;
103 }
104 
105 class QFlatpakFileDialogPrivate
106 {
107 public:
108     WId winId = 0;
109     bool modal = false;
110     bool multipleFiles = false;
111     bool saveFile = false;
112     QString acceptLabel;
113     QString directory;
114     QString title;
115     QStringList nameFilters;
116     QStringList mimeTypesFilters;
117     QStringList selectedFiles;
118 };
119 
120 QFlatpakFileDialog::QFlatpakFileDialog()
121     : QPlatformFileDialogHelper()
122     , d_ptr(new QFlatpakFileDialogPrivate)
123 {
124 }
125 
126 QFlatpakFileDialog::~QFlatpakFileDialog()
127 {
128 }
129 
130 void QFlatpakFileDialog::initializeDialog()
131 {
132     Q_D(QFlatpakFileDialog);
133 
134     if (options()->fileMode() == QFileDialogOptions::ExistingFiles)
135         d->multipleFiles = true;
136 
137     if (options()->isLabelExplicitlySet(QFileDialogOptions::Accept))
138         d->acceptLabel = options()->labelText(QFileDialogOptions::Accept);
139 
140     if (!options()->windowTitle().isEmpty())
141         d->title = options()->windowTitle();
142 
143     if (options()->acceptMode() == QFileDialogOptions::AcceptSave)
144         d->saveFile = true;
145 
146     if (!options()->nameFilters().isEmpty())
147         d->nameFilters = options()->nameFilters();
148 
149     if (!options()->mimeTypeFilters().isEmpty())
150         d->mimeTypesFilters = options()->mimeTypeFilters();
151 
152     setDirectory(options()->initialDirectory());
153 }
154 
155 bool QFlatpakFileDialog::defaultNameFilterDisables() const
156 {
157     return false;
158 }
159 
160 void QFlatpakFileDialog::setDirectory(const QUrl &directory)
161 {
162     Q_D(QFlatpakFileDialog);
163 
164     d->directory = directory.path();
165 }
166 
167 QUrl QFlatpakFileDialog::directory() const
168 {
169     Q_D(const QFlatpakFileDialog);
170 
171     return d->directory;
172 }
173 
174 void QFlatpakFileDialog::selectFile(const QUrl &filename)
175 {
176     Q_D(QFlatpakFileDialog);
177 
178     d->selectedFiles << filename.path();
179 }
180 
181 QList<QUrl> QFlatpakFileDialog::selectedFiles() const
182 {
183     Q_D(const QFlatpakFileDialog);
184 
185     QList<QUrl> files;
186     for (const QString &file : d->selectedFiles) {
187         files << QUrl(file);
188     }
189     return files;
190 }
191 
192 void QFlatpakFileDialog::setFilter()
193 {
194     // TODO
195 }
196 
197 void QFlatpakFileDialog::selectNameFilter(const QString &filter)
198 {
199     Q_UNUSED(filter);
200     // TODO
201 }
202 
203 QString QFlatpakFileDialog::selectedNameFilter() const
204 {
205     // TODO
206     return QString();
207 }
208 
209 void QFlatpakFileDialog::exec()
210 {
211     Q_D(const QFlatpakFileDialog);
212 
213     QDBusMessage message = QDBusMessage::createMethodCall(QLatin1String("org.freedesktop.portal.Desktop"),
214                                                           QLatin1String("/org/freedesktop/portal/desktop"),
215                                                           QLatin1String("org.freedesktop.portal.FileChooser"),
216                                                           d->saveFile ? QLatin1String("SaveFile") : QLatin1String("OpenFile"));
217     QString parentWindowId = QLatin1String("x11:") + QString::number(d->winId);
218 
219     QVariantMap options;
220     if (!d->acceptLabel.isEmpty())
221         options.insert(QLatin1String("accept_label"), d->acceptLabel);
222 
223     options.insert(QLatin1String("modal"), d->modal);
224     options.insert(QLatin1String("multiple"), d->multipleFiles);
225 
226     if (d->saveFile) {
227         if (!d->directory.isEmpty())
228             options.insert(QLatin1String("current_folder"), d->directory.toLatin1());
229 
230         if (!d->selectedFiles.isEmpty())
231             options.insert(QLatin1String("current_file"), d->selectedFiles.first().toLatin1());
232     }
233 
234     // Insert filters
235     qDBusRegisterMetaType<FilterCondition>();
236     qDBusRegisterMetaType<FilterConditionList>();
237     qDBusRegisterMetaType<Filter>();
238     qDBusRegisterMetaType<FilterList>();
239 
240     FilterList filterList;
241 
242     if (!d->mimeTypesFilters.isEmpty()) {
243         for (const QString &mimeTypefilter : d->mimeTypesFilters) {
244             QMimeDatabase mimeDatabase;
245             QMimeType mimeType = mimeDatabase.mimeTypeForName(mimeTypefilter);
246 
247             // Creates e.g. (1, "image/png")
248             FilterCondition filterCondition;
249             filterCondition.type = MimeType;
250             filterCondition.pattern = mimeTypefilter;
251 
252             // Creates e.g. [((1, "image/png"))]
253             FilterConditionList filterConditions;
254             filterConditions << filterCondition;
255 
256             // Creates e.g. [("Images", [((1, "image/png"))])]
257             Filter filter;
258             filter.name = mimeType.comment();
259             filter.filterConditions = filterConditions;
260 
261             filterList << filter;
262         }
263     } else if (!d->nameFilters.isEmpty()) {
264         for (const QString &filter : d->nameFilters) {
265             // Do parsing:
266             // Supported format is ("Images (*.png *.jpg)")
267             QRegularExpression regexp(QPlatformFileDialogHelper::filterRegExp);
268             QRegularExpressionMatch match = regexp.match(filter);
269             if (match.hasMatch()) {
270                 QString userVisibleName = match.captured(0);
271                 QStringList filterStrings = match.captured(1).split(QLatin1String(" "));
272 
273                 FilterConditionList filterConditions;
274                 for (const QString &filterString : filterStrings) {
275                     FilterCondition filterCondition;
276                     filterCondition.type = GlobalPattern;
277                     filterCondition.pattern = filterString;
278                     filterConditions << filterCondition;
279                 }
280 
281                 Filter filter;
282                 filter.name = userVisibleName;
283                 filter.filterConditions = filterConditions;
284 
285                 filterList << filter;
286             }
287         }
288     }
289 
290     if (!filterList.isEmpty())
291         options.insert(QLatin1String("filters"), QVariant::fromValue(filterList));
292 
293     // TODO choices a(ssa(ss)s)
294     // List of serialized combo boxes to add to the file chooser.
295 
296     message << parentWindowId << d->title << options;
297 
298     QDBusPendingCall pendingCall = QDBusConnection::sessionBus().asyncCall(message);
299     QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(pendingCall);
300     connect(watcher, &QDBusPendingCallWatcher::finished, this, [this] (QDBusPendingCallWatcher *watcher) {
301         QDBusPendingReply<QDBusObjectPath> reply = *watcher;
302         if (reply.isError()) {
303             Q_EMIT reject();
304         } else {
305             QDBusConnection::sessionBus().connect(nullptr,
306                                                   reply.value().path(),
307                                                   QLatin1String("org.freedesktop.portal.Request"),
308                                                   QLatin1String("Response"),
309                                                   this,
310                                                   SLOT(gotResponse(uint,QVariantMap)));
311         }
312     });
313 
314     // HACK we have to avoid returning until we emit that the dialog was accepted or rejected
315     QEventLoop loop;
316     loop.connect(this, SIGNAL(accept()), SLOT(quit()));
317     loop.connect(this, SIGNAL(reject()), SLOT(quit()));
318     loop.exec();
319 }
320 
321 void QFlatpakFileDialog::hide()
322 {
323 }
324 
325 bool QFlatpakFileDialog::show(Qt::WindowFlags windowFlags, Qt::WindowModality windowModality, QWindow *parent)
326 {
327     Q_D(QFlatpakFileDialog);
328     Q_UNUSED(windowFlags);
329 
330     initializeDialog();
331 
332     d->modal = windowModality != Qt::NonModal;
333     d->winId = parent ? parent->winId() : 0;
334 
335     return true;
336 }
337 
338 void QFlatpakFileDialog::gotResponse(uint response, const QVariantMap &results)
339 {
340     Q_D(QFlatpakFileDialog);
341 
342     if (!response) {
343         if (results.contains(QLatin1String("uris")))
344             d->selectedFiles = results.value(QLatin1String("uris")).toStringList();
345 
346         Q_EMIT accept();
347     } else {
348         Q_EMIT reject();
349     }
350 }
