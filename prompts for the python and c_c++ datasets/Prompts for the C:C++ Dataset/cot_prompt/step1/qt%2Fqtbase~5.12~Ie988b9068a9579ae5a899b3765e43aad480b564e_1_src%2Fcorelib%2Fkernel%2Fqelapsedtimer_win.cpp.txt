Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Windows code: Fix clang-tidy warnings about else after return/break

Remove else and unindent code or simplify the return value.

Change-Id: Ie988b9068a9579ae5a899b3765e43aad480b564e

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qelapsedtimer.h"
41 #include "qdeadlinetimer.h"
42 #include "qdeadlinetimer_p.h"
43 #include <qt_windows.h>
44 
45 QT_BEGIN_NAMESPACE
46 
47 // Result of QueryPerformanceFrequency, 0 indicates that the high resolution timer is unavailable
48 static quint64 counterFrequency = 0;
49 
50 static void resolveCounterFrequency()
51 {
52     static bool done = false;
53     if (done)
54         return;
55 
56     // Retrieve the number of high-resolution performance counter ticks per second
57     LARGE_INTEGER frequency;
58     if (!QueryPerformanceFrequency(&frequency)) {
59         qFatal("QueryPerformanceFrequency failed, even though Microsoft documentation promises it wouldn't.");
60         counterFrequency = 0;
61     } else {
62         counterFrequency = frequency.QuadPart;
63     }
64 
65     done = true;
66 }
67 
68 static inline qint64 ticksToNanoseconds(qint64 ticks)
69 {
70     if (counterFrequency > 0) {
71         // QueryPerformanceCounter uses an arbitrary frequency
72         qint64 seconds = ticks / counterFrequency;
73         qint64 nanoSeconds = (ticks - seconds * counterFrequency) * 1000000000 / counterFrequency;
74         return seconds * 1000000000 + nanoSeconds;
75     }
76     // GetTickCount(64) returns milliseconds
77     return ticks * 1000000;
78 }
79 
80 static inline qint64 nanosecondsToTicks(qint64 nsec)
81 {
82     return counterFrequency > 0
83         // QueryPerformanceCounter uses an arbitrary frequency
84         ? (nsec * qint64(counterFrequency)) / 1000000000ll
85         // GetTickCount(64) uses milliseconds
86         :  nsec / 1000000;
87 }
88 
89 static quint64 getTickCount()
90 {
91     resolveCounterFrequency();
92 
93     // This avoids a division by zero and disables the high performance counter if it's not available
94     if (counterFrequency > 0) {
95         LARGE_INTEGER counter;
96 
97         bool ok = QueryPerformanceCounter(&counter);
98         Q_ASSERT_X(ok, "QElapsedTimer::start()",
99                    "QueryPerformanceCounter failed, although QueryPerformanceFrequency succeeded.");
100         Q_UNUSED(ok);
101         return counter.QuadPart;
102     }
103 
104     return GetTickCount64();
105 }
106 
107 quint64 qt_msectime()
108 {
109     return ticksToNanoseconds(getTickCount()) / 1000000;
110 }
111 
112 QElapsedTimer::ClockType QElapsedTimer::clockType() Q_DECL_NOTHROW
113 {
114     resolveCounterFrequency();
115 
116     return counterFrequency > 0 ? PerformanceCounter : TickCounter;
117 }
118 
119 bool QElapsedTimer::isMonotonic() Q_DECL_NOTHROW
120 {
121     return true;
122 }
123 
124 void QElapsedTimer::start() Q_DECL_NOTHROW
125 {
126     t1 = getTickCount();
127     t2 = 0;
128 }
129 
130 qint64 QElapsedTimer::restart() Q_DECL_NOTHROW
131 {
132     qint64 oldt1 = t1;
133     t1 = getTickCount();
134     t2 = 0;
135     return ticksToNanoseconds(t1 - oldt1) / 1000000;
136 }
137 
138 qint64 QElapsedTimer::nsecsElapsed() const Q_DECL_NOTHROW
139 {
140     qint64 elapsed = getTickCount() - t1;
141     return ticksToNanoseconds(elapsed);
142 }
143 
144 qint64 QElapsedTimer::elapsed() const Q_DECL_NOTHROW
145 {
146     qint64 elapsed = getTickCount() - t1;
147     return ticksToNanoseconds(elapsed) / 1000000;
148 }
149 
150 qint64 QElapsedTimer::msecsSinceReference() const Q_DECL_NOTHROW
151 {
152     return ticksToNanoseconds(t1) / 1000000;
153 }
154 
155 qint64 QElapsedTimer::msecsTo(const QElapsedTimer &other) const Q_DECL_NOTHROW
156 {
157     qint64 difference = other.t1 - t1;
158     return ticksToNanoseconds(difference) / 1000000;
159 }
160 
161 qint64 QElapsedTimer::secsTo(const QElapsedTimer &other) const Q_DECL_NOTHROW
162 {
163     return msecsTo(other) / 1000;
164 }
165 
166 bool operator<(const QElapsedTimer &v1, const QElapsedTimer &v2) Q_DECL_NOTHROW
167 {
168     return (v1.t1 - v2.t1) < 0;
169 }
170 
171 QDeadlineTimer QDeadlineTimer::current(Qt::TimerType timerType) Q_DECL_NOTHROW
172 {
173     Q_STATIC_ASSERT(!QDeadlineTimerNanosecondsInT2);
174     QDeadlineTimer result;
175     result.t1 = ticksToNanoseconds(getTickCount());
176     result.type = timerType;
177     return result;
178 }
179 
180 QT_END_NAMESPACE
