Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Implement first/last/sub() for QString, QStringView and QByteArray

These methods are scheduled as a replacement for left/right/mid()
in Qt 6 with a consistent, narrow contract that does not allow
out of bounds indices.

Change-Id: Iabf22e8d4f3fef3c5e69a17f103e6cddebe420b1

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Copyright (C) 2016 Intel Corporation.
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the QtCore module of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:LGPL$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU Lesser General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU Lesser
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
22 ** packaging of this file. Please review the following information to
23 ** ensure the GNU Lesser General Public License version 3 requirements
24 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
25 **
26 ** GNU General Public License Usage
27 ** Alternatively, this file may be used under the terms of the GNU
28 ** General Public License version 2.0 or (at your option) the GNU General
29 ** Public license version 3 or any later version approved by the KDE Free
30 ** Qt Foundation. The licenses are as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
32 ** included in the packaging of this file. Please review the following
33 ** information to ensure the GNU General Public License requirements will
34 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
35 ** https://www.gnu.org/licenses/gpl-3.0.html.
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 #ifndef QBYTEARRAY_H
42 #define QBYTEARRAY_H
43 
44 #include <QtCore/qrefcount.h>
45 #include <QtCore/qnamespace.h>
46 #include <QtCore/qarraydata.h>
47 #include <QtCore/qarraydatapointer.h>
48 #include <QtCore/qcontainerfwd.h>
49 
50 #include <stdlib.h>
51 #include <string.h>
52 #include <stdarg.h>
53 
54 #include <string>
55 #include <iterator>
56 
57 #ifdef truncate
58 #error qbytearray.h must be included before any header file that defines truncate
59 #endif
60 
61 #if defined(Q_OS_DARWIN) || defined(Q_QDOC)
62 Q_FORWARD_DECLARE_CF_TYPE(CFData);
63 Q_FORWARD_DECLARE_OBJC_CLASS(NSData);
64 #endif
65 
66 QT_BEGIN_NAMESPACE
67 
68 
69 /*****************************************************************************
70   Safe and portable C string functions; extensions to standard string.h
71  *****************************************************************************/
72 
73 Q_CORE_EXPORT char *qstrdup(const char *);
74 
75 inline uint qstrlen(const char *str)
76 { return str ? uint(strlen(str)) : 0; }
77 
78 inline uint qstrnlen(const char *str, uint maxlen)
79 {
80     uint length = 0;
81     if (str) {
82         while (length < maxlen && *str++)
83             length++;
84     }
85     return length;
86 }
87 
88 Q_CORE_EXPORT char *qstrcpy(char *dst, const char *src);
89 Q_CORE_EXPORT char *qstrncpy(char *dst, const char *src, uint len);
90 
91 Q_CORE_EXPORT int qstrcmp(const char *str1, const char *str2);
92 Q_CORE_EXPORT int qstrcmp(const QByteArray &str1, const QByteArray &str2);
93 Q_CORE_EXPORT int qstrcmp(const QByteArray &str1, const char *str2);
94 static inline int qstrcmp(const char *str1, const QByteArray &str2)
95 { return -qstrcmp(str2, str1); }
96 
97 inline int qstrncmp(const char *str1, const char *str2, uint len)
98 {
99     return (str1 && str2) ? strncmp(str1, str2, len)
100         : (str1 ? 1 : (str2 ? -1 : 0));
101 }
102 Q_CORE_EXPORT int qstricmp(const char *, const char *);
103 Q_CORE_EXPORT int qstrnicmp(const char *, const char *, uint len);
104 Q_CORE_EXPORT int qstrnicmp(const char *, qsizetype, const char *, qsizetype = -1);
105 
106 // implemented in qvsnprintf.cpp
107 Q_CORE_EXPORT int qvsnprintf(char *str, size_t n, const char *fmt, va_list ap);
108 Q_CORE_EXPORT int qsnprintf(char *str, size_t n, const char *fmt, ...);
109 
110 // qChecksum: Internet checksum
111 Q_CORE_EXPORT quint16 qChecksum(const char *s, uint len,
112                                 Qt::ChecksumType standard = Qt::ChecksumIso3309);
113 
114 class QString;
115 class QDataStream;
116 
117 using QByteArrayData = QArrayDataPointer<char>;
118 
119 #  define QByteArrayLiteral(str) \
120     ([]() -> QByteArray { \
121         enum { Size = sizeof(str) - 1 }; \
122         static const QArrayData qbytearray_literal = { \
123             Q_BASIC_ATOMIC_INITIALIZER(-1), QArrayData::StaticDataFlags, 0 }; \
124         QByteArrayData holder = { \
125             static_cast<QTypedArrayData<char> *>(const_cast<QArrayData *>(&qbytearray_literal)), \
126             const_cast<char *>(str), \
127             Size }; \
128         return QByteArray(holder); \
129     }()) \
130     /**/
131 
132 class Q_CORE_EXPORT QByteArray
133 {
134 public:
135     using DataPointer = QByteArrayData;
136 private:
137     typedef QTypedArrayData<char> Data;
138 
139     DataPointer d;
140 public:
141 
142     enum Base64Option {
143         Base64Encoding = 0,
144         Base64UrlEncoding = 1,
145 
146         KeepTrailingEquals = 0,
147         OmitTrailingEquals = 2,
148 
149         IgnoreBase64DecodingErrors = 0,
150         AbortOnBase64DecodingErrors = 4,
151     };
152     Q_DECLARE_FLAGS(Base64Options, Base64Option)
153 
154     enum class Base64DecodingStatus {
155         Ok,
156         IllegalInputLength,
157         IllegalCharacter,
158         IllegalPadding,
159     };
160 
161     inline QByteArray() noexcept;
162     QByteArray(const char *, int size = -1);
163     QByteArray(int size, char c);
164     QByteArray(int size, Qt::Initialization);
165     inline QByteArray(const QByteArray &) noexcept;
166     inline ~QByteArray();
167 
168     QByteArray &operator=(const QByteArray &) noexcept;
169     QByteArray &operator=(const char *str);
170     inline QByteArray(QByteArray && other) noexcept
171     { qSwap(d, other.d); }
172     inline QByteArray &operator=(QByteArray &&other) noexcept
173     { qSwap(d, other.d); return *this; }
174     inline void swap(QByteArray &other) noexcept
175     { qSwap(d, other.d); }
176 
177     inline bool isEmpty() const;
178     void resize(int size);
179 
180     QByteArray &fill(char c, int size = -1);
181 
182     inline int capacity() const;
183     inline void reserve(int size);
184     inline void squeeze();
185 
186 #ifndef QT_NO_CAST_FROM_BYTEARRAY
187     inline operator const char *() const;
188     inline operator const void *() const;
189 #endif
190     inline char *data();
191     inline const char *data() const;
192     inline const char *constData() const;
193     inline void detach();
194     inline bool isDetached() const;
195     inline bool isSharedWith(const QByteArray &other) const
196     { return data() == other.data() && size() == other.size(); }
197     void clear();
198 
199     inline char at(int i) const;
200     inline char operator[](int i) const;
201     Q_REQUIRED_RESULT inline char &operator[](int i);
202     Q_REQUIRED_RESULT char front() const { return at(0); }
203     Q_REQUIRED_RESULT inline char &front();
204     Q_REQUIRED_RESULT char back() const { return at(size() - 1); }
205     Q_REQUIRED_RESULT inline char &back();
206 
207     int indexOf(char c, int from = 0) const;
208     int indexOf(const char *c, int from = 0) const;
209     int indexOf(const QByteArray &a, int from = 0) const;
210     int lastIndexOf(char c, int from = -1) const;
211     int lastIndexOf(const char *c, int from = -1) const;
212     int lastIndexOf(const QByteArray &a, int from = -1) const;
213 
214     inline bool contains(char c) const;
215     inline bool contains(const char *a) const;
216     inline bool contains(const QByteArray &a) const;
217     int count(char c) const;
218     int count(const char *a) const;
219     int count(const QByteArray &a) const;
220 
221     inline int compare(const char *c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;
222     inline int compare(const QByteArray &a, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;
223 
224     Q_REQUIRED_RESULT QByteArray left(int len) const;
225     Q_REQUIRED_RESULT QByteArray right(int len) const;
226     Q_REQUIRED_RESULT QByteArray mid(int index, int len = -1) const;
227 
228     Q_REQUIRED_RESULT QByteArray first(qsizetype n) const
229     { Q_ASSERT(n >= 0 && n <= size()); return QByteArray(data(), int(n)); }
230     Q_REQUIRED_RESULT QByteArray last(qsizetype n) const
231     { Q_ASSERT(n >= 0 && n <= size()); return QByteArray(data() + size() - n, int(n)); }
232     Q_REQUIRED_RESULT QByteArray sub(qsizetype pos) const
233     { Q_ASSERT(pos >= 0 && pos <= size()); return QByteArray(data() + pos, size() - int(pos)); }
234     Q_REQUIRED_RESULT QByteArray sub(qsizetype pos, qsizetype n) const
235     { Q_ASSERT(pos >= 0 && n >= 0 && pos + n <= size()); return QByteArray(data() + pos, int(n)); }
236     Q_REQUIRED_RESULT QByteArray chopped(int len) const
237     { Q_ASSERT(len >= 0); Q_ASSERT(len <= size()); return first(size() - len); }
238 
239     bool startsWith(const QByteArray &a) const;
240     bool startsWith(char c) const;
241     bool startsWith(const char *c) const;
242 
243     bool endsWith(const QByteArray &a) const;
244     bool endsWith(char c) const;
245     bool endsWith(const char *c) const;
246 
247     bool isUpper() const;
248     bool isLower() const;
249 
250     void truncate(int pos);
251     void chop(int n);
252 
253 #if defined(Q_COMPILER_REF_QUALIFIERS) && !defined(QT_COMPILING_QSTRING_COMPAT_CPP) && !defined(Q_CLANG_QDOC)
254 #  if defined(Q_CC_GNU) && !defined(Q_CC_CLANG) && !defined(Q_CC_INTEL) && !__has_cpp_attribute(nodiscard)
255     // required due to https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61941
256 #    pragma push_macro("Q_REQUIRED_RESULT")
257 #    undef Q_REQUIRED_RESULT
258 #    define Q_REQUIRED_RESULT
259 #    define Q_REQUIRED_RESULT_pushed
260 #  endif
261     Q_REQUIRED_RESULT QByteArray toLower() const &
262     { return toLower_helper(*this); }
263     Q_REQUIRED_RESULT QByteArray toLower() &&
264     { return toLower_helper(*this); }
265     Q_REQUIRED_RESULT QByteArray toUpper() const &
266     { return toUpper_helper(*this); }
267     Q_REQUIRED_RESULT QByteArray toUpper() &&
268     { return toUpper_helper(*this); }
269     Q_REQUIRED_RESULT QByteArray trimmed() const &
270     { return trimmed_helper(*this); }
271     Q_REQUIRED_RESULT QByteArray trimmed() &&
272     { return trimmed_helper(*this); }
273     Q_REQUIRED_RESULT QByteArray simplified() const &
274     { return simplified_helper(*this); }
275     Q_REQUIRED_RESULT QByteArray simplified() &&
276     { return simplified_helper(*this); }
277 #  ifdef Q_REQUIRED_RESULT_pushed
278 #    pragma pop_macro("Q_REQUIRED_RESULT")
279 #  endif
280 #else
281     Q_REQUIRED_RESULT QByteArray toLower() const;
282     Q_REQUIRED_RESULT QByteArray toUpper() const;
283     Q_REQUIRED_RESULT QByteArray trimmed() const;
284     Q_REQUIRED_RESULT QByteArray simplified() const;
285 #endif
286 
287     Q_REQUIRED_RESULT QByteArray leftJustified(int width, char fill = ' ', bool truncate = false) const;
288     Q_REQUIRED_RESULT QByteArray rightJustified(int width, char fill = ' ', bool truncate = false) const;
289 
290     QByteArray &prepend(char c);
291     inline QByteArray &prepend(int count, char c);
292     QByteArray &prepend(const char *s);
293     QByteArray &prepend(const char *s, int len);
294     QByteArray &prepend(const QByteArray &a);
295     QByteArray &append(char c);
296     inline QByteArray &append(int count, char c);
297     QByteArray &append(const char *s);
298     QByteArray &append(const char *s, int len);
299     QByteArray &append(const QByteArray &a);
300     QByteArray &insert(int i, char c);
301     QByteArray &insert(int i, int count, char c);
302     QByteArray &insert(int i, const char *s);
303     QByteArray &insert(int i, const char *s, int len);
304     QByteArray &insert(int i, const QByteArray &a);
305     QByteArray &remove(int index, int len);
306     QByteArray &replace(int index, int len, const char *s);
307     QByteArray &replace(int index, int len, const char *s, int alen);
308     QByteArray &replace(int index, int len, const QByteArray &s);
309     inline QByteArray &replace(char before, const char *after);
310     QByteArray &replace(char before, const QByteArray &after);
311     inline QByteArray &replace(const char *before, const char *after);
312     QByteArray &replace(const char *before, int bsize, const char *after, int asize);
313     QByteArray &replace(const QByteArray &before, const QByteArray &after);
314     inline QByteArray &replace(const QByteArray &before, const char *after);
315     QByteArray &replace(const char *before, const QByteArray &after);
316     QByteArray &replace(char before, char after);
317     inline QByteArray &operator+=(char c);
318     inline QByteArray &operator+=(const char *s);
319     inline QByteArray &operator+=(const QByteArray &a);
320 
321     QList<QByteArray> split(char sep) const;
322 
323     Q_REQUIRED_RESULT QByteArray repeated(int times) const;
324 
325 #ifndef QT_NO_CAST_TO_ASCII
326     QT_ASCII_CAST_WARN QByteArray &append(const QString &s);
327     QT_ASCII_CAST_WARN QByteArray &insert(int i, const QString &s);
328     QT_ASCII_CAST_WARN QByteArray &replace(const QString &before, const char *after);
329     QT_ASCII_CAST_WARN QByteArray &replace(char c, const QString &after);
330     QT_ASCII_CAST_WARN QByteArray &replace(const QString &before, const QByteArray &after);
331 
332     QT_ASCII_CAST_WARN QByteArray &operator+=(const QString &s);
333     QT_ASCII_CAST_WARN int indexOf(const QString &s, int from = 0) const;
334     QT_ASCII_CAST_WARN int lastIndexOf(const QString &s, int from = -1) const;
335 #endif
336 #if !defined(QT_NO_CAST_FROM_ASCII) && !defined(QT_RESTRICTED_CAST_FROM_ASCII)
337     inline QT_ASCII_CAST_WARN bool operator==(const QString &s2) const;
338     inline QT_ASCII_CAST_WARN bool operator!=(const QString &s2) const;
339     inline QT_ASCII_CAST_WARN bool operator<(const QString &s2) const;
340     inline QT_ASCII_CAST_WARN bool operator>(const QString &s2) const;
341     inline QT_ASCII_CAST_WARN bool operator<=(const QString &s2) const;
342     inline QT_ASCII_CAST_WARN bool operator>=(const QString &s2) const;
343 #endif
344 
345     short toShort(bool *ok = nullptr, int base = 10) const;
346     ushort toUShort(bool *ok = nullptr, int base = 10) const;
347     int toInt(bool *ok = nullptr, int base = 10) const;
348     uint toUInt(bool *ok = nullptr, int base = 10) const;
349     long toLong(bool *ok = nullptr, int base = 10) const;
350     ulong toULong(bool *ok = nullptr, int base = 10) const;
351     qlonglong toLongLong(bool *ok = nullptr, int base = 10) const;
352     qulonglong toULongLong(bool *ok = nullptr, int base = 10) const;
353     float toFloat(bool *ok = nullptr) const;
354     double toDouble(bool *ok = nullptr) const;
355     QByteArray toBase64(Base64Options options = Base64Encoding) const;
356     QByteArray toHex(char separator = '\0') const;
357     QByteArray toPercentEncoding(const QByteArray &exclude = QByteArray(),
358                                  const QByteArray &include = QByteArray(),
359                                  char percent = '%') const;
360 
361     inline QByteArray &setNum(short, int base = 10);
362     inline QByteArray &setNum(ushort, int base = 10);
363     inline QByteArray &setNum(int, int base = 10);
364     inline QByteArray &setNum(uint, int base = 10);
365     inline QByteArray &setNum(long, int base = 10);
366     inline QByteArray &setNum(ulong, int base = 10);
367     QByteArray &setNum(qlonglong, int base = 10);
368     QByteArray &setNum(qulonglong, int base = 10);
369     inline QByteArray &setNum(float, char f = 'g', int prec = 6);
370     QByteArray &setNum(double, char f = 'g', int prec = 6);
371     QByteArray &setRawData(const char *a, uint n); // ### Qt 6: use an int
372 
373     Q_REQUIRED_RESULT static QByteArray number(int, int base = 10);
374     Q_REQUIRED_RESULT static QByteArray number(uint, int base = 10);
375     Q_REQUIRED_RESULT static QByteArray number(long, int base = 10);
376     Q_REQUIRED_RESULT static QByteArray number(ulong, int base = 10);
377     Q_REQUIRED_RESULT static QByteArray number(qlonglong, int base = 10);
378     Q_REQUIRED_RESULT static QByteArray number(qulonglong, int base = 10);
379     Q_REQUIRED_RESULT static QByteArray number(double, char f = 'g', int prec = 6);
380     Q_REQUIRED_RESULT static QByteArray fromRawData(const char *, int size);
381 
382     class FromBase64Result;
383     Q_REQUIRED_RESULT static FromBase64Result fromBase64Encoding(QByteArray &&base64, Base64Options options = Base64Encoding);
384     Q_REQUIRED_RESULT static FromBase64Result fromBase64Encoding(const QByteArray &base64, Base64Options options = Base64Encoding);
385     Q_REQUIRED_RESULT static QByteArray fromBase64(const QByteArray &base64, Base64Options options = Base64Encoding);
386     Q_REQUIRED_RESULT static QByteArray fromHex(const QByteArray &hexEncoded);
387     Q_REQUIRED_RESULT static QByteArray fromPercentEncoding(const QByteArray &pctEncoded, char percent = '%');
388 
389 #if defined(Q_OS_DARWIN) || defined(Q_QDOC)
390     static QByteArray fromCFData(CFDataRef data);
391     static QByteArray fromRawCFData(CFDataRef data);
392     CFDataRef toCFData() const Q_DECL_CF_RETURNS_RETAINED;
393     CFDataRef toRawCFData() const Q_DECL_CF_RETURNS_RETAINED;
394     static QByteArray fromNSData(const NSData *data);
395     static QByteArray fromRawNSData(const NSData *data);
396     NSData *toNSData() const Q_DECL_NS_RETURNS_AUTORELEASED;
397     NSData *toRawNSData() const Q_DECL_NS_RETURNS_AUTORELEASED;
398 #endif
399 
400     typedef char *iterator;
401     typedef const char *const_iterator;
402     typedef iterator Iterator;
403     typedef const_iterator ConstIterator;
404     typedef std::reverse_iterator<iterator> reverse_iterator;
405     typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
406     inline iterator begin();
407     inline const_iterator begin() const;
408     inline const_iterator cbegin() const;
409     inline const_iterator constBegin() const;
410     inline iterator end();
411     inline const_iterator end() const;
412     inline const_iterator cend() const;
413     inline const_iterator constEnd() const;
414     reverse_iterator rbegin() { return reverse_iterator(end()); }
415     reverse_iterator rend() { return reverse_iterator(begin()); }
416     const_reverse_iterator rbegin() const { return const_reverse_iterator(end()); }
417     const_reverse_iterator rend() const { return const_reverse_iterator(begin()); }
418     const_reverse_iterator crbegin() const { return const_reverse_iterator(end()); }
419     const_reverse_iterator crend() const { return const_reverse_iterator(begin()); }
420 
421     // stl compatibility
422     typedef int size_type;
423     typedef qptrdiff difference_type;
424     typedef const char & const_reference;
425     typedef char & reference;
426     typedef char *pointer;
427     typedef const char *const_pointer;
428     typedef char value_type;
429     inline void push_back(char c);
430     inline void push_back(const char *c);
431     inline void push_back(const QByteArray &a);
432     inline void push_front(char c);
433     inline void push_front(const char *c);
434     inline void push_front(const QByteArray &a);
435     void shrink_to_fit() { squeeze(); }
436 
437     static inline QByteArray fromStdString(const std::string &s);
438     inline std::string toStdString() const;
439 
440     inline int size() const { return d->size; }
441     inline int count() const { return size(); }
442     inline int length() const { return size(); }
443     bool isNull() const;
444 
445     inline DataPointer &data_ptr() { return d; }
446     explicit inline QByteArray(const DataPointer &dd)
447         : d(dd)
448     {
449     }
450 
451 private:
452     operator QNoImplicitBoolCast() const;
453     void reallocData(uint alloc, Data::ArrayOptions options);
454     void expand(int i);
455     QByteArray nulTerminated() const;
456 
457     static QByteArray toLower_helper(const QByteArray &a);
458     static QByteArray toLower_helper(QByteArray &a);
459     static QByteArray toUpper_helper(const QByteArray &a);
460     static QByteArray toUpper_helper(QByteArray &a);
461     static QByteArray trimmed_helper(const QByteArray &a);
462     static QByteArray trimmed_helper(QByteArray &a);
463     static QByteArray simplified_helper(const QByteArray &a);
464     static QByteArray simplified_helper(QByteArray &a);
465 
466     friend class QString;
467     friend Q_CORE_EXPORT QByteArray qUncompress(const uchar *data, int nbytes);
468 };
469 
470 Q_DECLARE_OPERATORS_FOR_FLAGS(QByteArray::Base64Options)
471 
472 inline QByteArray::QByteArray() noexcept {}
473 inline QByteArray::~QByteArray() {}
474 
475 inline char QByteArray::at(int i) const
476 { Q_ASSERT(uint(i) < uint(size())); return d.data()[i]; }
477 inline char QByteArray::operator[](int i) const
478 { Q_ASSERT(uint(i) < uint(size())); return d.data()[i]; }
479 
480 inline bool QByteArray::isEmpty() const
481 { return size() == 0; }
482 #ifndef QT_NO_CAST_FROM_BYTEARRAY
483 inline QByteArray::operator const char *() const
484 { return data(); }
485 inline QByteArray::operator const void *() const
486 { return data(); }
487 #endif
488 inline char *QByteArray::data()
489 { detach(); return d.data(); }
490 inline const char *QByteArray::data() const
491 { return d.data(); }
492 inline const char *QByteArray::constData() const
493 { return d.data(); }
494 inline void QByteArray::detach()
495 { if (d->needsDetach()) reallocData(uint(size()) + 1u, d->detachFlags()); }
496 inline bool QByteArray::isDetached() const
497 { return !d->isShared(); }
498 inline QByteArray::QByteArray(const QByteArray &a) noexcept : d(a.d)
499 {}
500 
501 inline int QByteArray::capacity() const
502 { const auto realCapacity = d->constAllocatedCapacity(); return realCapacity ? int(realCapacity) - 1 : 0; }
503 
504 inline void QByteArray::reserve(int asize)
505 {
506     if (d->needsDetach() || asize > capacity()) {
507         reallocData(qMax(uint(size()), uint(asize)) + 1u, d->detachFlags() | Data::CapacityReserved);
508     } else {
509         d->flags() |= Data::CapacityReserved;
510     }
511 }
512 
513 inline void QByteArray::squeeze()
514 {
515     if ((d->flags() & Data::CapacityReserved) == 0)
516         return;
517     if (d->needsDetach() || size() < capacity()) {
518         reallocData(uint(size()) + 1u, d->detachFlags() & ~Data::CapacityReserved);
519     } else {
520         d->flags() &= uint(~Data::CapacityReserved);
521     }
522 }
523 
524 inline char &QByteArray::operator[](int i)
525 { Q_ASSERT(i >= 0 && i < size()); return data()[i]; }
526 inline char &QByteArray::front() { return operator[](0); }
527 inline char &QByteArray::back() { return operator[](size() - 1); }
528 inline QByteArray::iterator QByteArray::begin()
529 { return data(); }
530 inline QByteArray::const_iterator QByteArray::begin() const
531 { return data(); }
532 inline QByteArray::const_iterator QByteArray::cbegin() const
533 { return data(); }
534 inline QByteArray::const_iterator QByteArray::constBegin() const
535 { return data(); }
536 inline QByteArray::iterator QByteArray::end()
537 { return data() + size(); }
538 inline QByteArray::const_iterator QByteArray::end() const
539 { return data() + size(); }
540 inline QByteArray::const_iterator QByteArray::cend() const
541 { return data() + size(); }
542 inline QByteArray::const_iterator QByteArray::constEnd() const
543 { return data() + size(); }
544 inline QByteArray &QByteArray::append(int n, char ch)
545 { return insert(size(), n, ch); }
546 inline QByteArray &QByteArray::prepend(int n, char ch)
547 { return insert(0, n, ch); }
548 inline QByteArray &QByteArray::operator+=(char c)
549 { return append(c); }
550 inline QByteArray &QByteArray::operator+=(const char *s)
551 { return append(s); }
552 inline QByteArray &QByteArray::operator+=(const QByteArray &a)
553 { return append(a); }
554 inline void QByteArray::push_back(char c)
555 { append(c); }
556 inline void QByteArray::push_back(const char *c)
557 { append(c); }
558 inline void QByteArray::push_back(const QByteArray &a)
559 { append(a); }
560 inline void QByteArray::push_front(char c)
561 { prepend(c); }
562 inline void QByteArray::push_front(const char *c)
563 { prepend(c); }
564 inline void QByteArray::push_front(const QByteArray &a)
565 { prepend(a); }
566 inline bool QByteArray::contains(const QByteArray &a) const
567 { return indexOf(a) != -1; }
568 inline bool QByteArray::contains(char c) const
569 { return indexOf(c) != -1; }
570 inline int QByteArray::compare(const char *c, Qt::CaseSensitivity cs) const noexcept
571 {
572     return cs == Qt::CaseSensitive ? qstrcmp(*this, c) :
573                                      qstrnicmp(data(), size(), c, -1);
574 }
575 inline int QByteArray::compare(const QByteArray &a, Qt::CaseSensitivity cs) const noexcept
576 {
577     return cs == Qt::CaseSensitive ? qstrcmp(*this, a) :
578                                      qstrnicmp(data(), size(), a.data(), a.size());
579 }
580 inline bool operator==(const QByteArray &a1, const QByteArray &a2) noexcept
581 { return (a1.size() == a2.size()) && (memcmp(a1.constData(), a2.constData(), a1.size())==0); }
582 inline bool operator==(const QByteArray &a1, const char *a2) noexcept
583 { return a2 ? qstrcmp(a1,a2) == 0 : a1.isEmpty(); }
584 inline bool operator==(const char *a1, const QByteArray &a2) noexcept
585 { return a1 ? qstrcmp(a1,a2) == 0 : a2.isEmpty(); }
586 inline bool operator!=(const QByteArray &a1, const QByteArray &a2) noexcept
587 { return !(a1==a2); }
588 inline bool operator!=(const QByteArray &a1, const char *a2) noexcept
589 { return a2 ? qstrcmp(a1,a2) != 0 : !a1.isEmpty(); }
590 inline bool operator!=(const char *a1, const QByteArray &a2) noexcept
591 { return a1 ? qstrcmp(a1,a2) != 0 : !a2.isEmpty(); }
592 inline bool operator<(const QByteArray &a1, const QByteArray &a2) noexcept
593 { return qstrcmp(a1, a2) < 0; }
594  inline bool operator<(const QByteArray &a1, const char *a2) noexcept
595 { return qstrcmp(a1, a2) < 0; }
596 inline bool operator<(const char *a1, const QByteArray &a2) noexcept
597 { return qstrcmp(a1, a2) < 0; }
598 inline bool operator<=(const QByteArray &a1, const QByteArray &a2) noexcept
599 { return qstrcmp(a1, a2) <= 0; }
600 inline bool operator<=(const QByteArray &a1, const char *a2) noexcept
601 { return qstrcmp(a1, a2) <= 0; }
602 inline bool operator<=(const char *a1, const QByteArray &a2) noexcept
603 { return qstrcmp(a1, a2) <= 0; }
604 inline bool operator>(const QByteArray &a1, const QByteArray &a2) noexcept
605 { return qstrcmp(a1, a2) > 0; }
606 inline bool operator>(const QByteArray &a1, const char *a2) noexcept
607 { return qstrcmp(a1, a2) > 0; }
608 inline bool operator>(const char *a1, const QByteArray &a2) noexcept
609 { return qstrcmp(a1, a2) > 0; }
610 inline bool operator>=(const QByteArray &a1, const QByteArray &a2) noexcept
611 { return qstrcmp(a1, a2) >= 0; }
612 inline bool operator>=(const QByteArray &a1, const char *a2) noexcept
613 { return qstrcmp(a1, a2) >= 0; }
614 inline bool operator>=(const char *a1, const QByteArray &a2) noexcept
615 { return qstrcmp(a1, a2) >= 0; }
616 #if !defined(QT_USE_QSTRINGBUILDER)
617 inline const QByteArray operator+(const QByteArray &a1, const QByteArray &a2)
618 { return QByteArray(a1) += a2; }
619 inline const QByteArray operator+(const QByteArray &a1, const char *a2)
620 { return QByteArray(a1) += a2; }
621 inline const QByteArray operator+(const QByteArray &a1, char a2)
622 { return QByteArray(a1) += a2; }
623 inline const QByteArray operator+(const char *a1, const QByteArray &a2)
624 { return QByteArray(a1) += a2; }
625 inline const QByteArray operator+(char a1, const QByteArray &a2)
626 { return QByteArray(&a1, 1) += a2; }
627 #endif // QT_USE_QSTRINGBUILDER
628 inline bool QByteArray::contains(const char *c) const
629 { return indexOf(c) != -1; }
630 inline QByteArray &QByteArray::replace(char before, const char *c)
631 { return replace(&before, 1, c, qstrlen(c)); }
632 inline QByteArray &QByteArray::replace(const QByteArray &before, const char *c)
633 { return replace(before.constData(), before.size(), c, qstrlen(c)); }
634 inline QByteArray &QByteArray::replace(const char *before, const char *after)
635 { return replace(before, qstrlen(before), after, qstrlen(after)); }
636 
637 inline QByteArray &QByteArray::setNum(short n, int base)
638 { return base == 10 ? setNum(qlonglong(n), base) : setNum(qulonglong(ushort(n)), base); }
639 inline QByteArray &QByteArray::setNum(ushort n, int base)
640 { return setNum(qulonglong(n), base); }
641 inline QByteArray &QByteArray::setNum(int n, int base)
642 { return base == 10 ? setNum(qlonglong(n), base) : setNum(qulonglong(uint(n)), base); }
643 inline QByteArray &QByteArray::setNum(uint n, int base)
644 { return setNum(qulonglong(n), base); }
645 inline QByteArray &QByteArray::setNum(long n, int base)
646 { return base == 10 ? setNum(qlonglong(n), base) : setNum(qulonglong(ulong(n)), base); }
647 inline QByteArray &QByteArray::setNum(ulong n, int base)
648 { return setNum(qulonglong(n), base); }
649 inline QByteArray &QByteArray::setNum(float n, char f, int prec)
650 { return setNum(double(n),f,prec); }
651 
652 inline std::string QByteArray::toStdString() const
653 { return std::string(constData(), length()); }
654 
655 inline QByteArray QByteArray::fromStdString(const std::string &s)
656 { return QByteArray(s.data(), int(s.size())); }
657 
658 #if !defined(QT_NO_DATASTREAM) || (defined(QT_BOOTSTRAPPED) && !defined(QT_BUILD_QMAKE))
659 Q_CORE_EXPORT QDataStream &operator<<(QDataStream &, const QByteArray &);
660 Q_CORE_EXPORT QDataStream &operator>>(QDataStream &, QByteArray &);
661 #endif
662 
663 #ifndef QT_NO_COMPRESS
664 Q_CORE_EXPORT QByteArray qCompress(const uchar* data, int nbytes, int compressionLevel = -1);
665 Q_CORE_EXPORT QByteArray qUncompress(const uchar* data, int nbytes);
666 inline QByteArray qCompress(const QByteArray& data, int compressionLevel = -1)
667 { return qCompress(reinterpret_cast<const uchar *>(data.constData()), data.size(), compressionLevel); }
668 inline QByteArray qUncompress(const QByteArray& data)
669 { return qUncompress(reinterpret_cast<const uchar*>(data.constData()), data.size()); }
670 #endif
671 
672 Q_DECLARE_SHARED(QByteArray)
673 
674 class QByteArray::FromBase64Result
675 {
676 public:
677     QByteArray decoded;
678     QByteArray::Base64DecodingStatus decodingStatus;
679 
680     void swap(QByteArray::FromBase64Result &other) noexcept
681     {
682         qSwap(decoded, other.decoded);
683         qSwap(decodingStatus, other.decodingStatus);
684     }
685 
686     explicit operator bool() const noexcept { return decodingStatus == QByteArray::Base64DecodingStatus::Ok; }
687 
688 #if defined(Q_COMPILER_REF_QUALIFIERS) && !defined(Q_QDOC)
689     QByteArray &operator*() & noexcept { return decoded; }
690     const QByteArray &operator*() const & noexcept { return decoded; }
691     QByteArray &&operator*() && noexcept { return std::move(decoded); }
692 #else
693     QByteArray &operator*() noexcept { return decoded; }
694     const QByteArray &operator*() const noexcept { return decoded; }
695 #endif
696 };
697 
698 Q_DECLARE_SHARED(QByteArray::FromBase64Result)
699 
700 inline bool operator==(const QByteArray::FromBase64Result &lhs, const QByteArray::FromBase64Result &rhs) noexcept
701 {
702     if (lhs.decodingStatus != rhs.decodingStatus)
703         return false;
704 
705     if (lhs.decodingStatus == QByteArray::Base64DecodingStatus::Ok && lhs.decoded != rhs.decoded)
706         return false;
707 
708     return true;
709 }
710 
711 inline bool operator!=(const QByteArray::FromBase64Result &lhs, const QByteArray::FromBase64Result &rhs) noexcept
712 {
713     return !operator==(lhs, rhs);
714 }
715 
716 Q_CORE_EXPORT Q_DECL_PURE_FUNCTION size_t qHash(const QByteArray::FromBase64Result &key, size_t seed = 0) noexcept;
717 
718 QT_END_NAMESPACE
719 
720 #endif // QBYTEARRAY_H
