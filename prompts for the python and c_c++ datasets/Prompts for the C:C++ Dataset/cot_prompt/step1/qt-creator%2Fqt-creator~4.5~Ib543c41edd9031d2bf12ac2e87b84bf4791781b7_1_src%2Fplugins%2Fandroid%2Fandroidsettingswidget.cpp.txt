Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Android: Re-design android settings

Make Android setup related issues visible to user

Change-Id: Ib543c41edd9031d2bf12ac2e87b84bf4791781b7

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 BogDan Vatra <bog_dan_ro@yahoo.com>
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "androidsettingswidget.h"
27 
28 #include "ui_androidsettingswidget.h"
29 
30 #include "androidconfigurations.h"
31 #include "androidconstants.h"
32 #include "androidtoolchain.h"
33 #include "androidavdmanager.h"
34 
35 #include <utils/environment.h>
36 #include <utils/hostosinfo.h>
37 #include <utils/pathchooser.h>
38 #include <utils/runextensions.h>
39 #include <utils/utilsicons.h>
40 #include <projectexplorer/toolchainmanager.h>
41 #include <projectexplorer/kitmanager.h>
42 #include <projectexplorer/kitinformation.h>
43 #include <projectexplorer/projectexplorerconstants.h>
44 #include <qtsupport/qtkitinformation.h>
45 #include <qtsupport/qtversionmanager.h>
46 
47 #include <QFile>
48 #include <QTextStream>
49 #include <QProcess>
50 #include <QTimer>
51 #include <QTime>
52 
53 #include <QDesktopServices>
54 #include <QFileDialog>
55 #include <QMessageBox>
56 #include <QModelIndex>
57 #include <QtCore/QUrl>
58 
59 namespace Android {
60 namespace Internal {
61 
62 namespace {
63 enum JavaValidation {
64     JavaPathExistsRow,
65     JavaJdkValidRow
66 };
67 
68 enum AndroidValidation {
69     SdkPathExistsRow,
70     SdkToolsInstalledRow,
71     PlatformToolsInstalledRow,
72     BuildToolsInstalledRow,
73     PlatformSdkInstalledRow,
74     NdkPathExistsRow,
75     NdkDirStructureRow,
76     NdkinstallDirOkRow
77 };
78 }
79 
80 class SummaryWidget : public QWidget
81 {
82     struct RowData {
83         QLabel *m_iconLabel = nullptr;
84         QLabel *m_textLabel = nullptr;
85         bool m_valid = false;
86     };
87 
88 public:
89     SummaryWidget(const QMap<int, QString> &validationPoints, const QString &validText,
90                   const QString &invalidText, Utils::DetailsWidget *detailWidgets = nullptr) :
91         QWidget(detailWidgets),
92         m_validText(validText),
93         m_invalidText(invalidText),
94         m_detailsWidget(detailWidgets)
95     {
96         auto layout = new QGridLayout(this);
97         layout->setMargin(12);
98         int row = 0;
99         for (auto itr = validationPoints.cbegin(); itr != validationPoints.cend(); ++itr) {
100             RowData data;
101             data.m_iconLabel = new QLabel(this);
102             layout->addWidget(data.m_iconLabel, row, 0, 1, 1);
103             data.m_textLabel = new QLabel(itr.value(), this);
104             data.m_textLabel->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Preferred);
105             layout->addWidget(data.m_textLabel, row, 1, 1, 1);
106             m_rowList[itr.key()] = data;
107             setPointValid(itr.key(), true);
108             ++row;
109         }
110     }
111 
112     void setPointValid(int key, bool valid)
113     {
114         if (!m_rowList.contains(key))
115             return;
116         RowData& data = m_rowList[key];
117         data.m_valid = valid;
118         data.m_iconLabel->setPixmap(data.m_valid ? Utils::Icons::OK.pixmap() :
119                                                    Utils::Icons::BROKEN.pixmap());
120         bool ok = allRowsOK();
121         m_detailsWidget->setIcon(ok ? Utils::Icons::OK.icon() :
122                                       Utils::Icons::CRITICAL.icon());
123         m_detailsWidget->setSummaryText(ok ? m_validText : m_invalidText);
124     }
125 
126     bool allRowsOK() const
127     {
128         for (auto itr = m_rowList.cbegin(); itr != m_rowList.cend(); ++itr) {
129             if (!itr.value().m_valid)
130                 return false;
131         }
132         return true;
133     }
134 
135 private:
136     QString m_validText;
137     QString m_invalidText;
138     Utils::DetailsWidget *m_detailsWidget = nullptr;
139     QMap<int, RowData> m_rowList;
140 };
141 
142 void AvdModel::setAvdList(const AndroidDeviceInfoList &list)
143 {
144     beginResetModel();
145     m_list = list;
146     endResetModel();
147 }
148 
149 QModelIndex AvdModel::indexForAvdName(const QString &avdName) const
150 {
151     for (int i = 0; i < m_list.size(); ++i) {
152         if (m_list.at(i).serialNumber == avdName)
153             return index(i, 0);
154     }
155     return QModelIndex();
156 }
157 
158 QString AvdModel::avdName(const QModelIndex &index) const
159 {
160     return m_list.at(index.row()).avdname;
161 }
162 
163 QVariant AvdModel::data(const QModelIndex &index, int role) const
164 {
165     if (role != Qt::DisplayRole || !index.isValid())
166         return QVariant();
167     switch (index.column()) {
168         case 0:
169             return m_list[index.row()].avdname;
170         case 1:
171             return QString::fromLatin1("API %1").arg(m_list[index.row()].sdk);
172         case 2: {
173             QStringList cpuAbis = m_list[index.row()].cpuAbi;
174             return cpuAbis.isEmpty() ? QVariant() : QVariant(cpuAbis.first());
175         }
176     }
177     return QVariant();
178 }
179 
180 QVariant AvdModel::headerData(int section, Qt::Orientation orientation, int role) const
181 {
182     if (orientation == Qt::Horizontal && role == Qt::DisplayRole) {
183         switch (section) {
184             case 0:
185                 //: AVD - Android Virtual Device
186                 return tr("AVD Name");
187             case 1:
188                 return tr("AVD Target");
189             case 2:
190                 return tr("CPU/ABI");
191         }
192     }
193     return QAbstractItemModel::headerData(section, orientation, role );
194 }
195 
196 int AvdModel::rowCount(const QModelIndex &/*parent*/) const
197 {
198     return m_list.size();
199 }
200 
201 int AvdModel::columnCount(const QModelIndex &/*parent*/) const
202 {
203     return 3;
204 }
205 
206 AndroidSettingsWidget::AndroidSettingsWidget(QWidget *parent)
207     : QWidget(parent),
208       m_ui(new Ui_AndroidSettingsWidget),
209       m_androidConfig(AndroidConfigurations::currentConfig()),
210       m_avdManager(new AndroidAvdManager(m_androidConfig))
211 {
212     m_ui->setupUi(this);
213 
214     QMap<int, QString> javaValidationPoints;
215     javaValidationPoints[JavaPathExistsRow] = tr("JDK path exists.");
216     javaValidationPoints[JavaJdkValidRow] = tr("JDK path is a valid JDK root folder.");
217     auto javaSummary = new SummaryWidget(javaValidationPoints, tr("Java Settings are OK"),
218                                          tr("Java settings have errors"), m_ui->javaDetailsWidget);
219     m_ui->javaDetailsWidget->setWidget(javaSummary);
220 
221     QMap<int, QString> androidValidationPoints;
222     androidValidationPoints[SdkPathExistsRow] = tr("Android SDK path exists.");
223     androidValidationPoints[SdkToolsInstalledRow] = tr("SDK tools installed.");
224     androidValidationPoints[PlatformToolsInstalledRow] = tr("Platform tools installed.");
225     androidValidationPoints[BuildToolsInstalledRow] = tr("Build tools installed.");
226     androidValidationPoints[PlatformSdkInstalledRow] = tr("Platform SDK installed.");
227     androidValidationPoints[NdkPathExistsRow] = tr("Android NDK path exists.");
228     androidValidationPoints[NdkDirStructureRow] = tr("Android NDK directory structure is correct.");
229     androidValidationPoints[NdkinstallDirOkRow] = tr("Android NDK installed into a path without "
230                                                      "spaces.");
231     auto androidSummary = new SummaryWidget(androidValidationPoints, tr("Android setttings are OK"),
232                                             tr("Android settings have errors"),
233                                             m_ui->androidDetailsWidget);
234     m_ui->androidDetailsWidget->setWidget(androidSummary);
235 
236     auto kitsDetailsLabel = new QLabel(m_ui->kitWarningDetails);
237     kitsDetailsLabel->setWordWrap(true);
238     m_ui->kitWarningDetails->setWidget(kitsDetailsLabel);
239     m_ui->kitWarningDetails->setIcon(Utils::Icons::WARNING.icon());
240 
241     m_ui->SDKLocationPathChooser->setFileName(m_androidConfig.sdkLocation());
242     m_ui->SDKLocationPathChooser->setPromptDialogTitle(tr("Select Android SDK folder"));
243     m_ui->NDKLocationPathChooser->setFileName(m_androidConfig.ndkLocation());
244     m_ui->NDKLocationPathChooser->setPromptDialogTitle(tr("Select Android NDK folder"));
245 
246     m_ui->OpenJDKLocationPathChooser->setFileName(m_androidConfig.openJDKLocation());
247     m_ui->OpenJDKLocationPathChooser->setPromptDialogTitle(tr("Select JDK Path"));
248     m_ui->DataPartitionSizeSpinBox->setValue(m_androidConfig.partitionSize());
249     m_ui->CreateKitCheckBox->setChecked(m_androidConfig.automaticKitCreation());
250     m_ui->AVDTableView->setModel(&m_AVDModel);
251     m_ui->AVDTableView->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
252     m_ui->AVDTableView->horizontalHeader()->setSectionResizeMode(1, QHeaderView::ResizeToContents);
253 
254     m_ui->downloadOpenJDKToolButton->setVisible(!Utils::HostOsInfo::isLinuxHost());
255 
256     connect(&m_virtualDevicesWatcher, &QFutureWatcherBase::finished,
257             this, &AndroidSettingsWidget::updateAvds);
258     connect(&m_futureWatcher, &QFutureWatcherBase::finished,
259             this, &AndroidSettingsWidget::avdAdded);
260     connect(m_ui->NDKLocationPathChooser, &Utils::PathChooser::rawPathChanged,
261             this, &AndroidSettingsWidget::validateNdk);
262     connect(m_ui->SDKLocationPathChooser, &Utils::PathChooser::rawPathChanged,
263             this, &AndroidSettingsWidget::validateSdk);
264     connect(m_ui->OpenJDKLocationPathChooser, &Utils::PathChooser::rawPathChanged,
265             this, &AndroidSettingsWidget::validateJdk);
266     connect(m_ui->AVDAddPushButton, &QAbstractButton::clicked,
267             this, &AndroidSettingsWidget::addAVD);
268     connect(m_ui->AVDRemovePushButton, &QAbstractButton::clicked,
269             this, &AndroidSettingsWidget::removeAVD);
270     connect(m_ui->AVDStartPushButton, &QAbstractButton::clicked,
271             this, &AndroidSettingsWidget::startAVD);
272     connect(m_ui->AVDTableView, &QAbstractItemView::activated,
273             this, &AndroidSettingsWidget::avdActivated);
274     connect(m_ui->AVDTableView, &QAbstractItemView::clicked,
275             this, &AndroidSettingsWidget::avdActivated);
276     connect(m_ui->DataPartitionSizeSpinBox, &QAbstractSpinBox::editingFinished,
277             this, &AndroidSettingsWidget::dataPartitionSizeEditingFinished);
278     connect(m_ui->manageAVDPushButton, &QAbstractButton::clicked,
279             this, &AndroidSettingsWidget::manageAVD);
280     connect(m_ui->CreateKitCheckBox, &QAbstractButton::toggled,
281             this, &AndroidSettingsWidget::createKitToggled);
282     connect(m_ui->downloadSDKToolButton, &QAbstractButton::clicked,
283             this, &AndroidSettingsWidget::openSDKDownloadUrl);
284     connect(m_ui->downloadNDKToolButton, &QAbstractButton::clicked,
285             this, &AndroidSettingsWidget::openNDKDownloadUrl);
286     connect(m_ui->downloadOpenJDKToolButton, &QAbstractButton::clicked,
287             this, &AndroidSettingsWidget::openOpenJDKDownloadUrl);
288 
289     validateJdk();
290     validateNdk();
291     validateSdk();
292 }
293 
294 AndroidSettingsWidget::~AndroidSettingsWidget()
295 {
296     delete m_ui;
297     m_futureWatcher.waitForFinished();
298 }
299 
300 void AndroidSettingsWidget::disableAvdControls()
301 {
302     m_ui->AVDAddPushButton->setEnabled(false);
303     m_ui->AVDTableView->setEnabled(false);
304     m_ui->AVDRemovePushButton->setEnabled(false);
305     m_ui->AVDStartPushButton->setEnabled(false);
306 }
307 
308 void AndroidSettingsWidget::enableAvdControls()
309 {
310     m_ui->AVDTableView->setEnabled(true);
311     m_ui->AVDAddPushButton->setEnabled(true);
312     avdActivated(m_ui->AVDTableView->currentIndex());
313 }
314 
315 void AndroidSettingsWidget::startUpdateAvd()
316 {
317     disableAvdControls();
318     m_virtualDevicesWatcher.setFuture(m_avdManager->avdList());
319 }
320 
321 void AndroidSettingsWidget::updateAvds()
322 {
323     m_AVDModel.setAvdList(m_virtualDevicesWatcher.result());
324     if (!m_lastAddedAvd.isEmpty()) {
325         m_ui->AVDTableView->setCurrentIndex(m_AVDModel.indexForAvdName(m_lastAddedAvd));
326         m_lastAddedAvd.clear();
327     }
328     enableAvdControls();
329 }
330 
331 void AndroidSettingsWidget::saveSettings()
332 {
333     AndroidConfigurations::setConfig(m_androidConfig);
334 }
335 
336 void AndroidSettingsWidget::validateJdk()
337 {
338     auto javaPath = Utils::FileName::fromUserInput(m_ui->OpenJDKLocationPathChooser->rawPath());
339     m_androidConfig.setOpenJDKLocation(javaPath);
340     bool jdkPathExists = m_androidConfig.openJDKLocation().exists();
341     auto summaryWidget = static_cast<SummaryWidget *>(m_ui->javaDetailsWidget->widget());
342     summaryWidget->setPointValid(JavaPathExistsRow, jdkPathExists);
343 
344     Utils::FileName bin = m_androidConfig.openJDKLocation();
345     bin.appendPath(QLatin1String("bin/javac" QTC_HOST_EXE_SUFFIX));
346     summaryWidget->setPointValid(JavaJdkValidRow, jdkPathExists && bin.exists());
347     updateUI();
348 }
349 
350 void AndroidSettingsWidget::validateNdk()
351 {
352     auto ndkPath = Utils::FileName::fromUserInput(m_ui->NDKLocationPathChooser->rawPath());
353     m_androidConfig.setNdkLocation(ndkPath);
354 
355     auto summaryWidget = static_cast<SummaryWidget *>(m_ui->androidDetailsWidget->widget());
356     summaryWidget->setPointValid(NdkPathExistsRow, m_androidConfig.ndkLocation().exists());
357 
358     Utils::FileName ndkPlatformsDir(ndkPath);
359     ndkPlatformsDir.appendPath("platforms");
360     Utils::FileName ndkToolChainsDir(ndkPath);
361     ndkToolChainsDir.appendPath("toolchains");
362     Utils::FileName ndkSourcesDir(ndkPath);
363     ndkSourcesDir.appendPath("sources/cxx-stl");
364     summaryWidget->setPointValid(NdkDirStructureRow,
365                                  ndkPlatformsDir.exists()
366                                  && ndkToolChainsDir.exists()
367                                  && ndkSourcesDir.exists());
368     summaryWidget->setPointValid(NdkinstallDirOkRow,
369                                  ndkPlatformsDir.exists() &&
370                                  !ndkPlatformsDir.toString().contains(' '));
371     updateUI();
372 }
373 
374 void AndroidSettingsWidget::validateSdk()
375 {
376     auto sdkPath = Utils::FileName::fromUserInput(m_ui->SDKLocationPathChooser->rawPath());
377     m_androidConfig.setSdkLocation(sdkPath);
378 
379     auto summaryWidget = static_cast<SummaryWidget *>(m_ui->androidDetailsWidget->widget());
380     summaryWidget->setPointValid(SdkPathExistsRow, m_androidConfig.sdkLocation().exists());
381     summaryWidget->setPointValid(SdkToolsInstalledRow,
382                                  !m_androidConfig.sdkToolsVersion().isNull());
383     summaryWidget->setPointValid(PlatformToolsInstalledRow,
384                                  m_androidConfig.adbToolPath().exists());
385     summaryWidget->setPointValid(BuildToolsInstalledRow,
386                                  !m_androidConfig.buildToolsVersion().isNull());
387     summaryWidget->setPointValid(PlatformSdkInstalledRow,
388                                  !m_androidConfig.sdkTargets().isEmpty());
389     updateUI();
390 }
391 
392 void AndroidSettingsWidget::openSDKDownloadUrl()
393 {
394     QDesktopServices::openUrl(QUrl::fromUserInput("https://developer.android.com/studio/"));
395 }
396 
397 void AndroidSettingsWidget::openNDKDownloadUrl()
398 {
399     QDesktopServices::openUrl(QUrl::fromUserInput("https://developer.android.com/ndk/downloads/"));
400 }
401 
402 void AndroidSettingsWidget::openOpenJDKDownloadUrl()
403 {
404     QDesktopServices::openUrl(QUrl::fromUserInput("http://www.oracle.com/technetwork/java/javase/downloads/"));
405 }
406 
407 void AndroidSettingsWidget::addAVD()
408 {
409     disableAvdControls();
410     AndroidConfig::CreateAvdInfo info = m_androidConfig.gatherCreateAVDInfo(this);
411 
412     if (!info.target.isValid()) {
413         enableAvdControls();
414         return;
415     }
416 
417     m_futureWatcher.setFuture(m_avdManager->createAvd(info));
418 }
419 
420 void AndroidSettingsWidget::avdAdded()
421 {
422     AndroidConfig::CreateAvdInfo info = m_futureWatcher.result();
423     if (!info.error.isEmpty()) {
424         enableAvdControls();
425         QMessageBox::critical(this, QApplication::translate("AndroidConfig", "Error Creating AVD"), info.error);
426         return;
427     }
428 
429     startUpdateAvd();
430     m_lastAddedAvd = info.name;
431 }
432 
433 void AndroidSettingsWidget::removeAVD()
434 {
435     disableAvdControls();
436     QString avdName = m_AVDModel.avdName(m_ui->AVDTableView->currentIndex());
437     if (QMessageBox::question(this, tr("Remove Android Virtual Device"),
438                               tr("Remove device \"%1\"? This cannot be undone.").arg(avdName),
439                               QMessageBox::Yes | QMessageBox::No)
440             == QMessageBox::No) {
441         enableAvdControls();
442         return;
443     }
444 
445     m_avdManager->removeAvd(avdName);
446     startUpdateAvd();
447 }
448 
449 void AndroidSettingsWidget::startAVD()
450 {
451     m_avdManager->startAvdAsync(m_AVDModel.avdName(m_ui->AVDTableView->currentIndex()));
452 }
453 
454 void AndroidSettingsWidget::avdActivated(const QModelIndex &index)
455 {
456     m_ui->AVDRemovePushButton->setEnabled(index.isValid());
457     m_ui->AVDStartPushButton->setEnabled(index.isValid());
458 }
459 
460 void AndroidSettingsWidget::dataPartitionSizeEditingFinished()
461 {
462     m_androidConfig.setPartitionSize(m_ui->DataPartitionSizeSpinBox->value());
463 }
464 
465 void AndroidSettingsWidget::createKitToggled()
466 {
467     m_androidConfig.setAutomaticKitCreation(m_ui->CreateKitCheckBox->isChecked());
468 }
469 
470 void AndroidSettingsWidget::checkMissingQtVersion()
471 {
472     auto summaryWidget = static_cast<SummaryWidget *>(m_ui->androidDetailsWidget->widget());
473     if (!summaryWidget->allRowsOK()) {
474         m_ui->kitWarningDetails->setVisible(false);
475         m_ui->kitWarningDetails->setState(Utils::DetailsWidget::Collapsed);
476         return;
477     }
478 
479     QList<AndroidToolChainFactory::AndroidToolChainInformation> compilerPaths
480             = AndroidToolChainFactory::toolchainPathsForNdk(m_androidConfig.ndkLocation());
481 
482     // See if we have qt versions for those toolchains
483     QSet<ProjectExplorer::Abi> toolchainsForAbi;
484     foreach (const AndroidToolChainFactory::AndroidToolChainInformation &ati, compilerPaths) {
485         if (ati.language == Core::Id(ProjectExplorer::Constants::CXX_LANGUAGE_ID))
486             toolchainsForAbi.insert(ati.abi);
487     }
488 
489     const QList<QtSupport::BaseQtVersion *> androidQts
490             = QtSupport::QtVersionManager::versions([](const QtSupport::BaseQtVersion *v) {
491         return v->type() == QLatin1String(Constants::ANDROIDQT) && !v->qtAbis().isEmpty();
492     });
493     QSet<ProjectExplorer::Abi> qtVersionsForAbi;
494     foreach (QtSupport::BaseQtVersion *qtVersion, androidQts)
495         qtVersionsForAbi.insert(qtVersion->qtAbis().first());
496 
497     QSet<ProjectExplorer::Abi> missingQtArchs = toolchainsForAbi.subtract(qtVersionsForAbi);
498     bool isArchMissing =  !missingQtArchs.isEmpty();
499     m_ui->kitWarningDetails->setVisible(isArchMissing);
500     if (isArchMissing) {
501         m_ui->kitWarningDetails->setSummaryText(tr("Can not create kits for all architectures"));
502         QLabel *detailsLabel = static_cast<QLabel *>(m_ui->kitWarningDetails->widget());
503         QStringList archNames;
504         for (auto abi : missingQtArchs)
505             archNames << abi.toString();
506         detailsLabel->setText(tr("Qt versions are missing for the following architectures:\n%1"
507                                  "\n\nTo add the Qt version, select Options > Build & Run > Qt"
508                                  " Versions.").arg(archNames.join(", ")));
509     }
510 }
511 
512 void AndroidSettingsWidget::updateUI()
513 {
514     auto javaSummaryWidget = static_cast<SummaryWidget *>(m_ui->javaDetailsWidget->widget());
515     auto androidSummaryWidget = static_cast<SummaryWidget *>(m_ui->androidDetailsWidget->widget());
516     m_ui->AVDManagerFrame->setEnabled(javaSummaryWidget->allRowsOK()
517                                       && androidSummaryWidget->allRowsOK());
518     m_ui->javaDetailsWidget->setState(javaSummaryWidget->allRowsOK() ?
519                                           Utils::DetailsWidget::Collapsed :
520                                           Utils::DetailsWidget::Expanded);
521     m_ui->androidDetailsWidget->setState(androidSummaryWidget->allRowsOK() ?
522                                              Utils::DetailsWidget::Collapsed :
523                                              Utils::DetailsWidget::Expanded);
524     startUpdateAvd();
525     checkMissingQtVersion();
526 }
527 
528 void AndroidSettingsWidget::manageAVD()
529 {
530     if (m_avdManager->avdManagerUiToolAvailable()) {
531         m_avdManager->launchAvdManagerUiTool();
532     } else {
533         QMessageBox::warning(this, tr("AVD Manager Not Available"),
534                              tr("AVD manager UI tool is not available in the installed SDK tools"
535                                 "(version %1). Use the command line tool \"avdmanager\" for "
536                                 "advanced AVD management.")
537                              .arg(m_androidConfig.sdkToolsVersion().toString()));
538     }
539 }
540 
541 
542 } // namespace Internal
543 } // namespace Android
