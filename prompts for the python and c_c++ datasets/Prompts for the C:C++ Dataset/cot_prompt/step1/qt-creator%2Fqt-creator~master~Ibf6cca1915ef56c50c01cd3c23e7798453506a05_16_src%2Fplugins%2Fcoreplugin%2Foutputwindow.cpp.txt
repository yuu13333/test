Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Add output filtering for Application Output pane

Task-number: QTCREATORBUG-16356
Change-Id: Ibf6cca1915ef56c50c01cd3c23e7798453506a05
Reviewed-by: hjk <hjk@qt.io>
Reviewed-by: Andr√© Hartmann <aha_1980@gmx.de>
Reviewed-by: Leena Miettinen <riitta-leena.miettinen@qt.io>

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "outputwindow.h"
27 
28 #include "actionmanager/actionmanager.h"
29 #include "coreconstants.h"
30 #include "icore.h"
31 
32 #include <utils/outputformatter.h>
33 #include <utils/synchronousprocess.h>
34 
35 #include <QAction>
36 #include <QRegularExpression>
37 #include <QScrollBar>
38 #include <QTextBlock>
39 
40 using namespace Utils;
41 
42 namespace Core {
43 
44 namespace Internal {
45 
46 class OutputWindowPrivate
47 {
48 public:
49     OutputWindowPrivate(QTextDocument *document)
50         : cursor(document)
51     {
52     }
53 
54     ~OutputWindowPrivate()
55     {
56         ICore::removeContextObject(outputWindowContext);
57         delete outputWindowContext;
58     }
59 
60     IContext *outputWindowContext = nullptr;
61     Utils::OutputFormatter *formatter = nullptr;
62 
63     bool enforceNewline = false;
64     bool scrollToBottom = true;
65     bool linksActive = true;
66     bool m_zoomEnabled = false;
67     float m_originalFontSize = 0.;
68     int maxCharCount = Core::Constants::DEFAULT_MAX_CHAR_COUNT;
69     Qt::MouseButton mouseButtonPressed = Qt::NoButton;
70     QTextCursor cursor;
71     QString filterText;
72     QTextBlock lastFilteredBlock;
73     OutputWindow::FilterModeFlags filterMode = OutputWindow::FilterModeFlag::Default;
74 };
75 
76 } // namespace Internal
77 
78 /*******************/
79 
80 OutputWindow::OutputWindow(Context context, QWidget *parent)
81     : QPlainTextEdit(parent)
82     , d(new Internal::OutputWindowPrivate(document()))
83 {
84     setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOn);
85     //setCenterOnScroll(false);
86     setFrameShape(QFrame::NoFrame);
87     setMouseTracking(true);
88     setUndoRedoEnabled(false);
89 
90     d->outputWindowContext = new IContext;
91     d->outputWindowContext->setContext(context);
92     d->outputWindowContext->setWidget(this);
93     ICore::addContextObject(d->outputWindowContext);
94 
95     auto undoAction = new QAction(this);
96     auto redoAction = new QAction(this);
97     auto cutAction = new QAction(this);
98     auto copyAction = new QAction(this);
99     auto pasteAction = new QAction(this);
100     auto selectAllAction = new QAction(this);
101 
102     ActionManager::registerAction(undoAction, Constants::UNDO, context);
103     ActionManager::registerAction(redoAction, Constants::REDO, context);
104     ActionManager::registerAction(cutAction, Constants::CUT, context);
105     ActionManager::registerAction(copyAction, Constants::COPY, context);
106     ActionManager::registerAction(pasteAction, Constants::PASTE, context);
107     ActionManager::registerAction(selectAllAction, Constants::SELECTALL, context);
108 
109     connect(undoAction, &QAction::triggered, this, &QPlainTextEdit::undo);
110     connect(redoAction, &QAction::triggered, this, &QPlainTextEdit::redo);
111     connect(cutAction, &QAction::triggered, this, &QPlainTextEdit::cut);
112     connect(copyAction, &QAction::triggered, this, &QPlainTextEdit::copy);
113     connect(pasteAction, &QAction::triggered, this, &QPlainTextEdit::paste);
114     connect(selectAllAction, &QAction::triggered, this, &QPlainTextEdit::selectAll);
115 
116     connect(this, &QPlainTextEdit::undoAvailable, undoAction, &QAction::setEnabled);
117     connect(this, &QPlainTextEdit::redoAvailable, redoAction, &QAction::setEnabled);
118     connect(this, &QPlainTextEdit::copyAvailable, cutAction, &QAction::setEnabled);  // OutputWindow never read-only
119     connect(this, &QPlainTextEdit::copyAvailable, copyAction, &QAction::setEnabled);
120 
121     undoAction->setEnabled(false);
122     redoAction->setEnabled(false);
123     cutAction->setEnabled(false);
124     copyAction->setEnabled(false);
125 
126     m_scrollTimer.setInterval(10);
127     m_scrollTimer.setSingleShot(true);
128     connect(&m_scrollTimer, &QTimer::timeout,
129             this, &OutputWindow::scrollToBottom);
130     m_lastMessage.start();
131 
132     d->m_originalFontSize = font().pointSizeF();
133 }
134 
135 OutputWindow::~OutputWindow()
136 {
137     delete d;
138 }
139 
140 void OutputWindow::mousePressEvent(QMouseEvent * e)
141 {
142     d->mouseButtonPressed = e->button();
143     QPlainTextEdit::mousePressEvent(e);
144 }
145 
146 void OutputWindow::mouseReleaseEvent(QMouseEvent *e)
147 {
148     if (d->linksActive && d->mouseButtonPressed == Qt::LeftButton) {
149         const QString href = anchorAt(e->pos());
150         if (d->formatter)
151             d->formatter->handleLink(href);
152     }
153 
154     // Mouse was released, activate links again
155     d->linksActive = true;
156     d->mouseButtonPressed = Qt::NoButton;
157 
158     QPlainTextEdit::mouseReleaseEvent(e);
159 }
160 
161 void OutputWindow::mouseMoveEvent(QMouseEvent *e)
162 {
163     // Cursor was dragged to make a selection, deactivate links
164     if (d->mouseButtonPressed != Qt::NoButton && textCursor().hasSelection())
165         d->linksActive = false;
166 
167     if (!d->linksActive || anchorAt(e->pos()).isEmpty())
168         viewport()->setCursor(Qt::IBeamCursor);
169     else
170         viewport()->setCursor(Qt::PointingHandCursor);
171     QPlainTextEdit::mouseMoveEvent(e);
172 }
173 
174 void OutputWindow::resizeEvent(QResizeEvent *e)
175 {
176     //Keep scrollbar at bottom of window while resizing, to ensure we keep scrolling
177     //This can happen if window is resized while building, or if the horizontal scrollbar appears
178     bool atBottom = isScrollbarAtBottom();
179     QPlainTextEdit::resizeEvent(e);
180     if (atBottom)
181         scrollToBottom();
182 }
183 
184 void OutputWindow::keyPressEvent(QKeyEvent *ev)
185 {
186     QPlainTextEdit::keyPressEvent(ev);
187 
188     //Ensure we scroll also on Ctrl+Home or Ctrl+End
189     if (ev->matches(QKeySequence::MoveToStartOfDocument))
190         verticalScrollBar()->triggerAction(QAbstractSlider::SliderToMinimum);
191     else if (ev->matches(QKeySequence::MoveToEndOfDocument))
192         verticalScrollBar()->triggerAction(QAbstractSlider::SliderToMaximum);
193 }
194 
195 OutputFormatter *OutputWindow::formatter() const
196 {
197     return d->formatter;
198 }
199 
200 void OutputWindow::setFormatter(OutputFormatter *formatter)
201 {
202     d->formatter = formatter;
203     if (d->formatter) {
204         d->formatter->setPlainTextEdit(this);
205         connect(d->formatter, &OutputFormatter::contentChanged, this, &OutputWindow::filterNewContent);
206     }
207 }
208 
209 void OutputWindow::showEvent(QShowEvent *e)
210 {
211     QPlainTextEdit::showEvent(e);
212     if (d->scrollToBottom)
213         verticalScrollBar()->setValue(verticalScrollBar()->maximum());
214     d->scrollToBottom = false;
215 }
216 
217 void OutputWindow::wheelEvent(QWheelEvent *e)
218 {
219     if (d->m_zoomEnabled) {
220         if (e->modifiers() & Qt::ControlModifier) {
221             float delta = e->angleDelta().y() / 120.f;
222             zoomInF(delta);
223             emit wheelZoom();
224             return;
225         }
226     }
227     QAbstractScrollArea::wheelEvent(e);
228     updateMicroFocus();
229 }
230 
231 void OutputWindow::setBaseFont(const QFont &newFont)
232 {
233     float zoom = fontZoom();
234     d->m_originalFontSize = newFont.pointSizeF();
235     QFont tmp = newFont;
236     float newZoom = qMax(d->m_originalFontSize + zoom, 4.0f);
237     tmp.setPointSizeF(newZoom);
238     setFont(tmp);
239 }
240 
241 float OutputWindow::fontZoom() const
242 {
243     return font().pointSizeF() - d->m_originalFontSize;
244 }
245 
246 void OutputWindow::setFontZoom(float zoom)
247 {
248     QFont f = font();
249     if (f.pointSizeF() == d->m_originalFontSize + zoom)
250         return;
251     float newZoom = qMax(d->m_originalFontSize + zoom, 4.0f);
252     f.setPointSizeF(newZoom);
253     setFont(f);
254 }
255 
256 void OutputWindow::setWheelZoomEnabled(bool enabled)
257 {
258     d->m_zoomEnabled = enabled;
259 }
260 
261 void OutputWindow::setHighlightBgColor(const QColor &bgColor)
262 {
263     m_highlightBgColor = bgColor;
264 }
265 
266 void OutputWindow::setHighlightTextColor(const QColor &textColor)
267 {
268     m_highlightTextColor = textColor;
269 }
270 
271 QString OutputWindow::filterText() const
272 {
273     return d->filterText;
274 }
275 
276 void OutputWindow::setFilterText(const QString &filterText)
277 {
278     if (d->filterText != filterText) {
279         d->lastFilteredBlock = {};
280         d->filterText = filterText;
281 
282         // Update textedit's background color
283         if (filterText.isEmpty()) {
284             d->formatter->plainTextEdit()->setPalette({});
285         } else {
286             QPalette pal;
287             pal.setColor(QPalette::Active, QPalette::Base, m_highlightBgColor);
288             pal.setColor(QPalette::Inactive, QPalette::Base, m_highlightBgColor.darker(120));
289             pal.setColor(QPalette::Active, QPalette::Text, m_highlightTextColor);
290             pal.setColor(QPalette::Inactive, QPalette::Text, m_highlightTextColor.darker(120));
291             d->formatter->plainTextEdit()->setPalette(pal);
292         }
293 
294         setReadOnly(!filterText.isEmpty());
295         filterNewContent();
296     }
297 }
298 
299 OutputWindow::FilterModeFlags OutputWindow::filterMode() const
300 {
301     return d->filterMode;
302 }
303 
304 void OutputWindow::setFilterMode(OutputWindow::FilterModeFlag filterMode, bool enabled)
305 {
306     if (d->filterMode.testFlag(filterMode) != enabled) {
307         d->filterMode.setFlag(filterMode, enabled);
308         d->lastFilteredBlock = {};
309         filterNewContent();
310     }
311 }
312 
313 void OutputWindow::filterNewContent()
314 {
315     bool atBottom = isScrollbarAtBottom();
316     QPlainTextEdit *textEdit = d->formatter->plainTextEdit();
317     if (!textEdit)
318         return;
319 
320     QTextDocument *document = textEdit->document();
321 
322     auto &lastBlock = d->lastFilteredBlock;
323 
324     if (!lastBlock.isValid())
325         lastBlock = document->begin();
326 
327     if (d->filterMode.testFlag(OutputWindow::FilterModeFlag::RegExp)) {
328         QRegularExpression regExp(d->filterText);
329         if (!d->filterMode.testFlag(OutputWindow::FilterModeFlag::CaseSensitive))
330             regExp.setPatternOptions(QRegularExpression::CaseInsensitiveOption);
331 
332         for (; lastBlock != document->end(); lastBlock = lastBlock.next())
333             lastBlock.setVisible(d->filterText.isEmpty()
334                                  || regExp.match(lastBlock.text()).hasMatch());
335     } else {
336         if (d->filterMode.testFlag(OutputWindow::FilterModeFlag::CaseSensitive)) {
337             for (; lastBlock != document->end(); lastBlock = lastBlock.next())
338                 lastBlock.setVisible(d->filterText.isEmpty()
339                                      || lastBlock.text().contains(d->filterText));
340         } else {
341             for (; lastBlock != document->end(); lastBlock = lastBlock.next())
342                 lastBlock.setVisible(d->filterText.isEmpty()
343                                      || lastBlock.text().toLower().contains(d->filterText.toLower()));
344         }
345     }
346 
347     lastBlock = document->lastBlock();
348     textEdit->setDocument(document);
349 
350     if (atBottom)
351         scrollToBottom();
352 }
353 
354 QString OutputWindow::doNewlineEnforcement(const QString &out)
355 {
356     d->scrollToBottom = true;
357     QString s = out;
358     if (d->enforceNewline) {
359         s.prepend(QLatin1Char('\n'));
360         d->enforceNewline = false;
361     }
362 
363     if (s.endsWith(QLatin1Char('\n'))) {
364         d->enforceNewline = true; // make appendOutputInline put in a newline next time
365         s.chop(1);
366     }
367 
368     return s;
369 }
370 
371 void OutputWindow::setMaxCharCount(int count)
372 {
373     d->maxCharCount = count;
374     setMaximumBlockCount(count / 100);
375 }
376 
377 int OutputWindow::maxCharCount() const
378 {
379     return d->maxCharCount;
380 }
381 
382 bool OutputWindow::isReadOnly() const
383 {
384     if (d->formatter)
385         return d->formatter->plainTextEdit()->isReadOnly();
386     return false;
387 }
388 
389 void OutputWindow::setReadOnly(bool readOnly)
390 {
391     if (d->formatter)
392         d->formatter->plainTextEdit()->setReadOnly(readOnly);
393 }
394 
395 void OutputWindow::appendMessage(const QString &output, OutputFormat format)
396 {
397     QString out = SynchronousProcess::normalizeNewlines(output);
398 
399     if (out.size() > d->maxCharCount) {
400         // Current line alone exceeds limit, we need to cut it.
401         out.truncate(d->maxCharCount);
402         out.append("[...]");
403         setMaximumBlockCount(1);
404     } else {
405         int plannedChars = document()->characterCount() + out.size();
406         if (plannedChars > d->maxCharCount) {
407             int plannedBlockCount = document()->blockCount();
408             QTextBlock tb = document()->firstBlock();
409             while (tb.isValid() && plannedChars > d->maxCharCount && plannedBlockCount > 1) {
410                 plannedChars -= tb.length();
411                 plannedBlockCount -= 1;
412                 tb = tb.next();
413             }
414             setMaximumBlockCount(plannedBlockCount);
415         } else {
416             setMaximumBlockCount(-1);
417         }
418     }
419 
420     const bool atBottom = isScrollbarAtBottom() || m_scrollTimer.isActive();
421 
422     if (format == ErrorMessageFormat || format == NormalMessageFormat) {
423         if (d->formatter)
424             d->formatter->appendMessage(doNewlineEnforcement(out), format);
425     } else {
426 
427         bool sameLine = format == StdOutFormatSameLine
428                      || format == StdErrFormatSameLine;
429 
430         if (sameLine) {
431             d->scrollToBottom = true;
432 
433             int newline = -1;
434             bool enforceNewline = d->enforceNewline;
435             d->enforceNewline = false;
436 
437             if (enforceNewline) {
438                 out.prepend('\n');
439             } else {
440                 newline = out.indexOf(QLatin1Char('\n'));
441                 moveCursor(QTextCursor::End);
442                 if (newline != -1 && d->formatter)
443                     d->formatter->appendMessage(out.left(newline), format);// doesn't enforce new paragraph like appendPlainText
444             }
445 
446             QString s = out.mid(newline+1);
447             if (s.isEmpty()) {
448                 d->enforceNewline = true;
449             } else {
450                 if (s.endsWith(QLatin1Char('\n'))) {
451                     d->enforceNewline = true;
452                     s.chop(1);
453                 }
454                 if (d->formatter)
455                     d->formatter->appendMessage(s, format);
456             }
457         } else {
458             if (d->formatter)
459                 d->formatter->appendMessage(doNewlineEnforcement(out), format);
460         }
461     }
462 
463     if (atBottom) {
464         if (m_lastMessage.elapsed() < 5) {
465             m_scrollTimer.start();
466         } else {
467             m_scrollTimer.stop();
468             scrollToBottom();
469         }
470     }
471 
472     m_lastMessage.start();
473     enableUndoRedo();
474 }
475 
476 // TODO rename
477 void OutputWindow::appendText(const QString &textIn, const QTextCharFormat &format)
478 {
479     const QString text = SynchronousProcess::normalizeNewlines(textIn);
480     if (d->maxCharCount > 0 && document()->characterCount() >= d->maxCharCount)
481         return;
482     const bool atBottom = isScrollbarAtBottom();
483     if (!d->cursor.atEnd())
484         d->cursor.movePosition(QTextCursor::End);
485     d->cursor.beginEditBlock();
486     d->cursor.insertText(doNewlineEnforcement(text), format);
487 
488     if (d->maxCharCount > 0 && document()->characterCount() >= d->maxCharCount) {
489         QTextCharFormat tmp;
490         tmp.setFontWeight(QFont::Bold);
491         d->cursor.insertText(doNewlineEnforcement(tr("Additional output omitted. You can increase "
492                                                      "the limit in the \"Build & Run\" settings.")
493                                                   + QLatin1Char('\n')), tmp);
494     }
495 
496     d->cursor.endEditBlock();
497     if (atBottom)
498         scrollToBottom();
499 }
500 
501 bool OutputWindow::isScrollbarAtBottom() const
502 {
503     return verticalScrollBar()->value() == verticalScrollBar()->maximum();
504 }
505 
506 void OutputWindow::clear()
507 {
508     d->enforceNewline = false;
509     QPlainTextEdit::clear();
510     if (d->formatter)
511         d->formatter->clear();
512 }
513 
514 void OutputWindow::scrollToBottom()
515 {
516     verticalScrollBar()->setValue(verticalScrollBar()->maximum());
517     // QPlainTextEdit destroys the first calls value in case of multiline
518     // text, so make sure that the scroll bar actually gets the value set.
519     // Is a noop if the first call succeeded.
520     verticalScrollBar()->setValue(verticalScrollBar()->maximum());
521 }
522 
523 void OutputWindow::grayOutOldContent()
524 {
525     if (!d->cursor.atEnd())
526         d->cursor.movePosition(QTextCursor::End);
527     QTextCharFormat endFormat = d->cursor.charFormat();
528 
529     d->cursor.select(QTextCursor::Document);
530 
531     QTextCharFormat format;
532     const QColor bkgColor = palette().base().color();
533     const QColor fgdColor = palette().text().color();
534     double bkgFactor = 0.50;
535     double fgdFactor = 1.-bkgFactor;
536     format.setForeground(QColor((bkgFactor * bkgColor.red() + fgdFactor * fgdColor.red()),
537                              (bkgFactor * bkgColor.green() + fgdFactor * fgdColor.green()),
538                              (bkgFactor * bkgColor.blue() + fgdFactor * fgdColor.blue()) ));
539     d->cursor.mergeCharFormat(format);
540 
541     d->cursor.movePosition(QTextCursor::End);
542     d->cursor.setCharFormat(endFormat);
543     d->cursor.insertBlock(QTextBlockFormat());
544 }
545 
546 void OutputWindow::enableUndoRedo()
547 {
548     setMaximumBlockCount(0);
549     setUndoRedoEnabled(true);
550 }
551 
552 void OutputWindow::setWordWrapEnabled(bool wrap)
553 {
554     if (wrap)
555         setWordWrapMode(QTextOption::WrapAtWordBoundaryOrAnywhere);
556     else
557         setWordWrapMode(QTextOption::NoWrap);
558 }
559 
560 } // namespace Core
