Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
ProjectTree: Improve performance of finding nodes

Using projectNode->forEachGenericNode(...) to find a node is much slower
than using project->nodeForFilePath(...), since the latter uses a binary
search.

Also, when updating the node from the current document, we don't need to
look up the node for the file path, if the current node already has the
right file path.

Fixes: QTCREATORBUG-25845
Change-Id: I91be577a11b03915d1f21fe86a4cdd9ab0381f51

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "projecttree.h"
27 
28 #include "project.h"
29 #include "projectexplorerconstants.h"
30 #include "projectnodes.h"
31 #include "projecttreewidget.h"
32 #include "session.h"
33 #include "target.h"
34 
35 #include <coreplugin/actionmanager/actioncontainer.h>
36 #include <coreplugin/actionmanager/actionmanager.h>
37 #include <coreplugin/documentmanager.h>
38 #include <coreplugin/editormanager/editormanager.h>
39 #include <coreplugin/editormanager/ieditor.h>
40 #include <coreplugin/icore.h>
41 #include <coreplugin/idocument.h>
42 #include <coreplugin/modemanager.h>
43 #include <coreplugin/navigationwidget.h>
44 #include <coreplugin/vcsmanager.h>
45 
46 #include <utils/algorithm.h>
47 #include <utils/infobar.h>
48 #include <utils/qtcassert.h>
49 
50 #include <QApplication>
51 #include <QFileInfo>
52 #include <QMenu>
53 #include <QTimer>
54 
55 namespace { const char EXTERNAL_FILE_WARNING[] = "ExternalFile"; }
56 
57 using namespace Utils;
58 
59 namespace ProjectExplorer {
60 
61 using namespace Internal;
62 
63 ProjectTree *ProjectTree::s_instance = nullptr;
64 
65 ProjectTree::ProjectTree(QObject *parent) : QObject(parent)
66 {
67     s_instance = this;
68 
69     connect(Core::EditorManager::instance(), &Core::EditorManager::currentEditorChanged,
70             this, &ProjectTree::update);
71 
72     connect(qApp, &QApplication::focusChanged,
73             this, &ProjectTree::update);
74 
75     connect(SessionManager::instance(), &SessionManager::projectAdded,
76             this, &ProjectTree::sessionAndTreeChanged);
77     connect(SessionManager::instance(), &SessionManager::projectRemoved,
78             this, &ProjectTree::sessionAndTreeChanged);
79     connect(SessionManager::instance(), &SessionManager::startupProjectChanged,
80             this, &ProjectTree::sessionChanged);
81     connect(this, &ProjectTree::subtreeChanged, this, &ProjectTree::treeChanged);
82 }
83 
84 ProjectTree::~ProjectTree()
85 {
86     QTC_ASSERT(s_instance == this, return);
87     s_instance = nullptr;
88 }
89 
90 void ProjectTree::aboutToShutDown()
91 {
92     disconnect(qApp, &QApplication::focusChanged,
93                s_instance, &ProjectTree::update);
94     s_instance->setCurrent(nullptr, nullptr);
95     qDeleteAll(s_instance->m_projectTreeWidgets);
96     QTC_CHECK(s_instance->m_projectTreeWidgets.isEmpty());
97 }
98 
99 ProjectTree *ProjectTree::instance()
100 {
101     return s_instance;
102 }
103 
104 Project *ProjectTree::currentProject()
105 {
106     return s_instance->m_currentProject;
107 }
108 
109 Target *ProjectTree::currentTarget()
110 {
111     Project *p = currentProject();
112     return p ? p->activeTarget() : nullptr;
113 }
114 
115 BuildSystem *ProjectTree::currentBuildSystem()
116 {
117     Target *t = currentTarget();
118     return t ? t->buildSystem() : nullptr;
119 }
120 
121 Node *ProjectTree::currentNode()
122 {
123     s_instance->update();
124     return s_instance->m_currentNode;
125 }
126 
127 FilePath ProjectTree::currentFilePath()
128 {
129     Node *node = currentNode();
130     return node ? node->filePath() : FilePath();
131 }
132 
133 void ProjectTree::registerWidget(ProjectTreeWidget *widget)
134 {
135     s_instance->m_projectTreeWidgets.append(widget);
136     if (hasFocus(widget))
137         s_instance->updateFromProjectTreeWidget(widget);
138 }
139 
140 void ProjectTree::unregisterWidget(ProjectTreeWidget *widget)
141 {
142     s_instance->m_projectTreeWidgets.removeOne(widget);
143     if (hasFocus(widget))
144         s_instance->updateFromDocumentManager();
145 }
146 
147 void ProjectTree::nodeChanged(ProjectTreeWidget *widget)
148 {
149     if (hasFocus(widget))
150         s_instance->updateFromProjectTreeWidget(widget);
151 }
152 
153 void ProjectTree::update()
154 {
155     ProjectTreeWidget *focus = m_focusForContextMenu;
156     if (!focus)
157         focus = currentWidget();
158 
159     if (focus)
160         updateFromProjectTreeWidget(focus);
161     else
162         updateFromDocumentManager();
163 }
164 
165 void ProjectTree::updateFromProjectTreeWidget(ProjectTreeWidget *widget)
166 {
167     Node *currentNode = widget->currentNode();
168     Project *project = projectForNode(currentNode);
169 
170     if (!project)
171         updateFromNode(nullptr); // Project was removed!
172     else
173         setCurrent(currentNode, project);
174 }
175 
176 void ProjectTree::updateFromDocumentManager()
177 {
178     if (Core::IDocument *document = Core::EditorManager::currentDocument()) {
179         const FilePath fileName = document->filePath();
180         if (!m_currentNode || m_currentNode->filePath() != fileName)
181             updateFromNode(ProjectTreeWidget::nodeForFile(fileName));
182     } else {
183         updateFromNode(nullptr);
184     }
185 }
186 
187 void ProjectTree::updateFromNode(Node *node)
188 {
189     Project *project;
190     if (node)
191         project = projectForNode(node);
192     else
193         project = SessionManager::startupProject();
194 
195     setCurrent(node, project);
196     foreach (ProjectTreeWidget *widget, m_projectTreeWidgets)
197         widget->sync(node);
198 }
199 
200 void ProjectTree::setCurrent(Node *node, Project *project)
201 {
202     const bool changedProject = project != m_currentProject;
203     if (changedProject) {
204         if (m_currentProject) {
205             disconnect(m_currentProject, &Project::projectLanguagesUpdated,
206                        this, &ProjectTree::updateContext);
207         }
208 
209         m_currentProject = project;
210 
211         if (m_currentProject) {
212             connect(m_currentProject, &Project::projectLanguagesUpdated,
213                     this, &ProjectTree::updateContext);
214         }
215     }
216 
217     if (Core::IDocument *document = Core::EditorManager::currentDocument()) {
218         if (node) {
219             disconnect(document, &Core::IDocument::changed,
220                        this, &ProjectTree::updateExternalFileWarning);
221             document->infoBar()->removeInfo(EXTERNAL_FILE_WARNING);
222         } else {
223             connect(document, &Core::IDocument::changed,
224                     this, &ProjectTree::updateExternalFileWarning,
225                     Qt::UniqueConnection);
226         }
227     }
228 
229     if (node != m_currentNode) {
230         m_currentNode = node;
231         emit currentNodeChanged(node);
232     }
233 
234     if (changedProject) {
235         emit currentProjectChanged(m_currentProject);
236         sessionChanged();
237         updateContext();
238     }
239 }
240 
241 void ProjectTree::sessionChanged()
242 {
243     if (m_currentProject) {
244         Core::DocumentManager::setDefaultLocationForNewFiles(m_currentProject->projectDirectory().toString());
245     } else if (Project *project = SessionManager::startupProject()) {
246         Core::DocumentManager::setDefaultLocationForNewFiles(project->projectDirectory().toString());
247         updateFromNode(nullptr); // Make startup project current if there is no other current
248     } else {
249         Core::DocumentManager::setDefaultLocationForNewFiles(QString());
250     }
251     update();
252 }
253 
254 void ProjectTree::updateContext()
255 {
256     Core::Context oldContext;
257     oldContext.add(m_lastProjectContext);
258 
259     Core::Context newContext;
260     if (m_currentProject) {
261         newContext.add(m_currentProject->projectContext());
262         newContext.add(m_currentProject->projectLanguages());
263 
264         m_lastProjectContext = newContext;
265     } else {
266         m_lastProjectContext = Core::Context();
267     }
268 
269     Core::ICore::updateAdditionalContexts(oldContext, newContext);
270 }
271 
272 void ProjectTree::emitSubtreeChanged(FolderNode *node)
273 {
274     if (hasNode(node))
275         emit s_instance->subtreeChanged(node);
276 }
277 
278 void ProjectTree::sessionAndTreeChanged()
279 {
280     sessionChanged();
281     emit treeChanged();
282 }
283 
284 void ProjectTree::expandCurrentNodeRecursively()
285 {
286     if (const auto w = currentWidget())
287         w->expandCurrentNodeRecursively();
288 }
289 
290 void ProjectTree::collapseAll()
291 {
292     if (const auto w = currentWidget())
293         w->collapseAll();
294 }
295 
296 void ProjectTree::expandAll()
297 {
298     if (const auto w = currentWidget())
299         w->expandAll();
300 }
301 
302 void ProjectTree::changeProjectRootDirectory()
303 {
304     if (m_currentProject)
305         m_currentProject->changeRootProjectDirectory();
306 }
307 
308 void ProjectTree::updateExternalFileWarning()
309 {
310     auto document = qobject_cast<Core::IDocument *>(sender());
311     if (!document || document->filePath().isEmpty())
312         return;
313     Utils::InfoBar *infoBar = document->infoBar();
314     Utils::Id externalFileId(EXTERNAL_FILE_WARNING);
315     if (!document->isModified()) {
316         infoBar->removeInfo(externalFileId);
317         return;
318     }
319     if (!infoBar->canInfoBeAdded(externalFileId))
320         return;
321     const FilePath fileName = document->filePath();
322     const QList<Project *> projects = SessionManager::projects();
323     if (projects.isEmpty())
324         return;
325     for (Project *project : projects) {
326         FilePath projectDir = project->projectDirectory();
327         if (projectDir.isEmpty())
328             continue;
329         if (fileName.isChildOf(projectDir))
330             return;
331         // External file. Test if it under the same VCS
332         QString topLevel;
333         if (Core::VcsManager::findVersionControlForDirectory(projectDir.toString(), &topLevel)
334                 && fileName.isChildOf(FilePath::fromString(topLevel))) {
335             return;
336         }
337     }
338     infoBar->addInfo(
339         Utils::InfoBarEntry(externalFileId,
340                             tr("<b>Warning:</b> This file is outside the project directory."),
341                             Utils::InfoBarEntry::GlobalSuppression::Enabled));
342 }
343 
344 bool ProjectTree::hasFocus(ProjectTreeWidget *widget)
345 {
346     return widget
347             && ((widget->focusWidget() && widget->focusWidget()->hasFocus())
348                 || s_instance->m_focusForContextMenu == widget);
349 }
350 
351 ProjectTreeWidget *ProjectTree::currentWidget() const
352 {
353     return findOrDefault(m_projectTreeWidgets, &ProjectTree::hasFocus);
354 }
355 
356 void ProjectTree::showContextMenu(ProjectTreeWidget *focus, const QPoint &globalPos, Node *node)
357 {
358     QMenu *contextMenu = nullptr;
359     emit s_instance->aboutToShowContextMenu(node);
360 
361     if (!node) {
362         contextMenu = Core::ActionManager::actionContainer(Constants::M_SESSIONCONTEXT)->menu();
363     } else  if (node->isProjectNodeType()) {
364         if ((node->parentFolderNode() && node->parentFolderNode()->asContainerNode())
365                 || node->asContainerNode())
366             contextMenu = Core::ActionManager::actionContainer(Constants::M_PROJECTCONTEXT)->menu();
367         else
368             contextMenu = Core::ActionManager::actionContainer(Constants::M_SUBPROJECTCONTEXT)->menu();
369     } else if (node->isVirtualFolderType() || node->isFolderNodeType()) {
370         contextMenu = Core::ActionManager::actionContainer(Constants::M_FOLDERCONTEXT)->menu();
371     } else if (node->asFileNode()) {
372         contextMenu = Core::ActionManager::actionContainer(Constants::M_FILECONTEXT)->menu();
373     }
374 
375     if (contextMenu && !contextMenu->actions().isEmpty()) {
376         s_instance->m_focusForContextMenu = focus;
377         contextMenu->popup(globalPos);
378         connect(contextMenu, &QMenu::aboutToHide,
379                 s_instance, &ProjectTree::hideContextMenu,
380                 Qt::ConnectionType(Qt::UniqueConnection | Qt::QueuedConnection));
381     }
382 }
383 
384 void ProjectTree::highlightProject(Project *project, const QString &message)
385 {
386     Core::ModeManager::activateMode(Core::Constants::MODE_EDIT);
387 
388     // Shows and focusses a project tree
389     QWidget *widget = Core::NavigationWidget::activateSubWidget(ProjectExplorer::Constants::PROJECTTREE_ID, Core::Side::Left);
390 
391     if (auto *projectTreeWidget = qobject_cast<ProjectTreeWidget *>(widget))
392         projectTreeWidget->showMessage(project->rootProjectNode(), message);
393 }
394 
395 /*!
396     Registers the function \a treeChange to be run on a (sub tree of the)
397     project tree when it is created. The function must be thread-safe, and
398     applying the function on the same tree a second time must be a no-op.
399 */
400 void ProjectTree::registerTreeManager(const TreeManagerFunction &treeChange)
401 {
402     if (treeChange)
403         s_instance->m_treeManagers.append(treeChange);
404 }
405 
406 void ProjectTree::applyTreeManager(FolderNode *folder)
407 {
408     if (!folder)
409         return;
410 
411     for (TreeManagerFunction &f : s_instance->m_treeManagers)
412         f(folder);
413 }
414 
415 bool ProjectTree::hasNode(const Node *node)
416 {
417     return Utils::contains(SessionManager::projects(), [node](const Project *p) {
418         if (!p)
419             return false;
420         if (p->containerNode() == node)
421             return true;
422         // When parsing fails we have a living container node but no rootProjectNode.
423         ProjectNode *pn = p->rootProjectNode();
424         if (!pn)
425             return false;
426         return pn->findNode([node](const Node *n) { return n == node; }) != nullptr;
427     });
428 }
429 
430 void ProjectTree::forEachNode(const std::function<void(Node *)> &task)
431 {
432     const QList<Project *> projects = SessionManager::projects();
433     for (Project *project : projects) {
434         if (ProjectNode *projectNode = project->rootProjectNode()) {
435             task(projectNode);
436             projectNode->forEachGenericNode(task);
437         }
438     }
439 }
440 
441 Project *ProjectTree::projectForNode(const Node *node)
442 {
443     if (!node)
444         return nullptr;
445 
446     const FolderNode *folder = node->asFolderNode();
447     if (!folder)
448         folder = node->parentFolderNode();
449 
450     while (folder && folder->parentFolderNode())
451         folder = folder->parentFolderNode();
452 
453     return Utils::findOrDefault(SessionManager::projects(), [folder](const Project *pro) {
454         return pro->containerNode() == folder;
455     });
456 }
457 
458 Node *ProjectTree::nodeForFile(const FilePath &fileName)
459 {
460     Node *node = nullptr;
461     for (const Project *project : SessionManager::projects()) {
462         project->nodeForFilePath(fileName, [&](const Node *n) {
463             if (!node || (!node->asFileNode() && n->asFileNode()))
464                 node = const_cast<Node *>(n);
465             return false;
466         });
467         // early return:
468         if (node && node->asFileNode())
469             return node;
470     }
471     return node;
472 }
473 
474 const QList<Node *> ProjectTree::siblingsWithSameBaseName(const Node *fileNode)
475 {
476     ProjectNode *productNode = fileNode->parentProjectNode();
477     while (productNode && !productNode->isProduct())
478         productNode = productNode->parentProjectNode();
479     if (!productNode)
480         return {};
481     const QFileInfo fi = fileNode->filePath().toFileInfo();
482     const auto filter = [&fi](const Node *n) {
483         return n->asFileNode()
484                 && n->filePath().toFileInfo().dir() == fi.dir()
485                 && n->filePath().completeBaseName() == fi.completeBaseName()
486                 && n->filePath().toString() != fi.filePath();
487     };
488     return productNode->findNodes(filter);
489 }
490 
491 void ProjectTree::hideContextMenu()
492 {
493     if (m_keepCurrentNodeRequests == 0)
494         m_focusForContextMenu = nullptr;
495 }
496 
497 ProjectTree::CurrentNodeKeeper::CurrentNodeKeeper()
498     : m_active(ProjectTree::instance()->m_focusForContextMenu)
499 {
500     if (m_active)
501         ++ProjectTree::instance()->m_keepCurrentNodeRequests;
502 }
503 
504 ProjectTree::CurrentNodeKeeper::~CurrentNodeKeeper()
505 {
506     if (m_active && --ProjectTree::instance()->m_keepCurrentNodeRequests == 0) {
507         ProjectTree::instance()->m_focusForContextMenu = nullptr;
508         ProjectTree::instance()->update();
509     }
510 }
511 
512 } // namespace ProjectExplorer
