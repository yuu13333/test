Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
QFile benchmark: only set up and tear down the data directory once

None of the tests modify the data, so there's no risk that one test
will cause another to fail via that. We can thus avoid the repeated
cost of that set-up and teardown, which was done repeatedly for each
test function since benchmarks get run repeatedly if they're quick.

Use QTempoearyDir to manage the test data, so that it's tidied away
automagically, instead of trying to tidy up at the end of each test
(which was apt to be skipped if a test failed).

As drive-bys, fix a typo in a QFAIL()'s message and turn some heap
buffers into stack buffers to save the need to delete [] them at the
end of their tests.

Inspired by a kindred change by Andreas Buhr and a suggestion on its
review by Friedemann Kleint.

Pick-to: 6.2 6.1 5.15
Change-Id: I6067eb35babfbac02990ef39817b0d5122f563cd

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2021 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the test suite of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:GPL-EXCEPT$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
21 ** included in the packaging of this file. Please review the following
22 ** information to ensure the GNU General Public License requirements will
23 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
24 **
25 ** $QT_END_LICENSE$
26 **
27 ****************************************************************************/
28 
29 #include <QDebug>
30 #include <QTemporaryFile>
31 #include <QString>
32 #include <QDirIterator>
33 
34 #include <private/qfsfileengine_p.h>
35 
36 #include <qtest.h>
37 
38 #include <stdio.h>
39 
40 #ifdef Q_OS_WIN
41 # include <windows.h>
42 #endif
43 
44 #if defined(Q_OS_QNX) && defined(open)
45 #undef open
46 #endif
47 
48 #define BUFSIZE 1024*512
49 #define FACTOR 1024*512
50 #define TF_SIZE FACTOR*81
51 
52 // 10 predefined (but random() seek positions
53 // hardcoded to be comparable over several runs
54 const int seekpos[] = {int(TF_SIZE*0.52),
55                        int(TF_SIZE*0.23),
56                        int(TF_SIZE*0.73),
57                        int(TF_SIZE*0.77),
58                        int(TF_SIZE*0.80),
59                        int(TF_SIZE*0.12),
60                        int(TF_SIZE*0.53),
61                        int(TF_SIZE*0.21),
62                        int(TF_SIZE*0.27),
63                        int(TF_SIZE*0.78)};
64 
65 const int sp_size = sizeof(seekpos)/sizeof(int);
66 
67 class tst_qfile: public QObject
68 {
69 Q_ENUMS(BenchmarkType)
70 Q_OBJECT
71 public:
72     enum BenchmarkType {
73         QFileBenchmark = 1,
74 #ifdef QT_BUILD_INTERNAL
75         QFSFileEngineBenchmark,
76 #endif
77         Win32Benchmark,
78         PosixBenchmark,
79         QFileFromPosixBenchmark
80     };
81 private slots:
82     void initTestCase();
83     void cleanupTestCase();
84 
85     void open_data();
86     void open();
87     void seek_data();
88     void seek();
89 
90     void readSmallFiles_QFile();
91     void readSmallFiles_QFSFileEngine();
92     void readSmallFiles_posix();
93     void readSmallFiles_Win32();
94 
95     void readSmallFiles_QFile_data();
96     void readSmallFiles_QFSFileEngine_data();
97     void readSmallFiles_posix_data();
98     void readSmallFiles_Win32_data();
99 
100     void readBigFile_QFile_data();
101     void readBigFile_QFSFileEngine_data();
102     void readBigFile_posix_data();
103     void readBigFile_Win32_data();
104 
105     void readBigFile_QFile();
106     void readBigFile_QFSFileEngine();
107     void readBigFile_posix();
108     void readBigFile_Win32();
109 
110 private:
111     void readFile_data(BenchmarkType type, QIODevice::OpenModeFlag t, QIODevice::OpenModeFlag b);
112     void readBigFile();
113     void readSmallFiles();
114 
115     class TestDataDir : public QTemporaryDir
116     {
117         void createFile();
118         void createSmallFiles();
119     public:
120         TestDataDir() : QTemporaryDir(), fail(errorString().toLocal8Bit())
121         {
122             if (fail.isEmpty() && !QTemporaryDir::isValid())
123                 fail = "Failed to create temporary directory for data";
124             if (isValid())
125                 createSmallFiles();
126             if (isValid())
127                 createFile();
128             if (isValid())
129                 QTest::qSleep(2000); // let IO settle
130         }
131         bool isValid() { return QTemporaryDir::isValid() && fail.isEmpty(); }
132         QByteArray fail;
133         QString filename;
134     } tempDir;
135 };
136 
137 Q_DECLARE_METATYPE(tst_qfile::BenchmarkType)
138 Q_DECLARE_METATYPE(QIODevice::OpenMode)
139 Q_DECLARE_METATYPE(QIODevice::OpenModeFlag)
140 
141 /* None of the tests modify the test data in tempDir, so it's OK to only create
142  * and tear down the directory once.
143  */
144 void tst_qfile::TestDataDir::createFile()
145 {
146     QTemporaryFile tmpFile;
147     tmpFile.setAutoRemove(false);
148     if (!tmpFile.open()) {
149         fail = "Unable to prepare files for test";
150         return;
151     }
152 #if 0 // Varied data, rather than filling with '\0' bytes:
153     for (int row = 0; row < FACTOR; ++row) {
154         tmpFile.write(QByteArray().fill('0' + row % ('0' - 'z'), 80));
155         tmpFile.write("\n");
156     }
157 #else
158     tmpFile.seek(FACTOR * 80);
159     tmpFile.putChar('\n');
160 #endif
161     filename = tmpFile.fileName();
162     tmpFile.close();
163 }
164 
165 void tst_qfile::TestDataDir::createSmallFiles()
166 {
167     QDir dir(path());
168     dir.mkdir("tst");
169     dir.cd("tst");
170 
171     for (int i = 0; i < 1000; ++i) {
172         QFile f(filePath(QString::number(i)));
173         if (!f.open(QIODevice::WriteOnly)) {
174             fail = "Unable to prepare small files for test";
175             return;
176         }
177         f.seek(511);
178         f.putChar('\n');
179         f.close();
180     }
181 }
182 
183 void tst_qfile::initTestCase()
184 {
185     QVERIFY2(tempDir.isValid(), tempDir.fail.constData());
186 }
187 
188 void tst_qfile::cleanupTestCase()
189 {
190 }
191 
192 void tst_qfile::readFile_data(BenchmarkType type, QIODevice::OpenModeFlag t,
193                               QIODevice::OpenModeFlag b)
194 {
195     QTest::addColumn<tst_qfile::BenchmarkType>("testType");
196     QTest::addColumn<int>("blockSize");
197     QTest::addColumn<QFile::OpenModeFlag>("textMode");
198     QTest::addColumn<QFile::OpenModeFlag>("bufferedMode");
199 
200     QByteArray flagstring;
201     if (t & QIODevice::Text)
202         flagstring += "textMode ";
203     if (b & QIODevice::Unbuffered)
204         flagstring += "unbuffered ";
205     if (flagstring.isEmpty())
206         flagstring = "none";
207 
208     const int kbs[] = {1, 2, 8, 16, 32, 512};
209     for (int kb : kbs) {
210         const int size = 1024 * kb;
211         QTest::addRow("BS: %d, Flags: %s", size, flagstring.constData())
212             << type << size << t << b;
213     }
214 }
215 
216 void tst_qfile::readBigFile_QFile() { readBigFile(); }
217 void tst_qfile::readBigFile_QFSFileEngine()
218 {
219     readBigFile();
220 }
221 void tst_qfile::readBigFile_posix()
222 {
223     readBigFile();
224 }
225 void tst_qfile::readBigFile_Win32() { readBigFile(); }
226 
227 void tst_qfile::readBigFile_QFile_data()
228 {
229     readFile_data(QFileBenchmark, QIODevice::NotOpen, QIODevice::NotOpen);
230     readFile_data(QFileBenchmark, QIODevice::NotOpen, QIODevice::Unbuffered);
231     readFile_data(QFileBenchmark, QIODevice::Text, QIODevice::NotOpen);
232     readFile_data(QFileBenchmark, QIODevice::Text, QIODevice::Unbuffered);
233 
234 }
235 
236 void tst_qfile::readBigFile_QFSFileEngine_data()
237 {
238 #ifdef QT_BUILD_INTERNAL
239     // Support for buffering dropped at 5.10, so only test Unbuffered
240     readFile_data(QFSFileEngineBenchmark, QIODevice::NotOpen, QIODevice::Unbuffered);
241     readFile_data(QFSFileEngineBenchmark, QIODevice::Text, QIODevice::Unbuffered);
242 #else
243     QSKIP("This test requires -developer-build.");
244 #endif
245 }
246 
247 void tst_qfile::readBigFile_posix_data()
248 {
249     readFile_data(PosixBenchmark, QIODevice::NotOpen, QIODevice::NotOpen);
250 }
251 
252 void tst_qfile::readBigFile_Win32_data()
253 {
254 #ifdef Q_OS_WIN
255     readFile_data(Win32Benchmark, QIODevice::NotOpen, QIODevice::NotOpen);
256 #else
257     QSKIP("This is Windows only benchmark.");
258 #endif
259 }
260 
261 void tst_qfile::readBigFile()
262 {
263     QFETCH(tst_qfile::BenchmarkType, testType);
264     QFETCH(int, blockSize);
265     QFETCH(QFile::OpenModeFlag, textMode);
266     QFETCH(QFile::OpenModeFlag, bufferedMode);
267 
268     char buffer[BUFSIZE];
269     switch (testType) {
270         case(QFileBenchmark): {
271             QFile file(tempDir.filename);
272             file.open(QIODevice::ReadOnly|textMode|bufferedMode);
273             QBENCHMARK {
274                 while(!file.atEnd())
275                     file.read(blockSize);
276                 file.reset();
277             }
278             file.close();
279         }
280         break;
281 #ifdef QT_BUILD_INTERNAL
282         case(QFSFileEngineBenchmark): {
283             QFSFileEngine fse(tempDir.filename);
284             fse.open(QIODevice::ReadOnly|textMode|bufferedMode);
285             QBENCHMARK {
286                //qWarning() << fse.supportsExtension(QAbstractFileEngine::AtEndExtension);
287                while(fse.read(buffer, blockSize));
288                fse.seek(0);
289             }
290             fse.close();
291         }
292         break;
293 #endif
294         case(PosixBenchmark): {
295             QByteArray data = tempDir.filename.toLocal8Bit();
296             const char* cfilename = data.constData();
297             FILE* cfile = ::fopen(cfilename, "rb");
298             QBENCHMARK {
299                 while(!feof(cfile))
300                     ::fread(buffer, blockSize, 1, cfile);
301                 ::fseek(cfile, 0, SEEK_SET);
302             }
303             ::fclose(cfile);
304         }
305         break;
306         case(QFileFromPosixBenchmark): {
307             // No gain in benchmarking this case
308         }
309         break;
310         case(Win32Benchmark): {
311 #ifdef Q_OS_WIN
312             HANDLE hndl;
313 
314             // ensure we don't account string conversion
315             wchar_t* cfilename = reinterpret_cast<wchar_t *>(tempDir.filename.utf16());
316 
317             hndl = CreateFile(cfilename, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
318             Q_ASSERT(hndl);
319             wchar_t* nativeBuffer = new wchar_t[BUFSIZE];
320             DWORD numberOfBytesRead;
321 
322             QBENCHMARK {
323                 do {
324                    ReadFile(hndl, nativeBuffer, blockSize, &numberOfBytesRead, NULL);
325                 } while(numberOfBytesRead != 0);
326                 SetFilePointer(hndl, 0, NULL, FILE_BEGIN);
327             }
328             delete[] nativeBuffer;
329             CloseHandle(hndl);
330 #else
331             QFAIL("Not running on a non-Windows platform!");
332 #endif
333         }
334         break;
335     }
336 }
337 
338 void tst_qfile::seek_data()
339 {
340     QTest::addColumn<tst_qfile::BenchmarkType>("testType");
341     QTest::newRow("QFile") << QFileBenchmark;
342 #ifdef QT_BUILD_INTERNAL
343     QTest::newRow("QFSFileEngine") << QFSFileEngineBenchmark;
344 #endif
345     QTest::newRow("Posix FILE*") << PosixBenchmark;
346 #ifdef Q_OS_WIN
347     QTest::newRow("Win32 API") << Win32Benchmark;
348 #endif
349 }
350 
351 void tst_qfile::seek()
352 {
353     QFETCH(tst_qfile::BenchmarkType, testType);
354     int i = 0;
355 
356     switch (testType) {
357         case(QFileBenchmark): {
358             QFile file(tempDir.filename);
359             file.open(QIODevice::ReadOnly);
360             QBENCHMARK {
361                 i=(i+1)%sp_size;
362                 file.seek(seekpos[i]);
363             }
364             file.close();
365         }
366         break;
367 #ifdef QT_BUILD_INTERNAL
368         case(QFSFileEngineBenchmark): {
369             QFSFileEngine fse(tempDir.filename);
370             fse.open(QIODevice::ReadOnly | QIODevice::Unbuffered);
371             QBENCHMARK {
372                 i=(i+1)%sp_size;
373                 fse.seek(seekpos[i]);
374             }
375             fse.close();
376         }
377         break;
378 #endif
379         case(PosixBenchmark): {
380             QByteArray data = tempDir.filename.toLocal8Bit();
381             const char* cfilename = data.constData();
382             FILE* cfile = ::fopen(cfilename, "rb");
383             QBENCHMARK {
384                 i=(i+1)%sp_size;
385                 ::fseek(cfile, seekpos[i], SEEK_SET);
386             }
387             ::fclose(cfile);
388         }
389         break;
390         case(QFileFromPosixBenchmark): {
391             // No gain in benchmarking this case
392         }
393         break;
394         case(Win32Benchmark): {
395 #ifdef Q_OS_WIN
396             HANDLE hndl;
397 
398             // ensure we don't account string conversion
399             wchar_t* cfilename = reinterpret_cast<wchar_t *>(tempDir.filename.utf16());
400 
401             hndl = CreateFile(cfilename, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
402             Q_ASSERT(hndl);
403             QBENCHMARK {
404                 i=(i+1)%sp_size;
405                 SetFilePointer(hndl, seekpos[i], NULL, 0);
406             }
407             CloseHandle(hndl);
408 #else
409             QFAIL("Not running on a Windows platform!");
410 #endif
411         }
412         break;
413     }
414 }
415 
416 void tst_qfile::open_data()
417 {
418     QTest::addColumn<tst_qfile::BenchmarkType>("testType");
419     QTest::newRow("QFile") << QFileBenchmark;
420 #ifdef QT_BUILD_INTERNAL
421     QTest::newRow("QFSFileEngine") << QFSFileEngineBenchmark;
422 #endif
423     QTest::newRow("Posix FILE*") << PosixBenchmark;
424     QTest::newRow("QFile from FILE*") << QFileFromPosixBenchmark;
425 #ifdef Q_OS_WIN
426     QTest::newRow("Win32 API") << Win32Benchmark;
427 #endif
428 }
429 
430 void tst_qfile::open()
431 {
432     QFETCH(tst_qfile::BenchmarkType, testType);
433 
434     switch (testType) {
435         case(QFileBenchmark): {
436             QBENCHMARK {
437                 QFile file(tempDir.filename);
438                 file.open(QIODevice::ReadOnly);
439                 file.close();
440             }
441         }
442         break;
443 #ifdef QT_BUILD_INTERNAL
444         case(QFSFileEngineBenchmark): {
445             QBENCHMARK {
446                 QFSFileEngine fse(tempDir.filename);
447                 fse.open(QIODevice::ReadOnly | QIODevice::Unbuffered);
448                 fse.close();
449             }
450         }
451         break;
452 #endif
453         case(PosixBenchmark): {
454             // ensure we don't account toLocal8Bit()
455             QByteArray data = tempDir.filename.toLocal8Bit();
456             const char* cfilename = data.constData();
457 
458             QBENCHMARK {
459                 FILE* cfile = ::fopen(cfilename, "rb");
460                 ::fclose(cfile);
461             }
462         }
463         break;
464         case(QFileFromPosixBenchmark): {
465             // ensure we don't account toLocal8Bit()
466             QByteArray data = tempDir.filename.toLocal8Bit();
467             const char* cfilename = data.constData();
468             FILE* cfile = ::fopen(cfilename, "rb");
469 
470             QBENCHMARK {
471                 QFile file;
472                 file.open(cfile, QIODevice::ReadOnly);
473                 file.close();
474             }
475             ::fclose(cfile);
476         }
477         break;
478         case(Win32Benchmark): {
479 #ifdef Q_OS_WIN
480             HANDLE hndl;
481 
482             // ensure we don't account string conversion
483             wchar_t* cfilename = reinterpret_cast<wchar_t *>(tempDir.filename.utf16());
484 
485             QBENCHMARK {
486                 hndl = CreateFile(cfilename, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
487                 Q_ASSERT(hndl);
488                 CloseHandle(hndl);
489             }
490 #else
491         QFAIL("Not running on a non-Windows platform!");
492 #endif
493         }
494         break;
495     }
496 }
497 
498 
499 void tst_qfile::readSmallFiles_QFile() { readSmallFiles(); }
500 void tst_qfile::readSmallFiles_QFSFileEngine()
501 {
502     readSmallFiles();
503 }
504 void tst_qfile::readSmallFiles_posix()
505 {
506     readSmallFiles();
507 }
508 void tst_qfile::readSmallFiles_Win32()
509 {
510     readSmallFiles();
511 }
512 
513 void tst_qfile::readSmallFiles_QFile_data()
514 {
515     readFile_data(QFileBenchmark, QIODevice::NotOpen, QIODevice::NotOpen);
516     readFile_data(QFileBenchmark, QIODevice::NotOpen, QIODevice::Unbuffered);
517     readFile_data(QFileBenchmark, QIODevice::Text, QIODevice::NotOpen);
518     readFile_data(QFileBenchmark, QIODevice::Text, QIODevice::Unbuffered);
519 
520 }
521 
522 void tst_qfile::readSmallFiles_QFSFileEngine_data()
523 {
524 #ifdef QT_BUILD_INTERNAL
525     // Support for buffering dropped at 5.10, so only test Unbuffered
526     readFile_data(QFSFileEngineBenchmark, QIODevice::NotOpen, QIODevice::Unbuffered);
527     readFile_data(QFSFileEngineBenchmark, QIODevice::Text, QIODevice::Unbuffered);
528 #else
529     QSKIP("This test requires -developer-build.");
530 #endif
531 }
532 
533 void tst_qfile::readSmallFiles_posix_data()
534 {
535     readFile_data(PosixBenchmark, QIODevice::NotOpen, QIODevice::NotOpen);
536 }
537 
538 void tst_qfile::readSmallFiles_Win32_data()
539 {
540 
541 #ifdef Q_OS_WIN
542     readFile_data(Win32Benchmark, QIODevice::NotOpen, QIODevice::NotOpen);
543 #else
544     QSKIP("This is Windows only benchmark.");
545 #endif
546 }
547 
548 void tst_qfile::readSmallFiles()
549 {
550     QFETCH(tst_qfile::BenchmarkType, testType);
551     QFETCH(int, blockSize);
552     QFETCH(QFile::OpenModeFlag, textMode);
553     QFETCH(QFile::OpenModeFlag, bufferedMode);
554 
555     QDir dir(tempDir.path());
556     const QStringList files = dir.entryList(QDir::NoDotAndDotDot|QDir::NoSymLinks|QDir::Files);
557     char buffer[BUFSIZE];
558 
559     switch (testType) {
560         case(QFileBenchmark): {
561             QList<QFile*> fileList;
562             Q_FOREACH(QString file, files) {
563                 QFile *f = new QFile(tempDir.filePath(file));
564                 f->open(QIODevice::ReadOnly|textMode|bufferedMode);
565                 fileList.append(f);
566             }
567 
568             QBENCHMARK {
569                 Q_FOREACH(QFile *file, fileList) {
570                     while (!file->atEnd()) {
571                        file->read(buffer, blockSize);
572                     }
573                 }
574             }
575 
576             Q_FOREACH(QFile *file, fileList) {
577                 file->close();
578                 delete file;
579             }
580         }
581         break;
582 #ifdef QT_BUILD_INTERNAL
583         case(QFSFileEngineBenchmark): {
584             QList<QFSFileEngine*> fileList;
585             Q_FOREACH(QString file, files) {
586                 QFSFileEngine *fse = new QFSFileEngine(tempDir.filePath(file));
587                 fse->open(QIODevice::ReadOnly|textMode|bufferedMode);
588                 fileList.append(fse);
589             }
590 
591             QBENCHMARK {
592                 Q_FOREACH(QFSFileEngine *fse, fileList) {
593                     while (fse->read(buffer, blockSize));
594                 }
595             }
596 
597             Q_FOREACH(QFSFileEngine *fse, fileList) {
598                 fse->close();
599                 delete fse;
600             }
601         }
602         break;
603 #endif
604         case(PosixBenchmark): {
605             QList<FILE*> fileList;
606             Q_FOREACH(QString file, files) {
607                 fileList.append(::fopen(QFile::encodeName(tempDir.filePath(file)).constData(), "rb"));
608             }
609 
610             QBENCHMARK {
611                 Q_FOREACH(FILE* cfile, fileList) {
612                     while(!feof(cfile))
613                         ::fread(buffer, blockSize, 1, cfile);
614                     ::fseek(cfile, 0, SEEK_SET);
615                 }
616             }
617 
618             Q_FOREACH(FILE* cfile, fileList) {
619                 ::fclose(cfile);
620             }
621         }
622         break;
623         case(QFileFromPosixBenchmark): {
624             // No gain in benchmarking this case
625         }
626         break;
627         case(Win32Benchmark): {
628 #ifdef Q_OS_WIN
629             HANDLE hndl;
630 
631             // ensure we don't account string conversion
632             wchar_t* cfilename = reinterpret_cast<wchar_t *>(tempDir.filename.utf16());
633 
634             hndl = CreateFile(cfilename, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
635             Q_ASSERT(hndl);
636             wchar_t* nativeBuffer = new wchar_t[BUFSIZE];
637             DWORD numberOfBytesRead;
638             QBENCHMARK {
639                 do {
640                    ReadFile(hndl, nativeBuffer, blockSize, &numberOfBytesRead, NULL);
641                 } while(numberOfBytesRead != 0);
642             }
643             delete nativeBuffer;
644             CloseHandle(hndl);
645 #else
646             QFAIL("Not running on a non-Windows platform!");
647 #endif
648         }
649         break;
650     }
651 }
652 
653 QTEST_MAIN(tst_qfile)
654 
655 #include "main.moc"
