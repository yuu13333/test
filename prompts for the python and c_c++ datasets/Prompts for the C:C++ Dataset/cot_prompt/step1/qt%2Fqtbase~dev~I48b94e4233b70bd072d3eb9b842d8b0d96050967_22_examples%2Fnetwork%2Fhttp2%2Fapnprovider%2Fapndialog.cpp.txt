Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
WIP: HTTP/2 sample - the Apple Push Notifications provider

This is a simple Apple Push Notification (APN) provider implemented with
QtNetwork/QtWidgets:

- it starts a simple TCP server, waiting for clients (our APN client
  example app) to send us their APN tokens
- it sends then push notifications to the registered devices, using
  QNetworkAccessManager and QNetworkRequests with HTTP2 protocol enabled.

Change-Id: I48b94e4233b70bd072d3eb9b842d8b0d96050967

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the examples of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:BSD$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** BSD License Usage
18 ** Alternatively, you may use this file under the terms of the BSD license
19 ** as follows:
20 **
21 ** "Redistribution and use in source and binary forms, with or without
22 ** modification, are permitted provided that the following conditions are
23 ** met:
24 **   * Redistributions of source code must retain the above copyright
25 **     notice, this list of conditions and the following disclaimer.
26 **   * Redistributions in binary form must reproduce the above copyright
27 **     notice, this list of conditions and the following disclaimer in
28 **     the documentation and/or other materials provided with the
29 **     distribution.
30 **   * Neither the name of The Qt Company Ltd nor the names of its
31 **     contributors may be used to endorse or promote products derived
32 **     from this software without specific prior written permission.
33 **
34 **
35 ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
36 ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
37 ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
38 ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
39 ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
40 ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
41 ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
42 ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
43 ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
44 ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
45 ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
46 **
47 ** $QT_END_LICENSE$
48 **
49 ****************************************************************************/
50 
51 #include "apnprovider.h"
52 #include "apndialog.h"
53 
54 ApnDialog::ApnDialog(ApnProvider *apn, QWidget *parent)
55     : QDialog(parent),
56       ui(new Ui::ApnDialog),
57       provider(apn),
58       listViewModel(0, 1)
59 {
60     Q_ASSERT(apn);
61 
62     ui->setupUi(this);
63     ui->devicesView->setModel(&listViewModel);
64     ui->devicesView->setSelectionMode(QAbstractItemView::SingleSelection);
65 
66     if (loadPreviousSslConfiguration() && startProvider())
67         enableControls();
68 }
69 
70 ApnDialog::~ApnDialog()
71 {
72     delete ui;
73 }
74 
75 void ApnDialog::deviceRegistered(const QByteArray &deviceToken)
76 {
77     const QString itemText(QString::fromLatin1(deviceToken));
78     listViewModel.appendRow(new QStandardItem(itemText));
79     ui->sendBtn->setEnabled(true);
80 }
81 
82 void ApnDialog::apnReply(const QString &description)
83 {
84     ui->replyStatus->setText(description);
85 }
86 
87 void ApnDialog::on_sendBtn_clicked()
88 {
89     ui->replyStatus->clear();
90 
91     const QModelIndex index = ui->devicesView->currentIndex();
92     if (index.isValid()) {
93         if (QStandardItem *item = listViewModel.itemFromIndex(index)) {
94             Q_ASSERT(provider.data());
95             provider->sendNotification(item->text().toLatin1(),
96                                        ui->modeCheckBox->isChecked());
97             return;
98         }
99     }
100 
101     QMessageBox::critical(nullptr, tr("APN provider"), tr("Please, select a device token ..."));
102 }
103 
104 void ApnDialog::on_loadCertBtn_clicked()
105 {
106     const auto path = QFileDialog::getOpenFileName();
107     if (path.size() && path != currentCertificatePath) {
108         disableControls();
109 
110         Q_ASSERT(provider.data());
111         provider->stop();
112 
113         if (loadSslConfiguration(path) && startProvider())
114             enableControls();
115     }
116 }
117 
118 void ApnDialog::disableControls()
119 {
120     listViewModel.clear();
121     ui->replyStatus->clear();
122     ui->serverStatus->clear();
123 
124     ui->devicesView->setEnabled(false);
125     ui->sendBtn->setEnabled(false);
126 }
127 
128 void ApnDialog::enableControls()
129 {
130     ui->serverStatus->setText(tr("The server is running on IP: %1\tport: %2\n"
131                                  "Run the APN client example now.\n\n")
132                                  .arg(provider->serverAddress().toString())
133                                  .arg(provider->serverPort()));
134     ui->devicesView->setEnabled(true);
135 }
136 
137 bool ApnDialog::loadPreviousSslConfiguration()
138 {
139     QSettings settings(QSettings::UserScope, QLatin1String("QtProject"));
140     settings.beginGroup(QLatin1String("QtNetwork"));
141     const QString certificatePath = settings.value(QLatin1String("APNCertificate")).toString();
142     settings.endGroup();
143 
144     if (!certificatePath.size())
145         return false;
146 
147     return loadSslConfiguration(certificatePath);
148 }
149 
150 bool ApnDialog::loadSslConfiguration(const QString &certificatePath)
151 {
152     QFile pkcs12File(certificatePath);
153     if (!pkcs12File.open(QFile::ReadOnly)) {
154         QMessageBox::critical(this, tr("APN provider"),
155                               tr("Failed to open certificate file: %1").arg(certificatePath));
156         return false;
157     }
158 
159     QSslKey key;
160     QSslCertificate cert;
161     QList<QSslCertificate> chain;
162     if (!QSslCertificate::importPkcs12(&pkcs12File, &key, &cert, &chain, "")) {
163         QMessageBox::critical(this, tr("APN provider"),
164                               tr("Failed to import pkcs12 from: %1").arg(certificatePath));
165         return false;
166     }
167 
168     auto config = QSslConfiguration::defaultConfiguration();
169     QList<QSslCertificate> localCerts = config.localCertificateChain();
170     localCerts.append(chain);
171     localCerts.append(cert);
172     config.setLocalCertificateChain(localCerts);
173     config.setPrivateKey(key);
174     config.setPeerVerifyMode(QSslSocket::VerifyNone);
175 
176     Q_ASSERT(provider.data());
177     provider->setSslConfiguration(config);
178 
179     QSettings settings(QSettings::UserScope, QLatin1String("QtProject"));
180     settings.beginGroup(QLatin1String("QtNetwork"));
181     settings.setValue(QLatin1String("APNCertificate"), certificatePath);
182     settings.endGroup();
183     currentCertificatePath = certificatePath;
184     return true;
185 }
186 
187 bool ApnDialog::startProvider()
188 {
189     Q_ASSERT(provider.data());
190     provider->disconnect();
191 
192     if (!provider->start()) {
193         QMessageBox::critical(this, tr("APN provider"), tr("Failed to start a TCP server"));
194         return false;
195     }
196 
197     connect(provider.data(), &ApnProvider::deviceRegistered, this,
198             &ApnDialog::deviceRegistered);
199     connect(provider.data(), &ApnProvider::apnError, this, &ApnDialog::apnReply);
200     connect(provider.data(), &ApnProvider::apnReply, this, &ApnDialog::apnReply);
201 
202     return true;
203 }
204 
205 void ApnDialog::on_quitBtn_clicked()
206 {
207     close();
208 }
