Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
WIP: Initial import of the Qt C++ property binding system

TODO:
  * complete and polish docs.
  * consider diagram to illustrate the dependency chains
  * consider debug logging category to print dependencies (with source
    location of bindings)

Change-Id: I77ec9163ba4dace6c4451f5933962ebe1b3b4b14

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2019 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the test suite of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:GPL-EXCEPT$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
21 ** included in the packaging of this file. Please review the following
22 ** information to ensure the GNU General Public License requirements will
23 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
24 **
25 ** $QT_END_LICENSE$
26 **
27 ****************************************************************************/
28 
29 #include <QObject>
30 #include <qtest.h>
31 #include <qproperty.h>
32 #include <private/qproperty_p.h>
33 #include <private/qpropertybinding_p.h>
34 
35 class tst_QProperty : public QObject
36 {
37     Q_OBJECT
38 private slots:
39     void functorBinding();
40     void basicDependencies();
41     void multipleDependencies();
42     void bindingWithDeletedDependency();
43     void recursiveDependency();
44     void bindingAfterUse();
45     void switchBinding();
46     void avoidDependencyAllocationAfterFirstEval();
47     void propertyArrays();
48     void boolProperty();
49     void takeBinding();
50     void replaceBinding();
51     void swap();
52     void moveNotifies();
53     void moveCtor();
54     void changeHandler();
55     void propertyChangeHandlerApi();
56     void subscribe();
57     void changeHandlerThroughBindings();
58     void dontTriggerDependenciesIfUnchangedValue();
59     void bindingSourceLocation();
60     void bindingError();
61     void bindingLoop();
62     void changePropertyFromWithinChangeHandler();
63     void changePropertyFromWithinChangeHandlerThroughDependency();
64     void settingPropertyValueDoesRemoveBinding();
65 };
66 
67 void tst_QProperty::functorBinding()
68 {
69     QProperty<int> property;
70     property = Qt::makePropertyBinding([]() { return 42; });
71     QCOMPARE(property.value(), int(42));
72     property = Qt::makePropertyBinding([]() { return 100; });
73     QCOMPARE(property.value(), int(100));
74     property.setBinding([]() { return 50; });
75     QCOMPARE(property.value(), int(50));
76 }
77 
78 void tst_QProperty::basicDependencies()
79 {
80     QProperty<int> right(100);
81 
82     QProperty<int> left = Qt::makePropertyBinding(right);
83 
84     QCOMPARE(left.value(), int(100));
85 
86     right = 42;
87 
88     QCOMPARE(left.value(), int(42));
89 }
90 
91 void tst_QProperty::multipleDependencies()
92 {
93     QProperty<int> firstDependency(1);
94     QProperty<int> secondDependency(2);
95 
96     QProperty<int> sum;
97     sum = Qt::makePropertyBinding([&]() { return firstDependency + secondDependency; });
98 
99     QCOMPARE(QPropertyBasePrivate::get(firstDependency)->observerCount(), 0);
100     QCOMPARE(QPropertyBasePrivate::get(secondDependency)->observerCount(), 0);
101 
102     QCOMPARE(sum.value(), int(3));
103     QCOMPARE(QPropertyBasePrivate::get(firstDependency)->observerCount(), 1);
104     QCOMPARE(QPropertyBasePrivate::get(secondDependency)->observerCount(), 1);
105 
106     firstDependency = 10;
107 
108     QCOMPARE(sum.value(), int(12));
109     QCOMPARE(QPropertyBasePrivate::get(firstDependency)->observerCount(), 1);
110     QCOMPARE(QPropertyBasePrivate::get(secondDependency)->observerCount(), 1);
111 
112     secondDependency = 20;
113 
114     QCOMPARE(sum.value(), int(30));
115     QCOMPARE(QPropertyBasePrivate::get(firstDependency)->observerCount(), 1);
116     QCOMPARE(QPropertyBasePrivate::get(secondDependency)->observerCount(), 1);
117 
118     firstDependency = 1;
119     secondDependency = 1;
120     QCOMPARE(sum.value(), int(2));
121     QCOMPARE(QPropertyBasePrivate::get(firstDependency)->observerCount(), 1);
122     QCOMPARE(QPropertyBasePrivate::get(secondDependency)->observerCount(), 1);
123 }
124 
125 void tst_QProperty::bindingWithDeletedDependency()
126 {
127     QScopedPointer<QProperty<int>> dynamicProperty(new QProperty<int>(100));
128 
129     QProperty<int> staticProperty(1000);
130 
131     QProperty<bool> bindingReturnsDynamicProperty(false);
132 
133     QProperty<int> propertySelector;
134     propertySelector = Qt::makePropertyBinding([&]() {
135         if (bindingReturnsDynamicProperty && !dynamicProperty.isNull())
136             return dynamicProperty->value();
137         else
138             return staticProperty.value();
139     });
140 
141     QCOMPARE(propertySelector.value(), staticProperty.value());
142 
143     bindingReturnsDynamicProperty = true;
144 
145     QCOMPARE(propertySelector.value(), dynamicProperty->value());
146 
147     dynamicProperty.reset();
148 
149     QCOMPARE(propertySelector.value(), 100);
150 
151     bindingReturnsDynamicProperty = false;
152 
153     QCOMPARE(propertySelector.value(), staticProperty.value());
154 }
155 
156 void tst_QProperty::recursiveDependency()
157 {
158     QProperty<int> first(1);
159 
160     QProperty<int> second;
161     second = Qt::makePropertyBinding(first);
162 
163     QProperty<int> third;
164     third = Qt::makePropertyBinding(second);
165 
166     QCOMPARE(third.value(), int(1));
167 
168     first = 2;
169 
170     QCOMPARE(third.value(), int(2));
171 }
172 
173 void tst_QProperty::bindingAfterUse()
174 {
175     QProperty<int> propWithBindingLater(1);
176 
177     QProperty<int> propThatUsesFirstProp;
178     propThatUsesFirstProp = Qt::makePropertyBinding(propWithBindingLater);
179 
180     QCOMPARE(propThatUsesFirstProp.value(), int(1));
181     QCOMPARE(QPropertyBasePrivate::get(propWithBindingLater)->observerCount(), 1);
182 
183     QProperty<int> injectedValue(42);
184     propWithBindingLater = Qt::makePropertyBinding(injectedValue);
185 
186     QCOMPARE(propThatUsesFirstProp.value(), int(42));
187     QCOMPARE(QPropertyBasePrivate::get(propWithBindingLater)->observerCount(), 1);
188 }
189 
190 void tst_QProperty::switchBinding()
191 {
192     QProperty<int> first(1);
193 
194     QProperty<int> propWithChangingBinding;
195     propWithChangingBinding = Qt::makePropertyBinding(first);
196 
197     QCOMPARE(propWithChangingBinding.value(), 1);
198 
199     QProperty<int> output;
200     output = Qt::makePropertyBinding(propWithChangingBinding);
201     QCOMPARE(output.value(), 1);
202 
203     QProperty<int> second(2);
204     propWithChangingBinding = Qt::makePropertyBinding(second);
205     QCOMPARE(output.value(), 2);
206 }
207 
208 void tst_QProperty::avoidDependencyAllocationAfterFirstEval()
209 {
210     QProperty<int> firstDependency(1);
211     QProperty<int> secondDependency(10);
212 
213     QProperty<int> propWithBinding;
214     propWithBinding = Qt::makePropertyBinding([&]() { return firstDependency + secondDependency; });
215 
216     QCOMPARE(propWithBinding.value(), int(11));
217 
218     QVERIFY(QPropertyBasePrivate::get(propWithBinding)->bindingPtr());
219     QCOMPARE(QPropertyBasePrivate::get(propWithBinding)->bindingPtr()->dependencyObservers.size(), 2);
220     QVERIFY(QPropertyBasePrivate::get(propWithBinding)->bindingPtr()->dependencyObservers.capacity() >= 2);
221 
222     firstDependency = 100;
223     QCOMPARE(propWithBinding.value(), int(110));
224     QCOMPARE(QPropertyBasePrivate::get(propWithBinding)->bindingPtr()->dependencyObservers.size(), 2);
225     QVERIFY(QPropertyBasePrivate::get(propWithBinding)->bindingPtr()->dependencyObservers.capacity() >= 2);
226 }
227 
228 void tst_QProperty::propertyArrays()
229 {
230     std::vector<QProperty<int>> properties;
231 
232     int expectedSum = 0;
233     for (int i = 0; i < 10; ++i) {
234         properties.emplace_back(i);
235         expectedSum += i;
236     }
237 
238     QProperty<int> sum;
239     sum = Qt::makePropertyBinding([&]() {
240         return std::accumulate(properties.begin(), properties.end(), 0);
241     });
242 
243     QCOMPARE(sum.value(), expectedSum);
244 
245     properties[4] = properties[4] + 42;
246     expectedSum += 42;
247     QCOMPARE(sum.value(), expectedSum);
248 }
249 
250 void tst_QProperty::boolProperty()
251 {
252     static_assert(sizeof(QProperty<bool>) == sizeof(void*), "Size of QProperty<bool> specialization must not exceed size of pointer");
253 
254     QProperty<bool> first(true);
255     QProperty<bool> second(false);
256     QProperty<bool> all;
257     all = Qt::makePropertyBinding([&]() { return first && second; });
258 
259     QCOMPARE(all.value(), false);
260 
261     second = true;
262 
263     QCOMPARE(all.value(), true);
264 }
265 
266 void tst_QProperty::takeBinding()
267 {
268     QPropertyBinding<int> existingBinding;
269     QVERIFY(existingBinding.isNull());
270 
271     QProperty<int> first(100);
272     QProperty<int> second = Qt::makePropertyBinding(first);
273 
274     QCOMPARE(second.value(), int(100));
275 
276     existingBinding = second.takeBinding();
277     QVERIFY(!existingBinding.isNull());
278 
279     first = 10;
280     QCOMPARE(second.value(), int(100));
281 
282     second = 25;
283     QCOMPARE(second.value(), int(25));
284 
285     second = existingBinding;
286     QCOMPARE(second.value(), int(10));
287     QVERIFY(!existingBinding.isNull());
288 }
289 
290 void tst_QProperty::replaceBinding()
291 {
292     QProperty<int> first(100);
293     QProperty<int> second = Qt::makePropertyBinding(first);
294 
295     QCOMPARE(second.value(), 100);
296 
297     auto constantBinding = Qt::makePropertyBinding([]() { return 42; });
298     auto oldBinding = second.setBinding(constantBinding);
299     QCOMPARE(second.value(), 42);
300 
301     second = oldBinding;
302     QCOMPARE(second.value(), 100);
303 }
304 
305 void tst_QProperty::swap()
306 {
307     QProperty<int> firstDependency(1);
308     QProperty<int> secondDependency(2);
309 
310     QProperty<int> first = Qt::makePropertyBinding(firstDependency);
311     QProperty<int> second = Qt::makePropertyBinding(secondDependency);
312 
313     QCOMPARE(first.value(), 1);
314     QCOMPARE(second.value(), 2);
315 
316     std::swap(first, second);
317 
318     QCOMPARE(first.value(), 2);
319     QCOMPARE(second.value(), 1);
320 
321     secondDependency = 20;
322     QCOMPARE(first.value(), 20);
323     QCOMPARE(second.value(), 1);
324 
325     firstDependency = 100;
326     QCOMPARE(first.value(), 20);
327     QCOMPARE(second.value(), 100);
328 }
329 
330 void tst_QProperty::moveNotifies()
331 {
332     QProperty<int> first(1);
333     QProperty<int> second(2);
334 
335     QProperty<int> propertyInTheMiddle = Qt::makePropertyBinding(first);
336 
337     QProperty<int> finalProp1 = Qt::makePropertyBinding(propertyInTheMiddle);
338     QProperty<int> finalProp2 = Qt::makePropertyBinding(propertyInTheMiddle);
339 
340     QCOMPARE(finalProp1.value(), 1);
341     QCOMPARE(finalProp2.value(), 1);
342 
343     QCOMPARE(QPropertyBasePrivate::get(propertyInTheMiddle)->observerCount(), 2);
344 
345     QProperty<int> other = Qt::makePropertyBinding(second);
346     QCOMPARE(other.value(), 2);
347 
348     QProperty<int> otherDep = Qt::makePropertyBinding(other);
349     QCOMPARE(otherDep.value(), 2);
350     QCOMPARE(QPropertyBasePrivate::get(other)->observerCount(), 1);
351 
352     propertyInTheMiddle = std::move(other);
353 
354     QCOMPARE(QPropertyBasePrivate::get(other)->observerCount(), 0);
355 
356     QCOMPARE(finalProp1.value(), 2);
357     QCOMPARE(finalProp2.value(), 2);
358 }
359 
360 void tst_QProperty::moveCtor()
361 {
362     QProperty<int> first(1);
363 
364     QProperty<int> intermediate = Qt::makePropertyBinding(first);
365     QCOMPARE(intermediate.value(), 1);
366     QCOMPARE(QPropertyBasePrivate::get(first)->observerCount(), 1);
367 
368     QProperty<int> targetProp(std::move(first));
369 
370     QCOMPARE(QPropertyBasePrivate::get(targetProp)->observerCount(), 0);
371 }
372 
373 void tst_QProperty::changeHandler()
374 {
375     QProperty<int> testProperty(0);
376     QVector<int> recordedValues;
377 
378     {
379         auto handler = testProperty.onValueChanged([&]() {
380             recordedValues << testProperty;
381         });
382 
383         testProperty = 1;
384         testProperty = 2;
385     }
386     testProperty = 3;
387 
388     QCOMPARE(recordedValues.count(), 2);
389     QCOMPARE(recordedValues.at(0), 1);
390     QCOMPARE(recordedValues.at(1), 2);
391 }
392 
393 void tst_QProperty::propertyChangeHandlerApi()
394 {
395     int changeHandlerCallCount = 0;
396     QPropertyChangeHandler handler([&changeHandlerCallCount]() {
397         ++changeHandlerCallCount;
398     });
399 
400     QProperty<int> source1;
401     QProperty<int> source2;
402 
403     handler.setSource(source1);
404 
405     source1 = 100;
406     QCOMPARE(changeHandlerCallCount, 1);
407 
408     handler.setSource(source2);
409     source1 = 101;
410     QCOMPARE(changeHandlerCallCount, 1);
411 
412     source2 = 200;
413     QCOMPARE(changeHandlerCallCount, 2);
414 }
415 
416 void tst_QProperty::subscribe()
417 {
418     QProperty<int> testProperty(42);
419     QVector<int> recordedValues;
420 
421     {
422         auto handler = testProperty.subscribe([&]() {
423             recordedValues << testProperty;
424         });
425 
426         testProperty = 1;
427         testProperty = 2;
428     }
429     testProperty = 3;
430 
431     QCOMPARE(recordedValues.count(), 3);
432     QCOMPARE(recordedValues.at(0), 42);
433     QCOMPARE(recordedValues.at(1), 1);
434     QCOMPARE(recordedValues.at(2), 2);
435 }
436 
437 void tst_QProperty::changeHandlerThroughBindings()
438 {
439     QProperty<bool> trigger(false);
440     QProperty<bool> blockTrigger(false);
441     QProperty<bool> condition = Qt::makePropertyBinding([&]() {
442         bool triggerValue = trigger;
443         bool blockTriggerValue = blockTrigger;
444         return triggerValue && !blockTriggerValue;
445     });
446     bool changeHandlerCalled = false;
447     auto handler = condition.onValueChanged([&]() {
448         changeHandlerCalled = true;
449     });
450 
451     QVERIFY(!condition);
452     QVERIFY(!changeHandlerCalled);
453 
454     trigger = true;
455 
456     QVERIFY(condition);
457     QVERIFY(changeHandlerCalled);
458     changeHandlerCalled = false;
459 
460     trigger = false;
461 
462     QVERIFY(!condition);
463     QVERIFY(changeHandlerCalled);
464     changeHandlerCalled = false;
465 
466     blockTrigger = true;
467 
468     QVERIFY(!condition);
469     QVERIFY(!changeHandlerCalled);
470 }
471 
472 void tst_QProperty::dontTriggerDependenciesIfUnchangedValue()
473 {
474     QProperty<int> property(42);
475 
476     bool triggered = false;
477     QProperty<int> observer = Qt::makePropertyBinding([&]() { triggered = true; return property.value(); });
478 
479     QCOMPARE(observer.value(), 42);
480     QVERIFY(triggered);
481     triggered = false;
482     property = 42;
483     QCOMPARE(observer.value(), 42);
484     QVERIFY(!triggered);
485 }
486 
487 void tst_QProperty::bindingSourceLocation()
488 {
489 #if defined(QT_PROPERTY_COLLECT_BINDING_LOCATION)
490     auto bindingLine = std::experimental::source_location::current().line() + 1;
491     auto binding = Qt::makePropertyBinding([]() { return 42; });
492     QCOMPARE(QPropertyBindingPrivate::get(binding)->location.line, bindingLine);
493 #else
494     QSKIP("Skipping this in the light of missing binding source location support");
495 #endif
496 }
497 
498 void tst_QProperty::bindingError()
499 {
500     QProperty<int> prop = Qt::makePropertyBindingWithError([](QPropertyBindingError *error) -> int {
501         *error = QPropertyBindingError(QPropertyBindingError::UnknownError);
502         error->setDescription(QLatin1String("my error"));
503         return 10;
504     });
505     QCOMPARE(prop.value(), 10);
506     QCOMPARE(prop.binding().error().description(), QString("my error"));
507 }
508 
509 void tst_QProperty::bindingLoop()
510 {
511     QScopedPointer<QProperty<int>> firstProp;
512 
513     QProperty<int> secondProp = Qt::makePropertyBinding([&]() -> int {
514         return firstProp ? firstProp->value() : 0;
515     });
516 
517     QProperty<int> thirdProp = Qt::makePropertyBinding([&]() -> int {
518         return secondProp.value();
519     });
520 
521     firstProp.reset(new QProperty<int>());
522     *firstProp = Qt::makePropertyBinding([&]() -> int {
523         return secondProp.value();
524     });
525 
526     QCOMPARE(thirdProp.value(), 0);
527     QCOMPARE(secondProp.binding().error().type(), QPropertyBindingError::BindingLoop);
528 }
529 
530 void tst_QProperty::changePropertyFromWithinChangeHandler()
531 {
532     QProperty<int> property(100);
533     bool resetPropertyOnChange = false;
534     int changeHandlerCallCount = 0;
535 
536     auto handler = property.onValueChanged([&]() {
537         ++changeHandlerCallCount;
538         if (resetPropertyOnChange)
539             property = 100;
540     });
541 
542     QCOMPARE(property.value(), 100);
543 
544     resetPropertyOnChange = true;
545     property = 42;
546     QCOMPARE(property.value(), 100);
547     // changing the property value inside the change handler results in the change
548     // handler being called again, but the second time it's called, the same value is
549     // assigned and so it won't be called a third time.
550     QCOMPARE(changeHandlerCallCount, 2);
551     changeHandlerCallCount = 0;
552 }
553 
554 void tst_QProperty::changePropertyFromWithinChangeHandlerThroughDependency()
555 {
556     QProperty<int> sourceProperty(100);
557     QProperty<int> property = Qt::makePropertyBinding(sourceProperty);
558     bool resetPropertyOnChange = false;
559     int changeHandlerCallCount = 0;
560 
561     auto handler = property.onValueChanged([&]() {
562         ++changeHandlerCallCount;
563         if (resetPropertyOnChange)
564             sourceProperty = 100;
565     });
566 
567     QCOMPARE(property.value(), 100);
568 
569     resetPropertyOnChange = true;
570     sourceProperty = 42;
571     QCOMPARE(property.value(), 100);
572     // changing the property value inside the change handler results in the change
573     // handler being called again, but the second time it's called, the same value is
574     // assigned and so it won't be called a third time.
575     QCOMPARE(changeHandlerCallCount, 2);
576     changeHandlerCallCount = 0;
577 }
578 
579 void tst_QProperty::settingPropertyValueDoesRemoveBinding()
580 {
581     QProperty<int> source(42);
582 
583     QProperty<int> property = Qt::makePropertyBinding(source);
584 
585     QCOMPARE(property.value(), 42);
586     QVERIFY(!property.binding().isNull());
587 
588     property = 100;
589     QCOMPARE(property.value(), 100);
590     QVERIFY(property.binding().isNull());
591 
592     source = 1;
593     QCOMPARE(property.value(), 100);
594     QVERIFY(property.binding().isNull());
595 }
596 
597 QTEST_MAIN(tst_QProperty);
598 
599 #include "tst_qproperty.moc"
