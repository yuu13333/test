Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Use QChar::fromUcs4(i) rather than QChar(i) on out-of-range i

Follow-up to commit 915be6606ead25f4fbbbcb2687b33cf22a955177, catching
some benchmarks that took for granted they can assign an arbitrary int
to QChar. Since 6.0 this has triggered an assertion.

Given the choice between limiting the range (from 100000 to 0x10000)
and actually handling the out-of-range values as UCS-4 data, the
latter seemed like a more interesting test.

At the same time, take the construction of the strings out of the
loop, as that's not a QMap performance matter, it's a QString one.

Pick-to: 6.1 6.2
Task-number: QTBUG-91713
Change-Id: Id6abab08b5c879f0f764350f66d6aa1dd9f1620a

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2021 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the test suite of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:GPL-EXCEPT$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
21 ** included in the packaging of this file. Please review the following
22 ** information to ensure the GNU General Public License requirements will
23 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
24 **
25 ** $QT_END_LICENSE$
26 **
27 ****************************************************************************/
28 
29 #include <QFile>
30 #include <QMap>
31 #include <QString>
32 #include <QTest>
33 #include <qdebug.h>
34 
35 
36 class tst_QMap : public QObject
37 {
38     Q_OBJECT
39 
40 private slots:
41     void insertion_int_int();
42     void insertion_int_string();
43     void insertion_string_int();
44 
45     void lookup_int_int();
46     void lookup_int_string();
47     void lookup_string_int();
48 
49     void iteration();
50     void toStdMap();
51     void iterator_begin();
52 
53     void ctorStdMap();
54 
55     void insertion_int_intx();
56     void insertion_int_int_with_hint1();
57     void insertion_int_int2();
58     void insertion_int_int_with_hint2();
59 
60     void insertion_string_int2();
61     void insertion_string_int2_hint();
62 
63     void insertMap();
64 
65 private:
66     QStringList ucs4lloWorld(int count);
67 };
68 
69 QStringList tst_QMap::ucs4lloWorld(int count)
70 {
71     QStringList result(count);
72     char16_t name[] = u"Hello World";
73     QStringView str(name);
74     for (int i = 1; i < count; ++i) {
75         auto p = name;
76         for (const auto ch : QChar::fromUcs4(i))
77             p++[0] = ch;
78         result << str.toString();
79     }
80     return result;
81 }
82 
83 void tst_QMap::insertion_int_int()
84 {
85     QMap<int, int> map;
86     QBENCHMARK {
87         for (int i = 0; i < 100000; ++i)
88             map.insert(i, i);
89     }
90 }
91 
92 void tst_QMap::insertion_int_intx()
93 {
94     // This is the same test - but executed later.
95     // The results in the beginning of the test seems to be a somewhat inaccurate.
96     QMap<int, int> map;
97     QBENCHMARK {
98         for (int i = 0; i < 100000; ++i)
99             map.insert(i, i);
100     }
101 }
102 
103 void tst_QMap::insertion_int_int_with_hint1()
104 {
105     QMap<int, int> map;
106     QBENCHMARK {
107         for (int i = 0; i < 100000; ++i)
108             map.insert(map.constEnd(), i, i);
109     }
110 }
111 
112 void tst_QMap::insertion_int_int2()
113 {
114     QMap<int, int> map;
115     QBENCHMARK {
116         for (int i = 100000; i >= 0; --i)
117             map.insert(i, i);
118     }
119 }
120 
121 void tst_QMap::insertion_int_int_with_hint2()
122 {
123     QMap<int, int> map;
124     QBENCHMARK {
125         for (int i = 100000; i >= 0; --i)
126             map.insert(map.constBegin(), i, i);
127     }
128 }
129 
130 void tst_QMap::insertion_int_string()
131 {
132     QMap<int, QString> map;
133     QString str("Hello World");
134     QBENCHMARK {
135         for (int i = 0; i < 100000; ++i)
136             map.insert(i, str);
137     }
138 }
139 
140 void tst_QMap::insertion_string_int()
141 {
142     QMap<QString, int> map;
143     const QStringList names = ucs4lloWorld(100000);
144     QBENCHMARK {
145         for (int i = 1; i < 100000; ++i)
146             map.insert(names.at(i), i);
147     }
148 }
149 
150 void tst_QMap::lookup_int_int()
151 {
152     QMap<int, int> map;
153     for (int i = 0; i < 100000; ++i)
154         map.insert(i, i);
155 
156     int sum = 0;
157     QBENCHMARK {
158         for (int i = 0; i < 100000; ++i)
159              sum += map.value(i);
160     }
161 }
162 
163 void tst_QMap::lookup_int_string()
164 {
165     QMap<int, QString> map;
166     QString str("Hello World");
167     for (int i = 0; i < 100000; ++i)
168         map.insert(i, str);
169 
170     QBENCHMARK {
171         for (int i = 0; i < 100000; ++i)
172              str = map.value(i);
173     }
174 }
175 
176 void tst_QMap::lookup_string_int()
177 {
178     QMap<QString, int> map;
179     const QStringList names = ucs4lloWorld(100000);
180     for (int i = 1; i < 100000; ++i)
181         map.insert(names.at(i), i);
182 
183     int sum = 0;
184     QBENCHMARK {
185         for (int i = 1; i < 100000; ++i)
186             sum += map.value(names.at(i));
187     }
188 }
189 
190 // iteration speed doesn't depend on the type of the map.
191 void tst_QMap::iteration()
192 {
193     QMap<int, int> map;
194     for (int i = 0; i < 100000; ++i)
195         map.insert(i, i);
196 
197     int j = 0;
198     QBENCHMARK {
199         for (int i = 0; i < 100; ++i) {
200             QMap<int, int>::const_iterator it = map.constBegin();
201             QMap<int, int>::const_iterator end = map.constEnd();
202             while (it != end) {
203                 j += *it;
204                 ++it;
205             }
206         }
207     }
208 }
209 
210 void tst_QMap::toStdMap()
211 {
212     QMap<int, int> map;
213     for (int i = 0; i < 100000; ++i)
214         map.insert(i, i);
215 
216     QBENCHMARK {
217         std::map<int, int> n = map.toStdMap();
218         n.begin();
219     }
220 }
221 
222 void tst_QMap::iterator_begin()
223 {
224     QMap<int, int> map;
225     for (int i = 0; i < 100000; ++i)
226         map.insert(i, i);
227 
228     QBENCHMARK {
229         for (int i = 0; i < 100000; ++i) {
230             QMap<int, int>::const_iterator it = map.constBegin();
231             QMap<int, int>::const_iterator end = map.constEnd();
232             if (it == end) // same as if (false)
233                 ++it;
234         }
235     }
236 }
237 
238 void tst_QMap::ctorStdMap()
239 {
240     std::map<int, int> map;
241     for (int i = 0; i < 100000; ++i)
242         map.insert(std::pair<int, int>(i, i));
243 
244     QBENCHMARK {
245         QMap<int, int> qmap(map);
246         qmap.constBegin();
247     }
248 }
249 
250 class XString : public QString
251 {
252 public:
253     bool operator < (const XString& x) const // an expensive operator <
254     {
255         return toInt() < x.toInt();
256     }
257 };
258 
259 void tst_QMap::insertion_string_int2()
260 {
261     QMap<XString, int> map;
262     QBENCHMARK {
263         for (int i = 1; i < 5000; ++i) {
264             XString str;
265             str.setNum(i);
266             map.insert(str, i);
267         }
268     }
269 }
270 
271 void tst_QMap::insertion_string_int2_hint()
272 {
273     QMap<XString, int> map;
274     QBENCHMARK {
275         for (int i = 1; i < 5000; ++i) {
276             XString str;
277             str.setNum(i);
278             map.insert(map.end(), str, i);
279         }
280     }
281 }
282 
283 void tst_QMap::insertMap()
284 {
285     QMap<int, int> map;
286     for (int i = 0; i < 100000; ++i)
287         map.insert(i * 4, 0);
288     QMap<int, int> map2;
289     for (int i = 0; i < 50000; ++i)
290         map2.insert(i * 7, 0);
291     QBENCHMARK_ONCE {
292         map.insert(map2);
293     }
294 }
295 
296 QTEST_MAIN(tst_QMap)
297 
298 #include "main.moc"
