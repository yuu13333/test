Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Add QMutex to fix race condition in QCalendar

Fixes: QTBUG-85692
Task-number: QTBUG-84575
Change-Id: Ia979c8ad62f4e8f74854989c09ddcac20b9f1b0b

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2020 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:GPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU
19 ** General Public License version 3 or (at your option) any later version
20 ** approved by the KDE Free Qt Foundation. The licenses are as published by
21 ** the Free Software Foundation and appearing in the file LICENSE.GPL3
22 ** included in the packaging of this file. Please review the following
23 ** information to ensure the GNU General Public License requirements will
24 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
25 **
26 ** $QT_END_LICENSE$
27 **
28 ****************************************************************************/
29 #include "qcalendar.h"
30 #include "qcalendarbackend_p.h"
31 #include "qgregoriancalendar_p.h"
32 #ifndef QT_BOOTSTRAPPED
33 #include "qjuliancalendar_p.h"
34 #include "qmilankoviccalendar_p.h"
35 #endif
36 #if QT_CONFIG(jalalicalendar)
37 #include "qjalalicalendar_p.h"
38 #endif
39 #if QT_CONFIG(islamiccivilcalendar)
40 #include "qislamiccivilcalendar_p.h"
41 #endif
42 
43 #include "qdatetime.h"
44 #include "qcalendarmath_p.h"
45 #include <qhash.h>
46 #include <qdebug.h>
47 
48 #include <unordered_map>
49 
50 QT_BEGIN_NAMESPACE
51 
52 namespace {
53 
54 struct CalendarName : public QString
55 {
56     CalendarName(const QString &name) : QString(name) {}
57 };
58 
59 inline bool operator==(const CalendarName &u, const CalendarName &v)
60 {
61     return u.compare(v, Qt::CaseInsensitive) == 0;
62 }
63 
64 inline uint qHash(const CalendarName &key, uint seed = 0) noexcept
65 {
66     return qHash(key.toLower(), seed);
67 }
68 
69 struct Registry {
70     std::vector<QCalendarBackend *> byId;
71     QHash<CalendarName, QCalendarBackend *> byName;
72     QCalendarBackend *gregorianCalendar = nullptr;
73     bool populated = false;
74 
75     Registry()
76     {
77         byId.resize(int(QCalendar::System::Last) + 1);
78     }
79 
80     ~Registry()
81     {
82         qDeleteAll(byId);
83     }
84 
85     bool registerName(QCalendarBackend *calendar, const QString &name)
86     {
87         if (byName.find(name) != byName.end()) {
88             qWarning() << "Calendar name" << name
89                        << "is already taken, new calendar will not be registered.";
90             return false;
91         }
92         byName.insert(name, calendar);
93         return true;
94     }
95     void addCalendar(QCalendarBackend *calendar, const QString &name, QCalendar::System id)
96     {
97         if (!registerName(calendar, name))
98             return;
99         Q_ASSERT(byId.size() >= size_t(id));
100         if (id == QCalendar::System::User) {
101             byId.push_back(calendar);
102         } else {
103             Q_ASSERT(byId[size_t(id)] == nullptr);
104             byId[size_t(id)] = calendar;
105         }
106         if (id == QCalendar::System::Gregorian) {
107             Q_ASSERT(!gregorianCalendar);
108             gregorianCalendar = calendar;
109         }
110     }
111     /*
112         \internal
113         Ensures each enum-available calendar has been instantiated.
114 
115         This arranges for each to register itself by name; it only does anything on
116         its first call, which ensures that name-based lookups can always find all
117         the calendars available via the enum.
118     */
119     void populate()
120     {
121         if (populated)
122             return;
123 
124         for (int i = 0; i <= int(QCalendar::System::Last); ++i)
125             (void)QCalendar(QCalendar::System(i));
126     }
127 };
128 
129 }
130 
131 Q_GLOBAL_STATIC(Registry, calendarRegistry);
132 
133 // Mutex that protects the calendarRegistry from multi-threaded access
134 Q_GLOBAL_STATIC(QMutex, calendarMutex);
135 
136 /*!
137     \since 5.14
138 
139     \class QCalendarBackend
140     \inmodule QtCore
141     \internal
142     \reentrant
143     \brief The QCalendarBackend class provides basic calendaring functions.
144 
145     QCalendarBackend provides the base class on which all calendar types are
146     implemented. On construction, the backend is registered with its primary
147     name.
148 
149     A backend may also be registered with aliases, where the calendar is known
150     by several names. Registering with the name used by CLDR (the Unicode
151     consortium's Common Locale Data Repository) is recommended, particularly
152     when interacting with third-party software. Once a backend is registered for
153     a name, QCalendar can be constructed using that name to select the backend.
154 
155     Each calendar backend must inherit from QCalendarBackend and implement its
156     pure virtual methods. It may also override some other virtual methods, as
157     needed.
158 
159     Most backends are pure code, with no data elements. Such backends should
160     normally be implemented as singletons. For a backend to be added to the
161     QCalendar::System enum, it should be such a singleton, with a case in
162     QCalendar::fromEnum()'s switch statement to instantiate it.
163 
164     Non-singleton calendar backends should ensure that each instance is created
165     with a distinct primary name. Later instances attempting to register with a
166     name already in use shall fail to register and be unavailable to QCalendar,
167     hence unusable.
168 
169     \sa registerAlias(), QDate, QDateTime, QDateEdit, QDateTimeEdit, QCalendarWidget
170 */
171 
172 /*!
173     Constructs the calendar and registers it under \a name using \a id.
174 */
175 QCalendarBackend::QCalendarBackend(const QString &name, QCalendar::System id)
176 {
177     calendarRegistry->addCalendar(this, name, id);
178 }
179 
180 /*!
181     Destroys the calendar.
182 
183     Never call this from user code. Each calendar backend, once instantiated,
184     shall exist for the lifetime of the program. Its destruction is taken care
185     of by destruction of the registry of calendar backends and their names.
186 */
187 QCalendarBackend::~QCalendarBackend()
188 {
189 }
190 
191 /*!
192     The calendar system of this calendar.
193 
194     Each calendar backend constructible from the QCalendar::System enum should
195     return the member of that enum that produces it. Other calendars should
196     return User.
197 
198     \sa QCalendarBackend::fromEnum()
199 */
200 QCalendar::System QCalendarBackend::calendarSystem() const
201 {
202     return QCalendar::System::User;
203 }
204 
205 /*!
206     The primary name of this calendar.
207  */
208 QString QCalendar::name() const
209 {
210     return d ? d->name() : QString();
211 }
212 
213 // date queries
214 /*!
215    \fn int QCalendarBackend::daysInMonth(int month, int year) const
216 
217    Returns number of days in the month number \a month, in year \a year.
218 
219    An implementation should return 0 if the given year had no such month. If
220    year is QCalendar::Unspecified, return the usual number of days for the
221    month, in those years that include it.
222 
223    Calendars with intercallary days may represent these as extra days of the
224    preceding month, or as short months separate from the usual ones. In the
225    former case, daysInMonth(month, year) should be the number of ordinary days
226    in the month, although \c{isDateValid(year, month, day)} might return \c true
227    for some larger values of \c day.
228 
229    \sa daysInYear(), monthsInYear(), minimumDaysInMonth(), maximumDaysInMonth()
230 */
231 
232 // properties of the calendar
233 
234 /*!
235     \fn bool QCalendarBackend::isLeapYear(int year) const
236 
237     Returns \c true if the specified \a year is a leap year for this calendar.
238 
239     \sa daysInYear(), isDateValid()
240 */
241 
242 /*!
243     \fn bool QCalendarBackend::isLunar() const
244 
245     Returns \c true if this calendar is a lunar calendar. Otherwise returns \c
246     false.
247 
248     A lunar calendar is a calendar based upon the monthly cycles of the Moon's
249     phases (synodic months). This contrasts with solar calendars, whose annual
250     cycles are based only upon the solar year.
251 
252     \sa isLuniSolar(), isSolar(), isProleptic()
253 */
254 
255 /*!
256     \fn bool QCalendarBackend::isLuniSolar() const
257 
258     Returns \c true if this calendar is a lunisolar calendar. Otherwise returns
259     \c false.
260 
261     A lunisolar calendar is a calendar whose date indicates both the moon phase
262     and the time of the solar year.
263 
264     \sa isLunar(), isSolar(), isProleptic()
265 */
266 
267 /*!
268     \fn bool QCalendarBackend::isSolar() const
269 
270     Returns \c true if this calendar is a solar calendar. Otherwise returns
271     \c false.
272 
273     A solar calendar is a calendar whose dates indicate the season or almost
274     equivalently the apparent position of the sun relative to the fixed stars.
275     The Gregorian calendar, widely accepted as standard in the world,
276     is an example of solar calendar.
277 
278     \sa isLuniSolar(), isLunar(), isProleptic()
279 */
280 
281 /*!
282     Returns the total number of days in the year number \a year.
283     Returns zero if there is no such year in this calendar.
284 
285     This base implementation returns 366 for leap years and 365 for ordinary
286     years.
287 
288     \sa monthsInYear(), daysInMonth(), isLeapYear()
289 */
290 int QCalendarBackend::daysInYear(int year) const
291 {
292     return monthsInYear(year) ? isLeapYear(year) ? 366 : 365 : 0;
293 }
294 
295 /*!
296     Returns the total number of months in the year number \a year.
297     Returns zero if there is no such year in this calendar.
298 
299     This base implementation returns 12 for any valid year.
300 
301     \sa daysInYear(), maximumMonthsInYear(), isDateValid()
302 */
303 int QCalendarBackend::monthsInYear(int year) const
304 {
305     return year > 0 || (year < 0 ? isProleptic() : hasYearZero()) ? 12 : 0;
306 }
307 
308 /*!
309     Returns \c true if the date specified by \a year, \a month, and \a day is
310     valid for this calendar; otherwise returns \c false. For example,
311     the date 2018-04-19 is valid for the Gregorian calendar, but 2018-16-19 and
312     2018-04-38 are invalid.
313 
314     Calendars with intercallary days may represent these as extra days of the
315     preceding month or as short months separate from the usual ones. In the
316     former case, a \a day value greater than \c{daysInMonth(\a{month},
317     \a{year})} may be valid.
318 
319     \sa daysInMonth(), monthsInYear()
320 */
321 bool QCalendarBackend::isDateValid(int year, int month, int day) const
322 {
323     return day > 0 && day <= daysInMonth(month, year);
324 }
325 
326 /*!
327     Returns \c true if this calendar is a proleptic calendar. Otherwise returns
328     \c false.
329 
330     A proleptic calendar results from allowing negative year numbers to indicate
331     years before the nominal start of the calendar system.
332 
333     \sa isLuniSolar(), isSolar(), isLunar(), hasYearZero()
334 */
335 
336 bool QCalendarBackend::isProleptic() const
337 {
338     return true;
339 }
340 
341 /*!
342     Returns \c true if year number \c 0 is considered a valid year in this
343     calendar. Otherwise returns \c false.
344 
345     \sa isDateValid(), isProleptic()
346 */
347 
348 bool QCalendarBackend::hasYearZero() const
349 {
350     return false;
351 }
352 
353 /*!
354     Returns the maximum number of days in a month for any year.
355 
356     This base implementation returns 31, as this is a common case.
357 
358     For calendars with intercallary days, although daysInMonth() doesn't include
359     the intercallary days in its count for an individual month,
360     maximumDaysInMonth() should include intercallary days, so that it is the
361     maximum value of \c day for which \c{isDateValid(year, month, day)} can be
362     true.
363 
364     \sa maximumMonthsInYear(), daysInMonth()
365 */
366 int QCalendarBackend::maximumDaysInMonth() const
367 {
368     return 31;
369 }
370 
371 /*!
372     Returns the minimum number of days in any valid month of any valid year.
373 
374     This base implementation returns 29, as this is a common case.
375 
376     \sa maximumMonthsInYear(), daysInMonth()
377 */
378 int QCalendarBackend::minimumDaysInMonth() const
379 {
380     return 29;
381 }
382 
383 /*!
384     Returns the maximum number of months possible in any year.
385 
386     This base implementation returns 12, as this is a common case.
387 
388     \sa maximumDaysInMonth(), monthsInYear()
389 */
390 int QCalendarBackend::maximumMonthsInYear() const
391 {
392     return 12;
393 }
394 
395 // Julian day number calculations
396 
397 /*!
398     \fn bool QCalendarBackend::dateToJulianDay(int year, int month, int day, qint64 *jd) const
399 
400     Computes the Julian day number corresponding to the specified \a year, \a
401     month, and \a day. Returns true and sets \a jd if there is such a date in
402     this calendar; otherwise, returns false.
403 
404     \sa QCalendar::partsFromDate(), julianDayToDate()
405 */
406 
407 /*!
408     \fn QCalendar::YearMonthDay QCalendarBackend::julianDayToDate(qint64 jd) const
409 
410     Computes the year, month, and day in this calendar for the given Julian day
411     number \a jd. If the given day falls outside this calendar's scope
412     (e.g. before the start-date of a non-proleptic calendar), the returned
413     structure's isValid() is false; otherwise, its year, month, and day fields
414     provide this calendar's description of the date.
415 
416     \sa QCalendar::dateFromParts(), dateToJulianDay()
417 */
418 
419 /*!
420    Returns the day of the week for the given Julian Day Number \a jd.
421 
422    This is 1 for Monday through 7 for Sunday.
423 
424    Calendars with intercallary days may return larger values for these
425    intercallary days. They should avoid using 0 for any special purpose (it is
426    already used in QDate::dayOfWeek() to mean an invalid date). The calendar
427    should treat the numbers used as an \c enum, whose values need not be
428    contiguous, nor need they follow closely from the 1 through 7 of the usual
429    returns. It suffices that weekDayName() can recognize each such number as
430    identifying a distinct name, that it returns to identify the particular
431    intercallary day.
432 
433    This base implementation uses the day-numbering that various calendars have
434    borrowed off the Hebrew calendar.
435 
436    \sa weekDayName(), standaloneWeekDayName(), QDate::dayOfWeek()
437  */
438 int QCalendarBackend::dayOfWeek(qint64 jd) const
439 {
440     return QRoundingDown::qMod(jd, 7) + 1;
441 }
442 
443 // Month and week-day name look-ups (implemented in qlocale.cpp):
444 /*!
445     \fn QString QCalendarBackend::monthName(const QLocale &locale, int month, int year,
446                                             QLocale::FormatType format) const
447 
448     Returns the name of the specified \a month in the given \a year for the
449     chosen \a locale, using the given \a format to determine how complete the
450     name is.
451 
452     If \a year is Unspecified, return the name for the month that usually has
453     this number within a typical year. Calendars with a leap month that isn't
454     always the last may need to take account of the year to map the month number
455     to the particular year's month with that number.
456 
457     \note Backends for which CLDR provides data can configure the default
458     implementation of the two month name look-up methods by arranging for
459     localeMonthIndexData() and localeMonthData() to provide access to the CLDR
460     data (see cldr2qlocalexml.py, qlocalexml2cpp.py and existing backends).
461     Conversely, backends that override both month name look-up methods need not
462     return anything meaningful from localeMonthIndexData() or localeMonthData().
463 
464     \sa standaloneMonthName(), QLocale::monthName()
465 */
466 
467 /*!
468     \fn QString QCalendarBackend::standaloneMonthName(const QLocale &locale, int month, int year
469                                                       QLocale::FormatType format) const
470 
471     Returns the standalone name of the specified \a month in the chosen \a
472     locale, using the specified \a format to determine how complete the name is.
473 
474     If \a year is Unspecified, return the standalone name for the month that
475     usually has this number within a typical year. Calendars with a leap month
476     that isn't always the last may need to take account of the year to map the
477     month number to the particular year's month with that number.
478 
479     \sa monthName(), QLocale::standaloneMonthName()
480 */
481 
482 /*!
483     \fn QString QCalendarBackend::weekDayName(const QLocale &locale, int day,
484                                               QLocale::FormatType format) const
485 
486     Returns the name of the specified \a day of the week in the chosen \a
487     locale, using the specified \a format to determine how complete the name is.
488 
489     The base implementation handles \a day values from 1 to 7 using the day
490     names CLDR provides, which are suitable for calendards that use the same
491     (Hebrew-derived) week as the Gregorian calendar.
492 
493     Calendars whose dayOfWeek() returns a value outside the range from 1 to 7
494     need to reimplement this method to handle such extra week-day values. They
495     can assume that \a day is a value returned by the same calendar's
496     dayOfWeek().
497 
498     \sa dayOfWeek(), standaloneWeekDayName(), QLocale::dayName()
499 */
500 
501 /*!
502     \fn QString QCalendarBackend::standaloneWeekDayName(const QLocale &locale, int day,
503                                                         QLocale::FormatType format) const
504 
505     Returns the standalone name of the specified \a day of the week in the
506     chosen \a locale, using the specified \a format to determine how complete
507     the name is.
508 
509     The base implementation handles \a day values from 1 to 7 using the
510     standalone day names CLDR provides, which are suitable for calendards that
511     use the same (Hebrew-derived) week as the Gregorian calendar.
512 
513     Calendars whose dayOfWeek() returns a value outside the range from 1 to 7
514     need to reimplement this method to handle such extra week-day values. They
515     can assume that \a day is a value returned by the same calendar's
516     dayOfWeek().
517 
518     \sa dayOfWeek(), weekDayName(), QLocale::standaloneDayName()
519 */
520 
521 /*!
522     \fn QString QCalendarBackend::dateTimeToString(QStringView format, const QDateTime &datetime,
523                                                    const QDate &dateOnly, const QTime &timeOnly,
524                                                    const QLocale &locale) const
525 
526     Returns a string representing a given date, time or date-time.
527 
528     If \a datetime is specified and valid, it is used and both date and time
529     format tokens are converted to appropriate representations of the parts of
530     the datetime. Otherwise, if \a dateOnly is valid, only date format tokens
531     are converted; else, if \a timeOnly is valid, only time format tokens are
532     converted. If none are valid, an empty string is returned.
533 
534     The specified \a locale influences how some format tokens are converted; for
535     example, when substituting day and month names and their short-forms. For
536     the supported formatting tokens, see QDate::toString() and
537     QTime::toString(). As described above, the provided date, time and date-time
538     determine which of these tokens are recognized: where these appear in \a
539     format they are replaced by data. Any text in \a format not recognized as a
540     format token is copied verbatim into the result string.
541 
542     \sa QDate::toString(), QTime::toString(), QDateTime::toString()
543 */
544 // End of methods implemented in qlocale.cpp
545 
546 /*!
547     Returns a list of names of the available calendar systems. Any
548     QCalendarBackend sub-class must be registered before being exposed to Date
549     and Time APIs.
550 
551     \sa registerAlias(), fromName()
552 */
553 QStringList QCalendarBackend::availableCalendars()
554 {
555     if (calendarRegistry.isDestroyed())
556         return {};
557     calendarRegistry->populate();
558     return QStringList(calendarRegistry->byName.keyBegin(), calendarRegistry->byName.keyEnd());
559 }
560 
561 /*!
562     Registers an alias for this calendar backend. Once a backend is registered,
563     its name will be included in the list of available calendars and the
564     calendar can be instantiated by name.
565 
566     Returns \c false if the given \a name is already in use, otherwise it
567     registers this calendar backend and returns \c true.
568 
569     \sa availableCalendars(), fromName()
570 */
571 bool QCalendarBackend::registerAlias(const QString &name)
572 {
573     if (calendarRegistry.isDestroyed())
574         return false;
575     return calendarRegistry->registerName(this, name);
576 }
577 
578 /*!
579     Returns a pointer to a named calendar backend.
580 
581     If the given \a name is present in availableCalendars(), the backend
582     matching it is returned; otherwise, \c nullptr is returned. Matching of
583     names ignores case. Note that this won't provoke construction of a calendar
584     backend, it will only return ones that have been instantiated (and not yet
585     destroyed) by some other means. However, calendars available via the
586     QCalendar::System enum are always registered when this is called.
587 
588     \sa availableCalendars(), registerAlias(), fromEnum()
589 */
590 const QCalendarBackend *QCalendarBackend::fromName(QStringView name)
591 {
592     if (calendarRegistry.isDestroyed())
593         return nullptr;
594     calendarRegistry->populate();
595     auto it = calendarRegistry->byName.find(name.toString());
596     return it == calendarRegistry->byName.end() ? nullptr : *it;
597 }
598 
599 /*!
600     \overload
601  */
602 const QCalendarBackend *QCalendarBackend::fromName(QLatin1String name)
603 {
604     if (calendarRegistry.isDestroyed())
605         return nullptr;
606     calendarRegistry->populate();
607     auto it = calendarRegistry->byName.find(QString(name));
608     return it == calendarRegistry->byName.end() ? nullptr : *it;
609 }
610 
611 /*!
612     Returns a pointer to a calendar backend, specified by enum.
613 
614     This will instantiate the indicated calendar (which will enable fromName()
615     to return it subsequently), but only for the Qt-supported calendars for
616     which (where relevant) the appropriate feature has been enabled.
617 */
618 const QCalendarBackend *QCalendarBackend::fromEnum(QCalendar::System system)
619 {
620     if (calendarRegistry.isDestroyed() || system == QCalendar::System::User)
621         return nullptr;
622     Q_ASSERT(calendarRegistry->byId.size() >= size_t(system));
623     if (auto *c = calendarRegistry->byId[size_t(system)])
624         return c;
625     switch (system) {
626     case QCalendar::System::Gregorian:
627         return new QGregorianCalendar;
628 #ifndef QT_BOOTSTRAPPED
629     case QCalendar::System::Julian:
630         return new QJulianCalendar;
631     case QCalendar::System::Milankovic:
632         return new QMilankovicCalendar;
633 #endif
634 #if QT_CONFIG(jalalicalendar)
635     case QCalendar::System::Jalali:
636         return new QJalaliCalendar;
637 #endif
638 #if QT_CONFIG(islamiccivilcalendar)
639     case QCalendar::System::IslamicCivil:
640         return new QIslamicCivilCalendar;
641 #else // When highest-numbered system isn't enabled, ensure we have a case for Last:
642     case QCalendar::System::Last:
643 #endif
644     case QCalendar::System::User:
645         Q_UNREACHABLE();
646     }
647     return nullptr;
648 }
649 
650 /*!
651     \since 5.14
652 
653     \class QCalendar
654     \inmodule QtCore
655     \reentrant
656     \brief The QCalendar class describes calendar systems.
657 
658     A QCalendar object maps a year, month, and day-number to a specific day
659     (ultimately identified by its Julian day number), using the rules of a
660     particular system.
661 
662     The default QCalendar() is a proleptic Gregorian calendar, which has no year
663     zero. Other calendars may be supported by enabling suitable features or
664     loading plugins. Calendars supported as features can be constructed by
665     passing the QCalendar::System enumeration to the constructor. All supported
666     calendars may be constructed by name, once they have been constructed. (Thus
667     plugins instantiate their calendar backend to register it.) Built-in
668     backends, accessible via QCalendar::System, are also always available by
669     name.
670 
671     A QCalendar value is immutable.
672 
673     \sa QDate, QDateTime
674 */
675 
676 /*!
677     \enum QCalendar::System
678 
679     This enumerated type is used to specify a choice of calendar system.
680 
681     \value Gregorian The default calendar, used internationally.
682     \value Julian An ancient Roman calendar with too few leap years.
683     \value Milankovic A revised Julian calendar used by some Orthodox churches.
684     \value Jalali The Solar Hijri calendar (also called Persian).
685     \value IslamicCivil The (tabular) Islamic Civil calendar.
686     \omitvalue Last
687     \omitvalue User
688 
689     \sa QCalendar
690 */
691 
692 /*!
693     \fn QCalendar::QCalendar()
694     \fn QCalendar::QCalendar(QCalendar::System system)
695     \fn QCalendar::QCalendar(QLatin1String name)
696     \fn QCalendar::QCalendar(QStringView name)
697 
698     Constructs a calendar object.
699 
700     The choice of calendar to use may be indicated as \a system, using the
701     enumeration QCalendar::System, or by \a name, using a string (either Unicode
702     or Latin 1). Construction by name may depend on an instance of the given
703     calendar being constructed by other means first. With no argument, the
704     default constructor returns the Gregorian calendar.
705 
706     \sa QCalendar, System, isValid()
707 */
708 
709 QCalendar::QCalendar()
710     : d(nullptr)
711 {
712     QMutexLocker locker(&calendarMutex);
713     if (calendarRegistry.isDestroyed())
714         return;
715     d = calendarRegistry->gregorianCalendar;
716     if (!d)
717         d = new QGregorianCalendar;
718 }
719 
720 QCalendar::QCalendar(QCalendar::System system)
721     : d(QCalendarBackend::fromEnum(system)) {}
722 
723 QCalendar::QCalendar(QLatin1String name)
724     : d(QCalendarBackend::fromName(name)) {}
725 
726 QCalendar::QCalendar(QStringView name)
727     : d(QCalendarBackend::fromName(name)) {}
728 
729 /*!
730     \fn bool QCalendar::isValid() const
731 
732     Returns true if this is a valid calendar object.
733 
734     Constructing a calendar with an unrecognised calendar name may result in an
735     invalid object. Use this method to check after creating a calendar by name.
736 */
737 
738 // Date queries:
739 
740 /*!
741     Returns the number of days in the given \a month of the given \a year.
742 
743     Months are numbered consecutively, starting with 1 for the first month of
744     each year. If \a year is \c Unspecified (its default, if not passed), the
745     month's length in a normal year is returned.
746 
747     \sa maximumDaysInMonth(), minimumDaysInMonth()
748 */
749 int QCalendar::daysInMonth(int month, int year) const
750 {
751     return d ? d->daysInMonth(month, year) : 0;
752 }
753 
754 /*!
755     Returns the number of days in the given \a year.
756 
757     Handling of \c Unspecified as \a year is undefined.
758 */
759 int QCalendar::daysInYear(int year) const
760 {
761     return d ? d->daysInYear(year) : 0;
762 }
763 
764 /*!
765     Returns the number of months in the given \a year.
766 
767     If \a year is \c Unspecified, returns the maximum number of months in a
768     year.
769 
770     \sa maximumMonthsInYear()
771 */
772 int QCalendar::monthsInYear(int year) const
773 {
774     return d ? year == Unspecified ? d->maximumMonthsInYear() : d->monthsInYear(year) : 0;
775 }
776 
777 /*!
778     Returns \c true precisely if the given \a year, \a month, and \a day specify
779     a valid date in this calendar.
780 
781     Usually this means 1 <= month <= monthsInYear(year) and 1 <= day <=
782     daysInMonth(month, year). However, calendars with intercallary days or
783     months may complicate that.
784 */
785 bool QCalendar::isDateValid(int year, int month, int day) const
786 {
787     return d && d->isDateValid(year, month, day);
788 }
789 
790 // properties of the calendar
791 
792 /*!
793     Returns \c true if this calendar object is the Gregorian calendar object
794     used as default calendar by other Qt APIs, e.g. in QDate.
795 */
796 bool QCalendar::isGregorian() const
797 {
798     Q_ASSERT(!calendarRegistry.isDestroyed());
799     return d == calendarRegistry->gregorianCalendar;
800 }
801 
802 /*!
803     Returns \c true if the given \a year is a leap year.
804 
805     Since the year is not a whole number of days long, some years are longer
806     than others. The difference may be a whole month or just a single day; the
807     details vary between calendars.
808 
809     \sa isDateValid()
810 */
811 bool QCalendar::isLeapYear(int year) const
812 {
813     return d && d->isLeapYear(year);
814 }
815 
816 /*!
817     Returns \c true if this calendar is a lunar calendar.
818 
819     A lunar calendar is one based primarily on the phases of the moon.
820 */
821 bool QCalendar::isLunar() const
822 {
823     return d && d->isLunar();
824 }
825 
826 /*!
827     Returns \c true if this calendar is luni-solar.
828 
829     A luni-solar calendar expresses the phases of the moon but adapts itself to
830     also keep track of the Sun's varying position in the sky, relative to the
831     fixed stars.
832 */
833 bool QCalendar::isLuniSolar() const
834 {
835     return d && d->isLuniSolar();
836 }
837 
838 /*!
839     Returns \c true if this calendar is solar.
840 
841     A solar calendar is based primarily on the Sun's varying position in the
842     sky, relative to the fixed stars.
843 */
844 bool QCalendar::isSolar() const
845 {
846     return d && d->isSolar();
847 }
848 
849 /*!
850     Returns \c true if this calendar is proleptic.
851 
852     A proleptic calendar is able to describe years arbitrarily long before its
853     first. These are represented by negative year numbers and possibly by a year
854     zero.
855 
856     \sa hasYearZero()
857 */
858 bool QCalendar::isProleptic() const
859 {
860     return d && d->isProleptic();
861 }
862 
863 /*!
864     Returns \c true if this calendar has a year zero.
865 
866     A calendar may represent years from its first year onwards but provide no
867     way to describe years before its first; such a calendar has no year zero and
868     is not proleptic.
869 
870     A calendar which represents years before its first may number these years
871     simply by following the usual integer counting, so that the year before the
872     first is year zero, with negative-numbered years preceding this; such a
873     calendar is proleptic and has a year zero. A calendar might also have a year
874     zero (for example, the year of some great event, with subsequent years being
875     the first year after that event, the second year after, and so on) without
876     describing years before its year zero. Such a calendar would have a year
877     zero without being proleptic.
878 
879     Some calendars, however, represent years before their first by an alternate
880     numbering; for example, the proleptic Gregorian calendar's first year is 1
881     CE and the year before it is 1 BCE, preceded by 2 BCE and so on. In this
882     case, we use negative year numbers for this alternate numbering, with year
883     -1 as the year before year 1, year -2 as the year before year -1 and so
884     on. Such a calendar is proleptic but has no year zero.
885 
886     \sa isProleptic()
887 */
888 bool QCalendar::hasYearZero() const
889 {
890     return d && d->hasYearZero();
891 }
892 
893 /*!
894     Returns the number of days in the longest month in the calendar, in any year.
895 
896     \sa daysInMonth(), minimumDaysInMonth()
897 */
898 int QCalendar::maximumDaysInMonth() const
899 {
900     return d ? d->maximumDaysInMonth() : 0;
901 }
902 
903 /*!
904     Returns the number of days in the shortest month in the calendar, in any year.
905 
906     \sa daysInMonth(), maximumDaysInMonth()
907 */
908 int QCalendar::minimumDaysInMonth() const
909 {
910     return d ? d->minimumDaysInMonth() : 0;
911 }
912 
913 /*!
914     Returns the largest number of months that any year may contain.
915 
916     \sa monthName(), standaloneMonthName(), monthsInYear()
917 */
918 int QCalendar::maximumMonthsInYear() const
919 {
920     return d ? d->maximumMonthsInYear() : 0;
921 }
922 
923 // Julian Day conversions:
924 
925 /*!
926     \fn QDate QCalendar::dateFromParts(int year, int month, int day) const
927     \fn QDate QCalendar::dateFromParts(const QCalendar::YearMonthDay &parts) const
928 
929     Converts a year, month, and day to a QDate.
930 
931     The \a year, \a month, and \a day may be passed as separate numbers or
932     packaged together as the members of \a parts. Returns a QDate with the given
933     year, month, and day of the month in this calendar, if there is one.
934     Otherwise, including the case where any of the values is
935     QCalendar::Unspecified, returns a QDate whose isNull() is true.
936 
937     \sa isDateValid(), partsFromDate()
938 */
939 QDate QCalendar::dateFromParts(int year, int month, int day) const
940 {
941     qint64 jd;
942     return d && d->dateToJulianDay(year, month, day, &jd)
943         ? QDate::fromJulianDay(jd) : QDate();
944 }
945 
946 QDate QCalendar::dateFromParts(const QCalendar::YearMonthDay &parts) const
947 {
948     return parts.isValid() ? dateFromParts(parts.year, parts.month, parts.day) : QDate();
949 }
950 
951 /*!
952     Converts a QDate to a year, month, and day of the month.
953 
954     The returned structure's isValid() shall be false if the calendar is unable
955     to represent the given \a date. Otherwise its year, month, and day
956     members record the so-named parts of its representation.
957 
958     \sa dateFromParts(), isProleptic(), hasYearZero()
959 */
960 QCalendar::YearMonthDay QCalendar::partsFromDate(QDate date) const
961 {
962     return d ? d->julianDayToDate(date.toJulianDay()) : YearMonthDay();
963 }
964 
965 /*!
966     Returns the day of the week number for the given \a date.
967 
968     Returns zero if the calendar is unable to represent the indicated date.
969     Returns 1 for Monday through 7 for Sunday. Calendars with intercallary days
970     may use other numbers to represent these.
971 
972     \sa partsFromDate(), Qt::DayOfWeek
973 */
974 int QCalendar::dayOfWeek(QDate date) const
975 {
976     return d ? d->dayOfWeek(date.toJulianDay()) : 0;
977 }
978 
979 // Locale data access
980 
981 /*!
982     Returns a suitably localised name for a month.
983 
984     The month is indicated by a number, with \a month = 1 meaning the first
985     month of the year and subsequent months numbered accordingly. Returns an
986     empty string if the \a month number is unrecognized.
987 
988     The \a year may be Unspecified, in which case the mapping from numbers to
989     names for a typical year's months should be used. Some calendars have leap
990     months that aren't always at the end of the year; their mapping of month
991     numbers to names may then depend on the placement of a leap month. Thus the
992     year should normally be specified, if known.
993 
994     The name is returned in the form that would normally be used in a full date,
995     in the specified \a locale; the \a format determines how fully it shall be
996     expressed (i.e. to what extent it is abbreviated).
997 
998     \sa standaloneMonthName(), maximumMonthsInYear(), dateTimeToString()
999 */
1000 QString QCalendar::monthName(const QLocale &locale, int month, int year,
1001                              QLocale::FormatType format) const
1002 {
1003     const int maxMonth = year == Unspecified ? maximumMonthsInYear() : monthsInYear(year);
1004     if (!d || month < 1 || month > maxMonth)
1005         return QString();
1006 
1007     return d->monthName(locale, month, year, format);
1008 }
1009 
1010 /*!
1011     Returns a suitably localised standalone name for a month.
1012 
1013     The month is indicated by a number, with \a month = 1 meaning the first
1014     month of the year and subsequent months numbered accordingly. Returns an
1015     empty string if the \a month number is unrecognized.
1016 
1017     The \a year may be Unspecified, in which case the mapping from numbers to
1018     names for a typical year's months should be used. Some calendars have leap
1019     months that aren't always at the end of the year; their mapping of month
1020     numbers to names may then depend on the placement of a leap month. Thus the
1021     year should normally be specified, if known.
1022 
1023     The name is returned in the form that would be used in isolation in the
1024     specified \a locale; the \a format determines how fully it shall be
1025     expressed (i.e. to what extent it is abbreviated).
1026 
1027     \sa monthName(), maximumMonthsInYear(), dateTimeToString()
1028 */
1029 QString QCalendar::standaloneMonthName(const QLocale &locale, int month, int year,
1030                                        QLocale::FormatType format) const
1031 {
1032     const int maxMonth = year == Unspecified ? maximumMonthsInYear() : monthsInYear(year);
1033     if (!d || month < 1 || month > maxMonth)
1034         return QString();
1035 
1036     return d->standaloneMonthName(locale, month, year, format);
1037 }
1038 
1039 /*!
1040     Returns a suitably localised name for a day of the week.
1041 
1042     The days of the week are numbered from 1 for Monday through 7 for
1043     Sunday. Some calendars may support higher numbers for other days
1044     (e.g. intercallary days, that are not part of any week). Returns an empty
1045     string if the \a day number is unrecognized.
1046 
1047     The name is returned in the form that would normally be used in a full date,
1048     in the specified \a locale; the \a format determines how fully it shall be
1049     expressed (i.e. to what extent it is abbreviated).
1050 
1051     \sa standaloneWeekDayName(), dayOfWeek()
1052 */
1053 QString QCalendar::weekDayName(const QLocale &locale, int day,
1054                                QLocale::FormatType format) const
1055 {
1056     return d ? d->weekDayName(locale, day, format) : QString();
1057 }
1058 
1059 /*!
1060     Returns a suitably localised standalone name for a day of the week.
1061 
1062     The days of the week are numbered from 1 for Monday through 7 for
1063     Sunday. Some calendars may support higher numbers for other days
1064     (e.g. intercallary days, that are not part of any week). Returns an empty
1065     string if the \a day number is unrecognized.
1066 
1067     The name is returned in the form that would be used in isolation (for
1068     example as a column heading in a calendar's tabular display of a month with
1069     successive weeks as rows) in the specified \a locale; the \a format
1070     determines how fully it shall be expressed (i.e. to what extent it is
1071     abbreviated).
1072 
1073     \sa weekDayName(), dayOfWeek()
1074 */
1075 QString QCalendar::standaloneWeekDayName(const QLocale &locale, int day,
1076                                          QLocale::FormatType format) const
1077 {
1078     return d ? d->standaloneWeekDayName(locale, day, format) : QString();
1079 }
1080 
1081 /*!
1082     Returns a string representing a given date, time or date-time.
1083 
1084     If \a datetime is valid, it is represented and format specifiers for both
1085     date and time fields are recognized; otherwise, if \a dateOnly is valid, it
1086     is represented and only format specifiers for date fields are recognized;
1087     finally, if \a timeOnly is valid, it is represented and only format
1088     specifiers for time fields are recognized. If none of these is valid, an
1089     empty string is returned.
1090 
1091     See QDate::toString and QTime::toString() for the supported field
1092     specifiers.  Characters in \a format that are recognized as field specifiers
1093     are replaced by text representing appropriate data from the date and/or time
1094     being represented. The texts to represent them may depend on the \a locale
1095     specified. Other charagers in \a format are copied verbatim into the
1096     returned string.
1097 
1098     \sa monthName(), weekDayName(), QDate::toString(), QTime::toString()
1099 */
1100 QString QCalendar::dateTimeToString(QStringView format, const QDateTime &datetime,
1101                                     const QDate &dateOnly, const QTime &timeOnly,
1102                                     const QLocale &locale) const
1103 {
1104     return d ? d->dateTimeToString(format, datetime, dateOnly, timeOnly, locale) : QString();
1105 }
1106 
1107 /*!
1108     Returns a list of names of the available calendar systems.
1109 
1110     These may be supplied by plugins or other code linked into an application,
1111     in addition to the ones provided by Qt, some of which are controlled by
1112     features.
1113 */
1114 QStringList QCalendar::availableCalendars()
1115 {
1116     return QCalendarBackend::availableCalendars();
1117 }
1118 
1119 QT_END_NAMESPACE
