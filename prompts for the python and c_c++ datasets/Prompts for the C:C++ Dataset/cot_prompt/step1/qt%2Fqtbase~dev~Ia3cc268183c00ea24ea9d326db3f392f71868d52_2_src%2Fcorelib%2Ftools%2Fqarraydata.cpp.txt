Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Reserve extra space for '\0' in QArrayData::allocate

Added implicit space reservation for '\0' in allocation functions used by
containers. In current setting, this means sizeof(char16_t) bytes extra
memory is allocated each time and implicitly exists. The extra memory is
uninitialized by default

Task-number: QTBUG-84320
Change-Id: Ia3cc268183c00ea24ea9d326db3f392f71868d52

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2020 The Qt Company Ltd.
4 ** Copyright (C) 2016 Intel Corporation.
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the QtCore module of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:LGPL$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU Lesser General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU Lesser
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
22 ** packaging of this file. Please review the following information to
23 ** ensure the GNU Lesser General Public License version 3 requirements
24 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
25 **
26 ** GNU General Public License Usage
27 ** Alternatively, this file may be used under the terms of the GNU
28 ** General Public License version 2.0 or (at your option) the GNU General
29 ** Public license version 3 or any later version approved by the KDE Free
30 ** Qt Foundation. The licenses are as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
32 ** included in the packaging of this file. Please review the following
33 ** information to ensure the GNU General Public License requirements will
34 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
35 ** https://www.gnu.org/licenses/gpl-3.0.html.
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 #include <QtCore/qarraydata.h>
42 #include <QtCore/private/qnumeric_p.h>
43 #include <QtCore/private/qtools_p.h>
44 #include <QtCore/qmath.h>
45 
46 #include <QtCore/qbytearray.h>  // QBA::value_type
47 #include <QtCore/qstring.h>  // QString::value_type
48 
49 #include <stdlib.h>
50 #include <algorithm>  // constexpr std::max
51 
52 QT_BEGIN_NAMESPACE
53 
54 /*
55  * This pair of functions is declared in qtools_p.h and is used by the Qt
56  * containers to allocate memory and grow the memory block during append
57  * operations.
58  *
59  * They take qsizetype parameters and return qsizetype so they will change sizes
60  * according to the pointer width. However, knowing Qt containers store the
61  * container size and element indexes in ints, these functions never return a
62  * size larger than INT_MAX. This is done by casting the element count and
63  * memory block size to int in several comparisons: the check for negative is
64  * very fast on most platforms as the code only needs to check the sign bit.
65  *
66  * These functions return SIZE_MAX on overflow, which can be passed to malloc()
67  * and will surely cause a NULL return (there's no way you can allocate a
68  * memory block the size of your entire VM space).
69  */
70 
71 /*!
72     \internal
73     \since 5.7
74 
75     Returns the memory block size for a container containing \a elementCount
76     elements, each of \a elementSize bytes, plus a header of \a headerSize
77     bytes. That is, this function returns \c
78       {elementCount * elementSize + headerSize}
79 
80     but unlike the simple calculation, it checks for overflows during the
81     multiplication and the addition.
82 
83     Both \a elementCount and \a headerSize can be zero, but \a elementSize
84     cannot.
85 
86     This function returns -1 on overflow or if the memory block size
87     would not fit a qsizetype.
88 */
89 qsizetype qCalculateBlockSize(qsizetype elementCount, qsizetype elementSize, qsizetype headerSize) noexcept
90 {
91     Q_ASSERT(elementSize);
92 
93     size_t bytes;
94     if (Q_UNLIKELY(mul_overflow(size_t(elementSize), size_t(elementCount), &bytes)) ||
95             Q_UNLIKELY(add_overflow(bytes, size_t(headerSize), &bytes)))
96         return -1;
97     if (Q_UNLIKELY(qsizetype(bytes) < 0))
98         return -1;
99 
100     return qsizetype(bytes);
101 }
102 
103 /*!
104     \internal
105     \since 5.7
106 
107     Returns the memory block size and the number of elements that will fit in
108     that block for a container containing \a elementCount elements, each of \a
109     elementSize bytes, plus a header of \a headerSize bytes. This function
110     assumes the container will grow and pre-allocates a growth factor.
111 
112     Both \a elementCount and \a headerSize can be zero, but \a elementSize
113     cannot.
114 
115     This function returns -1 on overflow or if the memory block size
116     would not fit a qsizetype.
117 
118     \note The memory block may contain up to \a elementSize - 1 bytes more than
119     needed.
120 */
121 CalculateGrowingBlockSizeResult
122 qCalculateGrowingBlockSize(qsizetype elementCount, qsizetype elementSize, qsizetype headerSize) noexcept
123 {
124     CalculateGrowingBlockSizeResult result = {
125         qsizetype(-1), qsizetype(-1)
126     };
127 
128     qsizetype bytes = qCalculateBlockSize(elementCount, elementSize, headerSize);
129     if (bytes < 0)
130         return result;
131 
132     size_t morebytes = static_cast<size_t>(qNextPowerOfTwo(quint64(bytes)));
133     if (Q_UNLIKELY(qsizetype(morebytes) < 0)) {
134         // grow by half the difference between bytes and morebytes
135         // this slows the growth and avoids trying to allocate exactly
136         // 2G of memory (on 32bit), something that many OSes can't deliver
137         bytes += (morebytes - bytes) / 2;
138     } else {
139         bytes = qsizetype(morebytes);
140     }
141 
142     result.elementCount = (bytes - headerSize) / elementSize;
143     result.size = result.elementCount * elementSize + headerSize;
144     return result;
145 }
146 
147 static inline qsizetype calculateBlockSize(qsizetype &capacity, qsizetype objectSize, qsizetype headerSize, uint options)
148 {
149     // Calculate the byte size
150     // allocSize = objectSize * capacity + headerSize, but checked for overflow
151     // plus padded to grow in size
152     if (options & (QArrayData::GrowsForward | QArrayData::GrowsBackwards)) {
153         auto r = qCalculateGrowingBlockSize(capacity, objectSize, headerSize);
154         capacity = r.elementCount;
155         return r.size;
156     } else {
157         return qCalculateBlockSize(capacity, objectSize, headerSize);
158     }
159 }
160 
161 static QArrayData *allocateData(qsizetype allocSize, uint options)
162 {
163     QArrayData *header = static_cast<QArrayData *>(::malloc(size_t(allocSize)));
164     if (header) {
165         header->ref_.storeRelaxed(1);
166         header->flags = options;
167         header->alloc = 0;
168     }
169     return header;
170 }
171 
172 void *QArrayData::allocate(QArrayData **dptr, qsizetype objectSize, qsizetype alignment,
173         qsizetype capacity, ArrayOptions options) noexcept
174 {
175     Q_ASSERT(dptr);
176     // Alignment is a power of two
177     Q_ASSERT(alignment >= qsizetype(alignof(QArrayData))
178             && !(alignment & (alignment - 1)));
179 
180     if (capacity == 0) {
181         *dptr = nullptr;
182         return nullptr;
183     }
184 
185     qsizetype headerSize = sizeof(QArrayData);
186     const qsizetype headerAlignment = alignof(QArrayData);
187 
188     if (alignment > headerAlignment) {
189         // Allocate extra (alignment - Q_ALIGNOF(QArrayData)) padding bytes so we
190         // can properly align the data array. This assumes malloc is able to
191         // provide appropriate alignment for the header -- as it should!
192         headerSize += alignment - headerAlignment;
193     }
194     Q_ASSERT(headerSize > 0);
195 
196     qsizetype allocSize = calculateBlockSize(capacity, objectSize, headerSize, options);
197     constexpr qsizetype reservedExtraBytes = std::max(
198         sizeof(QByteArray::value_type), sizeof(QString::value_type));
199     QArrayData *header = allocateData(allocSize + reservedExtraBytes, options);
200     void *data = nullptr;
201     if (header) {
202         // find where offset should point to so that data() is aligned to alignment bytes
203         data = QTypedArrayData<void>::dataStart(header, alignment);
204         header->alloc = qsizetype(capacity);
205     }
206 
207     *dptr = header;
208     return data;
209 }
210 
211 QPair<QArrayData *, void *>
212 QArrayData::reallocateUnaligned(QArrayData *data, void *dataPointer,
213                                 qsizetype objectSize, qsizetype capacity, ArrayOptions options) noexcept
214 {
215     Q_ASSERT(!data || !data->isShared());
216 
217     qsizetype headerSize = sizeof(QArrayData);
218     qsizetype allocSize = calculateBlockSize(capacity, objectSize, headerSize, options);
219     qptrdiff offset = dataPointer ? reinterpret_cast<char *>(dataPointer) - reinterpret_cast<char *>(data) : headerSize;
220     constexpr qsizetype reservedExtraBytes = std::max(
221         sizeof(QByteArray::value_type), sizeof(QString::value_type));
222     QArrayData *header = static_cast<QArrayData *>(
223         ::realloc(data, size_t(allocSize + reservedExtraBytes)));
224     if (header) {
225         header->flags = options;
226         header->alloc = uint(capacity);
227         dataPointer = reinterpret_cast<char *>(header) + offset;
228     }
229     return qMakePair(static_cast<QArrayData *>(header), dataPointer);
230 }
231 
232 void QArrayData::deallocate(QArrayData *data, qsizetype objectSize,
233         qsizetype alignment) noexcept
234 {
235     // Alignment is a power of two
236     Q_ASSERT(alignment >= qsizetype(alignof(QArrayData))
237             && !(alignment & (alignment - 1)));
238     Q_UNUSED(objectSize);
239     Q_UNUSED(alignment);
240 
241     ::free(data);
242 }
243 
244 QT_END_NAMESPACE
