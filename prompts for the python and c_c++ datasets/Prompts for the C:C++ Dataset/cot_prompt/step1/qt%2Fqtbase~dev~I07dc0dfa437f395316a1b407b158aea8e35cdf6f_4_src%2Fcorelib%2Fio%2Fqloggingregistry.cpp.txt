Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Fix potential deadlock on qlogging registry initialization

Add safe guard against a deadlock when trying to open an
empty path string.

Change-Id: I07dc0dfa437f395316a1b407b158aea8e35cdf6f

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qloggingregistry_p.h"
41 
42 #include <QtCore/qfile.h>
43 #include <QtCore/qlibraryinfo.h>
44 #include <QtCore/private/qlocking_p.h>
45 #include <QtCore/qstandardpaths.h>
46 #include <QtCore/qstringtokenizer.h>
47 #include <QtCore/qtextstream.h>
48 #include <QtCore/qdir.h>
49 #include <QtCore/qcoreapplication.h>
50 
51 #if QT_CONFIG(settings)
52 #include <QtCore/qsettings.h>
53 #include <QtCore/private/qsettings_p.h>
54 #endif
55 
56 // We can't use the default macros because this would lead to recursion.
57 // Instead let's define our own one that unconditionally logs...
58 #define debugMsg QMessageLogger(QT_MESSAGELOG_FILE, QT_MESSAGELOG_LINE, QT_MESSAGELOG_FUNC, "qt.core.logging").debug
59 #define warnMsg QMessageLogger(QT_MESSAGELOG_FILE, QT_MESSAGELOG_LINE, QT_MESSAGELOG_FUNC, "qt.core.logging").warning
60 
61 QT_BEGIN_NAMESPACE
62 
63 Q_GLOBAL_STATIC(QLoggingRegistry, qtLoggingRegistry)
64 
65 /*!
66     \internal
67     Constructs a logging rule with default values.
68 */
69 QLoggingRule::QLoggingRule() :
70     enabled(false)
71 {
72 }
73 
74 /*!
75     \internal
76     Constructs a logging rule.
77 */
78 QLoggingRule::QLoggingRule(QStringView pattern, bool enabled) :
79     messageType(-1),
80     enabled(enabled)
81 {
82     parse(pattern);
83 }
84 
85 /*!
86     \internal
87     Return value 1 means filter passed, 0 means filter doesn't influence this
88     category, -1 means category doesn't pass this filter.
89  */
90 int QLoggingRule::pass(QLatin1String cat, QtMsgType msgType) const
91 {
92     // check message type
93     if (messageType > -1 && messageType != msgType)
94         return 0;
95 
96     if (flags == FullText) {
97         // full match
98         if (category == cat)
99             return (enabled ? 1 : -1);
100         else
101             return 0;
102     }
103 
104     const int idx = cat.indexOf(category);
105     if (idx >= 0) {
106         if (flags == MidFilter) {
107             // matches somewhere
108             return (enabled ? 1 : -1);
109         } else if (flags == LeftFilter) {
110             // matches left
111             if (idx == 0)
112                 return (enabled ? 1 : -1);
113         } else if (flags == RightFilter) {
114             // matches right
115             if (idx == (cat.size() - category.count()))
116                 return (enabled ? 1 : -1);
117         }
118     }
119     return 0;
120 }
121 
122 /*!
123     \internal
124     Parses \a pattern.
125     Allowed is f.ex.:
126              qt.core.io.debug      FullText, QtDebugMsg
127              qt.core.*             LeftFilter, all types
128              *.io.warning          RightFilter, QtWarningMsg
129              *.core.*              MidFilter
130  */
131 void QLoggingRule::parse(QStringView pattern)
132 {
133     QStringView p;
134 
135     // strip trailing ".messagetype"
136     if (pattern.endsWith(QLatin1String(".debug"))) {
137         p = pattern.chopped(6); // strlen(".debug")
138         messageType = QtDebugMsg;
139     } else if (pattern.endsWith(QLatin1String(".info"))) {
140         p = pattern.chopped(5); // strlen(".info")
141         messageType = QtInfoMsg;
142     } else if (pattern.endsWith(QLatin1String(".warning"))) {
143         p = pattern.chopped(8); // strlen(".warning")
144         messageType = QtWarningMsg;
145     } else if (pattern.endsWith(QLatin1String(".critical"))) {
146         p = pattern.chopped(9); // strlen(".critical")
147         messageType = QtCriticalMsg;
148     } else {
149         p = pattern;
150     }
151 
152     if (!p.contains(QLatin1Char('*'))) {
153         flags = FullText;
154     } else {
155         if (p.endsWith(QLatin1Char('*'))) {
156             flags |= LeftFilter;
157             p = p.chopped(1);
158         }
159         if (p.startsWith(QLatin1Char('*'))) {
160             flags |= RightFilter;
161             p = p.mid(1);
162         }
163         if (p.contains(QLatin1Char('*'))) // '*' only supported at start/end
164             flags = PatternFlags();
165     }
166 
167     category = p.toString();
168 }
169 
170 /*!
171     \class QLoggingSettingsParser
172     \since 5.3
173     \internal
174 
175     Parses a .ini file with the following format:
176 
177     [rules]
178     rule1=[true|false]
179     rule2=[true|false]
180     ...
181 
182     [rules] is the default section, and therefore optional.
183 */
184 
185 /*!
186     \internal
187     Parses configuration from \a content.
188 */
189 void QLoggingSettingsParser::setContent(QStringView content)
190 {
191     _rules.clear();
192     for (auto line : qTokenize(content, u'\n'))
193         parseNextLine(line);
194 }
195 
196 /*!
197     \internal
198     Parses configuration from \a stream.
199 */
200 void QLoggingSettingsParser::setContent(QTextStream &stream)
201 {
202     _rules.clear();
203     QString line;
204     while (stream.readLineInto(&line))
205         parseNextLine(qToStringViewIgnoringNull(line));
206 }
207 
208 /*!
209     \internal
210     Parses one line of the configuration file
211 */
212 
213 void QLoggingSettingsParser::parseNextLine(QStringView line)
214 {
215     // Remove whitespace at start and end of line:
216     line = line.trimmed();
217 
218     // comment
219     if (line.startsWith(QLatin1Char(';')))
220         return;
221 
222     if (line.startsWith(QLatin1Char('[')) && line.endsWith(QLatin1Char(']'))) {
223         // new section
224         auto sectionName = line.mid(1).chopped(1).trimmed();
225         m_inRulesSection = sectionName.compare(QLatin1String("rules"), Qt::CaseInsensitive) == 0;
226         return;
227     }
228 
229     if (m_inRulesSection) {
230         int equalPos = line.indexOf(QLatin1Char('='));
231         if (equalPos != -1) {
232             if (line.lastIndexOf(QLatin1Char('=')) == equalPos) {
233                 const auto key = line.left(equalPos).trimmed();
234 #if QT_CONFIG(settings)
235                 QString tmp;
236                 QSettingsPrivate::iniUnescapedKey(key.toUtf8(), 0, key.length(), tmp);
237                 QStringView pattern = qToStringViewIgnoringNull(tmp);
238 #else
239                 QStringView pattern = key;
240 #endif
241                 const auto valueStr = line.mid(equalPos + 1).trimmed();
242                 int value = -1;
243                 if (valueStr == QLatin1String("true"))
244                     value = 1;
245                 else if (valueStr == QLatin1String("false"))
246                     value = 0;
247                 QLoggingRule rule(pattern, (value == 1));
248                 if (rule.flags != 0 && (value != -1))
249                     _rules.append(std::move(rule));
250                 else
251                     warnMsg("Ignoring malformed logging rule: '%s'", line.toUtf8().constData());
252             } else {
253                 warnMsg("Ignoring malformed logging rule: '%s'", line.toUtf8().constData());
254             }
255         }
256     }
257 }
258 
259 /*!
260     \internal
261     QLoggingRegistry constructor
262  */
263 QLoggingRegistry::QLoggingRegistry()
264     : categoryFilter(defaultCategoryFilter)
265 {
266 #if defined(Q_OS_ANDROID)
267     // Unless QCoreApplication has been constructed we can't be sure that
268     // we are on Qt's main thread. If we did allow logging here, we would
269     // potentially set Qt's main thread to Android's thread 0, which would
270     // confuse Qt later when running main().
271     if (!qApp)
272         return;
273 #endif
274 
275     initializeRules(); // Init on first use
276 }
277 
278 static bool qtLoggingDebug()
279 {
280     static const bool debugEnv = qEnvironmentVariableIsSet("QT_LOGGING_DEBUG");
281     return debugEnv;
282 }
283 
284 static QList<QLoggingRule> loadRulesFromFile(const QString &filePath)
285 {
286     QFile file(filePath);
287     if (file.exists() && file.open(QIODevice::ReadOnly | QIODevice::Text)) {
288         if (qtLoggingDebug())
289             debugMsg("Loading \"%s\" ...",
290                      QDir::toNativeSeparators(file.fileName()).toUtf8().constData());
291         QTextStream stream(&file);
292         QLoggingSettingsParser parser;
293         parser.setContent(stream);
294         return parser.rules();
295     }
296     return QList<QLoggingRule>();
297 }
298 
299 /*!
300     \internal
301     Initializes the rules database by loading
302     $QT_LOGGING_CONF, $QT_LOGGING_RULES, and .config/QtProject/qtlogging.ini.
303  */
304 void QLoggingRegistry::initializeRules()
305 {
306     QList<QLoggingRule> er, qr, cr;
307     // get rules from environment
308     const QByteArray rulesFilePath = qgetenv("QT_LOGGING_CONF");
309     if (!rulesFilePath.isEmpty())
310         er = loadRulesFromFile(QFile::decodeName(rulesFilePath));
311 
312     const QByteArray rulesSrc = qgetenv("QT_LOGGING_RULES").replace(';', '\n');
313     if (!rulesSrc.isEmpty()) {
314          QTextStream stream(rulesSrc);
315          QLoggingSettingsParser parser;
316          parser.setImplicitRulesSection(true);
317          parser.setContent(stream);
318          er += parser.rules();
319     }
320 
321     const QString configFileName = QStringLiteral("qtlogging.ini");
322 
323 #if !defined(QT_BOOTSTRAPPED)
324     // get rules from Qt data configuration path
325     const QString qtConfigPath
326             = QDir(QLibraryInfo::path(QLibraryInfo::DataPath)).absoluteFilePath(configFileName);
327     qr = loadRulesFromFile(qtConfigPath);
328 #endif
329 
330     // get rules from user's/system configuration
331     const QString envPath = QStandardPaths::locate(QStandardPaths::GenericConfigLocation,
332                                                    QString::fromLatin1("QtProject/") + configFileName);
333     if (!envPath.isEmpty())
334         cr = loadRulesFromFile(envPath);
335 
336     const QMutexLocker locker(&registryMutex);
337 
338     ruleSets[EnvironmentRules] = std::move(er);
339     ruleSets[QtConfigRules] = std::move(qr);
340     ruleSets[ConfigRules] = std::move(cr);
341 
342     if (!ruleSets[EnvironmentRules].isEmpty() || !ruleSets[QtConfigRules].isEmpty() || !ruleSets[ConfigRules].isEmpty())
343         updateRules();
344 }
345 
346 /*!
347     \internal
348     Registers a category object.
349 
350     This method might be called concurrently for the same category object.
351 */
352 void QLoggingRegistry::registerCategory(QLoggingCategory *cat, QtMsgType enableForLevel)
353 {
354     const auto locker = qt_scoped_lock(registryMutex);
355 
356     if (!categories.contains(cat)) {
357         categories.insert(cat, enableForLevel);
358         (*categoryFilter)(cat);
359     }
360 }
361 
362 /*!
363     \internal
364     Unregisters a category object.
365 */
366 void QLoggingRegistry::unregisterCategory(QLoggingCategory *cat)
367 {
368     const auto locker = qt_scoped_lock(registryMutex);
369     categories.remove(cat);
370 }
371 
372 /*!
373     \since 6.3
374     \internal
375 
376     Registers the environment variable \a environment as the control variable
377     for enabling debugging by default for category \a categoryName. The
378     category name must start with "qt."
379 */
380 void QLoggingRegistry::registerEnvironmentOverrideForCategory(QByteArrayView categoryName,
381                                                               QByteArrayView environment)
382 {
383     qtCategoryEnvironmentOverrides.insert(categoryName, environment);
384 }
385 
386 /*!
387     \internal
388     Installs logging rules as specified in \a content.
389  */
390 void QLoggingRegistry::setApiRules(const QString &content)
391 {
392     QLoggingSettingsParser parser;
393     parser.setImplicitRulesSection(true);
394     parser.setContent(content);
395 
396     if (qtLoggingDebug())
397         debugMsg("Loading logging rules set by QLoggingCategory::setFilterRules ...");
398 
399     const QMutexLocker locker(&registryMutex);
400 
401     ruleSets[ApiRules] = parser.rules();
402 
403     updateRules();
404 }
405 
406 /*!
407     \internal
408     Activates a new set of logging rules for the default filter.
409 
410     (The caller must lock registryMutex to make sure the API is thread safe.)
411 */
412 void QLoggingRegistry::updateRules()
413 {
414     for (auto it = categories.keyBegin(), end = categories.keyEnd(); it != end; ++it)
415         (*categoryFilter)(*it);
416 }
417 
418 /*!
419     \internal
420     Installs a custom filter rule.
421 */
422 QLoggingCategory::CategoryFilter
423 QLoggingRegistry::installFilter(QLoggingCategory::CategoryFilter filter)
424 {
425     const auto locker = qt_scoped_lock(registryMutex);
426 
427     if (!filter)
428         filter = defaultCategoryFilter;
429 
430     QLoggingCategory::CategoryFilter old = categoryFilter;
431     categoryFilter = filter;
432 
433     updateRules();
434 
435     return old;
436 }
437 
438 QLoggingRegistry *QLoggingRegistry::instance()
439 {
440     return qtLoggingRegistry();
441 }
442 
443 /*!
444     \internal
445     Updates category settings according to rules.
446 
447     As a category filter, it is run with registryMutex held.
448 */
449 void QLoggingRegistry::defaultCategoryFilter(QLoggingCategory *cat)
450 {
451     const QLoggingRegistry *reg = QLoggingRegistry::instance();
452     Q_ASSERT(reg->categories.contains(cat));
453     QtMsgType enableForLevel = reg->categories.value(cat);
454 
455     // NB: note that the numeric values of the Qt*Msg constants are
456     //     not in severity order.
457     bool debug = (enableForLevel == QtDebugMsg);
458     bool info = debug || (enableForLevel == QtInfoMsg);
459     bool warning = info || (enableForLevel == QtWarningMsg);
460     bool critical = warning || (enableForLevel == QtCriticalMsg);
461 
462     // hard-wired implementation of
463     //   qt.*.debug=false
464     //   qt.debug=false
465     if (const char *categoryName = cat->categoryName()) {
466         // == "qt" or startsWith("qt.")
467         if (strcmp(categoryName, "qt") == 0) {
468             debug = false;
469         } else if (strncmp(categoryName, "qt.", 3) == 0) {
470             // may be overridden
471             auto it = reg->qtCategoryEnvironmentOverrides.find(categoryName);
472             if (it == reg->qtCategoryEnvironmentOverrides.end())
473                 debug = false;
474             else
475                 debug = qEnvironmentVariableIntValue(it.value().data());
476         }
477     }
478 
479     const auto categoryName = QLatin1String(cat->categoryName());
480 
481     for (const auto &ruleSet : reg->ruleSets) {
482         for (const auto &rule : ruleSet) {
483             int filterpass = rule.pass(categoryName, QtDebugMsg);
484             if (filterpass != 0)
485                 debug = (filterpass > 0);
486             filterpass = rule.pass(categoryName, QtInfoMsg);
487             if (filterpass != 0)
488                 info = (filterpass > 0);
489             filterpass = rule.pass(categoryName, QtWarningMsg);
490             if (filterpass != 0)
491                 warning = (filterpass > 0);
492             filterpass = rule.pass(categoryName, QtCriticalMsg);
493             if (filterpass != 0)
494                 critical = (filterpass > 0);
495         }
496     }
497 
498     cat->setEnabled(QtDebugMsg, debug);
499     cat->setEnabled(QtInfoMsg, info);
500     cat->setEnabled(QtWarningMsg, warning);
501     cat->setEnabled(QtCriticalMsg, critical);
502 }
503 
504 
505 QT_END_NAMESPACE
