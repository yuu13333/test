Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
QHostInfo: Always post results through the event loop to the receiver

Lookups performed via QHostInfoRunnable must not synchronously call
the user-code's receiver objects, as that would execute user-code in
the wrong thread. Instead, post a metacall event through the event
loop of the receiver object, or the thread that initiated the lookup.

This was done correctly for the trivial cases of empty host name or
cached results, so the code generally existed. By moving it from a
global function into a member function of QHostInfoResult, we can
simply access the required data to construct and post the event.

As we process that posted event, we need to check that the context
object (which is already guarded via QPointer) is still alive, if
we had one in the first place. If we had one, and it's deleted, then
abort.

[ChangeLog][QtNetwork][QHostInfo] Functors used in the lookupHost
overloads are now called correctly in the thread of the context object.
When used without context object, the thread that initiates the lookup
will run the functor, and is required to run an event loop.

Change-Id: I9b38d4f9a23cfc4d9e07bc72de2d2cefe5d0d033
Fixes: QTBUG-76276

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtNetwork module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qhostinfo.h"
41 #include "qhostinfo_p.h"
42 
43 #include "QtCore/qscopedpointer.h"
44 #include <qabstracteventdispatcher.h>
45 #include <qcoreapplication.h>
46 #include <qmetaobject.h>
47 #include <qstringlist.h>
48 #include <qthread.h>
49 #include <qurl.h>
50 #include <private/qnetworksession_p.h>
51 
52 #include <algorithm>
53 
54 #ifdef Q_OS_UNIX
55 #  include <unistd.h>
56 #endif
57 
58 QT_BEGIN_NAMESPACE
59 
60 //#define QHOSTINFO_DEBUG
61 
62 Q_GLOBAL_STATIC(QHostInfoLookupManager, theHostInfoLookupManager)
63 
64 namespace {
65 struct ToBeLookedUpEquals {
66     typedef bool result_type;
67     explicit ToBeLookedUpEquals(const QString &toBeLookedUp) Q_DECL_NOTHROW : m_toBeLookedUp(toBeLookedUp) {}
68     result_type operator()(QHostInfoRunnable* lookup) const Q_DECL_NOTHROW
69     {
70         return m_toBeLookedUp == lookup->toBeLookedUp;
71     }
72 private:
73     QString m_toBeLookedUp;
74 };
75 
76 // ### C++11: remove once we can use std::any_of()
77 template<class InputIt, class UnaryPredicate>
78 bool any_of(InputIt first, InputIt last, UnaryPredicate p)
79 {
80     return std::find_if(first, last, p) != last;
81 }
82 
83 template <typename InputIt, typename OutputIt1, typename OutputIt2, typename UnaryPredicate>
84 std::pair<OutputIt1, OutputIt2> separate_if(InputIt first, InputIt last, OutputIt1 dest1, OutputIt2 dest2, UnaryPredicate p)
85 {
86     while (first != last) {
87         if (p(*first)) {
88             *dest1 = *first;
89             ++dest1;
90         } else {
91             *dest2 = *first;
92             ++dest2;
93         }
94         ++first;
95     }
96     return std::make_pair(dest1, dest2);
97 }
98 
99 int get_signal_index()
100 {
101     static auto senderMetaObject = &QHostInfoResult::staticMetaObject;
102     static auto signal = &QHostInfoResult::resultsReady;
103     int signal_index = -1;
104     void *args[] = { &signal_index, &signal };
105     senderMetaObject->static_metacall(QMetaObject::IndexOfMethod, 0, args);
106     return signal_index + QMetaObjectPrivate::signalOffset(senderMetaObject);
107 }
108 
109 }
110 
111 /*
112     The calling thread is likely the one that executes the lookup via
113     QHostInfoRunnable. Unless we operate with a queued connection already,
114     posts the QHostInfo to a dedicated QHostInfoResult object that lives in
115     the same thread as the user-provided receiver, or (if there is none) in
116     the thread that made the call to lookupHost. That QHostInfoResult object
117     then calls the user code in the correct thread.
118 
119     The 'result' object deletes itself (via deleteLater) when the metacall
120     event is received.
121 */
122 void QHostInfoResult::postResultsReady(const QHostInfo &info)
123 {
124     // queued connection will take care of dispatching to right thread
125     if (!slotObj) {
126         emitResultsReady(info);
127         return;
128     }
129     static const int signal_index = get_signal_index();
130 
131     // we used to have a context object, but it's already destroyed
132     if (withContextObject && !receiver)
133       return;
134 
135     /* QHostInfoResult c'tor moves the result object to the thread of receiver.
136        If we don't have a receiver, then the result object will not live in a
137        thread that runs an event loop - so move it to this' thread, which is the thread
138        that initiated the lookup, and required to have a running event loop. */
139     auto result = new QHostInfoResult(receiver, slotObj);
140     if (!receiver)
141         result->moveToThread(thread());
142     Q_CHECK_PTR(result);
143     const int nargs = 2;
144     auto types = reinterpret_cast<int *>(malloc(nargs * sizeof(int)));
145     Q_CHECK_PTR(types);
146     types[0] = QMetaType::type("void");
147     types[1] = QMetaType::type("QHostInfo");
148     auto args = reinterpret_cast<void **>(malloc(nargs * sizeof(void *)));
149     Q_CHECK_PTR(args);
150     args[0] = 0;
151     args[1] = QMetaType::create(types[1], &info);
152     Q_CHECK_PTR(args[1]);
153     auto metaCallEvent = new QMetaCallEvent(slotObj, nullptr, signal_index, nargs, types, args);
154     Q_CHECK_PTR(metaCallEvent);
155     qApp->postEvent(result, metaCallEvent);
156 }
157 
158 /*!
159     \class QHostInfo
160     \brief The QHostInfo class provides static functions for host name lookups.
161 
162     \reentrant
163     \inmodule QtNetwork
164     \ingroup network
165 
166     QHostInfo finds the IP address(es) associated with a host name,
167     or the host name associated with an IP address.
168     The class provides two static convenience functions: one that
169     works asynchronously and emits a signal once the host is found,
170     and one that blocks and returns a QHostInfo object.
171 
172     To look up a host's IP addresses asynchronously, call lookupHost(),
173     which takes the host name or IP address, a receiver object, and a slot
174     signature as arguments and returns an ID. You can abort the
175     lookup by calling abortHostLookup() with the lookup ID.
176 
177     Example:
178 
179     \snippet code/src_network_kernel_qhostinfo.cpp 0
180 
181 
182     The slot is invoked when the results are ready. The results are
183     stored in a QHostInfo object. Call
184     addresses() to get the list of IP addresses for the host, and
185     hostName() to get the host name that was looked up.
186 
187     If the lookup failed, error() returns the type of error that
188     occurred. errorString() gives a human-readable description of the
189     lookup error.
190 
191     If you want a blocking lookup, use the QHostInfo::fromName() function:
192 
193     \snippet code/src_network_kernel_qhostinfo.cpp 1
194 
195     QHostInfo supports Internationalized Domain Names (IDNs) through the
196     IDNA and Punycode standards.
197 
198     To retrieve the name of the local host, use the static
199     QHostInfo::localHostName() function.
200 
201     QHostInfo uses the mechanisms provided by the operating system
202     to perform the lookup. As per {https://tools.ietf.org/html/rfc6724}{RFC 6724}
203     there is no guarantee that all IP addresses registered for a domain or
204     host will be returned.
205 
206     \note Since Qt 4.6.1 QHostInfo is using multiple threads for DNS lookup
207     instead of one dedicated DNS thread. This improves performance,
208     but also changes the order of signal emissions when using lookupHost()
209     compared to previous versions of Qt.
210     \note Since Qt 4.6.3 QHostInfo is using a small internal 60 second DNS cache
211     for performance improvements.
212 
213     \sa QAbstractSocket, {http://www.rfc-editor.org/rfc/rfc3492.txt}{RFC 3492},
214     {https://tools.ietf.org/html/rfc6724}{RFC 6724}
215 */
216 
217 static int nextId()
218 {
219     static QBasicAtomicInt counter = Q_BASIC_ATOMIC_INITIALIZER(0);
220     return 1 + counter.fetchAndAddRelaxed(1);
221 }
222 
223 /*!
224     Looks up the IP address(es) associated with host name \a name, and
225     returns an ID for the lookup. When the result of the lookup is
226     ready, the slot or signal \a member in \a receiver is called with
227     a QHostInfo argument. The QHostInfo object can then be inspected
228     to get the results of the lookup.
229 
230     The lookup is performed by a single function call, for example:
231 
232     \snippet code/src_network_kernel_qhostinfo.cpp 2
233 
234     The implementation of the slot prints basic information about the
235     addresses returned by the lookup, or reports an error if it failed:
236 
237     \snippet code/src_network_kernel_qhostinfo.cpp 3
238 
239     If you pass a literal IP address to \a name instead of a host name,
240     QHostInfo will search for the domain name for the IP (i.e., QHostInfo will
241     perform a \e reverse lookup). On success, the resulting QHostInfo will
242     contain both the resolved domain name and IP addresses for the host
243     name. Example:
244 
245     \snippet code/src_network_kernel_qhostinfo.cpp 4
246 
247     \note There is no guarantee on the order the signals will be emitted
248     if you start multiple requests with lookupHost().
249 
250     \sa abortHostLookup(), addresses(), error(), fromName()
251 */
252 int QHostInfo::lookupHost(const QString &name, QObject *receiver,
253                           const char *member)
254 {
255 #if defined QHOSTINFO_DEBUG
256     qDebug("QHostInfo::lookupHost(\"%s\", %p, %s)",
257            name.toLatin1().constData(), receiver, member ? member + 1 : 0);
258 #endif
259 
260     if (!QAbstractEventDispatcher::instance(QThread::currentThread())) {
261         qWarning("QHostInfo::lookupHost() called with no event dispatcher");
262         return -1;
263     }
264 
265     qRegisterMetaType<QHostInfo>();
266 
267     int id = nextId(); // generate unique ID
268 
269     if (name.isEmpty()) {
270         if (!receiver)
271             return -1;
272 
273         QHostInfo hostInfo(id);
274         hostInfo.setError(QHostInfo::HostNotFound);
275         hostInfo.setErrorString(QCoreApplication::translate("QHostInfo", "No host name given"));
276         QScopedPointer<QHostInfoResult> result(new QHostInfoResult);
277         QObject::connect(result.data(), SIGNAL(resultsReady(QHostInfo)),
278                          receiver, member, Qt::QueuedConnection);
279         result.data()->emitResultsReady(hostInfo);
280         return id;
281     }
282 
283     QHostInfoLookupManager *manager = theHostInfoLookupManager();
284 
285     if (manager) {
286         // the application is still alive
287         if (manager->cache.isEnabled()) {
288             // check cache first
289             bool valid = false;
290             QHostInfo info = manager->cache.get(name, &valid);
291             if (valid) {
292                 if (!receiver)
293                     return -1;
294 
295                 info.setLookupId(id);
296                 QHostInfoResult result;
297                 QObject::connect(&result, SIGNAL(resultsReady(QHostInfo)), receiver, member, Qt::QueuedConnection);
298                 result.emitResultsReady(info);
299                 return id;
300             }
301         }
302 
303         // cache is not enabled or it was not in the cache, do normal lookup
304         QHostInfoRunnable* runnable = new QHostInfoRunnable(name, id);
305         if (receiver)
306             QObject::connect(&runnable->resultEmitter, SIGNAL(resultsReady(QHostInfo)), receiver, member, Qt::QueuedConnection);
307         manager->scheduleLookup(runnable);
308     }
309     return id;
310 }
311 
312 /*!
313     \fn QHostInfo &QHostInfo::operator=(QHostInfo &&other)
314 
315     Move-assigns \a other to this QHostInfo instance.
316 
317     \note The moved-from object \a other is placed in a
318     partially-formed state, in which the only valid operations are
319     destruction and assignment of a new value.
320 
321     \since 5.10
322 */
323 
324 /*!
325     \fn void QHostInfo::swap(QHostInfo &other)
326 
327     Swaps host-info \a other with this host-info. This operation is
328     very fast and never fails.
329 
330     \since 5.10
331 */
332 
333 /*!
334     \fn template<typename PointerToMemberFunction> int QHostInfo::lookupHost(const QString &name, const QObject *receiver, PointerToMemberFunction function)
335 
336     \since 5.9
337 
338     \overload
339 
340     Looks up the IP address(es) associated with host name \a name, and
341     returns an ID for the lookup. When the result of the lookup is
342     ready, the slot or signal \a function in \a receiver is called with
343     a QHostInfo argument. The QHostInfo object can then be inspected
344     to get the results of the lookup.
345 
346     \note There is no guarantee on the order the signals will be emitted
347     if you start multiple requests with lookupHost().
348 
349     \sa abortHostLookup(), addresses(), error(), fromName()
350 */
351 
352 /*!
353     \fn template<typename Functor> int QHostInfo::lookupHost(const QString &name, Functor functor)
354 
355     \since 5.9
356 
357     \overload
358 
359     Looks up the IP address(es) associated with host name \a name, and
360     returns an ID for the lookup. When the result of the lookup is
361     ready, the \a functor is called with a QHostInfo argument. The
362     QHostInfo object can then be inspected to get the results of the
363     lookup.
364 
365     The \a functor will be run in the thread that makes the call to lookupHost;
366     that thread must have a running Qt  event loop.
367 
368     \note There is no guarantee on the order the signals will be emitted
369     if you start multiple requests with lookupHost().
370 
371     \sa abortHostLookup(), addresses(), error(), fromName()
372 */
373 
374 /*!
375     \fn template<typename Functor> int QHostInfo::lookupHost(const QString &name, const QObject *context, Functor functor)
376 
377     \since 5.9
378 
379     \overload
380 
381     Looks up the IP address(es) associated with host name \a name, and
382     returns an ID for the lookup. When the result of the lookup is
383     ready, the \a functor is called with a QHostInfo argument. The
384     QHostInfo object can then be inspected to get the results of the
385     lookup.
386 
387     If \a context is destroyed before the lookup completes, the
388     \a functor will not be called. The \a functor will be run in the
389     thread of \a context. The context's thread must have a running Qt
390     event loop.
391 
392     \note There is no guarantee on the order the signals will be emitted
393     if you start multiple requests with lookupHost().
394 
395     \sa abortHostLookup(), addresses(), error(), fromName()
396 */
397 
398 /*!
399     Aborts the host lookup with the ID \a id, as returned by lookupHost().
400 
401     \sa lookupHost(), lookupId()
402 */
403 void QHostInfo::abortHostLookup(int id)
404 {
405     theHostInfoLookupManager()->abortLookup(id);
406 }
407 
408 /*!
409     Looks up the IP address(es) for the given host \a name. The
410     function blocks during the lookup which means that execution of
411     the program is suspended until the results of the lookup are
412     ready. Returns the result of the lookup in a QHostInfo object.
413 
414     If you pass a literal IP address to \a name instead of a host name,
415     QHostInfo will search for the domain name for the IP (i.e., QHostInfo will
416     perform a \e reverse lookup). On success, the returned QHostInfo will
417     contain both the resolved domain name and IP addresses for the host name.
418 
419     \sa lookupHost()
420 */
421 QHostInfo QHostInfo::fromName(const QString &name)
422 {
423 #if defined QHOSTINFO_DEBUG
424     qDebug("QHostInfo::fromName(\"%s\")",name.toLatin1().constData());
425 #endif
426 
427     QHostInfo hostInfo = QHostInfoAgent::fromName(name);
428     QAbstractHostInfoLookupManager* manager = theHostInfoLookupManager();
429     manager->cache.put(name, hostInfo);
430     return hostInfo;
431 }
432 
433 #ifndef QT_NO_BEARERMANAGEMENT
434 QHostInfo QHostInfoPrivate::fromName(const QString &name, QSharedPointer<QNetworkSession> session)
435 {
436 #if defined QHOSTINFO_DEBUG
437     qDebug("QHostInfoPrivate::fromName(\"%s\") with session %p",name.toLatin1().constData(), session.data());
438 #endif
439 
440     QHostInfo hostInfo = QHostInfoAgent::fromName(name, session);
441     QAbstractHostInfoLookupManager* manager = theHostInfoLookupManager();
442     manager->cache.put(name, hostInfo);
443     return hostInfo;
444 }
445 #endif
446 
447 #ifndef QT_NO_BEARERMANAGEMENT
448 QHostInfo QHostInfoAgent::fromName(const QString &hostName, QSharedPointer<QNetworkSession>)
449 {
450     return QHostInfoAgent::fromName(hostName);
451 }
452 #endif
453 
454 
455 /*!
456     \enum QHostInfo::HostInfoError
457 
458     This enum describes the various errors that can occur when trying
459     to resolve a host name.
460 
461     \value NoError The lookup was successful.
462     \value HostNotFound No IP addresses were found for the host.
463     \value UnknownError An unknown error occurred.
464 
465     \sa error(), setError()
466 */
467 
468 /*!
469     Constructs an empty host info object with lookup ID \a id.
470 
471     \sa lookupId()
472 */
473 QHostInfo::QHostInfo(int id)
474     : d(new QHostInfoPrivate)
475 {
476     d->lookupId = id;
477 }
478 
479 /*!
480     Constructs a copy of \a other.
481 */
482 QHostInfo::QHostInfo(const QHostInfo &other)
483     : d(new QHostInfoPrivate(*other.d.data()))
484 {
485 }
486 
487 /*!
488     Assigns the data of the \a other object to this host info object,
489     and returns a reference to it.
490 */
491 QHostInfo &QHostInfo::operator=(const QHostInfo &other)
492 {
493     *d.data() = *other.d.data();
494     return *this;
495 }
496 
497 /*!
498     Destroys the host info object.
499 */
500 QHostInfo::~QHostInfo()
501 {
502 }
503 
504 /*!
505     Returns the list of IP addresses associated with hostName(). This
506     list may be empty.
507 
508     Example:
509 
510     \snippet code/src_network_kernel_qhostinfo.cpp 5
511 
512     \sa hostName(), error()
513 */
514 QList<QHostAddress> QHostInfo::addresses() const
515 {
516     return d->addrs;
517 }
518 
519 /*!
520     Sets the list of addresses in this QHostInfo to \a addresses.
521 
522     \sa addresses()
523 */
524 void QHostInfo::setAddresses(const QList<QHostAddress> &addresses)
525 {
526     d->addrs = addresses;
527 }
528 
529 /*!
530     Returns the name of the host whose IP addresses were looked up.
531 
532     \sa localHostName()
533 */
534 QString QHostInfo::hostName() const
535 {
536     return d->hostName;
537 }
538 
539 /*!
540     Sets the host name of this QHostInfo to \a hostName.
541 
542     \sa hostName()
543 */
544 void QHostInfo::setHostName(const QString &hostName)
545 {
546     d->hostName = hostName;
547 }
548 
549 /*!
550     Returns the type of error that occurred if the host name lookup
551     failed; otherwise returns NoError.
552 
553     \sa setError(), errorString()
554 */
555 QHostInfo::HostInfoError QHostInfo::error() const
556 {
557     return d->err;
558 }
559 
560 /*!
561     Sets the error type of this QHostInfo to \a error.
562 
563     \sa error(), errorString()
564 */
565 void QHostInfo::setError(HostInfoError error)
566 {
567     d->err = error;
568 }
569 
570 /*!
571     Returns the ID of this lookup.
572 
573     \sa setLookupId(), abortHostLookup(), hostName()
574 */
575 int QHostInfo::lookupId() const
576 {
577     return d->lookupId;
578 }
579 
580 /*!
581     Sets the ID of this lookup to \a id.
582 
583     \sa lookupId(), lookupHost()
584 */
585 void QHostInfo::setLookupId(int id)
586 {
587     d->lookupId = id;
588 }
589 
590 /*!
591     If the lookup failed, this function returns a human readable
592     description of the error; otherwise "Unknown error" is returned.
593 
594     \sa setErrorString(), error()
595 */
596 QString QHostInfo::errorString() const
597 {
598     return d->errorStr;
599 }
600 
601 /*!
602     Sets the human readable description of the error that occurred to \a str
603     if the lookup failed.
604 
605     \sa errorString(), setError()
606 */
607 void QHostInfo::setErrorString(const QString &str)
608 {
609     d->errorStr = str;
610 }
611 
612 /*!
613     \fn QString QHostInfo::localHostName()
614 
615     Returns this machine's host name, if one is configured. Note that hostnames
616     are not guaranteed to be globally unique, especially if they were
617     configured automatically.
618 
619     This function does not guarantee the returned host name is a Fully
620     Qualified Domain Name (FQDN). For that, use fromName() to resolve the
621     returned name to an FQDN.
622 
623     This function returns the same as QSysInfo::machineHostName().
624 
625     \sa hostName(), localDomainName()
626 */
627 QString QHostInfo::localHostName()
628 {
629     return QSysInfo::machineHostName();
630 }
631 
632 /*!
633     \fn QString QHostInfo::localDomainName()
634 
635     Returns the DNS domain of this machine.
636 
637     \note DNS domains are not related to domain names found in
638     Windows networks.
639 
640     \sa hostName()
641 */
642 
643 int QHostInfo::lookupHostImpl(const QString &name,
644                               const QObject *receiver,
645                               QtPrivate::QSlotObjectBase *slotObj)
646 {
647 #if defined QHOSTINFO_DEBUG
648     qDebug("QHostInfo::lookupHost(\"%s\", %p, %p)",
649            name.toLatin1().constData(), receiver, slotObj);
650 #endif
651 
652     if (!QAbstractEventDispatcher::instance(QThread::currentThread())) {
653         qWarning("QHostInfo::lookupHost() called with no event dispatcher");
654         return -1;
655     }
656 
657     qRegisterMetaType<QHostInfo>();
658 
659     int id = nextId(); // generate unique ID
660 
661     if (Q_UNLIKELY(name.isEmpty())) {
662         QHostInfo hostInfo(id);
663         hostInfo.setError(QHostInfo::HostNotFound);
664         hostInfo.setErrorString(QCoreApplication::translate("QHostInfo", "No host name given"));
665         QHostInfoResult result(receiver, slotObj);
666         result.postResultsReady(hostInfo);
667         return id;
668     }
669 
670     QHostInfoLookupManager *manager = theHostInfoLookupManager();
671 
672     if (Q_LIKELY(manager)) {
673         // the application is still alive
674         if (manager->cache.isEnabled()) {
675             // check cache first
676             bool valid = false;
677             QHostInfo info = manager->cache.get(name, &valid);
678             if (valid) {
679                 info.setLookupId(id);
680                 QHostInfoResult result(receiver, slotObj);
681                 result.postResultsReady(info);
682                 return id;
683             }
684         }
685 
686         // cache is not enabled or it was not in the cache, do normal lookup
687         QHostInfoRunnable* runnable = new QHostInfoRunnable(name, id, receiver, slotObj);
688         manager->scheduleLookup(runnable);
689     }
690     return id;
691 }
692 
693 QHostInfoRunnable::QHostInfoRunnable(const QString &hn, int i) : toBeLookedUp(hn), id(i)
694 {
695     setAutoDelete(true);
696 }
697 
698 QHostInfoRunnable::QHostInfoRunnable(const QString &hn, int i, const QObject *receiver,
699                                      QtPrivate::QSlotObjectBase *slotObj) :
700     toBeLookedUp(hn), id(i), resultEmitter(receiver, slotObj)
701 {
702     setAutoDelete(true);
703 }
704 
705 // the QHostInfoLookupManager will at some point call this via a QThreadPool
706 void QHostInfoRunnable::run()
707 {
708     QHostInfoLookupManager *manager = theHostInfoLookupManager();
709     // check aborted
710     if (manager->wasAborted(id)) {
711         manager->lookupFinished(this);
712         return;
713     }
714 
715     QHostInfo hostInfo;
716 
717     // QHostInfo::lookupHost already checks the cache. However we need to check
718     // it here too because it might have been cache saved by another QHostInfoRunnable
719     // in the meanwhile while this QHostInfoRunnable was scheduled but not running
720     if (manager->cache.isEnabled()) {
721         // check the cache first
722         bool valid = false;
723         hostInfo = manager->cache.get(toBeLookedUp, &valid);
724         if (!valid) {
725             // not in cache, we need to do the lookup and store the result in the cache
726             hostInfo = QHostInfoAgent::fromName(toBeLookedUp);
727             manager->cache.put(toBeLookedUp, hostInfo);
728         }
729     } else {
730         // cache is not enabled, just do the lookup and continue
731         hostInfo = QHostInfoAgent::fromName(toBeLookedUp);
732     }
733 
734     // check aborted again
735     if (manager->wasAborted(id)) {
736         manager->lookupFinished(this);
737         return;
738     }
739 
740     // signal emission
741     hostInfo.setLookupId(id);
742     resultEmitter.postResultsReady(hostInfo);
743 
744 #if QT_CONFIG(thread)
745     // now also iterate through the postponed ones
746     {
747         QMutexLocker locker(&manager->mutex);
748         const auto partitionBegin = std::stable_partition(manager->postponedLookups.rbegin(), manager->postponedLookups.rend(),
749                                                           ToBeLookedUpEquals(toBeLookedUp)).base();
750         const auto partitionEnd = manager->postponedLookups.end();
751         for (auto it = partitionBegin; it != partitionEnd; ++it) {
752             QHostInfoRunnable* postponed = *it;
753             // we can now emit
754             hostInfo.setLookupId(postponed->id);
755             postponed->resultEmitter.postResultsReady(hostInfo);
756             delete postponed;
757         }
758         manager->postponedLookups.erase(partitionBegin, partitionEnd);
759     }
760 
761 #endif
762     manager->lookupFinished(this);
763 
764     // thread goes back to QThreadPool
765 }
766 
767 QHostInfoLookupManager::QHostInfoLookupManager() : mutex(QMutex::Recursive), wasDeleted(false)
768 {
769     moveToThread(QCoreApplicationPrivate::mainThread());
770 #if QT_CONFIG(thread)
771     connect(QCoreApplication::instance(), SIGNAL(destroyed()), SLOT(waitForThreadPoolDone()), Qt::DirectConnection);
772     threadPool.setMaxThreadCount(20); // do up to 20 DNS lookups in parallel
773 #endif
774 }
775 
776 QHostInfoLookupManager::~QHostInfoLookupManager()
777 {
778     QMutexLocker locker(&mutex);
779     wasDeleted = true;
780     locker.unlock();
781 
782     // don't qDeleteAll currentLookups, the QThreadPool has ownership
783     clear();
784 }
785 
786 void QHostInfoLookupManager::clear()
787 {
788     {
789         QMutexLocker locker(&mutex);
790         qDeleteAll(scheduledLookups);
791         qDeleteAll(finishedLookups);
792 #if QT_CONFIG(thread)
793         qDeleteAll(postponedLookups);
794         postponedLookups.clear();
795 #endif
796         scheduledLookups.clear();
797         finishedLookups.clear();
798     }
799 
800 #if QT_CONFIG(thread)
801     threadPool.waitForDone();
802 #endif
803     cache.clear();
804 }
805 
806 void QHostInfoLookupManager::work()
807 {
808     QMutexLocker locker(&mutex);
809 
810     if (wasDeleted)
811         return;
812 
813     // goals of this function:
814     //  - launch new lookups via the thread pool
815     //  - make sure only one lookup per host/IP is in progress
816 
817     if (!finishedLookups.isEmpty()) {
818         // remove ID from aborted if it is in there
819         for (int i = 0; i < finishedLookups.length(); i++) {
820            abortedLookups.removeAll(finishedLookups.at(i)->id);
821         }
822 
823         finishedLookups.clear();
824     }
825 
826 #if QT_CONFIG(thread)
827     auto isAlreadyRunning = [this](QHostInfoRunnable *lookup) {
828         return any_of(currentLookups.cbegin(), currentLookups.cend(), ToBeLookedUpEquals(lookup->toBeLookedUp));
829     };
830 
831     // Transfer any postponed lookups that aren't currently running to the scheduled list, keeping already-running lookups:
832     postponedLookups.erase(separate_if(postponedLookups.begin(),
833                                        postponedLookups.end(),
834                                        postponedLookups.begin(),
835                                        std::front_inserter(scheduledLookups), // prepend! we want to finish it ASAP
836                                        isAlreadyRunning).first,
837                            postponedLookups.end());
838 
839     // Unschedule and postpone any that are currently running:
840     scheduledLookups.erase(separate_if(scheduledLookups.begin(),
841                                        scheduledLookups.end(),
842                                        std::back_inserter(postponedLookups),
843                                        scheduledLookups.begin(),
844                                        isAlreadyRunning).second,
845                            scheduledLookups.end());
846 
847     const int availableThreads = threadPool.maxThreadCount() - currentLookups.size();
848     if (availableThreads > 0) {
849         int readyToStartCount = qMin(availableThreads, scheduledLookups.size());
850         auto it = scheduledLookups.begin();
851         while (readyToStartCount--) {
852             // runnable now running in new thread, track this in currentLookups
853             threadPool.start(*it);
854             currentLookups.push_back(std::move(*it));
855             ++it;
856         }
857         scheduledLookups.erase(scheduledLookups.begin(), it);
858     }
859 #else
860     if (!scheduledLookups.isEmpty())
861         scheduledLookups.takeFirst()->run();
862 #endif
863 }
864 
865 // called by QHostInfo
866 void QHostInfoLookupManager::scheduleLookup(QHostInfoRunnable *r)
867 {
868     QMutexLocker locker(&this->mutex);
869 
870     if (wasDeleted)
871         return;
872 
873     scheduledLookups.enqueue(r);
874     work();
875 }
876 
877 // called by QHostInfo
878 void QHostInfoLookupManager::abortLookup(int id)
879 {
880     QMutexLocker locker(&this->mutex);
881 
882     if (wasDeleted)
883         return;
884 
885 #if QT_CONFIG(thread)
886     // is postponed? delete and return
887     for (int i = 0; i < postponedLookups.length(); i++) {
888         if (postponedLookups.at(i)->id == id) {
889             delete postponedLookups.takeAt(i);
890             return;
891         }
892     }
893 #endif
894 
895     // is scheduled? delete and return
896     for (int i = 0; i < scheduledLookups.length(); i++) {
897         if (scheduledLookups.at(i)->id == id) {
898             delete scheduledLookups.takeAt(i);
899             return;
900         }
901     }
902 
903     if (!abortedLookups.contains(id))
904         abortedLookups.append(id);
905 }
906 
907 // called from QHostInfoRunnable
908 bool QHostInfoLookupManager::wasAborted(int id)
909 {
910     QMutexLocker locker(&this->mutex);
911 
912     if (wasDeleted)
913         return true;
914 
915     return abortedLookups.contains(id);
916 }
917 
918 // called from QHostInfoRunnable
919 void QHostInfoLookupManager::lookupFinished(QHostInfoRunnable *r)
920 {
921     QMutexLocker locker(&this->mutex);
922 
923     if (wasDeleted)
924         return;
925 
926 #if QT_CONFIG(thread)
927     currentLookups.removeOne(r);
928 #endif
929     finishedLookups.append(r);
930     work();
931 }
932 
933 // This function returns immediately when we had a result in the cache, else it will later emit a signal
934 QHostInfo qt_qhostinfo_lookup(const QString &name, QObject *receiver, const char *member, bool *valid, int *id)
935 {
936     *valid = false;
937     *id = -1;
938 
939     // check cache
940     QAbstractHostInfoLookupManager* manager = theHostInfoLookupManager();
941     if (manager && manager->cache.isEnabled()) {
942         QHostInfo info = manager->cache.get(name, valid);
943         if (*valid) {
944             return info;
945         }
946     }
947 
948     // was not in cache, trigger lookup
949     *id = QHostInfo::lookupHost(name, receiver, member);
950 
951     // return empty response, valid==false
952     return QHostInfo();
953 }
954 
955 void qt_qhostinfo_clear_cache()
956 {
957     QAbstractHostInfoLookupManager* manager = theHostInfoLookupManager();
958     if (manager) {
959         manager->clear();
960     }
961 }
962 
963 #ifdef QT_BUILD_INTERNAL
964 void Q_AUTOTEST_EXPORT qt_qhostinfo_enable_cache(bool e)
965 {
966     QAbstractHostInfoLookupManager* manager = theHostInfoLookupManager();
967     if (manager) {
968         manager->cache.setEnabled(e);
969     }
970 }
971 
972 void qt_qhostinfo_cache_inject(const QString &hostname, const QHostInfo &resolution)
973 {
974     QAbstractHostInfoLookupManager* manager = theHostInfoLookupManager();
975     if (!manager || !manager->cache.isEnabled())
976         return;
977 
978     manager->cache.put(hostname, resolution);
979 }
980 #endif
981 
982 // cache for 60 seconds
983 // cache 128 items
984 QHostInfoCache::QHostInfoCache() : max_age(60), enabled(true), cache(128)
985 {
986 #ifdef QT_QHOSTINFO_CACHE_DISABLED_BY_DEFAULT
987     enabled.store(false, std::memory_order_relaxed);
988 #endif
989 }
990 
991 QHostInfo QHostInfoCache::get(const QString &name, bool *valid)
992 {
993     QMutexLocker locker(&this->mutex);
994 
995     *valid = false;
996     if (QHostInfoCacheElement *element = cache.object(name)) {
997         if (element->age.elapsed() < max_age*1000)
998             *valid = true;
999         return element->info;
1000 
1001         // FIXME idea:
1002         // if too old but not expired, trigger a new lookup
1003         // to freshen our cache
1004     }
1005 
1006     return QHostInfo();
1007 }
1008 
1009 void QHostInfoCache::put(const QString &name, const QHostInfo &info)
1010 {
1011     // if the lookup failed, don't cache
1012     if (info.error() != QHostInfo::NoError)
1013         return;
1014 
1015     QHostInfoCacheElement* element = new QHostInfoCacheElement();
1016     element->info = info;
1017     element->age = QElapsedTimer();
1018     element->age.start();
1019 
1020     QMutexLocker locker(&this->mutex);
1021     cache.insert(name, element); // cache will take ownership
1022 }
1023 
1024 void QHostInfoCache::clear()
1025 {
1026     QMutexLocker locker(&this->mutex);
1027     cache.clear();
1028 }
1029 
1030 QAbstractHostInfoLookupManager* QAbstractHostInfoLookupManager::globalInstance()
1031 {
1032     return theHostInfoLookupManager();
1033 }
1034 
1035 QT_END_NAMESPACE
