Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Utils: Add deviceshell generic class

Change-Id: Ibfb16a0f13f9fe119d27055db5897213127dd104

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2022 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "deviceshell.h"
27 
28 #include <qtcassert.h>
29 #include <qtcprocess.h>
30 
31 #include <QLoggingCategory>
32 
33 Q_LOGGING_CATEGORY(deviceShellLog, "qtc.utils.deviceshell", QtWarningMsg)
34 
35 namespace Utils {
36 
37 DeviceShell::DeviceShell()
38 {
39     m_thread.setObjectName("Shell Thread");
40     m_thread.start();
41     moveToThread(&m_thread);
42     QMetaObject::invokeMethod(
43         this, [this] { this->start(); }, Qt::QueuedConnection);
44 }
45 
46 DeviceShell::~DeviceShell()
47 {
48     if (QThread::currentThread() != &m_thread) {
49         QMetaObject::invokeMethod(
50             this, [this] { this->closeShellProcess(); }, Qt::BlockingQueuedConnection);
51 
52         m_thread.exit(0);
53         m_thread.wait();
54         return;
55     }
56     closeShellProcess();
57     m_thread.exit(0);
58     m_thread.wait();
59 }
60 
61 /*!
62  * \brief DeviceShell::runInShell
63  * \param cmd The command to run
64  * \param stdInData Data to send to the stdin of the command
65  * \return true if the command finished with EXIT_SUCCESS(0)
66  *
67  * Runs the cmd inside the internal shell process and return whether it exited with EXIT_SUCCESS
68  *
69  * Will automatically defer to the internal thread
70  */
71 bool DeviceShell::runInShell(const CommandLine &cmd, const QByteArray &stdInData)
72 {
73     if (QThread::currentThread() != &m_thread) {
74         bool result = false;
75         QMetaObject::invokeMethod(
76             this,
77             [this, &cmd, &stdInData] { return runInShellImpl(cmd, stdInData); },
78             Qt::BlockingQueuedConnection,
79             &result);
80         return result;
81     }
82     return runInShellImpl(cmd, stdInData);
83 }
84 
85 bool DeviceShell::runInShellImpl(const CommandLine &cmd, const QByteArray &stdInData)
86 {
87     QTC_ASSERT(QThread::currentThread() == &m_thread, return false);
88 
89     QTC_ASSERT(m_shellProcess, return false);
90     QTC_CHECK(m_shellProcess->readAllStandardOutput().isNull()); // clean possible left-overs
91     QTC_CHECK(m_shellProcess->readAllStandardError().isNull());  // clean possible left-overs
92     auto cleanup = qScopeGuard(
93         [this] { m_shellProcess->readAllStandardOutput(); }); // clean on assert
94 
95     QString prefix;
96     if (!stdInData.isEmpty())
97         prefix = "echo '" + QString::fromUtf8(stdInData.toBase64()) + "' | base64 -d | ";
98 
99     const QString suffix = " > /dev/null 2>&1\necho $?\n";
100     const QString command = prefix + cmd.toUserOutput() + suffix;
101 
102     qCDebug(deviceShellLog) << "Running:" << command;
103 
104     m_shellProcess->write(command);
105     m_shellProcess->waitForReadyRead();
106 
107     const QByteArray output = m_shellProcess->readAllStandardOutput();
108 
109     bool ok = false;
110     const int result = output.toInt(&ok);
111 
112     qCInfo(deviceShellLog) << "Run command in shell:" << cmd.toUserOutput() << "result: " << output
113                            << " ==>" << result;
114     QTC_ASSERT(ok, return false);
115 
116     return result == EXIT_SUCCESS;
117 }
118 
119 /*!
120  * \brief DeviceShell::outputForRunInShell
121  * \param cmd The command to run
122  * \param stdInData Data to send to the stdin of the command
123  * \return The stdout of the command
124  *
125  * Runs a command inside the running shell and returns the stdout that was generated by it.
126  *
127  * Will automatically defer to the internal thread
128  */
129 DeviceShell::RunResult DeviceShell::outputForRunInShell(const CommandLine &cmd,
130                                                         const QByteArray &stdInData)
131 {
132     if (QThread::currentThread() != &m_thread) {
133         RunResult result;
134         QMetaObject::invokeMethod(
135             this,
136             [this, &cmd, &stdInData] { return outputForRunInShellImpl(cmd, stdInData); },
137             Qt::BlockingQueuedConnection,
138             &result);
139         return result;
140     }
141     return outputForRunInShellImpl(cmd, stdInData);
142 }
143 
144 bool DeviceShell::waitForStarted()
145 {
146     if (QThread::currentThread() != &m_thread) {
147         bool result;
148         QMetaObject::invokeMethod(
149             this, [this] { return waitForStarted(); }, Qt::BlockingQueuedConnection, &result);
150         return result;
151     }
152     QTC_ASSERT(m_shellProcess, return false);
153     return m_shellProcess->waitForStarted();
154 }
155 
156 DeviceShell::RunResult DeviceShell::outputForRunInShellImpl(const CommandLine &cmd,
157                                                             const QByteArray &stdInData)
158 {
159     QTC_ASSERT(QThread::currentThread() == &m_thread, return {});
160 
161     QTC_ASSERT(m_shellProcess, return {});
162     QTC_CHECK(m_shellProcess->readAllStandardOutput().isNull()); // clean possible left-overs
163     QTC_CHECK(m_shellProcess->readAllStandardError().isNull());  // clean possible left-overs
164     auto cleanup = qScopeGuard(
165         [this] { m_shellProcess->readAllStandardOutput(); }); // clean on assert
166 
167     QString prefix;
168     if (!stdInData.isEmpty())
169         prefix = "echo '" + QString::fromUtf8(stdInData.toBase64()) + "' | base64 -d | ";
170 
171     const QString markerCmd = "echo __qtc$?qtc__ 1>&2\n";
172     const QString suffix = "\n" + markerCmd;
173     const QString command = prefix + cmd.toUserOutput() + suffix;
174 
175     qCDebug(deviceShellLog) << "Running:" << command;
176     m_shellProcess->write(command);
177 
178     RunResult result;
179 
180     while (true) {
181         m_shellProcess->waitForReadyRead();
182         QByteArray stdErr = m_shellProcess->readAllStandardError();
183         if (stdErr.endsWith("qtc__\n")) {
184             QByteArray marker = stdErr.right(stdErr.length() - stdErr.lastIndexOf("__qtc"));
185             QByteArray exitCodeStr = marker.mid(5, marker.length() - 11);
186             bool ok = false;
187             const int exitCode = exitCodeStr.toInt(&ok);
188 
189             result.stdOutput = m_shellProcess->readAllStandardOutput();
190             result.exitCode = ok ? exitCode : -1;
191             break;
192         }
193     }
194 
195     //const QByteArray output = m_shellProcess->readAllStandardOutput();
196     qCDebug(deviceShellLog) << "Received output:" << result.stdOutput;
197     qCInfo(deviceShellLog) << "Run command in shell:" << cmd.toUserOutput()
198                            << "output size:" << result.stdOutput.size()
199                            << "exit code:" << result.exitCode;
200     return result;
201 }
202 
203 /*!
204  * \brief DeviceShell::startCommandLine
205  * \return The command line to start
206  *
207  * Override this function to define the command to run.
208  * Defaults to "bash"
209  */
210 CommandLine DeviceShell::startCommandLine()
211 {
212     return CommandLine{"bash"};
213 }
214 
215 /*!
216  * \brief DeviceShell::prepareShellProcess
217  *
218  * Override to configure the process before it is started.
219  */
220 void DeviceShell::prepareShellProcess(QtcProcess *) {}
221 
222 /*!
223  * \brief DeviceShell::startupFailed
224  *
225  * Override to display custom error messages
226  */
227 void DeviceShell::startupFailed(const CommandLine &cmdLine)
228 {
229     qCDebug(deviceShellLog) << "Failed to start shell via:" << cmdLine.toUserOutput();
230 }
231 
232 void DeviceShell::close()
233 {
234     if (QThread::currentThread() != &m_thread) {
235         QMetaObject::invokeMethod(
236             this, [this] { return closeShellProcess(); }, Qt::BlockingQueuedConnection);
237         return;
238     }
239     closeShellProcess();
240 }
241 
242 bool DeviceShell::start()
243 {
244     closeShellProcess();
245 
246     m_thread.setObjectName(threadName());
247 
248     m_shellProcess.reset(new QtcProcess(this));
249     connect(m_shellProcess.get(), &QtcProcess::done, this, &DeviceShell::done);
250     connect(m_shellProcess.get(), &QtcProcess::errorOccurred, this, &DeviceShell::errorOccurred);
251 
252     prepareShellProcess(m_shellProcess.get());
253     CommandLine shellStartCommand = startCommandLine();
254 
255     m_shellProcess->setCommand(shellStartCommand);
256     m_shellProcess->setProcessMode(ProcessMode::Writer);
257     m_shellProcess->setWriteData("echo\n");
258     m_shellProcess->start();
259 
260     if (!m_shellProcess->waitForStarted() || !m_shellProcess->waitForReadyRead()
261         || m_shellProcess->readAllStandardOutput() != "\n") {
262         closeShellProcess();
263         startupFailed(shellStartCommand);
264         return false;
265     }
266 
267     // TODO: Check if necessary tools are available ( e.g. base64, /bin/sh etc. )
268 
269     return true;
270 }
271 
272 void DeviceShell::closeShellProcess()
273 {
274     if (m_shellProcess && m_shellProcess->isRunning()) {
275         m_shellProcess->write("exit\n");
276         if (!m_shellProcess->waitForFinished(2000))
277             m_shellProcess->terminate();
278     }
279     m_shellProcess.reset();
280 }
281 
282 } // namespace Utils
