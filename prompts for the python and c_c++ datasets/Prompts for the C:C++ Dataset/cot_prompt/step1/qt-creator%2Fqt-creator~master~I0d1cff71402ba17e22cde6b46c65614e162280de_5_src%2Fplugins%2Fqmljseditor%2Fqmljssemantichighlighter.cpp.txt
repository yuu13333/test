Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
qmljs: update parser

Update the qtcreator qmljs parser to the
one of Qt 5.12. It supports EcmaScript 7.

Task-number: QTCREATORBUG-20341
Change-Id: I0d1cff71402ba17e22cde6b46c65614e162280de
Reviewed-by: Erik Verbruggen <erik.verbruggen@qt.io>

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "qmljssemantichighlighter.h"
27 
28 #include "qmljseditordocument.h"
29 
30 #include <qmljs/qmljsdocument.h>
31 #include <qmljs/qmljsscopechain.h>
32 #include <qmljs/qmljsscopebuilder.h>
33 #include <qmljs/qmljsevaluate.h>
34 #include <qmljs/qmljscontext.h>
35 #include <qmljs/qmljsbind.h>
36 #include <qmljs/qmljsutils.h>
37 #include <qmljs/parser/qmljsast_p.h>
38 #include <qmljs/parser/qmljsastvisitor_p.h>
39 #include <qmljs/qmljsstaticanalysismessage.h>
40 #include <texteditor/syntaxhighlighter.h>
41 #include <texteditor/textdocument.h>
42 #include <texteditor/texteditorconstants.h>
43 #include <texteditor/texteditorsettings.h>
44 #include <texteditor/fontsettings.h>
45 #include <utils/algorithm.h>
46 #include <utils/qtcassert.h>
47 #include <utils/runextensions.h>
48 
49 #include <QTextDocument>
50 #include <QThreadPool>
51 
52 using namespace QmlJS;
53 using namespace QmlJS::AST;
54 
55 namespace QmlJSEditor {
56 
57 using namespace Internal;
58 
59 namespace {
60 
61 static bool isIdScope(const ObjectValue *scope, const QList<const QmlComponentChain *> &chain)
62 {
63     foreach (const QmlComponentChain *c, chain) {
64         if (c->idScope() == scope)
65             return true;
66         if (isIdScope(scope, c->instantiatingComponents()))
67             return true;
68     }
69     return false;
70 }
71 
72 class CollectStateNames : protected Visitor
73 {
74     QStringList m_stateNames;
75     bool m_inStateType;
76     ScopeChain m_scopeChain;
77     const CppComponentValue *m_statePrototype;
78 
79 public:
80     CollectStateNames(const ScopeChain &scopeChain)
81         : m_scopeChain(scopeChain)
82     {
83         m_statePrototype = scopeChain.context()->valueOwner()->cppQmlTypes().objectByCppName(QLatin1String("QDeclarativeState"));
84     }
85 
86     QStringList operator()(Node *ast)
87     {
88         m_stateNames.clear();
89         if (!m_statePrototype)
90             return m_stateNames;
91         m_inStateType = false;
92         accept(ast);
93         return m_stateNames;
94     }
95 
96 protected:
97     void accept(Node *ast)
98     {
99         if (ast)
100             ast->accept(this);
101     }
102 
103     bool preVisit(Node *ast)
104     {
105         return ast->uiObjectMemberCast()
106                 || cast<UiProgram *>(ast)
107                 || cast<UiObjectInitializer *>(ast)
108                 || cast<UiObjectMemberList *>(ast)
109                 || cast<UiArrayMemberList *>(ast);
110     }
111 
112     bool hasStatePrototype(Node *ast)
113     {
114         Bind *bind = m_scopeChain.document()->bind();
115         const ObjectValue *v = bind->findQmlObject(ast);
116         if (!v)
117             return false;
118         PrototypeIterator it(v, m_scopeChain.context());
119         while (it.hasNext()) {
120             const ObjectValue *proto = it.next();
121             const CppComponentValue *qmlProto = value_cast<CppComponentValue>(proto);
122             if (!qmlProto)
123                 continue;
124             if (qmlProto->metaObject() == m_statePrototype->metaObject())
125                 return true;
126         }
127         return false;
128     }
129 
130     bool visit(UiObjectDefinition *ast)
131     {
132         const bool old = m_inStateType;
133         m_inStateType = hasStatePrototype(ast);
134         accept(ast->initializer);
135         m_inStateType = old;
136         return false;
137     }
138 
139     bool visit(UiObjectBinding *ast)
140     {
141         const bool old = m_inStateType;
142         m_inStateType = hasStatePrototype(ast);
143         accept(ast->initializer);
144         m_inStateType = old;
145         return false;
146     }
147 
148     bool visit(UiScriptBinding *ast)
149     {
150         if (!m_inStateType)
151             return false;
152         if (!ast->qualifiedId || ast->qualifiedId->name.isEmpty() || ast->qualifiedId->next)
153             return false;
154         if (ast->qualifiedId->name != QLatin1String("name"))
155             return false;
156 
157         ExpressionStatement *expStmt = cast<ExpressionStatement *>(ast->statement);
158         if (!expStmt)
159             return false;
160         StringLiteral *strLit = cast<StringLiteral *>(expStmt->expression);
161         if (!strLit || strLit->value.isEmpty())
162             return false;
163 
164         m_stateNames += strLit->value.toString();
165 
166         return false;
167     }
168 };
169 
170 class CollectionTask : protected Visitor
171 {
172 public:
173     CollectionTask(QFutureInterface<SemanticHighlighter::Use> futureInterface,
174                    const QmlJSTools::SemanticInfo &semanticInfo)
175         : m_futureInterface(futureInterface)
176         , m_semanticInfo(semanticInfo)
177         , m_scopeChain(semanticInfo.scopeChain())
178         , m_scopeBuilder(&m_scopeChain)
179         , m_lineOfLastUse(0)
180         , m_nextExtraFormat(SemanticHighlighter::Max)
181         , m_currentDelayedUse(0)
182     {
183         int nMessages = 0;
184         if (m_scopeChain.document()->language().isFullySupportedLanguage()) {
185             nMessages = m_scopeChain.document()->diagnosticMessages().size()
186                     + m_semanticInfo.semanticMessages.size()
187                     + m_semanticInfo.staticAnalysisMessages.size();
188             m_delayedUses.reserve(nMessages);
189             m_diagnosticRanges.reserve(nMessages);
190             m_extraFormats.reserve(nMessages);
191             addMessages(m_scopeChain.document()->diagnosticMessages(), m_scopeChain.document());
192             addMessages(m_semanticInfo.semanticMessages, m_semanticInfo.document);
193             addMessages(m_semanticInfo.staticAnalysisMessages, m_semanticInfo.document);
194 
195             Utils::sort(m_delayedUses, sortByLinePredicate);
196         }
197         m_currentDelayedUse = 0;
198     }
199 
200     QVector<QTextLayout::FormatRange> diagnosticRanges()
201     {
202         return m_diagnosticRanges;
203     }
204 
205     QHash<int, QTextCharFormat> extraFormats()
206     {
207         return m_extraFormats;
208     }
209 
210     void run()
211     {
212         Node *root = m_scopeChain.document()->ast();
213         m_stateNames = CollectStateNames(m_scopeChain)(root);
214         accept(root);
215         while (m_currentDelayedUse < m_delayedUses.size())
216             m_uses.append(m_delayedUses.value(m_currentDelayedUse++));
217         flush();
218     }
219 
220 protected:
221     void accept(Node *ast)
222     {
223         if (ast)
224             ast->accept(this);
225     }
226 
227     void scopedAccept(Node *ast, Node *child)
228     {
229         m_scopeBuilder.push(ast);
230         accept(child);
231         m_scopeBuilder.pop();
232     }
233 
234     void processName(const QStringRef &name, SourceLocation location)
235     {
236         if (name.isEmpty())
237             return;
238 
239         const QString &nameStr = name.toString();
240         const ObjectValue *scope = 0;
241         const Value *value = m_scopeChain.lookup(nameStr, &scope);
242         if (!value || !scope)
243             return;
244 
245         SemanticHighlighter::UseType type = SemanticHighlighter::UnknownType;
246         if (m_scopeChain.qmlTypes() == scope) {
247             type = SemanticHighlighter::QmlTypeType;
248         } else if (m_scopeChain.qmlScopeObjects().contains(scope)) {
249             type = SemanticHighlighter::ScopeObjectPropertyType;
250         } else if (m_scopeChain.jsScopes().contains(scope)) {
251             type = SemanticHighlighter::JsScopeType;
252         } else if (m_scopeChain.jsImports() == scope) {
253             type = SemanticHighlighter::JsImportType;
254         } else if (m_scopeChain.globalScope() == scope) {
255             type = SemanticHighlighter::JsGlobalType;
256         } else if (QSharedPointer<const QmlComponentChain> chain = m_scopeChain.qmlComponentChain()) {
257             if (scope == chain->idScope()) {
258                 type = SemanticHighlighter::LocalIdType;
259             } else if (isIdScope(scope, chain->instantiatingComponents())) {
260                 type = SemanticHighlighter::ExternalIdType;
261             } else if (scope == chain->rootObjectScope()) {
262                 type = SemanticHighlighter::RootObjectPropertyType;
263             } else  { // check for this?
264                 type = SemanticHighlighter::ExternalObjectPropertyType;
265             }
266         }
267 
268         if (type != SemanticHighlighter::UnknownType)
269             addUse(location, type);
270     }
271 
272     void processTypeId(UiQualifiedId *typeId)
273     {
274         if (!typeId)
275             return;
276         if (m_scopeChain.context()->lookupType(m_scopeChain.document().data(), typeId))
277             addUse(fullLocationForQualifiedId(typeId), SemanticHighlighter::QmlTypeType);
278     }
279 
280     void processBindingName(UiQualifiedId *localId)
281     {
282         if (!localId)
283             return;
284         addUse(fullLocationForQualifiedId(localId), SemanticHighlighter::BindingNameType);
285     }
286 
287     bool visit(UiImport *ast)
288     {
289         processName(ast->importId, ast->importIdToken);
290         return true;
291     }
292 
293     bool visit(UiObjectDefinition *ast)
294     {
295         if (m_scopeChain.document()->bind()->isGroupedPropertyBinding(ast))
296             processBindingName(ast->qualifiedTypeNameId);
297         else
298             processTypeId(ast->qualifiedTypeNameId);
299         scopedAccept(ast, ast->initializer);
300         return false;
301     }
302 
303     bool visit(UiObjectBinding *ast)
304     {
305         processTypeId(ast->qualifiedTypeNameId);
306         processBindingName(ast->qualifiedId);
307         scopedAccept(ast, ast->initializer);
308         return false;
309     }
310 
311     bool visit(UiScriptBinding *ast)
312     {
313         processBindingName(ast->qualifiedId);
314         scopedAccept(ast, ast->statement);
315         return false;
316     }
317 
318     bool visit(UiArrayBinding *ast)
319     {
320         processBindingName(ast->qualifiedId);
321         return true;
322     }
323 
324     bool visit(UiPublicMember *ast)
325     {
326         if (ast->typeToken.isValid()) { // TODO: ast->isValid() ?
327             if (m_scopeChain.context()->lookupType(m_scopeChain.document().data(), QStringList(ast->memberType->name.toString())))
328                 addUse(ast->typeToken, SemanticHighlighter::QmlTypeType);
329         }
330         if (ast->identifierToken.isValid())
331             addUse(ast->identifierToken, SemanticHighlighter::BindingNameType);
332         if (ast->statement)
333             scopedAccept(ast, ast->statement);
334         if (ast->binding)
335             // this is not strictly correct for Components, as their context depends from where they
336             // are instantiated, but normally not too bad as approximation
337             scopedAccept(ast, ast->binding);
338         return false;
339     }
340 
341     bool visit(FunctionExpression *ast)
342     {
343         processName(ast->name, ast->identifierToken);
344         scopedAccept(ast, ast->body);
345         return false;
346     }
347 
348     bool visit(FunctionDeclaration *ast)
349     {
350         return visit(static_cast<FunctionExpression *>(ast));
351     }
352 
353     bool visit(PatternElement *ast)
354     {
355         if (ast->isVariableDeclaration())
356             processName(ast->bindingIdentifier, ast->identifierToken);
357         return true;
358     }
359 
360     bool visit(IdentifierExpression *ast)
361     {
362         processName(ast->name, ast->identifierToken);
363         return false;
364     }
365 
366     bool visit(StringLiteral *ast)
367     {
368         if (ast->value.isEmpty())
369             return false;
370 
371         const QString &value = ast->value.toString();
372         if (m_stateNames.contains(value))
373             addUse(ast->literalToken, SemanticHighlighter::LocalStateNameType);
374 
375         return false;
376     }
377 
378     void addMessages(QList<DiagnosticMessage> messages,
379             const Document::Ptr &doc)
380     {
381         foreach (const DiagnosticMessage &d, messages) {
382             int line = d.loc.startLine;
383             int column = qMax(1U, d.loc.startColumn);
384             int length = d.loc.length;
385             int begin = d.loc.begin();
386 
387             if (d.loc.length == 0) {
388                 QString source(doc->source());
389                 int end = begin;
390                 if (begin == source.size() || source.at(begin) == QLatin1Char('\n')
391                         || source.at(begin) == QLatin1Char('\r')) {
392                     while (begin > end - column && !source.at(--begin).isSpace()) { }
393                 } else {
394                     while (end < source.size() && source.at(++end).isLetterOrNumber()) { }
395                 }
396                 column += begin - d.loc.begin();
397                 length = end-begin;
398             }
399 
400             const TextEditor::FontSettings &fontSettings = TextEditor::TextEditorSettings::instance()->fontSettings();
401 
402             QTextCharFormat format;
403             if (d.isWarning())
404                 format = fontSettings.toTextCharFormat(TextEditor::C_WARNING);
405             else
406                 format = fontSettings.toTextCharFormat(TextEditor::C_ERROR);
407 
408             format.setToolTip(d.message);
409 
410             collectRanges(begin, length, format);
411             addDelayedUse(SemanticHighlighter::Use(line, column, length, addFormat(format)));
412         }
413     }
414 
415     void addMessages(const QList<StaticAnalysis::Message> &messages,
416                      const Document::Ptr &doc)
417     {
418         foreach (const StaticAnalysis::Message &d, messages) {
419             int line = d.location.startLine;
420             int column = qMax(1U, d.location.startColumn);
421             int length = d.location.length;
422             int begin = d.location.begin();
423 
424             if (d.location.length == 0) {
425                 QString source(doc->source());
426                 int end = begin;
427                 if (begin == source.size() || source.at(begin) == QLatin1Char('\n')
428                         || source.at(begin) == QLatin1Char('\r')) {
429                     while (begin > end - column && !source.at(--begin).isSpace()) { }
430                 } else {
431                     while (end < source.size() && source.at(++end).isLetterOrNumber()) { }
432                 }
433                 column += begin - d.location.begin();
434                 length = end-begin;
435             }
436 
437             const TextEditor::FontSettings &fontSettings = TextEditor::TextEditorSettings::instance()->fontSettings();
438 
439             QTextCharFormat format;
440             if (d.severity == Severity::Warning
441                     || d.severity == Severity::MaybeWarning
442                     || d.severity == Severity::ReadingTypeInfoWarning) {
443                 format = fontSettings.toTextCharFormat(TextEditor::C_WARNING);
444             } else if (d.severity == Severity::Error || d.severity == Severity::MaybeError) {
445                 format = fontSettings.toTextCharFormat(TextEditor::C_ERROR);
446             } else if (d.severity == Severity::Hint) {
447                 format = fontSettings.toTextCharFormat(TextEditor::C_WARNING);
448                 format.setUnderlineColor(Qt::darkGreen);
449             }
450 
451             format.setToolTip(d.message);
452 
453             collectRanges(begin, length, format);
454             addDelayedUse(SemanticHighlighter::Use(line, column, length, addFormat(format)));
455         }
456     }
457 
458 private:
459     void addUse(const SourceLocation &location, SemanticHighlighter::UseType type)
460     {
461         addUse(SemanticHighlighter::Use(location.startLine, location.startColumn, location.length, type));
462     }
463 
464     static const int chunkSize = 50;
465 
466     void addUse(const SemanticHighlighter::Use &use)
467     {
468         while (m_currentDelayedUse < m_delayedUses.size()
469                && m_delayedUses.value(m_currentDelayedUse).line < use.line)
470             m_uses.append(m_delayedUses.value(m_currentDelayedUse++));
471 
472         if (m_uses.size() >= chunkSize) {
473             if (use.line > m_lineOfLastUse)
474                 flush();
475         }
476 
477         m_lineOfLastUse = qMax(m_lineOfLastUse, use.line);
478         m_uses.append(use);
479     }
480 
481     void addDelayedUse(const SemanticHighlighter::Use &use)
482     {
483         m_delayedUses.append(use);
484     }
485 
486     int addFormat(const QTextCharFormat &format)
487     {
488         int res = m_nextExtraFormat++;
489         m_extraFormats.insert(res, format);
490         return res;
491     }
492 
493     void collectRanges(int start, int length, const QTextCharFormat &format) {
494         QTextLayout::FormatRange range;
495         range.start = start;
496         range.length = length;
497         range.format = format;
498         m_diagnosticRanges.append(range);
499     }
500 
501     static bool sortByLinePredicate(const SemanticHighlighter::Use &lhs, const SemanticHighlighter::Use &rhs)
502     {
503         return lhs.line < rhs.line;
504     }
505 
506     void flush()
507     {
508         m_lineOfLastUse = 0;
509 
510         if (m_uses.isEmpty())
511             return;
512 
513         Utils::sort(m_uses, sortByLinePredicate);
514         m_futureInterface.reportResults(m_uses);
515         m_uses.clear();
516         m_uses.reserve(chunkSize);
517     }
518 
519     QFutureInterface<SemanticHighlighter::Use> m_futureInterface;
520     const QmlJSTools::SemanticInfo &m_semanticInfo;
521     ScopeChain m_scopeChain;
522     ScopeBuilder m_scopeBuilder;
523     QStringList m_stateNames;
524     QVector<SemanticHighlighter::Use> m_uses;
525     unsigned m_lineOfLastUse;
526     QVector<SemanticHighlighter::Use> m_delayedUses;
527     int m_nextExtraFormat;
528     int m_currentDelayedUse;
529     QHash<int, QTextCharFormat> m_extraFormats;
530     QVector<QTextLayout::FormatRange> m_diagnosticRanges;
531 };
532 
533 } // anonymous namespace
534 
535 SemanticHighlighter::SemanticHighlighter(QmlJSEditorDocument *document)
536     : QObject(document)
537     , m_document(document)
538     , m_startRevision(0)
539 {
540     connect(&m_watcher, &QFutureWatcherBase::resultsReadyAt,
541             this, &SemanticHighlighter::applyResults);
542     connect(&m_watcher, &QFutureWatcherBase::finished,
543             this, &SemanticHighlighter::finished);
544 }
545 
546 void SemanticHighlighter::rerun(const QmlJSTools::SemanticInfo &semanticInfo)
547 {
548     m_watcher.cancel();
549 
550     m_startRevision = m_document->document()->revision();
551     m_watcher.setFuture(Utils::runAsync(QThread::LowestPriority,
552                                         &SemanticHighlighter::run, this, semanticInfo));
553 }
554 
555 void SemanticHighlighter::cancel()
556 {
557     m_watcher.cancel();
558 }
559 
560 void SemanticHighlighter::applyResults(int from, int to)
561 {
562     if (m_watcher.isCanceled())
563         return;
564     if (m_startRevision != m_document->document()->revision())
565         return;
566 
567     TextEditor::SemanticHighlighter::incrementalApplyExtraAdditionalFormats(
568                 m_document->syntaxHighlighter(), m_watcher.future(), from, to, m_extraFormats);
569 }
570 
571 void SemanticHighlighter::finished()
572 {
573     if (m_watcher.isCanceled())
574         return;
575     if (m_startRevision != m_document->document()->revision())
576         return;
577 
578     m_document->setDiagnosticRanges(m_diagnosticRanges);
579 
580     TextEditor::SemanticHighlighter::clearExtraAdditionalFormatsUntilEnd(
581                 m_document->syntaxHighlighter(), m_watcher.future());
582 }
583 
584 void SemanticHighlighter::run(QFutureInterface<SemanticHighlighter::Use> &futureInterface, const QmlJSTools::SemanticInfo &semanticInfo)
585 {
586     CollectionTask task(futureInterface, semanticInfo);
587     reportMessagesInfo(task.diagnosticRanges(), task.extraFormats());
588     task.run();
589 }
590 
591 void SemanticHighlighter::updateFontSettings(const TextEditor::FontSettings &fontSettings)
592 {
593     m_formats[LocalIdType] = fontSettings.toTextCharFormat(TextEditor::C_QML_LOCAL_ID);
594     m_formats[ExternalIdType] = fontSettings.toTextCharFormat(TextEditor::C_QML_EXTERNAL_ID);
595     m_formats[QmlTypeType] = fontSettings.toTextCharFormat(TextEditor::C_QML_TYPE_ID);
596     m_formats[RootObjectPropertyType] = fontSettings.toTextCharFormat(TextEditor::C_QML_ROOT_OBJECT_PROPERTY);
597     m_formats[ScopeObjectPropertyType] = fontSettings.toTextCharFormat(TextEditor::C_QML_SCOPE_OBJECT_PROPERTY);
598     m_formats[ExternalObjectPropertyType] = fontSettings.toTextCharFormat(TextEditor::C_QML_EXTERNAL_OBJECT_PROPERTY);
599     m_formats[JsScopeType] = fontSettings.toTextCharFormat(TextEditor::C_JS_SCOPE_VAR);
600     m_formats[JsImportType] = fontSettings.toTextCharFormat(TextEditor::C_JS_IMPORT_VAR);
601     m_formats[JsGlobalType] = fontSettings.toTextCharFormat(TextEditor::C_JS_GLOBAL_VAR);
602     m_formats[LocalStateNameType] = fontSettings.toTextCharFormat(TextEditor::C_QML_STATE_NAME);
603     m_formats[BindingNameType] = fontSettings.toTextCharFormat(TextEditor::C_BINDING);
604     m_formats[FieldType] = fontSettings.toTextCharFormat(TextEditor::C_FIELD);
605 }
606 
607 void SemanticHighlighter::reportMessagesInfo(const QVector<QTextLayout::FormatRange> &diagnosticRanges,
608                                              const QHash<int,QTextCharFormat> &formats)
609 
610 {
611     // tricky usage of m_extraFormats and diagnosticMessages we call this in another thread...
612     // but will use them only after a signal sent by that same thread, maybe we should transfer
613     // them more explicitly
614     m_extraFormats = formats;
615     m_extraFormats.unite(m_formats);
616     m_diagnosticRanges = diagnosticRanges;
617 }
618 
619 int SemanticHighlighter::startRevision() const
620 {
621     return m_startRevision;
622 }
623 
624 } // namespace QmlJSEditor
