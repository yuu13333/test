Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Utils: fix savefile in case we save new file (Windows)

Previous fix accidently broke saving files that do not
exist yet. They need to call rename instead of ReplaceFile.

Change-Id: Ida47845a59c1f2fe26a39dc593ab0f83fae9d18b

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "savefile.h"
27 #include "qtcassert.h"
28 #include "fileutils.h"
29 #ifdef Q_OS_WIN
30 #  include <windows.h>
31 #  include <io.h>
32 #else
33 #  include <unistd.h>
34 #  include <sys/stat.h>
35 #endif
36 
37 namespace Utils {
38 
39 QFile::Permissions SaveFile::m_umask = 0;
40 
41 SaveFile::SaveFile(const QString &filename) :
42     m_finalFileName(filename), m_finalized(true)
43 {
44 }
45 
46 SaveFile::~SaveFile()
47 {
48     QTC_ASSERT(m_finalized, rollback());
49 }
50 
51 bool SaveFile::open(OpenMode flags)
52 {
53     QTC_ASSERT(!m_finalFileName.isEmpty(), return false);
54 
55     QFile ofi(m_finalFileName);
56     // Check whether the existing file is writable
57     if (ofi.exists() && !ofi.open(QIODevice::ReadWrite)) {
58         setErrorString(ofi.errorString());
59         return false;
60     }
61 
62     m_tempFile = std::make_unique<QTemporaryFile>(m_finalFileName);
63     m_tempFile->setAutoRemove(false);
64     m_tempFile->open();
65     setFileName(m_tempFile->fileName());
66 
67     if (!QFile::open(flags))
68         return false;
69 
70     m_finalized = false; // needs clean up in the end
71     if (ofi.exists()) {
72         setPermissions(ofi.permissions()); // Ignore errors
73     } else {
74         Permissions permAll = QFile::ReadOwner
75                 | QFile::ReadGroup
76                 | QFile::ReadOther
77                 | QFile::WriteOwner
78                 | QFile::WriteGroup
79                 | QFile::WriteOther;
80 
81         // set permissions with respect to the current umask
82         setPermissions(permAll & ~m_umask);
83     }
84 
85     return true;
86 }
87 
88 void SaveFile::rollback()
89 {
90     close();
91     if (m_tempFile)
92         m_tempFile->remove();
93     m_finalized = true;
94 }
95 
96 bool SaveFile::commit()
97 {
98     QTC_ASSERT(!m_finalized && m_tempFile, return false;);
99     m_finalized = true;
100 
101     if (!flush()) {
102         close();
103         m_tempFile->remove();
104         return false;
105     }
106 #ifdef Q_OS_WIN
107     FlushFileBuffers(reinterpret_cast<HANDLE>(_get_osfhandle(handle())));
108 #elif _POSIX_SYNCHRONIZED_IO > 0
109     fdatasync(handle());
110 #else
111     fsync(handle());
112 #endif
113     close();
114     m_tempFile->close();
115     if (error() != NoError) {
116         m_tempFile->remove();
117         return false;
118     }
119 
120     QString finalFileName
121             = FileUtils::resolveSymlinks(FileName::fromString(m_finalFileName)).toString();
122 
123 #ifdef Q_OS_WIN
124     // Release the file lock
125     m_tempFile.reset();
126     bool result = false;
127     if (!QFile::exists(finalFileName)) {
128         result = rename(finalFileName);
129     } else {
130         result = ReplaceFile(finalFileName.toStdWString().data(),
131                              fileName().toStdWString().data(),
132                              nullptr, 0, nullptr, nullptr);
133         if (!result) {
134             wchar_t messageBuffer[256];
135             FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
136                            nullptr, GetLastError(),
137                            MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
138                            messageBuffer, sizeof(messageBuffer), nullptr);
139             setErrorString(QString::fromWCharArray(messageBuffer));
140             remove();
141         }
142     }
143     return result;
144 #else
145     const QString backupName = finalFileName + '~';
146 
147     // Back up current file.
148     // If it's opened by another application, the lock follows the move.
149     if (QFile::exists(finalFileName)) {
150         // Kill old backup. Might be useful if creator crashed before removing backup.
151         QFile::remove(backupName);
152         QFile finalFile(finalFileName);
153         if (!finalFile.rename(backupName)) {
154             m_tempFile->remove();
155             setErrorString(finalFile.errorString());
156             return false;
157         }
158     }
159 
160     bool result = true;
161     if (!m_tempFile->rename(finalFileName)) {
162         // The case when someone else was able to create finalFileName after we've renamed it.
163         // Higher level call may try to save this file again but here we do nothing and
164         // return false while keeping the error string from last rename call.
165         const QString &renameError = m_tempFile->errorString();
166         m_tempFile->remove();
167         setErrorString(renameError);
168         result = false;
169     }
170 
171     QFile::remove(backupName);
172 
173     return result;
174 #endif
175 }
176 
177 void SaveFile::initializeUmask()
178 {
179 #ifdef Q_OS_WIN
180     m_umask = QFile::WriteGroup | QFile::WriteOther;
181 #else
182     // Get the current process' file creation mask (umask)
183     // umask() is not thread safe so this has to be done by single threaded
184     // application initialization
185     mode_t mask = umask(0); // get current umask
186     umask(mask); // set it back
187 
188     m_umask = ((mask & S_IRUSR) ? QFile::ReadOwner  : QFlags<QFile::Permission>(0))
189             | ((mask & S_IWUSR) ? QFile::WriteOwner : QFlags<QFile::Permission>(0))
190             | ((mask & S_IXUSR) ? QFile::ExeOwner   : QFlags<QFile::Permission>(0))
191             | ((mask & S_IRGRP) ? QFile::ReadGroup  : QFlags<QFile::Permission>(0))
192             | ((mask & S_IWGRP) ? QFile::WriteGroup : QFlags<QFile::Permission>(0))
193             | ((mask & S_IXGRP) ? QFile::ExeGroup   : QFlags<QFile::Permission>(0))
194             | ((mask & S_IROTH) ? QFile::ReadOther  : QFlags<QFile::Permission>(0))
195             | ((mask & S_IWOTH) ? QFile::WriteOther : QFlags<QFile::Permission>(0))
196             | ((mask & S_IXOTH) ? QFile::ExeOther   : QFlags<QFile::Permission>(0));
197 #endif
198 }
199 
200 } // namespace Utils
