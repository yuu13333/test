Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Fix processlauncher for tests

The socket/name for QLocalServer must be a path that is short enough for
unix sockets (<= 104 chars).

QLocalServer already ensures that the "name" is an absolute path, by
prepending QDir::tempPath() if it isn't. For Qt Creator that worked, but
the temporary directory set up for the unittests resulted in a too long
combined path.

Also, we should avoid directly using QDir::tempPath() and use
Utils::TemporaryDirectory to keep all our temporary files at one place.

So, make the "name" explicitly an absolute path in our specific
temporary directory, and make the name shorter for the test.

See 6feed6e656f250b8783f80341e81a5c87ec7ef6c for a similar issue.

Change-Id: I07dc4233db1c9d353cd6977da43850256057ba55
Reviewed-by: Jarek Kobus <jaroslaw.kobus@qt.io>
Reviewed-by: <github-actions-qt-creator@cristianadam.eu>
Reviewed-by: hjk <hjk@qt.io>

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2021 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "launcherinterface.h"
27 
28 #include "filepath.h"
29 #include "launcherpackets.h"
30 #include "launchersocket.h"
31 #include "qtcassert.h"
32 #include "temporarydirectory.h"
33 
34 #include <QCoreApplication>
35 #include <QDebug>
36 #include <QDir>
37 #include <QLocalServer>
38 #include <QProcess>
39 
40 #ifdef Q_OS_UNIX
41 #include <unistd.h>
42 #endif
43 
44 namespace Utils {
45 namespace Internal {
46 
47 class LauncherProcess : public QProcess
48 {
49 public:
50     LauncherProcess(QObject *parent) : QProcess(parent)
51     {
52 #if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0) && defined(Q_OS_UNIX)
53         setChildProcessModifier([this] { setupChildProcess_impl(); });
54 #endif
55     }
56 
57 private:
58 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
59     void setupChildProcess() override
60     {
61         setupChildProcess_impl();
62     }
63 #endif
64 
65     void setupChildProcess_impl()
66     {
67 #ifdef Q_OS_UNIX
68         const auto pid = static_cast<pid_t>(processId());
69         setpgid(pid, pid);
70 #endif
71     }
72 };
73 
74 static QString launcherSocketName()
75 {
76     return Utils::TemporaryDirectory::masterDirectoryPath()
77            + QStringLiteral("/launcher-%1").arg(QString::number(qApp->applicationPid()));
78 }
79 
80 class LauncherInterfacePrivate : public QObject
81 {
82     Q_OBJECT
83 public:
84     LauncherInterfacePrivate();
85     ~LauncherInterfacePrivate() override;
86 
87     void doStart();
88     void doStop();
89     void handleNewConnection();
90     void handleProcessError();
91     void handleProcessFinished();
92     void handleProcessStderr();
93     Internal::LauncherSocket *socket() const { return m_socket; }
94 
95     void setPathToLauncher(const QString &path) { if (!path.isEmpty()) m_pathToLauncher = path; }
96     QString launcherFilePath() const { return m_pathToLauncher + QLatin1String("/qtcreator_processlauncher"); }
97 signals:
98     void errorOccurred(const QString &error);
99 
100 private:
101     QLocalServer * const m_server;
102     Internal::LauncherSocket *const m_socket;
103     Internal::LauncherProcess *m_process = nullptr;
104     QString m_pathToLauncher;
105 };
106 
107 LauncherInterfacePrivate::LauncherInterfacePrivate()
108     : m_server(new QLocalServer(this)), m_socket(new LauncherSocket(this))
109 {
110     m_pathToLauncher = qApp->applicationDirPath() + '/' + QLatin1String(RELATIVE_LIBEXEC_PATH);
111     QObject::connect(m_server, &QLocalServer::newConnection,
112                      this, &LauncherInterfacePrivate::handleNewConnection);
113 }
114 
115 LauncherInterfacePrivate::~LauncherInterfacePrivate()
116 {
117     m_server->disconnect();
118 }
119 
120 void LauncherInterfacePrivate::doStart()
121 {
122     const QString &socketName = launcherSocketName();
123     QLocalServer::removeServer(socketName);
124     if (!m_server->listen(socketName)) {
125         emit errorOccurred(m_server->errorString());
126         return;
127     }
128     m_process = new LauncherProcess(this);
129     connect(m_process, &QProcess::errorOccurred, this, &LauncherInterfacePrivate::handleProcessError);
130     connect(m_process,
131             static_cast<void (QProcess::*)(int, QProcess::ExitStatus)>(&QProcess::finished),
132             this, &LauncherInterfacePrivate::handleProcessFinished);
133     connect(m_process, &QProcess::readyReadStandardError,
134             this, &LauncherInterfacePrivate::handleProcessStderr);
135     m_process->start(launcherFilePath(), QStringList(m_server->fullServerName()));
136 }
137 
138 void LauncherInterfacePrivate::doStop()
139 {
140     m_server->close();
141     if (!m_process)
142         return;
143     m_process->disconnect();
144     m_socket->shutdown();
145     m_process->waitForFinished(3000);
146     ProcessReaper::reap(m_process);
147     m_process = nullptr;
148 }
149 
150 void LauncherInterfacePrivate::handleNewConnection()
151 {
152     QLocalSocket * const socket = m_server->nextPendingConnection();
153     if (!socket)
154         return;
155     m_server->close();
156     m_socket->setSocket(socket);
157 }
158 
159 void LauncherInterfacePrivate::handleProcessError()
160 {
161     if (m_process->error() == QProcess::FailedToStart) {
162         const QString launcherPathForUser
163                 = QDir::toNativeSeparators(QDir::cleanPath(m_process->program()));
164         emit errorOccurred(QCoreApplication::translate("Utils::LauncherSocket",
165                            "Failed to start process launcher at \"%1\": %2")
166                            .arg(launcherPathForUser, m_process->errorString()));
167     }
168 }
169 
170 void LauncherInterfacePrivate::handleProcessFinished()
171 {
172     emit errorOccurred(QCoreApplication::translate("Utils::LauncherSocket",
173                        "Process launcher closed unexpectedly: %1")
174                        .arg(m_process->errorString()));
175 }
176 
177 void LauncherInterfacePrivate::handleProcessStderr()
178 {
179     qDebug() << "[launcher]" << m_process->readAllStandardError();
180 }
181 
182 } // namespace Internal
183 
184 using namespace Utils::Internal;
185 
186 static QMutex s_instanceMutex;
187 static QString s_pathToLauncher;
188 static std::atomic_bool s_started = false;
189 
190 LauncherInterface::LauncherInterface()
191     : m_private(new LauncherInterfacePrivate())
192 {
193     m_private->moveToThread(&m_thread);
194     QObject::connect(&m_thread, &QThread::finished, m_private, &QObject::deleteLater);
195     m_thread.start();
196     m_thread.moveToThread(qApp->thread());
197 
198     m_private->setPathToLauncher(s_pathToLauncher);
199     const FilePath launcherFilePath = FilePath::fromString(m_private->launcherFilePath())
200             .cleanPath().withExecutableSuffix();
201     auto launcherIsNotExecutable = [&launcherFilePath]() {
202         qWarning() << "The Creator's process launcher"
203                    << launcherFilePath << "is not executable.";
204     };
205     QTC_ASSERT(launcherFilePath.isExecutableFile(), launcherIsNotExecutable(); return);
206     s_started = true;
207     // Call in launcher's thread.
208     QMetaObject::invokeMethod(m_private, &LauncherInterfacePrivate::doStart);
209 }
210 
211 LauncherInterface::~LauncherInterface()
212 {
213     QMutexLocker locker(&s_instanceMutex);
214     LauncherInterfacePrivate *p = instance()->m_private;
215     // Call in launcher's thread.
216     QMetaObject::invokeMethod(p, &LauncherInterfacePrivate::doStop, Qt::BlockingQueuedConnection);
217     m_thread.quit();
218     m_thread.wait();
219 }
220 
221 void LauncherInterface::setPathToLauncher(const QString &pathToLauncher)
222 {
223     s_pathToLauncher = pathToLauncher;
224 }
225 
226 bool LauncherInterface::isStarted()
227 {
228     return s_started;
229 }
230 
231 bool LauncherInterface::isReady()
232 {
233     QMutexLocker locker(&s_instanceMutex);
234     return instance()->m_private->socket()->isReady();
235 }
236 
237 void LauncherInterface::sendData(const QByteArray &data)
238 {
239     QMutexLocker locker(&s_instanceMutex);
240     instance()->m_private->socket()->sendData(data);
241 }
242 
243 Utils::Internal::CallerHandle *LauncherInterface::registerHandle(QObject *parent, quintptr token,
244                                                                  ProcessMode mode)
245 {
246     QMutexLocker locker(&s_instanceMutex);
247     return instance()->m_private->socket()->registerHandle(parent, token, mode);
248 }
249 
250 void LauncherInterface::unregisterHandle(quintptr token)
251 {
252     QMutexLocker locker(&s_instanceMutex);
253     instance()->m_private->socket()->unregisterHandle(token);
254 }
255 
256 } // namespace Utils
257 
258 #include "launcherinterface.moc"
