Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Do not update actions for extra windows on shutdown

At shutdown this is unneeded, and since the corresponding actions can be
deleted before the windows are handled, accessing the actions in this
state can crash.

Fix-up of 1b0d6e3c26c5dc54c6eae3cb21dc36a22ab1274c which started
deleting the actions in the first place.

Change-Id: I2e335887fa4b85b29bdaa2c908ec643b6abf3231
Fixes: QTCREATORBUG-21221

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "windowsupport.h"
27 
28 #include "actionmanager/actioncontainer.h"
29 #include "actionmanager/actionmanager.h"
30 #include "actionmanager/command.h"
31 #include "coreconstants.h"
32 #include "icore.h"
33 
34 #include <app/app_version.h>
35 #include <utils/hostosinfo.h>
36 #include <utils/qtcassert.h>
37 #include <utils/stringutils.h>
38 
39 #include <QAction>
40 #include <QEvent>
41 #include <QMenu>
42 #include <QWidget>
43 
44 namespace Core {
45 namespace Internal {
46 
47 
48 QMenu *WindowList::m_dockMenu = nullptr;
49 QList<QWidget *> WindowList::m_windows;
50 QList<QAction *> WindowList::m_windowActions;
51 QList<Id> WindowList::m_windowActionIds;
52 
53 WindowSupport::WindowSupport(QWidget *window, const Context &context)
54     : QObject(window),
55       m_window(window)
56 {
57     m_window->installEventFilter(this);
58 
59     m_contextObject = new IContext(this);
60     m_contextObject->setWidget(window);
61     m_contextObject->setContext(context);
62     ICore::addContextObject(m_contextObject);
63 
64     if (useMacShortcuts) {
65         m_minimizeAction = new QAction(this);
66         ActionManager::registerAction(m_minimizeAction, Constants::MINIMIZE_WINDOW, context);
67         connect(m_minimizeAction, &QAction::triggered, m_window, &QWidget::showMinimized);
68 
69         m_zoomAction = new QAction(this);
70         ActionManager::registerAction(m_zoomAction, Constants::ZOOM_WINDOW, context);
71         connect(m_zoomAction, &QAction::triggered, m_window, &QWidget::showMaximized);
72 
73         m_closeAction = new QAction(this);
74         ActionManager::registerAction(m_closeAction, Constants::CLOSE_WINDOW, context);
75         connect(m_closeAction, &QAction::triggered, m_window, &QWidget::close, Qt::QueuedConnection);
76     }
77 
78     m_toggleFullScreenAction = new QAction(this);
79     updateFullScreenAction();
80     ActionManager::registerAction(m_toggleFullScreenAction, Constants::TOGGLE_FULLSCREEN, context);
81     connect(m_toggleFullScreenAction, &QAction::triggered, this, &WindowSupport::toggleFullScreen);
82 
83     WindowList::addWindow(window);
84 
85     connect(ICore::instance(), &ICore::coreAboutToClose, this, [this]() { m_shutdown = true; });
86 }
87 
88 WindowSupport::~WindowSupport()
89 {
90     if (!m_shutdown) { // don't update all that stuff if we are shutting down anyhow
91         if (useMacShortcuts) {
92             ActionManager::unregisterAction(m_minimizeAction, Constants::MINIMIZE_WINDOW);
93             ActionManager::unregisterAction(m_zoomAction, Constants::ZOOM_WINDOW);
94             ActionManager::unregisterAction(m_closeAction, Constants::CLOSE_WINDOW);
95         }
96         ActionManager::unregisterAction(m_toggleFullScreenAction, Constants::TOGGLE_FULLSCREEN);
97         ICore::removeContextObject(m_contextObject);
98         WindowList::removeWindow(m_window);
99     }
100 }
101 
102 void WindowSupport::setCloseActionEnabled(bool enabled)
103 {
104     if (useMacShortcuts)
105         m_closeAction->setEnabled(enabled);
106 }
107 
108 bool WindowSupport::eventFilter(QObject *obj, QEvent *event)
109 {
110     if (obj != m_window || m_shutdown)
111         return false;
112     if (event->type() == QEvent::WindowStateChange) {
113         if (Utils::HostOsInfo::isMacHost()) {
114             bool minimized = m_window->isMinimized();
115             m_minimizeAction->setEnabled(!minimized);
116             m_zoomAction->setEnabled(!minimized);
117         }
118         updateFullScreenAction();
119     } else if (event->type() == QEvent::WindowActivate) {
120         WindowList::setActiveWindow(m_window);
121     } else if (event->type() == QEvent::Hide) {
122         // minimized windows are hidden, but we still want to show them
123         WindowList::setWindowVisible(m_window, m_window->isMinimized());
124     } else if (event->type() == QEvent::Show) {
125         WindowList::setWindowVisible(m_window, true);
126     }
127     return false;
128 }
129 
130 void WindowSupport::toggleFullScreen()
131 {
132     if (m_window->isFullScreen()) {
133         m_window->setWindowState(m_window->windowState() & ~Qt::WindowFullScreen);
134     } else {
135         m_window->setWindowState(m_window->windowState() | Qt::WindowFullScreen);
136     }
137 }
138 
139 void WindowSupport::updateFullScreenAction()
140 {
141     if (m_window->isFullScreen()) {
142         if (Utils::HostOsInfo::isMacHost())
143             m_toggleFullScreenAction->setText(tr("Exit Full Screen"));
144         else
145             m_toggleFullScreenAction->setChecked(true);
146     } else {
147         if (Utils::HostOsInfo::isMacHost())
148             m_toggleFullScreenAction->setText(tr("Enter Full Screen"));
149         else
150             m_toggleFullScreenAction->setChecked(false);
151     }
152 }
153 
154 void WindowList::addWindow(QWidget *window)
155 {
156 #ifdef Q_OS_OSX
157     if (!m_dockMenu) {
158         m_dockMenu = new QMenu;
159         m_dockMenu->setAsDockMenu();
160     }
161 #endif
162 
163     m_windows.append(window);
164     Id id = Id("QtCreator.Window.").withSuffix(m_windows.size());
165     m_windowActionIds.append(id);
166     auto action = new QAction(window->windowTitle(), ActionManager::instance());
167     m_windowActions.append(action);
168     QObject::connect(action, &QAction::triggered, [action]() { WindowList::activateWindow(action); });
169     action->setCheckable(true);
170     action->setChecked(false);
171     Command *cmd = ActionManager::registerAction(action, id);
172     cmd->setAttribute(Command::CA_UpdateText);
173     ActionManager::actionContainer(Constants::M_WINDOW)->addAction(cmd, Constants::G_WINDOW_LIST);
174     action->setVisible(window->isVisible() || window->isMinimized()); // minimized windows are hidden but should be shown
175     QObject::connect(window, &QWidget::windowTitleChanged, [window]() { WindowList::updateTitle(window); });
176     if (m_dockMenu)
177         m_dockMenu->addAction(action);
178     if (window->isActiveWindow())
179         setActiveWindow(window);
180 }
181 
182 void WindowList::activateWindow(QAction *action)
183 {
184     int index = m_windowActions.indexOf(action);
185     QTC_ASSERT(index >= 0, return);
186     QTC_ASSERT(index < m_windows.size(), return);
187     ICore::raiseWindow(m_windows.at(index));
188 }
189 
190 void WindowList::updateTitle(QWidget *window)
191 {
192     int index = m_windows.indexOf(window);
193     QTC_ASSERT(index >= 0, return);
194     QTC_ASSERT(index < m_windowActions.size(), return);
195     QString title = window->windowTitle();
196     if (title.endsWith(QStringLiteral("- ") + Constants::IDE_DISPLAY_NAME))
197         title.chop(12);
198     m_windowActions.at(index)->setText(Utils::quoteAmpersands(title.trimmed()));
199 }
200 
201 void WindowList::removeWindow(QWidget *window)
202 {
203     // remove window from list,
204     // remove last action from menu(s)
205     // and update all action titles, starting with the index where the window was
206     int index = m_windows.indexOf(window);
207     QTC_ASSERT(index >= 0, return);
208 
209     ActionManager::unregisterAction(m_windowActions.last(), m_windowActionIds.last());
210     delete m_windowActions.takeLast();
211     m_windowActionIds.removeLast();
212 
213     m_windows.removeOne(window);
214 
215     for (int i = index; i < m_windows.size(); ++i)
216         updateTitle(m_windows.at(i));
217 }
218 
219 void WindowList::setActiveWindow(QWidget *window)
220 {
221     for (int i = 0; i < m_windows.size(); ++i)
222         m_windowActions.at(i)->setChecked(m_windows.at(i) == window);
223 }
224 
225 void WindowList::setWindowVisible(QWidget *window, bool visible)
226 {
227     int index = m_windows.indexOf(window);
228     QTC_ASSERT(index >= 0, return);
229     QTC_ASSERT(index < m_windowActions.size(), return);
230     m_windowActions.at(index)->setVisible(visible);
231 }
232 
233 } // Internal
234 } // Core
