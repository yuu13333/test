Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Use categorized logging for atspi keyboard events

Change-Id: I9f4a93eeabcdb17166c5a696d6c093aa562b66cd

####code 
1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 
41 #include "application_p.h"
42 
43 #include <QtCore/qcoreapplication.h>
44 #include <QtDBus/qdbuspendingreply.h>
45 #include <qdebug.h>
46 #include <QtCore/qloggingcategory.h>
47 
48 #ifndef QT_NO_ACCESSIBILITY
49 #include "deviceeventcontroller_adaptor.h"
50 #include "atspi/atspi-constants.h"
51 
52 Q_LOGGING_CATEGORY(lcAccessibilityAtspiKeyboard, "qt.accessibility.atspi.keyboard")
53 
54 QT_BEGIN_NAMESPACE
55 
56 /*!
57     \class QSpiApplicationAdaptor
58     \internal
59 
60     \brief QSpiApplicationAdaptor
61 
62     QSpiApplicationAdaptor
63 */
64 
65 QSpiApplicationAdaptor::QSpiApplicationAdaptor(const QDBusConnection &connection, QObject *parent)
66     : QObject(parent), dbusConnection(connection), inCapsLock(false)
67 {
68 }
69 
70 enum QSpiKeyEventType {
71       QSPI_KEY_EVENT_PRESS,
72       QSPI_KEY_EVENT_RELEASE,
73       QSPI_KEY_EVENT_LAST_DEFINED
74 };
75 
76 void QSpiApplicationAdaptor::sendEvents(bool active)
77 {
78     if (active) {
79         qApp->installEventFilter(this);
80     } else {
81         qApp->removeEventFilter(this);
82     }
83 }
84 
85 
86 bool QSpiApplicationAdaptor::eventFilter(QObject *target, QEvent *event)
87 {
88     if (!event->spontaneous())
89         return false;
90 
91     switch (event->type()) {
92     case QEvent::WindowActivate:
93         emit windowActivated(target, true);
94         break;
95     case QEvent::WindowDeactivate:
96         emit windowActivated(target, false);
97         break;
98     case QEvent::KeyPress:
99     case QEvent::KeyRelease: {
100         QKeyEvent *keyEvent = static_cast <QKeyEvent *>(event);
101         QSpiDeviceEvent de;
102 
103         if (event->type() == QEvent::KeyPress)
104             de.type = QSPI_KEY_EVENT_PRESS;
105         else
106             de.type = QSPI_KEY_EVENT_RELEASE;
107 
108         de.id = keyEvent->nativeVirtualKey();
109         de.hardwareCode = keyEvent->nativeScanCode();
110 
111         de.timestamp = QDateTime::currentMSecsSinceEpoch();
112 
113         if (keyEvent->key() == Qt::Key_Tab)
114             de.text = QStringLiteral("Tab");
115         else if (keyEvent->key() == Qt::Key_Backtab)
116             de.text = QStringLiteral("Backtab");
117         else if (keyEvent->key() == Qt::Key_Control)
118             de.text = QStringLiteral("Control_L");
119         else if (keyEvent->key() == Qt::Key_Left)
120             de.text = (keyEvent->modifiers() & Qt::KeypadModifier) ? QStringLiteral("KP_Left") : QStringLiteral("Left");
121         else if (keyEvent->key() == Qt::Key_Right)
122             de.text = (keyEvent->modifiers() & Qt::KeypadModifier) ? QStringLiteral("KP_Right") : QStringLiteral("Right");
123         else if (keyEvent->key() == Qt::Key_Up)
124             de.text = (keyEvent->modifiers() & Qt::KeypadModifier) ? QStringLiteral("KP_Up") : QStringLiteral("Up");
125         else if (keyEvent->key() == Qt::Key_Down)
126             de.text = (keyEvent->modifiers() & Qt::KeypadModifier) ? QStringLiteral("KP_Down") : QStringLiteral("Down");
127         else if (keyEvent->key() == Qt::Key_Enter || keyEvent->key() == Qt::Key_Return)
128             de.text = QStringLiteral("Return");
129         else if (keyEvent->key() == Qt::Key_Backspace)
130             de.text = QStringLiteral("BackSpace");
131         else if (keyEvent->key() == Qt::Key_Delete)
132             de.text = QStringLiteral("Delete");
133         else if (keyEvent->key() == Qt::Key_PageUp)
134             de.text = (keyEvent->modifiers() & Qt::KeypadModifier) ? QStringLiteral("KP_Page_Up") : QStringLiteral("Page_Up");
135         else if (keyEvent->key() == Qt::Key_PageDown)
136             de.text = (keyEvent->modifiers() & Qt::KeypadModifier) ? QStringLiteral("KP_Page_Up") : QStringLiteral("Page_Down");
137         else if (keyEvent->key() == Qt::Key_Home)
138             de.text = (keyEvent->modifiers() & Qt::KeypadModifier) ? QStringLiteral("KP_Home") : QStringLiteral("Home");
139         else if (keyEvent->key() == Qt::Key_End)
140             de.text = (keyEvent->modifiers() & Qt::KeypadModifier) ? QStringLiteral("KP_End") : QStringLiteral("End");
141         else if (keyEvent->key() == Qt::Key_Clear && (keyEvent->modifiers() & Qt::KeypadModifier))
142             de.text = QStringLiteral("KP_Begin"); // Key pad 5
143         else if (keyEvent->key() == Qt::Key_Escape)
144             de.text = QStringLiteral("Escape");
145         else if (keyEvent->key() == Qt::Key_Space)
146             de.text = QStringLiteral("space");
147         else if (keyEvent->key() == Qt::Key_CapsLock) {
148             de.text = QStringLiteral("Caps_Lock");
149             if (event->type() == QEvent::KeyPress)
150                 inCapsLock = true;
151             else
152                 inCapsLock = false;
153         } else if (keyEvent->key() == Qt::Key_NumLock)
154             de.text = QStringLiteral("Num_Lock");
155         else if (keyEvent->key() == Qt::Key_Insert)
156             de.text = QStringLiteral("Insert");
157         else
158             de.text = keyEvent->text();
159 
160         // This is a bit dubious, Gnome uses some gtk function here.
161         // Long term the spec will hopefully change to just use keycodes.
162         de.isText = !de.text.isEmpty();
163 
164         de.modifiers = 0;
165         if (!inCapsLock && keyEvent->modifiers() & Qt::ShiftModifier)
166             de.modifiers |= 1 << ATSPI_MODIFIER_SHIFT;
167         if (inCapsLock && (keyEvent->key() != Qt::Key_CapsLock))
168             de.modifiers |= 1 << ATSPI_MODIFIER_SHIFTLOCK;
169         if ((keyEvent->modifiers() & Qt::ControlModifier) && (keyEvent->key() != Qt::Key_Control))
170             de.modifiers |= 1 << ATSPI_MODIFIER_CONTROL;
171         if ((keyEvent->modifiers() & Qt::AltModifier) && (keyEvent->key() != Qt::Key_Alt))
172             de.modifiers |= 1 << ATSPI_MODIFIER_ALT;
173         if ((keyEvent->modifiers() & Qt::MetaModifier) && (keyEvent->key() != Qt::Key_Meta))
174             de.modifiers |= 1 << ATSPI_MODIFIER_META;
175 
176         qCDebug(lcAccessibilityAtspiKeyboard) << "Key event text:" << event->type() << de.text
177                  << "native virtual key:" << de.id
178                  << "hardware code/scancode:" << de.hardwareCode
179                  << "modifiers:" << de.modifiers
180                  << "text:" << de.text;
181 
182         QDBusMessage m = QDBusMessage::createMethodCall(QStringLiteral("org.a11y.atspi.Registry"),
183                                                         QStringLiteral("/org/a11y/atspi/registry/deviceeventcontroller"),
184                                                         QStringLiteral("org.a11y.atspi.DeviceEventController"), QStringLiteral("NotifyListenersSync"));
185         m.setArguments(QVariantList() << QVariant::fromValue(de));
186 
187         // FIXME: this is critical, the timeout should probably be pretty low to allow normal processing
188         int timeout = 100;
189         bool sent = dbusConnection.callWithCallback(m, this, SLOT(notifyKeyboardListenerCallback(QDBusMessage)),
190                         SLOT(notifyKeyboardListenerError(QDBusError,QDBusMessage)), timeout);
191         if (sent) {
192             //queue the event and send it after callback
193             keyEvents.enqueue(QPair<QPointer<QObject>, QKeyEvent*> (QPointer<QObject>(target), copyKeyEvent(keyEvent)));
194             return true;
195         }
196     }
197     default:
198         break;
199     }
200     return false;
201 }
202 
203 QKeyEvent* QSpiApplicationAdaptor::copyKeyEvent(QKeyEvent* old)
204 {
205     return new QKeyEvent(old->type(), old->key(), old->modifiers(),
206                          old->nativeScanCode(), old->nativeVirtualKey(), old->nativeModifiers(),
207                          old->text(), old->isAutoRepeat(), old->count());
208 }
209 
210 void QSpiApplicationAdaptor::notifyKeyboardListenerCallback(const QDBusMessage& message)
211 {
212     if (!keyEvents.length()) {
213         qWarning("QSpiApplication::notifyKeyboardListenerCallback with no queued key called");
214         return;
215     }
216     Q_ASSERT(message.arguments().length() == 1);
217     if (message.arguments().at(0).toBool() == true) {
218         QPair<QPointer<QObject>, QKeyEvent*> event = keyEvents.dequeue();
219         delete event.second;
220     } else {
221         QPair<QPointer<QObject>, QKeyEvent*> event = keyEvents.dequeue();
222         if (event.first)
223             QCoreApplication::postEvent(event.first.data(), event.second);
224     }
225 }
226 
227 void QSpiApplicationAdaptor::notifyKeyboardListenerError(const QDBusError& error, const QDBusMessage& /*message*/)
228 {
229     qWarning() << "QSpiApplication::keyEventError " << error.name() << error.message();
230     while (!keyEvents.isEmpty()) {
231         QPair<QPointer<QObject>, QKeyEvent*> event = keyEvents.dequeue();
232         if (event.first)
233             QCoreApplication::postEvent(event.first.data(), event.second);
234     }
235 }
236 
237 QT_END_NAMESPACE
238 
239 #endif //QT_NO_ACCESSIBILITY
