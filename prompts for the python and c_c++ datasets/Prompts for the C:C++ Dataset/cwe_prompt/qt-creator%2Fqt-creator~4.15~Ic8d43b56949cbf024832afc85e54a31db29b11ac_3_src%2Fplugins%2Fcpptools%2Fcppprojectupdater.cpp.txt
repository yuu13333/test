Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2017 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "cppprojectupdater.h"
27 
28 #include "cppmodelmanager.h"
29 #include "cppprojectinfogenerator.h"
30 
31 #include <projectexplorer/toolchainmanager.h>
32 
33 #include <utils/qtcassert.h>
34 #include <utils/runextensions.h>
35 
36 #include <QFutureInterface>
37 
38 namespace CppTools {
39 
40 CppProjectUpdater::CppProjectUpdater()
41 {
42     connect(&m_generateFutureWatcher,
43             &QFutureWatcher<ProjectInfo>::finished,
44             this,
45             &CppProjectUpdater::onProjectInfoGenerated);
46 }
47 
48 CppProjectUpdater::~CppProjectUpdater()
49 {
50     cancelAndWaitForFinished();
51 }
52 
53 void CppProjectUpdater::update(const ProjectExplorer::ProjectUpdateInfo &projectUpdateInfo)
54 {
55     // Stop previous update.
56     cancel();
57 
58     m_projectUpdateInfo = projectUpdateInfo;
59 
60     // Ensure that we do not operate on a deleted toolchain.
61     using namespace ProjectExplorer;
62     connect(ToolChainManager::instance(), &ToolChainManager::toolChainRemoved,
63             this, &CppProjectUpdater::onToolChainRemoved);
64 
65     // Run the project info generator in a worker thread and continue if that one is finished.
66     m_generateFuture = Utils::runAsync([=](QFutureInterface<ProjectInfo> &futureInterface) {
67         ProjectUpdateInfo fullProjectUpdateInfo = projectUpdateInfo;
68         if (fullProjectUpdateInfo.rppGenerator)
69             fullProjectUpdateInfo.rawProjectParts = fullProjectUpdateInfo.rppGenerator();
70         Internal::ProjectInfoGenerator generator(futureInterface, fullProjectUpdateInfo);
71         futureInterface.reportResult(generator.generate());
72     });
73     m_generateFutureWatcher.setFuture(m_generateFuture);
74 }
75 
76 void CppProjectUpdater::cancel()
77 {
78     m_generateFutureWatcher.setFuture({});
79     m_generateFuture.cancel();
80     m_updateFuture.cancel();
81 }
82 
83 void CppProjectUpdater::cancelAndWaitForFinished()
84 {
85     cancel();
86     if (m_generateFuture.isRunning())
87         m_generateFuture.waitForFinished();
88     if (m_updateFuture.isRunning())
89         m_updateFuture.waitForFinished();
90 }
91 
92 void CppProjectUpdater::onToolChainRemoved(ProjectExplorer::ToolChain *t)
93 {
94     QTC_ASSERT(t, return);
95     if (t == m_projectUpdateInfo.cToolChain || t == m_projectUpdateInfo.cxxToolChain)
96         cancel();
97 }
98 
99 void CppProjectUpdater::onProjectInfoGenerated()
100 {
101     // From now on we do not access the toolchain anymore, so disconnect.
102     using namespace ProjectExplorer;
103     disconnect(ToolChainManager::instance(), &ToolChainManager::toolChainRemoved,
104                this, &CppProjectUpdater::onToolChainRemoved);
105 
106     if (m_generateFutureWatcher.isCanceled() || m_generateFutureWatcher.future().resultCount() < 1)
107         return;
108 
109     m_updateFuture = CppModelManager::instance()->updateProjectInfo(
110         m_generateFutureWatcher.result());
111 }
112 
113 CppProjectUpdaterFactory::CppProjectUpdaterFactory()
114 {
115     setObjectName("CppProjectUpdaterFactory");
116 }
117 
118 CppProjectUpdaterInterface *CppProjectUpdaterFactory::create()
119 {
120     return new CppProjectUpdater;
121 }
122 
123 } // namespace CppTools
