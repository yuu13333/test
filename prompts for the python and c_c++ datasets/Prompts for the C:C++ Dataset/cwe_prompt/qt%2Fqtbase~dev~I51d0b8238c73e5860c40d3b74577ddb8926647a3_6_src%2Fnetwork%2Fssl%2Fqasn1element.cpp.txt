Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2014 Jeremy Lain√© <jeremy.laine@m4x.org>
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtNetwork module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 
41 #include "qasn1element_p.h"
42 
43 #include <QtCore/qdatastream.h>
44 #include <QtCore/qdatetime.h>
45 #include <QtCore/qlist.h>
46 #include <QDebug>
47 
48 #include <limits>
49 
50 QT_BEGIN_NAMESPACE
51 
52 typedef QMap<QByteArray, QByteArray> OidNameMap;
53 static OidNameMap createOidMap()
54 {
55     OidNameMap oids;
56     // used by unit tests
57     oids.insert(oids.cend(), QByteArrayLiteral("0.9.2342.19200300.100.1.5"), QByteArrayLiteral("favouriteDrink"));
58     oids.insert(oids.cend(), QByteArrayLiteral("1.2.840.113549.1.9.1"), QByteArrayLiteral("emailAddress"));
59     oids.insert(oids.cend(), QByteArrayLiteral("1.3.6.1.5.5.7.1.1"), QByteArrayLiteral("authorityInfoAccess"));
60     oids.insert(oids.cend(), QByteArrayLiteral("1.3.6.1.5.5.7.48.1"), QByteArrayLiteral("OCSP"));
61     oids.insert(oids.cend(), QByteArrayLiteral("1.3.6.1.5.5.7.48.2"), QByteArrayLiteral("caIssuers"));
62     oids.insert(oids.cend(), QByteArrayLiteral("2.5.29.14"), QByteArrayLiteral("subjectKeyIdentifier"));
63     oids.insert(oids.cend(), QByteArrayLiteral("2.5.29.15"), QByteArrayLiteral("keyUsage"));
64     oids.insert(oids.cend(), QByteArrayLiteral("2.5.29.17"), QByteArrayLiteral("subjectAltName"));
65     oids.insert(oids.cend(), QByteArrayLiteral("2.5.29.19"), QByteArrayLiteral("basicConstraints"));
66     oids.insert(oids.cend(), QByteArrayLiteral("2.5.29.35"), QByteArrayLiteral("authorityKeyIdentifier"));
67     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.10"), QByteArrayLiteral("O"));
68     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.11"), QByteArrayLiteral("OU"));
69     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.12"), QByteArrayLiteral("title"));
70     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.13"), QByteArrayLiteral("description"));
71     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.17"), QByteArrayLiteral("postalCode"));
72     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.3"), QByteArrayLiteral("CN"));
73     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.4"), QByteArrayLiteral("SN"));
74     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.41"), QByteArrayLiteral("name"));
75     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.42"), QByteArrayLiteral("GN"));
76     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.43"), QByteArrayLiteral("initials"));
77     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.46"), QByteArrayLiteral("dnQualifier"));
78     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.5"), QByteArrayLiteral("serialNumber"));
79     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.6"), QByteArrayLiteral("C"));
80     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.7"), QByteArrayLiteral("L"));
81     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.8"), QByteArrayLiteral("ST"));
82     oids.insert(oids.cend(), QByteArrayLiteral("2.5.4.9"), QByteArrayLiteral("street"));
83     return oids;
84 }
85 Q_GLOBAL_STATIC_WITH_ARGS(OidNameMap, oidNameMap, (createOidMap()))
86 
87 QAsn1Element::QAsn1Element(quint8 type, const QByteArray &value)
88     : mType(type)
89     , mValue(value)
90 {
91 }
92 
93 bool QAsn1Element::read(QDataStream &stream)
94 {
95     // type
96     quint8 tmpType;
97     stream >> tmpType;
98     if (!tmpType)
99         return false;
100 
101     // length
102     quint64 length = 0;
103     quint8 first;
104     stream >> first;
105     if (first & 0x80) {
106         // long form
107         const quint8 bytes = (first & 0x7f);
108         if (bytes > 7)
109             return false;
110 
111         quint8 b;
112         for (int i = 0; i < bytes; i++) {
113             stream >> b;
114             length = (length << 8) | b;
115         }
116     } else {
117         // short form
118         length = (first & 0x7f);
119     }
120 
121     if (length > quint64(std::numeric_limits<int>::max()))
122         return false;
123 
124     // read value in blocks to avoid being fooled by incorrect length
125     const int BUFFERSIZE = 4 * 1024;
126     QByteArray tmpValue;
127     int remainingLength = length;
128     while (remainingLength) {
129         char readBuffer[BUFFERSIZE];
130         const int bytesToRead = qMin(remainingLength, BUFFERSIZE);
131         const int count = stream.readRawData(readBuffer, bytesToRead);
132         if (count != int(bytesToRead))
133             return false;
134         tmpValue.append(readBuffer, bytesToRead);
135         remainingLength -= bytesToRead;
136     }
137 
138     mType = tmpType;
139     mValue.swap(tmpValue);
140     return true;
141 }
142 
143 bool QAsn1Element::read(const QByteArray &data)
144 {
145     QDataStream stream(data);
146     return read(stream);
147 }
148 
149 void QAsn1Element::write(QDataStream &stream) const
150 {
151     // type
152     stream << mType;
153 
154     // length
155     qint64 length = mValue.size();
156     if (length >= 128) {
157         // long form
158         quint8 encodedLength = 0x80;
159         QByteArray ba;
160         while (length) {
161             ba.prepend(quint8((length & 0xff)));
162             length >>= 8;
163             encodedLength += 1;
164         }
165         stream << encodedLength;
166         stream.writeRawData(ba.data(), ba.size());
167     } else {
168         // short form
169         stream << quint8(length);
170     }
171 
172     // value
173     stream.writeRawData(mValue.data(), mValue.size());
174 }
175 
176 QAsn1Element QAsn1Element::fromBool(bool val)
177 {
178     return QAsn1Element(QAsn1Element::BooleanType,
179         QByteArray(1, val ? 0xff : 0x00));
180 }
181 
182 QAsn1Element QAsn1Element::fromInteger(unsigned int val)
183 {
184     QAsn1Element elem(QAsn1Element::IntegerType);
185     while (val > 127) {
186         elem.mValue.prepend(val & 0xff);
187         val >>= 8;
188     }
189     elem.mValue.prepend(val & 0x7f);
190     return elem;
191 }
192 
193 QAsn1Element QAsn1Element::fromVector(const QList<QAsn1Element> &items)
194 {
195     QAsn1Element seq;
196     seq.mType = SequenceType;
197     QDataStream stream(&seq.mValue, QDataStream::WriteOnly);
198     for (auto it = items.cbegin(), end = items.cend(); it != end; ++it)
199         it->write(stream);
200     return seq;
201 }
202 
203 QAsn1Element QAsn1Element::fromObjectId(const QByteArray &id)
204 {
205     QAsn1Element elem;
206     elem.mType = ObjectIdentifierType;
207     const QList<QByteArray> bits = id.split('.');
208     Q_ASSERT(bits.size() > 2);
209     elem.mValue += quint8((bits[0].toUInt() * 40 + bits[1].toUInt()));
210     for (int i = 2; i < bits.size(); ++i) {
211         char buffer[std::numeric_limits<unsigned int>::digits / 7 + 2];
212         char *pBuffer = buffer + sizeof(buffer);
213         *--pBuffer = '\0';
214         unsigned int node = bits[i].toUInt();
215         *--pBuffer = quint8((node & 0x7f));
216         node >>= 7;
217         while (node) {
218             *--pBuffer = quint8(((node & 0x7f) | 0x80));
219             node >>= 7;
220         }
221         elem.mValue += pBuffer;
222     }
223     return elem;
224 }
225 
226 bool QAsn1Element::toBool(bool *ok) const
227 {
228     if (*this == fromBool(true)) {
229         if (ok)
230             *ok = true;
231         return true;
232     } else if (*this == fromBool(false)) {
233         if (ok)
234             *ok = true;
235         return false;
236     } else {
237         if (ok)
238             *ok = false;
239         return false;
240     }
241 }
242 
243 QDateTime QAsn1Element::toDateTime() const
244 {
245     QDateTime result;
246 
247     if (mValue.size() != 13 && mValue.size() != 15)
248         return result;
249 
250     // QDateTime::fromString is lenient and accepts +- signs in front
251     // of the year; but ASN.1 doesn't allow them.
252     const auto isAsciiDigit = [](char c)
253     {
254         return c >= '0' && c <= '9';
255     };
256 
257     if (!isAsciiDigit(mValue[0]))
258         return result;
259 
260     // Timezone must be present, and UTC
261     if (mValue.back() != 'Z')
262         return result;
263 
264     // In addition, check that we only have digits representing the
265     // date/time. This should not really be necessary (there's no such
266     // thing as negative months/days/etc.); it's a workaround for
267     // QTBUG-84349.
268     if (!std::all_of(mValue.begin(), mValue.end() - 1, isAsciiDigit))
269         return result;
270 
271     if (mType == UtcTimeType && mValue.size() == 13) {
272         result = QDateTime::fromString(QString::fromLatin1(mValue),
273                                        QStringLiteral("yyMMddHHmmsst"));
274         if (!result.isValid())
275             return result;
276 
277         Q_ASSERT(result.timeSpec() == Qt::UTC);
278 
279         QDate date = result.date();
280 
281         // RFC 2459:
282         //   Where YY is greater than or equal to 50, the year shall be
283         //   interpreted as 19YY; and
284         //
285         //   Where YY is less than 50, the year shall be interpreted as 20YY.
286         //
287         // QDateTime interprets the 'yy' format as 19yy, so we may need to adjust
288         // the year (bring it in the [1950, 2049] range).
289         if (date.year() < 1950)
290             result.setDate(date.addYears(100));
291 
292         Q_ASSERT(result.date().year() >= 1950);
293         Q_ASSERT(result.date().year() <= 2049);
294     } else if (mType == GeneralizedTimeType && mValue.size() == 15) {
295         result = QDateTime::fromString(QString::fromLatin1(mValue),
296                                        QStringLiteral("yyyyMMddHHmmsst"));
297     }
298 
299     return result;
300 }
301 
302 QMultiMap<QByteArray, QString> QAsn1Element::toInfo() const
303 {
304     QMultiMap<QByteArray, QString> info;
305     QAsn1Element elem;
306     QDataStream issuerStream(mValue);
307     while (elem.read(issuerStream) && elem.mType == QAsn1Element::SetType) {
308         QAsn1Element issuerElem;
309         QDataStream setStream(elem.mValue);
310         if (issuerElem.read(setStream) && issuerElem.mType == QAsn1Element::SequenceType) {
311             const auto elems = issuerElem.toList();
312             if (elems.size() == 2) {
313                 const QByteArray key = elems.front().toObjectName();
314                 if (!key.isEmpty())
315                     info.insert(key, elems.back().toString());
316             }
317         }
318     }
319     return info;
320 }
321 
322 qint64 QAsn1Element::toInteger(bool *ok) const
323 {
324     if (mType != QAsn1Element::IntegerType || mValue.isEmpty()) {
325         if (ok)
326             *ok = false;
327         return 0;
328     }
329 
330     // NOTE: - negative numbers are not handled
331     //       - greater sizes would overflow
332     if (mValue.at(0) & 0x80 || mValue.size() > 8) {
333         if (ok)
334             *ok = false;
335         return 0;
336     }
337 
338     qint64 value = mValue.at(0) & 0x7f;
339     for (int i = 1; i < mValue.size(); ++i)
340         value = (value << 8) | quint8(mValue.at(i));
341 
342     if (ok)
343         *ok = true;
344     return value;
345 }
346 
347 QList<QAsn1Element> QAsn1Element::toList() const
348 {
349     QList<QAsn1Element> items;
350     if (mType == SequenceType) {
351         QAsn1Element elem;
352         QDataStream stream(mValue);
353         while (elem.read(stream))
354             items << elem;
355     }
356     return items;
357 }
358 
359 QByteArray QAsn1Element::toObjectId() const
360 {
361     QByteArray key;
362     if (mType == ObjectIdentifierType && !mValue.isEmpty()) {
363         quint8 b = mValue.at(0);
364         key += QByteArray::number(b / 40) + '.' + QByteArray::number (b % 40);
365         unsigned int val = 0;
366         for (int i = 1; i < mValue.size(); ++i) {
367             b = mValue.at(i);
368             val = (val << 7) | (b & 0x7f);
369             if (!(b & 0x80)) {
370                 key += '.' + QByteArray::number(val);
371                 val = 0;
372             }
373         }
374     }
375     return key;
376 }
377 
378 QByteArray QAsn1Element::toObjectName() const
379 {
380     QByteArray key = toObjectId();
381     return oidNameMap->value(key, key);
382 }
383 
384 QString QAsn1Element::toString() const
385 {
386     // Detect embedded NULs and reject
387     if (qstrlen(mValue) < uint(mValue.size()))
388         return QString();
389 
390     if (mType == PrintableStringType || mType == TeletexStringType
391         || mType == Rfc822NameType || mType == DnsNameType
392         || mType == UniformResourceIdentifierType)
393         return QString::fromLatin1(mValue, mValue.size());
394     if (mType == Utf8StringType)
395         return QString::fromUtf8(mValue, mValue.size());
396 
397     return QString();
398 }
399 
400 QT_END_NAMESPACE
