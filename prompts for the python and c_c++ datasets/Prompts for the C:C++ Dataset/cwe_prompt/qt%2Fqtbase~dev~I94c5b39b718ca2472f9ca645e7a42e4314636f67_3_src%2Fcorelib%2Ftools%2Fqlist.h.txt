Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2020 The Qt Company Ltd.
4 ** Copyright (C) 2019 Intel Corporation
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the QtCore module of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:LGPL$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU Lesser General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU Lesser
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
22 ** packaging of this file. Please review the following information to
23 ** ensure the GNU Lesser General Public License version 3 requirements
24 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
25 **
26 ** GNU General Public License Usage
27 ** Alternatively, this file may be used under the terms of the GNU
28 ** General Public License version 2.0 or (at your option) the GNU General
29 ** Public license version 3 or any later version approved by the KDE Free
30 ** Qt Foundation. The licenses are as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
32 ** included in the packaging of this file. Please review the following
33 ** information to ensure the GNU General Public License requirements will
34 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
35 ** https://www.gnu.org/licenses/gpl-3.0.html.
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 #ifndef QLIST_H
42 #define QLIST_H
43 
44 #include <QtCore/qarraydatapointer.h>
45 #include <QtCore/qnamespace.h>
46 #include <QtCore/qhashfunctions.h>
47 #include <QtCore/qiterator.h>
48 
49 #include <functional>
50 #include <limits>
51 #include <initializer_list>
52 #include <type_traits>
53 
54 QT_BEGIN_NAMESPACE
55 
56 namespace QtPrivate {
57    template <typename V, typename U> qsizetype indexOf(const QList<V> &list, const U &u, qsizetype from);
58    template <typename V, typename U> qsizetype lastIndexOf(const QList<V> &list, const U &u, qsizetype from);
59 }
60 
61 template <typename T> struct QListSpecialMethods
62 {
63 protected:
64     ~QListSpecialMethods() = default;
65 };
66 template <> struct QListSpecialMethods<QByteArray>;
67 template <> struct QListSpecialMethods<QString>;
68 
69 template <typename T>
70 class QList
71 #ifndef Q_QDOC
72     : public QListSpecialMethods<T>
73 #endif
74 {
75     typedef QTypedArrayData<T> Data;
76     typedef QArrayDataOps<T> DataOps;
77     typedef QArrayDataPointer<T> DataPointer;
78     class DisableRValueRefs {};
79 
80     DataPointer d;
81 
82     template <typename V, typename U> friend qsizetype QtPrivate::indexOf(const QList<V> &list, const U &u, qsizetype from);
83     template <typename V, typename U> friend qsizetype QtPrivate::lastIndexOf(const QList<V> &list, const U &u, qsizetype from);
84 
85 public:
86     typedef T Type;
87     typedef T value_type;
88     typedef value_type *pointer;
89     typedef const value_type *const_pointer;
90     typedef value_type &reference;
91     typedef const value_type &const_reference;
92     typedef qsizetype size_type;
93     typedef qptrdiff difference_type;
94     typedef typename Data::iterator iterator;
95     typedef typename Data::const_iterator const_iterator;
96     typedef iterator Iterator;
97     typedef const_iterator ConstIterator;
98     typedef std::reverse_iterator<iterator> reverse_iterator;
99     typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
100     typedef typename DataPointer::parameter_type parameter_type;
101     using rvalue_ref = typename std::conditional<DataPointer::pass_parameter_by_value, DisableRValueRefs, T &&>::type;
102 
103 private:
104     void resize_internal(qsizetype i, Qt::Initialization);
105     bool isValidIterator(const_iterator i) const
106     {
107         const std::less<const T*> less = {};
108         return !less(d->end(), i) && !less(i, d->begin());
109     }
110 public:
111     QList(DataPointer dd) noexcept
112         : d(dd)
113     {
114     }
115 
116 public:
117     QList() = default;
118     explicit QList(qsizetype size)
119         : d(Data::allocate(size))
120     {
121         if (size)
122             d->appendInitialize(size);
123     }
124     QList(qsizetype size, const T &t)
125         : d(Data::allocate(size))
126     {
127         if (size)
128             d->copyAppend(size, t);
129     }
130 
131     inline QList(const QList<T> &other) noexcept : d(other.d) {}
132     QList(QList<T> &&other) noexcept : d(std::move(other.d)) {}
133     inline QList(std::initializer_list<T> args)
134         : d(Data::allocate(args.size()))
135     {
136         if (args.size())
137             d->copyAppend(args.begin(), args.end());
138     }
139 
140     ~QList() /*noexcept(std::is_nothrow_destructible<T>::value)*/ {}
141     QList<T> &operator=(const QList<T> &other) { d = other.d; return *this; }
142     QList &operator=(QList &&other) noexcept(std::is_nothrow_destructible<T>::value)
143     {
144         d = std::move(other.d);
145         return *this;
146     }
147     QList<T> &operator=(std::initializer_list<T> args)
148     {
149         d = DataPointer(Data::allocate(args.size()));
150         if (args.size())
151             d->copyAppend(args.begin(), args.end());
152         return *this;
153     }
154     template <typename InputIterator, QtPrivate::IfIsForwardIterator<InputIterator> = true>
155     QList(InputIterator i1, InputIterator i2)
156         : d(Data::allocate(std::distance(i1, i2)))
157     {
158         if (std::distance(i1, i2))
159             d->copyAppend(i1, i2);
160     }
161 
162     template <typename InputIterator, QtPrivate::IfIsNotForwardIterator<InputIterator> = true>
163     QList(InputIterator i1, InputIterator i2)
164         : QList()
165     {
166         QtPrivate::reserveIfForwardIterator(this, i1, i2);
167         std::copy(i1, i2, std::back_inserter(*this));
168     }
169 
170     void swap(QList<T> &other) noexcept { qSwap(d, other.d); }
171 
172     friend bool operator==(const QList &l, const QList &r)
173     {
174         if (l.size() != r.size())
175             return false;
176         if (l.begin() == r.begin())
177             return true;
178 
179         // do element-by-element comparison
180         return l.d->compare(l.begin(), r.begin(), l.size());
181     }
182     friend bool operator!=(const QList &l, const QList &r)
183     {
184         return !(l == r);
185     }
186 
187     qsizetype size() const noexcept { return d->size; }
188     qsizetype count() const noexcept { return size(); }
189     qsizetype length() const noexcept { return size(); }
190 
191     inline bool isEmpty() const noexcept { return d->size == 0; }
192 
193     void resize(qsizetype size)
194     {
195         resize_internal(size, Qt::Uninitialized);
196         if (size > this->size())
197             d->appendInitialize(size);
198     }
199     void resize(qsizetype size, parameter_type c)
200     {
201         resize_internal(size, Qt::Uninitialized);
202         if (size > this->size())
203             d->copyAppend(size - this->size(), c);
204     }
205 
206     inline qsizetype capacity() const { return qsizetype(d->constAllocatedCapacity()); }
207     void reserve(qsizetype size);
208     inline void squeeze();
209 
210     void detach() { d.detach(); }
211     bool isDetached() const noexcept { return !d->isShared(); }
212 
213     inline bool isSharedWith(const QList<T> &other) const { return d == other.d; }
214 
215     pointer data() { detach(); return d->data(); }
216     const_pointer data() const noexcept { return d->data(); }
217     const_pointer constData() const noexcept { return d->data(); }
218     void clear() {
219         if (!size())
220             return;
221         if (d->needsDetach()) {
222             // must allocate memory
223             DataPointer detached(Data::allocate(d.allocatedCapacity(), d->detachFlags()));
224             d.swap(detached);
225         } else {
226             d->truncate(0);
227         }
228     }
229 
230     const_reference at(qsizetype i) const noexcept
231     {
232         Q_ASSERT_X(size_t(i) < size_t(d->size), "QList::at", "index out of range");
233         return data()[i];
234     }
235     reference operator[](qsizetype i)
236     {
237         Q_ASSERT_X(size_t(i) < size_t(d->size), "QList::operator[]", "index out of range");
238         detach();
239         return data()[i];
240     }
241     const_reference operator[](qsizetype i) const noexcept { return at(i); }
242     void append(const_reference t)
243     { append(const_iterator(std::addressof(t)), const_iterator(std::addressof(t)) + 1); }
244     void append(const_iterator i1, const_iterator i2);
245     void append(rvalue_ref t) { emplaceBack(std::move(t)); }
246     void append(const QList<T> &l) { append(l.constBegin(), l.constEnd()); }
247     void prepend(rvalue_ref t);
248     void prepend(const T &t);
249 
250     template <typename ...Args>
251     reference emplaceBack(Args&&... args) { return *emplace(count(), std::forward<Args>(args)...); }
252 
253     iterator insert(qsizetype i, parameter_type t)
254     { return insert(i, 1, t); }
255     iterator insert(qsizetype i, qsizetype n, parameter_type t);
256     iterator insert(const_iterator before, parameter_type t)
257     {
258         Q_ASSERT_X(isValidIterator(before),  "QList::insert", "The specified iterator argument 'before' is invalid");
259         return insert(before, 1, t);
260     }
261     iterator insert(const_iterator before, qsizetype n, parameter_type t)
262     {
263         Q_ASSERT_X(isValidIterator(before),  "QList::insert", "The specified iterator argument 'before' is invalid");
264         return insert(std::distance(constBegin(), before), n, t);
265     }
266     iterator insert(const_iterator before, rvalue_ref t)
267     {
268         Q_ASSERT_X(isValidIterator(before),  "QList::insert", "The specified iterator argument 'before' is invalid");
269         return insert(std::distance(constBegin(), before), std::move(t));
270     }
271     iterator insert(qsizetype i, rvalue_ref t) { return emplace(i, std::move(t)); }
272 
273     template <typename ...Args>
274     iterator emplace(const_iterator before, Args&&... args)
275     {
276         Q_ASSERT_X(isValidIterator(before),  "QList::emplace", "The specified iterator argument 'before' is invalid");
277         return emplace(std::distance(constBegin(), before), std::forward<Args>(args)...);
278     }
279 
280     template <typename ...Args>
281     iterator emplace(qsizetype i, Args&&... args);
282 #if 0
283     template< class InputIt >
284     iterator insert( const_iterator pos, InputIt first, InputIt last );
285     iterator insert( const_iterator pos, std::initializer_list<T> ilist );
286 #endif
287     void replace(qsizetype i, const T &t)
288     {
289         Q_ASSERT_X(i >= 0 && i < d->size, "QList<T>::replace", "index out of range");
290         const T copy(t);
291         data()[i] = copy;
292     }
293     void replace(qsizetype i, rvalue_ref t)
294     {
295         Q_ASSERT_X(i >= 0 && i < d->size, "QList<T>::replace", "index out of range");
296         const T copy(std::move(t));
297         data()[i] = std::move(copy);
298     }
299 
300     void remove(qsizetype i, qsizetype n = 1);
301     void removeFirst() { Q_ASSERT(!isEmpty()); remove(0); }
302     void removeLast() { Q_ASSERT(!isEmpty()); remove(size() - 1); }
303     value_type takeFirst() { Q_ASSERT(!isEmpty()); value_type v = std::move(first()); remove(0); return v; }
304     value_type takeLast() { Q_ASSERT(!isEmpty()); value_type v = std::move(last()); remove(size() - 1); return v; }
305 
306     QList<T> &fill(parameter_type t, qsizetype size = -1);
307 
308     qsizetype indexOf(const T &t, qsizetype from = 0) const noexcept;
309     qsizetype lastIndexOf(const T &t, qsizetype from = -1) const noexcept;
310     bool contains(const T &t) const noexcept
311     {
312         return indexOf(t) != -1;
313     }
314     qsizetype count(const T &t) const noexcept
315     {
316         return qsizetype(std::count(&*cbegin(), &*cend(), t));
317     }
318 
319     // QList compatibility
320     void removeAt(qsizetype i) { remove(i); }
321     qsizetype removeAll(const T &t)
322     {
323         const const_iterator ce = this->cend(), cit = std::find(this->cbegin(), ce, t);
324         if (cit == ce)
325             return 0;
326         qsizetype index = cit - this->cbegin();
327         // next operation detaches, so ce, cit, t may become invalidated:
328         const T tCopy = t;
329         const iterator e = end(), it = std::remove(begin() + index, e, tCopy);
330         const qsizetype result = std::distance(it, e);
331         erase(it, e);
332         return result;
333     }
334     bool removeOne(const T &t)
335     {
336         const qsizetype i = indexOf(t);
337         if (i < 0)
338             return false;
339         remove(i);
340         return true;
341     }
342     T takeAt(qsizetype i) { T t = std::move((*this)[i]); remove(i); return t; }
343     void move(qsizetype from, qsizetype to)
344     {
345         Q_ASSERT_X(from >= 0 && from < size(), "QList::move(qsizetype, qsizetype)", "'from' is out-of-range");
346         Q_ASSERT_X(to >= 0 && to < size(), "QList::move(qsizetype, qsizetype)", "'to' is out-of-range");
347         if (from == to) // don't detach when no-op
348             return;
349         detach();
350         T * const b = d->begin();
351         if (from < to)
352             std::rotate(b + from, b + from + 1, b + to + 1);
353         else
354             std::rotate(b + to, b + from, b + from + 1);
355     }
356 
357     // STL-style
358     iterator begin() { detach(); return d->begin(); }
359     iterator end() { detach(); return d->end(); }
360 
361     const_iterator begin() const noexcept { return d->constBegin(); }
362     const_iterator end() const noexcept { return d->constEnd(); }
363     const_iterator cbegin() const noexcept { return d->constBegin(); }
364     const_iterator cend() const noexcept { return d->constEnd(); }
365     const_iterator constBegin() const noexcept { return d->constBegin(); }
366     const_iterator constEnd() const noexcept { return d->constEnd(); }
367     reverse_iterator rbegin() { return reverse_iterator(end()); }
368     reverse_iterator rend() { return reverse_iterator(begin()); }
369     const_reverse_iterator rbegin() const noexcept { return const_reverse_iterator(end()); }
370     const_reverse_iterator rend() const noexcept { return const_reverse_iterator(begin()); }
371     const_reverse_iterator crbegin() const noexcept { return const_reverse_iterator(end()); }
372     const_reverse_iterator crend() const noexcept { return const_reverse_iterator(begin()); }
373 
374     iterator erase(const_iterator begin, const_iterator end);
375     inline iterator erase(const_iterator pos) { return erase(pos, pos+1); }
376 
377     // more Qt
378     inline T& first() { Q_ASSERT(!isEmpty()); return *begin(); }
379     inline const T &first() const { Q_ASSERT(!isEmpty()); return *begin(); }
380     inline const T &constFirst() const { Q_ASSERT(!isEmpty()); return *begin(); }
381     inline T& last() { Q_ASSERT(!isEmpty()); return *(end()-1); }
382     inline const T &last() const { Q_ASSERT(!isEmpty()); return *(end()-1); }
383     inline const T &constLast() const { Q_ASSERT(!isEmpty()); return *(end()-1); }
384     inline bool startsWith(const T &t) const { return !isEmpty() && first() == t; }
385     inline bool endsWith(const T &t) const { return !isEmpty() && last() == t; }
386     QList<T> mid(qsizetype pos, qsizetype len = -1) const;
387 
388     QList<T> first(qsizetype n) const
389     {
390         Q_ASSERT(size_t(n) <= size_t(size()));
391         return QList<T>(begin(), begin() + n);
392     }
393     QList<T> last(qsizetype n) const
394     {
395         Q_ASSERT(size_t(n) <= size_t(size()));
396         return QList<T>(end() - n, end());
397     }
398     QList<T> sliced(qsizetype pos) const
399     {
400         Q_ASSERT(size_t(pos) <= size_t(size()));
401         return QList<T>(begin() + pos, end());
402     }
403     QList<T> sliced(qsizetype pos, qsizetype n) const
404     {
405         Q_ASSERT(size_t(pos) <= size_t(size()));
406         Q_ASSERT(n >= 0);
407         Q_ASSERT(pos + n <= size());
408         return QList<T>(begin() + pos, begin() + pos + n);
409     }
410 
411     T value(qsizetype i) const { return value(i, T()); }
412     T value(qsizetype i, const T &defaultValue) const;
413 
414     void swapItemsAt(qsizetype i, qsizetype j) {
415         Q_ASSERT_X(i >= 0 && i < size() && j >= 0 && j < size(),
416                     "QList<T>::swap", "index out of range");
417         detach();
418         qSwap(d->begin()[i], d->begin()[j]);
419     }
420 
421     // STL compatibility
422     inline void push_back(const T &t) { append(t); }
423     void push_back(rvalue_ref t) { append(std::move(t)); }
424     void push_front(rvalue_ref t) { prepend(std::move(t)); }
425     inline void push_front(const T &t) { prepend(t); }
426     void pop_back() { removeLast(); }
427     void pop_front() { removeFirst(); }
428 
429     template <typename ...Args>
430     reference emplace_back(Args&&... args) { return emplaceBack(std::forward<Args>(args)...); }
431 
432     inline bool empty() const
433     { return d->size == 0; }
434     inline reference front() { return first(); }
435     inline const_reference front() const { return first(); }
436     inline reference back() { return last(); }
437     inline const_reference back() const { return last(); }
438     void shrink_to_fit() { squeeze(); }
439 
440     // comfort
441     QList<T> &operator+=(const QList<T> &l) { append(l.cbegin(), l.cend()); return *this; }
442     inline QList<T> operator+(const QList<T> &l) const
443     { QList n = *this; n += l; return n; }
444     inline QList<T> &operator+=(const T &t)
445     { append(t); return *this; }
446     inline QList<T> &operator<< (const T &t)
447     { append(t); return *this; }
448     inline QList<T> &operator<<(const QList<T> &l)
449     { *this += l; return *this; }
450     inline QList<T> &operator+=(rvalue_ref t)
451     { append(std::move(t)); return *this; }
452     inline QList<T> &operator<<(rvalue_ref t)
453     { append(std::move(t)); return *this; }
454 
455     // Consider deprecating in 6.4 or later
456     static QList<T> fromList(const QList<T> &list) { return list; }
457     QList<T> toList() const { return *this; }
458 
459     static inline QList<T> fromVector(const QList<T> &vector) { return vector; }
460     inline QList<T> toVector() const { return *this; }
461 
462     template<qsizetype N>
463     static QList<T> fromReadOnlyData(const T (&t)[N])
464     {
465         return QList<T>({ nullptr, const_cast<T *>(t), N });
466     }
467 };
468 
469 #if defined(__cpp_deduction_guides) && __cpp_deduction_guides >= 201606
470 template <typename InputIterator,
471           typename ValueType = typename std::iterator_traits<InputIterator>::value_type,
472           QtPrivate::IfIsInputIterator<InputIterator> = true>
473 QList(InputIterator, InputIterator) -> QList<ValueType>;
474 #endif
475 
476 template <typename T>
477 inline void QList<T>::resize_internal(qsizetype newSize, Qt::Initialization)
478 {
479     Q_ASSERT(newSize >= 0);
480 
481     if (d->needsDetach() || newSize > capacity()) {
482         // must allocate memory
483         DataPointer detached(Data::allocate(d->detachCapacity(newSize),
484                                             d->detachFlags()));
485         if (size() && newSize) {
486             detached->copyAppend(constBegin(), constBegin() + qMin(newSize, size()));
487         }
488         d.swap(detached);
489     }
490 
491     if (newSize < size())
492         d->truncate(newSize);
493 }
494 
495 template <typename T>
496 void QList<T>::reserve(qsizetype asize)
497 {
498     // capacity() == 0 for immutable data, so this will force a detaching below
499     if (asize <= capacity()) {
500         if (d->flags() & Data::CapacityReserved)
501             return;  // already reserved, don't shrink
502         if (!d->isShared()) {
503             // accept current allocation, don't shrink
504             d->setFlag(Data::CapacityReserved);
505             return;
506         }
507     }
508 
509     DataPointer detached(Data::allocate(qMax(asize, size()),
510                                         d->detachFlags() | Data::CapacityReserved));
511     detached->copyAppend(constBegin(), constEnd());
512     d.swap(detached);
513 }
514 
515 template <typename T>
516 inline void QList<T>::squeeze()
517 {
518     if (d->needsDetach() || size() != capacity()) {
519         // must allocate memory
520         DataPointer detached(Data::allocate(size(), d->detachFlags() & ~Data::CapacityReserved));
521         if (size()) {
522             detached->copyAppend(constBegin(), constEnd());
523         }
524         d.swap(detached);
525     }
526 }
527 
528 template <typename T>
529 inline void QList<T>::remove(qsizetype i, qsizetype n)
530 {
531     Q_ASSERT_X(size_t(i) + size_t(n) <= size_t(d->size), "QList::remove", "index out of range");
532     Q_ASSERT_X(n >= 0, "QList::remove", "invalid count");
533 
534     if (n == 0)
535         return;
536 
537     const size_t newSize = size() - n;
538     if (d->needsDetach() ||
539             ((d->flags() & Data::CapacityReserved) == 0
540              && newSize < d->allocatedCapacity()/2)) {
541         // allocate memory
542         DataPointer detached(Data::allocate(d->detachCapacity(newSize),
543                              d->detachFlags() & ~(Data::GrowsBackwards | Data::GrowsForward)));
544         const_iterator where = constBegin() + i;
545         if (newSize) {
546             detached->copyAppend(constBegin(), where);
547             detached->copyAppend(where + n, constEnd());
548         }
549         d.swap(detached);
550     } else {
551         // we're detached and we can just move data around
552         d->erase(d->begin() + i, d->begin() + i + n);
553     }
554 }
555 
556 template <typename T>
557 inline void QList<T>::prepend(const T &t)
558 { insert(0, 1, t); }
559 template <typename T>
560 void QList<T>::prepend(rvalue_ref t)
561 { insert(0, std::move(t)); }
562 
563 template<typename T>
564 inline T QList<T>::value(qsizetype i, const T &defaultValue) const
565 {
566     return size_t(i) < size_t(d->size) ? at(i) : defaultValue;
567 }
568 
569 template <typename T>
570 inline void QList<T>::append(const_iterator i1, const_iterator i2)
571 {
572     if (i1 == i2)
573         return;
574     const size_t newSize = size() + std::distance(i1, i2);
575     if (d->needsDetach() || newSize > d->allocatedCapacity()) {
576         DataPointer detached(Data::allocate(d->detachCapacity(newSize),
577                                             d->detachFlags() | Data::GrowsForward));
578         detached->copyAppend(constBegin(), constEnd());
579         detached->copyAppend(i1, i2);
580         d.swap(detached);
581     } else {
582         // we're detached and we can just move data around
583         d->copyAppend(i1, i2);
584     }
585 }
586 
587 template <typename T>
588 inline typename QList<T>::iterator
589 QList<T>::insert(qsizetype i, qsizetype n, parameter_type t)
590 {
591     Q_ASSERT_X(size_t(i) <= size_t(d->size), "QList<T>::insert", "index out of range");
592 
593     // we don't have a quick exit for n == 0
594     // it's not worth wasting CPU cycles for that
595 
596     const size_t newSize = size() + n;
597     if (d->needsDetach() || newSize > d->allocatedCapacity()) {
598         typename Data::ArrayOptions flags = d->detachFlags() | Data::GrowsForward;
599         if (size_t(i) <= newSize / 4)
600             flags |= Data::GrowsBackwards;
601 
602         DataPointer detached(Data::allocate(d->detachCapacity(newSize), flags));
603         const_iterator where = constBegin() + i;
604         detached->copyAppend(constBegin(), where);
605         detached->copyAppend(n, t);
606         detached->copyAppend(where, constEnd());
607         d.swap(detached);
608     } else {
609         // we're detached and we can just move data around
610         if (i == size()) {
611             d->copyAppend(n, t);
612         } else {
613             T copy(t);
614             d->insert(d.begin() + i, n, copy);
615         }
616     }
617     return d.begin() + i;
618 }
619 
620 template <typename T>
621 template <typename ...Args>
622 typename QList<T>::iterator
623 QList<T>::emplace(qsizetype i, Args&&... args)
624 {
625      Q_ASSERT_X(i >= 0 && i <= d->size, "QList<T>::insert", "index out of range");
626 
627     const size_t newSize = size() + 1;
628     if (d->needsDetach() || newSize > d->allocatedCapacity()) {
629         typename Data::ArrayOptions flags = d->detachFlags() | Data::GrowsForward;
630         if (size_t(i) <= newSize / 4)
631             flags |= Data::GrowsBackwards;
632 
633         DataPointer detached(Data::allocate(d->detachCapacity(newSize), flags));
634         const_iterator where = constBegin() + i;
635 
636         // First, create an element to handle cases, when a user moves
637         // the element from a container to the same container
638         detached->createInPlace(detached.begin() + i, std::forward<Args>(args)...);
639 
640         // Then, put the first part of the elements to the new location
641         detached->copyAppend(constBegin(), where);
642 
643         // After that, increase the actual size, because we created
644         // one extra element
645         ++detached.size;
646 
647         // Finally, put the rest of the elements to the new location
648         detached->copyAppend(where, constEnd());
649 
650         d.swap(detached);
651     } else {
652         d->emplace(d.begin() + i, std::forward<Args>(args)...);
653     }
654     return d.begin() + i;
655 }
656 
657 template <typename T>
658 typename QList<T>::iterator QList<T>::erase(const_iterator abegin, const_iterator aend)
659 {
660     Q_ASSERT_X(isValidIterator(abegin), "QList::erase", "The specified iterator argument 'abegin' is invalid");
661     Q_ASSERT_X(isValidIterator(aend), "QList::erase", "The specified iterator argument 'aend' is invalid");
662     Q_ASSERT(aend >= abegin);
663 
664     qsizetype i = std::distance(d.constBegin(), abegin);
665     qsizetype n = std::distance(abegin, aend);
666     remove(i, n);
667 
668     return d.begin() + i;
669 }
670 
671 template <typename T>
672 inline QList<T> &QList<T>::fill(parameter_type t, qsizetype newSize)
673 {
674     if (newSize == -1)
675         newSize = size();
676     if (d->needsDetach() || newSize > capacity()) {
677         // must allocate memory
678         DataPointer detached(Data::allocate(d->detachCapacity(newSize),
679                                             d->detachFlags()));
680         detached->copyAppend(newSize, t);
681         d.swap(detached);
682     } else {
683         // we're detached
684         const T copy(t);
685         d->assign(d.begin(), d.begin() + qMin(size(), newSize), t);
686         if (newSize > size())
687             d->copyAppend(newSize - size(), copy);
688     }
689     return *this;
690 }
691 
692 namespace QtPrivate {
693 template <typename T, typename U>
694 qsizetype indexOf(const QList<T> &vector, const U &u, qsizetype from)
695 {
696     if (from < 0)
697         from = qMax(from + vector.size(), qsizetype(0));
698     if (from < vector.size()) {
699         auto n = vector.begin() + from - 1;
700         auto e = vector.end();
701         while (++n != e)
702             if (*n == u)
703                 return qsizetype(n - vector.begin());
704     }
705     return -1;
706 }
707 
708 template <typename T, typename U>
709 qsizetype lastIndexOf(const QList<T> &vector, const U &u, qsizetype from)
710 {
711     if (from < 0)
712         from += vector.d->size;
713     else if (from >= vector.size())
714         from = vector.size() - 1;
715     if (from >= 0) {
716         auto b = vector.begin();
717         auto n = vector.begin() + from + 1;
718         while (n != b) {
719             if (*--n == u)
720                 return qsizetype(n - b);
721         }
722     }
723     return -1;
724 }
725 }
726 
727 template <typename T>
728 qsizetype QList<T>::indexOf(const T &t, qsizetype from) const noexcept
729 {
730     return QtPrivate::indexOf<T, T>(*this, t, from);
731 }
732 
733 template <typename T>
734 qsizetype QList<T>::lastIndexOf(const T &t, qsizetype from) const noexcept
735 {
736     return QtPrivate::lastIndexOf(*this, t, from);
737 }
738 
739 template <typename T>
740 inline QList<T> QList<T>::mid(qsizetype pos, qsizetype len) const
741 {
742     qsizetype p = pos;
743     qsizetype l = len;
744     using namespace QtPrivate;
745     switch (QContainerImplHelper::mid(d.size, &p, &l)) {
746     case QContainerImplHelper::Null:
747     case QContainerImplHelper::Empty:
748         return QList();
749     case QContainerImplHelper::Full:
750         return *this;
751     case QContainerImplHelper::Subset:
752         break;
753     }
754 
755     // Allocate memory
756     DataPointer copied(Data::allocate(l));
757     copied->copyAppend(constBegin() + p, constBegin() + p + l);
758     return copied;
759 }
760 
761 Q_DECLARE_SEQUENTIAL_ITERATOR(List)
762 Q_DECLARE_MUTABLE_SEQUENTIAL_ITERATOR(List)
763 
764 template <typename T>
765 size_t qHash(const QList<T> &key, size_t seed = 0)
766     noexcept(noexcept(qHashRange(key.cbegin(), key.cend(), seed)))
767 {
768     return qHashRange(key.cbegin(), key.cend(), seed);
769 }
770 
771 template <typename T>
772 auto operator<(const QList<T> &lhs, const QList<T> &rhs)
773     noexcept(noexcept(std::lexicographical_compare(lhs.begin(), lhs.end(),
774                                                    rhs.begin(), rhs.end())))
775     -> decltype(std::declval<T>() < std::declval<T>())
776 {
777     return std::lexicographical_compare(lhs.begin(), lhs.end(),
778                                         rhs.begin(), rhs.end());
779 }
780 
781 template <typename T>
782 auto operator>(const QList<T> &lhs, const QList<T> &rhs)
783     noexcept(noexcept(lhs < rhs))
784     -> decltype(lhs < rhs)
785 {
786     return rhs < lhs;
787 }
788 
789 template <typename T>
790 auto operator<=(const QList<T> &lhs, const QList<T> &rhs)
791     noexcept(noexcept(lhs < rhs))
792     -> decltype(lhs < rhs)
793 {
794     return !(lhs > rhs);
795 }
796 
797 template <typename T>
798 auto operator>=(const QList<T> &lhs, const QList<T> &rhs)
799     noexcept(noexcept(lhs < rhs))
800     -> decltype(lhs < rhs)
801 {
802     return !(lhs < rhs);
803 }
804 
805 /*
806    ### Qt 5:
807    ### This needs to be removed for next releases of Qt. It is a workaround for vc++ because
808    ### Qt exports QPolygon and QPolygonF that inherit QList<QPoint> and
809    ### QList<QPointF> respectively.
810 */
811 
812 #if defined(Q_CC_MSVC) && !defined(QT_BUILD_CORE_LIB)
813 QT_BEGIN_INCLUDE_NAMESPACE
814 #include <QtCore/qpoint.h>
815 QT_END_INCLUDE_NAMESPACE
816 extern template class Q_CORE_EXPORT QList<QPointF>;
817 extern template class Q_CORE_EXPORT QList<QPoint>;
818 #endif
819 
820 QList<uint> QStringView::toUcs4() const { return QtPrivate::convertToUcs4(*this); }
821 
822 QT_END_NAMESPACE
823 
824 #include <QtCore/qbytearraylist.h>
825 #include <QtCore/qstringlist.h>
826 
827 #endif // QLIST_H
