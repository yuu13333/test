Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2019 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 #include "generalhelper.h"
26 
27 #ifdef QUICK3D_MODULE
28 
29 #include "selectionboxgeometry.h"
30 
31 #include <QtQuick3D/qquick3dobject.h>
32 #include <QtQuick3D/private/qquick3dorthographiccamera_p.h>
33 #include <QtQuick3D/private/qquick3dperspectivecamera_p.h>
34 #include <QtQuick3D/private/qquick3dcamera_p.h>
35 #include <QtQuick3D/private/qquick3dnode_p.h>
36 #include <QtQuick3D/private/qquick3dmodel_p.h>
37 #include <QtQuick3D/private/qquick3dviewport_p.h>
38 #include <QtQuick3D/private/qquick3ddefaultmaterial_p.h>
39 #include <QtQuick3D/private/qquick3dscenemanager_p.h>
40 #include <QtQuick3DRuntimeRender/private/qssgrendercontextcore_p.h>
41 #include <QtQuick3DRuntimeRender/private/qssgrenderbuffermanager_p.h>
42 #include <QtQuick3DRuntimeRender/private/qssgrendermodel_p.h>
43 #include <QtQuick3DUtils/private/qssgbounds3_p.h>
44 #include <QtQuick3DUtils/private/qssgutils_p.h>
45 #include <QtQuick/qquickwindow.h>
46 #include <QtQuick/qquickitem.h>
47 #include <QtCore/qmath.h>
48 
49 #include <limits>
50 
51 namespace QmlDesigner {
52 namespace Internal {
53 
54 const QString _globalStateId = QStringLiteral("@GTS"); // global tool state
55 const QString _lastSceneIdKey = QStringLiteral("lastSceneId");
56 const QString _rootSizeKey = QStringLiteral("rootSize");
57 
58 GeneralHelper::GeneralHelper()
59     : QObject()
60 {
61     m_overlayUpdateTimer.setInterval(16);
62     m_overlayUpdateTimer.setSingleShot(true);
63     QObject::connect(&m_overlayUpdateTimer, &QTimer::timeout,
64                      this, &GeneralHelper::overlayUpdateNeeded);
65 
66     m_toolStateUpdateTimer.setSingleShot(true);
67     QObject::connect(&m_toolStateUpdateTimer, &QTimer::timeout,
68                      this, &GeneralHelper::handlePendingToolStateUpdate);
69 }
70 
71 void GeneralHelper::requestOverlayUpdate()
72 {
73     // Restart the timer on each request in attempt to ensure there's one frame between the last
74     // request and actual update.
75     m_overlayUpdateTimer.start();
76 }
77 
78 QString GeneralHelper::generateUniqueName(const QString &nameRoot)
79 {
80     static QHash<QString, int> counters;
81     int count = counters[nameRoot]++;
82     return QStringLiteral("%1_%2").arg(nameRoot).arg(count);
83 }
84 
85 void GeneralHelper::orbitCamera(QQuick3DCamera *camera, const QVector3D &startRotation,
86                                 const QVector3D &lookAtPoint, const QVector3D &pressPos,
87                                 const QVector3D &currentPos)
88 {
89     QVector3D dragVector = currentPos - pressPos;
90 
91     if (dragVector.length() < 0.001f)
92         return;
93 
94     camera->setEulerRotation(startRotation);
95     QVector3D newRotation(-dragVector.y(), -dragVector.x(), 0.f);
96     newRotation *= 0.5f; // Emprically determined multiplier for nice drag
97     newRotation += startRotation;
98 
99     camera->setEulerRotation(newRotation);
100 
101     const QVector3D oldLookVector = camera->position() - lookAtPoint;
102     QMatrix4x4 m = camera->sceneTransform();
103     const float *dataPtr(m.data());
104     QVector3D newLookVector(dataPtr[8], dataPtr[9], dataPtr[10]);
105     newLookVector.normalize();
106     newLookVector *= oldLookVector.length();
107 
108     camera->setPosition(lookAtPoint + newLookVector);
109 }
110 
111 // Pans camera and returns the new look-at point
112 QVector3D GeneralHelper::panCamera(QQuick3DCamera *camera, const QMatrix4x4 startTransform,
113                                    const QVector3D &startPosition, const QVector3D &startLookAt,
114                                    const QVector3D &pressPos, const QVector3D &currentPos,
115                                    float zoomFactor)
116 {
117     QVector3D dragVector = currentPos - pressPos;
118 
119     if (dragVector.length() < 0.001f)
120         return startLookAt;
121 
122     const float *dataPtr(startTransform.data());
123     const QVector3D xAxis = QVector3D(dataPtr[0], dataPtr[1], dataPtr[2]).normalized();
124     const QVector3D yAxis = QVector3D(dataPtr[4], dataPtr[5], dataPtr[6]).normalized();
125     const QVector3D xDelta = -1.f * xAxis * dragVector.x();
126     const QVector3D yDelta = yAxis * dragVector.y();
127     const QVector3D delta = (xDelta + yDelta) * zoomFactor;
128 
129     camera->setPosition(startPosition + delta);
130     return startLookAt + delta;
131 }
132 
133 float GeneralHelper::zoomCamera(QQuick3DViewport *viewPort, QQuick3DCamera *camera, float distance,
134                                 float defaultLookAtDistance, const QVector3D &lookAt,
135                                 float zoomFactor, bool relative)
136 {
137     // Emprically determined divisor for nice zoom
138     float multiplier = 1.f + (distance / 40.f);
139     float newZoomFactor = relative ? qBound(.01f, zoomFactor * multiplier, 100.f)
140                                    : zoomFactor;
141 
142     if (qobject_cast<QQuick3DOrthographicCamera *>(camera)) {
143         // Ortho camera we can simply scale
144         float orthoFactor = newZoomFactor;
145 #if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
146         if (viewPort) {
147             if (const QQuickWindow *w = viewPort->window())
148                 orthoFactor *= w->devicePixelRatio();
149         }
150 #else
151     Q_UNUSED(viewPort)
152 #endif
153         camera->setScale(QVector3D(orthoFactor, orthoFactor, orthoFactor));
154     } else if (qobject_cast<QQuick3DPerspectiveCamera *>(camera)) {
155         // Perspective camera is zoomed by moving camera forward or backward while keeping the
156         // look-at point the same
157         const QVector3D lookAtVec = (camera->position() - lookAt).normalized();
158         const float newDistance = defaultLookAtDistance * newZoomFactor;
159         camera->setPosition(lookAt + (lookAtVec * newDistance));
160     }
161 
162     return newZoomFactor;
163 }
164 
165 // Return value contains new lookAt point (xyz) and zoom factor (w)
166 QVector4D GeneralHelper::focusNodesToCamera(QQuick3DCamera *camera, float defaultLookAtDistance,
167                                             const QVariant &nodes, QQuick3DViewport *viewPort,
168                                             float oldZoom, bool updateZoom, bool closeUp)
169 {
170     if (!camera)
171         return QVector4D(0.f, 0.f, 0.f, 1.f);
172 
173     QList<QQuick3DNode *> nodeList;
174     const QVariantList varNodes = nodes.value<QVariantList>();
175     for (const auto &varNode : varNodes) {
176         auto model = varNode.value<QQuick3DNode *>();
177         if (model)
178             nodeList.append(model);
179     }
180 
181     // Get bounds
182     QVector3D totalMinBound;
183     QVector3D totalMaxBound;
184     const qreal defaultExtent = 200.;
185 
186     if (!nodeList.isEmpty()) {
187         static const float floatMin = std::numeric_limits<float>::lowest();
188         static const float floatMax = std::numeric_limits<float>::max();
189         totalMinBound = {floatMax, floatMax, floatMax};
190         totalMaxBound = {floatMin, floatMin, floatMin};
191     } else {
192         const float halfExtent = defaultExtent / 2.f;
193         totalMinBound = {-halfExtent, -halfExtent, -halfExtent};
194         totalMaxBound = {halfExtent, halfExtent, halfExtent};
195     }
196     for (const auto node : qAsConst(nodeList)) {
197         auto model = qobject_cast<QQuick3DModel *>(node);
198         qreal maxExtent = defaultExtent;
199         QVector3D center = node->scenePosition();
200         if (model) {
201             auto targetPriv = QQuick3DObjectPrivate::get(model);
202             if (auto renderModel = static_cast<QSSGRenderModel *>(targetPriv->spatialNode)) {
203                 QWindow *window = static_cast<QWindow *>(viewPort->window());
204                 if (window) {
205                     QSSGRef<QSSGRenderContextInterface> context;
206 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
207                     context = QSSGRenderContextInterface::getRenderContextInterface(quintptr(window));
208 #else
209                     context = targetPriv->sceneManager->rci;
210 #endif
211                     if (!context.isNull()) {
212                         QSSGBounds3 bounds;
213                         auto geometry = qobject_cast<SelectionBoxGeometry *>(model->geometry());
214                         if (geometry) {
215                             bounds = geometry->bounds();
216                         } else {
217                             auto bufferManager = context->bufferManager();
218                             bounds = renderModel->getModelBounds(bufferManager);
219                         }
220 
221                         center = renderModel->globalTransform.map(bounds.center());
222                         const QVector3D e = bounds.extents();
223                         const QVector3D s = model->sceneScale();
224                         qreal maxScale = qSqrt(qreal(s.x() * s.x() + s.y() * s.y() + s.z() * s.z()));
225                         maxExtent = qSqrt(qreal(e.x() * e.x() + e.y() * e.y() + e.z() * e.z()));
226                         maxExtent *= maxScale;
227 
228                         if (maxExtent < 0.0001)
229                             maxExtent = defaultExtent;
230                     }
231                 }
232             }
233         }
234         float halfExtent = float(maxExtent / 2.);
235         const QVector3D halfExtents {halfExtent, halfExtent, halfExtent};
236 
237         const QVector3D minBound = center - halfExtents;
238         const QVector3D maxBound = center + halfExtents;
239 
240         for (int i = 0; i < 3; ++i) {
241             totalMinBound[i] = qMin(minBound[i], totalMinBound[i]);
242             totalMaxBound[i] = qMax(maxBound[i], totalMaxBound[i]);
243         }
244     }
245 
246     QVector3D extents = totalMaxBound - totalMinBound;
247     QVector3D lookAt = totalMinBound + (extents / 2.f);
248     float maxExtent = qMax(extents.x(), qMax(extents.y(), extents.z()));
249 
250     // Reset camera position to default zoom
251     QMatrix4x4 m = camera->sceneTransform();
252     const float *dataPtr(m.data());
253     QVector3D newLookVector(dataPtr[8], dataPtr[9], dataPtr[10]);
254     newLookVector.normalize();
255     newLookVector *= defaultLookAtDistance;
256 
257     camera->setPosition(lookAt + newLookVector);
258 
259     float divisor = closeUp ? 900.f : 725.f;
260 
261     float newZoomFactor = updateZoom ? qBound(.01f, maxExtent / divisor, 100.f) : oldZoom;
262     float cameraZoomFactor = zoomCamera(viewPort, camera, 0, defaultLookAtDistance, lookAt,
263                                         newZoomFactor, false);
264 
265     return QVector4D(lookAt, cameraZoomFactor);
266 }
267 
268 bool GeneralHelper::fuzzyCompare(double a, double b)
269 {
270     return qFuzzyCompare(a, b);
271 }
272 
273 void GeneralHelper::delayedPropertySet(QObject *obj, int delay, const QString &property,
274                                        const QVariant &value)
275 {
276     QTimer::singleShot(delay, [obj, property, value]() {
277         obj->setProperty(property.toLatin1().constData(), value);
278     });
279 }
280 
281 // Returns the first valid QQuick3DPickResult from view at (posX, PosY).
282 QQuick3DPickResult GeneralHelper::pickViewAt(QQuick3DViewport *view, float posX, float posY)
283 {
284     if (!view)
285         return QQuick3DPickResult();
286 
287 #if QT_VERSION >= QT_VERSION_CHECK(6, 2, 1)
288     // Make sure global picking is on
289     view->setGlobalPickingEnabled(true);
290 
291     // With Qt 6.2+, select first suitable result from all picked objects
292     auto pickResults = view->pickAll(posX, posY);
293     for (auto pickResult : pickResults) {
294         if (isPickable(pickResult.objectHit()))
295             return pickResult;
296     }
297 #else
298     // With older Qt version we'll just pick the single object
299     auto pickResult = view->pick(posX, posY);
300     if (isPickable(pickResult.objectHit()))
301         return pickResult;
302 #endif
303     return QQuick3DPickResult();
304 }
305 
306 QQuick3DNode *GeneralHelper::resolvePick(QQuick3DNode *pickNode)
307 {
308     if (pickNode) {
309         // Check if the picked node actually specifies another node as the pick target
310         QVariant componentVar = pickNode->property("_pickTarget");
311         if (componentVar.isValid()) {
312             auto componentNode = componentVar.value<QQuick3DNode *>();
313             if (componentNode)
314                 return componentNode;
315         }
316     }
317     return pickNode;
318 }
319 
320 void GeneralHelper::registerGizmoTarget(QQuick3DNode *node)
321 {
322     if (!m_gizmoTargets.contains(node)) {
323         m_gizmoTargets.insert(node);
324         node->installEventFilter(this);
325     }
326 }
327 
328 void GeneralHelper::unregisterGizmoTarget(QQuick3DNode *node)
329 {
330     if (m_gizmoTargets.contains(node)) {
331         m_gizmoTargets.remove(node);
332         node->removeEventFilter(this);
333     }
334 }
335 
336 bool GeneralHelper::isLocked(QQuick3DNode *node)
337 {
338     if (node) {
339         QVariant lockValue = node->property("_edit3dLocked");
340         return lockValue.isValid() && lockValue.toBool();
341     }
342     return false;
343 }
344 
345 bool GeneralHelper::isHidden(QQuick3DNode *node)
346 {
347     if (node) {
348         QVariant hideValue = node->property("_edit3dHidden");
349         return hideValue.isValid() && hideValue.toBool();
350     }
351     return false;
352 }
353 
354 bool GeneralHelper::isPickable(QQuick3DNode *node) {
355     return (node && !isLocked(node) && !isHidden(node) && node->visible());
356 }
357 
358 void GeneralHelper::storeToolState(const QString &sceneId, const QString &tool, const QVariant &state,
359                                    int delay)
360 {
361     if (delay > 0) {
362         QVariantMap sceneToolState;
363         sceneToolState.insert(tool, state);
364         m_toolStatesPending.insert(sceneId, sceneToolState);
365         m_toolStateUpdateTimer.start(delay);
366     } else {
367         if (m_toolStateUpdateTimer.isActive())
368             handlePendingToolStateUpdate();
369         QVariant theState;
370         // Convert JS arrays to QVariantLists for easier handling down the line
371         // metaType().id() which only exist in Qt6 is the same as userType()
372         if (state.userType() != QMetaType::QString && state.canConvert(QMetaType::QVariantList))
373             theState = state.value<QVariantList>();
374         else
375             theState = state;
376         QVariantMap &sceneToolState = m_toolStates[sceneId];
377         if (sceneToolState[tool] != theState) {
378             sceneToolState.insert(tool, theState);
379             emit toolStateChanged(sceneId, tool, theState);
380         }
381     }
382 }
383 
384 void GeneralHelper::initToolStates(const QString &sceneId, const QVariantMap &toolStates)
385 {
386     m_toolStates[sceneId] = toolStates;
387 }
388 
389 void GeneralHelper::enableItemUpdate(QQuickItem *item, bool enable)
390 {
391     if (item)
392         item->setFlag(QQuickItem::ItemHasContents, enable);
393 }
394 
395 QVariantMap GeneralHelper::getToolStates(const QString &sceneId)
396 {
397     handlePendingToolStateUpdate();
398     if (m_toolStates.contains(sceneId))
399         return m_toolStates[sceneId];
400     return {};
401 }
402 
403 QString GeneralHelper::globalStateId() const
404 {
405     return _globalStateId;
406 }
407 
408 QString GeneralHelper::lastSceneIdKey() const
409 {
410     return _lastSceneIdKey;
411 }
412 
413 QString GeneralHelper::rootSizeKey() const
414 {
415     return _rootSizeKey;
416 }
417 
418 double GeneralHelper::brightnessScaler() const
419 {
420     // Light brightness was rescaled in Qt6 from 100 -> 1.
421 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
422     return 100.;
423 #else
424     return 1.;
425 #endif
426 }
427 
428 void GeneralHelper::setMultiSelectionTargets(QQuick3DNode *multiSelectRootNode,
429                                              const QVariantList &selectedList)
430 {
431     // Filter selection to contain only topmost parent nodes in the selection
432     m_multiSelDataMap.clear();
433     m_multiSelNodes.clear();
434     for (auto &connection : qAsConst(m_multiSelectConnections))
435         disconnect(connection);
436     m_multiSelectConnections.clear();
437     m_multiSelectRootNode = multiSelectRootNode;
438     QSet<QQuick3DNode *> selNodes;
439 
440     for (const auto &var : selectedList) {
441         QQuick3DNode *node = nullptr;
442         node = var.value<QQuick3DNode *>();
443         if (node)
444             selNodes.insert(node);
445     }
446     for (const auto selNode : qAsConst(selNodes)) {
447         bool found = false;
448         QQuick3DNode *parent = selNode->parentNode();
449         while (parent) {
450             if (selNodes.contains(parent)) {
451                 found = true;
452                 break;
453             }
454             parent = parent->parentNode();
455         }
456         if (!found) {
457             m_multiSelDataMap.insert(selNode, {});
458             m_multiSelNodes.append(QVariant::fromValue(selNode));
459             m_multiSelectConnections.append(connect(selNode, &QObject::destroyed, [this]() {
460                 // If any multiselected node is destroyed, assume the entire selection is invalid.
461                 // The new selection should be notified by creator immediately after anyway.
462                 m_multiSelDataMap.clear();
463                 m_multiSelNodes.clear();
464                 for (auto &connection : qAsConst(m_multiSelectConnections))
465                     disconnect(connection);
466                 m_multiSelectConnections.clear();
467             }));
468             m_multiSelectConnections.append(connect(selNode, &QQuick3DNode::sceneTransformChanged,
469                                                     [this]() {
470                 // Reposition the multiselection root node if scene transform of any multiselected
471                 // node changes outside of drag (i.e. changes originating from creator side)
472                 if (!m_blockMultiSelectionNodePositioning)
473                     resetMultiSelectionNode();
474             }));
475         }
476     }
477 
478     resetMultiSelectionNode();
479     m_blockMultiSelectionNodePositioning = false;
480 }
481 
482 void GeneralHelper::resetMultiSelectionNode()
483 {
484     for (auto it = m_multiSelDataMap.begin(); it != m_multiSelDataMap.end(); ++it)
485         it.value() = {pivotScenePosition(it.key()), it.key()->scale(),
486                       it.key()->rotation(), it.key()->sceneRotation()};
487 
488     m_multiSelNodeData = {};
489     if (!m_multiSelDataMap.isEmpty()) {
490         for (const auto &data : qAsConst(m_multiSelDataMap))
491             m_multiSelNodeData.startScenePos += data.startScenePos;
492         m_multiSelNodeData.startScenePos /= m_multiSelDataMap.size();
493     }
494     m_multiSelectRootNode->setPosition(m_multiSelNodeData.startScenePos);
495     m_multiSelectRootNode->setRotation({});
496     m_multiSelectRootNode->setScale({1.f, 1.f, 1.f});
497 }
498 
499 void GeneralHelper::restartMultiSelection()
500 {
501     resetMultiSelectionNode();
502     m_blockMultiSelectionNodePositioning = true;
503 }
504 
505 QVariantList GeneralHelper::multiSelectionTargets() const
506 {
507     return m_multiSelNodes;
508 }
509 
510 void GeneralHelper::moveMultiSelection(bool commit)
511 {
512     // Move the multiselected nodes in global space by offset from multiselection start to scenePos
513     QVector3D globalOffset = m_multiSelectRootNode->scenePosition() - m_multiSelNodeData.startScenePos;
514     for (auto it = m_multiSelDataMap.constBegin(); it != m_multiSelDataMap.constEnd(); ++it) {
515         QVector3D newGlobalPos = it.value().startScenePos + globalOffset;
516         QMatrix4x4 m;
517         if (it.key()->parentNode())
518             m = it.key()->parentNode()->sceneTransform();
519         it.key()->setPosition(m.inverted() * newGlobalPos);
520     }
521     m_blockMultiSelectionNodePositioning = !commit;
522 }
523 
524 void GeneralHelper::scaleMultiSelection(bool commit)
525 {
526     // Offset the multiselected nodes in global space according to scale factor and scale them by
527     // the same factor.
528 
529     const QVector3D sceneScale = m_multiSelectRootNode->scale();
530     const QVector3D unitVector {1.f, 1.f, 1.f};
531     const QVector3D diffScale = sceneScale - unitVector;
532 
533     for (auto it = m_multiSelDataMap.constBegin(); it != m_multiSelDataMap.constEnd(); ++it) {
534         const QVector3D newGlobalPos = m_multiSelNodeData.startScenePos
535                 + (it.value().startScenePos - m_multiSelNodeData.startScenePos) * sceneScale;
536         QMatrix4x4 parentMat;
537         if (it.key()->parentNode())
538             parentMat = it.key()->parentNode()->sceneTransform().inverted();
539         it.key()->setPosition(parentMat * newGlobalPos);
540 
541         QMatrix4x4 mat;
542         mat.rotate(it.value().startSceneRot);
543 
544         auto scaleDim = [&](int dim) -> QVector3D {
545             QVector3D dimScale;
546             float diffScaleDim = diffScale[dim];
547             dimScale[dim] = diffScaleDim;
548             dimScale = (mat.inverted() * dimScale).normalized() * diffScaleDim;
549             for (int i = 0; i < 3; ++i)
550                 dimScale[i] = qAbs(dimScale[i]);
551             if (sceneScale[dim] < 1.0f)
552                 dimScale = -dimScale;
553             return dimScale;
554         };
555 
556         QVector3D finalScale = scaleDim(0) + scaleDim(1) + scaleDim(2) + unitVector;
557 
558         it.key()->setScale(finalScale * it.value().startScale);
559     }
560     m_blockMultiSelectionNodePositioning = !commit;
561 }
562 
563 void GeneralHelper::rotateMultiSelection(bool commit)
564 {
565     // Rotate entire selection around the multiselection node
566     const QQuaternion sceneRotation = m_multiSelectRootNode->sceneRotation();
567     QVector3D rotAxis;
568     float rotAngle = 0;
569     sceneRotation.getAxisAndAngle(&rotAxis, &rotAngle);
570 
571     for (auto it = m_multiSelDataMap.constBegin(); it != m_multiSelDataMap.constEnd(); ++it) {
572         QVector3D globalOffset = it.value().startScenePos - m_multiSelNodeData.startScenePos;
573         QVector3D newGlobalPos = m_multiSelNodeData.startScenePos + sceneRotation * globalOffset;
574         QMatrix4x4 parentMat;
575         if (it.key()->parentNode())
576             parentMat = it.key()->parentNode()->sceneTransform().inverted();
577         it.key()->setPosition(parentMat * newGlobalPos);
578         it.key()->setRotation(it.value().startRot);
579         it.key()->rotate(rotAngle, rotAxis, QQuick3DNode::SceneSpace);
580     }
581     m_blockMultiSelectionNodePositioning = !commit;
582 }
583 
584 bool GeneralHelper::isMacOS() const
585 {
586 #ifdef Q_OS_MACOS
587     return true;
588 #else
589     return false;
590 #endif
591 }
592 
593 void GeneralHelper::addRotationBlocks(const QSet<QQuick3DNode *> &nodes)
594 {
595     m_rotationBlockedNodes.unite(nodes);
596     emit rotationBlocksChanged();
597 }
598 
599 void GeneralHelper::removeRotationBlocks(const QSet<QQuick3DNode *> &nodes)
600 {
601     for (auto node : nodes)
602         m_rotationBlockedNodes.remove(node);
603     emit rotationBlocksChanged();
604 }
605 
606 bool GeneralHelper::isRotationBlocked(QQuick3DNode *node) const
607 {
608     return m_rotationBlockedNodes.contains(node);
609 }
610 
611 bool GeneralHelper::eventFilter(QObject *obj, QEvent *event)
612 {
613     if (event->type() == QEvent::DynamicPropertyChange) {
614         auto node = qobject_cast<QQuick3DNode *>(obj);
615         if (m_gizmoTargets.contains(node)) {
616             auto de = static_cast<QDynamicPropertyChangeEvent *>(event);
617             if (de->propertyName() == "_edit3dLocked")
618                 emit lockedStateChanged(node);
619             else if (de->propertyName() == "_edit3dHidden")
620                 emit hiddenStateChanged(node);
621         }
622     }
623     return QObject::eventFilter(obj, event);
624 }
625 
626 void GeneralHelper::handlePendingToolStateUpdate()
627 {
628     m_toolStateUpdateTimer.stop();
629     auto sceneIt = m_toolStatesPending.constBegin();
630     while (sceneIt != m_toolStatesPending.constEnd()) {
631         const QVariantMap &sceneToolState = sceneIt.value();
632         auto toolIt = sceneToolState.constBegin();
633         while (toolIt != sceneToolState.constEnd()) {
634             storeToolState(sceneIt.key(), toolIt.key(), toolIt.value());
635             ++toolIt;
636         }
637         ++sceneIt;
638     }
639     m_toolStatesPending.clear();
640 }
641 
642 // Calculate scene position of the node's pivot point, which in practice is just the position
643 // of the node without applying the pivot offset.
644 QVector3D GeneralHelper::pivotScenePosition(QQuick3DNode *node) const
645 {
646     if (!node)
647         return {};
648 
649     QQuick3DNode *parent = node->parentNode();
650     if (!parent)
651         return node->position();
652 
653     QMatrix4x4 localTransform;
654     localTransform.translate(node->position());
655 
656     const QMatrix4x4 sceneTransform = parent->sceneTransform() * localTransform;
657 
658     return mat44::getPosition(sceneTransform);
659 }
660 
661 }
662 }
663 
664 #endif // QUICK3D_MODULE
