Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2019 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Marc Mutz <marc.mutz@kdab.com>
4 ** Contact: http://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 #ifndef QWAITCONDITION_P_H
40 #define QWAITCONDITION_P_H
41 
42 //
43 //  W A R N I N G
44 //  -------------
45 //
46 // This file is not part of the Qt API.  It exists for the convenience
47 // of qmutex.cpp, qmutex_unix.cpp, and qmutex_win.cpp.  This header
48 // file may change from version to version without notice, or even be
49 // removed.
50 //
51 // We mean it.
52 //
53 
54 #include <QtCore/QWaitCondition>
55 #include <QtCore/QMutex>
56 #include <QtCore/QDeadlineTimer>
57 
58 #include <condition_variable>
59 #include <mutex>
60 
61 QT_BEGIN_NAMESPACE
62 
63 namespace QtPrivate
64 {
65 
66 #if defined(Q_OS_INTEGRITY)
67 
68 class condition_variable;
69 
70 class mutex : private QMutex {
71     friend class QtPrivate::condition_variable;
72 public:
73     // all special member functions are ok!
74     // do not expose the (QMutex::Recursive) ctor
75     // don't use 'using QMutex::lock;' etc as those have the wrong noexcept
76 
77     void lock() { return QMutex::lock(); }
78     void unlock() { return QMutex::unlock(); }
79     bool try_lock() { return QMutex::tryLock(); }
80 };
81 
82 class condition_variable : private QWaitCondition {
83 public:
84     // all special member functions are ok!
85 
86     void notify_one() { QWaitCondition::wakeOne(); }
87     void notify_all() { QWaitCondition::wakeAll(); }
88 
89     void wait(std::unique_lock<QtPrivate::mutex> &lock) { QWaitCondition::wait(lock.mutex()); }
90     template <class Predicate>
91     void wait(std::unique_lock<QtPrivate::mutex> &lock, Predicate p)
92     {
93         while (!p())
94             wait(lock);
95     }
96 
97     template <typename Rep, typename Period>
98     std::cv_status wait_for(std::unique_lock<QtPrivate::mutex> &lock, const std::chrono::duration<Rep, Period> &d)
99     {
100         return QWaitCondition::wait(lock.mutex(), QDeadlineTimer{d})
101                 ? std::cv_status::no_timeout
102                 : std::cv_status::timeout;
103     }
104     template <typename Rep, typename Period, typename Predicate>
105     bool wait_for(std::unique_lock<QtPrivate::mutex> &lock, const std::chrono::duration<Rep, Period> &d, Predicate p)
106     {
107         const auto timer = QDeadlineTimer{d};
108         while (!p()) {
109             if (!QWaitCondition::wait(lock.mutex(), timer))
110                 return p();
111         }
112         return true;
113     }
114 
115     template <typename Clock, typename Duration>
116     std::cv_status wait_until(std::unique_lock<QtPrivate::mutex> &lock, const std::chrono::time_point<Clock, Duration> &t)
117     {
118         return QWaitCondition::wait(lock.mutex(), QDeadlineTimer{t})
119                 ? std::cv_status::no_timeout
120                 : std::cv_status::timeout;
121     }
122 
123     template <typename Clock, typename Duration, typename Predicate>
124     bool wait_until(std::unique_lock<QtPrivate::mutex> &lock, const std::chrono::time_point<Clock, Duration> &t, Predicate p)
125     {
126         const auto timer = QDeadlineTimer{t};
127         while (!p()) {
128             if (!QWaitCondition::wait(lock.mutex(), timer))
129                 return p();
130         }
131         return true;
132     }
133 
134 };
135 
136 #else // Integrity
137 
138 using mutex = std::mutex;
139 using condition_variable = std::condition_variable;
140 
141 #endif // Integrity
142 
143 } // namespace QtPrivate
144 
145 QT_END_NAMESPACE
146 
147 #endif /* QWAITCONDITION_P_H */
