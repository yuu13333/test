Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2020 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "splashscreencontainerwidget.h"
27 #include "splashscreenwidget.h"
28 
29 #include <texteditor/textdocument.h>
30 #include <texteditor/texteditor.h>
31 #include <utils/utilsicons.h>
32 
33 #include <QCheckBox>
34 #include <QColorDialog>
35 #include <QComboBox>
36 #include <QHBoxLayout>
37 #include <QFileDialog>
38 #include <QFileInfo>
39 #include <QFormLayout>
40 #include <QGroupBox>
41 #include <QTabWidget>
42 #include <QToolButton>
43 #include <QVBoxLayout>
44 
45 namespace Android {
46 namespace Internal {
47 
48 namespace {
49 const char extraExtraExtraHighDpiImagePath[] = "/res/drawable-xxxhdpi/";
50 const char extraExtraHighDpiImagePath[] = "/res/drawable-xxhdpi/";
51 const char extraHighDpiImagePath[] = "/res/drawable-xhdpi/";
52 const char highDpiImagePath[] = "/res/drawable-hdpi/";
53 const char mediumDpiImagePath[] = "/res/drawable-mdpi/";
54 const char lowDpiImagePath[] = "/res/drawable-ldpi/";
55 const char splashscreenName[] = "splashscreen";
56 const char splashscreenPortraitName[] = "splashscreen_port";
57 const char splashscreenLandscapeName[] = "splashscreen_land";
58 const char splashscreenFileName[] = "logo";
59 const char splashscreenPortraitFileName[] = "logo_port";
60 const char splashscreenLandscapeFileName[] = "logo_land";
61 const char imageSuffix[] = ".png";
62 const QString fileDialogImageFiles = QString(QWidget::tr("Images (*.png *.jpg)"));
63 const QSize lowDpiImageSize{200, 320};
64 const QSize mediumDpiImageSize{320, 480};
65 const QSize highDpiImageSize{480, 800};
66 const QSize extraHighDpiImageSize{720, 1280};
67 const QSize extraExtraHighDpiImageSize{960, 1600};
68 const QSize extraExtraExtraHighDpiImageSize{1280, 1920};
69 const QSize displaySize{48, 72};
70 const QSize landscapeDisplaySize{72, 48};
71 // https://developer.android.com/training/multiscreen/screendensities#TaskProvideAltBmp
72 const int extraExtraExtraHighDpiScalingRatio = 16;
73 const int extraExtraHighDpiScalingRatio = 12;
74 const int extraHighDpiScalingRatio = 8;
75 const int highDpiScalingRatio = 6;
76 const int mediumDpiScalingRatio = 4;
77 const int lowDpiScalingRatio = 3;
78 
79 QString manifestDir(TextEditor::TextEditorWidget *textEditorWidget)
80 {
81     // Get the manifest file's directory from its filepath.
82     return textEditorWidget->textDocument()->filePath().toFileInfo().absolutePath();
83 }
84 
85 }
86 
87 static SplashScreenWidget *addWidgetToPage(QWidget *page,
88                                            const QSize &size, const QSize &screenSize,
89                                            const QString &title, const QString &tooltip,
90                                            TextEditor::TextEditorWidget *textEditorWidget,
91                                            const QString &splashScreenPath,
92                                            int scalingRatio, int maxScalingRatio,
93                                            QHBoxLayout *pageLayout,
94                                            QVector<SplashScreenWidget *> &widgetContainer)
95 {
96     auto splashScreenWidget = new SplashScreenWidget(page,
97                                                      size,
98                                                      screenSize,
99                                                      title,
100                                                      tooltip,
101                                                      splashScreenPath,
102                                                      scalingRatio,
103                                                      maxScalingRatio,
104                                                      textEditorWidget);
105     pageLayout->addWidget(splashScreenWidget);
106     widgetContainer.push_back(splashScreenWidget);
107     return splashScreenWidget;
108 }
109 
110 static QWidget *createPage(TextEditor::TextEditorWidget *textEditorWidget,
111                            QVector<SplashScreenWidget *> &widgetContainer,
112                            QVector<SplashScreenWidget *> &portraitWidgetContainer,
113                            QVector<SplashScreenWidget *> &landscapeWidgetContainer,
114                            int scalingRatio,
115                            const QSize &size,
116                            const QSize &portraitSize,
117                            const QSize &landscapeSize,
118                            const QString &path)
119 {
120     auto sizeToStr = [](const QSize &size) { return QString(" (%1x%2)").arg(size.width()).arg(size.height()); };
121     QWidget *page = new QWidget();
122     auto pageLayout = new QHBoxLayout(page);
123     auto genericWidget= addWidgetToPage(page,
124                                         displaySize, size,
125                                         SplashScreenContainerWidget::tr("Splash screen"),
126                                         SplashScreenContainerWidget::tr("Select splash screen image")
127                                         + sizeToStr(size),
128                                         textEditorWidget,
129                                         path,
130                                         scalingRatio, extraExtraExtraHighDpiScalingRatio,
131                                         pageLayout,
132                                         widgetContainer);
133 
134     auto portraitWidget = addWidgetToPage(page,
135                                           displaySize, portraitSize,
136                                           SplashScreenContainerWidget::tr("Portrait splash screen"),
137                                           SplashScreenContainerWidget::tr("Select portrait splash screen image")
138                                           + sizeToStr(portraitSize),
139                                           textEditorWidget,
140                                           path,
141                                           scalingRatio, extraExtraExtraHighDpiScalingRatio,
142                                           pageLayout,
143                                           portraitWidgetContainer);
144 
145     auto landscapeWidget = addWidgetToPage(page,
146                                            landscapeDisplaySize, landscapeSize,
147                                            SplashScreenContainerWidget::tr("Landscape splash screen"),
148                                            SplashScreenContainerWidget::tr("Select landscape splash screen image")
149                                            + sizeToStr(landscapeSize),
150                                            textEditorWidget,
151                                            path,
152                                            scalingRatio, extraExtraExtraHighDpiScalingRatio,
153                                            pageLayout,
154                                            landscapeWidgetContainer);
155 
156     auto clearButton = new QToolButton(page);
157     clearButton->setText(SplashScreenContainerWidget::tr("Clear All"));
158     pageLayout->addWidget(clearButton);
159     pageLayout->setAlignment(clearButton, Qt::AlignVCenter);
160     SplashScreenContainerWidget::connect(clearButton, &QAbstractButton::clicked,
161                                        genericWidget, &SplashScreenWidget::clearImage);
162     SplashScreenContainerWidget::connect(clearButton, &QAbstractButton::clicked,
163                                        portraitWidget, &SplashScreenWidget::clearImage);
164     SplashScreenContainerWidget::connect(clearButton, &QAbstractButton::clicked,
165                                        landscapeWidget, &SplashScreenWidget::clearImage);
166     return page;
167 }
168 
169 
170 SplashScreenContainerWidget::SplashScreenContainerWidget(
171         QWidget *parent,
172         TextEditor::TextEditorWidget *textEditorWidget)
173     : QStackedWidget(parent),
174       m_textEditorWidget(textEditorWidget)
175 {
176     auto noSplashscreenWidget = new QWidget(this);
177     auto splashscreenWidget = new QWidget(this);
178     auto layout = new QHBoxLayout(this);
179     auto settingsLayout = new QVBoxLayout(this);
180     auto noSplashscreenLayout = new QVBoxLayout(this);
181     auto formLayout = new QFormLayout(this);
182     QTabWidget *tab = new QTabWidget(this);
183 
184     m_stickyCheck = new QCheckBox(this);
185     m_stickyCheck->setToolTip(tr("A non-sticky splash screen is hidden automatically when an activity is drawn.\n"
186                                  "To hide a sticky splash screen, invoke QtAndroid::hideSplashScreen()."));
187     formLayout->addRow(tr("Sticky splash screen:"), m_stickyCheck);
188 
189     m_imageShowMode = new QComboBox(this);
190     formLayout->addRow(tr("Image show mode:"), m_imageShowMode);
191     const QList<QStringList> imageShowModeMethodsMap = {
192         {"center", "Place the object in the center of the screen in both the vertical and horizontal axis,\n"
193                    "not changing its size."},
194         {"fill", "Grow the horizontal and vertical size of the image if needed so it completely fills its screen."}};
195     for (int i = 0; i < imageShowModeMethodsMap.size(); ++i) {
196         m_imageShowMode->addItem(imageShowModeMethodsMap.at(i).first());
197         m_imageShowMode->setItemData(i, imageShowModeMethodsMap.at(i).at(1), Qt::ToolTipRole);
198     }
199 
200     m_backgroundColor = new QToolButton(this);
201     m_backgroundColor->setToolTip(tr("Background color of the splash screen."));
202     formLayout->addRow(tr("Background color:"), m_backgroundColor);
203 
204     m_masterImage = new QToolButton(this);
205     m_masterImage->setToolTip(tr("Select master image to use."));
206     m_masterImage->setIcon(QIcon::fromTheme(QLatin1String("document-open"), Utils::Icons::OPENFILE.icon()));
207     formLayout->addRow(tr("Master image:"), m_masterImage);
208 
209     m_portraitMasterImage = new QToolButton(this);
210     m_portraitMasterImage->setToolTip(tr("Select portrait master image to use."));
211     m_portraitMasterImage->setIcon(QIcon::fromTheme(QLatin1String("document-open"), Utils::Icons::OPENFILE.icon()));
212     formLayout->addRow(tr("Portrait master image:"), m_portraitMasterImage);
213 
214     m_landscapeMasterImage = new QToolButton(this);
215     m_landscapeMasterImage->setToolTip(tr("Select landscape master image to use."));
216     m_landscapeMasterImage->setIcon(QIcon::fromTheme(QLatin1String("document-open"), Utils::Icons::OPENFILE.icon()));
217     formLayout->addRow(tr("Landscape master image:"), m_landscapeMasterImage);
218 
219     auto clearAllButton = new QToolButton(this);
220     clearAllButton->setText(SplashScreenContainerWidget::tr("Clear All"));
221 
222     auto ldpiPage = createPage(textEditorWidget,
223                                m_imageWidgets, m_portraitImageWidgets, m_landscapeImageWidgets,
224                                lowDpiScalingRatio,
225                                lowDpiImageSize,
226                                lowDpiImageSize,
227                                lowDpiImageSize.transposed(),
228                                lowDpiImagePath);
229     tab->addTab(ldpiPage, tr("LDPI"));
230     auto mdpiPage = createPage(textEditorWidget,
231                                m_imageWidgets, m_portraitImageWidgets, m_landscapeImageWidgets,
232                                mediumDpiScalingRatio,
233                                mediumDpiImageSize,
234                                mediumDpiImageSize,
235                                mediumDpiImageSize.transposed(),
236                                mediumDpiImagePath);
237     tab->addTab(mdpiPage, tr("MDPI"));
238     auto hdpiPage = createPage(textEditorWidget,
239                                m_imageWidgets, m_portraitImageWidgets, m_landscapeImageWidgets,
240                                highDpiScalingRatio,
241                                highDpiImageSize,
242                                highDpiImageSize,
243                                highDpiImageSize.transposed(),
244                                highDpiImagePath);
245     tab->addTab(hdpiPage, tr("HDPI"));
246     auto xHdpiPage = createPage(textEditorWidget,
247                                 m_imageWidgets, m_portraitImageWidgets, m_landscapeImageWidgets,
248                                 extraHighDpiScalingRatio,
249                                 extraHighDpiImageSize,
250                                 extraHighDpiImageSize,
251                                 extraHighDpiImageSize.transposed(),
252                                 extraHighDpiImagePath);
253     tab->addTab(xHdpiPage, tr("XHDPI"));
254     auto xxHdpiPage = createPage(textEditorWidget,
255                                  m_imageWidgets, m_portraitImageWidgets, m_landscapeImageWidgets,
256                                  extraExtraHighDpiScalingRatio,
257                                  extraExtraHighDpiImageSize,
258                                  extraExtraHighDpiImageSize,
259                                  extraExtraHighDpiImageSize.transposed(),
260                                  extraExtraHighDpiImagePath);
261     tab->addTab(xxHdpiPage, tr("XXHDPI"));
262     auto xxxHdpiPage = createPage(textEditorWidget,
263                                   m_imageWidgets, m_portraitImageWidgets, m_landscapeImageWidgets,
264                                   extraExtraExtraHighDpiScalingRatio,
265                                   extraExtraExtraHighDpiImageSize,
266                                   extraExtraExtraHighDpiImageSize,
267                                   extraExtraExtraHighDpiImageSize.transposed(),
268                                   extraExtraExtraHighDpiImagePath);
269     tab->addTab(xxxHdpiPage, tr("XXXHDPI"));
270     formLayout->setContentsMargins(10, 10, 10, 10);
271     formLayout->setSpacing(10);
272     settingsLayout->addLayout(formLayout);
273     settingsLayout->addWidget(clearAllButton);
274     settingsLayout->setAlignment(clearAllButton, Qt::AlignHCenter);
275     layout->addLayout(settingsLayout);
276     layout->addWidget(tab);
277     splashscreenWidget->setLayout(layout);
278     addWidget(splashscreenWidget);
279     setBackgroundColor(Qt::white);
280 
281     auto warningLabel = new QLabel(this);
282     warningLabel->setAlignment(Qt::AlignHCenter);
283     warningLabel->setText(tr("An image is used for the splashscreen. Qt Creator manages\n"
284                              "splashscreen by using a different method which requires changing\n"
285                              "the manifest file by overriding your settings. Allow override?"));
286     m_convertSplashscreen = new QToolButton(this);
287     m_convertSplashscreen->setText(tr("Convert"));
288     noSplashscreenLayout->addStretch();
289     noSplashscreenLayout->addWidget(warningLabel);
290     noSplashscreenLayout->addWidget(m_convertSplashscreen);
291     noSplashscreenLayout->addStretch();
292     noSplashscreenLayout->setSpacing(10);
293     noSplashscreenLayout->setAlignment(warningLabel, Qt::AlignHCenter);
294     noSplashscreenLayout->setAlignment(m_convertSplashscreen, Qt::AlignHCenter);
295     noSplashscreenWidget->setLayout(noSplashscreenLayout);
296     addWidget(noSplashscreenWidget);
297 
298     const auto splashFileName = QString(splashscreenFileName).append(imageSuffix);
299     const auto portraitSplashFileName = QString(splashscreenPortraitFileName).append(imageSuffix);
300     const auto landscapeSplashFileName = QString(splashscreenLandscapeFileName).append(imageSuffix);
301 
302     for (auto &&imageWidget : m_imageWidgets)
303         imageWidget->setImageFileName(splashFileName);
304     for (auto &&imageWidget : m_portraitImageWidgets)
305         imageWidget->setImageFileName(portraitSplashFileName);
306     for (auto &&imageWidget : m_landscapeImageWidgets)
307         imageWidget->setImageFileName(landscapeSplashFileName);
308 
309     for (auto &&imageWidget : m_imageWidgets) {
310         connect(imageWidget, &SplashScreenWidget::imageChanged, [this]() {
311             createSplashscreenThemes();
312             emit splashScreensModified();
313         });
314     }
315     for (auto &&imageWidget : m_portraitImageWidgets) {
316         connect(imageWidget, &SplashScreenWidget::imageChanged, [this]() {
317             createSplashscreenThemes();
318             emit splashScreensModified();
319         });
320     }
321     for (auto &&imageWidget : m_landscapeImageWidgets) {
322         connect(imageWidget, &SplashScreenWidget::imageChanged, [this]() {
323             createSplashscreenThemes();
324             emit splashScreensModified();
325         });
326     }
327     connect(m_stickyCheck, &QCheckBox::stateChanged, [this](int state) {
328         bool old = m_splashScreenSticky;
329         m_splashScreenSticky = (state == Qt::Checked);
330         if (old != m_splashScreenSticky)
331             emit splashScreensModified();
332     });
333     connect(m_backgroundColor, &QToolButton::clicked, [this]() {
334         const QColor color = QColorDialog::getColor(m_splashScreenBackgroundColor,
335                                                     this,
336                                                     tr("Select background color"));
337         if (color.isValid()) {
338             setBackgroundColor(color);
339             createSplashscreenThemes();
340             emit splashScreensModified();
341         }
342     });
343     connect(m_masterImage, &QToolButton::clicked, [this]() {
344         const QString file = QFileDialog::getOpenFileName(this, tr("Select master image"),
345                                                     QDir::homePath(), fileDialogImageFiles);
346         if (!file.isEmpty()) {
347             for (auto &&imageWidget : m_imageWidgets)
348                 imageWidget->setImageFromPath(file);
349             createSplashscreenThemes();
350             emit splashScreensModified();
351         }
352     });
353     connect(m_portraitMasterImage, &QToolButton::clicked, [this]() {
354         const QString file = QFileDialog::getOpenFileName(this, tr("Select portrait master image"),
355                                                     QDir::homePath(), fileDialogImageFiles);
356         if (!file.isEmpty()) {
357             for (auto &&imageWidget : m_portraitImageWidgets)
358                 imageWidget->setImageFromPath(file);
359             createSplashscreenThemes();
360             emit splashScreensModified();
361         }
362     });
363     connect(m_landscapeMasterImage, &QToolButton::clicked, [this]() {
364         const QString file = QFileDialog::getOpenFileName(this, tr("Select landscape master image"),
365                                                     QDir::homePath(), fileDialogImageFiles);
366         if (!file.isEmpty()) {
367             for (auto &&imageWidget : m_landscapeImageWidgets)
368                 imageWidget->setImageFromPath(file);
369             createSplashscreenThemes();
370             emit splashScreensModified();
371         }
372     });
373     connect(m_imageShowMode, &QComboBox::currentTextChanged, [this](const QString &mode) {
374         setImageShowMode(mode);
375         createSplashscreenThemes();
376         emit splashScreensModified();
377     });
378     connect(clearAllButton, &QToolButton::clicked, [this]() {
379         clearAll();
380         emit splashScreensModified();
381     });
382     connect(m_convertSplashscreen, &QToolButton::clicked, [this]() {
383         clearAll();
384         setCurrentIndex(0);
385         emit splashScreensModified();
386     });
387 }
388 
389 void SplashScreenContainerWidget::loadImages()
390 {
391     if (isSplashscreenEnabled()) {
392         for (auto &&imageWidget : m_imageWidgets) {
393             imageWidget->loadImage();
394         }
395         loadSplashscreenDrawParams(splashscreenName);
396         for (auto &&imageWidget : m_portraitImageWidgets) {
397             imageWidget->loadImage();
398         }
399         loadSplashscreenDrawParams(splashscreenPortraitName);
400         for (auto &&imageWidget : m_landscapeImageWidgets) {
401             imageWidget->loadImage();
402         }
403         loadSplashscreenDrawParams(splashscreenLandscapeName);
404         createSplashscreenThemes();
405     }
406 }
407 
408 void SplashScreenContainerWidget::loadSplashscreenDrawParams(const QString &name)
409 {
410     QFile file(QLatin1String("%1/res/drawable/%2.xml").arg(manifestDir(m_textEditorWidget)).arg(name));
411     if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
412         QXmlStreamReader reader(&file);
413         reader.setNamespaceProcessing(false);
414         while (!reader.atEnd()) {
415             reader.readNext();
416             if (reader.hasError()) {
417                 // This should not happen
418                 return;
419             } else {
420                 if (reader.name() == QLatin1String("solid")) {
421                     const QXmlStreamAttributes attributes = reader.attributes();
422                     const auto color = attributes.value(QLatin1String("android:color"));
423                     if (!color.isEmpty())
424                         setBackgroundColor(QColor(color));
425                 }
426                 else if (reader.name() == QLatin1String("bitmap")) {
427                     const QXmlStreamAttributes attributes = reader.attributes();
428                     const auto showMode = attributes.value(QLatin1String("android:gravity"));
429                     if (!showMode.isEmpty())
430                         setImageShowMode(showMode.toString());
431                 }
432             }
433         }
434     }
435 }
436 
437 void SplashScreenContainerWidget::clearAll()
438 {
439     for (auto &&imageWidget : m_imageWidgets) {
440         imageWidget->clearImage();
441     }
442     for (auto &&imageWidget : m_portraitImageWidgets) {
443         imageWidget->clearImage();
444     }
445     for (auto &&imageWidget : m_landscapeImageWidgets) {
446         imageWidget->clearImage();
447     }
448     setBackgroundColor(Qt::white);
449     createSplashscreenThemes();
450 }
451 
452 bool SplashScreenContainerWidget::hasImages() const
453 {
454     for (auto &&imageWidget : m_imageWidgets) {
455         if (imageWidget->hasImage())
456             return true;
457     }
458     return false;
459 }
460 
461 bool SplashScreenContainerWidget::hasPortraitImages() const
462 {
463     for (auto &&imageWidget : m_portraitImageWidgets) {
464         if (imageWidget->hasImage())
465             return true;
466     }
467     return false;
468 }
469 
470 bool SplashScreenContainerWidget::hasLandscapeImages() const
471 {
472     for (auto &&imageWidget : m_landscapeImageWidgets) {
473         if (imageWidget->hasImage())
474             return true;
475     }
476     return false;
477 }
478 
479 bool SplashScreenContainerWidget::isSticky() const
480 {
481     return m_splashScreenSticky;
482 }
483 
484 void SplashScreenContainerWidget::setSticky(bool sticky)
485 {
486     m_splashScreenSticky = sticky;
487     m_stickyCheck->setCheckState(m_splashScreenSticky ? Qt::Checked : Qt::Unchecked);
488 }
489 
490 void SplashScreenContainerWidget::setBackgroundColor(const QColor &color)
491 {
492     if (color != m_splashScreenBackgroundColor) {
493         m_backgroundColor->setStyleSheet(QString("QToolButton {background-color: %1; border: 1px solid gray;}").arg(color.name()));
494 
495         for (auto &&imageWidget : m_imageWidgets)
496             imageWidget->setBackgroundColor(color);
497         for (auto &&imageWidget : m_portraitImageWidgets)
498             imageWidget->setBackgroundColor(color);
499         for (auto &&imageWidget : m_landscapeImageWidgets)
500             imageWidget->setBackgroundColor(color);
501 
502         m_splashScreenBackgroundColor = color;
503     }
504 }
505 
506 void SplashScreenContainerWidget::setImageShowMode(const QString &mode)
507 {
508     bool imageFullScreen;
509 
510     if (mode == "center")
511         imageFullScreen = false;
512     else if (mode == "fill")
513         imageFullScreen = true;
514     else
515         return;
516 
517     for (auto &&imageWidget : m_imageWidgets)
518         imageWidget->showImageFullScreen(imageFullScreen);
519     for (auto &&imageWidget : m_portraitImageWidgets)
520         imageWidget->showImageFullScreen(imageFullScreen);
521     for (auto &&imageWidget : m_landscapeImageWidgets)
522         imageWidget->showImageFullScreen(imageFullScreen);
523 
524     m_imageShowMode->setCurrentText(mode);
525 }
526 
527 void SplashScreenContainerWidget::createSplashscreenThemes()
528 {
529     const QString baseDir = manifestDir(m_textEditorWidget);
530     const QStringList splashscreenThemeFiles = {"/res/values/splashscreentheme.xml",
531                                                 "/res/values-port/splashscreentheme.xml",
532                                                 "/res/values-land/splashscreentheme.xml"};
533     const QStringList splashscreenDrawableFiles = {QString("/res/drawable/%1.xml").arg(splashscreenName),
534                                                    QString("/res/drawable/%1.xml").arg(splashscreenPortraitName),
535                                                    QString("/res/drawable/%1.xml").arg(splashscreenLandscapeName)};
536     QStringList splashscreens[3];
537 
538     if (hasImages())
539         splashscreens[0] << splashscreenName << splashscreenFileName;
540     if (hasPortraitImages())
541         splashscreens[1] << splashscreenPortraitName << splashscreenPortraitFileName;
542     if (hasLandscapeImages())
543         splashscreens[2] << splashscreenLandscapeName << splashscreenLandscapeFileName;
544 
545     for (int i = 0; i < 3; i++) {
546         if (!splashscreens[i].isEmpty()) {
547             QDir dir;
548             QFile themeFile(baseDir + splashscreenThemeFiles[i]);
549             dir.mkpath(QFileInfo(themeFile).absolutePath());
550             if (themeFile.open(QFile::WriteOnly | QFile::Truncate)) {
551                 QXmlStreamWriter stream(&themeFile);
552                 stream.setAutoFormatting(true);
553                 stream.writeStartDocument();
554                 stream.writeStartElement("resources");
555                 stream.writeStartElement("style");
556                 stream.writeAttribute("name", "splashScreenTheme");
557                 stream.writeStartElement("item");
558                 stream.writeAttribute("name", "android:windowBackground");
559                 stream.writeCharacters(QLatin1String("@drawable/%1").arg(splashscreens[i].at(0)));
560                 stream.writeEndElement(); // item
561                 stream.writeEndElement(); // style
562                 stream.writeEndElement(); // resources
563                 stream.writeEndDocument();
564                 themeFile.close();
565             }
566             QFile drawableFile(baseDir + splashscreenDrawableFiles[i]);
567             dir.mkpath(QFileInfo(drawableFile).absolutePath());
568             if (drawableFile.open(QFile::WriteOnly | QFile::Truncate)) {
569                 QXmlStreamWriter stream(&drawableFile);
570                 stream.setAutoFormatting(true);
571                 stream.writeStartDocument();
572                 stream.writeStartElement("layer-list");
573                 stream.writeAttribute("xmlns:android", "http://schemas.android.com/apk/res/android");
574                 stream.writeStartElement("item");
575                 stream.writeStartElement("shape");
576                 stream.writeAttribute("android:shape", "rectangle");
577                 stream.writeEmptyElement("solid");
578                 stream.writeAttribute("android:color", m_splashScreenBackgroundColor.name());
579                 stream.writeEndElement(); // shape
580                 stream.writeEndElement(); // item
581                 stream.writeStartElement("item");
582                 stream.writeEmptyElement("bitmap");
583                 stream.writeAttribute("android:src", QLatin1String("@drawable/%1").arg(splashscreens[i].at(1)));
584                 stream.writeAttribute("android:gravity", m_imageShowMode->currentText());
585                 stream.writeEndElement(); // item
586                 stream.writeEndElement(); // layer-list
587                 stream.writeEndDocument();
588                 drawableFile.close();
589             }
590         }
591         else {
592             QFile::remove(baseDir + splashscreenThemeFiles[i]);
593             QFile::remove(baseDir + splashscreenDrawableFiles[i]);
594         }
595     }
596 }
597 
598 void SplashScreenContainerWidget::checkSplashscreenImage(const QString &name)
599 {
600     if (isSplashscreenEnabled()) {
601         const QString baseDir = manifestDir(m_textEditorWidget);
602         const QStringList paths = {extraExtraExtraHighDpiImagePath,
603                                    extraExtraHighDpiImagePath,
604                                    extraHighDpiImagePath,
605                                    highDpiImagePath,
606                                    mediumDpiImagePath,
607                                    lowDpiImagePath};
608 
609         for (const QString &path : paths) {
610             const QString filePath(baseDir + path + name);
611             if (QFile::exists(filePath + ".png")
612              || QFile::exists(filePath + ".jpg")) {
613                 setCurrentIndex(1);
614                 break;
615             }
616         }
617     }
618 }
619 
620 bool SplashScreenContainerWidget::isSplashscreenEnabled()
621 {
622     return (currentIndex() == 0);
623 }
624 
625 QString SplashScreenContainerWidget::imageName() const
626 {
627     return splashscreenName;
628 }
629 
630 QString SplashScreenContainerWidget::portraitImageName() const
631 {
632     return splashscreenPortraitName;
633 }
634 
635 QString SplashScreenContainerWidget::landscapeImageName() const
636 {
637     return splashscreenLandscapeName;
638 }
639 
640 } // namespace Internal
641 } // namespace Android
