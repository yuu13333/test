Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "jsonfieldpage.h"
27 #include "jsonfieldpage_p.h"
28 
29 #include "jsonwizard.h"
30 #include "jsonwizardfactory.h"
31 
32 #include <utils/algorithm.h>
33 #include <utils/fancylineedit.h>
34 #include <utils/qtcassert.h>
35 #include <utils/stringutils.h>
36 #include <utils/textfieldcheckbox.h>
37 #include <utils/textfieldcombobox.h>
38 #include <utils/theme/theme.h>
39 
40 #include <QCheckBox>
41 #include <QApplication>
42 #include <QDebug>
43 #include <QFormLayout>
44 #include <QLabel>
45 #include <QRegularExpressionValidator>
46 #include <QTextEdit>
47 #include <QVariant>
48 #include <QVariantMap>
49 #include <QVBoxLayout>
50 #include <QListView>
51 #include <QStandardItem>
52 
53 #include <memory>
54 
55 using namespace Utils;
56 
57 const char NAME_KEY[] = "name";
58 const char DISPLAY_NAME_KEY[] = "trDisplayName";
59 const char TOOLTIP_KEY[] = "trToolTip";
60 const char MANDATORY_KEY[] = "mandatory";
61 const char VISIBLE_KEY[] = "visible";
62 const char ENABLED_KEY[] = "enabled";
63 const char SPAN_KEY[] = "span";
64 const char TYPE_KEY[] = "type";
65 const char DATA_KEY[] = "data";
66 const char IS_COMPLETE_KEY[] = "isComplete";
67 const char IS_COMPLETE_MESSAGE_KEY[] = "trIncompleteMessage";
68 
69 namespace {
70 template<typename T>
71 T *widgetCast(QWidget *widget)
72 {
73     auto typedWidget = qobject_cast<T*>(widget);
74     if (typedWidget)
75         return typedWidget;
76     qWarning() << "asked widget type is not correct or null";
77     return nullptr;
78 }
79 
80 }
81 
82 namespace ProjectExplorer {
83 
84 // --------------------------------------------------------------------
85 // Helper:
86 // --------------------------------------------------------------------
87 
88 class LineEditValidator : public QRegularExpressionValidator
89 {
90 public:
91     LineEditValidator(MacroExpander *expander, const QRegularExpression &pattern, QObject *parent) :
92         QRegularExpressionValidator(pattern, parent)
93     {
94         m_expander.setDisplayName(JsonFieldPage::tr("Line Edit Validator Expander"));
95         m_expander.setAccumulating(true);
96         m_expander.registerVariable("INPUT", JsonFieldPage::tr("The text edit input to fix up."),
97                                     [this]() { return m_currentInput; });
98         m_expander.registerSubProvider([expander]() -> MacroExpander * { return expander; });
99     }
100 
101     void setFixupExpando(const QString &expando)
102     {
103         m_fixupExpando = expando;
104     }
105 
106     QValidator::State validate(QString &input, int &pos) const
107     {
108         fixup(input);
109         return QRegularExpressionValidator::validate(input, pos);
110     }
111 
112     void fixup(QString &fixup) const
113     {
114         if (m_fixupExpando.isEmpty())
115             return;
116 
117         m_currentInput = fixup;
118         fixup = m_expander.expand(m_fixupExpando);
119     }
120 
121 private:
122     MacroExpander m_expander;
123     QString m_fixupExpando;
124     mutable QString m_currentInput;
125 };
126 
127 // --------------------------------------------------------------------
128 // JsonFieldPage::FieldData:
129 // --------------------------------------------------------------------
130 
131 JsonFieldPage::Field::Field() : d(new FieldPrivate)
132 { }
133 
134 JsonFieldPage::Field::~Field()
135 {
136     delete d->m_widget;
137     delete d->m_label;
138     delete d;
139 }
140 
141 JsonFieldPage::Field *JsonFieldPage::Field::parse(const QVariant &input, QString *errorMessage)
142 {
143     if (input.type() != QVariant::Map) {
144         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
145                                                     "Field is not an object.");
146         return 0;
147     }
148 
149     QVariantMap tmp = input.toMap();
150     const QString name = tmp.value(NAME_KEY).toString();
151     if (name.isEmpty()) {
152         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
153                                                     "Field has no name.");
154         return 0;
155     }
156     const QString type = tmp.value(TYPE_KEY).toString();
157     if (type.isEmpty()) {
158         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
159                                                     "Field \"%1\" has no type.").arg(name);
160         return 0;
161     }
162 
163     Field *data = createFieldData(type);
164     if (!data) {
165         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
166                                                     "Field \"%1\" has unsupported type \"%2\".")
167                 .arg(name).arg(type);
168         return 0;
169     }
170     data->setTexts(name,
171                    JsonWizardFactory::localizedString(tmp.value(DISPLAY_NAME_KEY).toString()),
172                    tmp.value(TOOLTIP_KEY).toString());
173 
174     data->setVisibleExpression(tmp.value(VISIBLE_KEY, true));
175     data->setEnabledExpression(tmp.value(ENABLED_KEY, true));
176     data->setIsMandatory(tmp.value(MANDATORY_KEY, true).toBool());
177     data->setHasSpan(tmp.value(SPAN_KEY, false).toBool());
178     data->setIsCompleteExpando(tmp.value(IS_COMPLETE_KEY, true),
179                                tmp.value(IS_COMPLETE_MESSAGE_KEY).toString());
180 
181     QVariant dataVal = tmp.value(DATA_KEY);
182     if (!data->parseData(dataVal, errorMessage)) {
183         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
184                                                     "When parsing Field \"%1\": %2")
185                 .arg(name).arg(*errorMessage);
186         delete data;
187         return 0;
188     }
189 
190     return data;
191 }
192 
193 void JsonFieldPage::Field::createWidget(JsonFieldPage *page)
194 {
195     QWidget *w = widget(displayName(), page);
196     w->setObjectName(name());
197     QFormLayout *layout = page->layout();
198 
199     if (suppressName()) {
200         layout->addWidget(w);
201     } else if (hasSpan()) {
202         layout->addRow(w);
203     } else {
204         d->m_label = new QLabel(displayName());
205         layout->addRow(d->m_label, w);
206     }
207 
208     setup(page, name());
209 }
210 
211 void JsonFieldPage::Field::adjustState(MacroExpander *expander)
212 {
213     setVisible(JsonWizard::boolFromVariant(d->m_visibleExpression, expander));
214     setEnabled(JsonWizard::boolFromVariant(d->m_enabledExpression, expander));
215     QTC_ASSERT(d->m_widget, return);
216     d->m_widget->setToolTip(expander->expand(toolTip()));
217 }
218 
219 void JsonFieldPage::Field::setEnabled(bool e)
220 {
221     QTC_ASSERT(d->m_widget, return);
222     d->m_widget->setEnabled(e);
223 }
224 
225 void JsonFieldPage::Field::setVisible(bool v)
226 {
227     QTC_ASSERT(d->m_widget, return);
228     if (d->m_label)
229         d->m_label->setVisible(v);
230     d->m_widget->setVisible(v);
231 }
232 
233 bool JsonFieldPage::Field::validate(MacroExpander *expander, QString *message)
234 {
235     if (!JsonWizard::boolFromVariant(d->m_isCompleteExpando, expander)) {
236         if (message)
237             *message = expander->expand(d->m_isCompleteExpandoMessage);
238         return false;
239     }
240     return true;
241 }
242 
243 void JsonFieldPage::Field::initialize(MacroExpander *expander)
244 {
245     adjustState(expander);
246     initializeData(expander);
247 }
248 
249 QWidget *JsonFieldPage::Field::widget(const QString &displayName, JsonFieldPage *page)
250 {
251     QTC_ASSERT(!d->m_widget, return d->m_widget);
252 
253     d->m_widget = createWidget(displayName, page);
254     return d->m_widget;
255 }
256 
257 QString JsonFieldPage::Field::name()
258 {
259     return d->m_name;
260 }
261 
262 QString JsonFieldPage::Field::displayName()
263 {
264     return d->m_displayName;
265 }
266 
267 QString JsonFieldPage::Field::toolTip()
268 {
269     return d->m_toolTip;
270 }
271 
272 bool JsonFieldPage::Field::isMandatory()
273 {
274     return d->m_isMandatory;
275 }
276 
277 bool JsonFieldPage::Field::hasSpan()
278 {
279     return d->m_hasSpan;
280 }
281 
282 QWidget *JsonFieldPage::Field::widget() const
283 {
284     return d->m_widget;
285 }
286 
287 void JsonFieldPage::Field::setTexts(const QString &n, const QString &dn, const QString &tt)
288 {
289     d->m_name = n;
290     d->m_displayName = dn;
291     d->m_toolTip = tt;
292 }
293 
294 void JsonFieldPage::Field::setIsMandatory(bool b)
295 {
296     d->m_isMandatory = b;
297 }
298 
299 void JsonFieldPage::Field::setHasSpan(bool b)
300 {
301     d->m_hasSpan = b;
302 }
303 
304 void JsonFieldPage::Field::setVisibleExpression(const QVariant &v)
305 {
306     d->m_visibleExpression = v;
307 }
308 
309 void JsonFieldPage::Field::setEnabledExpression(const QVariant &v)
310 {
311     d->m_enabledExpression = v;
312 }
313 
314 void JsonFieldPage::Field::setIsCompleteExpando(const QVariant &v, const QString &m)
315 {
316     d->m_isCompleteExpando = v;
317     d->m_isCompleteExpandoMessage = m;
318 }
319 
320 // --------------------------------------------------------------------
321 // LabelFieldData:
322 // --------------------------------------------------------------------
323 
324 bool LabelField::parseData(const QVariant &data, QString *errorMessage)
325 {
326     if (data.type() != QVariant::Map) {
327         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
328                                                     "Label data is not an object.");
329         return false;
330     }
331 
332     QVariantMap tmp = data.toMap();
333 
334     m_wordWrap = tmp.value("wordWrap", false).toBool();
335     m_text = JsonWizardFactory::localizedString(tmp.value("trText"));
336 
337     if (m_text.isEmpty()) {
338         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
339                                                     "No text given for Label.");
340         return false;
341     }
342 
343     return true;
344 }
345 
346 QWidget *LabelField::createWidget(const QString &displayName, JsonFieldPage *page)
347 {
348     Q_UNUSED(displayName);
349     Q_UNUSED(page);
350     auto w = new QLabel;
351     w->setWordWrap(m_wordWrap);
352     w->setText(m_text);
353     return w;
354 }
355 
356 // --------------------------------------------------------------------
357 // SpacerFieldData:
358 // --------------------------------------------------------------------
359 
360 bool SpacerField::parseData(const QVariant &data, QString *errorMessage)
361 {
362     if (data.isNull())
363         return true;
364 
365     if (data.type() != QVariant::Map) {
366         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
367                                                     "Spacer data is not an object.");
368         return false;
369     }
370 
371     QVariantMap tmp = data.toMap();
372 
373     bool ok;
374     m_factor = tmp.value("factor", 1).toInt(&ok);
375 
376     if (!ok) {
377         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
378                                                     "\"factor\" is no integer value.");
379         return false;
380     }
381 
382     return true;
383 }
384 
385 QWidget *SpacerField::createWidget(const QString &displayName, JsonFieldPage *page)
386 {
387     Q_UNUSED(displayName);
388     Q_UNUSED(page);
389     int size = QApplication::style()->pixelMetric(QStyle::PM_DefaultLayoutSpacing) * m_factor;
390 
391     auto w = new QWidget();
392     w->setMinimumSize(size, size);
393     w->setMaximumSize(size, size);
394     w->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
395     return w;
396 }
397 
398 // --------------------------------------------------------------------
399 // LineEditFieldData:
400 // --------------------------------------------------------------------
401 
402 bool LineEditField::parseData(const QVariant &data, QString *errorMessage)
403 {
404     if (data.isNull())
405         return true;
406 
407     if (data.type() != QVariant::Map) {
408         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
409                                                     "LineEdit data is not an object.");
410         return false;
411     }
412 
413     QVariantMap tmp = data.toMap();
414 
415     m_isPassword = tmp.value("isPassword", false).toBool();
416     m_defaultText = JsonWizardFactory::localizedString(tmp.value("trText").toString());
417     m_disabledText = JsonWizardFactory::localizedString(tmp.value("trDisabledText").toString());
418     m_placeholderText = JsonWizardFactory::localizedString(tmp.value("trPlaceholder").toString());
419     m_historyId = tmp.value("historyId").toString();
420     m_restoreLastHistoryItem = tmp.value("restoreLastHistoyItem", false).toBool();
421     QString pattern = tmp.value("validator").toString();
422     if (!pattern.isEmpty()) {
423         m_validatorRegExp = QRegularExpression(pattern);
424         if (!m_validatorRegExp.isValid()) {
425             *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
426                                                         "Invalid regular expression \"%1\" in \"validator\".")
427                     .arg(pattern);
428             m_validatorRegExp = QRegularExpression();
429             return false;
430         }
431     }
432     m_fixupExpando = tmp.value("fixup").toString();
433 
434     return true;
435 }
436 
437 QWidget *LineEditField::createWidget(const QString &displayName, JsonFieldPage *page)
438 {
439     Q_UNUSED(displayName);
440     auto w = new FancyLineEdit;
441 
442     if (m_validatorRegExp.isValid()) {
443         auto lv = new LineEditValidator(page->expander(), m_validatorRegExp, w);
444         lv->setFixupExpando(m_fixupExpando);
445         w->setValidator(lv);
446     }
447 
448     if (!m_historyId.isEmpty())
449         w->setHistoryCompleter(m_historyId, m_restoreLastHistoryItem);
450 
451     w->setEchoMode(m_isPassword ? QLineEdit::Password : QLineEdit::Normal);
452 
453     return w;
454 }
455 
456 void LineEditField::setup(JsonFieldPage *page, const QString &name)
457 {
458     auto w = widgetCast<FancyLineEdit>(widget());
459     QTC_ASSERT(w, return);
460     page->registerFieldWithName(name, w);
461     QObject::connect(w, &FancyLineEdit::textChanged, page, [this, page]() {
462         m_isModified = true;
463         emit page->completeChanged();
464     });
465 }
466 
467 bool LineEditField::validate(MacroExpander *expander, QString *message)
468 {
469     if (!JsonFieldPage::Field::validate(expander, message))
470         return false;
471 
472     if (m_isValidating)
473         return true;
474 
475     auto w = widgetCast<FancyLineEdit>(widget());
476     QTC_ASSERT(w, return false);
477     m_isValidating = true;
478     if (w->isEnabled()) {
479         if (m_isModified) {
480             if (!m_currentText.isNull()) {
481                 w->setText(m_currentText);
482                 m_currentText.clear();
483             }
484         } else {
485             w->setText(expander->expand(m_defaultText));
486             m_isModified = false;
487         }
488     } else {
489         if (!m_disabledText.isNull() && m_currentText.isNull())
490             m_currentText = w->text();
491     }
492 
493     m_isValidating = false;
494 
495     return !w->text().isEmpty();
496 }
497 
498 void LineEditField::initializeData(MacroExpander *expander)
499 {
500     auto w = widgetCast<FancyLineEdit>(widget());
501     QTC_ASSERT(w, return);
502     m_isValidating = true;
503     w->setText(expander->expand(m_defaultText));
504     w->setPlaceholderText(m_placeholderText);
505     m_isModified = false;
506     m_isValidating = false;
507 }
508 
509 // --------------------------------------------------------------------
510 // TextEditFieldData:
511 // --------------------------------------------------------------------
512 
513 
514 bool TextEditField::parseData(const QVariant &data, QString *errorMessage)
515 {
516     if (data.isNull())
517         return true;
518 
519     if (data.type() != QVariant::Map) {
520         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
521                                                     "TextEdit data is not an object.");
522         return false;
523     }
524 
525     QVariantMap tmp = data.toMap();
526 
527     m_defaultText = JsonWizardFactory::localizedString(tmp.value("trText").toString());
528     m_disabledText = JsonWizardFactory::localizedString(tmp.value("trDisabledText").toString());
529     m_acceptRichText = tmp.value("richText", true).toBool();
530 
531     return true;
532 }
533 
534 QWidget *TextEditField::createWidget(const QString &displayName, JsonFieldPage *page)
535 {
536     // TODO: Set up modification monitoring...
537     Q_UNUSED(displayName);
538     Q_UNUSED(page);
539     auto w = new QTextEdit;
540     w->setAcceptRichText(m_acceptRichText);
541     return w;
542 }
543 
544 void TextEditField::setup(JsonFieldPage *page, const QString &name)
545 {
546     auto w = widgetCast<QTextEdit>(widget());
547     QTC_ASSERT(w, return);
548     page->registerFieldWithName(name, w, "plainText", SIGNAL(textChanged()));
549     QObject::connect(w, &QTextEdit::textChanged, page, &QWizardPage::completeChanged);
550 }
551 
552 bool TextEditField::validate(MacroExpander *expander, QString *message)
553 {
554     if (!JsonFieldPage::Field::validate(expander, message))
555         return false;
556 
557     auto w = widgetCast<QTextEdit>(widget());
558     QTC_ASSERT(w, return false);
559     if (!w->isEnabled() && !m_disabledText.isNull() && m_currentText.isNull()) {
560         m_currentText = w->toHtml();
561         w->setPlainText(expander->expand(m_disabledText));
562     } else if (w->isEnabled() && !m_currentText.isNull()) {
563         w->setText(m_currentText);
564         m_currentText.clear();
565     }
566 
567     return !w->toPlainText().isEmpty();
568 }
569 
570 void TextEditField::initializeData(MacroExpander *expander)
571 {
572     auto w = widgetCast<QTextEdit>(widget());
573     QTC_ASSERT(w, return);
574     w->setPlainText(expander->expand(m_defaultText));
575 }
576 
577 // --------------------------------------------------------------------
578 // PathChooserFieldData:
579 // --------------------------------------------------------------------
580 
581 bool PathChooserField::parseData(const QVariant &data, QString *errorMessage)
582 {
583     if (data.isNull())
584         return true;
585 
586     if (data.type() != QVariant::Map) {
587         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
588                                                     "PathChooser data is not an object.");
589         return false;
590     }
591 
592     QVariantMap tmp = data.toMap();
593 
594     m_path = tmp.value("path").toString();
595     m_basePath = tmp.value("basePath").toString();
596     m_historyId = tmp.value("historyId").toString();
597 
598     QString kindStr = tmp.value("kind", "existingDirectory").toString();
599     if (kindStr == "existingDirectory") {
600         m_kind = PathChooser::ExistingDirectory;
601     } else if (kindStr == "directory") {
602         m_kind = PathChooser::Directory;
603     } else if (kindStr == "file") {
604         m_kind = PathChooser::File;
605     } else if (kindStr == "saveFile") {
606         m_kind = PathChooser::SaveFile;
607     } else if (kindStr == "existingCommand") {
608         m_kind = PathChooser::ExistingCommand;
609     } else if (kindStr == "command") {
610         m_kind = PathChooser::Command;
611     } else if (kindStr == "any") {
612         m_kind = PathChooser::Any;
613     } else {
614         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
615                                                     "kind \"%1\" is not one of the supported \"existingDirectory\", "
616                                                     "\"directory\", \"file\", \"saveFile\", \"existingCommand\", "
617                                                     "\"command\", \"any\".")
618                 .arg(kindStr);
619         return false;
620     }
621 
622     return true;
623 }
624 
625 QWidget *PathChooserField::createWidget(const QString &displayName, JsonFieldPage *page)
626 {
627     Q_UNUSED(displayName);
628     Q_UNUSED(page);
629     auto w = new PathChooser;
630     if (!m_historyId.isEmpty())
631         w->setHistoryCompleter(m_historyId);
632     return w;
633 }
634 
635 void PathChooserField::setEnabled(bool e)
636 {
637     auto w = widgetCast<PathChooser>(widget());
638     QTC_ASSERT(w, return);
639     w->setReadOnly(!e);
640 }
641 
642 void PathChooserField::setup(JsonFieldPage *page, const QString &name)
643 {
644     auto w = widgetCast<PathChooser>(widget());
645     QTC_ASSERT(w, return);
646     page->registerFieldWithName(name, w, "path", SIGNAL(rawPathChanged(QString)));
647     QObject::connect(w, &PathChooser::rawPathChanged, page, [page](QString) {
648         page->completeChanged();
649     });
650 }
651 
652 bool PathChooserField::validate(MacroExpander *expander, QString *message)
653 {
654     if (!JsonFieldPage::Field::validate(expander, message))
655         return false;
656 
657     auto w = widgetCast<PathChooser>(widget());
658     QTC_ASSERT(w, return false);
659     return w->isValid();
660 }
661 
662 void PathChooserField::initializeData(MacroExpander *expander)
663 {
664     auto w = widgetCast<PathChooser>(widget());
665     QTC_ASSERT(w, return);
666     w->setBaseDirectory(expander->expand(m_basePath));
667     w->setExpectedKind(m_kind);
668 
669     if (m_currentPath.isNull())
670         w->setPath(expander->expand(m_path));
671     else
672         w->setPath(m_currentPath);
673 }
674 
675 // --------------------------------------------------------------------
676 // CheckBoxFieldData:
677 // --------------------------------------------------------------------
678 
679 bool CheckBoxField::parseData(const QVariant &data, QString *errorMessage)
680 {
681     if (data.isNull())
682         return true;
683 
684     if (data.type() != QVariant::Map) {
685         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
686                                                     "CheckBox data is not an object.");
687         return false;
688     }
689 
690     QVariantMap tmp = data.toMap();
691 
692     m_checkedValue = tmp.value("checkedValue", true).toString();
693     m_uncheckedValue = tmp.value("uncheckedValue", false).toString();
694     if (m_checkedValue == m_uncheckedValue) {
695         *errorMessage= QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
696                                                    "CheckBox values for checked and unchecked state are identical.");
697        return false;
698     }
699     m_checkedExpression = tmp.value("checked", false);
700 
701     return true;
702 }
703 
704 QWidget *CheckBoxField::createWidget(const QString &displayName, JsonFieldPage *page)
705 {
706     Q_UNUSED(page);
707     return new TextFieldCheckBox(displayName);
708 }
709 
710 void CheckBoxField::setup(JsonFieldPage *page, const QString &name)
711 {
712     auto w = widgetCast<TextFieldCheckBox>(widget());
713     QTC_ASSERT(w, return);
714     QObject::connect(w, &TextFieldCheckBox::clicked, page, [this, page]() {
715         m_isModified = true; page->completeChanged();
716     });
717     page->registerFieldWithName(name, w, "compareText", SIGNAL(textChanged(QString)));
718 }
719 
720 bool CheckBoxField::validate(MacroExpander *expander, QString *message)
721 {
722     if (!JsonFieldPage::Field::validate(expander, message))
723         return false;
724 
725     if (!m_isModified) {
726         auto w = widgetCast<TextFieldCheckBox>(widget());
727         QTC_ASSERT(w, return false);
728         w->setChecked(JsonWizard::boolFromVariant(m_checkedExpression, expander));
729     }
730     return true;
731 }
732 
733 void CheckBoxField::initializeData(MacroExpander *expander)
734 {
735     auto w = widgetCast<TextFieldCheckBox>(widget());
736     QTC_ASSERT(w, return);
737     w->setTrueText(expander->expand(m_checkedValue));
738     w->setFalseText(expander->expand(m_uncheckedValue));
739 
740     w->setChecked(JsonWizard::boolFromVariant(m_checkedExpression, expander));
741 }
742 
743 // --------------------------------------------------------------------
744 // ComboBoxFieldData:
745 // --------------------------------------------------------------------
746 
747 QStandardItem *createStandardItemFromListItem(const QVariant &item, QString *errorMessage)
748 {
749     QStandardItem *standardItem = new QStandardItem();
750     if (item.type() == QVariant::List) {
751         *errorMessage  = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
752                                                      "No lists allowed inside ComboBox items list.");
753         return nullptr;
754     }
755     if (item.type() == QVariant::Map) {
756         const QVariantMap tmp = item.toMap();
757         const QString key = JsonWizardFactory::localizedString(tmp.value("trKey", QString()).toString());
758         const QString value = tmp.value("value", key).toString();
759 
760         if (key.isNull() || key.isEmpty()) {
761             *errorMessage  = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
762                                                          "No \"key\" found in ComboBox items.");
763             return nullptr;
764         }
765         standardItem->setText(key);
766         standardItem->setData(value, ComboBoxField::ValueRole);
767         standardItem->setData(tmp.value("condition", true), ComboBoxField::ConditionRole);
768     } else {
769         const QString keyvalue = item.toString();
770         standardItem->setText(keyvalue);
771         standardItem->setData(keyvalue, ComboBoxField::ValueRole);
772     }
773     return standardItem;
774 }
775 
776 bool ComboBoxField::parseData(const QVariant &data, QString *errorMessage)
777 {
778     if (data.type() != QVariant::Map) {
779         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
780                                                     "ComboBox data is not an object.");
781         return false;
782     }
783 
784     QVariantMap tmp = data.toMap();
785 
786     bool ok;
787     m_index = tmp.value("index", 0).toInt(&ok);
788     if (!ok) {
789         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
790                                                     "ComboBox \"index\" is not an integer value.");
791         return false;
792     }
793     m_disabledIndex = tmp.value("disabledIndex", -1).toInt(&ok);
794     if (!ok) {
795         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
796                                                     "ComboBox \"disabledIndex\" is not an integer value.");
797         return false;
798     }
799 
800     QVariant value = tmp.value("items");
801     if (value.isNull()) {
802         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
803                                                     "ComboBox \"items\" missing.");
804         return false;
805     }
806     if (value.type() != QVariant::List) {
807         *errorMessage = QCoreApplication::translate("ProjectExplorer::JsonFieldPage",
808                                                     "ComboBox \"items\" is not a list.");
809         return false;
810     }
811 
812     foreach (const QVariant &i, value.toList()) {
813         std::unique_ptr<QStandardItem> item(createStandardItemFromListItem(i, errorMessage));
814         QTC_ASSERT(!item->text().isNull(), return false);
815         m_unexpandedItemList.append(item.release());
816     }
817 
818     return true;
819 }
820 
821 QWidget *ComboBoxField::createWidget(const QString &displayName, JsonFieldPage *page)
822 {
823     Q_UNUSED(displayName);
824     Q_UNUSED(page);
825     return new TextFieldComboBox;
826 }
827 
828 void ComboBoxField::setup(JsonFieldPage *page, const QString &name)
829 {
830     auto w = widgetCast<TextFieldComboBox>(widget());
831     QTC_ASSERT(w, return);
832     page->registerFieldWithName(name, w, "indexText", SIGNAL(text4Changed(QString)));
833     QObject::connect(w, &TextFieldComboBox::text4Changed, page, [page](QString) {
834         page->completeChanged();
835     });
836 }
837 
838 bool ComboBoxField::validate(MacroExpander *expander, QString *message)
839 {
840     if (!JsonFieldPage::Field::validate(expander, message))
841         return false;
842 
843     auto w = widgetCast<TextFieldComboBox>(widget());
844     QTC_ASSERT(w, return false);
845 
846     if (!w->isEnabled() && m_disabledIndex >= 0 && m_savedIndex < 0) {
847         m_savedIndex = w->currentIndex();
848         w->setCurrentIndex(m_disabledIndex);
849     } else if (w->isEnabled() && m_savedIndex >= 0) {
850         w->setCurrentIndex(m_savedIndex);
851         m_savedIndex = -1;
852     }
853     return true;
854 }
855 
856 void ComboBoxField::initializeData(MacroExpander *expander)
857 {
858     QList<QStandardItem*> items = Utils::transform(m_unexpandedItemList, [expander](QStandardItem *item) {
859             item->setText(expander->expand(item->text()));
860             item->setData(expander->expand(item->data(ValueRole).toString()), ValueRole);
861             item->setData(JsonWizard::boolFromVariant(item->data(ConditionRole), expander), ConditionRole);
862             return item;
863     });
864 
865     int index = m_index;
866     for (int i = items.count() - 1; i >= 0; --i) {
867         if (!items.at(i)->data(ConditionRole).toBool()) {
868             items.removeAt(i);
869             if (i < index && index > 0)
870                 --index;
871         }
872     }
873 
874     if (index < 0 || index >= items.count())
875         index = 0;
876 
877     QTC_ASSERT(widget(), return);
878 
879     if (!m_itemModel) {
880         m_itemModel = new QStandardItemModel(widget());
881         m_itemModel->appendColumn(items); // inserts the first column with increased rows like item.count is
882     }
883 
884     if (auto w = widgetCast<TextFieldComboBox>(widget())) {
885         w->setModel(m_itemModel);
886         w->setInsertPolicy(QComboBox::NoInsert);
887         w->setCurrentIndex(index);
888     } else {
889         Q_ASSERT(false);
890     }
891 }
892 
893 // --------------------------------------------------------------------
894 // JsonFieldPage:
895 // --------------------------------------------------------------------
896 
897 QHash<QString, JsonFieldPage::FieldFactory> JsonFieldPage::m_factories;
898 
899 JsonFieldPage::JsonFieldPage(MacroExpander *expander, QWidget *parent) :
900     WizardPage(parent),
901     m_formLayout(new QFormLayout),
902     m_errorLabel(new QLabel),
903     m_expander(expander)
904 {
905     QTC_CHECK(m_expander);
906 
907     auto vLayout = new QVBoxLayout;
908     m_formLayout->setFieldGrowthPolicy(QFormLayout::ExpandingFieldsGrow);
909     vLayout->addLayout(m_formLayout);
910     m_errorLabel->setVisible(false);
911     QPalette palette = m_errorLabel->palette();
912     palette.setColor(QPalette::WindowText, creatorTheme()->color(Theme::TextColorError));
913     m_errorLabel->setPalette(palette);
914     vLayout->addItem(new QSpacerItem(0, 0, QSizePolicy::Ignored, QSizePolicy::MinimumExpanding));
915     vLayout->addWidget(m_errorLabel);
916     setLayout(vLayout);
917 }
918 
919 JsonFieldPage::~JsonFieldPage()
920 {
921     // Do not delete m_expander, it belongs to the wizard!
922     qDeleteAll(m_fields);
923 }
924 
925 void JsonFieldPage::registerFieldFactory(const QString &id, const JsonFieldPage::FieldFactory &ff)
926 {
927     QTC_ASSERT(!m_factories.contains(id), return);
928     m_factories.insert(id, ff);
929 }
930 
931 bool JsonFieldPage::setup(const QVariant &data)
932 {
933     QString errorMessage;
934     QList<QVariant> fieldList = JsonWizardFactory::objectOrList(data, &errorMessage);
935     foreach (const QVariant &field, fieldList) {
936         Field *f = JsonFieldPage::Field::parse(field, &errorMessage);
937         if (!f)
938             continue;
939         f->createWidget(this);
940         m_fields.append(f);
941     }
942     return true;
943 }
944 
945 bool JsonFieldPage::isComplete() const
946 {
947     QString message;
948 
949     bool result = true;
950     bool hasErrorMessage = false;
951     foreach (Field *f, m_fields) {
952         f->adjustState(m_expander);
953         if (!f->validate(m_expander, &message)) {
954             if (!message.isEmpty()) {
955                 showError(message);
956                 hasErrorMessage = true;
957             }
958             if (f->isMandatory() && !f->widget()->isHidden())
959                 result = false;
960         }
961     }
962 
963     if (!hasErrorMessage)
964         clearError();
965 
966     return result;
967 }
968 
969 void JsonFieldPage::initializePage()
970 {
971     foreach (Field *f, m_fields)
972         f->initialize(m_expander);
973 }
974 
975 void JsonFieldPage::cleanupPage()
976 {
977     foreach (Field *f, m_fields)
978         f->cleanup(m_expander);
979 }
980 
981 void JsonFieldPage::showError(const QString &m) const
982 {
983     m_errorLabel->setText(m);
984     m_errorLabel->setVisible(true);
985 }
986 
987 void JsonFieldPage::clearError() const
988 {
989     m_errorLabel->setText(QString());
990     m_errorLabel->setVisible(false);
991 }
992 
993 MacroExpander *JsonFieldPage::expander()
994 {
995     return m_expander;
996 }
997 
998 JsonFieldPage::Field *JsonFieldPage::createFieldData(const QString &type)
999 {
1000     if (!m_factories.contains(type))
1001         return 0;
1002     return m_factories.value(type)();
1003 }
1004 
1005 } // namespace ProjectExplorer
