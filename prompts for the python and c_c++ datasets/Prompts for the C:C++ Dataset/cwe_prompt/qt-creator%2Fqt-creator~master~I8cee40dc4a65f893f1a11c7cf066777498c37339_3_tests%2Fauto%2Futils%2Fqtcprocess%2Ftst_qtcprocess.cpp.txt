Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include <utils/qtcprocess.h>
27 #include <utils/hostosinfo.h>
28 #include <utils/stringutils.h>
29 #include <utils/environment.h>
30 
31 #include <QtTest>
32 
33 #include <iostream>
34 
35 using namespace Utils;
36 
37 const char kExitCodeSubProcessCode[] = "QTC_TST_QTCPROCESS_EXITCODE_CODE";
38 const char kRunBlockingStdOutSubProcessMagicWord[] = "42";
39 const char kRunBlockingStdOutSubProcessWithEndl[] = "QTC_TST_QTCPROCESS_RUNBLOCKINGSTDOUT_WITHENDL";
40 const char kLineCallback[] = "QTC_TST_QTCPROCESS_LINECALLBACK";
41 
42 Q_GLOBAL_STATIC_WITH_ARGS(const QStringList, lineCallbackData,
43                           ({
44                                "This is the first line\r",
45                                "Here comes the second one\r",
46                                "Let's also have a third one\r",
47                                "Actually four are better\r",
48                            }))
49 
50 static void exitCodeSubProcessMain()
51 {
52     const int exitCode = qEnvironmentVariableIntValue(kExitCodeSubProcessCode);
53     std::cout << "Exiting with code:" << exitCode << std::endl;
54     exit(exitCode);
55 }
56 
57 static void blockingStdOutSubProcessMain()
58 {
59     std::cout << "Wait for the Answer to the Ultimate Question of Life, "
60                  "The Universe, and Everything..." << std::endl;
61     QThread::msleep(300);
62     std::cout << kRunBlockingStdOutSubProcessMagicWord << "...Now wait for the question...";
63     if (qEnvironmentVariable(kRunBlockingStdOutSubProcessWithEndl) == "true")
64         std::cout << std::endl;
65     QThread::msleep(5000);
66     exit(0);
67 }
68 
69 static void lineCallbackMain()
70 {
71     for (const QString &line : *lineCallbackData())
72         std::cerr << qPrintable(line);
73     exit(0);
74 }
75 
76 class MacroMapExpander : public AbstractMacroExpander {
77 public:
78     virtual bool resolveMacro(const QString &name, QString *ret, QSet<AbstractMacroExpander*> &seen)
79     {
80         // loop prevention
81         const int count = seen.count();
82         seen.insert(this);
83         if (seen.count() == count)
84             return false;
85 
86         QHash<QString, QString>::const_iterator it = m_map.constFind(name);
87         if (it != m_map.constEnd()) {
88             *ret = it.value();
89             return true;
90         }
91         return false;
92     }
93     void insert(const QString &key, const QString &value) { m_map.insert(key, value); }
94 private:
95     QHash<QString, QString> m_map;
96 };
97 
98 class tst_QtcProcess : public QObject
99 {
100     Q_OBJECT
101 
102 private slots:
103     void initTestCase();
104 
105     void splitArgs_data();
106     void splitArgs();
107     void prepareArgs_data();
108     void prepareArgs();
109     void prepareArgsEnv_data();
110     void prepareArgsEnv();
111     void expandMacros_data();
112     void expandMacros();
113     void iterations_data();
114     void iterations();
115     void iteratorEditsWindows();
116     void iteratorEditsLinux();
117     void exitCode_data();
118     void exitCode();
119     void runBlockingStdOut_data();
120     void runBlockingStdOut();
121     void lineCallback();
122 
123 private:
124     void iteratorEditsHelper(OsType osType);
125 
126     Environment envWindows;
127     Environment envLinux;
128 
129     MacroMapExpander mxWin;
130     MacroMapExpander mxUnix;
131     QString homeStr;
132     QString home;
133 };
134 
135 void tst_QtcProcess::initTestCase()
136 {
137     if (qEnvironmentVariableIsSet(kExitCodeSubProcessCode))
138         exitCodeSubProcessMain();
139     if (qEnvironmentVariableIsSet(kRunBlockingStdOutSubProcessWithEndl))
140         blockingStdOutSubProcessMain();
141     if (qEnvironmentVariableIsSet(kLineCallback))
142         lineCallbackMain();
143 
144     homeStr = QLatin1String("@HOME@");
145     home = QDir::homePath();
146 
147     QStringList env;
148     env << "empty=" << "word=hi" << "words=hi ho" << "spacedwords= hi   ho sucker ";
149     envWindows = Environment(env, OsTypeWindows);
150     envLinux = Environment(env, OsTypeLinux);
151 
152     mxWin.insert("a", "hi");
153     mxWin.insert("aa", "hi ho");
154 
155     mxWin.insert("b", "h\\i");
156     mxWin.insert("c", "\\hi");
157     mxWin.insert("d", "hi\\");
158     mxWin.insert("ba", "h\\i ho");
159     mxWin.insert("ca", "\\hi ho");
160     mxWin.insert("da", "hi ho\\");
161 
162     mxWin.insert("e", "h\"i");
163     mxWin.insert("f", "\"hi");
164     mxWin.insert("g", "hi\"");
165 
166     mxWin.insert("h", "h\\\"i");
167     mxWin.insert("i", "\\\"hi");
168     mxWin.insert("j", "hi\\\"");
169 
170     mxWin.insert("k", "&special;");
171 
172     mxWin.insert("x", "\\");
173     mxWin.insert("y", "\"");
174     mxWin.insert("z", "");
175 
176     mxUnix.insert("a", "hi");
177     mxUnix.insert("b", "hi ho");
178     mxUnix.insert("c", "&special;");
179     mxUnix.insert("d", "h\\i");
180     mxUnix.insert("e", "h\"i");
181     mxUnix.insert("f", "h'i");
182     mxUnix.insert("z", "");
183 }
184 
185 
186 Q_DECLARE_METATYPE(ProcessArgs::SplitError)
187 Q_DECLARE_METATYPE(Utils::OsType)
188 
189 void tst_QtcProcess::splitArgs_data()
190 {
191     QTest::addColumn<QString>("in");
192     QTest::addColumn<QString>("out");
193     QTest::addColumn<ProcessArgs::SplitError>("err");
194     QTest::addColumn<Utils::OsType>("os");
195 
196     static const struct {
197         const char * const in;
198         const char * const out;
199         const ProcessArgs::SplitError err;
200         const OsType os;
201     } vals[] = {
202         {"", "", ProcessArgs::SplitOk, OsTypeWindows},
203         {" ", "", ProcessArgs::SplitOk, OsTypeWindows},
204         {"hi", "hi", ProcessArgs::SplitOk, OsTypeWindows},
205         {"hi ho", "hi ho", ProcessArgs::SplitOk, OsTypeWindows},
206         {" hi ho ", "hi ho", ProcessArgs::SplitOk, OsTypeWindows},
207         {"\"hi ho\" \"hi\" ho  ", "\"hi ho\" hi ho", ProcessArgs::SplitOk, OsTypeWindows},
208         {"\\", "\\", ProcessArgs::SplitOk, OsTypeWindows},
209         {"\\\"", "\"\"\\^\"\"\"", ProcessArgs::SplitOk, OsTypeWindows},
210         {"\"hi\"\"\"ho\"", "\"hi\"\\^\"\"ho\"", ProcessArgs::SplitOk, OsTypeWindows},
211         {"\\\\\\\"", "\"\"\\\\\\^\"\"\"", ProcessArgs::SplitOk, OsTypeWindows},
212         {" ^^ ", "\"^^\"", ProcessArgs::SplitOk, OsTypeWindows},
213         {"hi\"", "", ProcessArgs::BadQuoting, OsTypeWindows},
214         {"hi\"dood", "", ProcessArgs::BadQuoting, OsTypeWindows},
215         {"%var%", "%var%", ProcessArgs::SplitOk, OsTypeWindows},
216 
217         {"", "", ProcessArgs::SplitOk, OsTypeLinux},
218         {" ", "", ProcessArgs::SplitOk, OsTypeLinux},
219         {"hi", "hi", ProcessArgs::SplitOk, OsTypeLinux},
220         {"hi ho", "hi ho", ProcessArgs::SplitOk, OsTypeLinux},
221         {" hi ho ", "hi ho", ProcessArgs::SplitOk, OsTypeLinux},
222         {"'hi ho' \"hi\" ho  ", "'hi ho' hi ho", ProcessArgs::SplitOk, OsTypeLinux},
223         {" \\ ", "' '", ProcessArgs::SplitOk, OsTypeLinux},
224         {" \\\" ", "'\"'", ProcessArgs::SplitOk, OsTypeLinux},
225         {" '\"' ", "'\"'", ProcessArgs::SplitOk, OsTypeLinux},
226         {" \"\\\"\" ", "'\"'", ProcessArgs::SplitOk, OsTypeLinux},
227         {"hi'", "", ProcessArgs::BadQuoting, OsTypeLinux},
228         {"hi\"dood", "", ProcessArgs::BadQuoting, OsTypeLinux},
229         {"$var", "'$var'", ProcessArgs::SplitOk, OsTypeLinux},
230         {"~", "@HOME@", ProcessArgs::SplitOk, OsTypeLinux},
231         {"~ foo", "@HOME@ foo", ProcessArgs::SplitOk, OsTypeLinux},
232         {"foo ~", "foo @HOME@", ProcessArgs::SplitOk, OsTypeLinux},
233         {"~/foo", "@HOME@/foo", ProcessArgs::SplitOk, OsTypeLinux},
234         {"~foo", "'~foo'", ProcessArgs::SplitOk, OsTypeLinux}
235     };
236 
237     for (unsigned i = 0; i < sizeof(vals)/sizeof(vals[0]); i++) {
238         QString out = QString::fromLatin1(vals[i].out);
239         if (vals[i].os == OsTypeLinux)
240             out.replace(homeStr, home);
241         QTest::newRow(vals[i].in) << QString::fromLatin1(vals[i].in)
242                                   << out << vals[i].err << vals[i].os;
243     }
244 }
245 
246 void tst_QtcProcess::splitArgs()
247 {
248     QFETCH(QString, in);
249     QFETCH(QString, out);
250     QFETCH(ProcessArgs::SplitError, err);
251     QFETCH(Utils::OsType, os);
252 
253     ProcessArgs::SplitError outerr;
254     QString outstr = ProcessArgs::joinArgs(ProcessArgs::splitArgs(in, os, false, &outerr), os);
255     QCOMPARE(outerr, err);
256     if (err == ProcessArgs::SplitOk)
257         QCOMPARE(outstr, out);
258 }
259 
260 void tst_QtcProcess::prepareArgs_data()
261 {
262     QTest::addColumn<QString>("in");
263     QTest::addColumn<QString>("out");
264     QTest::addColumn<ProcessArgs::SplitError>("err");
265     QTest::addColumn<OsType>("os");
266 
267     static const struct {
268         const char * const in;
269         const char * const out;
270         const ProcessArgs::SplitError err;
271         const OsType os;
272     } vals[] = {
273         {" ", " ", ProcessArgs::SplitOk, OsTypeWindows},
274         {"", "", ProcessArgs::SplitOk, OsTypeWindows},
275         {"hi", "hi", ProcessArgs::SplitOk, OsTypeWindows},
276         {"hi ho", "hi ho", ProcessArgs::SplitOk, OsTypeWindows},
277         {" hi ho ", " hi ho ", ProcessArgs::SplitOk, OsTypeWindows},
278         {"\"hi ho\" \"hi\" ho  ", "\"hi ho\" \"hi\" ho  ", ProcessArgs::SplitOk, OsTypeWindows},
279         {"\\", "\\", ProcessArgs::SplitOk, OsTypeWindows},
280         {"\\\"", "\\\"", ProcessArgs::SplitOk, OsTypeWindows},
281         {"\"hi\"\"ho\"", "\"hi\"\"ho\"", ProcessArgs::SplitOk, OsTypeWindows},
282         {"\\\\\\\"", "\\\\\\\"", ProcessArgs::SplitOk, OsTypeWindows},
283         {"^^", "^", ProcessArgs::SplitOk, OsTypeWindows},
284         {"hi\"", "hi\"", ProcessArgs::SplitOk, OsTypeWindows},
285         {"hi\"dood", "hi\"dood", ProcessArgs::SplitOk, OsTypeWindows},
286         {"%var%", "", ProcessArgs::FoundMeta, OsTypeWindows},
287         {"echo hi > file", "", ProcessArgs::FoundMeta, OsTypeWindows},
288 
289         {"", "", ProcessArgs::SplitOk, OsTypeLinux},
290         {" ", "", ProcessArgs::SplitOk, OsTypeLinux},
291         {"hi", "hi", ProcessArgs::SplitOk, OsTypeLinux},
292         {"hi ho", "hi ho", ProcessArgs::SplitOk, OsTypeLinux},
293         {" hi ho ", "hi ho", ProcessArgs::SplitOk, OsTypeLinux},
294         {"'hi ho' \"hi\" ho  ", "'hi ho' hi ho", ProcessArgs::SplitOk, OsTypeLinux},
295         {" \\ ", "' '", ProcessArgs::SplitOk, OsTypeLinux},
296         {"hi'", "", ProcessArgs::BadQuoting, OsTypeLinux},
297         {"hi\"dood", "", ProcessArgs::BadQuoting, OsTypeLinux},
298         {"$var", "", ProcessArgs::FoundMeta, OsTypeLinux},
299         {"~", "@HOME@", ProcessArgs::SplitOk, OsTypeLinux},
300         {"~ foo", "@HOME@ foo", ProcessArgs::SplitOk, OsTypeLinux},
301         {"~/foo", "@HOME@/foo", ProcessArgs::SplitOk, OsTypeLinux},
302         {"~foo", "", ProcessArgs::FoundMeta, OsTypeLinux}
303     };
304 
305     for (unsigned i = 0; i < sizeof(vals)/sizeof(vals[0]); i++) {
306         QString out = QString::fromLatin1(vals[i].out);
307         if (vals[i].os == OsTypeLinux)
308             out.replace(homeStr, home);
309         QTest::newRow(vals[i].in) << QString::fromLatin1(vals[i].in)
310                                   << out << vals[i].err << vals[i].os;
311     }
312 }
313 
314 void tst_QtcProcess::prepareArgs()
315 {
316     QFETCH(QString, in);
317     QFETCH(QString, out);
318     QFETCH(ProcessArgs::SplitError, err);
319     QFETCH(OsType, os);
320 
321     ProcessArgs::SplitError outerr;
322     ProcessArgs args = ProcessArgs::prepareArgs(in, &outerr, os);
323     QString outstr = args.toString();
324 
325     QCOMPARE(outerr, err);
326     if (err == ProcessArgs::SplitOk)
327         QCOMPARE(outstr, out);
328 }
329 
330 void tst_QtcProcess::prepareArgsEnv_data()
331 {
332     QTest::addColumn<QString>("in");
333     QTest::addColumn<QString>("out");
334     QTest::addColumn<ProcessArgs::SplitError>("err");
335     QTest::addColumn<OsType>("os");
336 
337     static const struct {
338         const char * const in;
339         const char * const out;
340         const ProcessArgs::SplitError err;
341         const OsType os;
342     } vals[] = {
343         {" ", " ", ProcessArgs::SplitOk, OsTypeWindows},
344         {"", "", ProcessArgs::SplitOk, OsTypeWindows},
345         {"hi", "hi", ProcessArgs::SplitOk, OsTypeWindows},
346         {"hi ho", "hi ho", ProcessArgs::SplitOk, OsTypeWindows},
347         {" hi ho ", " hi ho ", ProcessArgs::SplitOk, OsTypeWindows},
348         {"\"hi ho\" \"hi\" ho  ", "\"hi ho\" \"hi\" ho  ", ProcessArgs::SplitOk, OsTypeWindows},
349         {"\\", "\\", ProcessArgs::SplitOk, OsTypeWindows},
350         {"\\\"", "\\\"", ProcessArgs::SplitOk, OsTypeWindows},
351         {"\"hi\"\"ho\"", "\"hi\"\"ho\"", ProcessArgs::SplitOk, OsTypeWindows},
352         {"\\\\\\\"", "\\\\\\\"", ProcessArgs::SplitOk, OsTypeWindows},
353         {"^^", "^", ProcessArgs::SplitOk, OsTypeWindows},
354         {"hi\"", "hi\"", ProcessArgs::SplitOk, OsTypeWindows},
355         {"hi\"dood", "hi\"dood", ProcessArgs::SplitOk, OsTypeWindows},
356         {"%empty%", "%empty%", ProcessArgs::SplitOk, OsTypeWindows}, // Yep, no empty variables on Windows.
357         {"%word%", "hi", ProcessArgs::SplitOk, OsTypeWindows},
358         {" %word% ", " hi ", ProcessArgs::SplitOk, OsTypeWindows},
359         {"%words%", "hi ho", ProcessArgs::SplitOk, OsTypeWindows},
360         {"%nonsense%words%", "%nonsensehi ho", ProcessArgs::SplitOk, OsTypeWindows},
361         {"fail%nonsense%words%", "fail%nonsensehi ho", ProcessArgs::SplitOk, OsTypeWindows},
362         {"%words%words%", "hi howords%", ProcessArgs::SplitOk, OsTypeWindows},
363         {"%words%%words%", "hi hohi ho", ProcessArgs::SplitOk, OsTypeWindows},
364         {"echo hi > file", "", ProcessArgs::FoundMeta, OsTypeWindows},
365 
366         {"", "", ProcessArgs::SplitOk, OsTypeLinux},
367         {" ", "", ProcessArgs::SplitOk, OsTypeLinux},
368         {"hi", "hi", ProcessArgs::SplitOk, OsTypeLinux},
369         {"hi ho", "hi ho", ProcessArgs::SplitOk, OsTypeLinux},
370         {" hi ho ", "hi ho", ProcessArgs::SplitOk, OsTypeLinux},
371         {"'hi ho' \"hi\" ho  ", "'hi ho' hi ho", ProcessArgs::SplitOk, OsTypeLinux},
372         {" \\ ", "' '", ProcessArgs::SplitOk, OsTypeLinux},
373         {"hi'", "", ProcessArgs::BadQuoting, OsTypeLinux},
374         {"hi\"dood", "", ProcessArgs::BadQuoting, OsTypeLinux},
375         {"$empty", "", ProcessArgs::SplitOk, OsTypeLinux},
376         {"$word", "hi", ProcessArgs::SplitOk, OsTypeLinux},
377         {" $word ", "hi", ProcessArgs::SplitOk, OsTypeLinux},
378         {"${word}", "hi", ProcessArgs::SplitOk, OsTypeLinux},
379         {" ${word} ", "hi", ProcessArgs::SplitOk, OsTypeLinux},
380         {"$words", "hi ho", ProcessArgs::SplitOk, OsTypeLinux},
381         {"$spacedwords", "hi ho sucker", ProcessArgs::SplitOk, OsTypeLinux},
382         {"hi${empty}ho", "hiho", ProcessArgs::SplitOk, OsTypeLinux},
383         {"hi${words}ho", "hihi hoho", ProcessArgs::SplitOk, OsTypeLinux},
384         {"hi${spacedwords}ho", "hi hi ho sucker ho", ProcessArgs::SplitOk, OsTypeLinux},
385         {"${", "", ProcessArgs::BadQuoting, OsTypeLinux},
386         {"${var", "", ProcessArgs::BadQuoting, OsTypeLinux},
387         {"${var ", "", ProcessArgs::FoundMeta, OsTypeLinux},
388         {"\"hi${words}ho\"", "'hihi hoho'", ProcessArgs::SplitOk, OsTypeLinux},
389         {"\"hi${spacedwords}ho\"", "'hi hi   ho sucker ho'", ProcessArgs::SplitOk, OsTypeLinux},
390         {"\"${", "", ProcessArgs::BadQuoting, OsTypeLinux},
391         {"\"${var", "", ProcessArgs::BadQuoting, OsTypeLinux},
392         {"\"${var ", "", ProcessArgs::FoundMeta, OsTypeLinux},
393     };
394 
395     for (unsigned i = 0; i < sizeof(vals)/sizeof(vals[0]); i++) {
396         QString out = QString::fromLatin1(vals[i].out);
397         if (vals[i].os == OsTypeLinux)
398             out.replace(homeStr, home);
399         QTest::newRow(vals[i].in) << QString::fromLatin1(vals[i].in)
400                                   << out << vals[i].err << vals[i].os;
401     }
402 }
403 
404 void tst_QtcProcess::prepareArgsEnv()
405 {
406     QFETCH(QString, in);
407     QFETCH(QString, out);
408     QFETCH(ProcessArgs::SplitError, err);
409     QFETCH(OsType, os);
410 
411     ProcessArgs::SplitError outerr;
412     ProcessArgs args = ProcessArgs::prepareArgs(in, &outerr, os, os == OsTypeLinux ? &envLinux : &envWindows);
413     QString outstr = args.toString();
414 
415     QCOMPARE(outerr, err);
416     if (err == ProcessArgs::SplitOk)
417         QCOMPARE(outstr, out);
418 }
419 
420 void tst_QtcProcess::expandMacros_data()
421 
422 {
423     QTest::addColumn<QString>("in");
424     QTest::addColumn<QString>("out");
425     QTest::addColumn<OsType>("os");
426     QChar sp(QLatin1Char(' '));
427 
428     static const struct {
429         const char * const in;
430         const char * const out;
431         OsType os;
432     } vals[] = {
433         {"plain", 0, OsTypeWindows},
434         {"%{a}", "hi", OsTypeWindows},
435         {"%{aa}", "\"hi ho\"", OsTypeWindows},
436         {"%{b}", "h\\i", OsTypeWindows},
437         {"%{c}", "\\hi", OsTypeWindows},
438         {"%{d}", "hi\\", OsTypeWindows},
439         {"%{ba}", "\"h\\i ho\"", OsTypeWindows},
440         {"%{ca}", "\"\\hi ho\"", OsTypeWindows},
441         {"%{da}", "\"hi ho\\\\\"", OsTypeWindows}, // or "\"hi ho\"\\"
442         {"%{e}", "\"h\"\\^\"\"i\"", OsTypeWindows},
443         {"%{f}", "\"\"\\^\"\"hi\"", OsTypeWindows},
444         {"%{g}", "\"hi\"\\^\"\"\"", OsTypeWindows},
445         {"%{h}", "\"h\\\\\"\\^\"\"i\"", OsTypeWindows},
446         {"%{i}", "\"\\\\\"\\^\"\"hi\"", OsTypeWindows},
447         {"%{j}", "\"hi\\\\\"\\^\"\"\"", OsTypeWindows},
448         {"%{k}", "\"&special;\"", OsTypeWindows},
449         {"%{x}", "\\", OsTypeWindows},
450         {"%{y}", "\"\"\\^\"\"\"", OsTypeWindows},
451         {"%{z}", "\"\"", OsTypeWindows},
452         {"^%{z}%{z}", "^%{z}%{z}", OsTypeWindows}, // stupid user check
453 
454         {"quoted", 0, OsTypeWindows},
455         {"\"%{a}\"", "\"hi\"", OsTypeWindows},
456         {"\"%{aa}\"", "\"hi ho\"", OsTypeWindows},
457         {"\"%{b}\"", "\"h\\i\"", OsTypeWindows},
458         {"\"%{c}\"", "\"\\hi\"", OsTypeWindows},
459         {"\"%{d}\"", "\"hi\\\\\"", OsTypeWindows},
460         {"\"%{ba}\"", "\"h\\i ho\"", OsTypeWindows},
461         {"\"%{ca}\"", "\"\\hi ho\"", OsTypeWindows},
462         {"\"%{da}\"", "\"hi ho\\\\\"", OsTypeWindows},
463         {"\"%{e}\"", "\"h\"\\^\"\"i\"", OsTypeWindows},
464         {"\"%{f}\"", "\"\"\\^\"\"hi\"", OsTypeWindows},
465         {"\"%{g}\"", "\"hi\"\\^\"\"\"", OsTypeWindows},
466         {"\"%{h}\"", "\"h\\\\\"\\^\"\"i\"", OsTypeWindows},
467         {"\"%{i}\"", "\"\\\\\"\\^\"\"hi\"", OsTypeWindows},
468         {"\"%{j}\"", "\"hi\\\\\"\\^\"\"\"", OsTypeWindows},
469         {"\"%{k}\"", "\"&special;\"", OsTypeWindows},
470         {"\"%{x}\"", "\"\\\\\"", OsTypeWindows},
471         {"\"%{y}\"", "\"\"\\^\"\"\"", OsTypeWindows},
472         {"\"%{z}\"", "\"\"", OsTypeWindows},
473 
474         {"leading bs", 0, OsTypeWindows},
475         {"\\%{a}", "\\hi", OsTypeWindows},
476         {"\\%{aa}", "\\\\\"hi ho\"", OsTypeWindows},
477         {"\\%{b}", "\\h\\i", OsTypeWindows},
478         {"\\%{c}", "\\\\hi", OsTypeWindows},
479         {"\\%{d}", "\\hi\\", OsTypeWindows},
480         {"\\%{ba}", "\\\\\"h\\i ho\"", OsTypeWindows},
481         {"\\%{ca}", "\\\\\"\\hi ho\"", OsTypeWindows},
482         {"\\%{da}", "\\\\\"hi ho\\\\\"", OsTypeWindows},
483         {"\\%{e}", "\\\\\"h\"\\^\"\"i\"", OsTypeWindows},
484         {"\\%{f}", "\\\\\"\"\\^\"\"hi\"", OsTypeWindows},
485         {"\\%{g}", "\\\\\"hi\"\\^\"\"\"", OsTypeWindows},
486         {"\\%{h}", "\\\\\"h\\\\\"\\^\"\"i\"", OsTypeWindows},
487         {"\\%{i}", "\\\\\"\\\\\"\\^\"\"hi\"", OsTypeWindows},
488         {"\\%{j}", "\\\\\"hi\\\\\"\\^\"\"\"", OsTypeWindows},
489         {"\\%{x}", "\\\\", OsTypeWindows},
490         {"\\%{y}", "\\\\\"\"\\^\"\"\"", OsTypeWindows},
491         {"\\%{z}", "\\", OsTypeWindows},
492 
493         {"trailing bs", 0, OsTypeWindows},
494         {"%{a}\\", "hi\\", OsTypeWindows},
495         {"%{aa}\\", "\"hi ho\"\\", OsTypeWindows},
496         {"%{b}\\", "h\\i\\", OsTypeWindows},
497         {"%{c}\\", "\\hi\\", OsTypeWindows},
498         {"%{d}\\", "hi\\\\", OsTypeWindows},
499         {"%{ba}\\", "\"h\\i ho\"\\", OsTypeWindows},
500         {"%{ca}\\", "\"\\hi ho\"\\", OsTypeWindows},
501         {"%{da}\\", "\"hi ho\\\\\"\\", OsTypeWindows},
502         {"%{e}\\", "\"h\"\\^\"\"i\"\\", OsTypeWindows},
503         {"%{f}\\", "\"\"\\^\"\"hi\"\\", OsTypeWindows},
504         {"%{g}\\", "\"hi\"\\^\"\"\"\\", OsTypeWindows},
505         {"%{h}\\", "\"h\\\\\"\\^\"\"i\"\\", OsTypeWindows},
506         {"%{i}\\", "\"\\\\\"\\^\"\"hi\"\\", OsTypeWindows},
507         {"%{j}\\", "\"hi\\\\\"\\^\"\"\"\\", OsTypeWindows},
508         {"%{x}\\", "\\\\", OsTypeWindows},
509         {"%{y}\\", "\"\"\\^\"\"\"\\", OsTypeWindows},
510         {"%{z}\\", "\\", OsTypeWindows},
511 
512         {"bs-enclosed", 0, OsTypeWindows},
513         {"\\%{a}\\", "\\hi\\", OsTypeWindows},
514         {"\\%{aa}\\", "\\\\\"hi ho\"\\", OsTypeWindows},
515         {"\\%{b}\\", "\\h\\i\\", OsTypeWindows},
516         {"\\%{c}\\", "\\\\hi\\", OsTypeWindows},
517         {"\\%{d}\\", "\\hi\\\\", OsTypeWindows},
518         {"\\%{ba}\\", "\\\\\"h\\i ho\"\\", OsTypeWindows},
519         {"\\%{ca}\\", "\\\\\"\\hi ho\"\\", OsTypeWindows},
520         {"\\%{da}\\", "\\\\\"hi ho\\\\\"\\", OsTypeWindows},
521         {"\\%{e}\\", "\\\\\"h\"\\^\"\"i\"\\", OsTypeWindows},
522         {"\\%{f}\\", "\\\\\"\"\\^\"\"hi\"\\", OsTypeWindows},
523         {"\\%{g}\\", "\\\\\"hi\"\\^\"\"\"\\", OsTypeWindows},
524         {"\\%{h}\\", "\\\\\"h\\\\\"\\^\"\"i\"\\", OsTypeWindows},
525         {"\\%{i}\\", "\\\\\"\\\\\"\\^\"\"hi\"\\", OsTypeWindows},
526         {"\\%{j}\\", "\\\\\"hi\\\\\"\\^\"\"\"\\", OsTypeWindows},
527         {"\\%{x}\\", "\\\\\\", OsTypeWindows},
528         {"\\%{y}\\", "\\\\\"\"\\^\"\"\"\\", OsTypeWindows},
529         {"\\%{z}\\", "\\\\", OsTypeWindows},
530 
531         {"bs-enclosed and trailing literal quote", 0, OsTypeWindows},
532         {"\\%{a}\\\\\\^\"", "\\hi\\\\\\^\"", OsTypeWindows},
533         {"\\%{aa}\\\\\\^\"", "\\\\\"hi ho\"\\\\\\^\"", OsTypeWindows},
534         {"\\%{b}\\\\\\^\"", "\\h\\i\\\\\\^\"", OsTypeWindows},
535         {"\\%{c}\\\\\\^\"", "\\\\hi\\\\\\^\"", OsTypeWindows},
536         {"\\%{d}\\\\\\^\"", "\\hi\\\\\\\\\\^\"", OsTypeWindows},
537         {"\\%{ba}\\\\\\^\"", "\\\\\"h\\i ho\"\\\\\\^\"", OsTypeWindows},
538         {"\\%{ca}\\\\\\^\"", "\\\\\"\\hi ho\"\\\\\\^\"", OsTypeWindows},
539         {"\\%{da}\\\\\\^\"", "\\\\\"hi ho\\\\\"\\\\\\^\"", OsTypeWindows},
540         {"\\%{e}\\\\\\^\"", "\\\\\"h\"\\^\"\"i\"\\\\\\^\"", OsTypeWindows},
541         {"\\%{f}\\\\\\^\"", "\\\\\"\"\\^\"\"hi\"\\\\\\^\"", OsTypeWindows},
542         {"\\%{g}\\\\\\^\"", "\\\\\"hi\"\\^\"\"\"\\\\\\^\"", OsTypeWindows},
543         {"\\%{h}\\\\\\^\"", "\\\\\"h\\\\\"\\^\"\"i\"\\\\\\^\"", OsTypeWindows},
544         {"\\%{i}\\\\\\^\"", "\\\\\"\\\\\"\\^\"\"hi\"\\\\\\^\"", OsTypeWindows},
545         {"\\%{j}\\\\\\^\"", "\\\\\"hi\\\\\"\\^\"\"\"\\\\\\^\"", OsTypeWindows},
546         {"\\%{x}\\\\\\^\"", "\\\\\\\\\\\\\\^\"", OsTypeWindows},
547         {"\\%{y}\\\\\\^\"", "\\\\\"\"\\^\"\"\"\\\\\\^\"", OsTypeWindows},
548         {"\\%{z}\\\\\\^\"", "\\\\\\\\\\^\"", OsTypeWindows},
549 
550         {"bs-enclosed and trailing unclosed quote", 0, OsTypeWindows},
551         {"\\%{a}\\\\\"", "\\hi\\\\\"", OsTypeWindows},
552         {"\\%{aa}\\\\\"", "\\\\\"hi ho\"\\\\\"", OsTypeWindows},
553         {"\\%{b}\\\\\"", "\\h\\i\\\\\"", OsTypeWindows},
554         {"\\%{c}\\\\\"", "\\\\hi\\\\\"", OsTypeWindows},
555         {"\\%{d}\\\\\"", "\\hi\\\\\\\\\"", OsTypeWindows},
556         {"\\%{ba}\\\\\"", "\\\\\"h\\i ho\"\\\\\"", OsTypeWindows},
557         {"\\%{ca}\\\\\"", "\\\\\"\\hi ho\"\\\\\"", OsTypeWindows},
558         {"\\%{da}\\\\\"", "\\\\\"hi ho\\\\\"\\\\\"", OsTypeWindows},
559         {"\\%{e}\\\\\"", "\\\\\"h\"\\^\"\"i\"\\\\\"", OsTypeWindows},
560         {"\\%{f}\\\\\"", "\\\\\"\"\\^\"\"hi\"\\\\\"", OsTypeWindows},
561         {"\\%{g}\\\\\"", "\\\\\"hi\"\\^\"\"\"\\\\\"", OsTypeWindows},
562         {"\\%{h}\\\\\"", "\\\\\"h\\\\\"\\^\"\"i\"\\\\\"", OsTypeWindows},
563         {"\\%{i}\\\\\"", "\\\\\"\\\\\"\\^\"\"hi\"\\\\\"", OsTypeWindows},
564         {"\\%{j}\\\\\"", "\\\\\"hi\\\\\"\\^\"\"\"\\\\\"", OsTypeWindows},
565         {"\\%{x}\\\\\"", "\\\\\\\\\\\\\"", OsTypeWindows},
566         {"\\%{y}\\\\\"", "\\\\\"\"\\^\"\"\"\\\\\"", OsTypeWindows},
567         {"\\%{z}\\\\\"", "\\\\\\\\\"", OsTypeWindows},
568 
569         {"multi-var", 0, OsTypeWindows},
570         {"%{x}%{y}%{z}", "\\\\\"\"\\^\"\"\"", OsTypeWindows},
571         {"%{x}%{z}%{y}%{z}", "\\\\\"\"\\^\"\"\"", OsTypeWindows},
572         {"%{x}%{z}%{y}", "\\\\\"\"\\^\"\"\"", OsTypeWindows},
573         {"%{x}\\^\"%{z}", "\\\\\\^\"", OsTypeWindows},
574         {"%{x}%{z}\\^\"%{z}", "\\\\\\^\"", OsTypeWindows},
575         {"%{x}%{z}\\^\"", "\\\\\\^\"", OsTypeWindows},
576         {"%{x}\\%{z}", "\\\\", OsTypeWindows},
577         {"%{x}%{z}\\%{z}", "\\\\", OsTypeWindows},
578         {"%{x}%{z}\\", "\\\\", OsTypeWindows},
579         {"%{aa}%{a}", "\"hi hohi\"", OsTypeWindows},
580         {"%{aa}%{aa}", "\"hi hohi ho\"", OsTypeWindows},
581         {"%{aa}:%{aa}", "\"hi ho\":\"hi ho\"", OsTypeWindows},
582         {"hallo ^|%{aa}^|", "hallo ^|\"hi ho\"^|", OsTypeWindows},
583 
584         {"quoted multi-var", 0, OsTypeWindows},
585         {"\"%{x}%{y}%{z}\"", "\"\\\\\"\\^\"\"\"", OsTypeWindows},
586         {"\"%{x}%{z}%{y}%{z}\"", "\"\\\\\"\\^\"\"\"", OsTypeWindows},
587         {"\"%{x}%{z}%{y}\"", "\"\\\\\"\\^\"\"\"", OsTypeWindows},
588         {"\"%{x}\"^\"\"%{z}\"", "\"\\\\\"^\"\"\"", OsTypeWindows},
589         {"\"%{x}%{z}\"^\"\"%{z}\"", "\"\\\\\"^\"\"\"", OsTypeWindows},
590         {"\"%{x}%{z}\"^\"\"\"", "\"\\\\\"^\"\"\"", OsTypeWindows},
591         {"\"%{x}\\%{z}\"", "\"\\\\\\\\\"", OsTypeWindows},
592         {"\"%{x}%{z}\\%{z}\"", "\"\\\\\\\\\"", OsTypeWindows},
593         {"\"%{x}%{z}\\\\\"", "\"\\\\\\\\\"", OsTypeWindows},
594         {"\"%{aa}%{a}\"", "\"hi hohi\"", OsTypeWindows},
595         {"\"%{aa}%{aa}\"", "\"hi hohi ho\"", OsTypeWindows},
596         {"\"%{aa}:%{aa}\"", "\"hi ho:hi ho\"", OsTypeWindows},
597 
598         {"plain", 0, OsTypeLinux},
599         {"%{a}", "hi", OsTypeLinux},
600         {"%{b}", "'hi ho'", OsTypeLinux},
601         {"%{c}", "'&special;'", OsTypeLinux},
602         {"%{d}", "'h\\i'", OsTypeLinux},
603         {"%{e}", "'h\"i'", OsTypeLinux},
604         {"%{f}", "'h'\\''i'", OsTypeLinux},
605         {"%{z}", "''", OsTypeLinux},
606         {"\\%{z}%{z}", "\\%{z}%{z}", OsTypeLinux}, // stupid user check
607 
608         {"single-quoted", 0, OsTypeLinux},
609         {"'%{a}'", "'hi'", OsTypeLinux},
610         {"'%{b}'", "'hi ho'", OsTypeLinux},
611         {"'%{c}'", "'&special;'", OsTypeLinux},
612         {"'%{d}'", "'h\\i'", OsTypeLinux},
613         {"'%{e}'", "'h\"i'", OsTypeLinux},
614         {"'%{f}'", "'h'\\''i'", OsTypeLinux},
615         {"'%{z}'", "''", OsTypeLinux},
616 
617         {"double-quoted", 0, OsTypeLinux},
618         {"\"%{a}\"", "\"hi\"", OsTypeLinux},
619         {"\"%{b}\"", "\"hi ho\"", OsTypeLinux},
620         {"\"%{c}\"", "\"&special;\"", OsTypeLinux},
621         {"\"%{d}\"", "\"h\\\\i\"", OsTypeLinux},
622         {"\"%{e}\"", "\"h\\\"i\"", OsTypeLinux},
623         {"\"%{f}\"", "\"h'i\"", OsTypeLinux},
624         {"\"%{z}\"", "\"\"", OsTypeLinux},
625 
626         {"complex", 0, OsTypeLinux},
627         {"echo \"$(echo %{a})\"", "echo \"$(echo hi)\"", OsTypeLinux},
628         {"echo \"$(echo %{b})\"", "echo \"$(echo 'hi ho')\"", OsTypeLinux},
629         {"echo \"$(echo \"%{a}\")\"", "echo \"$(echo \"hi\")\"", OsTypeLinux},
630         // These make no sense shell-wise, but they test expando nesting
631         {"echo \"%{echo %{a}}\"", "echo \"%{echo hi}\"", OsTypeLinux},
632         {"echo \"%{echo %{b}}\"", "echo \"%{echo hi ho}\"", OsTypeLinux},
633         {"echo \"%{echo \"%{a}\"}\"", "echo \"%{echo \"hi\"}\"", OsTypeLinux },
634     };
635 
636     const char *title = 0;
637     for (unsigned i = 0; i < sizeof(vals)/sizeof(vals[0]); i++) {
638         if (!vals[i].out) {
639             title = vals[i].in;
640         } else {
641             char buf[80];
642             sprintf(buf, "%s: %s", title, vals[i].in);
643             QTest::newRow(buf) << QString::fromLatin1(vals[i].in)
644                                << QString::fromLatin1(vals[i].out)
645                                << vals[i].os;
646             sprintf(buf, "padded %s: %s", title, vals[i].in);
647             QTest::newRow(buf) << QString(sp + QString::fromLatin1(vals[i].in) + sp)
648                                << QString(sp + QString::fromLatin1(vals[i].out) + sp)
649                                << vals[i].os;
650         }
651     }
652 }
653 
654 void tst_QtcProcess::expandMacros()
655 {
656     QFETCH(QString, in);
657     QFETCH(QString, out);
658     QFETCH(OsType, os);
659 
660     if (os == OsTypeWindows)
661         ProcessArgs::expandMacros(&in, &mxWin, os);
662     else
663         ProcessArgs::expandMacros(&in, &mxUnix, os);
664     QCOMPARE(in, out);
665 }
666 
667 void tst_QtcProcess::iterations_data()
668 {
669     QTest::addColumn<QString>("in");
670     QTest::addColumn<QString>("out");
671     QTest::addColumn<OsType>("os");
672 
673     static const struct {
674         const char * const in;
675         const char * const out;
676         OsType os;
677     } vals[] = {
678         {"", "", OsTypeWindows},
679         {"hi", "hi", OsTypeWindows},
680         {"  hi ", "hi", OsTypeWindows},
681         {"hi ho", "hi ho", OsTypeWindows},
682         {"\"hi ho\" sucker", "\"hi ho\" sucker", OsTypeWindows},
683         {"\"hi\"^\"\"ho\" sucker", "\"hi\"\\^\"\"ho\" sucker", OsTypeWindows},
684         {"\"hi\"\\^\"\"ho\" sucker", "\"hi\"\\^\"\"ho\" sucker", OsTypeWindows},
685         {"hi^|ho", "\"hi|ho\"", OsTypeWindows},
686         {"c:\\", "c:\\", OsTypeWindows},
687         {"\"c:\\\\\"", "c:\\", OsTypeWindows},
688         {"\\hi\\ho", "\\hi\\ho", OsTypeWindows},
689         {"hi null%", "hi null%", OsTypeWindows},
690         {"hi null% ho", "hi null% ho", OsTypeWindows},
691         {"hi null%here ho", "hi null%here ho", OsTypeWindows},
692         {"hi null%here%too ho", "hi {} ho", OsTypeWindows},
693         {"echo hello | more", "echo hello", OsTypeWindows},
694         {"echo hello| more", "echo hello", OsTypeWindows},
695 
696         {"", "", OsTypeLinux},
697         {" ", "", OsTypeLinux},
698         {"hi", "hi", OsTypeLinux},
699         {"  hi ", "hi", OsTypeLinux},
700         {"'hi'", "hi", OsTypeLinux},
701         {"hi ho", "hi ho", OsTypeLinux},
702         {"\"hi ho\" sucker", "'hi ho' sucker", OsTypeLinux},
703         {"\"hi\\\"ho\" sucker", "'hi\"ho' sucker", OsTypeLinux},
704         {"\"hi'ho\" sucker", "'hi'\\''ho' sucker", OsTypeLinux},
705         {"'hi ho' sucker", "'hi ho' sucker", OsTypeLinux},
706         {"\\\\", "'\\'", OsTypeLinux},
707         {"'\\'", "'\\'", OsTypeLinux},
708         {"hi 'null${here}too' ho", "hi 'null${here}too' ho", OsTypeLinux},
709         {"hi null${here}too ho", "hi {} ho", OsTypeLinux},
710         {"hi $(echo $dollar cent) ho", "hi {} ho", OsTypeLinux},
711         {"hi `echo $dollar \\`echo cent\\` | cat` ho", "hi {} ho", OsTypeLinux},
712         {"echo hello | more", "echo hello", OsTypeLinux},
713         {"echo hello| more", "echo hello", OsTypeLinux},
714     };
715 
716     for (unsigned i = 0; i < sizeof(vals)/sizeof(vals[0]); i++)
717         QTest::newRow(vals[i].in) << QString::fromLatin1(vals[i].in)
718                                   << QString::fromLatin1(vals[i].out)
719                                   << vals[i].os;
720 }
721 
722 void tst_QtcProcess::iterations()
723 {
724     QFETCH(QString, in);
725     QFETCH(QString, out);
726     QFETCH(OsType, os);
727 
728     QString outstr;
729     for (ProcessArgs::ArgIterator ait(&in, os); ait.next(); ) {
730         if (ait.isSimple())
731             ProcessArgs::addArg(&outstr, ait.value(), os);
732         else
733             ProcessArgs::addArgs(&outstr, "{}");
734     }
735     QCOMPARE(outstr, out);
736 }
737 
738 void tst_QtcProcess::iteratorEditsHelper(OsType osType)
739 {
740     QString in1 = "one two three", in2 = in1, in3 = in1, in4 = in1, in5 = in1;
741 
742     ProcessArgs::ArgIterator ait1(&in1, osType);
743     QVERIFY(ait1.next());
744     ait1.deleteArg();
745     QVERIFY(ait1.next());
746     QVERIFY(ait1.next());
747     QVERIFY(!ait1.next());
748     QCOMPARE(in1, QString::fromLatin1("two three"));
749     ait1.appendArg("four");
750     QCOMPARE(in1, QString::fromLatin1("two three four"));
751 
752     ProcessArgs::ArgIterator ait2(&in2, osType);
753     QVERIFY(ait2.next());
754     QVERIFY(ait2.next());
755     ait2.deleteArg();
756     QVERIFY(ait2.next());
757     ait2.appendArg("four");
758     QVERIFY(!ait2.next());
759     QCOMPARE(in2, QString::fromLatin1("one three four"));
760 
761     ProcessArgs::ArgIterator ait3(&in3, osType);
762     QVERIFY(ait3.next());
763     ait3.appendArg("one-b");
764     QVERIFY(ait3.next());
765     QVERIFY(ait3.next());
766     ait3.deleteArg();
767     QVERIFY(!ait3.next());
768     QCOMPARE(in3, QString::fromLatin1("one one-b two"));
769 
770     ProcessArgs::ArgIterator ait4(&in4, osType);
771     ait4.appendArg("pre-one");
772     QVERIFY(ait4.next());
773     QVERIFY(ait4.next());
774     QVERIFY(ait4.next());
775     ait4.deleteArg();
776     QVERIFY(!ait4.next());
777     QCOMPARE(in4, QString::fromLatin1("pre-one one two"));
778 
779     ProcessArgs::ArgIterator ait5(&in5, osType);
780     QVERIFY(ait5.next());
781     QVERIFY(ait5.next());
782     QVERIFY(ait5.next());
783     QVERIFY(!ait5.next());
784     ait5.deleteArg();
785     QVERIFY(!ait5.next());
786     QCOMPARE(in5, QString::fromLatin1("one two"));
787 }
788 
789 void tst_QtcProcess::iteratorEditsWindows()
790 {
791     iteratorEditsHelper(OsTypeWindows);
792 }
793 
794 void tst_QtcProcess::iteratorEditsLinux()
795 {
796     iteratorEditsHelper(OsTypeLinux);
797 }
798 
799 void tst_QtcProcess::exitCode_data()
800 {
801     QTest::addColumn<int>("exitCode");
802 
803     static const auto exitCodes = {
804 #ifdef Q_OS_WIN
805         "99999999", "-255", "-1",
806 #endif // Q_OS_WIN
807         "0", "1", "255"
808     };
809     for (auto exitCode : exitCodes)
810         QTest::newRow(exitCode) << QString::fromLatin1(exitCode).toInt();
811 }
812 
813 void tst_QtcProcess::exitCode()
814 {
815     QFETCH(int, exitCode);
816 
817     Environment env = Environment::systemEnvironment();
818     env.set(kExitCodeSubProcessCode, QString::number(exitCode));
819     QStringList args = QCoreApplication::arguments();
820     const QString binary = args.takeFirst();
821     const CommandLine command(binary, args);
822 
823     {
824         QtcProcess qtcP;
825         qtcP.setCommand(command);
826         qtcP.setEnvironment(env);
827         qtcP.start();
828         const bool finished = qtcP.waitForFinished();
829 
830         QVERIFY(finished);
831         QCOMPARE(qtcP.exitCode(), exitCode);
832         QCOMPARE(qtcP.exitCode() == 0, qtcP.result() == QtcProcess::FinishedWithSuccess);
833     }
834     {
835         SynchronousProcess sP;
836         sP.setCommand(command);
837         sP.setEnvironment(env);
838         sP.runBlocking();
839 
840         QCOMPARE(sP.exitCode(), exitCode);
841         QCOMPARE(sP.exitCode() == 0, sP.result() == QtcProcess::FinishedWithSuccess);
842     }
843 }
844 
845 void tst_QtcProcess::runBlockingStdOut_data()
846 {
847     QTest::addColumn<bool>("withEndl");
848     QTest::addColumn<int>("timeOutS");
849 
850     QTest::newRow("Terminated stdout delivered instantly")
851             << true
852             << 2;
853     QTest::newRow("Unterminated stdout lost: early timeout")
854             << false
855             << 2;
856     QTest::newRow("Unterminated stdout lost: hanging")
857             << false
858             << 20;
859 }
860 
861 void tst_QtcProcess::runBlockingStdOut()
862 {
863     QFETCH(bool, withEndl);
864     QFETCH(int, timeOutS);
865 
866     SynchronousProcess sp;
867     QStringList args = QCoreApplication::arguments();
868     const QString binary = args.takeFirst();
869     sp.setCommand(CommandLine(binary, args));
870     Environment env = Environment::systemEnvironment();
871     env.set(kRunBlockingStdOutSubProcessWithEndl, withEndl ? "true" : "false");
872     sp.setEnvironment(env);
873     sp.setTimeoutS(timeOutS);
874     bool readLastLine = false;
875     sp.setStdOutCallback([&readLastLine, &sp](const QString &out) {
876         if (out.startsWith(kRunBlockingStdOutSubProcessMagicWord)) {
877             readLastLine = true;
878             sp.kill();
879         }
880     });
881     sp.runBlocking();
882 
883     // See also QTCREATORBUG-25667 for why it is a bad idea to use SynchronousProcess::runBlocking
884     // with interactive cli tools.
885     QEXPECT_FAIL("Unterminated stdout lost: early timeout", "", Continue);
886     QVERIFY2(sp.result() != QtcProcess::Hang, "Process run did not time out.");
887 
888     QEXPECT_FAIL("Unterminated stdout lost: early timeout", "", Continue);
889     QEXPECT_FAIL("Unterminated stdout lost: hanging", "", Continue);
890     QVERIFY2(readLastLine, "Last line was read.");
891 }
892 
893 void tst_QtcProcess::lineCallback()
894 {
895     QtcProcess process;
896     QStringList args = QCoreApplication::arguments();
897     const QString binary = args.takeFirst();
898     process.setCommand(CommandLine(binary, args));
899     Environment env = Environment::systemEnvironment();
900     env.set(kLineCallback, "Yes");
901     process.setEnvironment(env);
902     int lineNumber = 0;
903     process.setStdErrLineCallback([&lineNumber](const QString &actual) {
904         const QString expected = lineCallbackData()->at(lineNumber++).trimmed();
905         QCOMPARE(actual, expected);
906     });
907     process.start();
908     process.waitForFinished();
909 }
910 QTEST_MAIN(tst_QtcProcess)
911 
912 #include "tst_qtcprocess.moc"
