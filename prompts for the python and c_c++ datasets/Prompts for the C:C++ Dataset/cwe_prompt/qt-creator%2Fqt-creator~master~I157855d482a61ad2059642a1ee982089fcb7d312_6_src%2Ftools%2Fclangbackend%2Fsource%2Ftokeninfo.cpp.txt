Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "clangstring.h"
27 #include "cursor.h"
28 #include "tokeninfo.h"
29 #include "sourcelocation.h"
30 #include "sourcerange.h"
31 #include "sourcerangecontainer.h"
32 
33 #include <utils/qtcfallthrough.h>
34 
35 #include <array>
36 
37 namespace ClangBackEnd {
38 
39 TokenInfo::TokenInfo(const CXCursor &cxCursor,
40                      CXToken *cxToken,
41                      CXTranslationUnit cxTranslationUnit,
42                      std::vector<CXSourceRange> &currentOutputArgumentRanges)
43     : m_originalCursor(cxCursor),
44       m_cxToken(cxToken),
45       m_cxTranslationUnit(cxTranslationUnit),
46       m_currentOutputArgumentRanges(&currentOutputArgumentRanges)
47 {
48     const SourceRange sourceRange {cxTranslationUnit,
49                                    clang_getTokenExtent(cxTranslationUnit, *cxToken)};
50     const auto start = sourceRange.start();
51     const auto end = sourceRange.end();
52 
53     m_line = start.line();
54     m_column = start.column();
55     m_offset = start.offset();
56     m_length = end.offset() - start.offset();
57 }
58 
59 bool TokenInfo::hasInvalidMainType() const
60 {
61     return m_types.mainHighlightingType == HighlightingType::Invalid;
62 }
63 
64 bool TokenInfo::hasMainType(HighlightingType type) const
65 {
66     return m_types.mainHighlightingType == type;
67 }
68 
69 unsigned TokenInfo::mixinSize() const {
70     return m_types.mixinHighlightingTypes.size();
71 }
72 
73 bool TokenInfo::hasMixinType(HighlightingType type) const
74 {
75     auto found = std::find(m_types.mixinHighlightingTypes.begin(),
76                            m_types.mixinHighlightingTypes.end(),
77                            type);
78 
79     return found != m_types.mixinHighlightingTypes.end();
80 }
81 
82 bool TokenInfo::hasMixinTypeAt(uint position, HighlightingType type) const
83 {
84     return m_types.mixinHighlightingTypes.size() > position &&
85            m_types.mixinHighlightingTypes.at(position) == type;
86 }
87 
88 bool TokenInfo::hasOnlyType(HighlightingType type) const
89 {
90     return m_types.mixinHighlightingTypes.size() == 0 && hasMainType(type);
91 }
92 
93 bool TokenInfo::hasFunctionArguments() const
94 {
95     return m_originalCursor.argumentCount() > 0;
96 }
97 
98 TokenInfo::operator TokenInfoContainer() const
99 {
100     return TokenInfoContainer(m_line, m_column, m_length, m_types);
101 }
102 
103 namespace {
104 
105 bool isFinalFunction(const Cursor &cursor)
106 {
107     auto referencedCursor = cursor.referenced();
108     if (referencedCursor.hasFinalFunctionAttribute())
109         return true;
110     else
111         return false;
112 }
113 
114 bool isFunctionInFinalClass(const Cursor &cursor)
115 {
116     auto functionBase = cursor.functionBaseDeclaration();
117     if (functionBase.isValid() && functionBase.hasFinalClassAttribute())
118         return true;
119 
120     return false;
121 }
122 }
123 
124 void TokenInfo::memberReferenceKind(const Cursor &cursor)
125 {
126     if (cursor.isDynamicCall()) {
127         if (isFinalFunction(cursor) || isFunctionInFinalClass(cursor))
128             m_types.mainHighlightingType = HighlightingType::Function;
129         else
130             m_types.mainHighlightingType = HighlightingType::VirtualFunction;
131     } else {
132         identifierKind(cursor.referenced(), Recursion::RecursivePass);
133     }
134 }
135 
136 void TokenInfo::overloadedDeclRefKind(const Cursor &cursor)
137 {
138     m_types.mainHighlightingType = HighlightingType::Function;
139 
140     // CLANG-UPGRADE-CHECK: Workaround still needed?
141     // Workaround https://bugs.llvm.org//show_bug.cgi?id=33256 - SomeType in
142     // "using N::SomeType" is mistakenly considered as a CXCursor_OverloadedDeclRef.
143     if (cursor.overloadedDeclarationsCount() >= 1
144             && cursor.overloadedDeclaration(0).kind() != CXCursor_FunctionDecl
145             && cursor.overloadedDeclaration(0).kind() != CXCursor_FunctionTemplate) {
146         m_types.mainHighlightingType = HighlightingType::Type;
147     }
148 }
149 
150 void TokenInfo::variableKind(const Cursor &cursor)
151 {
152     if (cursor.isLocalVariable())
153         m_types.mainHighlightingType = HighlightingType::LocalVariable;
154     else
155         m_types.mainHighlightingType = HighlightingType::GlobalVariable;
156 
157     if (isOutputArgument())
158         m_types.mixinHighlightingTypes.push_back(HighlightingType::OutputArgument);
159 }
160 
161 void TokenInfo::fieldKind(const Cursor &cursor)
162 {
163     m_types.mainHighlightingType = HighlightingType::Field;
164 
165     const CXCursorKind kind = cursor.kind();
166     switch (kind) {
167         default:
168             m_types.mainHighlightingType = HighlightingType::Invalid;
169             return;
170         case CXCursor_ObjCPropertyDecl:
171             m_types.mixinHighlightingTypes.push_back(HighlightingType::ObjectiveCProperty);
172             Q_FALLTHROUGH();
173         case CXCursor_FieldDecl:
174         case CXCursor_MemberRef:
175             if (isOutputArgument())
176                 m_types.mixinHighlightingTypes.push_back(HighlightingType::OutputArgument);
177             return;
178         case CXCursor_ObjCClassMethodDecl:
179             m_types.mixinHighlightingTypes.push_back(HighlightingType::ObjectiveCMethod);
180             return;
181         case CXCursor_ObjCIvarDecl:
182         case CXCursor_ObjCInstanceMethodDecl:
183         case CXCursor_ObjCSynthesizeDecl:
184         case CXCursor_ObjCDynamicDecl:
185             return;
186     }
187 
188 }
189 
190 bool TokenInfo::isDefinition() const
191 {
192     return m_originalCursor.isDefinition();
193 }
194 
195 bool TokenInfo::isVirtualMethodDeclarationOrDefinition(const Cursor &cursor) const
196 {
197     return cursor.isVirtualMethod()
198         && (m_originalCursor.isDeclaration() || m_originalCursor.isDefinition());
199 }
200 
201 namespace {
202 bool isNotFinalFunction(const Cursor &cursor)
203 {
204     return !cursor.hasFinalFunctionAttribute();
205 }
206 }
207 bool TokenInfo::isRealDynamicCall(const Cursor &cursor) const
208 {
209     return m_originalCursor.isDynamicCall() && isNotFinalFunction(cursor);
210 }
211 
212 void TokenInfo::addExtraTypeIfFirstPass(HighlightingType type,
213                                                Recursion recursion)
214 {
215     if (recursion == Recursion::FirstPass)
216         m_types.mixinHighlightingTypes.push_back(type);
217 }
218 
219 bool TokenInfo::isArgumentInCurrentOutputArgumentLocations() const
220 {
221     auto originalSourceLocation = m_originalCursor.cxSourceLocation();
222 
223     const auto isNotSameOutputArgument = [&] (const CXSourceRange &currentSourceRange) {
224         return originalSourceLocation.int_data >= currentSourceRange.begin_int_data
225             && originalSourceLocation.int_data <= currentSourceRange.end_int_data;
226     };
227 
228     auto found = std::find_if(m_currentOutputArgumentRanges->begin(),
229                               m_currentOutputArgumentRanges->end(),
230                               isNotSameOutputArgument);
231 
232     bool isOutputArgument = found != m_currentOutputArgumentRanges->end();
233 
234     return isOutputArgument;
235 }
236 
237 bool TokenInfo::isOutputArgument() const
238 {
239     if (m_currentOutputArgumentRanges->empty())
240         return false;
241 
242     return isArgumentInCurrentOutputArgumentLocations();
243 }
244 
245 void TokenInfo::collectOutputArguments(const Cursor &cursor)
246 {
247     cursor.collectOutputArgumentRangesTo(*m_currentOutputArgumentRanges);
248     filterOutPreviousOutputArguments();
249 }
250 
251 namespace {
252 
253 uint getEnd(CXSourceRange cxSourceRange)
254 {
255     CXSourceLocation startSourceLocation = clang_getRangeEnd(cxSourceRange);
256 
257     uint endOffset;
258 
259     clang_getFileLocation(startSourceLocation, nullptr, nullptr, nullptr, &endOffset);
260 
261     return endOffset;
262 }
263 }
264 
265 void TokenInfo::filterOutPreviousOutputArguments()
266 {
267     auto isAfterLocation = [this] (CXSourceRange outputRange) {
268         return getEnd(outputRange) > m_offset;
269     };
270 
271     auto precedingBegin = std::partition(m_currentOutputArgumentRanges->begin(),
272                                          m_currentOutputArgumentRanges->end(),
273                                          isAfterLocation);
274 
275     m_currentOutputArgumentRanges->erase(precedingBegin, m_currentOutputArgumentRanges->end());
276 }
277 
278 void TokenInfo::functionKind(const Cursor &cursor, Recursion recursion)
279 {
280     if (isRealDynamicCall(cursor) || isVirtualMethodDeclarationOrDefinition(cursor))
281         m_types.mainHighlightingType = HighlightingType::VirtualFunction;
282     else
283         m_types.mainHighlightingType = HighlightingType::Function;
284 
285     if (isOutputArgument())
286         m_types.mixinHighlightingTypes.push_back(HighlightingType::OutputArgument);
287 
288     addExtraTypeIfFirstPass(HighlightingType::Declaration, recursion);
289 
290     if (isDefinition())
291         addExtraTypeIfFirstPass(HighlightingType::FunctionDefinition, recursion);
292 }
293 
294 void TokenInfo::referencedTypeKind(const Cursor &cursor)
295 {
296     typeKind(cursor.referenced());
297 }
298 
299 void TokenInfo::typeKind(const Cursor &cursor)
300 {
301     m_types.mainHighlightingType = HighlightingType::Type;
302     const CXCursorKind kind = cursor.kind();
303     switch (kind) {
304         default:
305             m_types.mainHighlightingType = HighlightingType::Invalid;
306             return;
307         case CXCursor_TemplateRef:
308         case CXCursor_NamespaceRef:
309         case CXCursor_TypeRef:
310             referencedTypeKind(cursor);
311             return;
312         case CXCursor_ClassTemplate:
313         case CXCursor_ClassTemplatePartialSpecialization:
314         case CXCursor_ClassDecl:
315             m_types.mixinHighlightingTypes.push_back(HighlightingType::Class);
316             return;
317         case CXCursor_UnionDecl:
318             m_types.mixinHighlightingTypes.push_back(HighlightingType::Union);
319             return;
320         case CXCursor_StructDecl:
321             m_types.mixinHighlightingTypes.push_back(HighlightingType::Struct);
322             return;
323         case CXCursor_EnumDecl:
324             m_types.mixinHighlightingTypes.push_back(HighlightingType::Enum);
325             return;
326         case CXCursor_NamespaceAlias:
327         case CXCursor_Namespace:
328             m_types.mixinHighlightingTypes.push_back(HighlightingType::Namespace);
329             return;
330         case CXCursor_TypeAliasDecl:
331             m_types.mixinHighlightingTypes.push_back(HighlightingType::TypeAlias);
332             return;
333         case CXCursor_TypedefDecl:
334             m_types.mixinHighlightingTypes.push_back(HighlightingType::Typedef);
335             return;
336         case CXCursor_ObjCClassRef:
337             m_types.mixinHighlightingTypes.push_back(HighlightingType::ObjectiveCClass);
338             return;
339         case CXCursor_ObjCProtocolDecl:
340         case CXCursor_ObjCProtocolRef:
341             m_types.mixinHighlightingTypes.push_back(HighlightingType::ObjectiveCProtocol);
342             return;
343         case CXCursor_ObjCInterfaceDecl:
344             m_types.mixinHighlightingTypes.push_back(HighlightingType::ObjectiveCInterface);
345             return;
346         case CXCursor_ObjCImplementationDecl:
347             m_types.mixinHighlightingTypes.push_back(HighlightingType::ObjectiveCImplementation);
348             return;
349         case CXCursor_ObjCCategoryDecl:
350         case CXCursor_ObjCCategoryImplDecl:
351             m_types.mixinHighlightingTypes.push_back(HighlightingType::ObjectiveCCategory);
352             return;
353         case CXCursor_ObjCSuperClassRef:
354         case CXCursor_TemplateTypeParameter:
355         case CXCursor_TemplateTemplateParameter:
356         case CXCursor_CXXStaticCastExpr:
357         case CXCursor_CXXReinterpretCastExpr:
358             break;
359     }
360 }
361 
362 void TokenInfo::identifierKind(const Cursor &cursor, Recursion recursion)
363 {
364     if (cursor.isInvalidDeclaration())
365         return;
366 
367     const CXCursorKind kind = cursor.kind();
368     switch (kind) {
369         case CXCursor_Destructor:
370         case CXCursor_Constructor:
371         case CXCursor_FunctionDecl:
372         case CXCursor_FunctionTemplate:
373         case CXCursor_CallExpr:
374         case CXCursor_CXXMethod:
375             functionKind(cursor, recursion);
376             break;
377         case CXCursor_NonTypeTemplateParameter:
378             m_types.mainHighlightingType = HighlightingType::LocalVariable;
379             break;
380         case CXCursor_ParmDecl:
381         case CXCursor_VarDecl:
382             variableKind(cursor);
383             break;
384         case CXCursor_DeclRefExpr:
385             identifierKind(cursor.referenced(), Recursion::RecursivePass);
386             break;
387         case CXCursor_MemberRefExpr:
388             memberReferenceKind(cursor);
389             break;
390         case CXCursor_FieldDecl:
391         case CXCursor_MemberRef:
392         case CXCursor_ObjCPropertyDecl:
393         case CXCursor_ObjCIvarDecl:
394         case CXCursor_ObjCClassMethodDecl:
395         case CXCursor_ObjCInstanceMethodDecl:
396         case CXCursor_ObjCSynthesizeDecl:
397         case CXCursor_ObjCDynamicDecl:
398             fieldKind(cursor);
399             break;
400         case CXCursor_TemplateRef:
401         case CXCursor_NamespaceRef:
402         case CXCursor_TypeRef:
403             referencedTypeKind(cursor);
404             break;
405         case CXCursor_ClassDecl:
406         case CXCursor_ClassTemplate:
407         case CXCursor_ClassTemplatePartialSpecialization:
408         case CXCursor_UnionDecl:
409         case CXCursor_StructDecl:
410         case CXCursor_EnumDecl:
411         case CXCursor_Namespace:
412             m_types.mixinHighlightingTypes.push_back(HighlightingType::Declaration);
413             Q_FALLTHROUGH();
414         case CXCursor_TemplateTypeParameter:
415         case CXCursor_TemplateTemplateParameter:
416         case CXCursor_NamespaceAlias:
417         case CXCursor_TypeAliasDecl:
418         case CXCursor_TypedefDecl:
419         case CXCursor_CXXStaticCastExpr:
420         case CXCursor_CXXReinterpretCastExpr:
421         case CXCursor_ObjCCategoryDecl:
422         case CXCursor_ObjCCategoryImplDecl:
423         case CXCursor_ObjCImplementationDecl:
424         case CXCursor_ObjCInterfaceDecl:
425         case CXCursor_ObjCProtocolDecl:
426         case CXCursor_ObjCProtocolRef:
427         case CXCursor_ObjCClassRef:
428         case CXCursor_ObjCSuperClassRef:
429             typeKind(cursor);
430             break;
431         case CXCursor_OverloadedDeclRef:
432             overloadedDeclRefKind(cursor);
433             break;
434         case CXCursor_EnumConstantDecl:
435             m_types.mainHighlightingType = HighlightingType::Enumeration;
436             break;
437         case CXCursor_PreprocessingDirective:
438             m_types.mainHighlightingType = HighlightingType::Preprocessor;
439             break;
440         case CXCursor_MacroExpansion:
441             m_types.mainHighlightingType = HighlightingType::PreprocessorExpansion;
442             break;
443         case CXCursor_MacroDefinition:
444             m_types.mainHighlightingType = HighlightingType::PreprocessorDefinition;
445             break;
446         case CXCursor_InclusionDirective:
447             m_types.mainHighlightingType = HighlightingType::StringLiteral;
448             break;
449         case CXCursor_LabelRef:
450         case CXCursor_LabelStmt:
451             m_types.mainHighlightingType = HighlightingType::Label;
452             break;
453         case CXCursor_InvalidFile:
454             invalidFileKind();
455             break;
456         default:
457             break;
458     }
459 }
460 
461 namespace {
462 HighlightingType literalKind(const Cursor &cursor)
463 {
464     switch (cursor.kind()) {
465         case CXCursor_CharacterLiteral:
466         case CXCursor_StringLiteral:
467         case CXCursor_InclusionDirective:
468         case CXCursor_ObjCStringLiteral:
469             return HighlightingType::StringLiteral;
470         case CXCursor_IntegerLiteral:
471         case CXCursor_ImaginaryLiteral:
472         case CXCursor_FloatingLiteral:
473             return HighlightingType::NumberLiteral;
474         default:
475             return HighlightingType::Invalid;
476     }
477 
478     Q_UNREACHABLE();
479 }
480 
481 bool isOverloadedOperator(const CXTranslationUnit &cxTranslationUnit,
482                           const Cursor &cursor,
483                           const CXToken *cxToken,
484                           bool declaration)
485 {
486     const ClangString tokenSpelling = clang_getTokenSpelling(cxTranslationUnit, *cxToken);
487 
488     if (!cursor.spelling().startsWith("operator"))
489         return false;
490 
491     if (!declaration)
492         return true;
493 
494     const ClangString firstPrefix = clang_getTokenSpelling(cxTranslationUnit, *(cxToken - 1));
495     if (firstPrefix == "operator")
496       return true;
497 
498     const ClangString secondPrefix = clang_getTokenSpelling(cxTranslationUnit, *(cxToken - 2));
499     if (secondPrefix == "operator" && tokenSpelling != "(")
500       return true;
501 
502     if (tokenSpelling == "]" && firstPrefix == "[" && secondPrefix == "new")
503       return true;
504 
505     return false;
506 }
507 
508 }
509 
510 void TokenInfo::overloadedOperatorKind(const CXTranslationUnit &cxTranslationUnit,
511                                        const CXToken *cxToken,
512                                        const Cursor &cursor)
513 {
514     bool declaration = cursor.kind() == CXCursor_FunctionDecl || cursor.kind() == CXCursor_CXXMethod;
515 
516     if (isOverloadedOperator(cxTranslationUnit, cursor, cxToken, declaration)) {
517         m_types.mainHighlightingType = HighlightingType::Operator;
518         m_types.mixinHighlightingTypes.push_back(HighlightingType::OverloadedOperator);
519     }
520 }
521 
522 void TokenInfo::punctuationOrOperatorKind(const CXTranslationUnit &cxTranslationUnit,
523                                           const CXToken *cxToken,
524                                           const Cursor &cursor)
525 {
526     switch (cursor.kind()) {
527         case CXCursor_FunctionDecl:
528         case CXCursor_CXXMethod:
529         case CXCursor_DeclRefExpr:
530         // TODO(QTCREATORBUG-19948): Mark calls to overloaded new and delete.
531         // Today we can't because libclang sets these cursors' spelling to "".
532         // case CXCursor_CXXNewExpr:
533         // case CXCursor_CXXDeleteExpr:
534             overloadedOperatorKind(cxTranslationUnit, cxToken, cursor);
535             break;
536         case CXCursor_Constructor:
537         case CXCursor_CallExpr:
538             collectOutputArguments(cursor);
539             break;
540         default:
541             break;
542     }
543 
544     if (isOutputArgument())
545         m_types.mixinHighlightingTypes.push_back(HighlightingType::OutputArgument);
546 }
547 
548 enum class PropertyPart
549 {
550     None,
551     Type,
552     Property,
553     Keyword,
554     FunctionOrPrimitiveType
555 };
556 
557 static PropertyPart propertyPart(CXTranslationUnit tu, CXToken *token)
558 {
559     static constexpr const char *propertyKeywords[]
560             = {"READ", "WRITE", "MEMBER", "RESET", "NOTIFY", "REVISION", "DESIGNABLE",
561                "SCRIPTABLE", "STORED", "USER", "CONSTANT", "FINAL"
562               };
563     CXSourceLocation location = clang_getTokenLocation(tu, *token);
564 
565     // If current token is inside Q_PROPERTY then the cursor from token's position will be
566     // the whole Q_PROPERTY macro cursor.
567     Cursor possibleQPropertyCursor = clang_getCursor(tu, location);
568     if (!(possibleQPropertyCursor.spelling() == "Q_PROPERTY"))
569         return PropertyPart::None;
570 
571     const ClangString currentToken = clang_getTokenSpelling(tu, *token);
572     if (std::find(std::begin(propertyKeywords), std::end(propertyKeywords), currentToken)
573             != std::end(propertyKeywords)) {
574         return PropertyPart::Keyword;
575     }
576 
577     const ClangString nextToken = clang_getTokenSpelling(tu, *(token + 1));
578     const ClangString previousToken = clang_getTokenSpelling(tu, *(token - 1));
579     if (std::find(std::begin(propertyKeywords), std::end(propertyKeywords), nextToken)
580             != std::end(propertyKeywords)) {
581         if (std::find(std::begin(propertyKeywords), std::end(propertyKeywords), previousToken)
582                 == std::end(propertyKeywords)) {
583             return PropertyPart::Property;
584         }
585 
586         return PropertyPart::FunctionOrPrimitiveType;
587     }
588 
589     if (std::find(std::begin(propertyKeywords), std::end(propertyKeywords), previousToken)
590             != std::end(propertyKeywords)) {
591         return PropertyPart::FunctionOrPrimitiveType;
592     }
593     return PropertyPart::Type;
594 }
595 
596 void TokenInfo::invalidFileKind()
597 {
598     const PropertyPart propPart = propertyPart(m_cxTranslationUnit, m_cxToken);
599 
600     switch (propPart) {
601     case PropertyPart::None:
602     case PropertyPart::Keyword:
603         m_types.mainHighlightingType = HighlightingType::Invalid;
604         return;
605     case PropertyPart::Property:
606         m_types.mainHighlightingType = HighlightingType::QtProperty;
607         return;
608     case PropertyPart::Type:
609         m_types.mainHighlightingType = HighlightingType::Type;
610         return;
611     case PropertyPart::FunctionOrPrimitiveType:
612         m_types.mainHighlightingType = HighlightingType::Function;
613         return;
614     }
615 }
616 
617 void TokenInfo::keywordKind(const CXTranslationUnit& cxTranslationUnit,
618                             CXToken *cxToken,
619                             const Cursor &cursor)
620 {
621     switch (cursor.kind()) {
622         case CXCursor_PreprocessingDirective:
623             m_types.mainHighlightingType = HighlightingType::Preprocessor;
624             return;
625         case CXCursor_InclusionDirective:
626             m_types.mainHighlightingType = HighlightingType::StringLiteral;
627             return;
628         default:
629             break;
630     }
631 
632     const ClangString spelling = clang_getTokenSpelling(cxTranslationUnit, *cxToken);
633     if (spelling == "bool"
634             || spelling == "char"
635             || spelling == "char16_t"
636             || spelling == "char32_t"
637             || spelling == "double"
638             || spelling == "float"
639             || spelling == "int"
640             || spelling == "long"
641             || spelling == "short"
642             || spelling == "signed"
643             || spelling == "unsigned"
644             || spelling == "void"
645             || spelling == "wchar_t") {
646         m_types.mainHighlightingType =  HighlightingType::PrimitiveType;
647         return;
648     }
649 
650     m_types.mainHighlightingType = HighlightingType::Keyword;
651 
652     if (spelling == "new" || spelling == "delete")
653         overloadedOperatorKind(m_cxTranslationUnit, m_cxToken, m_originalCursor);
654 }
655 
656 void TokenInfo::evaluate()
657 {
658     auto cxTokenKind = clang_getTokenKind(*m_cxToken);
659 
660     m_types = HighlightingTypes();
661 
662     switch (cxTokenKind) {
663         case CXToken_Keyword:
664             keywordKind(m_cxTranslationUnit, m_cxToken, m_originalCursor);
665             break;
666         case CXToken_Punctuation:
667             punctuationOrOperatorKind(m_cxTranslationUnit, m_cxToken, m_originalCursor);
668             break;
669         case CXToken_Identifier:
670             identifierKind(m_originalCursor, Recursion::FirstPass);
671             break;
672         case CXToken_Comment:
673             m_types.mainHighlightingType = HighlightingType::Comment;
674             break;
675         case CXToken_Literal:
676             m_types.mainHighlightingType = literalKind(m_originalCursor);
677             break;
678     }
679 }
680 
681 } // namespace ClangBackEnd
