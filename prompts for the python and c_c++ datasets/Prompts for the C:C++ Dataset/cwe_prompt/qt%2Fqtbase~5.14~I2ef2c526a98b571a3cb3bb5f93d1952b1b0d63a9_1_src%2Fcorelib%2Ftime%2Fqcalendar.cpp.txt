Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2019 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:GPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU
19 ** General Public License version 3 or (at your option) any later version
20 ** approved by the KDE Free Qt Foundation. The licenses are as published by
21 ** the Free Software Foundation and appearing in the file LICENSE.GPL3
22 ** included in the packaging of this file. Please review the following
23 ** information to ensure the GNU General Public License requirements will
24 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
25 **
26 ** $QT_END_LICENSE$
27 **
28 ****************************************************************************/
29 #include "qcalendar.h"
30 #include "qcalendarbackend_p.h"
31 #include "qgregoriancalendar_p.h"
32 #ifndef QT_BOOTSTRAPPED
33 #include "qjuliancalendar_p.h"
34 #include "qmilankoviccalendar_p.h"
35 #endif
36 #if QT_CONFIG(jalalicalendar)
37 #include "qjalalicalendar_p.h"
38 #endif
39 #if QT_CONFIG(islamiccivilcalendar)
40 #include "qislamiccivilcalendar_p.h"
41 #endif
42 
43 #include "qdatetime.h"
44 #include "qcalendarmath_p.h"
45 #include <qhash.h>
46 #include <qdebug.h>
47 
48 #include <unordered_map>
49 
50 QT_BEGIN_NAMESPACE
51 
52 namespace {
53 
54 struct CalendarName : public QString
55 {
56     CalendarName(const QString &name) : QString(name) {}
57 };
58 
59 inline bool operator==(const CalendarName &u, const CalendarName &v)
60 {
61     return u.compare(v, Qt::CaseInsensitive) == 0;
62 }
63 
64 inline uint qHash(const CalendarName &key, uint seed = 0) noexcept
65 {
66     return qHash(key.toLower(), seed);
67 }
68 
69 struct Registry {
70     std::vector<QCalendarBackend *> byId;
71     QHash<CalendarName, QCalendarBackend *> byName;
72     QCalendarBackend *gregorianCalendar = nullptr;
73     bool populated = false;
74 
75     Registry()
76     {
77         byId.resize(int(QCalendar::System::Last) + 1);
78     }
79 
80     ~Registry()
81     {
82         qDeleteAll(byId);
83     }
84 
85     bool registerName(QCalendarBackend *calendar, const QString &name)
86     {
87         if (byName.find(name) != byName.end()) {
88             qWarning() << "Calendar name" << name
89                        << "is already taken, new calendar will not be registered.";
90             return false;
91         }
92         byName.insert(name, calendar);
93         return true;
94     }
95     void addCalendar(QCalendarBackend *calendar, const QString &name, QCalendar::System id)
96     {
97         if (!registerName(calendar, name))
98             return;
99         Q_ASSERT(byId.size() >= size_t(id));
100         if (id == QCalendar::System::User) {
101             byId.push_back(calendar);
102         } else {
103             Q_ASSERT(byId.at(size_t(id)) == nullptr);
104             byId[size_t(id)] = calendar;
105         }
106         if (id == QCalendar::System::Gregorian) {
107             Q_ASSERT(!gregorianCalendar);
108             gregorianCalendar = calendar;
109         }
110     }
111     /*
112         \internal
113         Ensures each enum-available calendar has been instantiated.
114 
115         This arranges for each to register itself by name; it only does anything on
116         its first call, which ensures that name-based lookups can always find all
117         the calendars available via the enum.
118     */
119     void populate()
120     {
121         if (populated)
122             return;
123 
124         for (int i = 0; i <= int(QCalendar::System::Last); ++i)
125             (void)QCalendar(QCalendar::System(i));
126     }
127 };
128 
129 }
130 
131 Q_GLOBAL_STATIC(Registry, calendarRegistry);
132 
133 
134 /*!
135     \since 5.14
136 
137     \class QCalendarBackend
138     \inmodule QtCore
139     \internal
140     \reentrant
141     \brief The QCalendarBackend class provides basic calendaring functions.
142 
143     QCalendarBackend provides the base class on which all calendar types are
144     implemented. On construction, the backend is registered with its primary
145     name.
146 
147     A backend may also be registered with aliases, where the calendar is known
148     by several names. Registering with the name used by CLDR (the Unicode
149     consortium's Common Locale Data Repository) is recommended, particularly
150     when interacting with third-party software. Once a backend is registered for
151     a name, QCalendar can be constructed using that name to select the backend.
152 
153     Each calendar backend must inherit from QCalendarBackend and implement its
154     pure virtual methods. It may also override some other virtual methods, as
155     needed.
156 
157     Most backends are pure code, with no data elements. Such backends should
158     normally be implemented as singletons. For a backend to be added to the
159     QCalendar::System enum, it should be such a singleton, with a case in
160     QCalendar::fromEnum()'s switch statement to instantiate it.
161 
162     Non-singleton calendar backends should ensure that each instance is created
163     with a distinct primary name. Later instances attempting to register with a
164     name already in use shall fail to register and be unavailable to QCalendar,
165     hence unusable.
166 
167     \sa registerAlias(), QDate, QDateTime, QDateEdit, QDateTimeEdit, QCalendarWidget
168 */
169 
170 /*!
171     Constructs the calendar and registers it under \a name using \a id.
172 */
173 QCalendarBackend::QCalendarBackend(const QString &name, QCalendar::System id)
174 {
175     calendarRegistry->addCalendar(this, name, id);
176 }
177 
178 /*!
179     Destroys the calendar.
180 
181     Never call this from user code. Each calendar backend, once instantiated,
182     shall exist for the lifetime of the program. Its destruction is taken care
183     of by destruction of the registry of calendar backends and their names.
184 */
185 QCalendarBackend::~QCalendarBackend()
186 {
187 }
188 
189 /*!
190     The calendar system of this calendar.
191 
192     Each calendar backend constructible from the QCalendar::System enum should
193     return the member of that enum that produces it. Other calendars should
194     return User.
195 
196     \sa QCalendarBackend::fromEnum()
197 */
198 QCalendar::System QCalendarBackend::calendarSystem() const
199 {
200     return QCalendar::System::User;
201 }
202 
203 /*!
204     The primary name of this calendar.
205  */
206 QString QCalendar::name() const
207 {
208     return d ? d->name() : QString();
209 }
210 
211 // date queries
212 /*!
213    \fn int QCalendarBackend::daysInMonth(int month, int year) const
214 
215    Returns number of days in the month number \a month, in year \a year.
216 
217    An implementation should return 0 if the given year had no such month. If
218    year is QCalendar::Unspecified, return the usual number of days for the
219    month, in those years that include it.
220 
221    Calendars with intercallary days may represent these as extra days of the
222    preceding month, or as short months separate from the usual ones. In the
223    former case, daysInMonth(month, year) should be the number of ordinary days
224    in the month, although \c{isDateValid(year, month, day)} might return \c true
225    for some larger values of \c day.
226 
227    \sa daysInYear(), monthsInYear(), minimumDaysInMonth(), maximumDaysInMonth()
228 */
229 
230 // properties of the calendar
231 
232 /*!
233     \fn bool QCalendarBackend::isLeapYear(int year) const
234 
235     Returns \c true if the specified \a year is a leap year for this calendar.
236 
237     \sa daysInYear(), isDateValid()
238 */
239 
240 /*!
241     \fn bool QCalendarBackend::isLunar() const
242 
243     Returns \c true if this calendar is a lunar calendar. Otherwise returns \c
244     false.
245 
246     A lunar calendar is a calendar based upon the monthly cycles of the Moon's
247     phases (synodic months). This contrasts with solar calendars, whose annual
248     cycles are based only upon the solar year.
249 
250     \sa isLuniSolar(), isSolar(), isProleptic()
251 */
252 
253 /*!
254     \fn bool QCalendarBackend::isLuniSolar() const
255 
256     Returns \c true if this calendar is a lunisolar calendar. Otherwise returns
257     \c false.
258 
259     A lunisolar calendar is a calendar whose date indicates both the moon phase
260     and the time of the solar year.
261 
262     \sa isLunar(), isSolar(), isProleptic()
263 */
264 
265 /*!
266     \fn bool QCalendarBackend::isSolar() const
267 
268     Returns \c true if this calendar is a solar calendar. Otherwise returns
269     \c false.
270 
271     A solar calendar is a calendar whose dates indicate the season or almost
272     equivalently the apparent position of the sun relative to the fixed stars.
273     The Gregorian calendar, widely accepted as standard in the world,
274     is an example of solar calendar.
275 
276     \sa isLuniSolar(), isLunar(), isProleptic()
277 */
278 
279 /*!
280     Returns the total number of days in the year number \a year.
281     Returns zero if there is no such year in this calendar.
282 
283     This base implementation returns 366 for leap years and 365 for ordinary
284     years.
285 
286     \sa monthsInYear(), daysInMonth(), isLeapYear()
287 */
288 int QCalendarBackend::daysInYear(int year) const
289 {
290     return monthsInYear(year) ? isLeapYear(year) ? 366 : 365 : 0;
291 }
292 
293 /*!
294     Returns the total number of months in the year number \a year.
295     Returns zero if there is no such year in this calendar.
296 
297     This base implementation returns 12 for any valid year.
298 
299     \sa daysInYear(), maximumMonthsInYear(), isDateValid()
300 */
301 int QCalendarBackend::monthsInYear(int year) const
302 {
303     return year > 0 || (year < 0 ? isProleptic() : hasYearZero()) ? 12 : 0;
304 }
305 
306 /*!
307     Returns \c true if the date specified by \a year, \a month, and \a day is
308     valid for this calendar; otherwise returns \c false. For example,
309     the date 2018-04-19 is valid for the Gregorian calendar, but 2018-16-19 and
310     2018-04-38 are invalid.
311 
312     Calendars with intercallary days may represent these as extra days of the
313     preceding month or as short months separate from the usual ones. In the
314     former case, a \a day value greater than \c{daysInMonth(\a{month},
315     \a{year})} may be valid.
316 
317     \sa daysInMonth(), monthsInYear()
318 */
319 bool QCalendarBackend::isDateValid(int year, int month, int day) const
320 {
321     return day > 0 && day <= daysInMonth(month, year);
322 }
323 
324 /*!
325     Returns \c true if this calendar is a proleptic calendar. Otherwise returns
326     \c false.
327 
328     A proleptic calendar results from allowing negative year numbers to indicate
329     years before the nominal start of the calendar system.
330 
331     \sa isLuniSolar(), isSolar(), isLunar(), hasYearZero()
332 */
333 
334 bool QCalendarBackend::isProleptic() const
335 {
336     return true;
337 }
338 
339 /*!
340     Returns \c true if year number \c 0 is considered a valid year in this
341     calendar. Otherwise returns \c false.
342 
343     \sa isDateValid(), isProleptic()
344 */
345 
346 bool QCalendarBackend::hasYearZero() const
347 {
348     return false;
349 }
350 
351 /*!
352     Returns the maximum number of days in a month for any year.
353 
354     This base implementation returns 31, as this is a common case.
355 
356     For calendars with intercallary days, although daysInMonth() doesn't include
357     the intercallary days in its count for an individual month,
358     maximumDaysInMonth() should include intercallary days, so that it is the
359     maximum value of \c day for which \c{isDateValid(year, month, day)} can be
360     true.
361 
362     \sa maximumMonthsInYear(), daysInMonth()
363 */
364 int QCalendarBackend::maximumDaysInMonth() const
365 {
366     return 31;
367 }
368 
369 /*!
370     Returns the minimum number of days in any valid month of any valid year.
371 
372     This base implementation returns 29, as this is a common case.
373 
374     \sa maximumMonthsInYear(), daysInMonth()
375 */
376 int QCalendarBackend::minimumDaysInMonth() const
377 {
378     return 29;
379 }
380 
381 /*!
382     Returns the maximum number of months possible in any year.
383 
384     This base implementation returns 12, as this is a common case.
385 
386     \sa maximumDaysInMonth(), monthsInYear()
387 */
388 int QCalendarBackend::maximumMonthsInYear() const
389 {
390     return 12;
391 }
392 
393 // Julian day number calculations
394 
395 /*!
396     \fn bool QCalendarBackend::dateToJulianDay(int year, int month, int day, qint64 *jd) const
397 
398     Computes the Julian day number corresponding to the specified \a year, \a
399     month, and \a day. Returns true and sets \a jd if there is such a date in
400     this calendar; otherwise, returns false.
401 
402     \sa QCalendar::partsFromDate(), julianDayToDate()
403 */
404 
405 /*!
406     \fn QCalendar::YearMonthDay QCalendarBackend::julianDayToDate(qint64 jd) const
407 
408     Computes the year, month, and day in this calendar for the given Julian day
409     number \a jd. If the given day falls outside this calendar's scope
410     (e.g. before the start-date of a non-proleptic calendar), the returned
411     structure's isValid() is false; otherwise, its year, month, and day fields
412     provide this calendar's description of the date.
413 
414     \sa QCalendar::dateFromParts(), dateToJulianDay()
415 */
416 
417 /*!
418    Returns the day of the week for the given Julian Day Number \a jd.
419 
420    This is 1 for Monday through 7 for Sunday.
421 
422    Calendars with intercallary days may return larger values for these
423    intercallary days. They should avoid using 0 for any special purpose (it is
424    already used in QDate::dayOfWeek() to mean an invalid date). The calendar
425    should treat the numbers used as an \c enum, whose values need not be
426    contiguous, nor need they follow closely from the 1 through 7 of the usual
427    returns. It suffices that weekDayName() can recognize each such number as
428    identifying a distinct name, that it returns to identify the particular
429    intercallary day.
430 
431    This base implementation uses the day-numbering that various calendars have
432    borrowed off the Hebrew calendar.
433 
434    \sa weekDayName(), standaloneWeekDayName(), QDate::dayOfWeek()
435  */
436 int QCalendarBackend::dayOfWeek(qint64 jd) const
437 {
438     return QRoundingDown::qMod(jd, 7) + 1;
439 }
440 
441 // Month and week-day name look-ups (implemented in qlocale.cpp):
442 /*!
443     \fn QString QCalendarBackend::monthName(const QLocale &locale, int month, int year,
444                                             QLocale::FormatType format) const
445 
446     Returns the name of the specified \a month in the given \a year for the
447     chosen \a locale, using the given \a format to determine how complete the
448     name is.
449 
450     If \a year is Unspecified, return the name for the month that usually has
451     this number within a typical year. Calendars with a leap month that isn't
452     always the last may need to take account of the year to map the month number
453     to the particular year's month with that number.
454 
455     \note Backends for which CLDR provides data can configure the default
456     implementation of the two month name look-up methods by arranging for
457     localeMonthIndexData() and localeMonthData() to provide access to the CLDR
458     data (see cldr2qlocalexml.py, qlocalexml2cpp.py and existing backends).
459     Conversely, backends that override both month name look-up methods need not
460     return anything meaningful from localeMonthIndexData() or localeMonthData().
461 
462     \sa standaloneMonthName(), QLocale::monthName()
463 */
464 
465 /*!
466     \fn QString QCalendarBackend::standaloneMonthName(const QLocale &locale, int month, int year
467                                                       QLocale::FormatType format) const
468 
469     Returns the standalone name of the specified \a month in the chosen \a
470     locale, using the specified \a format to determine how complete the name is.
471 
472     If \a year is Unspecified, return the standalone name for the month that
473     usually has this number within a typical year. Calendars with a leap month
474     that isn't always the last may need to take account of the year to map the
475     month number to the particular year's month with that number.
476 
477     \sa monthName(), QLocale::standaloneMonthName()
478 */
479 
480 /*!
481     \fn QString QCalendarBackend::weekDayName(const QLocale &locale, int day,
482                                               QLocale::FormatType format) const
483 
484     Returns the name of the specified \a day of the week in the chosen \a
485     locale, using the specified \a format to determine how complete the name is.
486 
487     The base implementation handles \a day values from 1 to 7 using the day
488     names CLDR provides, which are suitable for calendards that use the same
489     (Hebrew-derived) week as the Gregorian calendar.
490 
491     Calendars whose dayOfWeek() returns a value outside the range from 1 to 7
492     need to reimplement this method to handle such extra week-day values. They
493     can assume that \a day is a value returned by the same calendar's
494     dayOfWeek().
495 
496     \sa dayOfWeek(), standaloneWeekDayName(), QLocale::dayName()
497 */
498 
499 /*!
500     \fn QString QCalendarBackend::standaloneWeekDayName(const QLocale &locale, int day,
501                                                         QLocale::FormatType format) const
502 
503     Returns the standalone name of the specified \a day of the week in the
504     chosen \a locale, using the specified \a format to determine how complete
505     the name is.
506 
507     The base implementation handles \a day values from 1 to 7 using the
508     standalone day names CLDR provides, which are suitable for calendards that
509     use the same (Hebrew-derived) week as the Gregorian calendar.
510 
511     Calendars whose dayOfWeek() returns a value outside the range from 1 to 7
512     need to reimplement this method to handle such extra week-day values. They
513     can assume that \a day is a value returned by the same calendar's
514     dayOfWeek().
515 
516     \sa dayOfWeek(), weekDayName(), QLocale::standaloneDayName()
517 */
518 
519 /*!
520     \fn QString QCalendarBackend::dateTimeToString(QStringView format, const QDateTime &datetime,
521                                                    const QDate &dateOnly, const QTime &timeOnly,
522                                                    const QLocale &locale) const
523 
524     Returns a string representing a given date, time or date-time.
525 
526     If \a datetime is specified and valid, it is used and both date and time
527     format tokens are converted to appropriate representations of the parts of
528     the datetime. Otherwise, if \a dateOnly is valid, only date format tokens
529     are converted; else, if \a timeOnly is valid, only time format tokens are
530     converted. If none are valid, an empty string is returned.
531 
532     The specified \a locale influences how some format tokens are converted; for
533     example, when substituting day and month names and their short-forms. For
534     the supported formatting tokens, see QDate::toString() and
535     QTime::toString(). As described above, the provided date, time and date-time
536     determine which of these tokens are recognized: where these appear in \a
537     format they are replaced by data. Any text in \a format not recognized as a
538     format token is copied verbatim into the result string.
539 
540     \sa QDate::toString(), QTime::toString(), QDateTime::toString()
541 */
542 // End of methods implemented in qlocale.cpp
543 
544 /*!
545     Returns a list of names of the available calendar systems. Any
546     QCalendarBackend sub-class must be registered before being exposed to Date
547     and Time APIs.
548 
549     \sa registerAlias(), fromName()
550 */
551 QStringList QCalendarBackend::availableCalendars()
552 {
553     if (calendarRegistry.isDestroyed())
554         return {};
555     calendarRegistry->populate();
556     return QStringList(calendarRegistry->byName.keyBegin(), calendarRegistry->byName.keyEnd());
557 }
558 
559 /*!
560     Registers an alias for this calendar backend. Once a backend is registered,
561     its name will be included in the list of available calendars and the
562     calendar can be instantiated by name.
563 
564     Returns \c false if the given \a name is already in use, otherwise it
565     registers this calendar backend and returns \c true.
566 
567     \sa availableCalendars(), fromName()
568 */
569 bool QCalendarBackend::registerAlias(const QString &name)
570 {
571     if (calendarRegistry.isDestroyed())
572         return false;
573     return calendarRegistry->registerName(this, name);
574 }
575 
576 /*!
577     Returns a pointer to a named calendar backend.
578 
579     If the given \a name is present in availableCalendars(), the backend
580     matching it is returned; otherwise, \c nullptr is returned. Matching of
581     names ignores case. Note that this won't provoke construction of a calendar
582     backend, it will only return ones that have been instantiated (and not yet
583     destroyed) by some other means. However, calendars available via the
584     QCalendar::System enum are always registered when this is called.
585 
586     \sa availableCalendars(), registerAlias(), fromEnum()
587 */
588 const QCalendarBackend *QCalendarBackend::fromName(QStringView name)
589 {
590     if (calendarRegistry.isDestroyed())
591         return nullptr;
592     calendarRegistry->populate();
593     auto it = calendarRegistry->byName.find(name.toString());
594     return it == calendarRegistry->byName.end() ? nullptr : *it;
595 }
596 
597 /*!
598     \overload
599  */
600 const QCalendarBackend *QCalendarBackend::fromName(QLatin1String name)
601 {
602     if (calendarRegistry.isDestroyed())
603         return nullptr;
604     calendarRegistry->populate();
605     auto it = calendarRegistry->byName.find(QString(name));
606     return it == calendarRegistry->byName.end() ? nullptr : *it;
607 }
608 
609 /*!
610     Returns a pointer to a calendar backend, specified by enum.
611 
612     This will instantiate the indicated calendar (which will enable fromName()
613     to return it subsequently), but only for the Qt-supported calendars for
614     which (where relevant) the appropriate feature has been enabled.
615 */
616 const QCalendarBackend *QCalendarBackend::fromEnum(QCalendar::System system)
617 {
618     if (calendarRegistry.isDestroyed() || system == QCalendar::System::User)
619         return nullptr;
620     Q_ASSERT(calendarRegistry->byId.size() >= size_t(system));
621     if (auto *c = calendarRegistry->byId.at(size_t(system)))
622         return c;
623     switch (system) {
624     case QCalendar::System::Gregorian:
625         return new QGregorianCalendar;
626 #ifndef QT_BOOTSTRAPPED
627     case QCalendar::System::Julian:
628         return new QJulianCalendar;
629     case QCalendar::System::Milankovic:
630         return new QMilankovicCalendar;
631 #endif
632 #if QT_CONFIG(jalalicalendar)
633     case QCalendar::System::Jalali:
634         return new QJalaliCalendar;
635 #endif
636 #if QT_CONFIG(islamiccivilcalendar)
637     case QCalendar::System::IslamicCivil:
638         return new QIslamicCivilCalendar;
639 #else // When highest-numbered system isn't enabled, ensure we have a case for Last:
640     case QCalendar::System::Last:
641 #endif
642     case QCalendar::System::User:
643         Q_UNREACHABLE();
644     }
645     return nullptr;
646 }
647 
648 /*!
649     \since 5.14
650 
651     \class QCalendar
652     \inmodule QtCore
653     \reentrant
654     \brief The QCalendar class describes calendar systems.
655 
656     A QCalendar object maps a year, month, and day-number to a specific day
657     (ultimately identified by its Julian day number), using the rules of a
658     particular system.
659 
660     The default QCalendar() is a proleptic Gregorian calendar, which has no year
661     zero. Other calendars may be supported by enabling suitable features or
662     loading plugins. Calendars supported as features can be constructed by
663     passing the QCalendar::System enumeration to the constructor. All supported
664     calendars may be constructed by name, once they have been constructed. (Thus
665     plugins instantiate their calendar backend to register it.) Built-in
666     backends, accessible via QCalendar::System, are also always available by
667     name.
668 
669     A QCalendar value is immutable.
670 
671     \sa QDate, QDateTime
672 */
673 
674 /*!
675     \enum QCalendar::System
676 
677     This enumerated type is used to specify a choice of calendar system.
678 
679     \value Gregorian The default calendar, used internationally.
680     \value Julian An ancient Roman calendar with too few leap years.
681     \value Milankovic A revised Julian calendar used by some Orthodox churches.
682     \value Jalali The Solar Hijri calendar (also called Persian).
683     \value IslamicCivil The (tabular) Islamic Civil calendar.
684     \omitvalue Last
685     \omitvalue User
686 
687     \sa QCalendar
688 */
689 
690 /*!
691     \fn QCalendar::QCalendar()
692     \fn QCalendar::QCalendar(QCalendar::System system)
693     \fn QCalendar::QCalendar(QLatin1String name)
694     \fn QCalendar::QCalendar(QStringView name)
695 
696     Constructs a calendar object.
697 
698     The choice of calendar to use may be indicated as \a system, using the
699     enumeration QCalendar::System, or by \a name, using a string (either Unicode
700     or Latin 1). Construction by name may depend on an instance of the given
701     calendar being constructed by other means first. With no argument, the
702     default constructor returns the Gregorian calendar.
703 
704     \sa QCalendar, System, isValid()
705 */
706 
707 QCalendar::QCalendar()
708     : d(nullptr)
709 {
710     if (calendarRegistry.isDestroyed())
711         return;
712     d = calendarRegistry->gregorianCalendar;
713     if (!d)
714         d = new QGregorianCalendar;
715 }
716 
717 QCalendar::QCalendar(QCalendar::System system)
718     : d(QCalendarBackend::fromEnum(system)) {}
719 
720 QCalendar::QCalendar(QLatin1String name)
721     : d(QCalendarBackend::fromName(name)) {}
722 
723 QCalendar::QCalendar(QStringView name)
724     : d(QCalendarBackend::fromName(name)) {}
725 
726 /*
727     \fn bool QCalendar::isValid() const
728 
729     Returns true if this is a valid calendar object.
730 
731     Constructing a calendar with an unrecognised calendar name may result in an
732     invalid object. Use this method to check after creating a calendar by name.
733 */
734 
735 // Date queries:
736 
737 /*!
738     Returns the number of days in the given \a month of the given \a year.
739 
740     Months are numbered consecutively, starting with 1 for the first month of
741     each year. If \a year is \c Unspecified (its default, if not passed), the
742     month's length in a normal year is returned.
743 
744     \sa maximumDaysInMonth(), minimumDaysInMonth()
745 */
746 int QCalendar::daysInMonth(int month, int year) const
747 {
748     return d ? d->daysInMonth(month, year) : 0;
749 }
750 
751 /*!
752     Returns the number of days in the given \a year.
753 */
754 int QCalendar::daysInYear(int year) const
755 {
756     return d ? d->daysInYear(year) : 0;
757 }
758 
759 /*!
760     Returns the number of months in the given \a year.
761 */
762 int QCalendar::monthsInYear(int year) const
763 {
764     return d ? d->monthsInYear(year) : 0;
765 }
766 
767 /*!
768     Returns \c true precisely if the given \a year, \a month, and \a day specify
769     a valid date in this calendar.
770 
771     Usually this means 1 <= month <= monthsInYear(year) and 1 <= day <=
772     daysInMonth(month, year). However, calendars with intercallary days or
773     months may complicate that.
774 */
775 bool QCalendar::isDateValid(int year, int month, int day) const
776 {
777     return d && d->isDateValid(year, month, day);
778 }
779 
780 // properties of the calendar
781 
782 /*!
783     Returns \c true if this calendar object is the Gregorian calendar object
784     used as default calendar by other Qt APIs, e.g. in QDate.
785 */
786 bool QCalendar::isGregorian() const
787 {
788     Q_ASSERT(!calendarRegistry.isDestroyed());
789     return d == calendarRegistry->gregorianCalendar;
790 }
791 
792 /*!
793     Returns \c true if the given \a year is a leap year.
794 
795     Since the year is not a whole number of days long, some years are longer
796     than others. The difference may be a whole month or just a single day; the
797     details vary between calendars.
798 
799     \sa isDateValid()
800 */
801 bool QCalendar::isLeapYear(int year) const
802 {
803     return d && d->isLeapYear(year);
804 }
805 
806 /*!
807     Returns \c true if this calendar is a lunar calendar.
808 
809     A lunar calendar is one based primarily on the phases of the moon.
810 */
811 bool QCalendar::isLunar() const
812 {
813     return d && d->isLunar();
814 }
815 
816 /*!
817     Returns \c true if this calendar is luni-solar.
818 
819     A luni-solar calendar expresses the phases of the moon but adapts itself to
820     also keep track of the Sun's varying position in the sky, relative to the
821     fixed stars.
822 */
823 bool QCalendar::isLuniSolar() const
824 {
825     return d && d->isLuniSolar();
826 }
827 
828 /*!
829     Returns \c true if this calendar is solar.
830 
831     A solar calendar is based primarily on the Sun's varying position in the
832     sky, relative to the fixed stars.
833 */
834 bool QCalendar::isSolar() const
835 {
836     return d && d->isSolar();
837 }
838 
839 /*!
840     Returns \c true if this calendar is proleptic.
841 
842     A proleptic calendar is able to describe years arbitrarily long before its
843     first. These are represented by negative year numbers and possibly by a year
844     zero.
845 
846     \sa hasYearZero()
847 */
848 bool QCalendar::isProleptic() const
849 {
850     return d && d->isProleptic();
851 }
852 
853 /*!
854     Returns \c true if this calendar has a year zero.
855 
856     A calendar may represent years from its first year onwards but provide no
857     way to describe years before its first; such a calendar has no year zero and
858     is not proleptic.
859 
860     A calendar which represents years before its first may number these years
861     simply by following the usual integer counting, so that the year before the
862     first is year zero, with negative-numbered years preceding this; such a
863     calendar is proleptic and has a year zero. A calendar might also have a year
864     zero (for example, the year of some great event, with subsequent years being
865     the first year after that event, the second year after, and so on) without
866     describing years before its year zero. Such a calendar would have a year
867     zero without being proleptic.
868 
869     Some calendars, however, represent years before their first by an alternate
870     numbering; for example, the proleptic Gregorian calendar's first year is 1
871     CE and the year before it is 1 BCE, preceded by 2 BCE and so on. In this
872     case, we use negative year numbers for this alternate numbering, with year
873     -1 as the year before year 1, year -2 as the year before year -1 and so
874     on. Such a calendar is proleptic but has no year zero.
875 
876     \sa isProleptic()
877 */
878 bool QCalendar::hasYearZero() const
879 {
880     return d && d->hasYearZero();
881 }
882 
883 /*!
884     Returns the number of days in the longest month in the calendar, in any year.
885 
886     \sa daysInMonth(), minimumDaysInMonth()
887 */
888 int QCalendar::maximumDaysInMonth() const
889 {
890     return d ? d->maximumDaysInMonth() : 0;
891 }
892 
893 /*!
894     Returns the number of days in the shortest month in the calendar, in any year.
895 
896     \sa daysInMonth(), maximumDaysInMonth()
897 */
898 int QCalendar::minimumDaysInMonth() const
899 {
900     return d ? d->minimumDaysInMonth() : 0;
901 }
902 
903 /*!
904     Returns the largest number of months that any year may contain.
905 
906     \sa monthName(), standaloneMonthName(), monthsInYear()
907 */
908 int QCalendar::maximumMonthsInYear() const
909 {
910     return d ? d->maximumMonthsInYear() : 0;
911 }
912 
913 // Julian Day conversions:
914 
915 /*!
916     \fn QDate QCalendar::dateFromParts(int year, int month, int day) const
917     \fn QDate QCalendar::dateFromParts(const QCalendar::YearMonthDay &parts) const
918 
919     Converts a year, month, and day to a QDate.
920 
921     The \a year, \a month, and \a day may be passed as separate numbers or
922     packaged together as the members of \a parts. Returns a QDate with the given
923     year, month, and day of the month in this calendar, if there is one.
924     Otherwise, including the case where any of the values is
925     QCalendar::Unspecified, returns a QDate whose isNull() is true.
926 
927     \sa isDateValid(), partsFromDate()
928 */
929 QDate QCalendar::dateFromParts(int year, int month, int day) const
930 {
931     qint64 jd;
932     return d && d->dateToJulianDay(year, month, day, &jd)
933         ? QDate::fromJulianDay(jd) : QDate();
934 }
935 
936 QDate QCalendar::dateFromParts(const QCalendar::YearMonthDay &parts) const
937 {
938     return parts.isValid() ? dateFromParts(parts.year, parts.month, parts.day) : QDate();
939 }
940 
941 /*!
942     Converts a QDate to a year, month, and day of the month.
943 
944     The returned structure's isValid() shall be false if the calendar is unable
945     to represent the given \a date. Otherwise its year, month, and day
946     members record the so-named parts of its representation.
947 
948     \sa dateFromParts(), isProleptic(), hasYearZero()
949 */
950 QCalendar::YearMonthDay QCalendar::partsFromDate(QDate date) const
951 {
952     return d ? d->julianDayToDate(date.toJulianDay()) : YearMonthDay();
953 }
954 
955 /*!
956     Returns the day of the week number for the given \a date.
957 
958     Returns zero if the calendar is unable to represent the indicated date.
959     Returns 1 for Monday through 7 for Sunday. Calendars with intercallary days
960     may use other numbers to represent these.
961 
962     \sa partsFromDate(), Qt::DayOfWeek
963 */
964 int QCalendar::dayOfWeek(QDate date) const
965 {
966     return d ? d->dayOfWeek(date.toJulianDay()) : 0;
967 }
968 
969 // Locale data access
970 
971 /*!
972     Returns a suitably localised name for a month.
973 
974     The month is indicated by a number, with \a month = 1 meaning the first
975     month of the year and subsequent months numbered accordingly. Returns an
976     empty string if the \a month number is unrecognized.
977 
978     The \a year may be Unspecified, in which case the mapping from numbers to
979     names for a typical year's months should be used. Some calendars have leap
980     months that aren't always at the end of the year; their mapping of month
981     numbers to names may then depend on the placement of a leap month. Thus the
982     year should normally be specified, if known.
983 
984     The name is returned in the form that would normally be used in a full date,
985     in the specified \a locale; the \a format determines how fully it shall be
986     expressed (i.e. to what extent it is abbreviated).
987 
988     \sa standaloneMonthName(), maximumMonthsInYear(), dateTimeToString()
989 */
990 QString QCalendar::monthName(const QLocale &locale, int month, int year,
991                              QLocale::FormatType format) const
992 {
993     const int maxMonth = year == Unspecified ? maximumMonthsInYear() : monthsInYear(year);
994     if (!d || month < 1 || month > maxMonth)
995         return QString();
996 
997     return d->monthName(locale, month, year, format);
998 }
999 
1000 /*!
1001     Returns a suitably localised standalone name for a month.
1002 
1003     The month is indicated by a number, with \a month = 1 meaning the first
1004     month of the year and subsequent months numbered accordingly. Returns an
1005     empty string if the \a month number is unrecognized.
1006 
1007     The \a year may be Unspecified, in which case the mapping from numbers to
1008     names for a typical year's months should be used. Some calendars have leap
1009     months that aren't always at the end of the year; their mapping of month
1010     numbers to names may then depend on the placement of a leap month. Thus the
1011     year should normally be specified, if known.
1012 
1013     The name is returned in the form that would be used in isolation in the
1014     specified \a locale; the \a format determines how fully it shall be
1015     expressed (i.e. to what extent it is abbreviated).
1016 
1017     \sa monthName(), maximumMonthsInYear(), dateTimeToString()
1018 */
1019 QString QCalendar::standaloneMonthName(const QLocale &locale, int month, int year,
1020                                        QLocale::FormatType format) const
1021 {
1022     const int maxMonth = year == Unspecified ? maximumMonthsInYear() : monthsInYear(year);
1023     if (!d || month < 1 || month > maxMonth)
1024         return QString();
1025 
1026     return d->standaloneMonthName(locale, month, year, format);
1027 }
1028 
1029 /*!
1030     Returns a suitably localised name for a day of the week.
1031 
1032     The days of the week are numbered from 1 for Monday through 7 for
1033     Sunday. Some calendars may support higher numbers for other days
1034     (e.g. intercallary days, that are not part of any week). Returns an empty
1035     string if the \a day number is unrecognized.
1036 
1037     The name is returned in the form that would normally be used in a full date,
1038     in the specified \a locale; the \a format determines how fully it shall be
1039     expressed (i.e. to what extent it is abbreviated).
1040 
1041     \sa standaloneWeekDayName(), dayOfWeek()
1042 */
1043 QString QCalendar::weekDayName(const QLocale &locale, int day,
1044                                QLocale::FormatType format) const
1045 {
1046     return d ? d->weekDayName(locale, day, format) : QString();
1047 }
1048 
1049 /*!
1050     Returns a suitably localised standalone name for a day of the week.
1051 
1052     The days of the week are numbered from 1 for Monday through 7 for
1053     Sunday. Some calendars may support higher numbers for other days
1054     (e.g. intercallary days, that are not part of any week). Returns an empty
1055     string if the \a day number is unrecognized.
1056 
1057     The name is returned in the form that would be used in isolation (for
1058     example as a column heading in a calendar's tabular display of a month with
1059     successive weeks as rows) in the specified \a locale; the \a format
1060     determines how fully it shall be expressed (i.e. to what extent it is
1061     abbreviated).
1062 
1063     \sa weekDayName(), dayOfWeek()
1064 */
1065 QString QCalendar::standaloneWeekDayName(const QLocale &locale, int day,
1066                                          QLocale::FormatType format) const
1067 {
1068     return d ? d->standaloneWeekDayName(locale, day, format) : QString();
1069 }
1070 
1071 /*!
1072     Returns a string representing a given date, time or date-time.
1073 
1074     If \a datetime is valid, it is represented and format specifiers for both
1075     date and time fields are recognized; otherwise, if \a dateOnly is valid, it
1076     is represented and only format specifiers for date fields are recognized;
1077     finally, if \a timeOnly is valid, it is represented and only format
1078     specifiers for time fields are recognized. If none of these is valid, an
1079     empty string is returned.
1080 
1081     See QDate::toString and QTime::toString() for the supported field
1082     specifiers.  Characters in \a format that are recognized as field specifiers
1083     are replaced by text representing appropriate data from the date and/or time
1084     being represented. The texts to represent them may depend on the \a locale
1085     specified. Other charagers in \a format are copied verbatim into the
1086     returned string.
1087 
1088     \sa monthName(), weekDayName(), QDate::toString(), QTime::toString()
1089 */
1090 QString QCalendar::dateTimeToString(QStringView format, const QDateTime &datetime,
1091                                     const QDate &dateOnly, const QTime &timeOnly,
1092                                     const QLocale &locale) const
1093 {
1094     return d ? d->dateTimeToString(format, datetime, dateOnly, timeOnly, locale) : QString();
1095 }
1096 
1097 /*!
1098     Returns a list of names of the available calendar systems.
1099 
1100     These may be supplied by plugins or other code linked into an application,
1101     in addition to the ones provided by Qt, some of which are controlled by
1102     features.
1103 */
1104 QStringList QCalendar::availableCalendars()
1105 {
1106     return QCalendarBackend::availableCalendars();
1107 }
1108 
1109 QT_END_NAMESPACE
