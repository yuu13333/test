Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2015 Giuseppe D'Angelo <dangelog@gmail.com>.
4 ** Copyright (C) 2015 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Giuseppe D'Angelo <giuseppe.dangelo@kdab.com>
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the test suite of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:GPL-EXCEPT$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
22 ** included in the packaging of this file. Please review the following
23 ** information to ensure the GNU General Public License requirements will
24 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
25 **
26 ** $QT_END_LICENSE$
27 **
28 ****************************************************************************/
29 
30 #include <QtTest/QtTest>
31 #include <qstring.h>
32 #include <qlist.h>
33 #include <qstringlist.h>
34 #include <qhash.h>
35 
36 #include <qobject.h>
37 #include <qregularexpression.h>
38 #include <qthread.h>
39 
40 Q_DECLARE_METATYPE(QRegularExpression::PatternOptions)
41 Q_DECLARE_METATYPE(QRegularExpression::MatchType)
42 Q_DECLARE_METATYPE(QRegularExpression::MatchOptions)
43 
44 class tst_QRegularExpression : public QObject
45 {
46     Q_OBJECT
47 
48 private slots:
49     void defaultConstructors();
50     void moveSemantics();
51     void moveSemanticsMatch();
52     void moveSemanticsMatchIterator();
53     void gettersSetters_data();
54     void gettersSetters();
55     void escape_data();
56     void escape();
57     void validity_data();
58     void validity();
59     void patternOptions_data();
60     void patternOptions();
61     void normalMatch_data();
62     void normalMatch();
63     void partialMatch_data();
64     void partialMatch();
65     void globalMatch_data();
66     void globalMatch();
67     void serialize_data();
68     void serialize();
69     void operatoreq_data();
70     void operatoreq();
71     void captureCount_data();
72     void captureCount();
73     void captureNames_data();
74     void captureNames();
75     void captureNamesNul();
76     void pcreJitStackUsage_data();
77     void pcreJitStackUsage();
78     void regularExpressionMatch_data();
79     void regularExpressionMatch();
80     void JOptionUsage_data();
81     void JOptionUsage();
82     void QStringAndQStringViewEquivalence();
83     void threadSafety_data();
84     void threadSafety();
85 
86     void wildcard_data();
87     void wildcard();
88     void testInvalidWildcard_data();
89     void testInvalidWildcard();
90 
91 private:
92     void provideRegularExpressions();
93 };
94 
95 struct Match
96 {
97     Match()
98     {
99         clear();
100     }
101 
102     void clear()
103     {
104         isValid = false;
105         hasMatch = false;
106         hasPartialMatch = false;
107         captured.clear();
108         namedCaptured.clear();
109     }
110 
111     bool isValid;
112     bool hasMatch;
113     bool hasPartialMatch;
114     QStringList captured;
115     QHash<QString, QString> namedCaptured;
116 };
117 QT_BEGIN_NAMESPACE
118 Q_DECLARE_TYPEINFO(Match, Q_MOVABLE_TYPE);
119 QT_END_NAMESPACE
120 
121 Q_DECLARE_METATYPE(Match)
122 
123 bool operator==(const QRegularExpressionMatch &rem, const Match &m)
124 {
125     if (rem.isValid() != m.isValid)
126         return false;
127     if (!rem.isValid())
128         return true;
129     if ((rem.hasMatch() != m.hasMatch) || (rem.hasPartialMatch() != m.hasPartialMatch))
130         return false;
131     if (rem.hasMatch() || rem.hasPartialMatch()) {
132         if (rem.lastCapturedIndex() != (m.captured.size() - 1))
133             return false;
134         for (int i = 0; i <= rem.lastCapturedIndex(); ++i) {
135             QString remCaptured = rem.captured(i);
136             QString mCaptured = m.captured.at(i);
137             if (remCaptured != mCaptured
138                 || remCaptured.isNull() != mCaptured.isNull()
139                 || remCaptured.isEmpty() != mCaptured.isEmpty()) {
140                 return false;
141             }
142         }
143 
144         for (auto it = m.namedCaptured.begin(), end = m.namedCaptured.end(); it != end; ++it) {
145             const QString remCaptured = rem.captured(it.key());
146             const QString mCaptured = it.value();
147             if (remCaptured != mCaptured
148                 || remCaptured.isNull() != mCaptured.isNull()
149                 || remCaptured.isEmpty() != mCaptured.isEmpty()) {
150                 return false;
151             }
152         }
153     }
154 
155     return true;
156 }
157 
158 bool operator==(const Match &m, const QRegularExpressionMatch &rem)
159 {
160     return operator==(rem, m);
161 }
162 
163 bool operator!=(const QRegularExpressionMatch &rem, const Match &m)
164 {
165     return !operator==(rem, m);
166 }
167 
168 bool operator!=(const Match &m, const QRegularExpressionMatch &rem)
169 {
170     return !operator==(m, rem);
171 }
172 
173 
174 bool operator==(const QRegularExpressionMatchIterator &iterator, const QList<Match> &expectedMatchList)
175 {
176     QRegularExpressionMatchIterator i = iterator;
177 
178     for (const Match &expectedMatch : expectedMatchList) {
179         if (!i.hasNext())
180             return false;
181 
182         QRegularExpressionMatch match = i.next();
183         if (match != expectedMatch)
184             return false;
185     }
186 
187     if (i.hasNext())
188         return false;
189 
190     i = iterator;
191 
192     int index = 0;
193     for (const QRegularExpressionMatch &match : i) {
194         if (match != expectedMatchList[index++])
195             return false;
196     }
197 
198     if (index != expectedMatchList.size())
199         return false;
200 
201     // do it again
202     index = 0;
203     for (const QRegularExpressionMatch &match : i) {
204         if (match != expectedMatchList[index++])
205             return false;
206     }
207 
208     if (index != expectedMatchList.size())
209         return false;
210 
211     return true;
212 }
213 
214 bool operator==(const QList<Match> &expectedMatchList, const QRegularExpressionMatchIterator &iterator)
215 {
216     return operator==(iterator, expectedMatchList);
217 }
218 
219 bool operator!=(const QRegularExpressionMatchIterator &iterator, const QList<Match> &expectedMatchList)
220 {
221     return !operator==(iterator, expectedMatchList);
222 }
223 
224 bool operator!=(const QList<Match> &expectedMatchList, const QRegularExpressionMatchIterator &iterator)
225 {
226     return !operator==(expectedMatchList, iterator);
227 }
228 
229 void consistencyCheck(const QRegularExpressionMatch &match)
230 {
231     if (match.isValid()) {
232         QVERIFY(match.regularExpression().isValid());
233         QVERIFY(!(match.hasMatch() && match.hasPartialMatch()));
234 
235         if (match.hasMatch() || match.hasPartialMatch()) {
236             QVERIFY(match.lastCapturedIndex() >= 0);
237             if (match.hasPartialMatch())
238                 QVERIFY(match.lastCapturedIndex() == 0);
239 
240             for (int i = 0; i <= match.lastCapturedIndex(); ++i) {
241                 qsizetype startPos = match.capturedStart(i);
242                 qsizetype endPos = match.capturedEnd(i);
243                 qsizetype length = match.capturedLength(i);
244                 QString captured = match.captured(i);
245                 QStringView capturedView = match.capturedView(i);
246 
247                 if (!captured.isNull()) {
248                     QVERIFY(startPos >= 0);
249                     QVERIFY(endPos >= 0);
250                     QVERIFY(length >= 0);
251                     QVERIFY(endPos >= startPos);
252                     QVERIFY((endPos - startPos) == length);
253                     QVERIFY(captured == capturedView);
254                 } else {
255                     QVERIFY(startPos == -1);
256                     QVERIFY(endPos == -1);
257                     QVERIFY((endPos - startPos) == length);
258                     QVERIFY(capturedView.isNull());
259                 }
260             }
261         }
262     } else {
263         QVERIFY(!match.hasMatch());
264         QVERIFY(!match.hasPartialMatch());
265         QVERIFY(match.captured(0).isNull());
266         QVERIFY(match.capturedStart(0) == -1);
267         QVERIFY(match.capturedEnd(0) == -1);
268         QVERIFY(match.capturedLength(0) == 0);
269     }
270 }
271 
272 void consistencyCheck(const QRegularExpressionMatchIterator &iterator)
273 {
274     QRegularExpressionMatchIterator i(iterator); // make a copy, we modify it
275     if (i.isValid()) {
276         while (i.hasNext()) {
277             QRegularExpressionMatch peeked = i.peekNext();
278             QRegularExpressionMatch match = i.next();
279             consistencyCheck(peeked);
280             consistencyCheck(match);
281             QVERIFY(match.isValid());
282             QVERIFY(match.hasMatch() || match.hasPartialMatch());
283             QCOMPARE(i.regularExpression(), match.regularExpression());
284             QCOMPARE(i.matchOptions(), match.matchOptions());
285             QCOMPARE(i.matchType(), match.matchType());
286 
287             QVERIFY(peeked.isValid() == match.isValid());
288             QVERIFY(peeked.hasMatch() == match.hasMatch());
289             QVERIFY(peeked.hasPartialMatch() == match.hasPartialMatch());
290             QVERIFY(peeked.lastCapturedIndex() == match.lastCapturedIndex());
291             for (int i = 0; i <= peeked.lastCapturedIndex(); ++i) {
292                 QVERIFY(peeked.captured(i) == match.captured(i));
293                 QVERIFY(peeked.capturedStart(i) == match.capturedStart(i));
294                 QVERIFY(peeked.capturedEnd(i) == match.capturedEnd(i));
295             }
296         }
297     } else {
298         QVERIFY(!i.hasNext());
299         QTest::ignoreMessage(QtWarningMsg, "QRegularExpressionMatchIterator::peekNext() called on an iterator already at end");
300         QRegularExpressionMatch peeked = i.peekNext();
301         QTest::ignoreMessage(QtWarningMsg, "QRegularExpressionMatchIterator::next() called on an iterator already at end");
302         QRegularExpressionMatch match = i.next();
303         consistencyCheck(peeked);
304         consistencyCheck(match);
305         QVERIFY(!match.isValid());
306         QVERIFY(!peeked.isValid());
307     }
308 
309 }
310 
311 template<typename Result>
312 static void prepareResultForNoMatchType(Result *r, const Result &orig)
313 {
314     Q_UNUSED(r);
315     Q_UNUSED(orig);
316 }
317 
318 static void prepareResultForNoMatchType(Match *m, const Match &orig)
319 {
320     m->isValid = orig.isValid;
321 }
322 
323 template<typename QREMatch, typename QREMatchFunc, typename Subject, typename Result>
324 static void testMatchImpl(const QRegularExpression &regexp,
325                           QREMatchFunc matchingMethod,
326                           const Subject &subject,
327                           qsizetype offset,
328                           QRegularExpression::MatchType matchType,
329                           QRegularExpression::MatchOptions matchOptions,
330                           const Result &result)
331 {
332     {
333         const QREMatch m = (regexp.*matchingMethod)(subject, offset, matchType, matchOptions);
334         consistencyCheck(m);
335         QVERIFY(m == result);
336         QCOMPARE(m.regularExpression(), regexp);
337         QCOMPARE(m.matchType(), matchType);
338         QCOMPARE(m.matchOptions(), matchOptions);
339     }
340     {
341         // ignore the expected results provided by the match object --
342         // we'll never get any result when testing the NoMatch type.
343         // Just check the validity of the match here.
344         Result realMatch;
345         prepareResultForNoMatchType(&realMatch, result);
346 
347         const QREMatch m = (regexp.*matchingMethod)(subject, offset, QRegularExpression::NoMatch, matchOptions);
348         consistencyCheck(m);
349         QVERIFY(m == realMatch);
350         QCOMPARE(m.regularExpression(), regexp);
351         QCOMPARE(m.matchType(), QRegularExpression::NoMatch);
352         QCOMPARE(m.matchOptions(), matchOptions);
353     }
354 }
355 
356 template<typename QREMatch, typename QREMatchFuncForString, typename QREMatchFuncForStringRef, typename Result>
357 static void testMatch(const QRegularExpression &regexp,
358                       QREMatchFuncForString matchingMethodForString,
359                       QREMatchFuncForStringRef matchingMethodForStringRef,
360                       const QString &subject,
361                       qsizetype offset,
362                       QRegularExpression::MatchType matchType,
363                       QRegularExpression::MatchOptions matchOptions,
364                       const Result &result)
365 {
366     // test with QString as subject type
367     testMatchImpl<QREMatch>(regexp, matchingMethodForString, subject, offset, matchType, matchOptions, result);
368 
369     // test with QStringView as subject type
370     testMatchImpl<QREMatch>(regexp,
371                             matchingMethodForStringRef,
372                             QStringView(subject),
373                             offset,
374                             matchType,
375                             matchOptions,
376                             result);
377 }
378 
379 typedef QRegularExpressionMatch (QRegularExpression::*QREMatchStringPMF)(const QString &, qsizetype, QRegularExpression::MatchType, QRegularExpression::MatchOptions) const;
380 typedef QRegularExpressionMatch (QRegularExpression::*QREMatchStringViewPMF)(QStringView, qsizetype, QRegularExpression::MatchType, QRegularExpression::MatchOptions) const;
381 typedef QRegularExpressionMatchIterator (QRegularExpression::*QREGlobalMatchStringPMF)(const QString &, qsizetype, QRegularExpression::MatchType, QRegularExpression::MatchOptions) const;
382 typedef QRegularExpressionMatchIterator (QRegularExpression::*QREGlobalMatchStringViewPMF)(QStringView, qsizetype, QRegularExpression::MatchType, QRegularExpression::MatchOptions) const;
383 
384 void tst_QRegularExpression::provideRegularExpressions()
385 {
386     QTest::addColumn<QString>("pattern");
387     QTest::addColumn<QRegularExpression::PatternOptions>("patternOptions");
388 
389     QTest::newRow("emptynull01") << QString()
390                                  << QRegularExpression::PatternOptions{};
391     QTest::newRow("emptynull02") << QString()
392                                  << QRegularExpression::PatternOptions(QRegularExpression::CaseInsensitiveOption
393                                                                        | QRegularExpression::DotMatchesEverythingOption
394                                                                        | QRegularExpression::MultilineOption);
395     QTest::newRow("emptynull03") << ""
396                                  << QRegularExpression::PatternOptions{};
397     QTest::newRow("emptynull04") << ""
398                                  << QRegularExpression::PatternOptions(QRegularExpression::CaseInsensitiveOption
399                                                                        | QRegularExpression::DotMatchesEverythingOption
400                                                                        | QRegularExpression::MultilineOption);
401 
402     QTest::newRow("regexp01") << "a pattern"
403                               << QRegularExpression::PatternOptions{};
404     QTest::newRow("regexp02") << "^a (.*) more complicated(?<P>pattern)$"
405                               << QRegularExpression::PatternOptions{};
406     QTest::newRow("regexp03") << "(?:a) pAttErN"
407                               << QRegularExpression::PatternOptions(QRegularExpression::CaseInsensitiveOption);
408     QTest::newRow("regexp04") << "a\nmultiline\npattern"
409                               << QRegularExpression::PatternOptions(QRegularExpression::MultilineOption);
410     QTest::newRow("regexp05") << "an extended # IGNOREME\npattern"
411                               << QRegularExpression::PatternOptions(QRegularExpression::ExtendedPatternSyntaxOption);
412     QTest::newRow("regexp06") << "a [sS]ingleline .* match"
413                               << QRegularExpression::PatternOptions(QRegularExpression::DotMatchesEverythingOption);
414     QTest::newRow("regexp07") << "multiple.*options"
415                               << QRegularExpression::PatternOptions(QRegularExpression::CaseInsensitiveOption
416                                                                     | QRegularExpression::DotMatchesEverythingOption
417                                                                     | QRegularExpression::MultilineOption
418                                                                     | QRegularExpression::DontCaptureOption
419                                                                     | QRegularExpression::InvertedGreedinessOption);
420 
421     QTest::newRow("unicode01") << QString::fromUtf8("^s[ome] latin-1 \xc3\x80\xc3\x88\xc3\x8c\xc3\x92\xc3\x99 chars$")
422                                << QRegularExpression::PatternOptions{};
423     QTest::newRow("unicode02") << QString::fromUtf8("^s[ome] latin-1 \xc3\x80\xc3\x88\xc3\x8c\xc3\x92\xc3\x99 chars$")
424                                << QRegularExpression::PatternOptions(QRegularExpression::CaseInsensitiveOption
425                                                                      | QRegularExpression::DotMatchesEverythingOption
426                                                                      | QRegularExpression::InvertedGreedinessOption);
427     QTest::newRow("unicode03") << QString::fromUtf8("Unicode \xf0\x9d\x85\x9d \xf0\x9d\x85\x9e\xf0\x9d\x85\x9f")
428                                << QRegularExpression::PatternOptions{};
429     QTest::newRow("unicode04") << QString::fromUtf8("Unicode \xf0\x9d\x85\x9d \xf0\x9d\x85\x9e\xf0\x9d\x85\x9f")
430                                << QRegularExpression::PatternOptions(QRegularExpression::CaseInsensitiveOption
431                                                                      | QRegularExpression::DotMatchesEverythingOption
432                                                                      | QRegularExpression::InvertedGreedinessOption);
433 }
434 
435 void tst_QRegularExpression::defaultConstructors()
436 {
437     QRegularExpression re;
438     QCOMPARE(re.pattern(), QString());
439     QCOMPARE(re.patternOptions(), QRegularExpression::NoPatternOption);
440 
441     QRegularExpressionMatch match;
442     QCOMPARE(match.regularExpression(), QRegularExpression());
443     QCOMPARE(match.regularExpression(), re);
444     QCOMPARE(match.matchType(), QRegularExpression::NoMatch);
445     QCOMPARE(match.matchOptions(), QRegularExpression::NoMatchOption);
446     QCOMPARE(match.hasMatch(), false);
447     QCOMPARE(match.hasPartialMatch(), false);
448     QCOMPARE(match.isValid(), true);
449     QCOMPARE(match.lastCapturedIndex(), -1);
450 
451     QRegularExpressionMatchIterator iterator;
452     QCOMPARE(iterator.regularExpression(), QRegularExpression());
453     QCOMPARE(iterator.regularExpression(), re);
454     QCOMPARE(iterator.matchType(), QRegularExpression::NoMatch);
455     QCOMPARE(iterator.matchOptions(), QRegularExpression::NoMatchOption);
456     QCOMPARE(iterator.isValid(), true);
457     QCOMPARE(iterator.hasNext(), false);
458 }
459 
460 void tst_QRegularExpression::moveSemantics()
461 {
462     const QString pattern { "pattern" };
463     const QRegularExpression::PatternOptions options { QRegularExpression::CaseInsensitiveOption };
464     QRegularExpression re(pattern, options);
465 
466     QRegularExpression expr1(std::move(re));
467     QCOMPARE(expr1.pattern(), pattern);
468     QCOMPARE(expr1.patternOptions(), options);
469 
470     QRegularExpression expr2 = std::move(expr1);
471     QCOMPARE(expr2.pattern(), pattern);
472     QCOMPARE(expr2.patternOptions(), options);
473 
474     // verify that moved-from object has the same state, as a default-constructed one
475     QRegularExpression expr3;
476     QCOMPARE(expr1.pattern(), expr3.pattern());
477     QCOMPARE(expr1.patternOptions(), expr3.patternOptions());
478     QCOMPARE(expr1.isValid(), expr3.isValid());
479     QCOMPARE(expr1.patternErrorOffset(), expr3.patternErrorOffset());
480     QCOMPARE(expr1.errorString(), expr3.errorString());
481     QCOMPARE(expr1.captureCount(), expr3.captureCount());
482     QCOMPARE(expr1.namedCaptureGroups(), expr3.namedCaptureGroups());
483     expr1.optimize(); // simply call it to check that it does not crash
484     QVERIFY(expr1 == expr3);
485 
486     // test that match results are also equal
487     auto matchExpression1 = expr1.match("test");
488     auto matchExpression3 = expr3.match("test");
489     QCOMPARE(matchExpression1.regularExpression(), matchExpression3.regularExpression());
490     QCOMPARE(matchExpression1.matchType(), matchExpression3.matchType());
491     QCOMPARE(matchExpression1.matchOptions(), matchExpression3.matchOptions());
492     QCOMPARE(matchExpression1.hasMatch(), matchExpression3.hasMatch());
493     QCOMPARE(matchExpression1.hasPartialMatch(), matchExpression3.hasPartialMatch());
494     QCOMPARE(matchExpression1.isValid(), matchExpression3.isValid());
495     QCOMPARE(matchExpression1.lastCapturedIndex(), matchExpression3.lastCapturedIndex());
496     QCOMPARE(matchExpression1.captured(), matchExpression3.captured());
497     QCOMPARE(matchExpression1.capturedStart(), matchExpression3.capturedStart());
498     QCOMPARE(matchExpression1.capturedEnd(), matchExpression3.capturedEnd());
499     QCOMPARE(matchExpression1.capturedLength(), matchExpression3.capturedLength());
500     QCOMPARE(matchExpression1.capturedTexts(), matchExpression3.capturedTexts());
501 
502     auto matchExpressionIterator1 = expr1.globalMatch("test");
503     auto matchExpressionIterator3 = expr3.globalMatch("test");
504     QCOMPARE(matchExpressionIterator1.isValid(), matchExpression3.isValid());
505     QCOMPARE(matchExpressionIterator1.hasNext(), matchExpressionIterator3.hasNext());
506     QCOMPARE(matchExpressionIterator1.regularExpression(),
507              matchExpressionIterator3.regularExpression());
508     QCOMPARE(matchExpressionIterator1.matchType(), matchExpressionIterator3.matchType());
509     QCOMPARE(matchExpressionIterator1.matchOptions(), matchExpressionIterator3.matchOptions());
510 
511     // now call setters, which should recreate d-ptr
512     expr1.setPatternOptions(options);
513     expr1.setPattern("test");
514     QCOMPARE(expr1.pattern(), QString("test"));
515     QCOMPARE(expr1.patternOptions(), options);
516 }
517 
518 void tst_QRegularExpression::moveSemanticsMatch()
519 {
520     QRegularExpression re("test");
521 
522     QRegularExpressionMatch match = re.match("abctestdef");
523     QCOMPARE(match.hasMatch(), true);
524     QCOMPARE(match.capturedStart(), 3);
525     QCOMPARE(match.capturedEnd(), 7);
526 
527     QRegularExpressionMatch match1(std::move(match));
528     QCOMPARE(match1.hasMatch(), true);
529     QCOMPARE(match1.capturedStart(), 3);
530     QCOMPARE(match1.capturedEnd(), 7);
531 
532     QRegularExpressionMatch match2 = std::move(match1);
533     QCOMPARE(match2.hasMatch(), true);
534     QCOMPARE(match2.capturedStart(), 3);
535     QCOMPARE(match2.capturedEnd(), 7);
536 
537     // verify that moved-from object has the same state, as default-constructed one
538     QRegularExpressionMatch match3;
539     QCOMPARE(match1.regularExpression(), match3.regularExpression());
540     QCOMPARE(match1.matchType(), match3.matchType());
541     QCOMPARE(match1.matchOptions(), match3.matchOptions());
542     QCOMPARE(match1.hasMatch(), match3.hasMatch());
543     QCOMPARE(match1.hasPartialMatch(), match3.hasPartialMatch());
544     QCOMPARE(match1.isValid(), match3.isValid());
545     QCOMPARE(match1.lastCapturedIndex(), match3.lastCapturedIndex());
546     QCOMPARE(match1.captured(), match3.captured());
547     QCOMPARE(match1.captured("test"), match3.captured("test"));
548     QCOMPARE(match1.capturedTexts(), match3.capturedTexts());
549     QCOMPARE(match1.capturedStart(), match3.capturedStart());
550     QCOMPARE(match1.capturedEnd(), match3.capturedEnd());
551     QCOMPARE(match1.capturedLength(), match3.capturedLength());
552     QCOMPARE(match1.capturedStart("test"), match3.capturedStart("test"));
553     QCOMPARE(match1.capturedEnd("test"), match3.capturedEnd("test"));
554     QCOMPARE(match1.capturedLength("test"), match3.capturedLength("test"));
555 }
556 
557 void tst_QRegularExpression::moveSemanticsMatchIterator()
558 {
559     QRegularExpression re("(\\w+)");
560     QRegularExpressionMatchIterator it = re.globalMatch("some test");
561     QVERIFY(it.isValid());
562     QVERIFY(it.hasNext());
563 
564     QRegularExpressionMatchIterator it1(std::move(it));
565     QVERIFY(it1.isValid());
566     QVERIFY(it1.hasNext());
567 
568     QRegularExpressionMatchIterator it2 = std::move(it1);
569     QVERIFY(it2.isValid());
570     QVERIFY(it2.hasNext());
571 
572     // verify that moved-from object has the same state, as default-constructed one
573     QRegularExpressionMatchIterator it3;
574     QCOMPARE(it1.isValid(), it3.isValid());
575     QCOMPARE(it1.hasNext(), it3.hasNext());
576     QCOMPARE(it1.regularExpression(), it3.regularExpression());
577     QCOMPARE(it1.matchType(), it3.matchType());
578     QCOMPARE(it1.matchOptions(), it3.matchOptions());
579 
580     // simply call the methods to check that the app does not crash
581     it.peekNext();
582     it.next();
583 }
584 
585 void tst_QRegularExpression::gettersSetters_data()
586 {
587     provideRegularExpressions();
588 }
589 
590 void tst_QRegularExpression::gettersSetters()
591 {
592     QFETCH(QString, pattern);
593     QFETCH(QRegularExpression::PatternOptions, patternOptions);
594     {
595         QRegularExpression re;
596         re.setPattern(pattern);
597         QCOMPARE(re.pattern(), pattern);
598         QCOMPARE(re.patternOptions(), QRegularExpression::NoPatternOption);
599     }
600     {
601         QRegularExpression re;
602         re.setPatternOptions(patternOptions);
603         QCOMPARE(re.pattern(), QString());
604         QCOMPARE(re.patternOptions(), patternOptions);
605     }
606     {
607         QRegularExpression re(pattern);
608         QCOMPARE(re.pattern(), pattern);
609         QCOMPARE(re.patternOptions(), QRegularExpression::NoPatternOption);
610     }
611     {
612         QRegularExpression re(pattern, patternOptions);
613         QCOMPARE(re.pattern(), pattern);
614         QCOMPARE(re.patternOptions(), patternOptions);
615     }
616 }
617 
618 void tst_QRegularExpression::escape_data()
619 {
620     QTest::addColumn<QString>("string");
621     QTest::addColumn<QString>("escaped");
622     QTest::newRow("escape01") << "a normal pattern"
623                               << "a\\ normal\\ pattern";
624 
625     QTest::newRow("escape02") << "abcdefghijklmnopqrstuvzABCDEFGHIJKLMNOPQRSTUVZ1234567890_"
626                               << "abcdefghijklmnopqrstuvzABCDEFGHIJKLMNOPQRSTUVZ1234567890_";
627 
628     QTest::newRow("escape03") << "^\\ba\\b.*(?<NAME>reg|exp)$"
629                               << "\\^\\\\ba\\\\b\\.\\*\\(\\?\\<NAME\\>reg\\|exp\\)\\$";
630 
631     QString nulString("abcXabcXXabc");
632     nulString[3] = nulString[7] = nulString[8] = QChar(0, 0);
633     QTest::newRow("NUL") << nulString
634                          << "abc\\0abc\\0\\0abc";
635 
636     QTest::newRow("unicode01") << QString::fromUtf8("^s[ome] latin-1 \xc3\x80\xc3\x88\xc3\x8c\xc3\x92\xc3\x99 chars$")
637                                << QString::fromUtf8("\\^s\\[ome\\]\\ latin\\-1\\ \\\xc3\x80\\\xc3\x88\\\xc3\x8c\\\xc3\x92\\\xc3\x99\\ chars\\$");
638     QTest::newRow("unicode02") << QString::fromUtf8("Unicode \xf0\x9d\x85\x9d \xf0\x9d\x85\x9e\xf0\x9d\x85\x9f")
639                                << QString::fromUtf8("Unicode\\ \\\xf0\x9d\x85\x9d\\ \\\xf0\x9d\x85\x9e\\\xf0\x9d\x85\x9f");
640 
641     QString unicodeAndNulString = QString::fromUtf8("^\xc3\x80\xc3\x88\xc3\x8cN\xc3\x92NN\xc3\x99 chars$");
642     unicodeAndNulString[4] = unicodeAndNulString[6] = unicodeAndNulString[7] = QChar(0, 0);
643     QTest::newRow("unicode03") << unicodeAndNulString
644                                << QString::fromUtf8("\\^\\\xc3\x80\\\xc3\x88\\\xc3\x8c\\0\\\xc3\x92\\0\\0\\\xc3\x99\\ chars\\$");
645 }
646 
647 void tst_QRegularExpression::escape()
648 {
649     QFETCH(QString, string);
650     QFETCH(QString, escaped);
651     QCOMPARE(QRegularExpression::escape(string), escaped);
652     QRegularExpression re(escaped);
653     QCOMPARE(re.isValid(), true);
654 }
655 
656 void tst_QRegularExpression::validity_data()
657 {
658     QTest::addColumn<QString>("pattern");
659     QTest::addColumn<bool>("validity");
660 
661     QTest::newRow("valid01") << "a pattern" << true;
662     QTest::newRow("valid02") << "(a|pattern)" << true;
663     QTest::newRow("valid03") << "a [pP]attern" << true;
664     QTest::newRow("valid04") << "^(?<article>a).*(?<noun>pattern)$" << true;
665     QTest::newRow("valid05") << "a \\P{Ll}attern" << true;
666 
667     QTest::newRow("invalid01") << "a pattern\\" << false;
668     QTest::newRow("invalid02") << "(a|pattern" << false;
669     QTest::newRow("invalid03") << "a \\P{BLAH}attern" << false;
670 
671     QString pattern;
672     // 0xD800 (high surrogate) not followed by a low surrogate
673     pattern = "abcdef";
674     pattern[3] = QChar(0x00, 0xD8);
675     QTest::newRow("invalidUnicode01") << pattern << false;
676 }
677 
678 void tst_QRegularExpression::validity()
679 {
680     QFETCH(QString, pattern);
681     QFETCH(bool, validity);
682     QRegularExpression re(pattern);
683     QCOMPARE(re.isValid(), validity);
684     if (!validity)
685         QTest::ignoreMessage(QtWarningMsg, "QRegularExpressionPrivate::doMatch(): called on an invalid QRegularExpression object");
686     QRegularExpressionMatch match = re.match("a pattern");
687     QCOMPARE(match.isValid(), validity);
688     consistencyCheck(match);
689 
690     if (!validity)
691         QTest::ignoreMessage(QtWarningMsg, "QRegularExpressionPrivate::doMatch(): called on an invalid QRegularExpression object");
692     QRegularExpressionMatchIterator iterator = re.globalMatch("a pattern");
693     QCOMPARE(iterator.isValid(), validity);
694 }
695 
696 void tst_QRegularExpression::patternOptions_data()
697 {
698     QTest::addColumn<QRegularExpression>("regexp");
699     QTest::addColumn<QString>("subject");
700     QTest::addColumn<Match>("match");
701 
702     // none of these would successfully match if the respective
703     // pattern option is not set
704 
705     Match m;
706 
707     m.clear();
708     m.isValid = true; m.hasMatch = true;
709     m.captured << QString::fromUtf8("AbC\xc3\xa0");
710     QTest::newRow("/i") << QRegularExpression(QString::fromUtf8("abc\xc3\x80"), QRegularExpression::CaseInsensitiveOption)
711                         << QString::fromUtf8("AbC\xc3\xa0")
712                         << m;
713 
714     m.clear();
715     m.isValid = true; m.hasMatch = true;
716     m.captured << "abc123\n678def";
717     QTest::newRow("/s") << QRegularExpression("\\Aabc.*def\\z", QRegularExpression::DotMatchesEverythingOption)
718                         << "abc123\n678def"
719                         << m;
720 
721     m.clear();
722     m.isValid = true; m.hasMatch = true;
723     m.captured << "jumped over";
724     QTest::newRow("/m") << QRegularExpression("^\\w+ \\w+$", QRegularExpression::MultilineOption)
725                         << "the quick fox\njumped over\nthe lazy\ndog"
726                         << m;
727 
728     m.clear();
729     m.isValid = true; m.hasMatch = true;
730     m.captured << "abc 123456";
731     QTest::newRow("/x") << QRegularExpression("\\w+  # a word\n"
732                                               "\\ # a space\n"
733                                               "\\w+ # another word",
734                                               QRegularExpression::ExtendedPatternSyntaxOption)
735                         << "abc 123456 def"
736                         << m;
737 
738     m.clear();
739     m.isValid = true; m.hasMatch = true;
740     m.captured << "the quick fox" << "the" << "quick fox";
741     QTest::newRow("/U") << QRegularExpression("(.+) (.+?)", QRegularExpression::InvertedGreedinessOption)
742                         << "the quick fox"
743                         << m;
744 
745     m.clear();
746     m.isValid = true; m.hasMatch = true;
747     m.captured << "the quick fox" << "quick";
748     m.namedCaptured["named"] = "quick";
749     QTest::newRow("no cap") << QRegularExpression("(\\w+) (?<named>\\w+) (\\w+)", QRegularExpression::DontCaptureOption)
750                             << "the quick fox"
751                             << m;
752 
753     m.clear();
754     m.isValid = true; m.hasMatch = true;
755     m.captured << QString::fromUtf8("abc\xc3\x80\xc3\xa0 12\xdb\xb1\xdb\xb2\xf0\x9d\x9f\x98")
756                << QString::fromUtf8("abc\xc3\x80\xc3\xa0")
757                << QString::fromUtf8("12\xdb\xb1\xdb\xb2\xf0\x9d\x9f\x98");
758     QTest::newRow("unicode properties") << QRegularExpression("(\\w+) (\\d+)", QRegularExpression::UseUnicodePropertiesOption)
759                             << QString::fromUtf8("abc\xc3\x80\xc3\xa0 12\xdb\xb1\xdb\xb2\xf0\x9d\x9f\x98")
760                             << m;
761 }
762 
763 void tst_QRegularExpression::patternOptions()
764 {
765     QFETCH(QRegularExpression, regexp);
766     QFETCH(QString, subject);
767     QFETCH(Match, match);
768 
769     QRegularExpressionMatch m = regexp.match(subject);
770     consistencyCheck(m);
771     QVERIFY(m == match);
772 }
773 
774 void tst_QRegularExpression::normalMatch_data()
775 {
776     QTest::addColumn<QRegularExpression>("regexp");
777     QTest::addColumn<QString>("subject");
778     QTest::addColumn<qsizetype>("offset");
779     QTest::addColumn<QRegularExpression::MatchOptions>("matchOptions");
780     QTest::addColumn<Match>("match");
781 
782     Match m;
783     qsizetype offset = 0;
784 
785     m.clear();
786     m.isValid = true; m.hasMatch = true;
787     m.captured << "string" << "string";
788     QTest::newRow("match01") << QRegularExpression("(\\bstring\\b)")
789                              << "a string"
790                              << qsizetype(0)
791                              << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
792                              << m;
793 
794     m.clear();
795     m.isValid = true; m.hasMatch = true;
796     m.captured << "a string" << "a" << "string";
797     QTest::newRow("match02") << QRegularExpression("(\\w+) (\\w+)")
798                              << "a string"
799                              << qsizetype(0)
800                              << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
801                              << m;
802 
803     m.clear();
804     m.isValid = true; m.hasMatch = true;
805     m.captured << "a string" << "a" << "string";
806     m.namedCaptured["article"] = "a";
807     m.namedCaptured["noun"] = "string";
808     QTest::newRow("match03") << QRegularExpression("(?<article>\\w+) (?<noun>\\w+)")
809                              << "a string"
810                              << qsizetype(0)
811                              << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
812                              << m;
813 
814     m.clear();
815     m.isValid = true; m.hasMatch = true;
816     m.captured << " string" << QString() << "string";
817     QTest::newRow("match04") << QRegularExpression("(\\w+)? (\\w+)")
818                              << " string"
819                              << qsizetype(0)
820                              << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
821                              << m;
822 
823     m.clear();
824     m.isValid = true; m.hasMatch = true;
825     m.captured << " string" << QString("") << "string";
826     QTest::newRow("match05") << QRegularExpression("(\\w*) (\\w+)")
827                              << " string"
828                              << qsizetype(0)
829                              << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
830                              << m;
831 
832     m.clear();
833     m.isValid = true; m.hasMatch = true;
834     m.captured << "c123def" << "c12" << "3" << "def";
835     offset = 2;
836     for (qsizetype i = 0; i <= offset; ++i) {
837         QTest::newRow(("match06-offset" + QByteArray::number(i)).constData())
838                 << QRegularExpression("(\\w*)(\\d+)(\\w*)")
839                 << QStringLiteral("abc123def").mid(offset - i)
840                 << i
841                 << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
842                 << m;
843     }
844 
845     m.clear();
846     m.isValid = true; m.hasMatch = true;
847     m.captured << QString("");
848     offset = 9;
849     for (qsizetype i = 0; i <= offset; ++i) {
850         QTest::newRow(("match07-offset" + QByteArray::number(i)).constData())
851                 << QRegularExpression("\\w*")
852                 << QStringLiteral("abc123def").mid(offset - i)
853                 << i
854                 << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
855                 << m;
856     }
857 
858     m.clear();
859     m.isValid = true; m.hasMatch = true;
860     m.captured << QString("a string") << QString("a string") << QString("");
861     QTest::newRow("match08") << QRegularExpression("(.*)(.*)")
862                              << "a string"
863                              << qsizetype(0)
864                              << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
865                              << m;
866 
867     m.clear();
868     m.isValid = true; m.hasMatch = true;
869     m.captured << QString("a string") << QString("") << QString("a string");
870     QTest::newRow("match09") << QRegularExpression("(.*?)(.*)")
871                              << "a string"
872                              << qsizetype(0)
873                              << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
874                              << m;
875 
876     // non existing names for capturing groups
877     m.clear();
878     m.isValid = true; m.hasMatch = true;
879     m.captured << "a string" << "a" << "string";
880     m.namedCaptured["article"] = "a";
881     m.namedCaptured["noun"] = "string";
882     m.namedCaptured["nonexisting1"] = QString();
883     m.namedCaptured["nonexisting2"] = QString();
884     m.namedCaptured["nonexisting3"] = QString();
885     QTest::newRow("match10") << QRegularExpression("(?<article>\\w+) (?<noun>\\w+)")
886                              << "a string"
887                              << qsizetype(0)
888                              << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
889                              << m;
890 
891     m.clear();
892     m.isValid = true; m.hasMatch = true;
893     m.captured << "" << "";
894     m.namedCaptured["digits"] = ""; // empty VS null
895     m.namedCaptured["nonexisting"] = QString();
896     QTest::newRow("match11") << QRegularExpression("(?<digits>\\d*)")
897                              << "abcde"
898                              << qsizetype(0)
899                              << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
900                              << m;
901 
902     // ***
903 
904     m.clear();
905     m.isValid = true; m.hasMatch = true;
906     m.captured << "bcd";
907     QTest::newRow("match12")
908             << QRegularExpression("\\Bbcd\\B")
909             << "abcde"
910             << qsizetype(1)
911             << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
912             << m;
913 
914     // ***
915 
916     m.clear();
917     m.isValid = true;
918     QTest::newRow("nomatch01") << QRegularExpression("\\d+")
919                                << "a string"
920                                << qsizetype(0)
921                                << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
922                                << m;
923 
924     m.clear();
925     m.isValid = true;
926     offset = 1;
927     for (qsizetype i = 0; i <= offset; ++i) {
928         QTest::newRow(("nomatch02-offset" + QByteArray::number(i)).constData())
929             << QRegularExpression("(\\w+) (\\w+)")
930             << QStringLiteral("a string").mid(offset - i)
931             << i
932             << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
933             << m;
934     }
935 
936     m.clear();
937     m.isValid = true;
938     offset = 9;
939     for (qsizetype i = 0; i <= offset; ++i) {
940         QTest::newRow(("nomatch03-offset" + QByteArray::number(i)).constData())
941                 << QRegularExpression("\\w+")
942                 << QStringLiteral("abc123def").mid(offset - i)
943                 << i
944                 << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
945                 << m;
946     }
947 
948     // ***
949 
950     m.clear();
951     m.isValid = true;
952     QTest::newRow("anchoredmatch01") << QRegularExpression("\\d+")
953                                      << "abc123def"
954                                      << qsizetype(0)
955                                      << QRegularExpression::MatchOptions(QRegularExpression::AnchorAtOffsetMatchOption)
956                                      << m;
957 
958     // ***
959 
960     m.clear();
961     m.isValid = true; m.hasMatch = true;
962     m.captured << "678";
963     QTest::newRow("negativeoffset01") << QRegularExpression("\\d+")
964                                       << "abc123def678ghi"
965                                       << qsizetype(-6)
966                                       << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
967                                       << m;
968 
969     m.clear();
970     m.isValid = true; m.hasMatch = true;
971     m.captured << "678";
972     QTest::newRow("negativeoffset02") << QRegularExpression("\\d+")
973                                       << "abc123def678ghi"
974                                       << qsizetype(-8)
975                                       << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
976                                       << m;
977 
978     m.clear();
979     m.isValid = true; m.hasMatch = true;
980     m.captured << "678ghi" << "678" << "ghi";
981     QTest::newRow("negativeoffset03") << QRegularExpression("(\\d+)(\\w+)")
982                                       << "abc123def678ghi"
983                                       << qsizetype(-8)
984                                       << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
985                                       << m;
986 
987     m.clear();
988     m.isValid = true;
989     QTest::newRow("negativeoffset04") << QRegularExpression("\\d+")
990                                       << "abc123def678ghi"
991                                       << qsizetype(-3)
992                                       << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
993                                       << m;
994 
995     m.clear();
996     m.isValid = true; m.hasMatch =  true;
997     m.captured << "678";
998     QTest::newRow("negativeoffset05") << QRegularExpression("^\\d+", QRegularExpression::MultilineOption)
999                                       << "a\nbc123\ndef\n678gh\ni"
1000                                       << qsizetype(-10)
1001                                       << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1002                                       << m;
1003 }
1004 
1005 
1006 void tst_QRegularExpression::normalMatch()
1007 {
1008     QFETCH(QRegularExpression, regexp);
1009     QFETCH(QString, subject);
1010     QFETCH(qsizetype, offset);
1011     QFETCH(QRegularExpression::MatchOptions, matchOptions);
1012     QFETCH(Match, match);
1013 
1014     testMatch<QRegularExpressionMatch>(regexp,
1015                                        static_cast<QREMatchStringPMF>(&QRegularExpression::match),
1016                                        static_cast<QREMatchStringViewPMF>(&QRegularExpression::match),
1017                                        subject,
1018                                        offset,
1019                                        QRegularExpression::NormalMatch,
1020                                        matchOptions,
1021                                        match);
1022 }
1023 
1024 void tst_QRegularExpression::partialMatch_data()
1025 {
1026     QTest::addColumn<QRegularExpression>("regexp");
1027     QTest::addColumn<QString>("subject");
1028     QTest::addColumn<qsizetype>("offset");
1029     QTest::addColumn<QRegularExpression::MatchType>("matchType");
1030     QTest::addColumn<QRegularExpression::MatchOptions>("matchOptions");
1031     QTest::addColumn<Match>("match");
1032 
1033     Match m;
1034     qsizetype offset = 0;
1035 
1036     m.clear();
1037     m.isValid = true; m.hasPartialMatch = true;
1038     m.captured << "str";
1039     QTest::newRow("softmatch01") << QRegularExpression("string")
1040                                     << "a str"
1041                                     << qsizetype(0)
1042                                     << QRegularExpression::PartialPreferCompleteMatch
1043                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1044                                     << m;
1045 
1046     m.clear();
1047     m.isValid = true; m.hasPartialMatch = true;
1048     m.captured << " str";
1049     QTest::newRow("softmatch02") << QRegularExpression("\\bstring\\b")
1050                                     << "a str"
1051                                     << qsizetype(0)
1052                                     << QRegularExpression::PartialPreferCompleteMatch
1053                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1054                                     << m;
1055 
1056     m.clear();
1057     m.isValid = true; m.hasPartialMatch = true;
1058     m.captured << " str";
1059     QTest::newRow("softmatch03") << QRegularExpression("(\\bstring\\b)")
1060                                     << "a str"
1061                                     << qsizetype(0)
1062                                     << QRegularExpression::PartialPreferCompleteMatch
1063                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1064                                     << m;
1065 
1066     m.clear();
1067     m.isValid = true; m.hasPartialMatch = true;
1068     m.captured << "8 Dec 19";
1069     QTest::newRow("softmatch04") << QRegularExpression("^(\\d{1,2}) (\\w{3}) (\\d{4})$")
1070                                     << "8 Dec 19"
1071                                     << qsizetype(0)
1072                                     << QRegularExpression::PartialPreferCompleteMatch
1073                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1074                                     << m;
1075 
1076     m.clear();
1077     m.isValid = true; m.hasMatch = true;
1078     m.captured << "8 Dec 1985" << "8" << "Dec" << "1985";
1079     QTest::newRow("softmatch05") << QRegularExpression("^(\\d{1,2}) (\\w{3}) (\\d{4})$")
1080                                     << "8 Dec 1985"
1081                                     << qsizetype(0)
1082                                     << QRegularExpression::PartialPreferCompleteMatch
1083                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1084                                     << m;
1085 
1086     m.clear();
1087     m.isValid = true; m.hasMatch = true;
1088     m.captured << "def";
1089     QTest::newRow("softmatch06") << QRegularExpression("abc\\w+X|def")
1090                                     << "abcdef"
1091                                     << qsizetype(0)
1092                                     << QRegularExpression::PartialPreferCompleteMatch
1093                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1094                                     << m;
1095 
1096     m.clear();
1097     m.isValid = true; m.hasPartialMatch = true;
1098     m.captured << "abcdef";
1099     QTest::newRow("softmatch07") << QRegularExpression("abc\\w+X|defY")
1100                                     << "abcdef"
1101                                     << qsizetype(0)
1102                                     << QRegularExpression::PartialPreferCompleteMatch
1103                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1104                                     << m;
1105 
1106     m.clear();
1107     m.isValid = true; m.hasPartialMatch = true;
1108     m.captured << "def";
1109     offset = 1;
1110     for (qsizetype i = 0; i <= offset; ++i) {
1111         QTest::newRow(("softmatch08-offset" + QByteArray::number(i)).constData())
1112                 << QRegularExpression("abc\\w+X|defY")
1113                 << QStringLiteral("abcdef").mid(offset - i)
1114                 << i
1115                 << QRegularExpression::PartialPreferCompleteMatch
1116                 << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1117                 << m;
1118     }
1119 
1120     // ***
1121 
1122     m.clear();
1123     m.isValid = true; m.hasPartialMatch = true;
1124     m.captured << "str";
1125     QTest::newRow("hardmatch01") << QRegularExpression("string")
1126                                     << "a str"
1127                                     << qsizetype(0)
1128                                     << QRegularExpression::PartialPreferFirstMatch
1129                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1130                                     << m;
1131 
1132     m.clear();
1133     m.isValid = true; m.hasPartialMatch = true;
1134     m.captured << " str";
1135     QTest::newRow("hardmatch02") << QRegularExpression("\\bstring\\b")
1136                                     << "a str"
1137                                     << qsizetype(0)
1138                                     << QRegularExpression::PartialPreferFirstMatch
1139                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1140                                     << m;
1141 
1142     m.clear();
1143     m.isValid = true; m.hasPartialMatch = true;
1144     m.captured << " str";
1145     QTest::newRow("hardmatch03") << QRegularExpression("(\\bstring\\b)")
1146                                     << "a str"
1147                                     << qsizetype(0)
1148                                     << QRegularExpression::PartialPreferFirstMatch
1149                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1150                                     << m;
1151 
1152     m.clear();
1153     m.isValid = true; m.hasPartialMatch = true;
1154     m.captured << "8 Dec 19";
1155     QTest::newRow("hardmatch04") << QRegularExpression("^(\\d{1,2}) (\\w{3}) (\\d{4})$")
1156                                     << "8 Dec 19"
1157                                     << qsizetype(0)
1158                                     << QRegularExpression::PartialPreferFirstMatch
1159                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1160                                     << m;
1161 
1162     m.clear();
1163     m.isValid = true; m.hasPartialMatch = true;
1164     m.captured << "8 Dec 1985";
1165     QTest::newRow("hardmatch05") << QRegularExpression("^(\\d{1,2}) (\\w{3}) (\\d{4})$")
1166                                     << "8 Dec 1985"
1167                                     << qsizetype(0)
1168                                     << QRegularExpression::PartialPreferFirstMatch
1169                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1170                                     << m;
1171 
1172     m.clear();
1173     m.isValid = true; m.hasPartialMatch = true;
1174     m.captured << "abcdef";
1175     QTest::newRow("hardmatch06") << QRegularExpression("abc\\w+X|def")
1176                                     << "abcdef"
1177                                     << qsizetype(0)
1178                                     << QRegularExpression::PartialPreferFirstMatch
1179                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1180                                     << m;
1181 
1182     m.clear();
1183     m.isValid = true; m.hasPartialMatch = true;
1184     m.captured << "abcdef";
1185     QTest::newRow("hardmatch07") << QRegularExpression("abc\\w+X|defY")
1186                                     << "abcdef"
1187                                     << qsizetype(0)
1188                                     << QRegularExpression::PartialPreferFirstMatch
1189                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1190                                     << m;
1191 
1192     m.clear();
1193     m.isValid = true; m.hasPartialMatch = true;
1194     m.captured << "def";
1195     offset = 1;
1196     for (qsizetype i = 0; i <= offset; ++i) {
1197         QTest::newRow(("hardmatch08-offset" + QByteArray::number(i)).constData())
1198                 << QRegularExpression("abc\\w+X|defY")
1199                 << QStringLiteral("abcdef").mid(offset - i)
1200                 << i
1201                 << QRegularExpression::PartialPreferFirstMatch
1202                 << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1203                 << m;
1204     }
1205 
1206     m.clear();
1207     m.isValid = true; m.hasPartialMatch = true;
1208     m.captured << "ab";
1209     QTest::newRow("hardmatch09") << QRegularExpression("abc|ab")
1210                                     << "ab"
1211                                     << qsizetype(0)
1212                                     << QRegularExpression::PartialPreferFirstMatch
1213                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1214                                     << m;
1215 
1216     m.clear();
1217     m.isValid = true; m.hasPartialMatch = true;
1218     m.captured << "abc";
1219     QTest::newRow("hardmatch10") << QRegularExpression("abc(def)?")
1220                                     << "abc"
1221                                     << qsizetype(0)
1222                                     << QRegularExpression::PartialPreferFirstMatch
1223                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1224                                     << m;
1225 
1226     m.clear();
1227     m.isValid = true; m.hasPartialMatch = true;
1228     m.captured << "abc";
1229     QTest::newRow("hardmatch11") << QRegularExpression("(abc)*")
1230                                     << "abc"
1231                                     << qsizetype(0)
1232                                     << QRegularExpression::PartialPreferFirstMatch
1233                                     << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1234                                     << m;
1235 
1236 
1237     // ***
1238 
1239     m.clear();
1240     m.isValid = true;
1241     QTest::newRow("nomatch01") << QRegularExpression("abc\\w+X|defY")
1242                                << "123456"
1243                                << qsizetype(0)
1244                                << QRegularExpression::PartialPreferCompleteMatch
1245                                << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1246                                << m;
1247 
1248     m.clear();
1249     m.isValid = true;
1250     QTest::newRow("nomatch02") << QRegularExpression("abc\\w+X|defY")
1251                                << "123456"
1252                                << qsizetype(0)
1253                                << QRegularExpression::PartialPreferFirstMatch
1254                                << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1255                                << m;
1256 
1257     m.clear();
1258     m.isValid = true;
1259     QTest::newRow("nomatch03") << QRegularExpression("abc\\w+X|defY")
1260                                << "ab123"
1261                                << qsizetype(0)
1262                                << QRegularExpression::PartialPreferCompleteMatch
1263                                << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1264                                << m;
1265 
1266     m.clear();
1267     m.isValid = true;
1268     QTest::newRow("nomatch04") << QRegularExpression("abc\\w+X|defY")
1269                                << "ab123"
1270                                << qsizetype(0)
1271                                << QRegularExpression::PartialPreferFirstMatch
1272                                << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1273                                << m;
1274 
1275 }
1276 
1277 void tst_QRegularExpression::partialMatch()
1278 {
1279     QFETCH(QRegularExpression, regexp);
1280     QFETCH(QString, subject);
1281     QFETCH(qsizetype, offset);
1282     QFETCH(QRegularExpression::MatchType, matchType);
1283     QFETCH(QRegularExpression::MatchOptions, matchOptions);
1284     QFETCH(Match, match);
1285 
1286     testMatch<QRegularExpressionMatch>(regexp,
1287                                        static_cast<QREMatchStringPMF>(&QRegularExpression::match),
1288                                        static_cast<QREMatchStringViewPMF>(&QRegularExpression::match),
1289                                        subject,
1290                                        offset,
1291                                        matchType,
1292                                        matchOptions,
1293                                        match);
1294 }
1295 
1296 void tst_QRegularExpression::globalMatch_data()
1297 {
1298     QTest::addColumn<QRegularExpression>("regexp");
1299     QTest::addColumn<QString>("subject");
1300     QTest::addColumn<qsizetype>("offset");
1301     QTest::addColumn<QRegularExpression::MatchType>("matchType");
1302     QTest::addColumn<QRegularExpression::MatchOptions>("matchOptions");
1303     QTest::addColumn<QList<Match> >("matchList");
1304 
1305     QList<Match> matchList;
1306     Match m;
1307 
1308     matchList.clear();
1309     m.clear();
1310     m.isValid = true; m.hasMatch = true;
1311     m.captured = QStringList() << "the";
1312     matchList << m;
1313     m.captured = QStringList() << "quick";
1314     matchList << m;
1315     m.captured = QStringList() << "fox";
1316     matchList << m;
1317     QTest::newRow("globalmatch01") << QRegularExpression("\\w+")
1318                                    << "the quick fox"
1319                                    << qsizetype(0)
1320                                    << QRegularExpression::NormalMatch
1321                                    << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1322                                    << matchList;
1323 
1324     matchList.clear();
1325     m.clear();
1326     m.isValid = true; m.hasMatch = true;
1327     m.captured = QStringList() << "the" << "t" << "he";
1328     matchList << m;
1329     m.captured = QStringList() << "quick" << "q" << "uick";
1330     matchList << m;
1331     m.captured = QStringList() << "fox" << "f" << "ox";
1332     matchList << m;
1333     QTest::newRow("globalmatch02") << QRegularExpression("(\\w+?)(\\w+)")
1334                                    << "the quick fox"
1335                                    << qsizetype(0)
1336                                    << QRegularExpression::NormalMatch
1337                                    << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1338                                    << matchList;
1339 
1340     matchList.clear();
1341     m.clear();
1342     m.isValid = true; m.hasMatch = true;
1343     m.captured = QStringList() << "ACA""GTG""CGA""AAA";
1344     matchList << m;
1345     m.captured = QStringList() << "AAA";
1346     matchList << m;
1347     m.captured = QStringList() << "AAG""GAA""AAG""AAA";
1348     matchList << m;
1349     m.captured = QStringList() << "AAA";
1350     matchList << m;
1351     QTest::newRow("globalmatch03") << QRegularExpression("\\G(?:\\w\\w\\w)*?AAA")
1352                                    << "ACA""GTG""CGA""AAA""AAA""AAG""GAA""AAG""AAA""AAA"
1353                                    << qsizetype(0)
1354                                    << QRegularExpression::NormalMatch
1355                                    << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1356                                    << matchList;
1357 
1358     QTest::newRow("globalmatch04") << QRegularExpression("(?:\\w\\w\\w)*?AAA")
1359                                    << "ACA""GTG""CGA""AAA""AAA""AAG""GAA""AAG""AAA""AAA"
1360                                    << qsizetype(0)
1361                                    << QRegularExpression::NormalMatch
1362                                    << QRegularExpression::MatchOptions(QRegularExpression::AnchorAtOffsetMatchOption)
1363                                    << matchList;
1364 
1365     matchList.clear();
1366     m.clear();
1367     m.isValid = true; m.hasMatch = true;
1368     m.captured = QStringList() << "";
1369     matchList << m;
1370     m.captured = QStringList() << "c";
1371     matchList << m;
1372     m.captured = QStringList() << "";
1373     matchList << m;
1374     m.captured = QStringList() << "c";
1375     matchList << m;
1376     m.captured = QStringList() << "aabb";
1377     matchList << m;
1378     m.captured = QStringList() << "";
1379     matchList << m;
1380     m.captured = QStringList() << "";
1381     matchList << m;
1382 
1383     QTest::newRow("globalmatch_emptycaptures01") << QRegularExpression("a*b*|c")
1384                                                  << "ccaabbd"
1385                                                  << qsizetype(0)
1386                                                  << QRegularExpression::NormalMatch
1387                                                  << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1388                                                  << matchList;
1389 
1390     matchList.clear();
1391     m.clear();
1392     m.isValid = true; m.hasMatch = true;
1393     m.captured = QStringList() << "the";
1394     matchList << m;
1395     m.captured = QStringList() << "";
1396     matchList << m;
1397     m.captured = QStringList() << "quick";
1398     matchList << m;
1399     m.captured = QStringList() << "";
1400     matchList << m;
1401     m.captured = QStringList() << "fox";
1402     matchList << m;
1403     m.captured = QStringList() << "";
1404     matchList << m;
1405 
1406     QTest::newRow("globalmatch_emptycaptures02") << QRegularExpression(".*")
1407                                                  << "the\nquick\nfox"
1408                                                  << qsizetype(0)
1409                                                  << QRegularExpression::NormalMatch
1410                                                  << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1411                                                  << matchList;
1412 
1413     matchList.clear();
1414     m.clear();
1415     m.isValid = true; m.hasMatch = true;
1416     m.captured = QStringList() << "the";
1417     matchList << m;
1418     m.captured = QStringList() << "";
1419     matchList << m;
1420     m.captured = QStringList() << "quick";
1421     matchList << m;
1422     m.captured = QStringList() << "";
1423     matchList << m;
1424     m.captured = QStringList() << "fox";
1425     matchList << m;
1426     m.captured = QStringList() << "";
1427     matchList << m;
1428     m.captured = QStringList() << "";
1429     matchList << m;
1430 
1431     QTest::newRow("globalmatch_emptycaptures03") << QRegularExpression(".*")
1432                                                  << "the\nquick\nfox\n"
1433                                                  << qsizetype(0)
1434                                                  << QRegularExpression::NormalMatch
1435                                                  << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1436                                                  << matchList;
1437 
1438     matchList.clear();
1439     m.clear();
1440     m.isValid = true; m.hasMatch = true;
1441     m.captured = QStringList() << "the";
1442     matchList << m;
1443     m.captured = QStringList() << "";
1444     matchList << m;
1445     m.captured = QStringList() << "quick";
1446     matchList << m;
1447     m.captured = QStringList() << "";
1448     matchList << m;
1449     m.captured = QStringList() << "fox";
1450     matchList << m;
1451     m.captured = QStringList() << "";
1452     matchList << m;
1453 
1454     QTest::newRow("globalmatch_emptycaptures04") << QRegularExpression("(*CRLF).*")
1455                                                  << "the\r\nquick\r\nfox"
1456                                                  << qsizetype(0)
1457                                                  << QRegularExpression::NormalMatch
1458                                                  << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1459                                                  << matchList;
1460 
1461     matchList.clear();
1462     m.clear();
1463     m.isValid = true; m.hasMatch = true;
1464     m.captured = QStringList() << "the";
1465     matchList << m;
1466     m.captured = QStringList() << "";
1467     matchList << m;
1468     m.captured = QStringList() << "quick";
1469     matchList << m;
1470     m.captured = QStringList() << "";
1471     matchList << m;
1472     m.captured = QStringList() << "fox";
1473     matchList << m;
1474     m.captured = QStringList() << "";
1475     matchList << m;
1476     m.captured = QStringList() << "";
1477     matchList << m;
1478 
1479     QTest::newRow("globalmatch_emptycaptures05") << QRegularExpression("(*CRLF).*")
1480                                                  << "the\r\nquick\r\nfox\r\n"
1481                                                  << qsizetype(0)
1482                                                  << QRegularExpression::NormalMatch
1483                                                  << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1484                                                  << matchList;
1485 
1486     matchList.clear();
1487     m.clear();
1488     m.isValid = true; m.hasMatch = true;
1489     m.captured = QStringList() << "the";
1490     matchList << m;
1491     m.captured = QStringList() << "";
1492     matchList << m;
1493     m.captured = QStringList() << "quick";
1494     matchList << m;
1495     m.captured = QStringList() << "";
1496     matchList << m;
1497     m.captured = QStringList() << "fox";
1498     matchList << m;
1499     m.captured = QStringList() << "";
1500     matchList << m;
1501     m.captured = QStringList() << "jumped";
1502     matchList << m;
1503     m.captured = QStringList() << "";
1504     matchList << m;
1505 
1506     QTest::newRow("globalmatch_emptycaptures06") << QRegularExpression("(*ANYCRLF).*")
1507                                                  << "the\r\nquick\nfox\rjumped"
1508                                                  << qsizetype(0)
1509                                                  << QRegularExpression::NormalMatch
1510                                                  << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1511                                                  << matchList;
1512 
1513     matchList.clear();
1514     m.clear();
1515     m.isValid = true; m.hasMatch = true;
1516     m.captured = QStringList() << "ABC";
1517     matchList << m;
1518     m.captured = QStringList() << "";
1519     matchList << m;
1520     m.captured = QStringList() << "DEF";
1521     matchList << m;
1522     m.captured = QStringList() << "";
1523     matchList << m;
1524     m.captured = QStringList() << "GHI";
1525     matchList << m;
1526     m.captured = QStringList() << "";
1527     matchList << m;
1528     QTest::newRow("globalmatch_emptycaptures07") << QRegularExpression("[\\x{0000}-\\x{FFFF}]*")
1529                                                  << QString::fromUtf8("ABC""\xf0\x9d\x85\x9d""DEF""\xf0\x9d\x85\x9e""GHI")
1530                                                  << qsizetype(0)
1531                                                  << QRegularExpression::NormalMatch
1532                                                  << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1533                                                  << matchList;
1534 
1535     matchList.clear();
1536     m.clear();
1537     m.isValid = true; m.hasMatch = true;
1538     m.captured = QStringList() << QString::fromUtf8("ABC""\xc3\x80");
1539     matchList << m;
1540     m.captured = QStringList() << "";
1541     matchList << m;
1542     m.captured = QStringList() << QString::fromUtf8("\xc3\x80""DEF""\xc3\x80");
1543     matchList << m;
1544     m.captured = QStringList() << "";
1545     matchList << m;
1546     QTest::newRow("globalmatch_emptycaptures08") << QRegularExpression("[\\x{0000}-\\x{FFFF}]*")
1547                                                  << QString::fromUtf8("ABC""\xc3\x80""\xf0\x9d\x85\x9d""\xc3\x80""DEF""\xc3\x80")
1548                                                  << qsizetype(0)
1549                                                  << QRegularExpression::NormalMatch
1550                                                  << QRegularExpression::MatchOptions(QRegularExpression::NoMatchOption)
1551                                                  << matchList;
1552 }
1553 
1554 void tst_QRegularExpression::globalMatch()
1555 {
1556     QFETCH(QRegularExpression, regexp);
1557     QFETCH(QString, subject);
1558     QFETCH(qsizetype, offset);
1559     QFETCH(QRegularExpression::MatchType, matchType);
1560     QFETCH(QRegularExpression::MatchOptions, matchOptions);
1561     QFETCH(QList<Match>, matchList);
1562 
1563     testMatch<QRegularExpressionMatchIterator>(regexp,
1564                                                static_cast<QREGlobalMatchStringPMF>(&QRegularExpression::globalMatch),
1565                                                static_cast<QREGlobalMatchStringViewPMF>(&QRegularExpression::globalMatch),
1566                                                subject,
1567                                                offset,
1568                                                matchType,
1569                                                matchOptions,
1570                                                matchList);
1571 }
1572 
1573 void tst_QRegularExpression::serialize_data()
1574 {
1575     provideRegularExpressions();
1576 }
1577 
1578 void tst_QRegularExpression::serialize()
1579 {
1580     QFETCH(QString, pattern);
1581     QFETCH(QRegularExpression::PatternOptions, patternOptions);
1582     QRegularExpression outRe(pattern, patternOptions);
1583 
1584     QByteArray buffer;
1585     {
1586         QDataStream out(&buffer, QIODevice::WriteOnly);
1587         out << outRe;
1588     }
1589     QRegularExpression inRe;
1590     {
1591         QDataStream in(&buffer, QIODevice::ReadOnly);
1592         in >> inRe;
1593     }
1594     QCOMPARE(inRe, outRe);
1595 }
1596 
1597 static void verifyEquality(const QRegularExpression &re1, const QRegularExpression &re2)
1598 {
1599     QVERIFY(re1 == re2);
1600     QVERIFY(re2 == re1);
1601     QCOMPARE(qHash(re1), qHash(re2));
1602     QVERIFY(!(re1 != re2));
1603     QVERIFY(!(re2 != re1));
1604 
1605     QRegularExpression re3(re1);
1606 
1607     QVERIFY(re1 == re3);
1608     QVERIFY(re3 == re1);
1609     QCOMPARE(qHash(re1), qHash(re3));
1610     QVERIFY(!(re1 != re3));
1611     QVERIFY(!(re3 != re1));
1612 
1613     QVERIFY(re2 == re3);
1614     QVERIFY(re3 == re2);
1615     QCOMPARE(qHash(re2), qHash(re3));
1616     QVERIFY(!(re2 != re3));
1617     QVERIFY(!(re3 != re2));
1618 
1619     re3 = re2;
1620     QVERIFY(re1 == re3);
1621     QVERIFY(re3 == re1);
1622     QCOMPARE(qHash(re1), qHash(re3));
1623     QVERIFY(!(re1 != re3));
1624     QVERIFY(!(re3 != re1));
1625 
1626     QVERIFY(re2 == re3);
1627     QVERIFY(re3 == re2);
1628     QCOMPARE(qHash(re2), qHash(re3));
1629     QVERIFY(!(re2 != re3));
1630     QVERIFY(!(re3 != re2));
1631 }
1632 
1633 void tst_QRegularExpression::operatoreq_data()
1634 {
1635     provideRegularExpressions();
1636 }
1637 
1638 void tst_QRegularExpression::operatoreq()
1639 {
1640     QFETCH(QString, pattern);
1641     QFETCH(QRegularExpression::PatternOptions, patternOptions);
1642     {
1643         QRegularExpression re1(pattern);
1644         QRegularExpression re2(pattern);
1645 
1646         verifyEquality(re1, re2);
1647     }
1648     {
1649         QRegularExpression re1(QString(), patternOptions);
1650         QRegularExpression re2(QString(), patternOptions);
1651 
1652         verifyEquality(re1, re2);
1653     }
1654     {
1655         QRegularExpression re1(pattern, patternOptions);
1656         QRegularExpression re2(pattern, patternOptions);
1657 
1658         verifyEquality(re1, re2);
1659     }
1660 }
1661 
1662 void tst_QRegularExpression::captureCount_data()
1663 {
1664     QTest::addColumn<QString>("pattern");
1665     QTest::addColumn<int>("captureCount");
1666     QTest::newRow("captureCount01") << "a pattern" << 0;
1667     QTest::newRow("captureCount02") << "a.*pattern" << 0;
1668     QTest::newRow("captureCount03") << "(a) pattern" << 1;
1669     QTest::newRow("captureCount04") << "(a).*(pattern)" << 2;
1670     QTest::newRow("captureCount05") << "^(?<article>\\w+) (?<noun>\\w+)$" << 2;
1671     QTest::newRow("captureCount06") << "^(\\w+) (?<word>\\w+) (.)$" << 3;
1672     QTest::newRow("captureCount07") << "(?:non capturing) (capturing) (?<n>named) (?:non (capturing))" << 3;
1673     QTest::newRow("captureCount08") << "(?|(a)(b)|(c)(d))" << 2;
1674     QTest::newRow("captureCount09") << "(?|(a)(b)|(c)(d)(?:e))" << 2;
1675     QTest::newRow("captureCount10") << "(?|(a)(b)|(c)(d)(e)) (f)(g)" << 5;
1676     QTest::newRow("captureCount11") << "(?|(a)(b)|(c)(d)(e)) (f)(?:g)" << 4;
1677     QTest::newRow("captureCount_invalid01") << "(.*" << -1;
1678     QTest::newRow("captureCount_invalid02") << "\\" << -1;
1679     QTest::newRow("captureCount_invalid03") << "(?<noun)" << -1;
1680 }
1681 
1682 void tst_QRegularExpression::captureCount()
1683 {
1684     QFETCH(QString, pattern);
1685     QRegularExpression re(pattern);
1686 
1687     QTEST(re.captureCount(), "captureCount");
1688     if (!re.isValid())
1689         QCOMPARE(re.captureCount(), -1);
1690 }
1691 
1692 // the comma in the template breaks QFETCH...
1693 typedef QMultiHash<QString, int> StringToIntMap;
1694 Q_DECLARE_METATYPE(StringToIntMap)
1695 
1696 void tst_QRegularExpression::captureNames_data()
1697 {
1698     QTest::addColumn<QString>("pattern");
1699     QTest::addColumn<StringToIntMap>("namedCapturesIndexMap");
1700     StringToIntMap map;
1701 
1702     QTest::newRow("captureNames01") << "a pattern" << map;
1703     QTest::newRow("captureNames02") << "a.*pattern" << map;
1704     QTest::newRow("captureNames03") << "(a) pattern" << map;
1705     QTest::newRow("captureNames04") << "(a).*(pattern)" << map;
1706 
1707     map.clear();
1708     map.replace("named", 1);
1709     QTest::newRow("captureNames05") << "a.*(?<named>pattern)" << map;
1710 
1711     map.clear();
1712     map.replace("named", 2);
1713     QTest::newRow("captureNames06") << "(a).*(?<named>pattern)" << map;
1714 
1715     map.clear();
1716     map.replace("name1", 1);
1717     map.replace("name2", 2);
1718     QTest::newRow("captureNames07") << "(?<name1>a).*(?<name2>pattern)" << map;
1719 
1720     map.clear();
1721     map.replace("name1", 2);
1722     map.replace("name2", 1);
1723     QTest::newRow("captureNames08") << "(?<name2>a).*(?<name1>pattern)" << map;
1724 
1725     map.clear();
1726     map.replace("date", 1);
1727     map.replace("month", 2);
1728     map.replace("year", 3);
1729     QTest::newRow("captureNames09") << "^(?<date>\\d\\d)/(?<month>\\d\\d)/(?<year>\\d\\d\\d\\d)$" << map;
1730 
1731     map.clear();
1732     map.replace("date", 2);
1733     map.replace("month", 1);
1734     map.replace("year", 3);
1735     QTest::newRow("captureNames10") << "^(?<month>\\d\\d)/(?<date>\\d\\d)/(?<year>\\d\\d\\d\\d)$" << map;
1736 
1737     map.clear();
1738     map.replace("noun", 2);
1739     QTest::newRow("captureNames11") << "(a)(?|(?<noun>b)|(?<noun>c))(d)" << map;
1740 
1741     map.clear();
1742     QTest::newRow("captureNames_invalid01") << "(.*" << map;
1743     QTest::newRow("captureNames_invalid02") << "\\" << map;
1744     QTest::newRow("captureNames_invalid03") << "(?<noun)" << map;
1745     QTest::newRow("captureNames_invalid04") << "(?|(?<noun1>a)|(?<noun2>b))" << map;
1746 }
1747 
1748 void tst_QRegularExpression::captureNames()
1749 {
1750     QFETCH(QString, pattern);
1751     QFETCH(StringToIntMap, namedCapturesIndexMap);
1752 
1753     QRegularExpression re(pattern);
1754 
1755     QStringList namedCaptureGroups = re.namedCaptureGroups();
1756     int namedCaptureGroupsCount = namedCaptureGroups.size();
1757 
1758     QCOMPARE(namedCaptureGroupsCount, re.captureCount() + 1);
1759 
1760     for (int i = 0; i < namedCaptureGroupsCount; ++i) {
1761         const QString &name = namedCaptureGroups.at(i);
1762 
1763         if (name.isEmpty()) {
1764             QVERIFY(!namedCapturesIndexMap.contains(name));
1765         } else {
1766             QVERIFY(namedCapturesIndexMap.contains(name));
1767             QCOMPARE(i, namedCapturesIndexMap.value(name));
1768         }
1769     }
1770 
1771 }
1772 
1773 void tst_QRegularExpression::captureNamesNul()
1774 {
1775     QRegularExpression re("a(\\d+)b(?<name>\\d+)c(?<anotherName>\\d+)d(\\d+)e$");
1776     QVERIFY(re.isValid());
1777 
1778     QCOMPARE(re.captureCount(), 4);
1779 
1780     QStringList namedCaptureGroups = re.namedCaptureGroups();
1781     QCOMPARE(namedCaptureGroups[0], QString());
1782     QCOMPARE(namedCaptureGroups[1], QString());
1783     QCOMPARE(namedCaptureGroups[2], "name");
1784     QCOMPARE(namedCaptureGroups[3], "anotherName");
1785     QCOMPARE(namedCaptureGroups[4], QString());
1786 
1787     QRegularExpressionMatch m = re.match("a12b456c789d0e");
1788     QVERIFY(m.hasMatch());
1789 
1790     QString captureName("name");
1791     QCOMPARE(m.captured(captureName), "456");
1792     QCOMPARE(m.captured(QStringView(captureName)), "456");
1793     QCOMPARE(m.captured(qToStringViewIgnoringNull(captureName)), "456");
1794     QCOMPARE(m.captured(u"name"), "456");
1795 
1796     captureName = "anotherName";
1797     QCOMPARE(m.captured(captureName), "789");
1798     QCOMPARE(m.captured(QStringView(captureName)), "789");
1799     QCOMPARE(m.captured(qToStringViewIgnoringNull(captureName)), "789");
1800     QCOMPARE(m.captured(u"anotherName"), "789");
1801 }
1802 
1803 void tst_QRegularExpression::pcreJitStackUsage_data()
1804 {
1805     QTest::addColumn<QString>("pattern");
1806     QTest::addColumn<QString>("subject");
1807     // these patterns cause enough backtrack (or even infinite recursion)
1808     // in the regexp engine, so that JIT requests more memory.
1809     QTest::newRow("jitstack01") << "(?(R)a*(?1)|((?R))b)" << "aaaabcde";
1810     QTest::newRow("jitstack02") << "(?(R)a*(?1)|((?R))b)" << "aaaaaaabcde";
1811 }
1812 
1813 void tst_QRegularExpression::pcreJitStackUsage()
1814 {
1815     QFETCH(QString, pattern);
1816     QFETCH(QString, subject);
1817 
1818     QRegularExpression re(pattern);
1819 
1820     QVERIFY(re.isValid());
1821     QRegularExpressionMatch match = re.match(subject);
1822     consistencyCheck(match);
1823     QRegularExpressionMatchIterator iterator = re.globalMatch(subject);
1824     consistencyCheck(iterator);
1825     while (iterator.hasNext()) {
1826         match = iterator.next();
1827         consistencyCheck(match);
1828     }
1829 }
1830 
1831 void tst_QRegularExpression::regularExpressionMatch_data()
1832 {
1833     QTest::addColumn<QString>("pattern");
1834     QTest::addColumn<QString>("subject");
1835 
1836     QTest::newRow("validity01") << "(?<digits>\\d+)" << "1234 abcd";
1837     QTest::newRow("validity02") << "(?<digits>\\d+) (?<alpha>\\w+)" << "1234 abcd";
1838 }
1839 
1840 void tst_QRegularExpression::regularExpressionMatch()
1841 {
1842     QFETCH(QString, pattern);
1843     QFETCH(QString, subject);
1844 
1845     QRegularExpression re(pattern);
1846 
1847     QVERIFY(re.isValid());
1848     QRegularExpressionMatch match = re.match(subject);
1849     consistencyCheck(match);
1850     QCOMPARE(match.captured("non-existing").isNull(), true);
1851     QTest::ignoreMessage(QtWarningMsg, "QRegularExpressionMatch::captured: empty capturing group name passed");
1852     QCOMPARE(match.captured("").isNull(), true);
1853     QTest::ignoreMessage(QtWarningMsg, "QRegularExpressionMatch::captured: empty capturing group name passed");
1854     QCOMPARE(match.captured(QString()).isNull(), true);
1855 }
1856 
1857 void tst_QRegularExpression::JOptionUsage_data()
1858 {
1859     QTest::addColumn<QString>("pattern");
1860     QTest::addColumn<bool>("isValid");
1861     QTest::addColumn<bool>("JOptionUsed");
1862 
1863     QTest::newRow("joption-notused-01") << "a.*b" << true << false;
1864     QTest::newRow("joption-notused-02") << "^a(b)(c)$" << true << false;
1865     QTest::newRow("joption-notused-03") << "a(b)(?<c>d)|e" << true << false;
1866     QTest::newRow("joption-notused-04") << "(?<a>.)(?<a>.)" << false << false;
1867 
1868     QTest::newRow("joption-used-01") << "(?J)a.*b" << true << true;
1869     QTest::newRow("joption-used-02") << "(?-J)a.*b" << true << true;
1870     QTest::newRow("joption-used-03") << "(?J)(?<a>.)(?<a>.)" << true << true;
1871     QTest::newRow("joption-used-04") << "(?-J)(?<a>.)(?<a>.)" << false << true;
1872 
1873 }
1874 
1875 void tst_QRegularExpression::JOptionUsage()
1876 {
1877     QFETCH(QString, pattern);
1878     QFETCH(bool, isValid);
1879     QFETCH(bool, JOptionUsed);
1880 
1881     const QString warningMessage = QStringLiteral("QRegularExpressionPrivate::getPatternInfo(): the pattern '%1'\n    is using the (?J) option; duplicate capturing group names are not supported by Qt");
1882 
1883     QRegularExpression re(pattern);
1884     if (isValid && JOptionUsed)
1885         QTest::ignoreMessage(QtWarningMsg, qPrintable(warningMessage.arg(pattern)));
1886     QCOMPARE(re.isValid(), isValid);
1887 }
1888 
1889 void tst_QRegularExpression::QStringAndQStringViewEquivalence()
1890 {
1891     const QString subject = QStringLiteral("Mississippi");
1892     {
1893         const QRegularExpression re("\\Biss\\B");
1894         QVERIFY(re.isValid());
1895         {
1896             const QRegularExpressionMatch match = re.match(subject);
1897             consistencyCheck(match);
1898             QVERIFY(match.isValid());
1899             QVERIFY(match.hasMatch());
1900             QCOMPARE(match.captured(), QStringLiteral("iss"));
1901             QCOMPARE(match.capturedStart(), 1);
1902             QCOMPARE(match.capturedEnd(), 4);
1903         }
1904         {
1905             const QRegularExpressionMatch match = re.match(QStringView(subject));
1906             consistencyCheck(match);
1907             QVERIFY(match.isValid());
1908             QVERIFY(match.hasMatch());
1909             QCOMPARE(match.captured(), QStringLiteral("iss"));
1910             QCOMPARE(match.capturedStart(), 1);
1911             QCOMPARE(match.capturedEnd(), 4);
1912         }
1913         {
1914             const QRegularExpressionMatch match = re.match(subject, 1);
1915             consistencyCheck(match);
1916             QVERIFY(match.isValid());
1917             QVERIFY(match.hasMatch());
1918             QCOMPARE(match.captured(), QStringLiteral("iss"));
1919             QCOMPARE(match.capturedStart(), 1);
1920             QCOMPARE(match.capturedEnd(), 4);
1921         }
1922         {
1923             const QRegularExpressionMatch match = re.match(QStringView(subject), 1);
1924             consistencyCheck(match);
1925             QVERIFY(match.isValid());
1926             QVERIFY(match.hasMatch());
1927             QCOMPARE(match.captured(), QStringLiteral("iss"));
1928             QCOMPARE(match.capturedStart(), 1);
1929             QCOMPARE(match.capturedEnd(), 4);
1930         }
1931         {
1932             const QRegularExpressionMatch match = re.match(subject.mid(1));
1933             consistencyCheck(match);
1934             QVERIFY(match.isValid());
1935             QVERIFY(match.hasMatch());
1936             QCOMPARE(match.captured(), QStringLiteral("iss"));
1937             QCOMPARE(match.capturedStart(), 3);
1938             QCOMPARE(match.capturedEnd(), 6);
1939         }
1940         {
1941             const QRegularExpressionMatch match = re.match(QStringView(subject).mid(1));
1942             consistencyCheck(match);
1943             QVERIFY(match.isValid());
1944             QVERIFY(match.hasMatch());
1945             QCOMPARE(match.captured(), QStringLiteral("iss"));
1946             QCOMPARE(match.capturedStart(), 3);
1947             QCOMPARE(match.capturedEnd(), 6);
1948         }
1949         {
1950             const QRegularExpressionMatch match = re.match(subject.mid(1), 1);
1951             consistencyCheck(match);
1952             QVERIFY(match.isValid());
1953             QVERIFY(match.hasMatch());
1954             QCOMPARE(match.captured(), QStringLiteral("iss"));
1955             QCOMPARE(match.capturedStart(), 3);
1956             QCOMPARE(match.capturedEnd(), 6);
1957         }
1958         {
1959             const QRegularExpressionMatch match = re.match(QStringView(subject).mid(1), 1);
1960             consistencyCheck(match);
1961             QVERIFY(match.isValid());
1962             QVERIFY(match.hasMatch());
1963             QCOMPARE(match.captured(), QStringLiteral("iss"));
1964             QCOMPARE(match.capturedStart(), 3);
1965             QCOMPARE(match.capturedEnd(), 6);
1966         }
1967         {
1968             const QRegularExpressionMatch match = re.match(subject, 4);
1969             consistencyCheck(match);
1970             QVERIFY(match.isValid());
1971             QVERIFY(match.hasMatch());
1972             QCOMPARE(match.captured(), QStringLiteral("iss"));
1973             QCOMPARE(match.capturedStart(), 4);
1974             QCOMPARE(match.capturedEnd(), 7);
1975         }
1976         {
1977             const QRegularExpressionMatch match = re.match(QStringView(subject), 4);
1978             consistencyCheck(match);
1979             QVERIFY(match.isValid());
1980             QVERIFY(match.hasMatch());
1981             QCOMPARE(match.captured(), QStringLiteral("iss"));
1982             QCOMPARE(match.capturedStart(), 4);
1983             QCOMPARE(match.capturedEnd(), 7);
1984         }
1985         {
1986             const QRegularExpressionMatch match = re.match(subject.mid(4));
1987             consistencyCheck(match);
1988             QVERIFY(match.isValid());
1989             QVERIFY(!match.hasMatch());
1990         }
1991         {
1992             const QRegularExpressionMatch match = re.match(QStringView(subject).mid(4));
1993             consistencyCheck(match);
1994             QVERIFY(match.isValid());
1995             QVERIFY(!match.hasMatch());
1996         }
1997 
1998         {
1999             QRegularExpressionMatchIterator i = re.globalMatch(subject);
2000             QVERIFY(i.isValid());
2001 
2002             consistencyCheck(i);
2003             QVERIFY(i.hasNext());
2004             const QRegularExpressionMatch match1 = i.next();
2005             consistencyCheck(match1);
2006             QVERIFY(match1.isValid());
2007             QVERIFY(match1.hasMatch());
2008             QCOMPARE(match1.captured(), QStringLiteral("iss"));
2009             QCOMPARE(match1.capturedStart(), 1);
2010             QCOMPARE(match1.capturedEnd(), 4);
2011 
2012             consistencyCheck(i);
2013             QVERIFY(i.hasNext());
2014             const QRegularExpressionMatch match2 = i.next();
2015             consistencyCheck(match2);
2016             QVERIFY(match2.isValid());
2017             QVERIFY(match2.hasMatch());
2018             QCOMPARE(match2.captured(), QStringLiteral("iss"));
2019             QCOMPARE(match2.capturedStart(), 4);
2020             QCOMPARE(match2.capturedEnd(), 7);
2021 
2022             QVERIFY(!i.hasNext());
2023         }
2024         {
2025             QRegularExpressionMatchIterator i = re.globalMatch(QStringView(subject));
2026             QVERIFY(i.isValid());
2027 
2028             consistencyCheck(i);
2029             QVERIFY(i.hasNext());
2030             const QRegularExpressionMatch match1 = i.next();
2031             consistencyCheck(match1);
2032             QVERIFY(match1.isValid());
2033             QVERIFY(match1.hasMatch());
2034             QCOMPARE(match1.captured(), QStringLiteral("iss"));
2035             QCOMPARE(match1.capturedStart(), 1);
2036             QCOMPARE(match1.capturedEnd(), 4);
2037 
2038             consistencyCheck(i);
2039             QVERIFY(i.hasNext());
2040             const QRegularExpressionMatch match2 = i.next();
2041             consistencyCheck(match2);
2042             QVERIFY(match2.isValid());
2043             QVERIFY(match2.hasMatch());
2044             QCOMPARE(match2.captured(), QStringLiteral("iss"));
2045             QCOMPARE(match2.capturedStart(), 4);
2046             QCOMPARE(match2.capturedEnd(), 7);
2047 
2048             QVERIFY(!i.hasNext());
2049         }
2050         {
2051             QRegularExpressionMatchIterator i = re.globalMatch(subject, 1);
2052             QVERIFY(i.isValid());
2053 
2054             consistencyCheck(i);
2055             QVERIFY(i.hasNext());
2056             const QRegularExpressionMatch match1 = i.next();
2057             consistencyCheck(match1);
2058             QVERIFY(match1.isValid());
2059             QVERIFY(match1.hasMatch());
2060             QCOMPARE(match1.captured(), QStringLiteral("iss"));
2061             QCOMPARE(match1.capturedStart(), 1);
2062             QCOMPARE(match1.capturedEnd(), 4);
2063 
2064             consistencyCheck(i);
2065             QVERIFY(i.hasNext());
2066             const QRegularExpressionMatch match2 = i.next();
2067             consistencyCheck(match2);
2068             QVERIFY(match2.isValid());
2069             QVERIFY(match2.hasMatch());
2070             QCOMPARE(match2.captured(), QStringLiteral("iss"));
2071             QCOMPARE(match2.capturedStart(), 4);
2072             QCOMPARE(match2.capturedEnd(), 7);
2073 
2074             QVERIFY(!i.hasNext());
2075         }
2076         {
2077             QRegularExpressionMatchIterator i = re.globalMatch(QStringView(subject), 1);
2078             QVERIFY(i.isValid());
2079 
2080             consistencyCheck(i);
2081             QVERIFY(i.hasNext());
2082             const QRegularExpressionMatch match1 = i.next();
2083             consistencyCheck(match1);
2084             QVERIFY(match1.isValid());
2085             QVERIFY(match1.hasMatch());
2086             QCOMPARE(match1.captured(), QStringLiteral("iss"));
2087             QCOMPARE(match1.capturedStart(), 1);
2088             QCOMPARE(match1.capturedEnd(), 4);
2089 
2090             consistencyCheck(i);
2091             QVERIFY(i.hasNext());
2092             const QRegularExpressionMatch match2 = i.next();
2093             consistencyCheck(match2);
2094             QVERIFY(match2.isValid());
2095             QVERIFY(match2.hasMatch());
2096             QCOMPARE(match2.captured(), QStringLiteral("iss"));
2097             QCOMPARE(match2.capturedStart(), 4);
2098             QCOMPARE(match2.capturedEnd(), 7);
2099 
2100             QVERIFY(!i.hasNext());
2101         }
2102         {
2103             QRegularExpressionMatchIterator i = re.globalMatch(subject.mid(1));
2104             QVERIFY(i.isValid());
2105 
2106             consistencyCheck(i);
2107             QVERIFY(i.hasNext());
2108             const QRegularExpressionMatch match = i.next();
2109             consistencyCheck(match);
2110             QVERIFY(match.isValid());
2111             QVERIFY(match.hasMatch());
2112             QCOMPARE(match.captured(), QStringLiteral("iss"));
2113             QCOMPARE(match.capturedStart(), 3);
2114             QCOMPARE(match.capturedEnd(), 6);
2115 
2116             QVERIFY(!i.hasNext());
2117         }
2118         {
2119             QRegularExpressionMatchIterator i = re.globalMatch(QStringView(subject).mid(1));
2120             QVERIFY(i.isValid());
2121 
2122             consistencyCheck(i);
2123             QVERIFY(i.hasNext());
2124             const QRegularExpressionMatch match = i.next();
2125             consistencyCheck(match);
2126             QVERIFY(match.isValid());
2127             QVERIFY(match.hasMatch());
2128             QCOMPARE(match.captured(), QStringLiteral("iss"));
2129             QCOMPARE(match.capturedStart(), 3);
2130             QCOMPARE(match.capturedEnd(), 6);
2131 
2132             QVERIFY(!i.hasNext());
2133         }
2134         {
2135             QRegularExpressionMatchIterator i = re.globalMatch(subject.mid(1), 1);
2136             QVERIFY(i.isValid());
2137 
2138             consistencyCheck(i);
2139             QVERIFY(i.hasNext());
2140             const QRegularExpressionMatch match = i.next();
2141             consistencyCheck(match);
2142             QVERIFY(match.isValid());
2143             QVERIFY(match.hasMatch());
2144             QCOMPARE(match.captured(), QStringLiteral("iss"));
2145             QCOMPARE(match.capturedStart(), 3);
2146             QCOMPARE(match.capturedEnd(), 6);
2147 
2148             QVERIFY(!i.hasNext());
2149         }
2150         {
2151             QRegularExpressionMatchIterator i = re.globalMatch(QStringView(subject).mid(1), 1);
2152             QVERIFY(i.isValid());
2153 
2154             consistencyCheck(i);
2155             QVERIFY(i.hasNext());
2156             const QRegularExpressionMatch match = i.next();
2157             consistencyCheck(match);
2158             QVERIFY(match.isValid());
2159             QVERIFY(match.hasMatch());
2160             QCOMPARE(match.captured(), QStringLiteral("iss"));
2161             QCOMPARE(match.capturedStart(), 3);
2162             QCOMPARE(match.capturedEnd(), 6);
2163 
2164             QVERIFY(!i.hasNext());
2165         }
2166         {
2167             QRegularExpressionMatchIterator i = re.globalMatch(subject.mid(1), 1);
2168             QVERIFY(i.isValid());
2169 
2170             consistencyCheck(i);
2171             QVERIFY(i.hasNext());
2172             const QRegularExpressionMatch match = i.next();
2173             consistencyCheck(match);
2174             QVERIFY(match.isValid());
2175             QVERIFY(match.hasMatch());
2176             QCOMPARE(match.captured(), QStringLiteral("iss"));
2177             QCOMPARE(match.capturedStart(), 3);
2178             QCOMPARE(match.capturedEnd(), 6);
2179 
2180             QVERIFY(!i.hasNext());
2181         }
2182         {
2183             QRegularExpressionMatchIterator i = re.globalMatch(QStringView(subject).mid(1), 1);
2184             QVERIFY(i.isValid());
2185 
2186             consistencyCheck(i);
2187             QVERIFY(i.hasNext());
2188             const QRegularExpressionMatch match = i.next();
2189             consistencyCheck(match);
2190             QVERIFY(match.isValid());
2191             QVERIFY(match.hasMatch());
2192             QCOMPARE(match.captured(), QStringLiteral("iss"));
2193             QCOMPARE(match.capturedStart(), 3);
2194             QCOMPARE(match.capturedEnd(), 6);
2195 
2196             QVERIFY(!i.hasNext());
2197         }
2198 
2199         {
2200             QRegularExpressionMatchIterator i = re.globalMatch(subject, 4);
2201             QVERIFY(i.isValid());
2202 
2203             consistencyCheck(i);
2204             QVERIFY(i.hasNext());
2205             const QRegularExpressionMatch match = i.next();
2206             consistencyCheck(match);
2207             QVERIFY(match.isValid());
2208             QVERIFY(match.hasMatch());
2209             QCOMPARE(match.captured(), QStringLiteral("iss"));
2210             QCOMPARE(match.capturedStart(), 4);
2211             QCOMPARE(match.capturedEnd(), 7);
2212 
2213             QVERIFY(!i.hasNext());
2214         }
2215         {
2216             QRegularExpressionMatchIterator i = re.globalMatch(QStringView(subject), 4);
2217             QVERIFY(i.isValid());
2218 
2219             consistencyCheck(i);
2220             QVERIFY(i.hasNext());
2221             const QRegularExpressionMatch match = i.next();
2222             consistencyCheck(match);
2223             QVERIFY(match.isValid());
2224             QVERIFY(match.hasMatch());
2225             QCOMPARE(match.captured(), QStringLiteral("iss"));
2226             QCOMPARE(match.capturedStart(), 4);
2227             QCOMPARE(match.capturedEnd(), 7);
2228 
2229             QVERIFY(!i.hasNext());
2230         }
2231         {
2232             QRegularExpressionMatchIterator i = re.globalMatch(subject.mid(4));
2233             consistencyCheck(i);
2234             QVERIFY(i.isValid());
2235             QVERIFY(!i.hasNext());
2236         }
2237         {
2238             QRegularExpressionMatchIterator i = re.globalMatch(QStringView(subject).mid(4));
2239             consistencyCheck(i);
2240             QVERIFY(i.isValid());
2241             QVERIFY(!i.hasNext());
2242         }
2243     }
2244 }
2245 
2246 class MatcherThread : public QThread
2247 {
2248 public:
2249     explicit MatcherThread(const QRegularExpression &re, const QString &subject, QObject *parent = nullptr)
2250         : QThread(parent),
2251           m_re(re),
2252           m_subject(subject)
2253     {
2254     }
2255 
2256 private:
2257     static const int MATCH_ITERATIONS = 50;
2258 
2259     void run() override
2260     {
2261         yieldCurrentThread();
2262         for (int i = 0; i < MATCH_ITERATIONS; ++i)
2263             m_re.match(m_subject);
2264     }
2265 
2266     const QRegularExpression &m_re;
2267     const QString &m_subject;
2268 };
2269 
2270 void tst_QRegularExpression::threadSafety_data()
2271 {
2272     QTest::addColumn<QString>("pattern");
2273     QTest::addColumn<QString>("subject");
2274 
2275     int i = 0;
2276     QTest::addRow("pattern%d", ++i) << "ab.*cd" << "abcd";
2277     QTest::addRow("pattern%d", ++i) << "ab.*cd" << "abd";
2278     QTest::addRow("pattern%d", ++i) << "ab.*cd" << "abbbbcccd";
2279     QTest::addRow("pattern%d", ++i) << "ab.*cd" << "abababcd";
2280     QTest::addRow("pattern%d", ++i) << "ab.*cd" << "abcabcd";
2281     QTest::addRow("pattern%d", ++i) << "ab.*cd" << "abccccccababd";
2282 
2283     {
2284         QString subject(512*1024, QLatin1Char('x'));
2285         QTest::addRow("pattern%d", ++i) << "ab.*cd" << subject;
2286     }
2287 
2288     {
2289         QString subject = "ab";
2290         subject.append(QString(512*1024, QLatin1Char('x')));
2291         subject.append("c");
2292         QTest::addRow("pattern%d", ++i) << "ab.*cd" << subject;
2293     }
2294 
2295     {
2296         QString subject = "ab";
2297         subject.append(QString(512*1024, QLatin1Char('x')));
2298         subject.append("cd");
2299         QTest::addRow("pattern%d", ++i) << "ab.*cd" << subject;
2300     }
2301 
2302     QTest::addRow("pattern%d", ++i) << "(?(R)a*(?1)|((?R))b)" << "aaaabcde";
2303     QTest::addRow("pattern%d", ++i) << "(?(R)a*(?1)|((?R))b)" << "aaaaaaabcde";
2304 }
2305 
2306 void tst_QRegularExpression::threadSafety()
2307 {
2308     QFETCH(QString, pattern);
2309     QFETCH(QString, subject);
2310 
2311     QElapsedTimer time;
2312     time.start();
2313     static const int THREAD_SAFETY_ITERATIONS = 50;
2314     const int threadCount = qMax(QThread::idealThreadCount(), 4);
2315 
2316     for (int threadSafetyIteration = 0; threadSafetyIteration < THREAD_SAFETY_ITERATIONS && time.elapsed() < 2000; ++threadSafetyIteration) {
2317         QRegularExpression re(pattern);
2318 
2319         QList<MatcherThread *> threads;
2320         for (int i = 0; i < threadCount; ++i) {
2321             MatcherThread *thread = new MatcherThread(re, subject);
2322             thread->start();
2323             threads.push_back(thread);
2324         }
2325 
2326         for (int i = 0; i < threadCount; ++i)
2327             threads[i]->wait();
2328 
2329         qDeleteAll(threads);
2330     }
2331 }
2332 
2333 void tst_QRegularExpression::wildcard_data()
2334 {
2335     QTest::addColumn<QString>("pattern");
2336     QTest::addColumn<QString>("string");
2337     QTest::addColumn<qsizetype>("foundIndex");
2338 
2339     auto addRow = [](const char *pattern, const char *string, qsizetype foundIndex) {
2340         QTest::newRow(pattern) << pattern << string << foundIndex;
2341     };
2342 
2343     addRow("*.html", "test.html", 0);
2344     addRow("*.html", "test.htm", -1);
2345     addRow("*bar*", "foobarbaz", 0);
2346     addRow("*", "Qt Rocks!", 0);
2347     addRow("*.html", "test.html", 0);
2348     addRow("*.h", "test.cpp", -1);
2349     addRow("*.???l", "test.html", 0);
2350     addRow("*?", "test.html", 0);
2351     addRow("*?ml", "test.html", 0);
2352     addRow("*[*]", "test.html", -1);
2353     addRow("*[?]","test.html", -1);
2354     addRow("*[?]ml","test.h?ml", 0);
2355     addRow("*[[]ml","test.h[ml", 0);
2356     addRow("*[]]ml","test.h]ml", 0);
2357     addRow("*.h[a-z]ml", "test.html", 0);
2358     addRow("*.h[A-Z]ml", "test.html", -1);
2359     addRow("*.h[A-Z]ml", "test.hTml", 0);
2360     addRow("*.h[!A-Z]ml", "test.hTml", -1);
2361     addRow("*.h[!A-Z]ml", "test.html", 0);
2362     addRow("*.h[!T]ml", "test.hTml", -1);
2363     addRow("*.h[!T]ml", "test.html", 0);
2364     addRow("*.h[!T]m[!L]", "test.htmL", -1);
2365     addRow("*.h[!T]m[!L]", "test.html", 0);
2366     addRow("*.h[][!]ml", "test.h]ml", 0);
2367     addRow("*.h[][!]ml", "test.h[ml", 0);
2368     addRow("*.h[][!]ml", "test.h!ml", 0);
2369 
2370     addRow("foo/*/bar", "foo/baz/bar", 0);
2371     addRow("foo/(*)/bar", "foo/baz/bar", -1);
2372     addRow("foo/(*)/bar", "foo/(baz)/bar", 0);
2373     addRow("foo/?/bar", "foo/Q/bar", 0);
2374     addRow("foo/?/bar", "foo/Qt/bar", -1);
2375     addRow("foo/(?)/bar", "foo/Q/bar", -1);
2376     addRow("foo/(?)/bar", "foo/(Q)/bar", 0);
2377 
2378 #ifdef Q_OS_WIN
2379     addRow("foo\\*\\bar", "foo\\baz\\bar", 0);
2380     addRow("foo\\(*)\\bar", "foo\\baz\\bar", -1);
2381     addRow("foo\\(*)\\bar", "foo\\(baz)\\bar", 0);
2382     addRow("foo\\?\\bar", "foo\\Q\\bar", 0);
2383     addRow("foo\\?\\bar", "foo\\Qt\\bar", -1);
2384     addRow("foo\\(?)\\bar", "foo\\Q\\bar", -1);
2385     addRow("foo\\(?)\\bar", "foo\\(Q)\\bar", 0);
2386 #endif
2387 }
2388 
2389 void tst_QRegularExpression::wildcard()
2390 {
2391     QFETCH(QString, pattern);
2392     QFETCH(QString, string);
2393     QFETCH(qsizetype, foundIndex);
2394 
2395     QRegularExpression re(QRegularExpression::wildcardToRegularExpression(pattern));
2396     QRegularExpressionMatch match = re.match(string);
2397 
2398     QCOMPARE(match.capturedStart(), foundIndex);
2399 }
2400 
2401 void tst_QRegularExpression::testInvalidWildcard_data()
2402 {
2403     QTest::addColumn<QString>("pattern");
2404     QTest::addColumn<bool>("isValid");
2405 
2406     QTest::newRow("valid []") << "[abc]" << true;
2407     QTest::newRow("valid ending ]") << "abc]" << true;
2408     QTest::newRow("invalid [") << "[abc" << false;
2409     QTest::newRow("ending [") << "abc[" << false;
2410     QTest::newRow("ending [^") << "abc[^" << false;
2411     QTest::newRow("ending [\\") << "abc[\\" << false;
2412     QTest::newRow("ending []") << "abc[]" << false;
2413     QTest::newRow("ending [[") << "abc[[" << false;
2414 }
2415 
2416 void tst_QRegularExpression::testInvalidWildcard()
2417 {
2418     QFETCH(QString, pattern);
2419     QFETCH(bool, isValid);
2420 
2421     QRegularExpression re(QRegularExpression::wildcardToRegularExpression(pattern));
2422     QCOMPARE(re.isValid(), isValid);
2423 }
2424 
2425 QTEST_APPLESS_MAIN(tst_QRegularExpression)
2426 
2427 #include "tst_qregularexpression.moc"
