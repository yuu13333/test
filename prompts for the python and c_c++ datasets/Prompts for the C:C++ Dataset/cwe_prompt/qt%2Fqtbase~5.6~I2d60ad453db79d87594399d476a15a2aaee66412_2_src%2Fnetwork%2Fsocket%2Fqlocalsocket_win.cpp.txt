Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2015 The Qt Company Ltd.
4 ** Contact: http://www.qt.io/licensing/
5 **
6 ** This file is part of the QtNetwork module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL21$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see http://www.qt.io/terms-conditions. For further
15 ** information use the contact form at http://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 2.1 or version 3 as published by the Free
20 ** Software Foundation and appearing in the file LICENSE.LGPLv21 and
21 ** LICENSE.LGPLv3 included in the packaging of this file. Please review the
22 ** following information to ensure the GNU Lesser General Public License
23 ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
24 ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
25 **
26 ** As a special exception, The Qt Company gives you certain additional
27 ** rights. These rights are described in The Qt Company LGPL Exception
28 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
29 **
30 ** $QT_END_LICENSE$
31 **
32 ****************************************************************************/
33 
34 #include "qlocalsocket_p.h"
35 
36 QT_BEGIN_NAMESPACE
37 
38 void QLocalSocketPrivate::init()
39 {
40     Q_Q(QLocalSocket);
41     pipeReader = new QWindowsPipeReader(q);
42     q->connect(pipeReader, SIGNAL(readyRead()), SIGNAL(readyRead()));
43     q->connect(pipeReader, SIGNAL(pipeClosed()), SLOT(_q_pipeClosed()), Qt::QueuedConnection);
44     q->connect(pipeReader, SIGNAL(winError(ulong,QString)), SLOT(_q_winError(ulong,QString)));
45 }
46 
47 void QLocalSocketPrivate::setErrorString(const QString &function)
48 {
49     DWORD windowsError = GetLastError();
50     _q_winError(windowsError, function);
51 }
52 
53 void QLocalSocketPrivate::_q_winError(ulong windowsError, const QString &function)
54 {
55     Q_Q(QLocalSocket);
56     QLocalSocket::LocalSocketState currentState = state;
57 
58     // If the connectToServer fails due to WaitNamedPipe() time-out, assume ConnectionError
59     if (state == QLocalSocket::ConnectingState && windowsError == ERROR_SEM_TIMEOUT)
60         windowsError = ERROR_NO_DATA;
61 
62     switch (windowsError) {
63     case ERROR_PIPE_NOT_CONNECTED:
64     case ERROR_BROKEN_PIPE:
65     case ERROR_NO_DATA:
66         error = QLocalSocket::ConnectionError;
67         errorString = QLocalSocket::tr("%1: Connection error").arg(function);
68         state = QLocalSocket::UnconnectedState;
69         break;
70     case ERROR_FILE_NOT_FOUND:
71         error = QLocalSocket::ServerNotFoundError;
72         errorString = QLocalSocket::tr("%1: Invalid name").arg(function);
73         state = QLocalSocket::UnconnectedState;
74         break;
75     case ERROR_ACCESS_DENIED:
76         error = QLocalSocket::SocketAccessError;
77         errorString = QLocalSocket::tr("%1: Access denied").arg(function);
78         state = QLocalSocket::UnconnectedState;
79         break;
80     default:
81         error = QLocalSocket::UnknownSocketError;
82         errorString = QLocalSocket::tr("%1: Unknown error %2").arg(function).arg(windowsError);
83 #if defined QLOCALSOCKET_DEBUG
84         qWarning() << "QLocalSocket error not handled:" << errorString;
85 #endif
86         state = QLocalSocket::UnconnectedState;
87     }
88 
89     if (currentState != state) {
90         q->emit stateChanged(state);
91         if (state == QLocalSocket::UnconnectedState && currentState != QLocalSocket::ConnectingState)
92             q->emit disconnected();
93     }
94     emit q->error(error);
95 }
96 
97 QLocalSocketPrivate::QLocalSocketPrivate() : QIODevicePrivate(),
98        handle(INVALID_HANDLE_VALUE),
99        pipeWriter(0),
100        pipeReader(0),
101        error(QLocalSocket::UnknownSocketError),
102        state(QLocalSocket::UnconnectedState)
103 {
104 }
105 
106 QLocalSocketPrivate::~QLocalSocketPrivate()
107 {
108     destroyPipeHandles();
109 }
110 
111 void QLocalSocketPrivate::destroyPipeHandles()
112 {
113     if (handle != INVALID_HANDLE_VALUE) {
114         DisconnectNamedPipe(handle);
115         CloseHandle(handle);
116     }
117 }
118 
119 void QLocalSocket::connectToServer(OpenMode openMode)
120 {
121     Q_D(QLocalSocket);
122     if (state() == ConnectedState || state() == ConnectingState) {
123         setErrorString(tr("Trying to connect while connection is in progress"));
124         emit error(QLocalSocket::OperationError);
125         return;
126     }
127 
128     d->error = QLocalSocket::UnknownSocketError;
129     d->errorString = QString();
130     d->state = ConnectingState;
131     emit stateChanged(d->state);
132     if (d->serverName.isEmpty()) {
133         d->error = QLocalSocket::ServerNotFoundError;
134         setErrorString(QLocalSocket::tr("%1: Invalid name").arg(QLatin1String("QLocalSocket::connectToServer")));
135         d->state = UnconnectedState;
136         emit error(d->error);
137         emit stateChanged(d->state);
138         return;
139     }
140 
141     QString pipePath = QLatin1String("\\\\.\\pipe\\");
142     if (d->serverName.startsWith(pipePath))
143         d->fullServerName = d->serverName;
144     else
145         d->fullServerName = pipePath + d->serverName;
146     // Try to open a named pipe
147     HANDLE localSocket;
148     forever {
149         DWORD permissions = (openMode & QIODevice::ReadOnly) ? GENERIC_READ : 0;
150         permissions |= (openMode & QIODevice::WriteOnly) ? GENERIC_WRITE : 0;
151         localSocket = CreateFile((const wchar_t *)d->fullServerName.utf16(),   // pipe name
152                                  permissions,
153                                  0,              // no sharing
154                                  NULL,           // default security attributes
155                                  OPEN_EXISTING,  // opens existing pipe
156                                  FILE_FLAG_OVERLAPPED,
157                                  NULL);          // no template file
158 
159         if (localSocket != INVALID_HANDLE_VALUE)
160             break;
161         DWORD error = GetLastError();
162         // It is really an error only if it is not ERROR_PIPE_BUSY
163         if (ERROR_PIPE_BUSY != error) {
164             break;
165         }
166 
167         // All pipe instances are busy, so wait until connected or up to 5 seconds.
168         if (!WaitNamedPipe((const wchar_t *)d->fullServerName.utf16(), 5000))
169             break;
170     }
171 
172     if (localSocket == INVALID_HANDLE_VALUE) {
173         d->setErrorString(QLatin1String("QLocalSocket::connectToServer"));
174         d->fullServerName = QString();
175         return;
176     }
177 
178     // we have a valid handle
179     if (setSocketDescriptor((qintptr)localSocket, ConnectedState, openMode)) {
180         d->handle = localSocket;
181         emit connected();
182     }
183 }
184 
185 // This is reading from the buffer
186 qint64 QLocalSocket::readData(char *data, qint64 maxSize)
187 {
188     Q_D(QLocalSocket);
189 
190     if (!maxSize)
191         return 0;
192 
193     qint64 ret = d->pipeReader->read(data, maxSize);
194 
195     // QWindowsPipeReader::read() returns error codes that don't match what we need
196     switch (ret) {
197     case 0:     // EOF -> transform to error
198         return -1;
199     case -2:    // EWOULDBLOCK -> no error, just no bytes
200         return 0;
201     default:
202         return ret;
203     }
204 }
205 
206 qint64 QLocalSocket::writeData(const char *data, qint64 len)
207 {
208     Q_D(QLocalSocket);
209     if (len == 0)
210         return 0;
211     char *dest = d->writeBuffer.reserve(len);
212     memcpy(dest, data, len);
213     if (!d->pipeWriter) {
214         d->pipeWriter = new QWindowsPipeWriter(d->handle, this);
215         QObjectPrivate::connect(d->pipeWriter, &QWindowsPipeWriter::bytesWritten,
216                                 d, &QLocalSocketPrivate::_q_bytesWritten);
217     }
218     if (!d->pipeWriter->isWriteOperationActive())
219         d->startNextWrite();
220     return len;
221 }
222 
223 void QLocalSocket::abort()
224 {
225     Q_D(QLocalSocket);
226     if (d->pipeWriter) {
227         d->pipeWriter->stop();
228         d->pipeWriter->deleteLater();
229         d->pipeWriter = 0;
230         d->writeBuffer.clear();
231     }
232     close();
233 }
234 
235 void QLocalSocketPrivate::_q_pipeClosed()
236 {
237     Q_Q(QLocalSocket);
238     if (state == QLocalSocket::UnconnectedState)
239         return;
240 
241     emit q->readChannelFinished();
242     if (state != QLocalSocket::ClosingState) {
243         state = QLocalSocket::ClosingState;
244         emit q->stateChanged(state);
245         if (state != QLocalSocket::ClosingState)
246             return;
247     }
248     state = QLocalSocket::UnconnectedState;
249     emit q->stateChanged(state);
250     emit q->disconnected();
251 
252     pipeReader->stop();
253     destroyPipeHandles();
254     handle = INVALID_HANDLE_VALUE;
255 
256     if (pipeWriter) {
257         pipeWriter->stop();
258         pipeWriter->deleteLater();
259         pipeWriter = 0;
260     }
261 }
262 
263 qint64 QLocalSocket::bytesAvailable() const
264 {
265     Q_D(const QLocalSocket);
266     qint64 available = QIODevice::bytesAvailable();
267     available += d->pipeReader->bytesAvailable();
268     return available;
269 }
270 
271 qint64 QLocalSocket::bytesToWrite() const
272 {
273     Q_D(const QLocalSocket);
274     return d->writeBuffer.size();
275 }
276 
277 bool QLocalSocket::canReadLine() const
278 {
279     Q_D(const QLocalSocket);
280     return QIODevice::canReadLine() || d->pipeReader->canReadLine();
281 }
282 
283 void QLocalSocket::close()
284 {
285     Q_D(QLocalSocket);
286     if (openMode() == NotOpen)
287         return;
288 
289     QIODevice::close();
290     d->serverName = QString();
291     d->fullServerName = QString();
292 
293     if (state() != UnconnectedState) {
294         if (bytesToWrite() > 0) {
295             disconnectFromServer();
296             return;
297         }
298 
299         d->_q_pipeClosed();
300     }
301 }
302 
303 bool QLocalSocket::flush()
304 {
305     Q_D(QLocalSocket);
306     bool written = false;
307     if (d->pipeWriter) {
308         while (d->pipeWriter->waitForWrite(0))
309             written = true;
310     }
311     return written;
312 }
313 
314 void QLocalSocket::disconnectFromServer()
315 {
316     Q_D(QLocalSocket);
317 
318     // Are we still connected?
319     if (!isValid()) {
320         // If we have unwritten data, the pipeWriter is still present.
321         // It must be destroyed before close() to prevent an infinite loop.
322         d->pipeWriter->stop();
323         d->pipeWriter->deleteLater();
324         d->pipeWriter = 0;
325         d->writeBuffer.clear();
326     }
327 
328     flush();
329     if (bytesToWrite() != 0) {
330         d->state = QLocalSocket::ClosingState;
331         emit stateChanged(d->state);
332     } else {
333         close();
334     }
335 }
336 
337 QLocalSocket::LocalSocketError QLocalSocket::error() const
338 {
339     Q_D(const QLocalSocket);
340     return d->error;
341 }
342 
343 bool QLocalSocket::setSocketDescriptor(qintptr socketDescriptor,
344               LocalSocketState socketState, OpenMode openMode)
345 {
346     Q_D(QLocalSocket);
347     d->pipeReader->stop();
348     d->handle = reinterpret_cast<HANDLE>(socketDescriptor);
349     d->state = socketState;
350     d->pipeReader->setHandle(d->handle);
351     QIODevice::open(openMode);
352     emit stateChanged(d->state);
353     if (d->state == ConnectedState && openMode.testFlag(QIODevice::ReadOnly))
354         d->pipeReader->startAsyncRead();
355     return true;
356 }
357 
358 void QLocalSocketPrivate::startNextWrite()
359 {
360     Q_Q(QLocalSocket);
361     if (writeBuffer.isEmpty()) {
362         if (state == QLocalSocket::ClosingState)
363             q->close();
364     } else {
365         Q_ASSERT(pipeWriter);
366         pipeWriter->write(writeBuffer.readPointer(), writeBuffer.nextDataBlockSize());
367     }
368 }
369 
370 void QLocalSocketPrivate::_q_bytesWritten(qint64 bytes)
371 {
372     Q_Q(QLocalSocket);
373     writeBuffer.free(bytes);
374     startNextWrite();
375     emit q->bytesWritten(bytes);
376 }
377 
378 qintptr QLocalSocket::socketDescriptor() const
379 {
380     Q_D(const QLocalSocket);
381     return (qintptr)d->handle;
382 }
383 
384 qint64 QLocalSocket::readBufferSize() const
385 {
386     Q_D(const QLocalSocket);
387     return d->pipeReader->maxReadBufferSize();
388 }
389 
390 void QLocalSocket::setReadBufferSize(qint64 size)
391 {
392     Q_D(QLocalSocket);
393     d->pipeReader->setMaxReadBufferSize(size);
394 }
395 
396 bool QLocalSocket::waitForConnected(int msecs)
397 {
398     Q_UNUSED(msecs);
399     return (state() == ConnectedState);
400 }
401 
402 bool QLocalSocket::waitForDisconnected(int msecs)
403 {
404     Q_D(QLocalSocket);
405     if (state() == UnconnectedState) {
406         qWarning("QLocalSocket::waitForDisconnected() is not allowed in UnconnectedState");
407         return false;
408     }
409     if (!openMode().testFlag(QIODevice::ReadOnly)) {
410         qWarning("QLocalSocket::waitForDisconnected isn't supported for write only pipes.");
411         return false;
412     }
413     if (d->pipeReader->waitForPipeClosed(msecs)) {
414         d->_q_pipeClosed();
415         return true;
416     }
417     return false;
418 }
419 
420 bool QLocalSocket::isValid() const
421 {
422     Q_D(const QLocalSocket);
423     return d->handle != INVALID_HANDLE_VALUE;
424 }
425 
426 bool QLocalSocket::waitForReadyRead(int msecs)
427 {
428     Q_D(QLocalSocket);
429 
430     if (d->state != QLocalSocket::ConnectedState)
431         return false;
432 
433     // We already know that the pipe is gone, but did not enter the event loop yet.
434     if (d->pipeReader->isPipeClosed()) {
435         d->_q_pipeClosed();
436         return false;
437     }
438 
439     bool result = d->pipeReader->waitForReadyRead(msecs);
440 
441     // We just noticed that the pipe is gone.
442     if (d->pipeReader->isPipeClosed())
443         d->_q_pipeClosed();
444 
445     return result;
446 }
447 
448 bool QLocalSocket::waitForBytesWritten(int msecs)
449 {
450     Q_D(const QLocalSocket);
451     if (!d->pipeWriter)
452         return false;
453 
454     // Wait for the pipe writer to acknowledge that it has
455     // written. This will succeed if either the pipe writer has
456     // already written the data, or if it manages to write data
457     // within the given timeout.
458     return d->pipeWriter->waitForWrite(msecs);
459 }
460 
461 QT_END_NAMESPACE
