Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #pragma once
27 
28 #include "timeline_global.h"
29 #include "timelinerenderpass.h"
30 #include <QVariant>
31 #include <QColor>
32 
33 namespace Timeline {
34 class TimelineModelAggregator;
35 
36 class TIMELINE_EXPORT TimelineModel : public QObject
37 {
38     Q_OBJECT
39     Q_PROPERTY(int modelId READ modelId CONSTANT)
40     Q_PROPERTY(QString displayName READ displayName WRITE setDisplayName NOTIFY displayNameChanged)
41     Q_PROPERTY(bool empty READ isEmpty NOTIFY contentChanged)
42     Q_PROPERTY(bool hidden READ hidden WRITE setHidden NOTIFY hiddenChanged)
43     Q_PROPERTY(bool expanded READ expanded WRITE setExpanded NOTIFY expandedChanged)
44     Q_PROPERTY(int height READ height NOTIFY heightChanged)
45     Q_PROPERTY(int expandedRowCount READ expandedRowCount NOTIFY expandedRowCountChanged)
46     Q_PROPERTY(int collapsedRowCount READ collapsedRowCount NOTIFY collapsedRowCountChanged)
47     Q_PROPERTY(int rowCount READ rowCount NOTIFY rowCountChanged)
48     Q_PROPERTY(QVariantList labels READ labels NOTIFY labelsChanged)
49     Q_PROPERTY(int count READ count NOTIFY contentChanged)
50     Q_PROPERTY(int defaultRowHeight READ defaultRowHeight CONSTANT)
51 
52 public:
53     class TimelineModelPrivate;
54 
55     TimelineModel(TimelineModelAggregator *parent = 0);
56     ~TimelineModel();
57 
58     // Methods implemented by the abstract model itself
59     bool isEmpty() const;
60     int modelId() const;
61 
62     Q_INVOKABLE int collapsedRowHeight(int rowNumber) const;
63     Q_INVOKABLE int expandedRowHeight(int rowNumber) const;
64     Q_INVOKABLE int rowHeight(int rowNumber) const;
65     Q_INVOKABLE void setExpandedRowHeight(int rowNumber, int height);
66 
67     Q_INVOKABLE int collapsedRowOffset(int rowNumber) const;
68     Q_INVOKABLE int expandedRowOffset(int rowNumber) const;
69     Q_INVOKABLE int rowOffset(int rowNumber) const;
70 
71     int height() const;
72     int count() const;
73     Q_INVOKABLE qint64 duration(int index) const;
74     Q_INVOKABLE qint64 startTime(int index) const;
75     Q_INVOKABLE qint64 endTime(int index) const;
76     Q_INVOKABLE int selectionId(int index) const;
77 
78     int firstIndex(qint64 startTime) const;
79     int lastIndex(qint64 endTime) const;
80     int bestIndex(qint64 timestamp) const;
81     int parentIndex(int index) const;
82 
83     bool expanded() const;
84     bool hidden() const;
85     void setExpanded(bool expanded);
86     void setHidden(bool hidden);
87     void setDisplayName(const QString &displayName);
88     QString displayName() const;
89     int expandedRowCount() const;
90     int collapsedRowCount() const;
91     int rowCount() const;
92 
93     // Methods which can optionally be implemented by child models.
94     Q_INVOKABLE virtual QRgb color(int index) const;
95     virtual QVariantList labels() const;
96     Q_INVOKABLE virtual QVariantMap details(int index) const;
97     Q_INVOKABLE virtual int expandedRow(int index) const;
98     Q_INVOKABLE virtual int collapsedRow(int index) const;
99     Q_INVOKABLE int row(int index) const;
100 
101     // returned map should contain "file", "line", "column" properties, or be empty
102     Q_INVOKABLE virtual QVariantMap location(int index) const;
103     Q_INVOKABLE virtual int typeId(int index) const;
104     Q_INVOKABLE virtual bool handlesTypeId(int typeId) const;
105     Q_INVOKABLE virtual float relativeHeight(int index) const;
106     Q_INVOKABLE virtual qint64 rowMinValue(int rowNumber) const;
107     Q_INVOKABLE virtual qint64 rowMaxValue(int rowNumber) const;
108 
109     Q_INVOKABLE int nextItemBySelectionId(int selectionId, qint64 time, int currentItem) const;
110     Q_INVOKABLE int nextItemByTypeId(int typeId, qint64 time, int currentItem) const;
111     Q_INVOKABLE int prevItemBySelectionId(int selectionId, qint64 time, int currentItem) const;
112     Q_INVOKABLE int prevItemByTypeId(int typeId, qint64 time, int currentItem) const;
113 
114     static int defaultRowHeight();
115     virtual QList<const TimelineRenderPass *> supportedRenderPasses() const;
116 
117 signals:
118     void expandedChanged();
119     void hiddenChanged();
120     void expandedRowHeightChanged(int row, int height);
121     void contentChanged();
122     void heightChanged();
123     void expandedRowCountChanged();
124     void collapsedRowCountChanged();
125     void rowCountChanged();
126     void displayNameChanged();
127     void labelsChanged();
128     void detailsChanged();
129 
130 protected:
131     QRgb colorBySelectionId(int index) const;
132     QRgb colorByFraction(double fraction) const;
133     QRgb colorByHue(int hue) const;
134 
135     int insert(qint64 startTime, qint64 duration, int selectionId);
136     int insertStart(qint64 startTime, int selectionId);
137     void insertEnd(int index, qint64 duration);
138     void computeNesting();
139 
140     void setCollapsedRowCount(int rows);
141     void setExpandedRowCount(int rows);
142 
143     virtual void clear();
144 
145 private:
146     TimelineModelPrivate *d_ptr;
147     Q_DECLARE_PRIVATE(TimelineModel)
148 };
149 
150 } // namespace Timeline
