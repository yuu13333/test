Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #pragma once
27 
28 #include "qmlprofilernotesmodel.h"
29 #include "qmlprofilereventtypes.h"
30 #include "qmleventlocation.h"
31 #include "qmlprofilerconstants.h"
32 
33 #include <QHash>
34 #include <QStack>
35 #include <QVector>
36 #include <QObject>
37 #include <QPointer>
38 
39 namespace QmlProfiler {
40 class QmlProfilerModelManager;
41 class QmlProfilerStatisticsRelativesModel;
42 
43 enum QmlProfilerStatisticsRelation {
44     QmlProfilerStatisticsCallees,
45     QmlProfilerStatisticsCallers
46 };
47 
48 class QmlProfilerStatisticsModel : public QObject
49 {
50     Q_OBJECT
51 public:
52     static QString nameForType(RangeType typeNumber);
53 
54     struct QmlEventStats {
55         std::vector<qint64> durations;
56         qint64 total = 0;
57         qint64 self = 0;
58         qint64 recursive = 0;
59         qint64 minimum = 0;
60         qint64 maximum = 0;
61         qint64 median = 0;
62         qint64 calls = 0;
63 
64         void finalize()
65         {
66             const size_t size = durations.size();
67             const qint64 qint64Max = std::numeric_limits<qint64>::max();
68             calls = size < qint64Max ? static_cast<qint64>(size) : qint64Max;
69 
70             if (size > 0) {
71                 std::sort(durations.begin(), durations.end());
72                 minimum = durations.front();
73                 maximum = durations.back();
74                 const size_t half = size / 2;
75                 median = (size % 2) ? durations[half + 1]
76                                     : ((durations[half] + durations[half + 1]) / 2ll);
77                 durations.clear();
78             }
79         }
80 
81         qint64 average() const
82         {
83             return calls == 0 ? 0 : total / calls;
84         }
85 
86         qint64 totalNonRecursive() const
87         {
88             return total - recursive;
89         }
90     };
91 
92     double durationPercent(int typeId) const;
93     double durationSelfPercent(int typeId) const;
94 
95     QmlProfilerStatisticsModel(QmlProfilerModelManager *modelManager);
96     ~QmlProfilerStatisticsModel() override = default;
97 
98     void restrictToFeatures(quint64 features);
99     bool isRestrictedToRange() const;
100 
101     QStringList details(int typeIndex) const;
102     QString summary(const QVector<int> &typeIds) const;
103     const QVector<QmlEventStats> &getData() const;
104     const QVector<QmlEventType> &getTypes() const;
105     const QHash<int, QString> &getNotes() const;
106     qint64 rootDuration() const { return m_rootDuration; }
107 
108     int count() const;
109     void clear();
110 
111     void setRelativesModel(QmlProfilerStatisticsRelativesModel *childModel,
112                            QmlProfilerStatisticsRelation relation);
113 
114 signals:
115     void dataAvailable();
116     void notesAvailable(int typeIndex);
117 
118 private:
119     void loadEvent(const QmlEvent &event, const QmlEventType &type);
120     void finalize();
121 
122     void dataChanged();
123     void notesChanged(int typeIndex);
124 
125     QVector<QmlEventStats> m_data;
126 
127     QPointer<QmlProfilerStatisticsRelativesModel> m_calleesModel;
128     QPointer<QmlProfilerStatisticsRelativesModel> m_callersModel;
129     QPointer<QmlProfilerModelManager> m_modelManager;
130 
131     QList<RangeType> m_acceptedTypes;
132     QHash<int, QString> m_notes;
133 
134     QStack<QmlEvent> m_callStack;
135     QStack<QmlEvent> m_compileStack;
136 
137     qint64 m_rootDuration = 0;
138 };
139 
140 class QmlProfilerStatisticsRelativesModel : public QObject
141 {
142     Q_OBJECT
143 public:
144 
145     struct QmlStatisticsRelativesData {
146         QmlStatisticsRelativesData(qint64 duration = 0, qint64 calls = 0, int typeIndex = -1,
147                                    bool isRecursive = false)
148             : duration(duration), calls(calls), typeIndex(typeIndex), isRecursive(isRecursive) {}
149         qint64 duration;
150         qint64 calls;
151         int typeIndex;
152         bool isRecursive;
153     };
154 
155     QmlProfilerStatisticsRelativesModel(QmlProfilerModelManager *modelManager,
156                                         QmlProfilerStatisticsModel *statisticsModel,
157                                         QmlProfilerStatisticsRelation relation);
158 
159     int count() const;
160     void clear();
161 
162     const QVector<QmlStatisticsRelativesData> &getData(int typeId) const;
163     const QVector<QmlEventType> &getTypes() const;
164 
165     void loadEvent(RangeType type, const QmlEvent &event, bool isRecursive);
166 
167     QmlProfilerStatisticsRelation relation() const;
168 
169 signals:
170     void dataAvailable();
171 
172 protected:
173     QHash<int, QVector<QmlStatisticsRelativesData>> m_data;
174     QPointer<QmlProfilerModelManager> m_modelManager;
175 
176     struct Frame {
177         Frame(qint64 startTime = 0, int typeId = -1) : startTime(startTime), typeId(typeId) {}
178         qint64 startTime;
179         int typeId;
180     };
181     QStack<Frame> m_callStack;
182     QStack<Frame> m_compileStack;
183     const QmlProfilerStatisticsRelation m_relation;
184 };
185 
186 } // namespace QmlProfiler
