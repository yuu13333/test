Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2013 by Southwest Research Institute (R)
4 **
5 ** This file is part of the QtCore module of the Qt Toolkit.
6 **
7 ** $QT_BEGIN_LICENSE:LGPL$
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and Digia.  For licensing terms and
13 ** conditions see http://qt.digia.com/licensing.  For further information
14 ** use the contact form at http://qt.digia.com/contact-us.
15 **
16 ** GNU Lesser General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU Lesser
18 ** General Public License version 2.1 as published by the Free Software
19 ** Foundation and appearing in the file LICENSE.LGPL included in the
20 ** packaging of this file.  Please review the following information to
21 ** ensure the GNU Lesser General Public License version 2.1 requirements
22 ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
23 **
24 ** In addition, as a special exception, Digia gives you certain additional
25 ** rights.  These rights are described in the Digia Qt LGPL Exception
26 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
27 **
28 ** GNU General Public License Usage
29 ** Alternatively, this file may be used under the terms of the GNU
30 ** General Public License version 3.0 as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL included in the
32 ** packaging of this file.  Please review the following information to
33 ** ensure the GNU General Public License version 3.0 requirements will be
34 ** met: http://www.gnu.org/copyleft/gpl.html.
35 **
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 #ifndef QFLOAT16_H
42 #define QFLOAT16_H
43 
44 #include <QtCore/qglobal.h>
45 
46 QT_BEGIN_NAMESPACE
47 
48 class qfloat16
49 {
50 public:
51 #ifndef Q_QDOC
52     Q_DECL_CONSTEXPR inline qfloat16() : b16(0) { }
53     inline qfloat16(float f);
54     inline operator float() const;
55 #endif
56 
57 private:
58     quint16 b16;
59 
60     Q_CORE_EXPORT static const quint32 mantissatable[];
61     Q_CORE_EXPORT static const quint32 exponenttable[];
62     Q_CORE_EXPORT static const quint32 offsettable[];
63     Q_CORE_EXPORT static const quint32 basetable[];
64     Q_CORE_EXPORT static const quint32 shifttable[];
65 
66     inline bool isPositive() const
67     { return (b16 & quint16(0x8000)) == 0; }
68 
69     friend bool qIsNull(qfloat16 f);
70     friend qfloat16 operator-(qfloat16 a);
71     friend bool operator>(qfloat16 a, qfloat16 b);
72     friend bool operator<(qfloat16 a, qfloat16 b);
73     friend bool operator>=(qfloat16 a, qfloat16 b);
74     friend bool operator<=(qfloat16 a, qfloat16 b);
75     friend bool operator==(qfloat16 a, qfloat16 b);
76 };
77 
78 Q_CORE_EXPORT bool qIsInf(qfloat16 f);
79 Q_CORE_EXPORT bool qIsNaN(qfloat16 f);
80 Q_CORE_EXPORT bool qIsFinite(qfloat16 f);
81 
82 inline int qRound(qfloat16 d)
83 { return qRound(float(d)); }
84 
85 inline qint64 qRound64(qfloat16 d)
86 { return qRound64(float(d)); }
87 
88 static inline bool qFuzzyCompare(qfloat16 p1, qfloat16 p2)
89 {
90     float f1 = float(p1);
91     float f2 = float(p2);
92     // The significand precision for IEEE754 half precision is
93     // 11 bits (10 explicitly stored), or approximately 3 decimal
94     // digits.  In selecting the fuzzy comparison factor of 102.5f
95     // (that is, (2^10+1)/10) below, we effectively select a
96     // window of about 1 (least significant) decimal digit about
97     // which the two operands can vary and still return true.
98     return (qAbs(f1-f2) * 102.5f <= qMin(qAbs(f1), qAbs(f2)));
99 }
100 
101 inline bool qIsNull(qfloat16 f)
102 {
103     return (f.b16 & quint16(0x7fff)) == 0;
104 }
105 
106 inline int qIntCast(qfloat16 f) { return int(float(f)); }
107 
108 inline qfloat16::qfloat16(float f)
109 {
110     quint32 u;
111     memcpy(&u,&f,sizeof(quint32));
112     b16 = basetable[(u>>23) & 0x1ff]
113         + ((u & 0x007fffff) >> shifttable[(u>>23) & 0x1ff]);
114 }
115 
116 inline qfloat16::operator float() const
117 {
118     quint32 u = mantissatable[offsettable[b16>>10] + (b16&0x3ff)]
119               + exponenttable[b16>>10];
120     float f;
121     memcpy(&f,&u,sizeof(quint32));
122     return f;
123 }
124 
125 inline qfloat16 operator-(qfloat16 a)
126 {
127     qfloat16 f;
128     f.b16 = a.b16 ^ quint16(0x8000);
129     return f;
130 }
131 
132 inline double operator+(qfloat16 a, int b) { return double(float(a)) + b; }
133 inline double operator-(qfloat16 a, int b) { return double(float(a)) - b; }
134 inline double operator*(qfloat16 a, int b) { return double(float(a)) * b; }
135 inline double operator/(qfloat16 a, int b) { return double(float(a)) / b; }
136 inline double operator+(int a, qfloat16 b) { return a + double(float(b)); }
137 inline double operator-(int a, qfloat16 b) { return a - double(float(b)); }
138 inline double operator*(int a, qfloat16 b) { return a * double(float(b)); }
139 inline double operator/(int a, qfloat16 b) { return a / double(float(b)); }
140 
141 inline long double operator+(qfloat16 a, long double b) { return (long double)(float(a)) + b; }
142 inline long double operator-(qfloat16 a, long double b) { return (long double)(float(a)) - b; }
143 inline long double operator*(qfloat16 a, long double b) { return (long double)(float(a)) * b; }
144 inline long double operator/(qfloat16 a, long double b) { return (long double)(float(a)) / b; }
145 inline long double operator+(long double a, qfloat16 b) { return a + (long double)(float(b)); }
146 inline long double operator-(long double a, qfloat16 b) { return a - (long double)(float(b)); }
147 inline long double operator*(long double a, qfloat16 b) { return a * (long double)(float(b)); }
148 inline long double operator/(long double a, qfloat16 b) { return a / (long double)(float(b)); }
149 
150 inline double operator+(qfloat16 a, double b) { return double(float(a)) + b; }
151 inline double operator-(qfloat16 a, double b) { return double(float(a)) - b; }
152 inline double operator*(qfloat16 a, double b) { return double(float(a)) * b; }
153 inline double operator/(qfloat16 a, double b) { return double(float(a)) / b; }
154 inline double operator+(double a, qfloat16 b) { return a + double(float(b)); }
155 inline double operator-(double a, qfloat16 b) { return a - double(float(b)); }
156 inline double operator*(double a, qfloat16 b) { return a * double(float(b)); }
157 inline double operator/(double a, qfloat16 b) { return a / double(float(b)); }
158 
159 inline float operator+(qfloat16 a, float b) { return float(a) + b; }
160 inline float operator-(qfloat16 a, float b) { return float(a) - b; }
161 inline float operator*(qfloat16 a, float b) { return float(a) * b; }
162 inline float operator/(qfloat16 a, float b) { return float(a) / b; }
163 inline float operator+(float a, qfloat16 b) { return a + float(b); }
164 inline float operator-(float a, qfloat16 b) { return a - float(b); }
165 inline float operator*(float a, qfloat16 b) { return a * float(b); }
166 inline float operator/(float a, qfloat16 b) { return a / float(b); }
167 
168 inline qfloat16 operator+(qfloat16 a, qfloat16 b) { return qfloat16(float(a) + float(b)); }
169 inline qfloat16 operator-(qfloat16 a, qfloat16 b) { return qfloat16(float(a) - float(b)); }
170 inline qfloat16 operator*(qfloat16 a, qfloat16 b) { return qfloat16(float(a) * float(b)); }
171 inline qfloat16 operator/(qfloat16 a, qfloat16 b) { return qfloat16(float(a) / float(b)); }
172 
173 inline qfloat16& operator+=(qfloat16& a, int b) { a = qfloat16(float(a + b)); return a; }
174 inline qfloat16& operator-=(qfloat16& a, int b) { a = qfloat16(float(a - b)); return a; }
175 inline qfloat16& operator*=(qfloat16& a, int b) { a = qfloat16(float(a * b)); return a; }
176 inline qfloat16& operator/=(qfloat16& a, int b) { a = qfloat16(float(a / b)); return a; }
177 
178 inline qfloat16& operator+=(qfloat16& a, long double b) { a = qfloat16(float(a + b)); return a; }
179 inline qfloat16& operator-=(qfloat16& a, long double b) { a = qfloat16(float(a - b)); return a; }
180 inline qfloat16& operator*=(qfloat16& a, long double b) { a = qfloat16(float(a * b)); return a; }
181 inline qfloat16& operator/=(qfloat16& a, long double b) { a = qfloat16(float(a / b)); return a; }
182 
183 inline qfloat16& operator+=(qfloat16& a, double b) { a = qfloat16(float(a + b)); return a; }
184 inline qfloat16& operator-=(qfloat16& a, double b) { a = qfloat16(float(a - b)); return a; }
185 inline qfloat16& operator*=(qfloat16& a, double b) { a = qfloat16(float(a * b)); return a; }
186 inline qfloat16& operator/=(qfloat16& a, double b) { a = qfloat16(float(a / b)); return a; }
187 
188 inline qfloat16& operator+=(qfloat16& a, float b) { a = qfloat16(a + b); return a; }
189 inline qfloat16& operator-=(qfloat16& a, float b) { a = qfloat16(a - b); return a; }
190 inline qfloat16& operator*=(qfloat16& a, float b) { a = qfloat16(a * b); return a; }
191 inline qfloat16& operator/=(qfloat16& a, float b) { a = qfloat16(a / b); return a; }
192 
193 inline qfloat16& operator+=(qfloat16& a, qfloat16 b) { a = a + b; return a; }
194 inline qfloat16& operator-=(qfloat16& a, qfloat16 b) { a = a - b; return a; }
195 inline qfloat16& operator*=(qfloat16& a, qfloat16 b) { a = a * b; return a; }
196 inline qfloat16& operator/=(qfloat16& a, qfloat16 b) { a = a / b; return a; }
197 
198 inline bool operator>(qfloat16 a, int b)  { return float(a) > b; }
199 inline bool operator<(qfloat16 a, int b)  { return float(a) < b; }
200 inline bool operator>=(qfloat16 a, int b) { return float(a) >= b; }
201 inline bool operator<=(qfloat16 a, int b) { return float(a) <= b; }
202 inline bool operator==(qfloat16 a, int b) { return float(a) == b; }
203 inline bool operator>(int a, qfloat16 b)  { return a > float(b); }
204 inline bool operator<(int a, qfloat16 b)  { return a < float(b); }
205 inline bool operator>=(int a, qfloat16 b) { return a >= float(b); }
206 inline bool operator<=(int a, qfloat16 b) { return a <= float(b); }
207 inline bool operator==(int a, qfloat16 b) { return a == float(b); }
208 
209 inline bool operator>(qfloat16 a, long double b)  { return float(a) > b; }
210 inline bool operator<(qfloat16 a, long double b)  { return float(a) < b; }
211 inline bool operator>=(qfloat16 a, long double b) { return float(a) >= b; }
212 inline bool operator<=(qfloat16 a, long double b) { return float(a) <= b; }
213 inline bool operator==(qfloat16 a, long double b) { return float(a) == b; }
214 inline bool operator>(long double a, qfloat16 b)  { return a > float(b); }
215 inline bool operator<(long double a, qfloat16 b)  { return a < float(b); }
216 inline bool operator>=(long double a, qfloat16 b) { return a >= float(b); }
217 inline bool operator<=(long double a, qfloat16 b) { return a <= float(b); }
218 inline bool operator==(long double a, qfloat16 b) { return a == float(b); }
219 
220 inline bool operator>(qfloat16 a, double b)  { return float(a) > b; }
221 inline bool operator<(qfloat16 a, double b)  { return float(a) < b; }
222 inline bool operator>=(qfloat16 a, double b) { return float(a) >= b; }
223 inline bool operator<=(qfloat16 a, double b) { return float(a) <= b; }
224 inline bool operator==(qfloat16 a, double b) { return float(a) == b; }
225 inline bool operator>(double a, qfloat16 b)  { return a > float(b); }
226 inline bool operator<(double a, qfloat16 b)  { return a < float(b); }
227 inline bool operator>=(double a, qfloat16 b) { return a >= float(b); }
228 inline bool operator<=(double a, qfloat16 b) { return a <= float(b); }
229 inline bool operator==(double a, qfloat16 b) { return a == float(b); }
230 
231 inline bool operator>(qfloat16 a, float b)  { return float(a) > b; }
232 inline bool operator<(qfloat16 a, float b)  { return float(a) < b; }
233 inline bool operator>=(qfloat16 a, float b) { return float(a) >= b; }
234 inline bool operator<=(qfloat16 a, float b) { return float(a) <= b; }
235 inline bool operator==(qfloat16 a, float b) { return float(a) == b; }
236 inline bool operator>(float a, qfloat16 b)  { return a > float(b); }
237 inline bool operator<(float a, qfloat16 b)  { return a < float(b); }
238 inline bool operator>=(float a, qfloat16 b) { return a >= float(b); }
239 inline bool operator<=(float a, qfloat16 b) { return a <= float(b); }
240 inline bool operator==(float a, qfloat16 b) { return a == float(b); }
241 
242 inline bool operator>(qfloat16 a, qfloat16 b)
243 {
244     if ((qIsFinite(a) == false) || (qIsFinite(b) == false ))
245         return float(a) > float(b);
246 
247     if (qIsNull(a) && qIsNull(b))
248         return false;
249 
250     if (a.isPositive() || b.isPositive())
251         return qint16(a.b16) > qint16(b.b16);
252 
253     return a.b16 < b.b16;
254 }
255 
256 inline bool operator<(qfloat16 a, qfloat16 b)
257 {
258     if ((qIsFinite(a) == false) || (qIsFinite(b) == false ))
259         return float(a) < float(b);
260 
261     if (qIsNull(a) && qIsNull(b))
262         return false;
263 
264     if (a.isPositive() || a.isPositive())
265         return qint16(a.b16) < qint16(b.b16);
266 
267     return a.b16 > b.b16;
268 }
269 
270 inline bool operator>=(qfloat16 a, qfloat16 b)
271 {
272     if ((qIsFinite(a) == false) || (qIsFinite(b) == false ))
273         return float(a) >= float(b);
274 
275     if (qIsNull(a) && qIsNull(b))
276         return true;
277 
278     if (a.isPositive() || b.isPositive())
279         return qint16(a.b16) >= qint16(b.b16);
280 
281     return a.b16 <= b.b16;
282 }
283 
284 Q_DECL_CONSTEXPR inline bool operator<=(qfloat16 a, qfloat16 b)
285 {
286     if ((qIsFinite(a) == false) || (qIsFinite(b) == false ))
287         return float(a) <= float(b);
288 
289     if (qIsNull(a) && qIsNull(b))
290         return true;
291 
292     if (a.isPositive() || b.isPositive())
293         return qint16(a.b16) <= qint16(b.b16);
294 
295     return a.b16 >= b.b16;
296 }
297 
298 Q_DECL_CONSTEXPR inline bool operator==(qfloat16 a, qfloat16 b)
299 {
300     if ((qIsFinite(a) == false) || (qIsFinite(b) == false ))
301         return float(a) == float(b);
302 
303     if (qIsNull(a) && qIsNull(b))
304         return true;
305 
306     return a.b16 == b.b16;
307 }
308 
309 Q_DECL_CONSTEXPR inline bool qFuzzyIsNull(qfloat16 f)
310 {
311     return qAbs(f) <= 0.001f;
312 }
313 
314 QT_END_NAMESPACE
315 
316 #endif
