Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2021 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the test suite of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:GPL-EXCEPT$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
21 ** included in the packaging of this file. Please review the following
22 ** information to ensure the GNU General Public License requirements will
23 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
24 **
25 ** $QT_END_LICENSE$
26 **
27 ****************************************************************************/
28 
29 #include <QTest>
30 #include <QtGui/qguiapplication.h>
31 #include <QtGui/qshortcut.h>
32 #include <QtGui/qpainter.h>
33 #include <QtGui/qrasterwindow.h>
34 #include <QtGui/qscreen.h>
35 #include <QtGui/qwindow.h>
36 #include <private/qshortcutmap_p.h>
37 #include <private/qguiapplication_p.h>
38 
39 class tst_QShortcutMap : public QObject
40 {
41     Q_OBJECT
42 public:
43 
44 private slots:
45     void ownerDeleted_QTBUG_96551();
46 };
47 
48 class ColoredWindow : public QRasterWindow {
49 public:
50     ColoredWindow(QColor c) : m_color(c) {}
51 
52 protected:
53     void paintEvent(QPaintEvent *event) override;
54 
55 private:
56     const QColor m_color;
57 };
58 
59 void ColoredWindow::paintEvent(QPaintEvent *)
60 {
61     QPainter p(this);
62     p.fillRect(QRect(QPoint(), size()), m_color);
63 }
64 
65 static void sendKey(QWindow *target, Qt::Key k, char c, Qt::KeyboardModifiers modifiers)
66 {
67     QTest::sendKeyEvent(QTest::Press, target, k, c, modifiers);
68     QTest::sendKeyEvent(QTest::Release, target, k, c, modifiers);
69 }
70 
71 static bool simpleContextMatcher(QObject *obj, Qt::ShortcutContext context)
72 {
73     return obj != nullptr;
74 }
75 
76 void tst_QShortcutMap::ownerDeleted_QTBUG_96551()
77 {
78     ColoredWindow w(Qt::yellow);
79     w.setTitle(QTest::currentTestFunction());
80     w.resize(QGuiApplication::primaryScreen()->size() / 4);
81     w.show();
82     QVERIFY(QTest::qWaitForWindowExposed(&w));
83     QTRY_VERIFY(QGuiApplication::applicationState() == Qt::ApplicationActive);
84 
85     // Represents incorrect use of the QShortcutMap API, where the
86     // owner is destroyed without first removing the shortcut.
87     {
88         QObject *badOwner = new QObject();
89         QGuiApplicationPrivate::instance()->shortcutMap.addShortcut(
90                     badOwner, QKeySequence(QKeySequence::StandardKey::Delete),
91                     Qt::ShortcutContext::WindowShortcut, simpleContextMatcher);
92         delete badOwner;
93     }
94 
95     // Success if no crash
96     sendKey(&w, Qt::Key_Delete, 0, Qt::NoModifier);
97 
98     QVERIFY(true);
99 }
100 
101 QTEST_MAIN(tst_QShortcutMap)
102 #include "tst_qshortcutmap.moc"
