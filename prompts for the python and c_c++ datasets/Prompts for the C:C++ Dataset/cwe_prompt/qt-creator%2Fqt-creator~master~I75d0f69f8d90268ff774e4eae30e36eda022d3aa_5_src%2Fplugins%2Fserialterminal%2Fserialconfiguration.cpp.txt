Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2017 Benjamin Balga
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "serialconfiguration.h"
27 #include "serialterminalconstants.h"
28 
29 #include <utils/outputformatter.h>
30 
31 namespace SerialTerminal {
32 namespace Internal {
33 
34 SerialControl::SerialControl(Settings &settings, QObject *parent) :
35     QObject(parent),
36     m_serialPort(new QSerialPort(this))
37 {
38     m_serialPort->setBaudRate(settings.baudRate);
39     m_serialPort->setDataBits(settings.dataBits);
40     m_serialPort->setParity(settings.parity);
41     m_serialPort->setStopBits(settings.stopBits);
42     m_serialPort->setFlowControl(settings.flowControl);
43 
44     if (!settings.portName.isEmpty())
45         m_serialPort->setPortName(settings.portName);
46 
47     m_lineEnd = settings.enterKeyEmulation;
48 
49     m_initialDtrState = settings.initialDtrState;
50     m_initialRtsState = settings.initialRtsState;
51     m_clearInputOnSend = settings.clearInputOnSend;
52 
53     m_reconnectTimer.setInterval(Constants::RECONNECT_DELAY);
54     m_reconnectTimer.setSingleShot(false);
55 
56     connect(m_serialPort, &QSerialPort::readyRead,
57             this, &SerialControl::handleReadyRead);
58 
59     connect(m_serialPort, &QSerialPort::errorOccurred,
60             this, &SerialControl::handleError);
61 
62     connect(&m_reconnectTimer, &QTimer::timeout,
63             this, &SerialControl::reconnectTimeout);
64 }
65 
66 bool SerialControl::start()
67 {
68     stop();
69 
70     if (!m_serialPort->open(QIODevice::ReadWrite)) {
71         if (!m_retrying)
72             appendMessage(tr("Unable to open port %1.").arg(portName()) + "\n", Utils::ErrorMessageFormat);
73         return false;
74     }
75 
76     m_serialPort->setDataTerminalReady(m_initialDtrState);
77     m_serialPort->setRequestToSend(m_initialRtsState);
78 
79     if (m_retrying)
80         appendMessage(tr("Session resumed.") + QString("\n\n"), Utils::NormalMessageFormat);
81     else
82         appendMessage(tr("Starting new session on %1...").arg(portName()) + "\n", Utils::NormalMessageFormat);
83 
84     m_retrying = false;
85 
86     m_running = true;
87     emit started();
88     emit runningChanged(true);
89     return true;
90 }
91 
92 void SerialControl::stop(bool force)
93 {
94     if (force) {
95         // Stop retries
96         m_reconnectTimer.stop();
97         m_retrying = false;
98     }
99 
100     // Close if opened
101     if (m_serialPort->isOpen())
102         m_serialPort->close();
103 
104     // Print paused or finished message
105     if (force || (m_running && !m_retrying)) {
106         appendMessage(QString("\n")
107                       + tr("Session finished on %1.").arg(portName())
108                       + QString("\n\n"),
109                       Utils::NormalMessageFormat);
110 
111         m_running = false;
112         emit finished();
113         emit runningChanged(false);
114     } else if (m_running && m_retrying) {
115         appendMessage(QString("\n")
116                       + tr("Session paused...")
117                       + QString("\n"),
118                       Utils::NormalMessageFormat);
119 
120         m_running = false;
121         // MAYBE: send paused() signals?
122     }
123 }
124 
125 bool SerialControl::isRunning() const
126 {
127     return m_running;
128 }
129 
130 QString SerialControl::displayName() const
131 {
132     return portName().isEmpty() ? tr("No Port") : portName();
133 }
134 
135 bool SerialControl::canReUseOutputPane(const SerialControl *other) const
136 {
137     return other->portName() == portName();
138 }
139 
140 Utils::OutputFormatter*SerialControl::outputFormatter()
141 {
142     return new Utils::OutputFormatter(); // TODO: custom formatter?
143 }
144 
145 void SerialControl::appendMessage(const QString &msg, Utils::OutputFormat format)
146 {
147     emit appendMessageRequested(this, msg, format);
148 }
149 
150 QString SerialControl::portName() const
151 {
152     return m_serialPort->portName();
153 }
154 
155 void SerialControl::setPortName(const QString &name)
156 {
157     if (m_serialPort->portName() == name)
158         return;
159     m_serialPort->setPortName(name);
160 }
161 
162 qint32 SerialControl::baudRate() const
163 {
164     return m_serialPort->baudRate();
165 }
166 
167 void SerialControl::setBaudRate(qint32 baudRate)
168 {
169     if (m_serialPort->baudRate() == baudRate)
170         return;
171     m_serialPort->setBaudRate(baudRate);
172 }
173 
174 QString SerialControl::baudRateText() const
175 {
176     return QString::number(baudRate());
177 }
178 
179 void SerialControl::pulseDtr()
180 {
181     m_serialPort->setDataTerminalReady(!m_initialDtrState);
182     QTimer::singleShot(Constants::RESET_DELAY, [&]() {
183         m_serialPort->setDataTerminalReady(m_initialDtrState);
184     });
185 }
186 
187 qint64 SerialControl::writeData(const QByteArray& data)
188 {
189     return m_serialPort->write(data);
190 }
191 
192 void SerialControl::handleReadyRead()
193 {
194     const QByteArray ba = m_serialPort->readAll();
195     appendMessage(QString::fromUtf8(ba), Utils::StdOutFormat);
196 }
197 
198 void SerialControl::reconnectTimeout()
199 {
200     // Try to reconnect, stop timer if successful
201     if (start()) {
202         m_reconnectTimer.stop();
203         m_retrying = false;
204     }
205 }
206 
207 void SerialControl::handleError(QSerialPort::SerialPortError error)
208 {
209     if (!isRunning()) // No auto reconnect if not running
210         return;
211 
212     if (!m_retrying && error != QSerialPort::NoError)
213         appendMessage(QString("\n")
214                       + tr("Serial port error: %1 (%2)").arg(m_serialPort->errorString()).arg(error)
215                       + QString("\n"),
216                       Utils::ErrorMessageFormat);
217 
218     // Activate auto-reconnect on some resource errors
219     // TODO: add to settings
220     switch (error) {
221     case QSerialPort::OpenError:
222     case QSerialPort::DeviceNotFoundError:
223     case QSerialPort::WriteError:
224     case QSerialPort::ReadError:
225     case QSerialPort::ResourceError:
226     case QSerialPort::UnsupportedOperationError:
227     case QSerialPort::UnknownError:
228     case QSerialPort::TimeoutError:
229     case QSerialPort::NotOpenError:
230         tryReconnect();
231         break;
232 
233     default:
234         break;
235     }
236 }
237 
238 void SerialControl::tryReconnect()
239 {
240     if (m_reconnectTimer.isActive() || m_serialPort->portName().isEmpty())
241         return;
242 
243     m_retrying = true;
244     m_reconnectTimer.start();
245 }
246 
247 } // namespace Internal
248 } // namespace SerialTerminal
