Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2017 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "vcsbasediffeditorcontroller.h"
27 #include "vcsbaseclient.h"
28 #include "vcscommand.h"
29 
30 #include <coreplugin/editormanager/editormanager.h>
31 #include <coreplugin/progressmanager/progressmanager.h>
32 #include <diffeditor/diffutils.h>
33 #include <utils/qtcassert.h>
34 #include <utils/runextensions.h>
35 
36 #include <QPointer>
37 
38 using namespace DiffEditor;
39 using namespace Core;
40 
41 namespace VcsBase {
42 
43 static void readPatch(QFutureInterface<QList<FileData>> &futureInterface,
44                       const QString &patch)
45 {
46     bool ok;
47     const QList<FileData> &fileDataList = DiffUtils::readPatch(patch, &ok, &futureInterface);
48     futureInterface.reportResult(fileDataList);
49 }
50 
51 /////////////////////
52 
53 // We need a way to disconnect from signals posted from different thread
54 // so that signals that are already posted from the other thread and not delivered
55 // yet will be ignored. Unfortunately, simple QObject::disconnect() doesn't
56 // work like that, since signals that are already posted and are awaiting
57 // to be delivered WILL BE delivered later, even after a call to QObject::disconnect().
58 // The delivery will happen when the control returns to the main event loop.
59 
60 // This proxy class solves the above problem. Instead of a call to
61 // QObject::disconnect(), which would still deliver posted signals,
62 // we delete the proxy object immediately. In this way signals which are
63 // already posted and are awaiting to be delivered won't be delivered to the
64 // destroyed object.
65 
66 // So the only reason for this proxy object is to be able to disconnect
67 // effectively from the signals posted from different threads.
68 
69 class VcsCommandResultProxy : public QObject {
70     Q_OBJECT
71 public:
72     VcsCommandResultProxy(VcsCommand *command, VcsBaseDiffEditorControllerPrivate *target);
73 private:
74     void storeOutput(const QString &output);
75     void commandFinished(bool success);
76 
77     VcsBaseDiffEditorControllerPrivate *m_target;
78 };
79 
80 /////////////////////
81 
82 class VcsBaseDiffEditorControllerPrivate
83 {
84 public:
85     VcsBaseDiffEditorControllerPrivate(VcsBaseDiffEditorController *controller,
86                                        VcsBaseClientImpl *client,
87                                        const QString &workingDirectory);
88     ~VcsBaseDiffEditorControllerPrivate();
89 
90     void processingFinished();
91     void processDiff(const QString &patch);
92     void cancelReload();
93     void storeOutput(const QString &output);
94     void commandFinished(bool success);
95 
96     VcsBaseDiffEditorController *q;
97     VcsBaseClientImpl *m_client;
98     const QString m_directory;
99     QString m_startupFile;
100     QString m_output;
101     QPointer<VcsCommand> m_command;
102     QPointer<VcsCommandResultProxy> m_commandResultProxy;
103     QFutureWatcher<QList<FileData>> *m_processWatcher = nullptr;
104 };
105 
106 /////////////////////
107 
108 VcsCommandResultProxy::VcsCommandResultProxy(VcsCommand *command,
109                           VcsBaseDiffEditorControllerPrivate *target)
110     : QObject(target->q)
111     , m_target(target)
112 {
113     connect(command, &VcsCommand::stdOutText,
114             this, &VcsCommandResultProxy::storeOutput);
115     connect(command, &VcsCommand::finished,
116             this, &VcsCommandResultProxy::commandFinished);
117     connect(command, &VcsCommand::destroyed,
118             this, &QObject::deleteLater);
119 }
120 
121 void VcsCommandResultProxy::storeOutput(const QString &output)
122 {
123     m_target->storeOutput(output);
124 }
125 
126 void VcsCommandResultProxy::commandFinished(bool success)
127 {
128     m_target->commandFinished(success);
129 }
130 
131 VcsBaseDiffEditorControllerPrivate::VcsBaseDiffEditorControllerPrivate(
132         VcsBaseDiffEditorController *controller,
133         VcsBaseClientImpl *client,
134         const QString &workingDirectory)
135     : q(controller)
136     , m_client(client)
137     , m_directory(workingDirectory)
138 {
139 }
140 
141 VcsBaseDiffEditorControllerPrivate::~VcsBaseDiffEditorControllerPrivate()
142 {
143     cancelReload();
144 }
145 
146 void VcsBaseDiffEditorControllerPrivate::processingFinished()
147 {
148     if (!m_processWatcher)
149         return;
150 
151     const bool success = !m_processWatcher->future().isCanceled();
152     const QList<FileData> fileDataList = success
153             ? m_processWatcher->future().result() : QList<FileData>();
154 
155     // Prevent direct deletion of m_processWatcher since
156     // processingFinished() is called directly by the m_processWatcher.
157     m_processWatcher->deleteLater();
158     m_processWatcher = nullptr;
159 
160     q->setDiffFiles(fileDataList, q->workingDirectory(), q->startupFile());
161     q->reloadFinished(success);
162 }
163 
164 void VcsBaseDiffEditorControllerPrivate::processDiff(const QString &patch)
165 {
166     cancelReload();
167 
168     m_processWatcher = new QFutureWatcher<QList<FileData>>();
169 
170     QObject::connect(m_processWatcher, &QFutureWatcher<QList<FileData>>::finished,
171                      [this] () { processingFinished(); } );
172 
173     m_processWatcher->setFuture(Utils::runAsync(&readPatch, patch));
174 
175     ProgressManager::addTask(m_processWatcher->future(),
176                              q->tr("Processing diff"), "DiffEditor");
177 }
178 
179 void VcsBaseDiffEditorControllerPrivate::cancelReload()
180 {
181     if (m_command) {
182         m_command->cancel();
183         m_command.clear();
184     }
185 
186     // disconnect effectively, don't deliver already posted signals
187     if (m_commandResultProxy)
188         delete m_commandResultProxy.data();
189 
190     if (m_processWatcher) {
191         if (m_processWatcher->future().isRunning())
192             m_processWatcher->future().cancel();
193 
194         delete m_processWatcher;
195         m_processWatcher = nullptr;
196     }
197 
198     m_output = QString();
199 }
200 
201 void VcsBaseDiffEditorControllerPrivate::storeOutput(const QString &output)
202 {
203     m_output = output;
204 }
205 
206 void VcsBaseDiffEditorControllerPrivate::commandFinished(bool success)
207 {
208     if (m_command)
209         m_command.clear();
210 
211     // Prevent direct deletion of m_commandResultProxy inside the possible
212     // subsequent synchronous calls to cancelReload() [called e.g. by
213     // processCommandOutput() overload], since
214     // commandFinished() is called directly by the m_commandResultProxy.
215     // m_commandResultProxy is removed via deleteLater right after
216     // a call to this commandFinished() is finished
217     if (m_commandResultProxy)
218         m_commandResultProxy.clear();
219 
220     if (!success) {
221         cancelReload();
222         q->reloadFinished(success);
223         return;
224     }
225 
226     q->processCommandOutput(QString(m_output)); // pass a copy of m_output
227 }
228 
229 /////////////////////
230 
231 VcsBaseDiffEditorController::VcsBaseDiffEditorController(IDocument *document,
232                                                          VcsBaseClientImpl *client,
233                                                          const QString &workingDirectory)
234     : DiffEditorController(document)
235     , d(new VcsBaseDiffEditorControllerPrivate(this, client, workingDirectory))
236 {
237 }
238 
239 VcsBaseDiffEditorController::~VcsBaseDiffEditorController()
240 {
241     delete d;
242 }
243 
244 void VcsBaseDiffEditorController::runCommand(const QList<QStringList> &args, unsigned flags, QTextCodec *codec)
245 {
246     d->cancelReload();
247 
248     d->m_command = new VcsCommand(workingDirectory(), d->m_client->processEnvironment());
249     d->m_command->setCodec(codec ? codec : EditorManager::defaultTextCodec());
250     d->m_commandResultProxy = new VcsCommandResultProxy(d->m_command.data(), d);
251     d->m_command->addFlags(flags);
252 
253     for (const QStringList &arg : args) {
254         QTC_ASSERT(!arg.isEmpty(), continue);
255 
256         d->m_command->addJob(d->m_client->vcsBinary(), arg, d->m_client->vcsTimeoutS());
257     }
258 
259     d->m_command->execute();
260 }
261 
262 void VcsBaseDiffEditorController::processCommandOutput(const QString &output)
263 {
264     d->processDiff(output);
265 }
266 
267 VcsBaseClientImpl *VcsBaseDiffEditorController::client() const
268 {
269     return d->m_client;
270 }
271 
272 QString VcsBaseDiffEditorController::workingDirectory() const
273 {
274     return d->m_directory;
275 }
276 
277 void VcsBaseDiffEditorController::setStartupFile(const QString &startupFile)
278 {
279     d->m_startupFile = startupFile;
280 }
281 
282 QString VcsBaseDiffEditorController::startupFile() const
283 {
284     return d->m_startupFile;
285 }
286 
287 } // namespace VcsBase
288 
289 #include "vcsbasediffeditorcontroller.moc"
