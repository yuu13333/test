Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "jsonsummarypage.h"
27 
28 #include "jsonwizard.h"
29 #include "../project.h"
30 #include "../projectexplorerconstants.h"
31 #include "../projectnodes.h"
32 #include "../session.h"
33 
34 #include <coreplugin/coreconstants.h>
35 #include <coreplugin/iversioncontrol.h>
36 
37 #include <utils/algorithm.h>
38 #include <utils/qtcassert.h>
39 
40 #include <QDir>
41 #include <QMessageBox>
42 
43 using namespace Core;
44 
45 static char KEY_SELECTED_PROJECT[] = "SelectedProject";
46 static char KEY_SELECTED_NODE[] = "SelectedFolderNode";
47 static char KEY_IS_SUBPROJECT[] = "IsSubproject";
48 static char KEY_VERSIONCONTROL[] = "VersionControl";
49 
50 namespace ProjectExplorer {
51 
52 // --------------------------------------------------------------------
53 // Helper:
54 // --------------------------------------------------------------------
55 
56 static QString generatedProjectFilePath(const QList<JsonWizard::GeneratorFile> &files)
57 {
58     foreach (const JsonWizard::GeneratorFile &file, files)
59         if (file.file.attributes() & GeneratedFile::OpenProjectAttribute)
60             return file.file.path();
61     return QString();
62 }
63 
64 static IWizardFactory::WizardKind wizardKind(JsonWizard *wiz)
65 {
66     IWizardFactory::WizardKind kind = IWizardFactory::ProjectWizard;
67     const QString kindStr = wiz->stringValue(QLatin1String("kind"));
68     if (kindStr == QLatin1String(Core::Constants::WIZARD_KIND_PROJECT))
69         kind = IWizardFactory::ProjectWizard;
70     else if (kindStr == QLatin1String(Core::Constants::WIZARD_KIND_FILE))
71         kind = IWizardFactory::FileWizard;
72     else
73         QTC_CHECK(false);
74     return kind;
75 }
76 
77 // --------------------------------------------------------------------
78 // JsonSummaryPage:
79 // --------------------------------------------------------------------
80 
81 JsonSummaryPage::JsonSummaryPage(QWidget *parent) :
82     Internal::ProjectWizardPage(parent),
83     m_wizard(nullptr)
84 {
85     connect(this, &Internal::ProjectWizardPage::projectNodeChanged,
86             this, &JsonSummaryPage::summarySettingsHaveChanged);
87     connect(this, &Internal::ProjectWizardPage::versionControlChanged,
88             this, &JsonSummaryPage::summarySettingsHaveChanged);
89 }
90 
91 void JsonSummaryPage::setHideProjectUiValue(const QVariant &hideProjectUiValue)
92 {
93     m_hideProjectUiValue = hideProjectUiValue;
94 }
95 
96 void JsonSummaryPage::initializePage()
97 {
98     m_wizard = qobject_cast<JsonWizard *>(wizard());
99     QTC_ASSERT(m_wizard, return);
100 
101     m_wizard->setValue(QLatin1String(KEY_SELECTED_PROJECT), QVariant());
102     m_wizard->setValue(QLatin1String(KEY_SELECTED_NODE), QVariant());
103     m_wizard->setValue(QLatin1String(KEY_IS_SUBPROJECT), false);
104     m_wizard->setValue(QLatin1String(KEY_VERSIONCONTROL), QString());
105 
106     connect(m_wizard, &JsonWizard::filesReady, this, &JsonSummaryPage::triggerCommit);
107     connect(m_wizard, &JsonWizard::filesReady, this, &JsonSummaryPage::addToProject);
108 
109     updateFileList();
110 
111     IWizardFactory::WizardKind kind = wizardKind(m_wizard);
112     bool isProject = (kind == IWizardFactory::ProjectWizard);
113 
114     QStringList files;
115     if (isProject) {
116         JsonWizard::GeneratorFile f
117                 = Utils::findOrDefault(m_fileList, [](const JsonWizard::GeneratorFile &f) {
118             return f.file.attributes() & GeneratedFile::OpenProjectAttribute;
119         });
120         files << f.file.path();
121     } else {
122         files = Utils::transform(m_fileList,
123                                  [](const JsonWizard::GeneratorFile &f) {
124                                     return f.file.path();
125                                  });
126     }
127 
128     Node *contextNode = m_wizard->value(QLatin1String(Constants::PREFERRED_PROJECT_NODE))
129             .value<Node *>();
130     // Make sure the contextNode still exists:
131     Project *project = m_wizard->value(Constants::PROJECT_POINTER).value<Project *>();
132     if (SessionManager::projects().contains(project) && project->rootProjectNode()) {
133         Node *n = project->rootProjectNode()->findNode([contextNode](const Node *n) {
134             return contextNode == n;
135         });
136         if (!n) {
137             const QString path = m_wizard->value(Constants::PREFERRED_PROJECT_NODE_PATH).toString();
138             n = project->rootProjectNode()->findNode([path](const Node *n) {
139                 return path == n->filePath().toString();
140             });
141         }
142         contextNode = n;
143     }
144 
145     initializeProjectTree(contextNode, files, kind,
146                           isProject ? AddSubProject : AddNewFile);
147 
148     bool hideProjectUi = JsonWizard::boolFromVariant(m_hideProjectUiValue, m_wizard->expander());
149     setProjectUiVisible(!hideProjectUi);
150 
151     initializeVersionControls();
152 
153     // Do a new try at initialization, now that we have real values set up:
154     summarySettingsHaveChanged();
155 }
156 
157 bool JsonSummaryPage::validatePage()
158 {
159     m_wizard->commitToFileList(m_fileList);
160     m_fileList.clear();
161     return true;
162 }
163 
164 void JsonSummaryPage::cleanupPage()
165 {
166     disconnect(m_wizard, &JsonWizard::filesReady, this, nullptr);
167 }
168 
169 void JsonSummaryPage::triggerCommit(const JsonWizard::GeneratorFiles &files)
170 {
171     GeneratedFiles coreFiles
172             = Utils::transform(files, [](const JsonWizard::GeneratorFile &f) -> GeneratedFile
173                                       { return f.file; });
174 
175     QString errorMessage;
176     if (!runVersionControl(coreFiles, &errorMessage)) {
177         QMessageBox::critical(wizard(), tr("Failed to Commit to Version Control"),
178                               tr("Error message from Version Control System: \"%1\".")
179                               .arg(errorMessage));
180     }
181 }
182 
183 void JsonSummaryPage::addToProject(const JsonWizard::GeneratorFiles &files)
184 {
185     QTC_CHECK(m_fileList.isEmpty()); // Happens after this page is done
186     QString generatedProject = generatedProjectFilePath(files);
187     IWizardFactory::WizardKind kind = wizardKind(m_wizard);
188 
189     FolderNode *folder = currentNode();
190     if (!folder)
191         return;
192     if (kind == IWizardFactory::ProjectWizard) {
193         if (!static_cast<ProjectNode *>(folder)->addSubProject(generatedProject)) {
194             QMessageBox::critical(m_wizard, tr("Failed to Add to Project"),
195                                   tr("Failed to add subproject \"%1\"\nto project \"%2\".")
196                                   .arg(QDir::toNativeSeparators(generatedProject))
197                                   .arg(folder->filePath().toUserOutput()));
198             return;
199         }
200         m_wizard->removeAttributeFromAllFiles(GeneratedFile::OpenProjectAttribute);
201     } else {
202         QStringList filePaths = Utils::transform(files, [](const JsonWizard::GeneratorFile &f) {
203             return f.file.path();
204         });
205         if (!folder->addFiles(filePaths)) {
206             QStringList nativeFilePaths = Utils::transform(filePaths, &QDir::toNativeSeparators);
207             QMessageBox::critical(wizard(), tr("Failed to Add to Project"),
208                                   tr("Failed to add one or more files to project\n\"%1\" (%2).")
209                                   .arg(folder->filePath().toUserOutput(),
210                                        nativeFilePaths.join(QLatin1String(", "))));
211             return;
212         }
213     }
214     return;
215 }
216 
217 void JsonSummaryPage::summarySettingsHaveChanged()
218 {
219     IVersionControl *vc = currentVersionControl();
220     m_wizard->setValue(QLatin1String(KEY_VERSIONCONTROL), vc ? vc->id().toString() : QString());
221 
222     updateProjectData(currentNode());
223 }
224 
225 void JsonSummaryPage::updateFileList()
226 {
227     m_fileList = m_wizard->generateFileList();
228     QStringList filePaths
229             = Utils::transform(m_fileList, [](const JsonWizard::GeneratorFile &f) { return f.file.path(); });
230     setFiles(filePaths);
231 }
232 
233 void JsonSummaryPage::updateProjectData(FolderNode *node)
234 {
235     Project *project = SessionManager::projectForNode(node);
236 
237     m_wizard->setValue(QLatin1String(KEY_SELECTED_PROJECT), QVariant::fromValue(project));
238     m_wizard->setValue(QLatin1String(KEY_SELECTED_NODE), QVariant::fromValue(node));
239     m_wizard->setValue(QLatin1String(KEY_IS_SUBPROJECT), node ? true : false);
240 
241     updateFileList();
242 }
243 
244 } // namespace ProjectExplorer
