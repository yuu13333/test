Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the examples of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:BSD$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** BSD License Usage
18 ** Alternatively, you may use this file under the terms of the BSD license
19 ** as follows:
20 **
21 ** "Redistribution and use in source and binary forms, with or without
22 ** modification, are permitted provided that the following conditions are
23 ** met:
24 **   * Redistributions of source code must retain the above copyright
25 **     notice, this list of conditions and the following disclaimer.
26 **   * Redistributions in binary form must reproduce the above copyright
27 **     notice, this list of conditions and the following disclaimer in
28 **     the documentation and/or other materials provided with the
29 **     distribution.
30 **   * Neither the name of The Qt Company Ltd nor the names of its
31 **     contributors may be used to endorse or promote products derived
32 **     from this software without specific prior written permission.
33 **
34 **
35 ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
36 ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
37 ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
38 ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
39 ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
40 ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
41 ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
42 ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
43 ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
44 ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
45 ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
46 **
47 ** $QT_END_LICENSE$
48 **
49 ****************************************************************************/
50 
51 
52 #include "interfaces.h"
53 #include "mainwindow.h"
54 #include "paintarea.h"
55 #include "plugindialog.h"
56 
57 #include <QAction>
58 #include <QActionGroup>
59 #include <QApplication>
60 #include <QColorDialog>
61 #include <QFileDialog>
62 #include <QInputDialog>
63 #include <QMenu>
64 #include <QMenuBar>
65 #include <QMessageBox>
66 #include <QPluginLoader>
67 #include <QScrollArea>
68 #include <QTimer>
69 
70 MainWindow::MainWindow() :
71     paintArea(new PaintArea),
72     scrollArea(new QScrollArea)
73 {
74     scrollArea->setBackgroundRole(QPalette::Dark);
75     scrollArea->setWidget(paintArea);
76     setCentralWidget(scrollArea);
77 
78     createActions();
79     createMenus();
80     loadPlugins();
81 
82     setWindowTitle(tr("Plug & Paint"));
83 
84     if (!brushActionGroup->actions().isEmpty())
85         brushActionGroup->actions().first()->trigger();
86 
87     QTimer::singleShot(500, this, &MainWindow::aboutPlugins);
88 }
89 
90 void MainWindow::open()
91 {
92     const QString fileName = QFileDialog::getOpenFileName(this,
93                                                           tr("Open File"),
94                                                           QDir::currentPath());
95     if (!fileName.isEmpty()) {
96         if (!paintArea->openImage(fileName)) {
97             QMessageBox::information(this, tr("Plug & Paint"),
98                                      tr("Cannot load %1.").arg(fileName));
99             return;
100         }
101         paintArea->adjustSize();
102     }
103 }
104 
105 bool MainWindow::saveAs()
106 {
107     const QString initialPath = QDir::currentPath() + "/untitled.png";
108 
109     const QString fileName = QFileDialog::getSaveFileName(this, tr("Save As"),
110                                                           initialPath);
111     if (fileName.isEmpty())
112         return false;
113 
114     return paintArea->saveImage(fileName, "png");
115 }
116 
117 void MainWindow::brushColor()
118 {
119     const QColor newColor = QColorDialog::getColor(paintArea->brushColor());
120     if (newColor.isValid())
121         paintArea->setBrushColor(newColor);
122 }
123 
124 void MainWindow::brushWidth()
125 {
126     bool ok;
127     const int newWidth = QInputDialog::getInt(this, tr("Plug & Paint"),
128                                               tr("Select brush width:"),
129                                               paintArea->brushWidth(),
130                                               1, 50, 1, &ok);
131     if (ok)
132         paintArea->setBrushWidth(newWidth);
133 }
134 
135 //! [0]
136 void MainWindow::changeBrush()
137 {
138     auto action = qobject_cast<QAction *>(sender());
139     auto iBrush = qobject_cast<BrushInterface *>(action->parent());
140     const QString brush = action->text();
141 
142     paintArea->setBrush(iBrush, brush);
143 }
144 //! [0]
145 
146 //! [1]
147 void MainWindow::insertShape()
148 {
149     auto action = qobject_cast<QAction *>(sender());
150     auto iShape = qobject_cast<ShapeInterface *>(action->parent());
151 
152     const QPainterPath path = iShape->generateShape(action->text(), this);
153     if (!path.isEmpty())
154         paintArea->insertShape(path);
155 }
156 //! [1]
157 
158 //! [2]
159 void MainWindow::applyFilter()
160 {
161     auto action = qobject_cast<QAction *>(sender());
162     auto iFilter = qobject_cast<FilterInterface *>(action->parent());
163 
164     const QImage image = iFilter->filterImage(action->text(), paintArea->image(),
165                                               this);
166     paintArea->setImage(image);
167 }
168 //! [2]
169 
170 void MainWindow::about()
171 {
172    QMessageBox::about(this, tr("About Plug & Paint"),
173             tr("The <b>Plug & Paint</b> example demonstrates how to write Qt "
174                "applications that can be extended through plugins."));
175 }
176 
177 //! [3]
178 void MainWindow::aboutPlugins()
179 {
180     PluginDialog dialog(pluginsDir.path(), pluginFileNames, this);
181     dialog.exec();
182 }
183 //! [3]
184 
185 void MainWindow::createActions()
186 {
187     openAct = new QAction(tr("&Open..."), this);
188     openAct->setShortcuts(QKeySequence::Open);
189     connect(openAct, &QAction::triggered, this, &MainWindow::open);
190 
191     saveAsAct = new QAction(tr("&Save As..."), this);
192     saveAsAct->setShortcuts(QKeySequence::SaveAs);
193     connect(saveAsAct, &QAction::triggered, this, &MainWindow::saveAs);
194 
195     exitAct = new QAction(tr("E&xit"), this);
196     exitAct->setShortcuts(QKeySequence::Quit);
197     connect(exitAct, &QAction::triggered, this, &MainWindow::close);
198 
199     brushColorAct = new QAction(tr("&Brush Color..."), this);
200     connect(brushColorAct, &QAction::triggered, this, &MainWindow::brushColor);
201 
202     brushWidthAct = new QAction(tr("&Brush Width..."), this);
203     connect(brushWidthAct, &QAction::triggered, this, &MainWindow::brushWidth);
204 
205     brushActionGroup = new QActionGroup(this);
206 
207     aboutAct = new QAction(tr("&About"), this);
208     connect(aboutAct, &QAction::triggered, this, &MainWindow::about);
209 
210     aboutQtAct = new QAction(tr("About &Qt"), this);
211     connect(aboutQtAct, &QAction::triggered, qApp, &QApplication::aboutQt);
212 
213     aboutPluginsAct = new QAction(tr("About &Plugins"), this);
214     connect(aboutPluginsAct, &QAction::triggered, this, &MainWindow::aboutPlugins);
215 }
216 
217 void MainWindow::createMenus()
218 {
219     fileMenu = menuBar()->addMenu(tr("&File"));
220     fileMenu->addAction(openAct);
221     fileMenu->addAction(saveAsAct);
222     fileMenu->addSeparator();
223     fileMenu->addAction(exitAct);
224 
225     brushMenu = menuBar()->addMenu(tr("&Brush"));
226     brushMenu->addAction(brushColorAct);
227     brushMenu->addAction(brushWidthAct);
228     brushMenu->addSeparator();
229 
230     shapesMenu = menuBar()->addMenu(tr("&Shapes"));
231 
232     filterMenu = menuBar()->addMenu(tr("&Filter"));
233 
234     menuBar()->addSeparator();
235 
236     helpMenu = menuBar()->addMenu(tr("&Help"));
237     helpMenu->addAction(aboutAct);
238     helpMenu->addAction(aboutQtAct);
239     helpMenu->addAction(aboutPluginsAct);
240 }
241 
242 //! [4]
243 void MainWindow::loadPlugins()
244 {
245     const auto staticInstances = QPluginLoader::staticInstances();
246     for (QObject *plugin : staticInstances)
247         populateMenus(plugin);
248 //! [4] //! [5]
249 
250     pluginsDir = QDir(qApp->applicationDirPath());
251 
252 #if defined(Q_OS_WIN)
253     if (pluginsDir.dirName().toLower() == "debug" || pluginsDir.dirName().toLower() == "release")
254         pluginsDir.cdUp();
255 #elif defined(Q_OS_MAC)
256     if (pluginsDir.dirName() == "MacOS") {
257         pluginsDir.cdUp();
258         pluginsDir.cdUp();
259         pluginsDir.cdUp();
260     }
261 #endif
262     pluginsDir.cd("plugins");
263 //! [5]
264 
265 //! [6]
266     const auto entryList = pluginsDir.entryList(QDir::Files);
267     for (const QString &fileName : entryList) {
268         QPluginLoader loader(pluginsDir.absoluteFilePath(fileName));
269         QObject *plugin = loader.instance();
270         if (plugin) {
271             populateMenus(plugin);
272             pluginFileNames += fileName;
273 //! [6] //! [7]
274         }
275 //! [7] //! [8]
276     }
277 //! [8]
278 
279 //! [9]
280     brushMenu->setEnabled(!brushActionGroup->actions().isEmpty());
281     shapesMenu->setEnabled(!shapesMenu->actions().isEmpty());
282     filterMenu->setEnabled(!filterMenu->actions().isEmpty());
283 }
284 //! [9]
285 
286 //! [10]
287 void MainWindow::populateMenus(QObject *plugin)
288 {
289     auto iBrush = qobject_cast<BrushInterface *>(plugin);
290     if (iBrush)
291         addToMenu(plugin, iBrush->brushes(), brushMenu, &MainWindow::changeBrush,
292                   brushActionGroup);
293 
294     auto iShape = qobject_cast<ShapeInterface *>(plugin);
295     if (iShape)
296         addToMenu(plugin, iShape->shapes(), shapesMenu, &MainWindow::insertShape);
297 
298     auto iFilter = qobject_cast<FilterInterface *>(plugin);
299     if (iFilter)
300         addToMenu(plugin, iFilter->filters(), filterMenu, &MainWindow::applyFilter);
301 }
302 //! [10]
303 
304 void MainWindow::addToMenu(QObject *plugin, const QStringList &texts,
305                            QMenu *menu, Member member,
306                            QActionGroup *actionGroup)
307 {
308     for (const QString &text : texts) {
309         auto action = new QAction(text, plugin);
310         connect(action, &QAction::triggered, this, member);
311         menu->addAction(action);
312 
313         if (actionGroup) {
314             action->setCheckable(true);
315             actionGroup->addAction(action);
316         }
317     }
318 }
