Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 Jochen Becher
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "classitem.h"
27 
28 #include "qmt/controller/namecontroller.h"
29 #include "qmt/diagram/dclass.h"
30 #include "qmt/diagram_scene/diagramsceneconstants.h"
31 #include "qmt/diagram_scene/diagramscenemodel.h"
32 #include "qmt/diagram_scene/parts/contextlabelitem.h"
33 #include "qmt/diagram_scene/parts/customiconitem.h"
34 #include "qmt/diagram_scene/parts/editabletextitem.h"
35 #include "qmt/diagram_scene/parts/relationstarter.h"
36 #include "qmt/diagram_scene/parts/stereotypesitem.h"
37 #include "qmt/diagram_scene/parts/templateparameterbox.h"
38 #include "qmt/infrastructure/contextmenuaction.h"
39 #include "qmt/infrastructure/geometryutilities.h"
40 #include "qmt/infrastructure/qmtassert.h"
41 #include "qmt/model/mclass.h"
42 #include "qmt/model/mclassmember.h"
43 #include "qmt/model_controller/modelcontroller.h"
44 #include "qmt/stereotype/stereotypecontroller.h"
45 #include "qmt/stereotype/stereotypeicon.h"
46 #include "qmt/style/stylecontroller.h"
47 #include "qmt/style/style.h"
48 #include "qmt/tasks/diagramscenecontroller.h"
49 #include "qmt/tasks/ielementtasks.h"
50 
51 #include <QGraphicsScene>
52 #include <QGraphicsRectItem>
53 #include <QGraphicsSimpleTextItem>
54 #include <QGraphicsLineItem>
55 #include <QBrush>
56 #include <QPen>
57 #include <QFont>
58 #include <QMenu>
59 
60 #include <algorithm>
61 
62 namespace qmt {
63 
64 static const qreal MINIMUM_AUTO_WIDTH = 80.0;
65 static const qreal MINIMUM_AUTO_HEIGHT = 60.0;
66 static const qreal BODY_VERT_BORDER = 4.0;
67 static const qreal BODY_HORIZ_BORDER = 4.0;
68 
69 ClassItem::ClassItem(DClass *klass, DiagramSceneModel *diagramSceneModel, QGraphicsItem *parent)
70     : ObjectItem(klass, diagramSceneModel, parent)
71 {
72 }
73 
74 ClassItem::~ClassItem()
75 {
76 }
77 
78 void ClassItem::update()
79 {
80     prepareGeometryChange();
81 
82     updateStereotypeIconDisplay();
83 
84     auto diagramClass = dynamic_cast<DClass *>(object());
85     QMT_CHECK(diagramClass);
86 
87     const Style *style = adaptedStyle(stereotypeIconId());
88 
89     if (diagramClass->showAllMembers()) {
90         updateMembers(style);
91     } else {
92         m_attributesText.clear();
93         m_methodsText.clear();
94     }
95 
96     // custom icon
97     if (stereotypeIconDisplay() == StereotypeIcon::DisplayIcon) {
98         if (!m_customIcon)
99             m_customIcon = new CustomIconItem(diagramSceneModel(), this);
100         m_customIcon->setStereotypeIconId(stereotypeIconId());
101         m_customIcon->setBaseSize(stereotypeIconMinimumSize(m_customIcon->stereotypeIcon(), CUSTOM_ICON_MINIMUM_AUTO_WIDTH, CUSTOM_ICON_MINIMUM_AUTO_HEIGHT));
102         m_customIcon->setBrush(style->fillBrush());
103         m_customIcon->setPen(style->outerLinePen());
104         m_customIcon->setZValue(SHAPE_ZVALUE);
105     } else if (m_customIcon) {
106         m_customIcon->scene()->removeItem(m_customIcon);
107         delete m_customIcon;
108         m_customIcon = 0;
109     }
110 
111     // shape
112     if (!m_customIcon) {
113         if (!m_shape)
114             m_shape = new QGraphicsRectItem(this);
115         m_shape->setBrush(style->fillBrush());
116         m_shape->setPen(style->outerLinePen());
117         m_shape->setZValue(SHAPE_ZVALUE);
118     } else if (m_shape){
119         m_shape->scene()->removeItem(m_shape);
120         delete m_shape;
121         m_shape = 0;
122     }
123 
124     // stereotypes
125     updateStereotypes(stereotypeIconId(), stereotypeIconDisplay(), style);
126 
127     // namespace
128     if (!diagramClass->umlNamespace().isEmpty()) {
129         if (!m_namespace)
130             m_namespace = new QGraphicsSimpleTextItem(this);
131         m_namespace->setFont(style->smallFont());
132         m_namespace->setBrush(style->textBrush());
133         m_namespace->setText(diagramClass->umlNamespace());
134     } else if (m_namespace) {
135         m_namespace->scene()->removeItem(m_namespace);
136         delete m_namespace;
137         m_namespace = 0;
138     }
139 
140     // class name
141     updateNameItem(style);
142 
143     // context
144     if (showContext()) {
145         if (!m_contextLabel)
146             m_contextLabel = new ContextLabelItem(this);
147         m_contextLabel->setFont(style->smallFont());
148         m_contextLabel->setBrush(style->textBrush());
149         m_contextLabel->setContext(object()->context());
150     } else if (m_contextLabel) {
151         m_contextLabel->scene()->removeItem(m_contextLabel);
152         delete m_contextLabel;
153         m_contextLabel = 0;
154     }
155 
156     // attributes separator
157     if (m_shape || !m_attributesText.isEmpty() || !m_methodsText.isEmpty()) {
158         if (!m_attributesSeparator)
159             m_attributesSeparator = new QGraphicsLineItem(this);
160         m_attributesSeparator->setPen(style->innerLinePen());
161         m_attributesSeparator->setZValue(SHAPE_DETAILS_ZVALUE);
162     } else if (m_attributesSeparator) {
163         m_attributesSeparator->scene()->removeItem(m_attributesSeparator);
164         delete m_attributesSeparator;
165         m_attributesSeparator = 0;
166     }
167 
168     // attributes
169     if (!m_attributesText.isEmpty()) {
170         if (!m_attributes)
171             m_attributes = new QGraphicsTextItem(this);
172         m_attributes->setFont(style->normalFont());
173         //m_attributes->setBrush(style->textBrush());
174         m_attributes->setDefaultTextColor(style->textBrush().color());
175         m_attributes->setHtml(m_attributesText);
176     } else if (m_attributes) {
177         m_attributes->scene()->removeItem(m_attributes);
178         delete m_attributes;
179         m_attributes = 0;
180     }
181 
182     // methods separator
183     if (m_shape || !m_attributesText.isEmpty() || !m_methodsText.isEmpty()) {
184         if (!m_methodsSeparator)
185             m_methodsSeparator = new QGraphicsLineItem(this);
186         m_methodsSeparator->setPen(style->innerLinePen());
187         m_methodsSeparator->setZValue(SHAPE_DETAILS_ZVALUE);
188     } else if (m_methodsSeparator) {
189         m_methodsSeparator->scene()->removeItem(m_methodsSeparator);
190         delete m_methodsSeparator;
191         m_methodsSeparator = 0;
192     }
193 
194     // methods
195     if (!m_methodsText.isEmpty()) {
196         if (!m_methods)
197             m_methods = new QGraphicsTextItem(this);
198         m_methods->setFont(style->normalFont());
199         //m_methods->setBrush(style->textBrush());
200         m_methods->setDefaultTextColor(style->textBrush().color());
201         m_methods->setHtml(m_methodsText);
202     } else if (m_methods) {
203         m_methods->scene()->removeItem(m_methods);
204         delete m_methods;
205         m_methods = 0;
206     }
207 
208     // template parameters
209     if (templateDisplay() == DClass::TemplateBox && !diagramClass->templateParameters().isEmpty()) {
210         // TODO due to a bug in Qt the m_nameItem may get focus back when this item is newly created
211         // 1. Select name item of class without template
212         // 2. Click into template property (item name loses focus) and enter a letter
213         // 3. Template box is created which gives surprisingly focus back to item name
214         if (!m_templateParameterBox)
215             m_templateParameterBox = new TemplateParameterBox(this);
216         QPen pen = style->outerLinePen();
217         pen.setStyle(Qt::DashLine);
218         m_templateParameterBox->setPen(pen);
219         m_templateParameterBox->setBrush(QBrush(Qt::white));
220         m_templateParameterBox->setFont(style->smallFont());
221         m_templateParameterBox->setTextBrush(style->textBrush());
222         m_templateParameterBox->setTemplateParameters(diagramClass->templateParameters());
223     } else if (m_templateParameterBox) {
224         m_templateParameterBox->scene()->removeItem(m_templateParameterBox);
225         delete m_templateParameterBox;
226         m_templateParameterBox = 0;
227     }
228 
229     updateSelectionMarker(m_customIcon);
230 
231     // relation starters
232     if (isFocusSelected()) {
233         if (!m_relationStarter) {
234             m_relationStarter = new RelationStarter(this, diagramSceneModel(), 0);
235             scene()->addItem(m_relationStarter);
236             m_relationStarter->setZValue(RELATION_STARTER_ZVALUE);
237             m_relationStarter->addArrow(QLatin1String("inheritance"), ArrowItem::ShaftSolid, ArrowItem::HeadTriangle);
238             m_relationStarter->addArrow(QLatin1String("dependency"), ArrowItem::ShaftDashed, ArrowItem::HeadOpen);
239             m_relationStarter->addArrow(QLatin1String("association"), ArrowItem::ShaftSolid, ArrowItem::HeadFilledTriangle);
240         }
241     } else if (m_relationStarter) {
242         scene()->removeItem(m_relationStarter);
243         delete m_relationStarter;
244         m_relationStarter = 0;
245     }
246 
247     updateAlignmentButtons();
248     updateGeometry();
249 }
250 
251 bool ClassItem::intersectShapeWithLine(const QLineF &line, QPointF *intersectionPoint, QLineF *intersectionLine) const
252 {
253     QPolygonF polygon;
254     // TODO if m_customIcon then use that shape + label's shape as intersection path
255     QRectF rect = object()->rect();
256     rect.translate(object()->pos());
257     polygon << rect.topLeft() << rect.topRight() << rect.bottomRight() << rect.bottomLeft() << rect.topLeft();
258     return GeometryUtilities::intersect(polygon, line, intersectionPoint, intersectionLine);
259 }
260 
261 QSizeF ClassItem::minimumSize() const
262 {
263     return calcMinimumGeometry();
264 }
265 
266 QPointF ClassItem::relationStartPos() const
267 {
268     return pos();
269 }
270 
271 void ClassItem::relationDrawn(const QString &id, const QPointF &toScenePos, const QList<QPointF> &intermediatePoints)
272 {
273     DElement *targetElement = diagramSceneModel()->findTopmostElement(toScenePos);
274     if (targetElement) {
275         if (id == QLatin1String("inheritance")) {
276             auto baseClass = dynamic_cast<DClass *>(targetElement);
277             if (baseClass) {
278                 auto derivedClass = dynamic_cast<DClass *>(object());
279                 QMT_CHECK(derivedClass);
280                 diagramSceneModel()->diagramSceneController()->createInheritance(derivedClass, baseClass, intermediatePoints, diagramSceneModel()->diagram());
281             }
282         } else if (id == QLatin1String("dependency")) {
283             auto dependantObject = dynamic_cast<DObject *>(targetElement);
284             if (dependantObject)
285                 diagramSceneModel()->diagramSceneController()->createDependency(object(), dependantObject, intermediatePoints, diagramSceneModel()->diagram());
286         } else if (id == QLatin1String("association")) {
287             auto assoziatedClass = dynamic_cast<DClass *>(targetElement);
288             if (assoziatedClass) {
289                 auto derivedClass = dynamic_cast<DClass *>(object());
290                 QMT_CHECK(derivedClass);
291                 diagramSceneModel()->diagramSceneController()->createAssociation(derivedClass, assoziatedClass, intermediatePoints, diagramSceneModel()->diagram());
292             }
293         }
294     }
295 }
296 
297 bool ClassItem::extendContextMenu(QMenu *menu)
298 {
299     bool extended = false;
300     if (diagramSceneModel()->diagramSceneController()->elementTasks()->hasClassDefinition(object(), diagramSceneModel()->diagram())) {
301         menu->addAction(new ContextMenuAction(tr("Show Definition"), QStringLiteral("showDefinition"), menu));
302         extended = true;
303     }
304     return extended;
305 }
306 
307 bool ClassItem::handleSelectedContextMenuAction(QAction *action)
308 {
309     auto klassAction = dynamic_cast<ContextMenuAction *>(action);
310     if (klassAction) {
311         if (klassAction->id() == QStringLiteral("showDefinition")) {
312             diagramSceneModel()->diagramSceneController()->elementTasks()->openClassDefinition(object(), diagramSceneModel()->diagram());
313             return true;
314         }
315     }
316     return false;
317 }
318 
319 QString ClassItem::buildDisplayName() const
320 {
321     auto diagramClass = dynamic_cast<DClass *>(object());
322     QMT_CHECK(diagramClass);
323 
324     QString name;
325     if (templateDisplay() == DClass::TemplateName && !diagramClass->templateParameters().isEmpty()) {
326         name = object()->name();
327         name += QLatin1Char('<');
328         bool first = true;
329         foreach (const QString &p, diagramClass->templateParameters()) {
330             if (!first)
331                 name += QLatin1Char(',');
332             name += p;
333             first = false;
334         }
335         name += QLatin1Char('>');
336     } else {
337         name = object()->name();
338     }
339     return name;
340 }
341 
342 void ClassItem::setFromDisplayName(const QString &displayName)
343 {
344     if (templateDisplay() == DClass::TemplateName) {
345         QString name;
346         QStringList templateParameters;
347         // NOTE namespace is ignored because it has its own edit field
348         if (NameController::parseClassName(displayName, 0, &name, &templateParameters)) {
349             auto diagramClass = dynamic_cast<DClass *>(object());
350             QMT_CHECK(diagramClass);
351             ModelController *modelController = diagramSceneModel()->diagramSceneController()->modelController();
352             MClass *mklass = modelController->findObject<MClass>(diagramClass->modelUid());
353             if (mklass && (name != mklass->name() || templateParameters != mklass->templateParameters())) {
354                 modelController->startUpdateObject(mklass);
355                 mklass->setName(name);
356                 mklass->setTemplateParameters(templateParameters);
357                 modelController->finishUpdateObject(mklass, false);
358             }
359         }
360     } else {
361         ObjectItem::setFromDisplayName(displayName);
362     }
363 }
364 
365 DClass::TemplateDisplay ClassItem::templateDisplay() const
366 {
367     auto diagramClass = dynamic_cast<DClass *>(object());
368     QMT_CHECK(diagramClass);
369 
370     DClass::TemplateDisplay templateDisplay = diagramClass->templateDisplay();
371     if (templateDisplay == DClass::TemplateSmart) {
372         if (m_customIcon)
373             templateDisplay = DClass::TemplateName;
374         else
375             templateDisplay = DClass::TemplateBox;
376     }
377     return templateDisplay;
378 }
379 
380 QSizeF ClassItem::calcMinimumGeometry() const
381 {
382     double width = 0.0;
383     double height = 0.0;
384 
385     if (m_customIcon) {
386         return stereotypeIconMinimumSize(m_customIcon->stereotypeIcon(),
387                                          CUSTOM_ICON_MINIMUM_AUTO_WIDTH, CUSTOM_ICON_MINIMUM_AUTO_HEIGHT);
388     }
389 
390     height += BODY_VERT_BORDER;
391     if (CustomIconItem *stereotypeIconItem = this->stereotypeIconItem()) {
392         width = std::max(width, stereotypeIconItem->boundingRect().width() + 2 * BODY_HORIZ_BORDER);
393         height += stereotypeIconItem->boundingRect().height();
394     }
395     if (StereotypesItem *stereotypesItem = this->stereotypesItem()) {
396         width = std::max(width, stereotypesItem->boundingRect().width() + 2 * BODY_HORIZ_BORDER);
397         height += stereotypesItem->boundingRect().height();
398     }
399     if (m_namespace) {
400         width = std::max(width, m_namespace->boundingRect().width() + 2 * BODY_HORIZ_BORDER);
401         height += m_namespace->boundingRect().height();
402     }
403     if (nameItem()) {
404         width = std::max(width, nameItem()->boundingRect().width() + 2 * BODY_HORIZ_BORDER);
405         height += nameItem()->boundingRect().height();
406     }
407     if (m_contextLabel)
408         height += m_contextLabel->height();
409     if (m_attributesSeparator)
410         height += 8.0;
411     if (m_attributes) {
412         width = std::max(width, m_attributes->boundingRect().width() + 2 * BODY_HORIZ_BORDER);
413         height += m_attributes->boundingRect().height();
414     }
415     if (m_methodsSeparator)
416         height += 8.0;
417     if (m_methods) {
418         width = std::max(width, m_methods->boundingRect().width() + 2 * BODY_HORIZ_BORDER);
419         height += m_methods->boundingRect().height();
420     }
421     height += BODY_VERT_BORDER;
422 
423     return GeometryUtilities::ensureMinimumRasterSize(QSizeF(width, height), 2 * RASTER_WIDTH, 2 * RASTER_HEIGHT);
424 }
425 
426 void ClassItem::updateGeometry()
427 {
428     prepareGeometryChange();
429 
430     // calc width and height
431     double width = 0.0;
432     double height = 0.0;
433 
434     QSizeF geometry = calcMinimumGeometry();
435     width = geometry.width();
436     height = geometry.height();
437 
438     if (object()->isAutoSized()) {
439         if (!m_customIcon) {
440             if (width < MINIMUM_AUTO_WIDTH)
441                 width = MINIMUM_AUTO_WIDTH;
442             if (height < MINIMUM_AUTO_HEIGHT)
443                 height = MINIMUM_AUTO_HEIGHT;
444         }
445     } else {
446         QRectF rect = object()->rect();
447         if (rect.width() > width)
448             width = rect.width();
449         if (rect.height() > height)
450             height = rect.height();
451     }
452 
453     // update sizes and positions
454     double left = -width / 2.0;
455     double right = width / 2.0;
456     double top = -height / 2.0;
457     //double bottom = height / 2.0;
458     double y = top;
459 
460     setPos(object()->pos());
461 
462     QRectF rect(left, top, width, height);
463 
464     // the object is updated without calling DiagramController intentionally.
465     // attribute rect is not a real attribute stored on DObject but
466     // a backup for the graphics item used for manual resized and persistency.
467     object()->setRect(rect);
468 
469     if (m_customIcon) {
470         m_customIcon->setPos(left, top);
471         m_customIcon->setActualSize(QSizeF(width, height));
472         y += height;
473     }
474 
475     if (m_shape)
476         m_shape->setRect(rect);
477 
478     y += BODY_VERT_BORDER;
479     if (CustomIconItem *stereotypeIconItem = this->stereotypeIconItem()) {
480         stereotypeIconItem->setPos(right - stereotypeIconItem->boundingRect().width() - BODY_HORIZ_BORDER, y);
481         y += stereotypeIconItem->boundingRect().height();
482     }
483     if (StereotypesItem *stereotypesItem = this->stereotypesItem()) {
484         stereotypesItem->setPos(-stereotypesItem->boundingRect().width() / 2.0, y);
485         y += stereotypesItem->boundingRect().height();
486     }
487     if (m_namespace) {
488         m_namespace->setPos(-m_namespace->boundingRect().width() / 2.0, y);
489         y += m_namespace->boundingRect().height();
490     }
491     if (nameItem()) {
492         nameItem()->setPos(-nameItem()->boundingRect().width() / 2.0, y);
493         y += nameItem()->boundingRect().height();
494     }
495     if (m_contextLabel) {
496         if (m_customIcon)
497             m_contextLabel->resetMaxWidth();
498         else
499             m_contextLabel->setMaxWidth(width - 2 * BODY_HORIZ_BORDER);
500         m_contextLabel->setPos(-m_contextLabel->boundingRect().width() / 2.0, y);
501         y += m_contextLabel->boundingRect().height();
502     }
503     if (m_attributesSeparator) {
504         m_attributesSeparator->setLine(left, 4.0, right, 4.0);
505         m_attributesSeparator->setPos(0, y);
506         y += 8.0;
507     }
508     if (m_attributes) {
509         if (m_customIcon)
510             m_attributes->setPos(-m_attributes->boundingRect().width() / 2.0, y);
511         else
512             m_attributes->setPos(left + BODY_HORIZ_BORDER, y);
513         y += m_attributes->boundingRect().height();
514     }
515     if (m_methodsSeparator) {
516         m_methodsSeparator->setLine(left, 4.0, right, 4.0);
517         m_methodsSeparator->setPos(0, y);
518         y += 8.0;
519     }
520     if (m_methods) {
521         if (m_customIcon)
522             m_methods->setPos(-m_methods->boundingRect().width() / 2.0, y);
523         else
524             m_methods->setPos(left + BODY_HORIZ_BORDER, y);
525         y += m_methods->boundingRect().height();
526     }
527 
528     if (m_templateParameterBox) {
529         m_templateParameterBox->setBreakLines(false);
530         double x = right - m_templateParameterBox->boundingRect().width() * 0.8;
531         if (x < 0) {
532             m_templateParameterBox->setBreakLines(true);
533             x = right - m_templateParameterBox->boundingRect().width() * 0.8;
534         }
535         if (x < 0)
536             x = 0;
537         m_templateParameterBox->setPos(x, top - m_templateParameterBox->boundingRect().height() + BODY_VERT_BORDER);
538     }
539 
540     updateSelectionMarkerGeometry(rect);
541 
542     if (m_relationStarter)
543         m_relationStarter->setPos(mapToScene(QPointF(right + 8.0, top)));
544 
545     updateAlignmentButtonsGeometry(rect);
546     updateDepth();
547 }
548 
549 void ClassItem::updateMembers(const Style *style)
550 {
551     Q_UNUSED(style)
552 
553     m_attributesText.clear();
554     m_methodsText.clear();
555 
556     MClassMember::Visibility attributesVisibility = MClassMember::VisibilityUndefined;
557     MClassMember::Visibility methodsVisibility = MClassMember::VisibilityUndefined;
558     QString attributesGroup;
559     QString methodsGroup;
560 
561     MClassMember::Visibility *currentVisibility = 0;
562     QString *currentGroup = 0;
563     QString *text = 0;
564 
565     auto dclass = dynamic_cast<DClass *>(object());
566     QMT_CHECK(dclass);
567 
568     foreach (const MClassMember &member, dclass->members()) {
569         switch (member.memberType()) {
570         case MClassMember::MemberUndefined:
571             QMT_CHECK(false);
572             break;
573         case MClassMember::MemberAttribute:
574             currentVisibility = &attributesVisibility;
575             currentGroup = &attributesGroup;
576             text = &m_attributesText;
577             break;
578         case MClassMember::MemberMethod:
579             currentVisibility = &methodsVisibility;
580             currentGroup = &methodsGroup;
581             text = &m_methodsText;
582             break;
583         }
584 
585         if (text && !text->isEmpty())
586             *text += QStringLiteral("<br/>");
587 
588         bool addNewline = false;
589         bool addSpace = false;
590         if (currentVisibility)
591             *currentVisibility = member.visibility();
592         if (member.group() != currentGroup) {
593             *text += QString(QStringLiteral("[%1]")).arg(member.group());
594             addNewline = true;
595             *currentGroup = member.group();
596         }
597         if (addNewline)
598             *text += QStringLiteral("<br/>");
599 
600         bool haveSignal = false;
601         bool haveSlot = false;
602         if (member.visibility() != MClassMember::VisibilityUndefined) {
603             QString vis;
604             switch (member.visibility()) {
605             case MClassMember::VisibilityUndefined:
606                 break;
607             case MClassMember::VisibilityPublic:
608                 vis = QStringLiteral("+");
609                 addSpace = true;
610                 break;
611             case MClassMember::VisibilityProtected:
612                 vis = QStringLiteral("#");
613                 addSpace = true;
614                 break;
615             case MClassMember::VisibilityPrivate:
616                 vis = QStringLiteral("-");
617                 addSpace = true;
618                 break;
619             case MClassMember::VisibilitySignals:
620                 vis = QStringLiteral("&gt;");
621                 haveSignal = true;
622                 addSpace = true;
623                 break;
624             case MClassMember::VisibilityPrivateSlots:
625                 vis = QStringLiteral("-$");
626                 haveSlot = true;
627                 addSpace = true;
628                 break;
629             case MClassMember::VisibilityProtectedSlots:
630                 vis = QStringLiteral("#$");
631                 haveSlot = true;
632                 addSpace = true;
633                 break;
634             case MClassMember::VisibilityPublicSlots:
635                 vis = QStringLiteral("+$");
636                 haveSlot = true;
637                 addSpace = true;
638                 break;
639             }
640             *text += vis;
641         }
642 
643         if (member.properties() & MClassMember::PropertyQsignal && !haveSignal) {
644             *text += QStringLiteral("&gt;");
645             addSpace = true;
646         }
647         if (member.properties() & MClassMember::PropertyQslot && !haveSlot) {
648             *text += QStringLiteral("$");
649             addSpace = true;
650         }
651         if (addSpace)
652             *text += QStringLiteral(" ");
653         if (member.properties() & MClassMember::PropertyQinvokable)
654             *text += QStringLiteral("invokable ");
655         if (!member.stereotypes().isEmpty()) {
656             *text += StereotypesItem::format(member.stereotypes());
657             *text += QStringLiteral(" ");
658         }
659         if (member.properties() & MClassMember::PropertyStatic)
660             *text += QStringLiteral("static ");
661         if (member.properties() & MClassMember::PropertyVirtual)
662             *text += QStringLiteral("virtual ");
663         *text += member.declaration().toHtmlEscaped();
664         if (member.properties() & MClassMember::PropertyConst)
665             *text += QStringLiteral(" const");
666         if (member.properties() & MClassMember::PropertyOverride)
667             *text += QStringLiteral(" override");
668         if (member.properties() & MClassMember::PropertyFinal)
669             *text += QStringLiteral(" final");
670         if (member.properties() & MClassMember::PropertyAbstract)
671             *text += QStringLiteral(" = 0");
672     }
673 }
674 
675 } // namespace qmt
