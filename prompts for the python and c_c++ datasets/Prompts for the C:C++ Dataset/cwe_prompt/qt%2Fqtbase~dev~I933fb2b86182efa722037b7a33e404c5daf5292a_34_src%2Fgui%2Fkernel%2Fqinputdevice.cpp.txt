Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2020 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qinputdevice.h"
41 #include "qinputdevice_p.h"
42 #include <QCoreApplication>
43 #include <QDebug>
44 #include <QMutex>
45 #include <QScreen>
46 
47 QT_BEGIN_NAMESPACE
48 
49 /*!
50     \class QInputDevice
51     \brief The QInputDevice class describes a device from which a QInputEvent originates.
52     \since 6.0
53     \inmodule QtGui
54 
55     Each QInputEvent contains a QInputDevice pointer to allow accessing
56     device-specific properties like type, capabilities and seat. It is the
57     responsibility of the platform or generic plug-ins to discover, create and
58     register an instance of this class corresponding to each available input
59     device, via QWindowSystemInterface::registerInputDevice(), before
60     generating any input event referring to that device.
61 
62     Applications do not need to instantiate this class, but can read the
63     instances pointed to by QInputEvent::device() and QInputDevice::devices().
64 */
65 
66 /*!
67     Creates a new invalid input device instance.
68 */
69 QInputDevice::QInputDevice()
70     : QObject(*(new QInputDevicePrivate(QString(), -1, QInputDevice::DeviceType::Unknown)), nullptr)
71 {
72 }
73 
74 QInputDevice::~QInputDevice()
75 {
76     QInputDevicePrivate::unregisterDevice(this);
77 }
78 
79 /*!
80     Creates a new input device instance. The given \a name is normally a
81     manufacturer-assigned model name if available, or something else
82     identifiable; \a id is a platform-specific number that will be unique per
83     device (for example the xinput ID on X11); \a type identifies what kind of
84     device. On window systems that are capable of handling input from multiple
85     users or sets of input devices at the same time (such as Wayland or X11),
86     \a seatName identifies the name of the set of devices that will be used
87     together. If the device is a child or slave device (for example one of
88     several mice that can take turns moving the "core pointer"), the master
89     device should be given as the \a parent.
90 
91     The platform plugin creates, registers and continues to own each device
92     instance; usually \a parent should be given for memory management purposes
93     even if there is no master for a particular device.
94 
95     By default, capabilities() are \c None.
96 */
97 QInputDevice::QInputDevice(const QString &name, qint64 id, QInputDevice::DeviceType type,
98                            const QString &seatName, QObject *parent)
99     : QObject(*new QInputDevicePrivate(name, id, type, QInputDevice::Capability::None, seatName), parent)
100 {
101 }
102 
103 /*!
104     \internal
105 */
106 QInputDevice::QInputDevice(QInputDevicePrivate &d, QObject *parent)
107     : QObject(d, parent)
108 {
109 }
110 
111 /*!
112     Returns the device name.
113 
114     This string may be empty. It is however useful on systems that have
115     multiple input devices: it can be used to differentiate from which device a
116     QPointerEvent originates.
117 */
118 QString QInputDevice::name() const
119 {
120     Q_D(const QInputDevice);
121     return d->name;
122 }
123 
124 /*!
125     Returns the device type.
126 */
127 QInputDevice::DeviceType QInputDevice::type() const
128 {
129     Q_D(const QInputDevice);
130     return d->deviceType;
131 }
132 
133 /*!
134     Returns the device capabilities.
135 */
136 QInputDevice::Capabilities QInputDevice::capabilities() const
137 {
138     Q_D(const QInputDevice);
139     return QInputDevice::Capabilities(d->capabilities);
140 }
141 
142 /*!
143     Returns whether the device capabilities include the given \a capability.
144 */
145 bool QInputDevice::hasCapability(QInputDevice::Capability capability) const
146 {
147     return capabilities().testFlag(capability);
148 }
149 
150 /*!
151     Returns the platform ID (for example xinput ID on the X11 platform).
152 
153     All platforms are expected to provide a unique ID for each device.
154 */
155 qint64 QInputDevice::id() const
156 {
157     Q_D(const QInputDevice);
158     return d->id;
159 }
160 
161 /*!
162     Returns the seat with which the device is associated, if known; otherwise empty.
163 
164     Devices that are intended to be used together by one user may be configured
165     to have the same seat name. That is only possible on Wayland and X11
166     platforms so far.
167 */
168 QString QInputDevice::seatName() const
169 {
170     Q_D(const QInputDevice);
171     return d->seatName;
172 }
173 
174 // TODO use smart pointers?
175 typedef QVector<const QInputDevice *> InputDevicesVector;
176 Q_GLOBAL_STATIC(InputDevicesVector, deviceList)
177 static QBasicMutex devicesMutex;
178 
179 static void cleanupDevicesList()
180 {
181     QMutexLocker lock(&devicesMutex);
182     qDeleteAll(*deviceList());
183     deviceList()->clear();
184 }
185 
186 /*!
187     Returns a list of all registered input devices (keyboards and pointing devices).
188 
189     \note The returned list cannot be used to add new devices. To add a simulated
190     touch screen for an autotest, QTest::createTouchDevice() can be used.
191     Platform plugins should call \l QWindowSystemInterface::registerInputDevice()
192     to add devices as they are discovered.
193 */
194 QVector<const QInputDevice *> QInputDevice::devices()
195 {
196     QMutexLocker lock(&devicesMutex);
197     return *deviceList();
198 }
199 
200 /*!
201     Returns the core or master keyboard on the given seat \a seatName.
202 */
203 const QInputDevice *QInputDevice::primaryKeyboard(const QString& seatName)
204 {
205     QMutexLocker locker(&devicesMutex);
206     InputDevicesVector v = *deviceList();
207     const QInputDevice *ret = nullptr;
208     for (const QInputDevice *d : v) {
209         if (d->type() == DeviceType::Keyboard && d->seatName() == seatName) {
210             // the master keyboard's parent is not another device
211             if (!d->parent() || d->parent()->metaObject() != d->metaObject())
212                 return d;
213             if (!ret)
214                 ret = d;
215         }
216     }
217     if (!ret) {
218         qWarning() << "no keyboards registered for seat" << seatName
219                    << "The platform plugin should have provided one via QWindowSystemInterface::registerInputDevice(). Creating a default one for now.";
220         ret = new QInputDevice(QLatin1String("core keyboard"), 0, DeviceType::Keyboard, seatName);
221         QInputDevicePrivate::registerDevice(ret);
222         return ret;
223     }
224     qWarning() << "core keyboard ambiguous for seat" << seatName;
225     return ret;
226 }
227 
228 /*!
229     \internal
230     Checks whether a matching device is already registered
231     (via operator==, not pointer equality).
232 */
233 bool QInputDevicePrivate::isRegistered(const QInputDevice *dev)
234 {
235     QMutexLocker locker(&devicesMutex);
236     InputDevicesVector v = *deviceList();
237     for (const QInputDevice *d : v)
238         if (*d == *dev)
239             return true;
240     return false;
241 }
242 
243 /*!
244     \internal
245 */
246 const QInputDevice *QInputDevicePrivate::deviceById(qint64 id)
247 {
248     QMutexLocker locker(&devicesMutex);
249     for (const QInputDevice *dev : *deviceList())
250         if (const_cast<QInputDevicePrivate *>(QInputDevicePrivate::get(dev))->id == id)
251             return dev;
252     return nullptr;
253 }
254 
255 void QInputDevicePrivate::registerDevice(const QInputDevice *dev)
256 {
257     QMutexLocker lock(&devicesMutex);
258     if (deviceList()->isEmpty())
259         qAddPostRoutine(cleanupDevicesList);
260     deviceList()->append(dev);
261 }
262 
263 /*!
264     \internal
265 */
266 void QInputDevicePrivate::unregisterDevice(const QInputDevice *dev)
267 {
268     QMutexLocker lock(&devicesMutex);
269     bool wasRemoved = deviceList()->removeOne(dev);
270     if (wasRemoved && deviceList()->isEmpty())
271         qRemovePostRoutine(cleanupDevicesList);
272 }
273 
274 bool QInputDevice::operator==(const QInputDevice &other) const
275 {
276     return id() == other.id();
277 }
278 
279 #ifndef QT_NO_DEBUG_STREAM
280 QDebug operator<<(QDebug debug, const QInputDevice *device)
281 {
282     QDebugStateSaver saver(debug);
283     debug.nospace();
284     debug.noquote();
285     debug << "QInputDevice(";
286     if (device) {
287         debug << '"' << device->name() << "\", type=" << device->type()
288               << Qt::hex << ", ID=" << device->id() << ", seat='" << device->seatName() << "'";
289     } else {
290         debug << '0';
291     }
292     debug << ')';
293     return debug;
294 }
295 #endif // !QT_NO_DEBUG_STREAM
296 
297 QT_END_NAMESPACE
