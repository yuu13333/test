Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qicc_p.h"
41 
42 #include <qbuffer.h>
43 #include <qbytearray.h>
44 #include <qdatastream.h>
45 #include <qendian.h>
46 #include <qloggingcategory.h>
47 #include <qstring.h>
48 
49 #include "qcolorspace_p.h"
50 #include "qcolortrc_p.h"
51 
52 QT_BEGIN_NAMESPACE
53 Q_LOGGING_CATEGORY(lcIcc, "qt.gui.icc")
54 
55 struct ICCProfileHeader
56 {
57     quint32_be profileSize;
58 
59     quint32_be preferredCmmType;
60 
61     quint32_be profileVersion;
62     quint32_be profileClass;
63     quint32_be inputColorSpace;
64     quint32_be pcs;
65     quint32_be datetime[3];
66     quint32_be signature;
67     quint32_be platformSignature;
68     quint32_be flags;
69     quint32_be deviceManufacturer;
70     quint32_be deviceModel;
71     quint32_be deviceAttributes[2];
72 
73     quint32_be renderingIntent;
74     qint32_be  illuminantXyz[3];
75 
76     quint32_be creatorSignature;
77     quint32_be profileId[4];
78 
79     quint32_be reserved[7];
80 
81 // Technically after the header, but easier to include here:
82     quint32_be tagCount;
83 };
84 
85 constexpr quint32 IccTag(uchar a, uchar b, uchar c, uchar d)
86 {
87     return (a << 24) | (b << 16) | (c << 8) | d;
88 }
89 
90 enum class ProfileClass : quint32 {
91     Input       = IccTag('s', 'c', 'r', 'n'),
92     Display     = IccTag('m', 'n', 't', 'r'),
93     // Not supported:
94     Output      = IccTag('p', 'r', 't', 'r'),
95     ColorSpace  = IccTag('s', 'p', 'a', 'c'),
96 };
97 
98 enum class Tag : quint32 {
99     acsp = IccTag('a', 'c', 's', 'p'),
100     RGB_ = IccTag('R', 'G', 'B', ' '),
101     XYZ_ = IccTag('X', 'Y', 'Z', ' '),
102     rXYZ = IccTag('r', 'X', 'Y', 'Z'),
103     gXYZ = IccTag('g', 'X', 'Y', 'Z'),
104     bXYZ = IccTag('b', 'X', 'Y', 'Z'),
105     rTRC = IccTag('r', 'T', 'R', 'C'),
106     gTRC = IccTag('g', 'T', 'R', 'C'),
107     bTRC = IccTag('b', 'T', 'R', 'C'),
108     A2B0 = IccTag('A', '2', 'B', '0'),
109     A2B1 = IccTag('A', '2', 'B', '1'),
110     B2A0 = IccTag('B', '2', 'A', '0'),
111     B2A1 = IccTag('B', '2', 'A', '1'),
112     desc = IccTag('d', 'e', 's', 'c'),
113     text = IccTag('t', 'e', 'x', 't'),
114     cprt = IccTag('c', 'p', 'r', 't'),
115     curv = IccTag('c', 'u', 'r', 'v'),
116     para = IccTag('p', 'a', 'r', 'a'),
117     wtpt = IccTag('w', 't', 'p', 't'),
118     bkpt = IccTag('b', 'k', 'p', 't'),
119     mft1 = IccTag('m', 'f', 't', '1'),
120     mft2 = IccTag('m', 'f', 't', '2'),
121     mluc = IccTag('m', 'l', 'u', 'c'),
122     mAB_ = IccTag('m', 'A', 'B', ' '),
123     mBA_ = IccTag('m', 'B', 'A', ' '),
124     chad = IccTag('c', 'h', 'a', 'd'),
125     sf32 = IccTag('s', 'f', '3', '2'),
126 
127     // Apple extensions for ICCv2:
128     aarg = IccTag('a', 'a', 'r', 'g'),
129     aagg = IccTag('a', 'a', 'g', 'g'),
130     aabg = IccTag('a', 'a', 'b', 'g'),
131 };
132 
133 inline uint qHash(const Tag &key, uint seed = 0)
134 {
135     return qHash(quint32(key), seed);
136 }
137 
138 namespace QIcc {
139 
140 struct TagTableEntry
141 {
142     quint32_be signature;
143     quint32_be offset;
144     quint32_be size;
145 };
146 
147 struct GenericTagData {
148     quint32_be type;
149     quint32_be null;
150 };
151 
152 struct XYZTagData : GenericTagData {
153     qint32_be fixedX;
154     qint32_be fixedY;
155     qint32_be fixedZ;
156 };
157 
158 struct CurvTagData : GenericTagData {
159     quint32_be valueCount;
160     quint16_be value[1];
161 };
162 
163 struct ParaTagData : GenericTagData {
164     quint16_be curveType;
165     quint16_be null2;
166     quint32_be parameter[1];
167 };
168 
169 struct MlucTagRecord {
170     quint16_be languageCode;
171     quint16_be countryCode;
172     quint32_be size;
173     quint32_be offset;
174 };
175 
176 struct MlucTagData : GenericTagData {
177     quint32_be recordCount;
178     quint32_be recordSize; // = sizeof(MlucTagRecord)
179     MlucTagRecord records[1];
180 };
181 
182 // For both mAB and mBA
183 struct mABTagData : GenericTagData {
184     quint8 inputChannels;
185     quint8 outputChannels;
186     quint8 padding[2];
187     quint32_be bCurvesOffset;
188     quint32_be matrixOffset;
189     quint32_be mCurvesOffset;
190     quint32_be clutOffset;
191     quint32_be aCurvesOffset;
192 };
193 
194 struct Sf32TagData : GenericTagData {
195     quint32_be value[1];
196 };
197 
198 static int toFixedS1516(float x)
199 {
200     return int(x * 65536.0f + 0.5f);
201 }
202 
203 static float fromFixedS1516(int x)
204 {
205     return x * (1.0f / 65536.0f);
206 }
207 
208 QColorVector fromXyzData(const XYZTagData *xyz)
209 {
210     const float x = fromFixedS1516(xyz->fixedX);
211     const float y = fromFixedS1516(xyz->fixedY);
212     const float z = fromFixedS1516(xyz->fixedZ);
213     qCDebug(lcIcc) << "XYZ_ " << x << y << z;
214 
215     return QColorVector(x, y, z);
216 }
217 
218 static bool isValidIccProfile(const ICCProfileHeader &header)
219 {
220     if (header.signature != uint(Tag::acsp)) {
221         qCWarning(lcIcc, "Failed ICC signature test");
222         return false;
223     }
224     if (header.profileSize < (sizeof(ICCProfileHeader) + header.tagCount * sizeof(TagTableEntry))) {
225         qCWarning(lcIcc, "Failed basic size sanity");
226         return false;
227     }
228 
229     if (header.profileClass != uint(ProfileClass::Input)
230         && header.profileClass != uint(ProfileClass::Display)) {
231         qCWarning(lcIcc, "Unsupported ICC profile class %x", quint32(header.profileClass));
232         return false;
233     }
234     if (header.inputColorSpace != 0x52474220 /* 'RGB '*/) {
235         qCWarning(lcIcc, "Unsupported ICC input color space %x", quint32(header.inputColorSpace));
236         return false;
237     }
238     if (header.pcs != 0x58595a20 /* 'XYZ '*/) {
239         // ### support PCSLAB
240         qCWarning(lcIcc, "Unsupported ICC profile connection space %x", quint32(header.pcs));
241         return false;
242     }
243 
244     QColorVector illuminant;
245     illuminant.x = fromFixedS1516(header.illuminantXyz[0]);
246     illuminant.y = fromFixedS1516(header.illuminantXyz[1]);
247     illuminant.z = fromFixedS1516(header.illuminantXyz[2]);
248     if (illuminant != QColorVector::D50()) {
249         qCWarning(lcIcc, "Invalid ICC illuminant");
250         return false;
251     }
252 
253     return true;
254 }
255 
256 static int writeColorTrc(QDataStream &stream, const QColorTrc &trc)
257 {
258     if (trc.isLinear()) {
259         stream << uint(Tag::curv) << uint(0);
260         stream << uint(0);
261         return 12;
262     }
263 
264     if (trc.m_type == QColorTrc::Type::Function) {
265         const QColorTransferFunction &fun = trc.m_fun;
266         stream << uint(Tag::para) << uint(0);
267         if (fun.isGamma()) {
268             stream << ushort(0) << ushort(0);
269             stream << toFixedS1516(fun.m_g);
270             return 12 + 4;
271         }
272         bool type3 = qFuzzyIsNull(fun.m_e) && qFuzzyIsNull(fun.m_f);
273         stream << ushort(type3 ? 3 : 4) << ushort(0);
274         stream << toFixedS1516(fun.m_g);
275         stream << toFixedS1516(fun.m_a);
276         stream << toFixedS1516(fun.m_b);
277         stream << toFixedS1516(fun.m_c);
278         stream << toFixedS1516(fun.m_d);
279         if (type3)
280             return 12 + 5 * 4;
281         stream << toFixedS1516(fun.m_e);
282         stream << toFixedS1516(fun.m_f);
283         return 12 + 7 * 4;
284     }
285 
286     Q_ASSERT(trc.m_type == QColorTrc::Type::Table);
287     stream << uint(Tag::curv) << uint(0);
288     stream << uint(trc.m_table.m_tableSize);
289     if (!trc.m_table.m_table16.isEmpty()) {
290         for (uint i = 0; i < trc.m_table.m_tableSize; ++i) {
291             stream << ushort(trc.m_table.m_table16[i]);
292         }
293     } else {
294         for (uint i = 0; i < trc.m_table.m_tableSize; ++i) {
295             stream << ushort(trc.m_table.m_table8[i] * 257U);
296         }
297     }
298     return 12 + 2 * trc.m_table.m_tableSize;
299 }
300 
301 QByteArray toIccProfile(const QColorSpace &space)
302 {
303     if (!space.isValid())
304         return QByteArray();
305 
306     const QColorSpacePrivate *spaceDPtr = QColorSpacePrivate::get(space);
307 
308     constexpr int tagCount = 9;
309     constexpr uint profileDataOffset = 128 + 4 + 12 * tagCount;
310     constexpr uint variableTagTableOffsets = 128 + 4 + 12 * 5;
311     uint currentOffset = 0;
312     uint rTrcOffset, gTrcOffset, bTrcOffset;
313     uint rTrcSize, gTrcSize, bTrcSize;
314     uint descOffset, descSize;
315 
316     QBuffer buffer;
317     buffer.open(QIODevice::WriteOnly);
318     QDataStream stream(&buffer);
319 
320     // Profile header:
321     stream << uint(0); // Size, we will update this later
322     stream << uint(0);
323     stream << uint(0x02400000); // Version 2.4 (note we use 'para' from version 4)
324     stream << uint(ProfileClass::Display);
325     stream << uint(Tag::RGB_);
326     stream << uint(Tag::XYZ_);
327     stream << uint(0) << uint(0) << uint(0);
328     stream << uint(Tag::acsp);
329     stream << uint(0) << uint(0) << uint(0);
330     stream << uint(0) << uint(0) << uint(0);
331     stream << uint(1); // Rendering intent
332     stream << uint(0x0000f6d6); // D50 X
333     stream << uint(0x00010000); // D50 Y
334     stream << uint(0x0000d32d); // D50 Z
335     stream << IccTag('Q','t', QT_VERSION_MAJOR, QT_VERSION_MINOR);
336     stream << uint(0) << uint(0) << uint(0) << uint(0);
337     stream << uint(0) << uint(0) << uint(0) << uint(0) << uint(0) << uint(0) << uint(0);
338 
339     // Tag table:
340     stream << uint(tagCount);
341     stream << uint(Tag::rXYZ) << uint(profileDataOffset + 00) << uint(20);
342     stream << uint(Tag::gXYZ) << uint(profileDataOffset + 20) << uint(20);
343     stream << uint(Tag::bXYZ) << uint(profileDataOffset + 40) << uint(20);
344     stream << uint(Tag::wtpt) << uint(profileDataOffset + 60) << uint(20);
345     stream << uint(Tag::cprt) << uint(profileDataOffset + 80) << uint(12);
346     // From here the offset and size will be updated later:
347     stream << uint(Tag::rTRC) << uint(0) << uint(0);
348     stream << uint(Tag::gTRC) << uint(0) << uint(0);
349     stream << uint(Tag::bTRC) << uint(0) << uint(0);
350     stream << uint(Tag::desc) << uint(0) << uint(0);
351     // TODO: consider adding 'chad' tag (required in ICC >=4 when we have non-D50 whitepoint)
352     currentOffset = profileDataOffset;
353 
354     // Tag data:
355     stream << uint(Tag::XYZ_) << uint(0);
356     stream << toFixedS1516(spaceDPtr->toXyz.r.x);
357     stream << toFixedS1516(spaceDPtr->toXyz.r.y);
358     stream << toFixedS1516(spaceDPtr->toXyz.r.z);
359     stream << uint(Tag::XYZ_) << uint(0);
360     stream << toFixedS1516(spaceDPtr->toXyz.g.x);
361     stream << toFixedS1516(spaceDPtr->toXyz.g.y);
362     stream << toFixedS1516(spaceDPtr->toXyz.g.z);
363     stream << uint(Tag::XYZ_) << uint(0);
364     stream << toFixedS1516(spaceDPtr->toXyz.b.x);
365     stream << toFixedS1516(spaceDPtr->toXyz.b.y);
366     stream << toFixedS1516(spaceDPtr->toXyz.b.z);
367     stream << uint(Tag::XYZ_) << uint(0);
368     stream << toFixedS1516(spaceDPtr->whitePoint.x);
369     stream << toFixedS1516(spaceDPtr->whitePoint.y);
370     stream << toFixedS1516(spaceDPtr->whitePoint.z);
371     stream << uint(Tag::text) << uint(0);
372     stream << uint(IccTag('N', '/', 'A', '\0'));
373     currentOffset += 92;
374 
375     // From now on the data is variable sized:
376     rTrcOffset = currentOffset;
377     rTrcSize = writeColorTrc(stream, spaceDPtr->trc[0]);
378     currentOffset += rTrcSize;
379     if (spaceDPtr->trc[0] == spaceDPtr->trc[1]) {
380         gTrcOffset = rTrcOffset;
381         gTrcSize = rTrcSize;
382     } else {
383         gTrcOffset = currentOffset;
384         gTrcSize = writeColorTrc(stream, spaceDPtr->trc[1]);
385         currentOffset += gTrcSize;
386     }
387     if (spaceDPtr->trc[0] == spaceDPtr->trc[2]) {
388         bTrcOffset = rTrcOffset;
389         bTrcSize = rTrcSize;
390     } else {
391         bTrcOffset = currentOffset;
392         bTrcSize = writeColorTrc(stream, spaceDPtr->trc[2]);
393         currentOffset += bTrcSize;
394     }
395 
396     descOffset = currentOffset;
397     QByteArray description = spaceDPtr->description.toUtf8();
398     stream << uint(Tag::desc) << uint(0);
399     stream << uint(description.size() + 1);
400     stream.writeRawData(description.constData(), description.size() + 1);
401     stream << uint(0) << uint(0);
402     stream << ushort(0) << uchar(0);
403     QByteArray macdesc(67, '\0');
404     stream.writeRawData(macdesc.constData(), 67);
405     descSize = 90 + description.size() + 1;
406     currentOffset += descSize;
407 
408     buffer.close();
409     QByteArray iccProfile = buffer.buffer();
410     // Now write final size
411     *(quint32_be *)iccProfile.data() = iccProfile.size();
412     // And the final indices and sizes of variable size tags:
413     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 4) = rTrcOffset;
414     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 8) = rTrcSize;
415     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 12 + 4) = gTrcOffset;
416     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 12 + 8) = gTrcSize;
417     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 2 * 12 + 4) = bTrcOffset;
418     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 2 * 12 + 8) = bTrcSize;
419     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 3 * 12 + 4) = descOffset;
420     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 3 * 12 + 8) = descSize;
421 
422 #if !defined(QT_NO_DEBUG) || defined(QT_FORCE_ASSERTS)
423     const ICCProfileHeader *iccHeader = (const ICCProfileHeader *)iccProfile.constData();
424     Q_ASSERT(qsizetype(iccHeader->profileSize) == qsizetype(iccProfile.size()));
425     Q_ASSERT(isValidIccProfile(*iccHeader));
426 #endif
427 
428     return iccProfile;
429 }
430 
431 bool parseTRC(const GenericTagData *trcData, QColorTrc &gamma)
432 {
433     if (trcData->type == quint32(Tag::curv)) {
434         const CurvTagData *curv = reinterpret_cast<const CurvTagData *>(trcData);
435         qCDebug(lcIcc) << "curv" << uint(curv->valueCount);
436         if (curv->valueCount == 0) {
437             gamma.m_type = QColorTrc::Type::Function;
438             gamma.m_fun = QColorTransferFunction(); // Linear
439         } else if (curv->valueCount == 1) {
440             float g = curv->value[0] * (1.0f / 256.0f);
441             qCDebug(lcIcc) << g;
442             gamma.m_type = QColorTrc::Type::Function;
443             gamma.m_fun = QColorTransferFunction::fromGamma(g);
444         } else {
445             QVector<quint16> tabl;
446             tabl.resize(curv->valueCount);
447             for (uint i = 0; i < curv->valueCount; ++i)
448                 tabl[i] = curv->value[i];
449             QColorTransferTable table = QColorTransferTable(curv->valueCount, std::move(tabl));
450             QColorTransferFunction curve;
451             if (!table.asColorTransferFunction(&curve)) {
452                 gamma.m_type = QColorTrc::Type::Table;
453                 gamma.m_table = table;
454             } else {
455                 qCDebug(lcIcc) << "Detected curv table as function";
456                 gamma.m_type = QColorTrc::Type::Function;
457                 gamma.m_fun = curve;
458             }
459         }
460         return true;
461     }
462     if (trcData->type == quint32(Tag::para)) {
463         const ParaTagData *para = reinterpret_cast<const ParaTagData *>(trcData);
464         qCDebug(lcIcc) << "para" << uint(para->curveType);
465         switch (para->curveType) {
466         case 0: {
467             float g = fromFixedS1516(para->parameter[0]);
468             qCDebug(lcIcc) << g;
469             gamma.m_type = QColorTrc::Type::Function;
470             gamma.m_fun = QColorTransferFunction::fromGamma(g);
471             break;
472         }
473         case 1: {
474             float g = fromFixedS1516(para->parameter[0]);
475             float a = fromFixedS1516(para->parameter[1]);
476             float b = fromFixedS1516(para->parameter[2]);
477             float d = -b / a;
478             qCDebug(lcIcc) << g << a << b;
479             gamma.m_type = QColorTrc::Type::Function;
480             gamma.m_fun = QColorTransferFunction(a, b, 0.0f, d, 0.0f, 0.0f, g);
481             break;
482         }
483         case 2: {
484             float g = fromFixedS1516(para->parameter[0]);
485             float a = fromFixedS1516(para->parameter[1]);
486             float b = fromFixedS1516(para->parameter[2]);
487             float c = fromFixedS1516(para->parameter[3]);
488             float d = -b / a;
489             qCDebug(lcIcc) << g << a << b << c;
490             gamma.m_type = QColorTrc::Type::Function;
491             gamma.m_fun = QColorTransferFunction(a, b, 0.0f, d, c, c, g);
492             break;
493         }
494         case 3: {
495             float g = fromFixedS1516(para->parameter[0]);
496             float a = fromFixedS1516(para->parameter[1]);
497             float b = fromFixedS1516(para->parameter[2]);
498             float c = fromFixedS1516(para->parameter[3]);
499             float d = fromFixedS1516(para->parameter[4]);
500             qCDebug(lcIcc) << g << a << b << c << d;
501             gamma.m_type = QColorTrc::Type::Function;
502             gamma.m_fun = QColorTransferFunction(a, b, c, d, 0.0f, 0.0f, g);
503             break;
504         }
505         case 4: {
506             float g = fromFixedS1516(para->parameter[0]);
507             float a = fromFixedS1516(para->parameter[1]);
508             float b = fromFixedS1516(para->parameter[2]);
509             float c = fromFixedS1516(para->parameter[3]);
510             float d = fromFixedS1516(para->parameter[4]);
511             float e = fromFixedS1516(para->parameter[5]);
512             float f = fromFixedS1516(para->parameter[6]);
513             qCDebug(lcIcc) << g << a << b << c << d << e << f;
514             gamma.m_type = QColorTrc::Type::Function;
515             gamma.m_fun = QColorTransferFunction(a, b, c, d, e, f, g);
516             break;
517         }
518         default:
519             qCWarning(lcIcc)  << "Unknown para type" << uint(para->curveType);
520             return false;
521         }
522         return true;
523     }
524     qCWarning(lcIcc) << "Invalid TRC data type";
525     return false;
526 }
527 
528 bool parseDesc(const QByteArray &data, quint32 offset, QString &descName)
529 {
530     const GenericTagData *tag = (const GenericTagData *)(data.constData() + offset);
531 
532     // Either 'desc' (ICCv2) or 'mluc' (ICCv4)
533     if (tag->type == quint32(Tag::desc)) {
534         quint32 len = *(quint32_be *)(data.constData() + offset + 8);
535         if (len < 1)
536             return false;
537         const char *asciiName = data.constData() + offset + 12;
538         if (offset + 12 + len > quint32(data.length()))
539             return false;
540         if (asciiName[len - 1] != '\0')
541             return false;
542         descName = QString::fromLatin1(asciiName, len - 1);
543         return true;
544     }
545     if (tag->type != quint32(Tag::mluc))
546         return false;
547 
548     const MlucTagData *mluc = (const MlucTagData *)(data.constData() + offset);
549     if (mluc->recordCount < 1)
550         return false;
551     if (mluc->recordSize < 12)
552         return false;
553     // We just use the primary record regardless of language or country.
554     const quint32 stringOffset = mluc->records[0].offset;
555     const quint32 stringSize = mluc->records[0].size;
556     if (offset + stringOffset + stringSize > quint32(data.size()))
557         return false;
558     if (stringSize & 1)
559         return false;
560     quint32 stringLen = stringSize / 2;
561     const ushort *unicodeString = (const ushort *)(data.constData() + offset + stringOffset);
562     // The given length shouldn't include 0-termination, but might.
563     if (stringLen > 1 && unicodeString[stringLen - 1] == 0)
564         --stringLen;
565     QVarLengthArray<quint16> utf16hostendian(stringLen);
566     qFromBigEndian<ushort>(unicodeString, stringLen, utf16hostendian.data());
567     descName = QString::fromUtf16(utf16hostendian.data(), stringLen);
568     return true;
569 }
570 
571 bool fromIccProfile(const QByteArray &data, QColorSpace *colorSpace)
572 {
573     if (data.size() < qsizetype(sizeof(ICCProfileHeader))) {
574         qCWarning(lcIcc) << "fromIccProfile: failed size sanity 1";
575         return false;
576     }
577     const ICCProfileHeader *header = (const ICCProfileHeader *)data.constData();
578     if (!isValidIccProfile(*header)) {
579         qCWarning(lcIcc) << "fromIccProfile: failed general sanity check";
580         return false;
581     }
582     if (qsizetype(header->profileSize) > data.size()) {
583         qCWarning(lcIcc) << "fromIccProfile: failed size sanity 2";
584         return false;
585     }
586 
587     // Read tag index
588     const TagTableEntry *tagTable = (const TagTableEntry *)(data.constData() + sizeof(ICCProfileHeader));
589     const qsizetype offsetToData = sizeof(ICCProfileHeader) + header->tagCount * sizeof(TagTableEntry);
590 
591     QHash<Tag, quint32> tagIndex;
592     for (uint i = 0; i < header->tagCount; ++i) {
593         // Sanity check tag sizes and offsets:
594         if (qsizetype(tagTable[i].offset) < offsetToData) {
595             qCWarning(lcIcc) << "fromIccProfile: failed tag offset sanity 1";
596             return false;
597         }
598         // Checked separately from (+ size) to handle overflow.
599         if (tagTable[i].offset > header->profileSize) {
600             qCWarning(lcIcc) << "fromIccProfile: failed tag offset sanity 2";
601             return false;
602         }
603         if ((tagTable[i].offset + tagTable[i].size) > header->profileSize) {
604             qCWarning(lcIcc) << "fromIccProfile: failed tag offset + size sanity";
605             return false;
606         }
607 //        printf("'%4s' %d %d\n", (const char *)&tagTable[i].signature,
608 //                                quint32(tagTable[i].offset),
609 //                                quint32(tagTable[i].size));
610         tagIndex.insert(Tag(quint32(tagTable[i].signature)), tagTable[i].offset);
611     }
612     // Check the profile is three-component matrix based (what we currently support):
613     if (!tagIndex.contains(Tag::rXYZ) || !tagIndex.contains(Tag::gXYZ) || !tagIndex.contains(Tag::bXYZ) ||
614         !tagIndex.contains(Tag::rTRC) || !tagIndex.contains(Tag::gTRC) || !tagIndex.contains(Tag::bTRC) ||
615         !tagIndex.contains(Tag::wtpt)) {
616         qCWarning(lcIcc) << "fromIccProfile: Unsupported ICC profile - not three component matrix based";
617         return false;
618     }
619 
620     // Parse XYZ tags
621     const XYZTagData *rXyz = (const XYZTagData *)(data.constData() + tagIndex[Tag::rXYZ]);
622     const XYZTagData *gXyz = (const XYZTagData *)(data.constData() + tagIndex[Tag::gXYZ]);
623     const XYZTagData *bXyz = (const XYZTagData *)(data.constData() + tagIndex[Tag::bXYZ]);
624     const XYZTagData *wXyz = (const XYZTagData *)(data.constData() + tagIndex[Tag::wtpt]);
625     if (rXyz->type != quint32(Tag::XYZ_) || gXyz->type != quint32(Tag::XYZ_) ||
626         wXyz->type != quint32(Tag::XYZ_) || wXyz->type != quint32(Tag::XYZ_)) {
627         qCWarning(lcIcc) << "fromIccProfile: Bad XYZ data type";
628         return false;
629     }
630     QColorSpacePrivate *colorspaceDPtr = QColorSpacePrivate::getWritable(*colorSpace);
631 
632     colorspaceDPtr->toXyz.r = fromXyzData(rXyz);
633     colorspaceDPtr->toXyz.g = fromXyzData(gXyz);
634     colorspaceDPtr->toXyz.b = fromXyzData(bXyz);
635     QColorVector whitePoint = fromXyzData(wXyz);
636     colorspaceDPtr->whitePoint = whitePoint;
637 
638     colorspaceDPtr->gamut = QColorSpace::Gamut::Custom;
639     if (colorspaceDPtr->toXyz == QColorMatrix::toXyzFromSRgb()) {
640         qCDebug(lcIcc) << "fromIccProfile: sRGB gamut detected";
641         colorspaceDPtr->gamut = QColorSpace::Gamut::SRgb;
642     } else if (colorspaceDPtr->toXyz == QColorMatrix::toXyzFromAdobeRgb()) {
643         qCDebug(lcIcc) << "fromIccProfile: Adobe RGB gamut detected";
644         colorspaceDPtr->gamut = QColorSpace::Gamut::AdobeRgb;
645     } else if (colorspaceDPtr->toXyz == QColorMatrix::toXyzFromDciP3D65()) {
646         qCDebug(lcIcc) << "fromIccProfile: DCI-P3 D65 gamut detected";
647         colorspaceDPtr->gamut = QColorSpace::Gamut::DciP3D65;
648     } else if (colorspaceDPtr->toXyz == QColorMatrix::toXyzFromBt2020()) {
649         qCDebug(lcIcc) << "fromIccProfile: BT.2020 gamut detected";
650         colorspaceDPtr->gamut = QColorSpace::Gamut::Bt2020;
651     }
652     if (colorspaceDPtr->toXyz == QColorMatrix::toXyzFromProPhotoRgb()) {
653         qCDebug(lcIcc) << "fromIccProfile: ProPhoto RGB gamut detected";
654         colorspaceDPtr->gamut = QColorSpace::Gamut::ProPhotoRgb;
655     }
656     // Reset the matrix to our canonical values:
657     if (colorspaceDPtr->gamut != QColorSpace::Gamut::Custom)
658         colorspaceDPtr->setToXyzMatrix();
659 
660     // Parse TRC tags
661     const GenericTagData *rTrc;
662     const GenericTagData *gTrc;
663     const GenericTagData *bTrc;
664     if (tagIndex.contains(Tag::aarg) && tagIndex.contains(Tag::aagg) && tagIndex.contains(Tag::aabg)) {
665         // Apple extension for parametric version of TRCs in ICCv2:
666         rTrc = (const GenericTagData *)(data.constData() + tagIndex[Tag::aarg]);
667         gTrc = (const GenericTagData *)(data.constData() + tagIndex[Tag::aagg]);
668         bTrc = (const GenericTagData *)(data.constData() + tagIndex[Tag::aabg]);
669     } else {
670         rTrc = (const GenericTagData *)(data.constData() + tagIndex[Tag::rTRC]);
671         gTrc = (const GenericTagData *)(data.constData() + tagIndex[Tag::gTRC]);
672         bTrc = (const GenericTagData *)(data.constData() + tagIndex[Tag::bTRC]);
673     }
674 
675     QColorTrc rCurve;
676     QColorTrc gCurve;
677     QColorTrc bCurve;
678     if (!parseTRC(rTrc, rCurve))
679         return false;
680     if (!parseTRC(gTrc, gCurve))
681         return false;
682     if (!parseTRC(bTrc, bCurve))
683         return false;
684     if (rCurve == gCurve && gCurve == bCurve && rCurve.m_type == QColorTrc::Type::Function) {
685         if (rCurve.m_fun.isLinear()) {
686             qCDebug(lcIcc) << "fromIccProfile: Linear gamma detected";
687             colorspaceDPtr->trc[0] = QColorTransferFunction();
688             colorspaceDPtr->transferFunction = QColorSpace::TransferFunction::Linear;
689             colorspaceDPtr->gamma = 1.0f;
690         } else if (rCurve.m_fun.isGamma()) {
691             qCDebug(lcIcc) << "fromIccProfile: Simple gamma detected";
692             colorspaceDPtr->trc[0] = QColorTransferFunction::fromGamma(rCurve.m_fun.m_g);
693             colorspaceDPtr->transferFunction = QColorSpace::TransferFunction::Gamma;
694             colorspaceDPtr->gamma = rCurve.m_fun.m_g;
695         } else if (rCurve.m_fun.isSRgb()) {
696             qCDebug(lcIcc) << "fromIccProfile: sRGB gamma detected";
697             colorspaceDPtr->trc[0] = QColorTransferFunction::fromSRgb();
698             colorspaceDPtr->transferFunction = QColorSpace::TransferFunction::SRgb;
699         } else {
700             colorspaceDPtr->trc[0] = rCurve;
701             colorspaceDPtr->transferFunction = QColorSpace::TransferFunction::Custom;
702         }
703 
704         colorspaceDPtr->trc[1] = colorspaceDPtr->trc[0];
705         colorspaceDPtr->trc[2] = colorspaceDPtr->trc[0];
706     } else {
707         colorspaceDPtr->trc[0] = rCurve;
708         colorspaceDPtr->trc[1] = gCurve;
709         colorspaceDPtr->trc[2] = bCurve;
710         colorspaceDPtr->transferFunction = QColorSpace::TransferFunction::Custom;
711     }
712 
713     if (tagIndex.contains(Tag::desc)) {
714         if (!parseDesc(data, tagIndex[Tag::desc], colorspaceDPtr->description))
715             qCWarning(lcIcc) << "fromIccProfile: Failed to parse description";
716         else
717             qCDebug(lcIcc) << "fromIccProfile: Description" << colorspaceDPtr->description;
718     }
719 
720     if (!colorspaceDPtr->identifyColorSpace())
721         colorspaceDPtr->id = QColorSpace::Unknown;
722     else
723         qCDebug(lcIcc) << "fromIccProfile: Named colorspace detected: " << colorSpace->colorSpaceId();
724 
725     colorspaceDPtr->iccProfile = data;
726 
727     return true;
728 }
729 
730 } // namespace QIcc
731 
732 QT_END_NAMESPACE
