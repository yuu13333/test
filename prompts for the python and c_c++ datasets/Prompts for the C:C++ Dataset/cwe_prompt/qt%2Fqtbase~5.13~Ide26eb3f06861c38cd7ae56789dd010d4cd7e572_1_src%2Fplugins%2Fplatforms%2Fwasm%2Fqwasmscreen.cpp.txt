Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2018 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the plugins of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:GPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU
19 ** General Public License version 3 or (at your option) any later version
20 ** approved by the KDE Free Qt Foundation. The licenses are as published by
21 ** the Free Software Foundation and appearing in the file LICENSE.GPL3
22 ** included in the packaging of this file. Please review the following
23 ** information to ensure the GNU General Public License requirements will
24 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
25 **
26 ** $QT_END_LICENSE$
27 **
28 ****************************************************************************/
29 
30 #include "qwasmscreen.h"
31 #include "qwasmwindow.h"
32 #include "qwasmeventtranslator.h"
33 #include "qwasmcompositor.h"
34 #include "qwasmintegration.h"
35 #include <emscripten/bind.h>
36 #include <emscripten/val.h>
37 
38 #include <QtEglSupport/private/qeglconvenience_p.h>
39 #ifndef QT_NO_OPENGL
40 # include <QtEglSupport/private/qeglplatformcontext_p.h>
41 #endif
42 #include <qpa/qwindowsysteminterface.h>
43 #include <QtCore/qcoreapplication.h>
44 #include <QtGui/qguiapplication.h>
45 #include <private/qhighdpiscaling_p.h>
46 
47 
48 QT_BEGIN_NAMESPACE
49 
50 QWasmScreen::QWasmScreen(const QString &canvasId)
51     : m_canvasId(canvasId)
52 
53 {
54     m_compositor = new QWasmCompositor(this);
55     m_eventTranslator = new QWasmEventTranslator(this);
56     updateQScreenAndCanvasRenderSize();
57 }
58 
59 QWasmScreen::~QWasmScreen()
60 {
61     destroy();
62 }
63 
64 void QWasmScreen::destroy()
65 {
66     m_compositor->destroy();
67 }
68 
69 QWasmScreen *QWasmScreen::get(QPlatformScreen *screen)
70 {
71     return static_cast<QWasmScreen *>(screen);
72 }
73 
74 QWasmScreen *QWasmScreen::get(QScreen *screen)
75 {
76     return get(screen->handle());
77 }
78 
79 QWasmCompositor *QWasmScreen::compositor()
80 {
81     return m_compositor;
82 }
83 
84 QWasmEventTranslator *QWasmScreen::eventTranslator()
85 {
86     return m_eventTranslator;
87 }
88 
89 QString QWasmScreen::canvasId() const
90 {
91     return m_canvasId;
92 }
93 
94 QRect QWasmScreen::geometry() const
95 {
96     return m_geometry;
97 }
98 
99 int QWasmScreen::depth() const
100 {
101     return m_depth;
102 }
103 
104 QImage::Format QWasmScreen::format() const
105 {
106     return m_format;
107 }
108 
109 QDpi QWasmScreen::logicalDpi() const
110 {
111     emscripten::val dpi = emscripten::val::module_property("qtFontDpi");
112     if (!dpi.isUndefined()) {
113         qreal dpiValue = dpi.as<qreal>();
114         return QDpi(dpiValue, dpiValue);
115     }
116     const qreal defaultDpi = 96;
117     return QDpi(defaultDpi, defaultDpi);
118 }
119 
120 qreal QWasmScreen::devicePixelRatio() const
121 {
122     // FIXME: The effective device pixel ratio may be different from the
123     // HTML window dpr if the OpenGL driver/GPU allocates a less than
124     // full resolution surface. Use emscripten_webgl_get_drawing_buffer_size()
125     // and compute the dpr instead.
126     double htmlWindowDpr = emscripten::val::global("window")["devicePixelRatio"].as<double>();
127     return qreal(htmlWindowDpr);
128 }
129 
130 QString QWasmScreen::name() const
131 {
132     return m_canvasId;
133 }
134 
135 QPlatformCursor *QWasmScreen::cursor() const
136 {
137     return const_cast<QWasmCursor *>(&m_cursor);
138 }
139 
140 void QWasmScreen::resizeMaximizedWindows()
141 {
142     if (!screen())
143         return;
144     QPlatformScreen::resizeMaximizedWindows();
145 }
146 
147 QWindow *QWasmScreen::topWindow() const
148 {
149     return m_compositor->keyWindow();
150 }
151 
152 QWindow *QWasmScreen::topLevelAt(const QPoint &p) const
153 {
154     return m_compositor->windowAt(p);
155 }
156 
157 void QWasmScreen::invalidateSize()
158 {
159     m_geometry = QRect();
160 }
161 
162 void QWasmScreen::setGeometry(const QRect &rect)
163 {
164     m_geometry = rect;
165     QWindowSystemInterface::handleScreenGeometryChange(QPlatformScreen::screen(), geometry(), availableGeometry());
166     resizeMaximizedWindows();
167 }
168 
169 void QWasmScreen::updateQScreenAndCanvasRenderSize()
170 {
171     // The HTML canvas has two sizes: the CSS size and the canvas render size.
172     // The CSS size is determined according to standard CSS rules, while the
173     // render size is set using the "width" and "height" attributes. The render
174     // size must be set manually and is not auto-updated on CSS size change.
175     // Setting the render size to a value larger than the CSS size enables high-dpi
176     // rendering.
177 
178     QByteArray canvasId = m_canvasId.toUtf8();
179     double css_width;
180     double css_height;
181     emscripten_get_element_css_size(canvasId.constData(), &css_width, &css_height);
182     QSizeF cssSize(css_width, css_height);
183 
184     QSizeF canvasSize = cssSize * devicePixelRatio();
185     emscripten::val canvas = emscripten::val::global(canvasId.constData());
186     canvas.set("width", canvasSize.width());
187     canvas.set("height", canvasSize.height());
188 
189     emscripten::val rect = canvas.call<emscripten::val>("getBoundingClientRect");
190     QPoint position(rect["left"].as<int>(), rect["top"].as<int>());
191 
192     setGeometry(QRect(position, cssSize.toSize()));
193     m_compositor->redrawWindowContent();
194 }
195 
196 QT_END_NAMESPACE
