Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "gtestconstants.h"
27 #include "gtestsettingspage.h"
28 #include "gtestsettings.h"
29 #include "gtest_utils.h"
30 #include "../autotestconstants.h"
31 #include "../testframeworkmanager.h"
32 
33 #include <coreplugin/icore.h>
34 
35 namespace Autotest {
36 namespace Internal {
37 
38 static bool validateFilter(Utils::FancyLineEdit *edit, QString * /*error*/)
39 {
40     return edit && GTestUtils::isValidGTestFilter(edit->text());
41 }
42 
43 GTestSettingsWidget::GTestSettingsWidget(QSharedPointer<IFrameworkSettings> settings)
44 {
45     m_ui.setupUi(this);
46     m_ui.filterLineEdit->setValidationFunction(&validateFilter);
47     m_ui.filterLineEdit->setEnabled(m_ui.groupModeCombo->currentIndex() == 1);
48 
49     auto s = qSharedPointerCast<GTestSettings>(settings);
50     m_ui.runDisabledGTestsCB->setChecked(s->runDisabled);
51     m_ui.repeatGTestsCB->setChecked(s->repeat);
52     m_ui.shuffleGTestsCB->setChecked(s->shuffle);
53     m_ui.repetitionSpin->setValue(s->iterations);
54     m_ui.seedSpin->setValue(s->seed);
55     m_ui.breakOnFailureCB->setChecked(s->breakOnFailure);
56     m_ui.throwOnFailureCB->setChecked(s->throwOnFailure);
57     m_ui.groupModeCombo->setCurrentIndex(s->groupMode - 1); // there's None for internal use
58     m_ui.filterLineEdit->setText(s->gtestFilter);
59     m_currentGTestFilter = s->gtestFilter; // store it temporarily (if edit is invalid)
60 
61     connect(m_ui.groupModeCombo, &QComboBox::currentTextChanged, this, [this] {
62         m_ui.filterLineEdit->setEnabled(m_ui.groupModeCombo->currentIndex() == 1);
63     });
64     connect(m_ui.repeatGTestsCB, &QCheckBox::toggled, m_ui.repetitionSpin, &QSpinBox::setEnabled);
65     connect(m_ui.shuffleGTestsCB, &QCheckBox::toggled, m_ui.seedSpin, &QSpinBox::setEnabled);
66 }
67 
68 void GTestSettingsWidget::apply()
69 {
70     GTest::Constants::GroupMode oldGroupMode = m_settings->groupMode;
71     const QString oldFilter = m_settings->gtestFilter;
72 
73     GTestSettings result;
74     result.runDisabled = m_ui.runDisabledGTestsCB->isChecked();
75     result.repeat = m_ui.repeatGTestsCB->isChecked();
76     result.shuffle = m_ui.shuffleGTestsCB->isChecked();
77     result.iterations = m_ui.repetitionSpin->value();
78     result.seed = m_ui.seedSpin->value();
79     result.breakOnFailure = m_ui.breakOnFailureCB->isChecked();
80     result.throwOnFailure = m_ui.throwOnFailureCB->isChecked();
81     result.groupMode = static_cast<GTest::Constants::GroupMode>(
82                 m_ui.groupModeCombo->currentIndex() + 1);
83     if (m_ui.filterLineEdit->isValid())
84         result.gtestFilter = m_ui.filterLineEdit->text();
85     else
86         result.gtestFilter = m_currentGTestFilter;
87 
88     result.toSettings(Core::ICore::settings());
89 
90     if (m_settings->groupMode == oldGroupMode && oldFilter == m_settings->gtestFilter)
91         return;
92 
93     auto id = Core::Id(Constants::FRAMEWORK_PREFIX).withSuffix(GTest::Constants::FRAMEWORK_NAME);
94     TestTreeModel::instance()->rebuild({id});
95 }
96 
97 GTestSettingsPage::GTestSettingsPage(QSharedPointer<IFrameworkSettings> settings,
98                                      const ITestFramework *framework)
99     : ITestSettingsPage(framework)
100 {
101     setDisplayName(QCoreApplication::translate("GTestFramework",
102                                                GTest::Constants::FRAMEWORK_SETTINGS_CATEGORY));
103     setWidgetCreator([settings] { return new GTestSettingsWidget(settings); });
104 }
105 
106 } // namespace Internal
107 } // namespace Autotest
