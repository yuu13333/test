Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 // Copyright (C) 2021 The Qt Company Ltd.
2 // SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
3 
4 #include <QtTest/private/qtestresult_p.h>
5 #include <QtCore/qglobal.h>
6 #include <QtCore/qstringview.h>
7 
8 #include <QtTest/private/qtestlog_p.h>
9 #include <QtTest/qtest.h> // toString() specializations for QStringView
10 #include <QtTest/qtestdata.h>
11 #include <QtTest/qtestcase.h>
12 #include <QtTest/qtestassert.h>
13 #include <QtTest/qtesteventloop.h>
14 
15 #include <stdlib.h>
16 #include <stdio.h>
17 #include <string.h>
18 
19 static const char *currentAppName = nullptr;
20 
21 QT_BEGIN_NAMESPACE
22 
23 namespace QTest
24 {
25     namespace Internal {
26         static bool failed = false;
27     }
28 
29     static void setFailed(bool failed)
30     {
31         static const bool fatalFailure = []() {
32             static const char * const environmentVar = "QTEST_FATAL_FAIL";
33             if (!qEnvironmentVariableIsSet(environmentVar))
34                 return false;
35 
36             bool ok;
37             const int fatal = qEnvironmentVariableIntValue(environmentVar, &ok);
38             return ok && fatal;
39         }();
40 
41         if (failed && fatalFailure)
42             qTerminate();
43         Internal::failed = failed;
44     }
45 
46     static void resetFailed()
47     {
48         setFailed(false);
49     }
50 
51     static bool hasFailed()
52     {
53         return Internal::failed;
54     }
55 
56     static QTestData *currentTestData = nullptr;
57     static QTestData *currentGlobalTestData = nullptr;
58     static const char *currentTestFunc = nullptr;
59     static const char *currentTestObjectName = nullptr;
60     static bool skipCurrentTest = false;
61     static bool blacklistCurrentTest = false;
62 
63     static const char *expectFailComment = nullptr;
64     static int expectFailMode = 0;
65 }
66 
67 void QTestResult::reset()
68 {
69     QTest::currentTestData = nullptr;
70     QTest::currentGlobalTestData = nullptr;
71     QTest::currentTestFunc = nullptr;
72     QTest::currentTestObjectName = nullptr;
73     QTest::resetFailed();
74 
75     QTest::expectFailComment = nullptr;
76     QTest::expectFailMode = 0;
77     QTest::blacklistCurrentTest = false;
78 
79     QTestLog::resetCounters();
80 }
81 
82 void QTestResult::setBlacklistCurrentTest(bool b)
83 {
84     QTest::blacklistCurrentTest = b;
85 }
86 
87 bool QTestResult::currentTestFailed()
88 {
89     return QTest::hasFailed();
90 }
91 
92 QTestData *QTestResult::currentGlobalTestData()
93 {
94     return QTest::currentGlobalTestData;
95 }
96 
97 QTestData *QTestResult::currentTestData()
98 {
99     return QTest::currentTestData;
100 }
101 
102 void QTestResult::setCurrentGlobalTestData(QTestData *data)
103 {
104     QTest::currentGlobalTestData = data;
105 }
106 
107 void QTestResult::setCurrentTestData(QTestData *data)
108 {
109     QTest::currentTestData = data;
110     QTest::resetFailed();
111     if (data)
112         QTestLog::enterTestData(data);
113 }
114 
115 void QTestResult::setCurrentTestFunction(const char *func)
116 {
117     QTest::currentTestFunc = func;
118     QTest::resetFailed();
119     if (func)
120         QTestLog::enterTestFunction(func);
121 }
122 
123 static void clearExpectFail()
124 {
125     QTest::expectFailMode = 0;
126     delete [] const_cast<char *>(QTest::expectFailComment);
127     QTest::expectFailComment = nullptr;
128 }
129 
130 /*!
131     This function is called after completing each test function,
132     including test functions that are not data-driven.
133 
134     For data-driven functions, this is called after each call to the test
135     function, with distinct data. Otherwise, this function is called once,
136     with currentTestData() and currentGlobalTestData() set to \nullptr.
137 
138     The function is called before the test's cleanup(), if it has one.
139 
140     For benchmarks, this will be called after each repeat of a function
141     (with the same data row), when the benchmarking code decides to
142     re-run one to get sufficient data.
143 
144     \sa finishedCurrentTestDataCleanup()
145 */
146 void QTestResult::finishedCurrentTestData()
147 {
148     if (QTest::expectFailMode)
149         addFailure("QEXPECT_FAIL was called without any subsequent verification statements");
150 
151     clearExpectFail();
152 
153     if (!QTest::hasFailed() && QTestLog::unhandledIgnoreMessages()) {
154         QTestLog::printUnhandledIgnoreMessages();
155         addFailure("Not all expected messages were received");
156     }
157     QTestLog::clearIgnoreMessages();
158     QTestLog::clearFailOnWarnings();
159 }
160 
161 /*!
162     This function is called after completing each test function,
163     including test functions that are not data-driven.
164 
165     For data-driven functions, this is called after each call to the test
166     function, with distinct data. Otherwise, this function is called once,
167     with currentTestData() and currentGlobalTestData() set to \nullptr.
168 
169     The function is called after the test's cleanup(), if it has one.
170 
171     For benchmarks, this is called after all repeat calls to the function
172     (with a given data row).
173 
174     \sa finishedCurrentTestData()
175 */
176 void QTestResult::finishedCurrentTestDataCleanup()
177 {
178     // If the current test hasn't failed or been skipped, then it passes.
179     if (!QTest::hasFailed() && !QTest::skipCurrentTest) {
180         if (QTest::blacklistCurrentTest)
181             QTestLog::addBPass("");
182         else
183             QTestLog::addPass("");
184     }
185 
186     QTestLog::clearCurrentTestState();
187     QTest::resetFailed();
188 }
189 
190 /*!
191     This function is called after completing each test function,
192     including test functions that are data-driven.
193 
194     For data-driven functions, this is called after after all data rows
195     have been tested, and the data table has been cleared, so both
196     currentTestData() and currentGlobalTestData() will be \nullptr.
197 */
198 void QTestResult::finishedCurrentTestFunction()
199 {
200     QTestLog::clearCurrentTestState(); // Needed if _data() skipped.
201     QTestLog::leaveTestFunction();
202 
203     QTest::currentTestFunc = nullptr;
204     QTest::resetFailed();
205 }
206 
207 const char *QTestResult::currentTestFunction()
208 {
209     return QTest::currentTestFunc;
210 }
211 
212 const char *QTestResult::currentDataTag()
213 {
214     return QTest::currentTestData ? QTest::currentTestData->dataTag() : nullptr;
215 }
216 
217 const char *QTestResult::currentGlobalDataTag()
218 {
219     return QTest::currentGlobalTestData ? QTest::currentGlobalTestData->dataTag() : nullptr;
220 }
221 
222 static bool isExpectFailData(const char *dataIndex)
223 {
224     if (!dataIndex || dataIndex[0] == '\0')
225         return true;
226     if (!QTest::currentTestData)
227         return false;
228     if (strcmp(dataIndex, QTest::currentTestData->dataTag()) == 0)
229         return true;
230     return false;
231 }
232 
233 bool QTestResult::expectFail(const char *dataIndex, const char *comment,
234                              QTest::TestFailMode mode, const char *file, int line)
235 {
236     QTEST_ASSERT(comment);
237     QTEST_ASSERT(mode > 0);
238 
239     if (!isExpectFailData(dataIndex)) {
240         delete[] comment;
241         return true; // we don't care
242     }
243 
244     if (QTest::expectFailMode) {
245         delete[] comment;
246         addFailure("Already expecting a fail", file, line);
247         return false;
248     }
249 
250     QTest::expectFailMode = mode;
251     QTest::expectFailComment = comment;
252     return true;
253 }
254 
255 static bool checkStatement(bool statement, const char *msg, const char *file, int line)
256 {
257     if (statement) {
258         if (QTest::expectFailMode) {
259             if (QTest::blacklistCurrentTest)
260                 QTestLog::addBXPass(msg, file, line);
261             else
262                 QTestLog::addXPass(msg, file, line);
263 
264             QTest::setFailed(true);
265             // Should B?XPass always (a) continue or (b) abort, regardless of mode ?
266             bool doContinue = (QTest::expectFailMode == QTest::Continue);
267             clearExpectFail();
268             return doContinue;
269         }
270         return true;
271     }
272 
273     if (QTest::expectFailMode) {
274         if (QTest::blacklistCurrentTest)
275             QTestLog::addBXFail(QTest::expectFailComment, file, line);
276         else
277             QTestLog::addXFail(QTest::expectFailComment, file, line);
278         bool doContinue = (QTest::expectFailMode == QTest::Continue);
279         clearExpectFail();
280         return doContinue;
281     }
282 
283     QTestResult::addFailure(msg, file, line);
284     return false;
285 }
286 
287 void QTestResult::fail(const char *msg, const char *file, int line)
288 {
289     checkStatement(false, msg, file, line);
290 }
291 
292 bool QTestResult::verify(bool statement, const char *statementStr,
293                          const char *description, const char *file, int line)
294 {
295     QTEST_ASSERT(statementStr);
296 
297     char msg[1024] = {'\0'};
298 
299     if (QTestLog::verboseLevel() >= 2) {
300         qsnprintf(msg, 1024, "QVERIFY(%s)", statementStr);
301         QTestLog::info(msg, file, line);
302     }
303 
304     if (statement == !!QTest::expectFailMode) {
305         qsnprintf(msg, 1024,
306                   statement ? "'%s' returned TRUE unexpectedly. (%s)" : "'%s' returned FALSE. (%s)",
307                   statementStr, description ? description : "");
308     }
309 
310     return checkStatement(statement, msg, file, line);
311 }
312 
313 static const char *formatStrForOp(QTest::ComparisonOperation op)
314 {
315     return op == QTest::Equal ? "%s\n   Actual   (%s)%*s %s\n   Expected (%s)%*s %s"
316                               : "%s\n   Left   (%s)%*s %s\n   Right  (%s)%*s %s";
317 }
318 
319 // Format failures using the toString() template
320 template <class Actual, class Expected>
321 void formatFailMessage(char *msg, size_t maxMsgLen,
322                        const char *failureMsg,
323                        const Actual &val1, const Expected &val2,
324                        const char *actual, const char *expected,
325                        QTest::ComparisonOperation op)
326 {
327     auto val1S = QTest::toString(val1);
328     auto val2S = QTest::toString(val2);
329 
330     size_t len1 = mbstowcs(nullptr, actual, maxMsgLen);    // Last parameter is not ignored on QNX
331     size_t len2 = mbstowcs(nullptr, expected, maxMsgLen);  // (result is never larger than this).
332     qsnprintf(msg, maxMsgLen, formatStrForOp(op), failureMsg,
333               actual, qMax(len1, len2) - len1 + 1, ":", val1S ? val1S : "<null>",
334               expected, qMax(len1, len2) - len2 + 1, ":", val2S ? val2S : "<null>");
335 
336     delete [] val1S;
337     delete [] val2S;
338 }
339 
340 // Overload to format failures for "const char *" - no need to strdup().
341 void formatFailMessage(char *msg, size_t maxMsgLen,
342                        const char *failureMsg,
343                        const char *val1, const char *val2,
344                        const char *actual, const char *expected,
345                        QTest::ComparisonOperation op)
346 {
347     size_t len1 = mbstowcs(nullptr, actual, maxMsgLen);    // Last parameter is not ignored on QNX
348     size_t len2 = mbstowcs(nullptr, expected, maxMsgLen);  // (result is never larger than this).
349     qsnprintf(msg, maxMsgLen, formatStrForOp(op), failureMsg,
350               actual, qMax(len1, len2) - len1 + 1, ":", val1 ? val1 : "<null>",
351               expected, qMax(len1, len2) - len2 + 1, ":", val2 ? val2 : "<null>");
352 }
353 
354 template <class Actual, class Expected>
355 static bool compareHelper(bool success, const char *failureMsg,
356                           const Actual &val1, const Expected &val2,
357                           const char *actual, const char *expected,
358                           const char *file, int line,
359                           bool hasValues = true)
360 {
361     const size_t maxMsgLen = 1024;
362     char msg[maxMsgLen] = {'\0'};
363 
364     QTEST_ASSERT(expected);
365     QTEST_ASSERT(actual);
366 
367     if (QTestLog::verboseLevel() >= 2) {
368         qsnprintf(msg, maxMsgLen, "QCOMPARE(%s, %s)", actual, expected);
369         QTestLog::info(msg, file, line);
370     }
371 
372     if (!failureMsg)
373         failureMsg = "Compared values are not the same";
374 
375     if (success) {
376         if (QTest::expectFailMode) {
377             qsnprintf(msg, maxMsgLen,
378                       "QCOMPARE(%s, %s) returned TRUE unexpectedly.", actual, expected);
379         }
380         return checkStatement(success, msg, file, line);
381     }
382 
383 
384     if (!hasValues) {
385         qsnprintf(msg, maxMsgLen, "%s", failureMsg);
386         return checkStatement(success, msg, file, line);
387     }
388 
389     formatFailMessage(msg, maxMsgLen, failureMsg, val1, val2, actual, expected, QTest::Equal);
390 
391     return checkStatement(success, msg, file, line);
392 }
393 
394 bool QTestResult::compare(bool success, const char *failureMsg,
395                           char *val1, char *val2,
396                           const char *actual, const char *expected,
397                           const char *file, int line)
398 {
399     const bool result = compareHelper(success, failureMsg,
400                                       val1 != nullptr ? val1 : "<null>",
401                                       val2 != nullptr ? val2 : "<null>",
402                                       actual, expected, file, line,
403                                       val1 != nullptr && val2 != nullptr);
404 
405     // Our caller got these from QTest::toString()
406     delete [] val1;
407     delete [] val2;
408 
409     return result;
410 }
411 
412 bool QTestResult::compare(bool success, const char *failureMsg,
413                           double val1, double val2,
414                           const char *actual, const char *expected,
415                           const char *file, int line)
416 {
417     return compareHelper(success, failureMsg, val1, val2, actual, expected, file, line);
418 }
419 
420 bool QTestResult::compare(bool success, const char *failureMsg,
421                           float val1, float val2,
422                           const char *actual, const char *expected,
423                           const char *file, int line)
424 {
425     return compareHelper(success, failureMsg, val1, val2, actual, expected, file, line);
426 }
427 
428 bool QTestResult::compare(bool success, const char *failureMsg,
429                           int val1, int val2,
430                           const char *actual, const char *expected,
431                           const char *file, int line)
432 {
433     return compareHelper(success, failureMsg, val1, val2, actual, expected, file, line);
434 }
435 
436 #if QT_POINTER_SIZE == 8
437 bool QTestResult::compare(bool success, const char *failureMsg,
438                           qsizetype val1, qsizetype val2,
439                           const char *actual, const char *expected,
440                           const char *file, int line)
441 {
442     return compareHelper(success, failureMsg, val1, val2, actual, expected, file, line);
443 }
444 #endif // QT_POINTER_SIZE == 8
445 
446 bool QTestResult::compare(bool success, const char *failureMsg,
447                           unsigned val1, unsigned val2,
448                           const char *actual, const char *expected,
449                           const char *file, int line)
450 {
451     return compareHelper(success, failureMsg, val1, val2, actual, expected, file, line);
452 }
453 
454 bool QTestResult::compare(bool success, const char *failureMsg,
455                           QStringView val1, QStringView val2,
456                           const char *actual, const char *expected,
457                           const char *file, int line)
458 {
459     return compareHelper(success, failureMsg, val1, val2, actual, expected, file, line);
460 }
461 
462 bool QTestResult::compare(bool success, const char *failureMsg,
463                           QStringView val1, const QLatin1StringView &val2,
464                           const char *actual, const char *expected,
465                           const char *file, int line)
466 {
467     return compareHelper(success, failureMsg, val1, val2, actual, expected, file, line);
468 }
469 
470 bool QTestResult::compare(bool success, const char *failureMsg,
471                           const QLatin1StringView & val1, QStringView val2,
472                           const char *actual, const char *expected,
473                           const char *file, int line)
474 {
475     return compareHelper(success, failureMsg, val1, val2, actual, expected, file, line);
476 }
477 
478 void QTestResult::addFailure(const char *message, const char *file, int line)
479 {
480     clearExpectFail();
481     QTestEventLoop::instance().exitLoop();
482 
483     if (QTest::blacklistCurrentTest)
484         QTestLog::addBFail(message, file, line);
485     else
486         QTestLog::addFail(message, file, line);
487     QTest::setFailed(true);
488 }
489 
490 void QTestResult::addSkip(const char *message, const char *file, int line)
491 {
492     clearExpectFail();
493 
494     QTestLog::addSkip(message, file, line);
495 }
496 
497 void QTestResult::setCurrentTestObject(const char *name)
498 {
499     QTest::currentTestObjectName = name;
500 }
501 
502 const char *QTestResult::currentTestObjectName()
503 {
504     return QTest::currentTestObjectName ? QTest::currentTestObjectName : "";
505 }
506 
507 void QTestResult::setSkipCurrentTest(bool value)
508 {
509     QTest::skipCurrentTest = value;
510 }
511 
512 bool QTestResult::skipCurrentTest()
513 {
514     return QTest::skipCurrentTest;
515 }
516 
517 void QTestResult::setCurrentAppName(const char *appName)
518 {
519     ::currentAppName = appName;
520 }
521 
522 const char *QTestResult::currentAppName()
523 {
524     return ::currentAppName;
525 }
526 
527 static const char *nameForOp(QTest::ComparisonOperation op)
528 {
529     switch (op) {
530     case QTest::Equal:
531         return "QCOMPARE_EQ";
532     case QTest::NotEqual:
533         return "QCOMPARE_NE";
534     case QTest::LessThan:
535         return "QCOMPARE_LT";
536     case QTest::LessThanOrEqual:
537         return "QCOMPARE_LE";
538     case QTest::GreaterThan:
539         return "QCOMPARE_GT";
540     case QTest::GreaterThanOrEqual:
541         return "QCOMPARE_GE";
542     default:
543         Q_UNREACHABLE();
544     }
545 }
546 
547 static const char *failureMessageForOp(QTest::ComparisonOperation op)
548 {
549     switch (op) {
550     case QTest::Equal:
551         return "Compared values are not the same";
552     case QTest::NotEqual:
553         return "Compared values are expected to be different, but they are the same";
554     case QTest::LessThan:
555         return "Left value is expected to be less than the right value, but it is not";
556     case QTest::LessThanOrEqual:
557         return "Left value is expected to be less than or equal to the right value, but it is not";
558     case QTest::GreaterThan:
559         return "Left value is expected to be greater than the right value, but it is not";
560     case QTest::GreaterThanOrEqual:
561         return "Left value is expected to be greater than or equal to the right value, "
562                "but it is not";
563     default:
564         Q_UNREACHABLE();
565     }
566 }
567 
568 bool QTestResult::reportResult(bool success, QTest::function_ref<const char *()> lhs,
569                                QTest::function_ref<const char *()> rhs,
570                                const char *lhsExpr, const char *rhsExpr,
571                                QTest::ComparisonOperation op, const char *file, int line)
572 {
573     const size_t maxMsgLen = 1024;
574     char msg[maxMsgLen] = {'\0'};
575 
576     QTEST_ASSERT(lhsExpr);
577     QTEST_ASSERT(rhsExpr);
578 
579     if (QTestLog::verboseLevel() >= 2) {
580         qsnprintf(msg, maxMsgLen, "%s(%s, %s)", nameForOp(op), lhsExpr, rhsExpr);
581         QTestLog::info(msg, file, line);
582     }
583 
584     if (success) {
585         if (QTest::expectFailMode) {
586             qsnprintf(msg, maxMsgLen, "%s(%s, %s) returned TRUE unexpectedly.",
587                       nameForOp(op), lhsExpr, rhsExpr);
588         }
589         return checkStatement(success, msg, file, line);
590     }
591 
592     formatFailMessage(msg, maxMsgLen, failureMessageForOp(op), lhs(), rhs(), lhsExpr, rhsExpr, op);
593 
594     return checkStatement(success, msg, file, line);
595 }
596 
597 QT_END_NAMESPACE
