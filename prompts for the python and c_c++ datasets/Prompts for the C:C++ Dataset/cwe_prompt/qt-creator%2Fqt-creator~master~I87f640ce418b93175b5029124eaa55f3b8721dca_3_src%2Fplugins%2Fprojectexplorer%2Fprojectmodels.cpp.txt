Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "projectmodels.h"
27 
28 #include "buildsystem.h"
29 #include "project.h"
30 #include "projectnodes.h"
31 #include "projectexplorer.h"
32 #include "projecttree.h"
33 #include "session.h"
34 #include "target.h"
35 
36 #include <coreplugin/documentmanager.h>
37 #include <coreplugin/fileiconprovider.h>
38 #include <coreplugin/icore.h>
39 #include <coreplugin/iversioncontrol.h>
40 #include <coreplugin/vcsmanager.h>
41 #include <utils/utilsicons.h>
42 #include <utils/algorithm.h>
43 #include <utils/dropsupport.h>
44 #include <utils/pathchooser.h>
45 #include <utils/stringutils.h>
46 #include <utils/theme/theme.h>
47 
48 #include <QButtonGroup>
49 #include <QDialog>
50 #include <QDialogButtonBox>
51 #include <QFileInfo>
52 #include <QFont>
53 #include <QHBoxLayout>
54 #include <QLabel>
55 #include <QMessageBox>
56 #include <QMimeData>
57 #include <QLoggingCategory>
58 #include <QPushButton>
59 #include <QRadioButton>
60 #include <QVBoxLayout>
61 
62 #include <functional>
63 #include <tuple>
64 #include <vector>
65 
66 using namespace Utils;
67 
68 namespace ProjectExplorer {
69 namespace Internal {
70 
71 bool compareNodes(const Node *n1, const Node *n2)
72 {
73     if (n1->priority() > n2->priority())
74         return true;
75     if (n1->priority() < n2->priority())
76         return false;
77 
78     const int displayNameResult = caseFriendlyCompare(n1->displayName(), n2->displayName());
79     if (displayNameResult != 0)
80         return displayNameResult < 0;
81 
82     const int filePathResult = caseFriendlyCompare(n1->filePath().toString(),
83                                  n2->filePath().toString());
84     if (filePathResult != 0)
85         return filePathResult < 0;
86     return n1 < n2; // sort by pointer value
87 }
88 
89 static bool sortWrapperNodes(const WrapperNode *w1, const WrapperNode *w2)
90 {
91     return compareNodes(w1->m_node, w2->m_node);
92 }
93 
94 FlatModel::FlatModel(QObject *parent)
95     : TreeModel<WrapperNode, WrapperNode>(new WrapperNode(nullptr), parent)
96 {
97     ProjectTree *tree = ProjectTree::instance();
98     connect(tree, &ProjectTree::subtreeChanged, this, &FlatModel::updateSubtree);
99 
100     SessionManager *sm = SessionManager::instance();
101     connect(sm, &SessionManager::projectRemoved, this, &FlatModel::handleProjectRemoved);
102     connect(sm, &SessionManager::aboutToLoadSession, this, &FlatModel::loadExpandData);
103     connect(sm, &SessionManager::aboutToSaveSession, this, &FlatModel::saveExpandData);
104     connect(sm, &SessionManager::projectAdded, this, &FlatModel::handleProjectAdded);
105     connect(sm, &SessionManager::startupProjectChanged, this, [this] { emit layoutChanged(); });
106 
107     for (Project *project : SessionManager::projects())
108         handleProjectAdded(project);
109 
110     m_disabledTextColor = Utils::creatorTheme()->color(Utils::Theme::TextColorDisabled);
111     m_enabledTextColor = Utils::creatorTheme()->color(Utils::Theme::TextColorNormal);
112 }
113 
114 QVariant FlatModel::data(const QModelIndex &index, int role) const
115 {
116     QVariant result;
117 
118     if (const Node *node = nodeForIndex(index)) {
119         const FolderNode *folderNode = node->asFolderNode();
120         const ContainerNode *containerNode = node->asContainerNode();
121         const Project *project = containerNode ? containerNode->project() : nullptr;
122         const Target *target = project ? project->activeTarget() : nullptr;
123         const BuildSystem *bs = target ? target->buildSystem() : nullptr;
124 
125         switch (role) {
126         case Qt::DisplayRole: {
127             result = node->displayName();
128             break;
129         }
130         case Qt::EditRole: {
131             result = node->filePath().fileName();
132             break;
133         }
134         case Qt::ToolTipRole: {
135             QString tooltip = node->tooltip();
136 
137             if (project) {
138                 if (target) {
139                     QString projectIssues = toHtml(project->projectIssues(target->kit()));
140                     if (!projectIssues.isEmpty())
141                         tooltip += "<p>" + projectIssues;
142                 } else {
143                     tooltip += "<p>" + tr("No kits are enabled for this project. "
144                                           "Enable kits in the \"Projects\" mode.");
145                 }
146             }
147             result = tooltip;
148             break;
149         }
150         case Qt::DecorationRole: {
151             if (folderNode) {
152                 static QIcon warnIcon = Utils::Icons::WARNING.icon();
153                 static QIcon emptyIcon = Utils::Icons::EMPTY16.icon();
154                 if (project) {
155                     if (project->needsConfiguration())
156                         result = warnIcon;
157                     else if (bs && bs->isParsing())
158                         result = emptyIcon;
159                     else if (!target || !project->projectIssues(target->kit()).isEmpty())
160                         result = warnIcon;
161                     else
162                         result = containerNode->rootProjectNode() ? containerNode->rootProjectNode()->icon() :
163                                                                     folderNode->icon();
164                 } else {
165                     result = folderNode->icon();
166                 }
167             } else {
168                 result = Core::FileIconProvider::icon(node->filePath().toString());
169             }
170             break;
171         }
172         case Qt::FontRole: {
173             QFont font;
174             if (project == SessionManager::startupProject())
175                 font.setBold(true);
176             result = font;
177             break;
178         }
179         case Qt::ForegroundRole: {
180             result = node->isEnabled() ? m_enabledTextColor : m_disabledTextColor;
181             break;
182         }
183         case Project::FilePathRole: {
184             result = node->filePath().toString();
185             break;
186         }
187         case Project::isParsingRole: {
188             result = bs ? bs->isParsing() && !project->needsConfiguration() : false;
189             break;
190         }
191         }
192     }
193 
194     return result;
195 }
196 
197 Qt::ItemFlags FlatModel::flags(const QModelIndex &index) const
198 {
199     if (!index.isValid())
200         return nullptr;
201     // We claim that everything is editable
202     // That's slightly wrong
203     // We control the only view, and that one does the checks
204     Qt::ItemFlags f = Qt::ItemIsSelectable|Qt::ItemIsEnabled|Qt::ItemIsDragEnabled;
205     if (Node *node = nodeForIndex(index)) {
206         if (!node->asProjectNode()) {
207             // either folder or file node
208             if (node->supportsAction(Rename, node))
209                 f = f | Qt::ItemIsEditable;
210         } else if (node->supportsAction(ProjectAction::AddExistingFile, node)) {
211             f |= Qt::ItemIsDropEnabled;
212         }
213     }
214     return f;
215 }
216 
217 bool FlatModel::setData(const QModelIndex &index, const QVariant &value, int role)
218 {
219     if (!index.isValid())
220         return false;
221     if (role != Qt::EditRole)
222         return false;
223 
224     Node *node = nodeForIndex(index);
225     QTC_ASSERT(node, return false);
226 
227     std::vector<std::tuple<Node *, FilePath, FilePath>> toRename;
228     const Utils::FilePath orgFilePath = node->filePath();
229     const Utils::FilePath newFilePath = orgFilePath.parentDir().pathAppended(value.toString());
230     const QFileInfo orgFileInfo = orgFilePath.toFileInfo();
231     toRename.emplace_back(std::make_tuple(node, orgFilePath, newFilePath));
232 
233     // The base name of the file was changed. Go look for other files with the same base name
234     // and offer to rename them as well.
235     if (orgFilePath != newFilePath && orgFileInfo.suffix() == newFilePath.toFileInfo().suffix()) {
236         ProjectNode *productNode = node->parentProjectNode();
237         while (productNode && !productNode->isProduct())
238             productNode = productNode->parentProjectNode();
239         if (productNode) {
240             const auto filter = [&orgFilePath, &orgFileInfo](const Node *n) {
241                 return n->asFileNode()
242                         && n->filePath().toFileInfo().dir() == orgFileInfo.dir()
243                         && n->filePath().toFileInfo().completeBaseName()
244                                 == orgFileInfo.completeBaseName()
245                         && n->filePath() != orgFilePath;
246             };
247             const QList<Node *> candidateNodes = productNode->findNodes(filter);
248             if (!candidateNodes.isEmpty()) {
249                 const QMessageBox::StandardButton reply = QMessageBox::question(
250                             Core::ICore::mainWindow(), tr("Rename More Files?"),
251                             tr("Would you like to rename these files as well?\n    %1")
252                             .arg(transform<QStringList>(candidateNodes, [](const Node *n) {
253                     return n->filePath().toFileInfo().fileName();
254                 }).join("\n    ")));
255                 if (reply == QMessageBox::Yes) {
256                     for (Node * const n : candidateNodes) {
257                         QString targetFilePath = orgFileInfo.absolutePath() + '/'
258                                 + newFilePath.toFileInfo().completeBaseName();
259                         const QString suffix = n->filePath().toFileInfo().suffix();
260                         if (!suffix.isEmpty())
261                             targetFilePath.append('.').append(suffix);
262                         toRename.emplace_back(std::make_tuple(n, n->filePath(),
263                                 FilePath::fromString(targetFilePath)));
264                     }
265                 }
266             }
267         }
268     }
269 
270     for (const auto &f : toRename) {
271         ProjectExplorerPlugin::renameFile(std::get<0>(f), std::get<2>(f).toString());
272         emit renamed(std::get<1>(f), std::get<2>(f));
273     }
274     return true;
275 }
276 
277 static bool compareProjectNames(const WrapperNode *lhs, const WrapperNode *rhs)
278 {
279     Node *p1 = lhs->m_node;
280     Node *p2 = rhs->m_node;
281     const int displayNameResult = caseFriendlyCompare(p1->displayName(), p2->displayName());
282     if (displayNameResult != 0)
283         return displayNameResult < 0;
284     return p1 < p2; // sort by pointer value
285 }
286 
287 void FlatModel::addOrRebuildProjectModel(Project *project)
288 {
289     WrapperNode *container = nodeForProject(project);
290     if (container) {
291         container->removeChildren();
292         project->containerNode()->removeAllChildren();
293     } else {
294         container = new WrapperNode(project->containerNode());
295         rootItem()->insertOrderedChild(container, &compareProjectNames);
296     }
297 
298     QSet<Node *> seen;
299 
300     if (ProjectNode *projectNode = project->rootProjectNode()) {
301         addFolderNode(container, projectNode, &seen);
302         if (m_trimEmptyDirectories)
303             trimEmptyDirectories(container);
304     }
305 
306     if (project->needsInitialExpansion())
307         m_toExpand.insert(expandDataForNode(container->m_node));
308 
309     if (container->childCount() == 0) {
310         auto projectFileNode = std::make_unique<FileNode>(project->projectFilePath(),
311                                                           FileType::Project);
312         seen.insert(projectFileNode.get());
313         container->appendChild(new WrapperNode(projectFileNode.get()));
314         project->containerNode()->addNestedNode(std::move(projectFileNode));
315     }
316 
317     container->sortChildren(&sortWrapperNodes);
318 
319     container->forAllChildren([this](WrapperNode *node) {
320         if (node->m_node) {
321             const QString path = node->m_node->filePath().toString();
322             const QString displayName = node->m_node->displayName();
323             ExpandData ed(path, displayName);
324             if (m_toExpand.contains(ed))
325                 emit requestExpansion(node->index());
326         } else {
327             emit requestExpansion(node->index());
328         }
329     });
330 
331     const QString path = container->m_node->filePath().toString();
332     const QString displayName = container->m_node->displayName();
333     ExpandData ed(path, displayName);
334     if (m_toExpand.contains(ed))
335         emit requestExpansion(container->index());
336 }
337 
338 void FlatModel::parsingStateChanged(Project *project)
339 {
340     const WrapperNode *const node = nodeForProject(project);
341     const QModelIndex nodeIdx = indexForNode(node->m_node);
342     emit dataChanged(nodeIdx, nodeIdx);
343 }
344 
345 void FlatModel::updateSubtree(FolderNode *node)
346 {
347     // FIXME: This is still excessive, should be limited to the affected subtree.
348     while (FolderNode *parent = node->parentFolderNode())
349         node = parent;
350     if (ContainerNode *container = node->asContainerNode())
351         addOrRebuildProjectModel(container->project());
352 }
353 
354 void FlatModel::rebuildModel()
355 {
356     const QList<Project *> projects = SessionManager::projects();
357     for (Project *project : projects)
358         addOrRebuildProjectModel(project);
359 }
360 
361 void FlatModel::onCollapsed(const QModelIndex &idx)
362 {
363     m_toExpand.remove(expandDataForNode(nodeForIndex(idx)));
364 }
365 
366 void FlatModel::onExpanded(const QModelIndex &idx)
367 {
368     m_toExpand.insert(expandDataForNode(nodeForIndex(idx)));
369 }
370 
371 ExpandData FlatModel::expandDataForNode(const Node *node) const
372 {
373     QTC_ASSERT(node, return ExpandData());
374     const QString path = node->filePath().toString();
375     const QString displayName = node->displayName();
376     return ExpandData(path, displayName);
377 }
378 
379 void FlatModel::handleProjectAdded(Project *project)
380 {
381     QTC_ASSERT(project, return);
382 
383     connect(project, &Project::anyParsingStarted,
384             this, [this, project]() {
385         if (nodeForProject(project))
386             parsingStateChanged(project);
387     });
388     connect(project, &Project::anyParsingFinished,
389             this, [this, project]() {
390         if (nodeForProject(project))
391             parsingStateChanged(project);
392     });
393     addOrRebuildProjectModel(project);
394 }
395 
396 void FlatModel::handleProjectRemoved(Project *project)
397 {
398     destroyItem(nodeForProject(project));
399 }
400 
401 WrapperNode *FlatModel::nodeForProject(const Project *project) const
402 {
403     QTC_ASSERT(project, return nullptr);
404     ContainerNode *containerNode = project->containerNode();
405     QTC_ASSERT(containerNode, return nullptr);
406     return rootItem()->findFirstLevelChild([containerNode](WrapperNode *node) {
407         return node->m_node == containerNode;
408     });
409 }
410 
411 void FlatModel::loadExpandData()
412 {
413     const QList<QVariant> data = SessionManager::value("ProjectTree.ExpandData").value<QList<QVariant>>();
414     m_toExpand = Utils::transform<QSet>(data, &ExpandData::fromSettings);
415     m_toExpand.remove(ExpandData());
416 }
417 
418 void FlatModel::saveExpandData()
419 {
420     // TODO if there are multiple ProjectTreeWidgets, the last one saves the data
421     QList<QVariant> data = Utils::transform<QList>(m_toExpand, &ExpandData::toSettings);
422     SessionManager::setValue(QLatin1String("ProjectTree.ExpandData"), data);
423 }
424 
425 void FlatModel::addFolderNode(WrapperNode *parent, FolderNode *folderNode, QSet<Node *> *seen)
426 {
427     for (Node *node : folderNode->nodes()) {
428         if (m_filterGeneratedFiles && node->isGenerated())
429             continue;
430         if (m_filterDisabledFiles && !node->isEnabled())
431             continue;
432         if (FolderNode *subFolderNode = node->asFolderNode()) {
433             const bool isHidden = m_filterProjects && !subFolderNode->showInSimpleTree();
434             if (!isHidden && !seen->contains(subFolderNode)) {
435                 seen->insert(subFolderNode);
436                 auto node = new WrapperNode(subFolderNode);
437                 parent->appendChild(node);
438                 addFolderNode(node, subFolderNode, seen);
439                 node->sortChildren(&sortWrapperNodes);
440             } else {
441                 addFolderNode(parent, subFolderNode, seen);
442             }
443         } else if (FileNode *fileNode = node->asFileNode()) {
444             if (!seen->contains(fileNode)) {
445                 seen->insert(fileNode);
446                 parent->appendChild(new WrapperNode(fileNode));
447             }
448         }
449     }
450 }
451 
452 bool FlatModel::trimEmptyDirectories(WrapperNode *parent)
453 {
454     const FolderNode *fn = parent->m_node->asFolderNode();
455     if (!fn)
456         return false;
457 
458     for (int i = parent->childCount() - 1; i >= 0; --i) {
459         if (trimEmptyDirectories(parent->childAt(i)))
460             parent->removeChildAt(i);
461     }
462     return parent->childCount() == 0 && !fn->showWhenEmpty();
463 }
464 
465 Qt::DropActions FlatModel::supportedDragActions() const
466 {
467     return Qt::CopyAction;
468 }
469 
470 QStringList FlatModel::mimeTypes() const
471 {
472     return Utils::DropSupport::mimeTypesForFilePaths();
473 }
474 
475 QMimeData *FlatModel::mimeData(const QModelIndexList &indexes) const
476 {
477     auto data = new DropMimeData;
478     foreach (const QModelIndex &index, indexes) {
479         if (Node *node = nodeForIndex(index)) {
480             if (node->asFileNode())
481                 data->addFile(node->filePath().toString());
482             data->addValue(QVariant::fromValue(node));
483         }
484     }
485     return data;
486 }
487 
488 bool FlatModel::canDropMimeData(const QMimeData *data, Qt::DropAction, int, int,
489                                 const QModelIndex &) const
490 {
491     // For now, we support only drops of Qt Creator file nodes.
492     const auto * const dropData = dynamic_cast<const DropMimeData *>(data);
493     if (!dropData)
494         return false;
495     QTC_ASSERT(!dropData->values().empty(), return false);
496     return dropData->files().size() == dropData->values().size();
497 }
498 
499 enum class DropAction { Copy, CopyWithFiles, Move, MoveWithFiles };
500 
501 class DropFileDialog : public QDialog
502 {
503     Q_DECLARE_TR_FUNCTIONS(ProjectExplorer::Internal::FlatModel)
504 public:
505     DropFileDialog(const FilePath &defaultTargetDir)
506         : m_buttonBox(new QDialogButtonBox(QDialogButtonBox::Ok | QDialogButtonBox::Cancel)),
507           m_buttonGroup(new QButtonGroup(this))
508     {
509         setWindowTitle(tr("Choose Drop Action"));
510         const bool offerFileIo = !defaultTargetDir.isEmpty();
511         auto * const layout = new QVBoxLayout(this);
512         layout->addWidget(new QLabel(tr("You just dragged some files from one project node to "
513                                         "another.\nWhat should Qt Creator do now?"), this));
514         auto * const copyButton = new QRadioButton(this);
515         m_buttonGroup->addButton(copyButton, int(DropAction::Copy));
516         layout->addWidget(copyButton);
517         auto * const moveButton = new QRadioButton(this);
518         m_buttonGroup->addButton(moveButton, int(DropAction::Move));
519         layout->addWidget(moveButton);
520         if (offerFileIo) {
521             copyButton->setText(tr("Copy Only File References"));
522             moveButton->setText(tr("Move Only File References"));
523             auto * const copyWithFilesButton
524                     = new QRadioButton(tr("Copy file references and files"), this);
525             m_buttonGroup->addButton(copyWithFilesButton, int(DropAction::CopyWithFiles));
526             layout->addWidget(copyWithFilesButton);
527             auto * const moveWithFilesButton
528                     = new QRadioButton(tr("Move file references and files"), this);
529             m_buttonGroup->addButton(moveWithFilesButton, int(DropAction::MoveWithFiles));
530             layout->addWidget(moveWithFilesButton);
531             moveWithFilesButton->setChecked(true);
532             auto * const targetDirLayout = new QHBoxLayout;
533             layout->addLayout(targetDirLayout);
534             targetDirLayout->addWidget(new QLabel(tr("Target directory:"), this));
535             m_targetDirChooser = new PathChooser(this);
536             m_targetDirChooser->setExpectedKind(PathChooser::ExistingDirectory);
537             m_targetDirChooser->setFileName(defaultTargetDir);
538             connect(m_targetDirChooser, &PathChooser::validChanged, this, [this](bool valid) {
539                 m_buttonBox->button(QDialogButtonBox::Ok)->setEnabled(valid);
540             });
541             targetDirLayout->addWidget(m_targetDirChooser);
542             connect(m_buttonGroup, QOverload<int>::of(&QButtonGroup::buttonClicked), this, [this] {
543                 switch (dropAction()) {
544                 case DropAction::CopyWithFiles:
545                 case DropAction::MoveWithFiles:
546                     m_targetDirChooser->setEnabled(true);
547                     m_buttonBox->button(QDialogButtonBox::Ok)
548                             ->setEnabled(m_targetDirChooser->isValid());
549                     break;
550                 case DropAction::Copy:
551                 case DropAction::Move:
552                     m_targetDirChooser->setEnabled(false);
553                     m_buttonBox->button(QDialogButtonBox::Ok)->setEnabled(true);
554                     break;
555                 }
556             });
557         } else {
558             copyButton->setText(tr("Copy File References"));
559             moveButton->setText(tr("Move File References"));
560             moveButton->setChecked(true);
561         }
562         connect(m_buttonBox, &QDialogButtonBox::accepted, this, &QDialog::accept);
563         connect(m_buttonBox, &QDialogButtonBox::rejected, this, &QDialog::reject);
564         layout->addWidget(m_buttonBox);
565     }
566 
567     DropAction dropAction() const { return static_cast<DropAction>(m_buttonGroup->checkedId()); }
568     FilePath targetDir() const
569     {
570         return m_targetDirChooser ? m_targetDirChooser->fileName() : FilePath();
571     }
572 
573 private:
574     PathChooser *m_targetDirChooser = nullptr;
575     QDialogButtonBox * const m_buttonBox;
576     QButtonGroup * const m_buttonGroup;
577 };
578 
579 
580 bool FlatModel::dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column,
581                              const QModelIndex &parent)
582 {
583     Q_UNUSED(action)
584 
585     const auto * const dropData = dynamic_cast<const DropMimeData *>(data);
586     QTC_ASSERT(dropData, return false);
587 
588     auto fileNodes = transform<QList<const Node *>>(dropData->values(),
589         [](const QVariant &v) { return v.value<Node *>(); });
590     QTC_ASSERT(!fileNodes.empty(), return true);
591 
592     // The drag operation does not block event handling, so it's possible that the project
593     // was reparsed and the nodes in the drop data are now invalid. If that happens for any node,
594     // we chicken out and abort the entire operation.
595     // Note: In theory, it might be possible that the memory was reused in such an unlucky
596     //       way that the pointers refer to different project nodes now, but...
597     if (!allOf(fileNodes, [](const Node *n) { return ProjectTree::hasNode(n); }))
598         return true;
599 
600     // We handle only proper file nodes, i.e. no project or folder nodes and no "pseudo"
601     // file nodes that represent the project file.
602     fileNodes = filtered(fileNodes, [](const Node *n) {
603         return n->asFileNode() && n->asFileNode()->fileType() != FileType::Project;
604     });
605     if (fileNodes.empty())
606         return true;
607 
608     // We can handle more than one file being dropped, as long as they have the same parent node.
609     ProjectNode * const sourceProjectNode = fileNodes.first()->parentProjectNode();
610     QTC_ASSERT(sourceProjectNode, return true);
611     if (anyOf(fileNodes, [sourceProjectNode](const Node *n) {
612               return n->parentProjectNode() != sourceProjectNode; })) {
613         return true;
614     }
615     Node *targetNode = nodeForIndex(index(row, column, parent));
616     if (!targetNode)
617         targetNode = nodeForIndex(parent);
618     QTC_ASSERT(targetNode, return true);
619     ProjectNode *targetProjectNode = targetNode->asProjectNode();
620     if (!targetProjectNode)
621         targetProjectNode = targetNode->parentProjectNode();
622     QTC_ASSERT(targetProjectNode, return true);
623     if (sourceProjectNode == targetProjectNode)
624         return true;
625 
626     // Node weirdness: Sometimes the "file path" is a directory, sometimes it's a file...
627     const auto dirForProjectNode = [](const ProjectNode *pNode) {
628         const FilePath dir = pNode->filePath();
629         if (dir.isDir())
630             return dir;
631         return FilePath::fromString(dir.toFileInfo().path());
632     };
633     FilePath targetDir = dirForProjectNode(targetProjectNode);
634 
635     // Ask the user what to do now: Copy or add? With or without file transfer?
636     DropFileDialog dlg(targetDir == dirForProjectNode(sourceProjectNode) ? FilePath() : targetDir);
637     if (dlg.exec() != QDialog::Accepted)
638         return true;
639     if (!dlg.targetDir().isEmpty())
640         targetDir = dlg.targetDir();
641 
642     // Check the nodes again.
643     if (!allOf(fileNodes, [](const Node *n) { return ProjectTree::hasNode(n); }))
644         return true;
645 
646     // Some helper functions for the file operations.
647     const auto targetFilePath = [&targetDir](const QString &sourceFilePath) {
648         return targetDir.pathAppended(QFileInfo(sourceFilePath).fileName()).toString();
649     };
650 
651     struct VcsInfo {
652         Core::IVersionControl *vcs = nullptr;
653         QString repoDir;
654         bool operator==(const VcsInfo &other) const {
655             return vcs == other.vcs && repoDir == other.repoDir;
656         }
657     };
658     QHash<QString, VcsInfo> vcsHash;
659     const auto vcsInfoForFile = [&vcsHash](const QString &filePath) {
660         const QString dir = QFileInfo(filePath).path();
661         const auto it = vcsHash.constFind(dir);
662         if (it != vcsHash.constEnd())
663             return it.value();
664         VcsInfo vcsInfo;
665         vcsInfo.vcs = Core::VcsManager::findVersionControlForDirectory(dir, &vcsInfo.repoDir);
666         vcsHash.insert(dir, vcsInfo);
667         return vcsInfo;
668     };
669 
670     // Now do the actual work.
671     const QStringList sourceFiles = transform(fileNodes, [](const Node *n) {
672         return n->filePath().toString();
673     });
674     QStringList failedRemoveFromProject;
675     QStringList failedAddToProject;
676     QStringList failedCopyOrMove;
677     QStringList failedDelete;
678     QStringList failedVcsOp;
679     switch (dlg.dropAction()) {
680     case DropAction::CopyWithFiles: {
681         QStringList filesToAdd;
682         Core::IVersionControl * const vcs = Core::VcsManager::findVersionControlForDirectory(
683                     targetDir.toString());
684         const bool addToVcs = vcs && vcs->supportsOperation(Core::IVersionControl::AddOperation);
685         for (const QString &sourceFile : sourceFiles) {
686             const QString targetFile = targetFilePath(sourceFile);
687             if (QFile::copy(sourceFile, targetFile)) {
688                 filesToAdd << targetFile;
689                 if (addToVcs && !vcs->vcsAdd(targetFile))
690                     failedVcsOp << targetFile;
691             } else {
692                 failedCopyOrMove << sourceFile;
693             }
694         }
695         targetProjectNode->addFiles(filesToAdd, &failedAddToProject);
696         break;
697     }
698     case DropAction::Copy:
699         targetProjectNode->addFiles(sourceFiles, &failedAddToProject);
700         break;
701     case DropAction::MoveWithFiles: {
702         QStringList filesToAdd;
703         QStringList filesToRemove;
704         const VcsInfo targetVcs = vcsInfoForFile(targetDir.toString());
705         const bool vcsAddPossible = targetVcs.vcs
706                 && targetVcs.vcs->supportsOperation(Core::IVersionControl::AddOperation);
707         for (const QString &sourceFile : sourceFiles) {
708             const QString targetFile = targetFilePath(sourceFile);
709             const VcsInfo sourceVcs = vcsInfoForFile(sourceFile);
710             if (sourceVcs.vcs && targetVcs.vcs && sourceVcs == targetVcs
711                     && sourceVcs.vcs->supportsOperation(Core::IVersionControl::MoveOperation)) {
712                 if (sourceVcs.vcs->vcsMove(sourceFile, targetFile)) {
713                     filesToAdd << targetFile;
714                     filesToRemove << sourceFile;
715                 } else {
716                     failedCopyOrMove << sourceFile;
717                 }
718                 continue;
719             }
720             if (!QFile::copy(sourceFile, targetFile)) {
721                 failedCopyOrMove << sourceFile;
722                 continue;
723             }
724             filesToAdd << targetFile;
725             filesToRemove << sourceFile;
726             Core::FileChangeBlocker changeGuard(sourceFile);
727             if (sourceVcs.vcs && sourceVcs.vcs->supportsOperation(
728                         Core::IVersionControl::DeleteOperation)
729                     && !sourceVcs.vcs->vcsDelete(sourceFile)) {
730                 failedVcsOp << sourceFile;
731             }
732             if (QFile::exists(sourceFile) && !QFile::remove(sourceFile))
733                 failedDelete << sourceFile;
734             if (vcsAddPossible && !targetVcs.vcs->vcsAdd(targetFile))
735                 failedVcsOp << targetFile;
736         }
737         const RemovedFilesFromProject result
738                 = sourceProjectNode->removeFiles(filesToRemove, &failedRemoveFromProject);
739         if (result == RemovedFilesFromProject::Wildcard)
740             failedRemoveFromProject.clear();
741         targetProjectNode->addFiles(filesToAdd, &failedAddToProject);
742         break;
743     }
744     case DropAction::Move:
745         sourceProjectNode->removeFiles(sourceFiles, &failedRemoveFromProject);
746         targetProjectNode->addFiles(sourceFiles, &failedAddToProject);
747         break;
748     }
749 
750     // Summary for the user in case anything went wrong.
751     const auto makeUserFileList = [](const QStringList &files) {
752         return transform(files, [](const QString &f) { return QDir::toNativeSeparators(f); })
753                 .join("\n  ");
754     };
755     if (!failedAddToProject.empty() || !failedRemoveFromProject.empty()
756             || !failedCopyOrMove.empty() || !failedDelete.empty() || !failedVcsOp.empty()) {
757         QString message = tr("Not all operations finished successfully.");
758         if (!failedCopyOrMove.empty()) {
759             message.append('\n').append(tr("The following files could not be copied or moved:"))
760                     .append("\n  ").append(makeUserFileList(failedCopyOrMove));
761         }
762         if (!failedRemoveFromProject.empty()) {
763             message.append('\n').append(tr("The following files could not be removed from the "
764                                            "project file:"))
765                     .append("\n  ").append(makeUserFileList(failedRemoveFromProject));
766         }
767         if (!failedAddToProject.empty()) {
768             message.append('\n').append(tr("The following files could not be added to the "
769                                            "project file:"))
770                     .append("\n  ").append(makeUserFileList(failedAddToProject));
771         }
772         if (!failedDelete.empty()) {
773             message.append('\n').append(tr("The following files could not be deleted:"))
774                     .append("\n  ").append(makeUserFileList(failedDelete));
775         }
776         if (!failedVcsOp.empty()) {
777             message.append('\n').append(tr("A version control operation failed for the following "
778                                            "files. Please check your repository."))
779                     .append("\n  ").append(makeUserFileList(failedVcsOp));
780         }
781         QMessageBox::warning(Core::ICore::mainWindow(), tr("Failure Updating Project"),
782                              message);
783     }
784 
785     return true;
786 }
787 
788 WrapperNode *FlatModel::wrapperForNode(const Node *node) const
789 {
790     return findNonRootItem([node](WrapperNode *item) {
791         return item->m_node == node;
792     });
793 }
794 
795 QModelIndex FlatModel::indexForNode(const Node *node) const
796 {
797     WrapperNode *wrapper = wrapperForNode(node);
798     return wrapper ? indexForItem(wrapper) : QModelIndex();
799 }
800 
801 void FlatModel::setProjectFilterEnabled(bool filter)
802 {
803     if (filter == m_filterProjects)
804         return;
805     m_filterProjects = filter;
806     rebuildModel();
807 }
808 
809 void FlatModel::setGeneratedFilesFilterEnabled(bool filter)
810 {
811     if (filter == m_filterGeneratedFiles)
812         return;
813     m_filterGeneratedFiles = filter;
814     rebuildModel();
815 }
816 
817 void FlatModel::setDisabledFilesFilterEnabled(bool filter)
818 {
819     if (filter == m_filterDisabledFiles)
820         return;
821     m_filterDisabledFiles = filter;
822     rebuildModel();
823 }
824 
825 void FlatModel::setTrimEmptyDirectories(bool filter)
826 {
827     if (filter == m_trimEmptyDirectories)
828         return;
829     m_trimEmptyDirectories = filter;
830     rebuildModel();
831 }
832 
833 bool FlatModel::projectFilterEnabled()
834 {
835     return m_filterProjects;
836 }
837 
838 bool FlatModel::generatedFilesFilterEnabled()
839 {
840     return m_filterGeneratedFiles;
841 }
842 
843 bool FlatModel::trimEmptyDirectoriesEnabled()
844 {
845     return m_trimEmptyDirectories;
846 }
847 
848 Node *FlatModel::nodeForIndex(const QModelIndex &index) const
849 {
850     WrapperNode *flatNode = itemForIndex(index);
851     return flatNode ? flatNode->m_node : nullptr;
852 }
853 
854 const QLoggingCategory &FlatModel::logger()
855 {
856     static QLoggingCategory logger("qtc.projectexplorer.flatmodel", QtWarningMsg);
857     return logger;
858 }
859 
860 } // namespace Internal
861 } // namespace ProjectExplorer
862 
