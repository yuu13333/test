Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "settingsdialog.h"
27 
28 #include <coreplugin/icore.h>
29 #include <coreplugin/dialogs/ioptionspage.h>
30 #include <coreplugin/iwizardfactory.h>
31 
32 #include <utils/algorithm.h>
33 #include <utils/hostosinfo.h>
34 #include <utils/fancylineedit.h>
35 #include <utils/qtcassert.h>
36 
37 #include <QApplication>
38 #include <QDialog>
39 #include <QDialogButtonBox>
40 #include <QEventLoop>
41 #include <QGridLayout>
42 #include <QHBoxLayout>
43 #include <QIcon>
44 #include <QLabel>
45 #include <QListView>
46 #include <QPointer>
47 #include <QPushButton>
48 #include <QResizeEvent>
49 #include <QScrollArea>
50 #include <QScrollBar>
51 #include <QSet>
52 #include <QSettings>
53 #include <QSortFilterProxyModel>
54 #include <QSpacerItem>
55 #include <QStackedLayout>
56 #include <QStyle>
57 #include <QStyledItemDelegate>
58 
59 static const char pageKeyC[] = "General/LastPreferencePage";
60 const int categoryIconSize = 24;
61 
62 namespace std {
63 template<>
64 struct default_delete<QEventLoop> {
65     void operator()(QEventLoop* p) { p->exit(); delete p; } // exit event loop
66 };
67 } // namespace std
68 
69 namespace Core {
70 namespace Internal {
71 
72 bool optionsPageLessThan(const IOptionsPage *p1, const IOptionsPage *p2)
73 {
74     if (p1->category() != p2->category())
75         return p1->category().alphabeticallyBefore(p2->category());
76     return p1->id().alphabeticallyBefore(p2->id());
77 }
78 
79 static inline QList<IOptionsPage*> sortedOptionsPages()
80 {
81     QList<IOptionsPage*> rc = IOptionsPage::allOptionsPages();
82     std::stable_sort(rc.begin(), rc.end(), optionsPageLessThan);
83     return rc;
84 }
85 
86 // ----------- Category model
87 
88 class Category
89 {
90 public:
91     bool findPageById(const Id id, int *pageIndex) const
92     {
93         *pageIndex = Utils::indexOf(pages, Utils::equal(&IOptionsPage::id, id));
94         return *pageIndex != -1;
95     }
96 
97     Id id;
98     int index = -1;
99     QString displayName;
100     QIcon icon;
101     QList<IOptionsPage *> pages;
102     QList<IOptionsPageProvider *> providers;
103     bool providerPagesCreated = false;
104     QTabWidget *tabWidget = nullptr;
105 };
106 
107 class CategoryModel : public QAbstractListModel
108 {
109 public:
110     CategoryModel();
111     ~CategoryModel();
112 
113     int rowCount(const QModelIndex &parent = QModelIndex()) const override;
114     QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;
115 
116     void setPages(const QList<IOptionsPage*> &pages,
117                   const QList<IOptionsPageProvider *> &providers);
118     void ensurePages(Category *category);
119     const QList<Category*> &categories() const { return m_categories; }
120 
121 private:
122     Category *findCategoryById(Id id);
123 
124     QList<Category*> m_categories;
125     QSet<Id> m_pageIds;
126     QIcon m_emptyIcon;
127 };
128 
129 CategoryModel::CategoryModel()
130 {
131     QPixmap empty(categoryIconSize, categoryIconSize);
132     empty.fill(Qt::transparent);
133     m_emptyIcon = QIcon(empty);
134 }
135 
136 CategoryModel::~CategoryModel()
137 {
138     qDeleteAll(m_categories);
139 }
140 
141 int CategoryModel::rowCount(const QModelIndex &parent) const
142 {
143     return parent.isValid() ? 0 : m_categories.size();
144 }
145 
146 QVariant CategoryModel::data(const QModelIndex &index, int role) const
147 {
148     switch (role) {
149     case Qt::DisplayRole:
150         return m_categories.at(index.row())->displayName;
151     case Qt::DecorationRole: {
152             QIcon icon = m_categories.at(index.row())->icon;
153             if (icon.isNull())
154                 icon = m_emptyIcon;
155             return icon;
156         }
157     }
158 
159     return QVariant();
160 }
161 
162 void CategoryModel::setPages(const QList<IOptionsPage*> &pages,
163                              const QList<IOptionsPageProvider *> &providers)
164 {
165     beginResetModel();
166 
167     // Clear any previous categories
168     qDeleteAll(m_categories);
169     m_categories.clear();
170     m_pageIds.clear();
171 
172     // Put the pages in categories
173     foreach (IOptionsPage *page, pages) {
174         QTC_ASSERT(!m_pageIds.contains(page->id()),
175                    qWarning("duplicate options page id '%s'", qPrintable(page->id().toString())));
176         m_pageIds.insert(page->id());
177         const Id categoryId = page->category();
178         Category *category = findCategoryById(categoryId);
179         if (!category) {
180             category = new Category;
181             category->id = categoryId;
182             category->tabWidget = 0;
183             category->index = -1;
184             m_categories.append(category);
185         }
186         if (category->displayName.isEmpty())
187             category->displayName = page->displayCategory();
188         if (category->icon.isNull())
189             category->icon = page->categoryIcon();
190         category->pages.append(page);
191     }
192 
193     foreach (IOptionsPageProvider *provider, providers) {
194         const Id categoryId = provider->category();
195         Category *category = findCategoryById(categoryId);
196         if (!category) {
197             category = new Category;
198             category->id = categoryId;
199             category->tabWidget = 0;
200             category->index = -1;
201             m_categories.append(category);
202         }
203         if (category->displayName.isEmpty())
204             category->displayName = provider->displayCategory();
205         if (category->icon.isNull())
206             category->icon = provider->categoryIcon();
207         category->providers.append(provider);
208     }
209 
210     Utils::sort(m_categories, [](const Category *c1, const Category *c2) {
211        return c1->id.alphabeticallyBefore(c2->id);
212     });
213     endResetModel();
214 }
215 
216 void CategoryModel::ensurePages(Category *category)
217 {
218     if (!category->providerPagesCreated) {
219         QList<IOptionsPage *> createdPages;
220         foreach (const IOptionsPageProvider *provider, category->providers)
221             createdPages += provider->pages();
222 
223         // check for duplicate ids
224         foreach (IOptionsPage *page, createdPages) {
225             QTC_ASSERT(!m_pageIds.contains(page->id()),
226                        qWarning("duplicate options page id '%s'", qPrintable(page->id().toString())));
227         }
228 
229         category->pages += createdPages;
230         category->providerPagesCreated = true;
231         std::stable_sort(category->pages.begin(), category->pages.end(), optionsPageLessThan);
232     }
233 }
234 
235 Category *CategoryModel::findCategoryById(Id id)
236 {
237     for (int i = 0; i < m_categories.size(); ++i) {
238         Category *category = m_categories.at(i);
239         if (category->id == id)
240             return category;
241     }
242 
243     return 0;
244 }
245 
246 // ----------- Category filter model
247 
248 /**
249  * A filter model that returns true for each category node that has pages that
250  * match the search string.
251  */
252 class CategoryFilterModel : public QSortFilterProxyModel
253 {
254 public:
255     CategoryFilterModel() {}
256 
257 protected:
258     bool filterAcceptsRow(int sourceRow, const QModelIndex &sourceParent) const override;
259 };
260 
261 bool CategoryFilterModel::filterAcceptsRow(int sourceRow, const QModelIndex &sourceParent) const
262 {
263     // Regular contents check, then check page-filter.
264     if (QSortFilterProxyModel::filterAcceptsRow(sourceRow, sourceParent))
265         return true;
266 
267     const QString pattern = filterRegExp().pattern();
268     const CategoryModel *cm = static_cast<CategoryModel*>(sourceModel());
269     const Category *category = cm->categories().at(sourceRow);
270     for (const IOptionsPage *page : category->pages) {
271         if (page->displayCategory().contains(pattern, Qt::CaseInsensitive)
272                 || page->displayName().contains(pattern, Qt::CaseInsensitive)
273                 || page->matches(pattern))
274             return true;
275     }
276 
277     if (!category->providerPagesCreated) {
278         for (const IOptionsPageProvider *provider : category->providers) {
279             if (provider->matches(pattern))
280                 return true;
281         }
282     }
283 
284     return false;
285 }
286 
287 // ----------- Category list view
288 
289 class CategoryListViewDelegate : public QStyledItemDelegate
290 {
291 public:
292     explicit CategoryListViewDelegate(QObject *parent) : QStyledItemDelegate(parent) {}
293 
294     QSize sizeHint(const QStyleOptionViewItem &option, const QModelIndex &index) const
295     {
296         QSize size = QStyledItemDelegate::sizeHint(option, index);
297         size.setHeight(qMax(size.height(), 32));
298         return size;
299     }
300 };
301 
302 /**
303  * Special version of a QListView that has the width of the first column as
304  * minimum size.
305  */
306 class CategoryListView : public QListView
307 {
308 public:
309     CategoryListView()
310     {
311         setSizePolicy(QSizePolicy::MinimumExpanding, QSizePolicy::Expanding);
312         setItemDelegate(new CategoryListViewDelegate(this));
313         setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
314     }
315 
316     QSize sizeHint() const final
317     {
318         int width = sizeHintForColumn(0) + frameWidth() * 2 + 5;
319         width += verticalScrollBar()->sizeHint().width();
320         return QSize(width, 100);
321     }
322 
323     // QListView installs a event filter on its scrollbars
324     bool eventFilter(QObject *obj, QEvent *event) final
325     {
326         if (obj == verticalScrollBar()
327                 && (event->type() == QEvent::Show || event->type() == QEvent::Hide))
328             updateGeometry();
329         return QListView::eventFilter(obj, event);
330     }
331 };
332 
333 // ----------- SmartScrollArea
334 
335 class SmartScrollArea : public QScrollArea
336 {
337 public:
338     explicit SmartScrollArea(QWidget *parent)
339         : QScrollArea(parent)
340     {
341         setFrameStyle(QFrame::NoFrame | QFrame::Plain);
342         viewport()->setAutoFillBackground(false);
343         setWidgetResizable(true);
344     }
345 private:
346     void resizeEvent(QResizeEvent *event) final
347     {
348         QWidget *inner = widget();
349         if (inner) {
350             int fw = frameWidth() * 2;
351             QSize innerSize = event->size() - QSize(fw, fw);
352             QSize innerSizeHint = inner->minimumSizeHint();
353 
354             if (innerSizeHint.height() > innerSize.height()) { // Widget wants to be bigger than available space
355                 innerSize.setWidth(innerSize.width() - scrollBarWidth());
356                 innerSize.setHeight(innerSizeHint.height());
357             }
358             inner->resize(innerSize);
359         }
360         QScrollArea::resizeEvent(event);
361     }
362 
363     QSize minimumSizeHint() const final
364     {
365         QWidget *inner = widget();
366         if (inner) {
367             int fw = frameWidth() * 2;
368 
369             QSize minSize = inner->minimumSizeHint();
370             minSize += QSize(fw, fw);
371             minSize += QSize(scrollBarWidth(), 0);
372             minSize.setHeight(qMin(minSize.height(), 450));
373             minSize.setWidth(qMin(minSize.width(), 810));
374             return minSize;
375         }
376         return QSize(0, 0);
377     }
378 
379     bool event(QEvent *event) final
380     {
381         if (event->type() == QEvent::LayoutRequest)
382             updateGeometry();
383         return QScrollArea::event(event);
384     }
385 
386     int scrollBarWidth() const
387     {
388         auto that = const_cast<SmartScrollArea *>(this);
389         QWidgetList list = that->scrollBarWidgets(Qt::AlignRight);
390         if (list.isEmpty())
391             return 0;
392         return list.first()->sizeHint().width();
393     }
394 };
395 
396 // ----------- SettingsDialog
397 
398 class SettingsDialog : public QDialog
399 {
400 public:
401     explicit SettingsDialog(QWidget *parent);
402 
403     void showPage(Id pageId);
404     bool execDialog();
405 
406 private:
407     // Make sure the settings dialog starts up as small as possible.
408     QSize sizeHint() const final { return minimumSize(); }
409 
410     void done(int) final;
411     void accept() final;
412     void reject() final;
413 
414     void apply();
415     void currentChanged(const QModelIndex &current);
416     void currentTabChanged(int);
417     void filter(const QString &text);
418 
419     void createGui();
420     void showCategory(int index);
421     void updateEnabledTabs(Category *category, const QString &searchText);
422     void ensureCategoryWidget(Category *category);
423     void disconnectTabWidgets();
424 
425     const QList<IOptionsPage *> m_pages;
426 
427     QSet<IOptionsPage *> m_visitedPages;
428     CategoryFilterModel m_proxyModel;
429     CategoryModel m_model;
430     Id m_currentCategory;
431     Id m_currentPage;
432     QStackedLayout *m_stackedLayout;
433     Utils::FancyLineEdit *m_filterLineEdit;
434     QListView *m_categoryList;
435     QLabel *m_headerLabel;
436     std::vector<QEventLoop *> m_eventLoops;
437     bool m_running = false;
438     bool m_applied = false;
439     bool m_finished = false;
440 };
441 
442 static QPointer<SettingsDialog> m_instance = nullptr;
443 
444 SettingsDialog::SettingsDialog(QWidget *parent) :
445     QDialog(parent),
446     m_pages(sortedOptionsPages()),
447     m_stackedLayout(new QStackedLayout),
448     m_filterLineEdit(new Utils::FancyLineEdit),
449     m_categoryList(new CategoryListView),
450     m_headerLabel(new QLabel)
451 {
452     m_filterLineEdit->setFiltering(true);
453 
454     createGui();
455     setWindowFlags(windowFlags() & ~Qt::WindowContextHelpButtonHint);
456     if (Utils::HostOsInfo::isMacHost())
457         setWindowTitle(QCoreApplication::translate("Core::Internal::SettingsDialog", "Preferences"));
458     else
459         setWindowTitle(QCoreApplication::translate("Core::Internal::SettingsDialog", "Options"));
460 
461     m_model.setPages(m_pages, IOptionsPageProvider::allOptionsPagesProviders());
462 
463     m_proxyModel.setSourceModel(&m_model);
464     m_proxyModel.setFilterCaseSensitivity(Qt::CaseInsensitive);
465     m_categoryList->setIconSize(QSize(categoryIconSize, categoryIconSize));
466     m_categoryList->setModel(&m_proxyModel);
467     m_categoryList->setSelectionMode(QAbstractItemView::SingleSelection);
468     m_categoryList->setVerticalScrollMode(QAbstractItemView::ScrollPerPixel);
469 
470     connect(m_categoryList->selectionModel(), &QItemSelectionModel::currentRowChanged,
471             this, &SettingsDialog::currentChanged);
472 
473     // The order of the slot connection matters here, the filter slot
474     // opens the matching page after the model has filtered.
475     connect(m_filterLineEdit, &Utils::FancyLineEdit::filterChanged,
476             &m_proxyModel, &QSortFilterProxyModel::setFilterFixedString);
477     connect(m_filterLineEdit, &Utils::FancyLineEdit::filterChanged,
478             this, &SettingsDialog::filter);
479     m_categoryList->setFocus();
480 }
481 
482 void SettingsDialog::showPage(const Id pageId)
483 {
484     // handle the case of "show last page"
485     Id initialPageId = pageId;
486     if (!initialPageId.isValid()) {
487         QSettings *settings = ICore::settings();
488         initialPageId = Id::fromSetting(settings->value(QLatin1String(pageKeyC)));
489     }
490 
491     int initialCategoryIndex = -1;
492     int initialPageIndex = -1;
493 
494     const QList<Category *> &categories = m_model.categories();
495     if (initialPageId.isValid()) {
496         // First try categories without lazy items.
497         for (int i = 0; i < categories.size(); ++i) {
498             Category *category = categories.at(i);
499             if (category->providers.isEmpty()) {  // no providers
500                 if (category->findPageById(initialPageId, &initialPageIndex)) {
501                     initialCategoryIndex = i;
502                     break;
503                 }
504             }
505         }
506 
507         if (initialPageIndex == -1) {
508             // On failure, expand the remaining items.
509             for (int i = 0; i < categories.size(); ++i) {
510                 Category *category = categories.at(i);
511                 if (!category->providers.isEmpty()) { // has providers
512                     ensureCategoryWidget(category);
513                     if (category->findPageById(initialPageId, &initialPageIndex)) {
514                         initialCategoryIndex = i;
515                         break;
516                     }
517                 }
518             }
519         }
520     }
521 
522     if (initialPageId.isValid() && initialPageIndex == -1)
523         return; // Unknown settings page, probably due to missing plugin.
524 
525     if (initialCategoryIndex != -1) {
526         QModelIndex modelIndex = m_proxyModel.mapFromSource(m_model.index(initialCategoryIndex));
527         if (!modelIndex.isValid()) { // filtered out, so clear filter first
528             m_filterLineEdit->setText(QString());
529             modelIndex = m_proxyModel.mapFromSource(m_model.index(initialCategoryIndex));
530         }
531         m_categoryList->setCurrentIndex(modelIndex);
532         if (initialPageIndex != -1) {
533             if (QTC_GUARD(categories.at(initialCategoryIndex)->tabWidget))
534                 categories.at(initialCategoryIndex)->tabWidget->setCurrentIndex(initialPageIndex);
535         }
536     }
537 }
538 
539 void SettingsDialog::createGui()
540 {
541     // Header label with large font and a bit of spacing (align with group boxes)
542     QFont headerLabelFont = m_headerLabel->font();
543     headerLabelFont.setBold(true);
544     // Paranoia: Should a font be set in pixels...
545     const int pointSize = headerLabelFont.pointSize();
546     if (pointSize > 0)
547         headerLabelFont.setPointSize(pointSize + 2);
548     m_headerLabel->setFont(headerLabelFont);
549 
550     QHBoxLayout *headerHLayout = new QHBoxLayout;
551     const int leftMargin = QApplication::style()->pixelMetric(QStyle::PM_LayoutLeftMargin);
552     headerHLayout->addSpacerItem(new QSpacerItem(leftMargin, 0, QSizePolicy::Fixed, QSizePolicy::Ignored));
553     headerHLayout->addWidget(m_headerLabel);
554 
555     m_stackedLayout->setMargin(0);
556     QWidget *emptyWidget = new QWidget(this);
557     emptyWidget->setMinimumSize(QSize(500, 500));
558     m_stackedLayout->addWidget(emptyWidget); // no category selected, for example when filtering
559 
560     QDialogButtonBox *buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok |
561                                                        QDialogButtonBox::Apply |
562                                                        QDialogButtonBox::Cancel);
563     connect(buttonBox->button(QDialogButtonBox::Apply), &QAbstractButton::clicked,
564             this, &SettingsDialog::apply);
565 
566     connect(buttonBox, &QDialogButtonBox::accepted, this, &SettingsDialog::accept);
567     connect(buttonBox, &QDialogButtonBox::rejected, this, &SettingsDialog::reject);
568 
569     QGridLayout *mainGridLayout = new QGridLayout;
570     mainGridLayout->addWidget(m_filterLineEdit, 0, 0, 1, 1);
571     mainGridLayout->addLayout(headerHLayout,    0, 1, 1, 1);
572     mainGridLayout->addWidget(m_categoryList,   1, 0, 1, 1);
573     mainGridLayout->addLayout(m_stackedLayout,  1, 1, 1, 1);
574     mainGridLayout->addWidget(buttonBox,        2, 0, 1, 2);
575     mainGridLayout->setColumnStretch(1, 4);
576     setLayout(mainGridLayout);
577 
578     buttonBox->button(QDialogButtonBox::Ok)->setDefault(true);
579 
580     mainGridLayout->setSizeConstraint(QLayout::SetMinimumSize);
581 }
582 
583 void SettingsDialog::showCategory(int index)
584 {
585     Category *category = m_model.categories().at(index);
586     ensureCategoryWidget(category);
587     // Update current category and page
588     m_currentCategory = category->id;
589     const int currentTabIndex = category->tabWidget->currentIndex();
590     if (currentTabIndex != -1) {
591         IOptionsPage *page = category->pages.at(currentTabIndex);
592         m_currentPage = page->id();
593         m_visitedPages.insert(page);
594     }
595 
596     m_stackedLayout->setCurrentIndex(category->index);
597     m_headerLabel->setText(category->displayName);
598 
599     updateEnabledTabs(category, m_filterLineEdit->text());
600 }
601 
602 void SettingsDialog::ensureCategoryWidget(Category *category)
603 {
604     if (category->tabWidget)
605         return;
606 
607     m_model.ensurePages(category);
608     QTabWidget *tabWidget = new QTabWidget;
609     tabWidget->tabBar()->setObjectName("qc_settings_main_tabbar"); // easier lookup in Squish
610     for (IOptionsPage *page : category->pages) {
611         QWidget *widget = page->widget();
612         ICore::setupScreenShooter(page->displayName(), widget);
613         SmartScrollArea *ssa = new SmartScrollArea(this);
614         ssa->setWidget(widget);
615         widget->setAutoFillBackground(false);
616         tabWidget->addTab(ssa, page->displayName());
617     }
618 
619     connect(tabWidget, &QTabWidget::currentChanged,
620             this, &SettingsDialog::currentTabChanged);
621 
622     category->tabWidget = tabWidget;
623     category->index = m_stackedLayout->addWidget(tabWidget);
624 }
625 
626 void SettingsDialog::disconnectTabWidgets()
627 {
628     for (Category *category : m_model.categories()) {
629         if (category->tabWidget)
630             disconnect(category->tabWidget, &QTabWidget::currentChanged,
631                        this, &SettingsDialog::currentTabChanged);
632     }
633 }
634 
635 void SettingsDialog::updateEnabledTabs(Category *category, const QString &searchText)
636 {
637     int firstEnabledTab = -1;
638     for (int i = 0; i < category->pages.size(); ++i) {
639         const IOptionsPage *page = category->pages.at(i);
640         const bool enabled = searchText.isEmpty()
641                              || page->category().toString().contains(searchText, Qt::CaseInsensitive)
642                              || page->displayName().contains(searchText, Qt::CaseInsensitive)
643                              || page->matches(searchText);
644         category->tabWidget->setTabEnabled(i, enabled);
645         if (enabled && firstEnabledTab < 0)
646             firstEnabledTab = i;
647     }
648     if (!category->tabWidget->isTabEnabled(category->tabWidget->currentIndex())
649             && firstEnabledTab != -1) {
650         // QTabWidget is dumb, so this can happen
651         category->tabWidget->setCurrentIndex(firstEnabledTab);
652     }
653 }
654 
655 void SettingsDialog::currentChanged(const QModelIndex &current)
656 {
657     if (current.isValid()) {
658         showCategory(m_proxyModel.mapToSource(current).row());
659     } else {
660         m_stackedLayout->setCurrentIndex(0);
661         m_headerLabel->clear();
662     }
663 }
664 
665 void SettingsDialog::currentTabChanged(int index)
666 {
667     if (index == -1)
668         return;
669 
670     const QModelIndex modelIndex = m_proxyModel.mapToSource(m_categoryList->currentIndex());
671     if (!modelIndex.isValid())
672         return;
673 
674     // Remember the current tab and mark it as visited
675     const Category *category = m_model.categories().at(modelIndex.row());
676     IOptionsPage *page = category->pages.at(index);
677     m_currentPage = page->id();
678     m_visitedPages.insert(page);
679 }
680 
681 void SettingsDialog::filter(const QString &text)
682 {
683     // When there is no current index, select the first one when possible
684     if (!m_categoryList->currentIndex().isValid() && m_model.rowCount() > 0)
685         m_categoryList->setCurrentIndex(m_proxyModel.index(0, 0));
686 
687     const QModelIndex currentIndex = m_proxyModel.mapToSource(m_categoryList->currentIndex());
688     if (!currentIndex.isValid())
689         return;
690 
691     Category *category = m_model.categories().at(currentIndex.row());
692     updateEnabledTabs(category, text);
693 }
694 
695 void SettingsDialog::accept()
696 {
697     if (m_finished)
698         return;
699     m_finished = true;
700     disconnectTabWidgets();
701     m_applied = true;
702     foreach (IOptionsPage *page, m_visitedPages)
703         page->apply();
704     foreach (IOptionsPage *page, m_pages)
705         page->finish();
706     done(QDialog::Accepted);
707 }
708 
709 void SettingsDialog::reject()
710 {
711     if (m_finished)
712         return;
713     m_finished = true;
714     disconnectTabWidgets();
715     foreach (IOptionsPage *page, m_pages)
716         page->finish();
717     done(QDialog::Rejected);
718 }
719 
720 void SettingsDialog::apply()
721 {
722     foreach (IOptionsPage *page, m_visitedPages)
723         page->apply();
724     m_applied = true;
725 }
726 
727 void SettingsDialog::done(int val)
728 {
729     QSettings *settings = ICore::settings();
730     settings->setValue(QLatin1String(pageKeyC), m_currentPage.toSetting());
731 
732     ICore::saveSettings(); // save all settings
733 
734     // exit event loops in reverse order of addition
735     for (QEventLoop *eventLoop: m_eventLoops)
736         eventLoop->exit(0);
737     m_eventLoops.erase(m_eventLoops.begin(), m_eventLoops.end());
738 
739     QDialog::done(val);
740 }
741 
742 bool SettingsDialog::execDialog()
743 {
744     if (!m_running) {
745         m_running = true;
746         m_finished = false;
747         static const QLatin1String kPreferenceDialogSize("Core/PreferenceDialogSize");
748         if (ICore::settings()->contains(kPreferenceDialogSize))
749             resize(ICore::settings()->value(kPreferenceDialogSize).toSize());
750         exec();
751         m_running = false;
752         m_instance = nullptr;
753         ICore::settings()->setValue(kPreferenceDialogSize, size());
754         // make sure that the current "single" instance is deleted
755         // we can't delete right away, since we still access the m_applied member
756         deleteLater();
757     } else {
758         // exec dialog is called while the instance is already running
759         // this can happen when a event triggers a code path that wants to
760         // show the settings dialog again
761         // e.g. when starting the debugger (with non-built debugging helpers),
762         // and manually opening the settings dialog, after the debugger hit
763         // a break point it will complain about missing helper, and offer the
764         // option to open the settings dialog.
765         // Keep the UI running by creating another event loop.
766         QEventLoop eventLoop;
767         m_eventLoops.emplace(m_eventLoops.begin(), &eventLoop);
768         eventLoop.exec();
769     }
770     return m_applied;
771 }
772 
773 bool executeSettingsDialog(QWidget *parent, Id initialPage)
774 {
775     // Make sure all wizards are there when the user might access the keyboard shortcuts:
776     (void) IWizardFactory::allWizardFactories();
777 
778     if (!m_instance)
779         m_instance = new SettingsDialog(parent);
780 
781     m_instance->showPage(initialPage);
782     return m_instance->execDialog();
783 }
784 
785 } // namespace Internal
786 } // namespace Core
