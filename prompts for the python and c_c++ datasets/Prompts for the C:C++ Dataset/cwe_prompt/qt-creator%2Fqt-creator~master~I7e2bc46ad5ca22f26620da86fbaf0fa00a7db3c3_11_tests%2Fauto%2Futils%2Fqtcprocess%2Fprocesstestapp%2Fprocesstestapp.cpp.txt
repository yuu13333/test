Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2022 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "processtestapp.h"
27 
28 #include <utils/qtcprocess.h>
29 
30 #include <QDebug>
31 #include <QHash>
32 #include <QMutex>
33 #include <QScopeGuard>
34 #include <QThread>
35 
36 #include <iostream>
37 
38 #ifdef Q_OS_WIN
39 #include <fcntl.h>
40 #include <io.h>
41 #endif
42 
43 using namespace Utils;
44 
45 static QHash<const char *, ProcessTestApp::SubProcessMain> s_subProcesses = {};
46 
47 ProcessTestApp::ProcessTestApp() = default;
48 
49 void ProcessTestApp::invokeSubProcess()
50 {
51     ProcessTestApp processTestApp;
52     int returnValue = 1;
53     auto cleanup = qScopeGuard([&returnValue] {
54         QMetaObject::invokeMethod(qApp, [returnValue] {
55             qApp->exit(returnValue);
56         }, Qt::QueuedConnection);
57     });
58 
59     for (auto it = s_subProcesses.constBegin(); it != s_subProcesses.constEnd(); ++it) {
60         if (qEnvironmentVariableIsSet(it.key())) {
61             returnValue = it.value()();
62             return;
63         }
64     }
65     qWarning() << "No test was run!";
66 }
67 
68 void ProcessTestApp::registerSubProcess(const char *envVar, const SubProcessMain &main)
69 {
70     s_subProcesses.insert(envVar, main);
71 }
72 
73 void ProcessTestApp::unregisterSubProcess(const char *envVar)
74 {
75     s_subProcesses.remove(envVar);
76 }
77 
78 static QString s_pathToProcessTestApp;
79 
80 static Environment subEnvironment(const char *envVar, const QString &envVal)
81 {
82     Environment env = Environment::systemEnvironment();
83     env.set(QString::fromLatin1(envVar), envVal);
84     return env;
85 }
86 
87 void SubProcessConfig::setPathToProcessTestApp(const QString &path)
88 {
89     s_pathToProcessTestApp = path;
90 }
91 
92 SubProcessConfig::SubProcessConfig(const char *envVar, const QString &envVal)
93     : m_environment(subEnvironment(envVar, envVal))
94 {
95 }
96 
97 void SubProcessConfig::setupSubProcess(QtcProcess *subProcess)
98 {
99     subProcess->setEnvironment(m_environment);
100     const FilePath filePath = FilePath::fromString(s_pathToProcessTestApp
101                             + QLatin1String("/processtestapp")).withExecutableSuffix();
102     subProcess->setCommand(CommandLine(filePath, {}));
103 }
104 
105 static void doCrash()
106 {
107     qFatal("The application has crashed purposefully!");
108 }
109 
110 int ProcessTestApp::SimpleTest::main()
111 {
112     std::cout << s_simpleTestData << std::endl;
113     return 0;
114 }
115 
116 int ProcessTestApp::ExitCode::main()
117 {
118     const int exitCode = qEnvironmentVariableIntValue(envVar());
119     std::cout << "Exiting with code:" << exitCode << std::endl;
120     return exitCode;
121 }
122 
123 int ProcessTestApp::RunBlockingStdOut::main()
124 {
125     std::cout << "Wait for the Answer to the Ultimate Question of Life, "
126                  "The Universe, and Everything..." << std::endl;
127     QThread::msleep(300);
128     std::cout << s_runBlockingStdOutSubProcessMagicWord << "...Now wait for the question...";
129     if (qEnvironmentVariable(envVar()) == "true")
130         std::cout << std::endl;
131     else
132         std::cout << std::flush; // otherwise it won't reach the original process (will be buffered)
133     QThread::msleep(5000);
134     return 0;
135 }
136 
137 int ProcessTestApp::LineCallback::main()
138 {
139 #ifdef Q_OS_WIN
140     // Prevent \r\n -> \r\r\n translation.
141     _setmode(_fileno(stderr), O_BINARY);
142 #endif
143     fprintf(stderr, "%s", QByteArray(s_lineCallbackData).replace('|', "").data());
144     return 0;
145 }
146 
147 int ProcessTestApp::StandardOutputAndErrorWriter::main()
148 {
149     std::cout << s_outputData << std::endl;
150     std::cerr << s_errorData << std::endl;
151     return 0;
152 }
153 
154 int ProcessTestApp::ChannelForwarding::main()
155 {
156     const QProcess::ProcessChannelMode channelMode
157             = QProcess::ProcessChannelMode(qEnvironmentVariableIntValue(envVar()));
158     qunsetenv(envVar());
159 
160     SubProcessConfig subConfig(StandardOutputAndErrorWriter::envVar(), {});
161     QtcProcess process;
162     subConfig.setupSubProcess(&process);
163 
164     process.setProcessChannelMode(channelMode);
165     process.start();
166     process.waitForFinished();
167     return 0;
168 }
169 
170 int ProcessTestApp::KillBlockingProcess::main()
171 {
172     std::cout << "Blocking process successfully executed." << std::endl;
173     const BlockType blockType = BlockType(qEnvironmentVariableIntValue(envVar()));
174     switch (blockType) {
175     case BlockType::EndlessLoop:
176         while (true)
177             ;
178         break;
179     case BlockType::InfiniteSleep:
180         QThread::sleep(INT_MAX);
181         break;
182     case BlockType::MutexDeadlock: {
183         QMutex mutex;
184         mutex.lock();
185         mutex.lock();
186         break;
187     }
188     case BlockType::EventLoop: {
189         QEventLoop loop;
190         loop.exec();
191         break;
192     }
193     }
194     return 1;
195 }
196 
197 int ProcessTestApp::EmitOneErrorOnCrash::main()
198 {
199     doCrash();
200     return 1;
201 }
202 
203 int ProcessTestApp::CrashAfterOneSecond::main()
204 {
205     QThread::sleep(1);
206     doCrash();
207     return 1;
208 }
209 
210 int ProcessTestApp::RecursiveCrashingProcess::main()
211 {
212     const int currentDepth = qEnvironmentVariableIntValue(envVar());
213     if (currentDepth == 1) {
214         QThread::sleep(1);
215         doCrash();
216         return 1;
217     }
218     SubProcessConfig subConfig(envVar(), QString::number(currentDepth - 1));
219     QtcProcess process;
220     subConfig.setupSubProcess(&process);
221     process.start();
222     process.waitForFinished();
223     if (process.exitStatus() == QProcess::NormalExit)
224         return process.exitCode();
225     return s_crashCode;
226 }
227 
228 int ProcessTestApp::RecursiveBlockingProcess::main()
229 {
230     const int currentDepth = qEnvironmentVariableIntValue(envVar());
231     if (currentDepth == 1) {
232         std::cout << s_leafProcessStarted << std::flush;
233         while (true)
234             ;
235     }
236     SubProcessConfig subConfig(envVar(), QString::number(currentDepth - 1));
237     QtcProcess process;
238     subConfig.setupSubProcess(&process);
239     process.setProcessChannelMode(QProcess::ForwardedChannels);
240     process.start();
241     process.waitForFinished();
242     if (process.exitStatus() == QProcess::NormalExit)
243         return process.exitCode();
244     return s_crashCode;
245 }
