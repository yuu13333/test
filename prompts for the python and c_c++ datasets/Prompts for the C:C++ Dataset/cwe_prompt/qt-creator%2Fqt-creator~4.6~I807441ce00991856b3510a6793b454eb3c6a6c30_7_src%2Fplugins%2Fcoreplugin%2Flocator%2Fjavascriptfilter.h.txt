Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2018 Andre Hartmann <aha_1980@gmx.de>
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #pragma once
27 
28 #include <coreplugin/locator/ilocatorfilter.h>
29 
30 QT_BEGIN_NAMESPACE
31 class QJSEngine;
32 QT_END_NAMESPACE
33 
34 namespace Core {
35 namespace Internal {
36 
37 class JavaScriptFilter : public Core::ILocatorFilter
38 {
39     Q_OBJECT
40 public:
41     JavaScriptFilter();
42     ~JavaScriptFilter();
43 
44     virtual void prepareSearch(const QString &entry) override;
45     QList<Core::LocatorFilterEntry> matchesFor(QFutureInterface<Core::LocatorFilterEntry> &future,
46                                                const QString &entry) override;
47     void accept(Core::LocatorFilterEntry selection, QString *newText,
48                 int *selectionStart, int *selectionLength) const override;
49     void refresh(QFutureInterface<void> &future) override;
50 
51 private:
52     void setupEngine();
53 
54     QJSEngine *m_engine = nullptr;
55 };
56 
57 } // namespace Internal
58 } // namespace Core
