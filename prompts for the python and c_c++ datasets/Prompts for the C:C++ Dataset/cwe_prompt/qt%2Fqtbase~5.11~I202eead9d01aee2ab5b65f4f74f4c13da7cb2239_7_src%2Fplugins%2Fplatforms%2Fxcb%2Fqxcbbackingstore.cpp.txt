Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the plugins of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qxcbbackingstore.h"
41 
42 #include "qxcbconnection.h"
43 #include "qxcbscreen.h"
44 #include "qxcbwindow.h"
45 
46 #include <xcb/shm.h>
47 #include <xcb/xcb_image.h>
48 
49 #include <sys/ipc.h>
50 #include <sys/shm.h>
51 #include <sys/mman.h>
52 
53 #include <stdio.h>
54 #include <errno.h>
55 #include <unistd.h>
56 
57 #include <qdebug.h>
58 #include <qpainter.h>
59 #include <qscreen.h>
60 #include <QtGui/private/qhighdpiscaling_p.h>
61 #include <qpa/qplatformgraphicsbuffer.h>
62 #include <private/qimage_p.h>
63 #include <qendian.h>
64 
65 #include <algorithm>
66 
67 #if (XCB_SHM_MAJOR_VERSION == 1 && XCB_SHM_MINOR_VERSION >= 2) || XCB_SHM_MAJOR_VERSION > 1
68 #define XCB_USE_SHM_FD
69 #endif
70 
71 QT_BEGIN_NAMESPACE
72 
73 class QXcbShmImage : public QXcbObject
74 {
75 public:
76     QXcbShmImage(QXcbScreen *connection, const QSize &size, uint depth, QImage::Format format);
77     ~QXcbShmImage() { destroy(); }
78 
79     void flushScrolledRegion(bool clientSideScroll);
80 
81     bool scroll(const QRegion &area, int dx, int dy);
82 
83     QImage *image() { return &m_qimage; }
84     QPlatformGraphicsBuffer *graphicsBuffer() { return m_graphics_buffer; }
85 
86     QSize size() const { return m_qimage.size(); }
87 
88     bool hasAlpha() const { return m_hasAlpha; }
89     bool hasShm() const { return m_shm_info.shmaddr != nullptr; }
90 
91     void put(xcb_drawable_t dst, const QRegion &region, const QPoint &offset);
92     void preparePaint(const QRegion &region);
93 
94 private:
95     void createShmSegment(size_t segmentSize);
96     void destroyShmSegment(size_t segmentSize);
97 
98     void destroy();
99 
100     void ensureGC(xcb_drawable_t dst);
101     void shmPutImage(xcb_drawable_t drawable, const QRegion &region, const QPoint &offset = QPoint());
102     void flushPixmap(const QRegion &region, bool fullRegion = false);
103     void setClip(const QRegion &region);
104 
105     xcb_shm_segment_info_t m_shm_info;
106 
107     xcb_image_t *m_xcb_image;
108 
109     QImage m_qimage;
110     QPlatformGraphicsBuffer *m_graphics_buffer;
111 
112     xcb_gcontext_t m_gc;
113     xcb_drawable_t m_gc_drawable;
114 
115     // When using shared memory these variables are used only for server-side scrolling.
116     // When not using shared memory, we maintain a server-side pixmap with the backing
117     // store as well as repainted content not yet flushed to the pixmap. We only flush
118     // the regions we need and only when these are marked dirty. This way we can just
119     // do a server-side copy on expose instead of sending the pixels every time
120     xcb_pixmap_t m_xcb_pixmap;
121     QRegion m_pendingFlush;
122 
123     // This is the scrolled region which is stored in server-side pixmap
124     QRegion m_scrolledRegion;
125 
126     // When using shared memory this is the region currently shared with the server
127     QRegion m_dirtyShm;
128 
129     // When not using shared memory this is a temporary buffer which is uploaded
130     // as a pixmap region to server
131     QByteArray m_flushBuffer;
132 
133     bool m_hasAlpha;
134     bool m_clientSideScroll;
135 };
136 
137 class QXcbShmGraphicsBuffer : public QPlatformGraphicsBuffer
138 {
139 public:
140     QXcbShmGraphicsBuffer(QImage *image)
141         : QPlatformGraphicsBuffer(image->size(), QImage::toPixelFormat(image->format()))
142         , m_access_lock(QPlatformGraphicsBuffer::None)
143         , m_image(image)
144     { }
145 
146     bool doLock(AccessTypes access, const QRect &rect) override
147     {
148         Q_UNUSED(rect);
149         if (access & ~(QPlatformGraphicsBuffer::SWReadAccess | QPlatformGraphicsBuffer::SWWriteAccess))
150             return false;
151 
152         m_access_lock |= access;
153         return true;
154     }
155     void doUnlock() override { m_access_lock = None; }
156 
157     const uchar *data() const override { return m_image->bits(); }
158     uchar *data() override { return m_image->bits(); }
159     int bytesPerLine() const override { return m_image->bytesPerLine(); }
160 
161     Origin origin() const override { return QPlatformGraphicsBuffer::OriginTopLeft; }
162 private:
163     AccessTypes m_access_lock;
164     QImage *m_image;
165 };
166 
167 static inline size_t imageDataSize(const xcb_image_t *image)
168 {
169     return static_cast<size_t>(image->stride) * image->height;
170 }
171 
172 QXcbShmImage::QXcbShmImage(QXcbScreen *screen, const QSize &size, uint depth, QImage::Format format)
173     : QXcbObject(screen->connection())
174     , m_graphics_buffer(nullptr)
175     , m_gc(0)
176     , m_gc_drawable(0)
177     , m_xcb_pixmap(0)
178     , m_clientSideScroll(false)
179 {
180     const xcb_format_t *fmt = connection()->formatForDepth(depth);
181     Q_ASSERT(fmt);
182 
183     m_xcb_image = xcb_image_create(size.width(), size.height(),
184                                    XCB_IMAGE_FORMAT_Z_PIXMAP,
185                                    fmt->scanline_pad,
186                                    fmt->depth, fmt->bits_per_pixel, 0,
187                                    QSysInfo::ByteOrder == QSysInfo::BigEndian ? XCB_IMAGE_ORDER_MSB_FIRST : XCB_IMAGE_ORDER_LSB_FIRST,
188                                    XCB_IMAGE_ORDER_MSB_FIRST,
189                                    0, ~0, 0);
190 
191     const size_t segmentSize = imageDataSize(m_xcb_image);
192     if (!segmentSize)
193         return;
194 
195     createShmSegment(segmentSize);
196 
197     m_xcb_image->data = m_shm_info.shmaddr ? m_shm_info.shmaddr : (uint8_t *)malloc(segmentSize);
198 
199     m_hasAlpha = QImage::toPixelFormat(format).alphaUsage() == QPixelFormat::UsesAlpha;
200     if (!m_hasAlpha)
201         format = qt_maybeAlphaVersionWithSameDepth(format);
202 
203     m_qimage = QImage( (uchar*) m_xcb_image->data, m_xcb_image->width, m_xcb_image->height, m_xcb_image->stride, format);
204     m_graphics_buffer = new QXcbShmGraphicsBuffer(&m_qimage);
205 
206     m_xcb_pixmap = xcb_generate_id(xcb_connection());
207     xcb_create_pixmap(xcb_connection(),
208                       m_xcb_image->depth,
209                       m_xcb_pixmap,
210                       screen->screen()->root,
211                       m_xcb_image->width, m_xcb_image->height);
212 }
213 
214 void QXcbShmImage::flushScrolledRegion(bool clientSideScroll)
215 {
216     if (m_clientSideScroll == clientSideScroll)
217        return;
218 
219     m_clientSideScroll = clientSideScroll;
220 
221     if (m_scrolledRegion.isNull())
222         return;
223 
224     if (hasShm() && m_dirtyShm.intersects(m_scrolledRegion)) {
225         connection()->sync();
226         m_dirtyShm = QRegion();
227     }
228 
229     if (m_clientSideScroll) {
230         // Copy scrolled image region from server-side pixmap to client-side memory
231         for (const QRect &rect : m_scrolledRegion) {
232             const int w = rect.width();
233             const int h = rect.height();
234 
235             auto reply = Q_XCB_REPLY_UNCHECKED(xcb_get_image,
236                                                xcb_connection(),
237                                                m_xcb_image->format,
238                                                m_xcb_pixmap,
239                                                rect.x(), rect.y(),
240                                                w, h,
241                                                ~0u);
242 
243             if (reply && reply->depth == m_xcb_image->depth) {
244                 const QImage img(xcb_get_image_data(reply.get()), w, h, m_qimage.format());
245 
246                 QPainter p(&m_qimage);
247                 p.setCompositionMode(QPainter::CompositionMode_Source);
248                 p.drawImage(rect.topLeft(), img);
249             }
250         }
251         m_scrolledRegion = QRegion();
252     } else {
253         // Copy scrolled image region from client-side memory to server-side pixmap
254         ensureGC(m_xcb_pixmap);
255         if (hasShm())
256             shmPutImage(m_xcb_pixmap, m_scrolledRegion);
257         else
258             flushPixmap(m_scrolledRegion, true);
259     }
260 }
261 
262 void QXcbShmImage::createShmSegment(size_t segmentSize)
263 {
264     m_shm_info.shmaddr = nullptr;
265 
266     if (!connection()->hasShm())
267         return;
268 
269 #ifdef XCB_USE_SHM_FD
270     if (connection()->hasShmFd()) {
271         if (Q_UNLIKELY(segmentSize > std::numeric_limits<uint32_t>::max())) {
272             qWarning("QXcbShmImage: xcb_shm_create_segment() can't be called for size %zu, maximum allowed size is %u",
273                      segmentSize, std::numeric_limits<uint32_t>::max());
274             return;
275         }
276         const auto seg = xcb_generate_id(xcb_connection());
277         auto reply = Q_XCB_REPLY(xcb_shm_create_segment,
278                                  xcb_connection(), seg, segmentSize, false);
279         if (!reply) {
280             qWarning("QXcbShmImage: xcb_shm_create_segment() failed for size %zu", segmentSize);
281             return;
282         }
283 
284         if (reply->nfd != 1) {
285             qWarning("QXcbShmImage: failed to get file descriptor for shm segment of size %zu", segmentSize);
286             return;
287         }
288 
289         int *fds = xcb_shm_create_segment_reply_fds(xcb_connection(), reply.get());
290         void *addr = mmap(nullptr, segmentSize, PROT_READ|PROT_WRITE, MAP_SHARED, fds[0], 0);
291         close(fds[0]);
292         if (addr == MAP_FAILED) {
293             qWarning("QXcbShmImage: failed to mmap segment from X server (%d: %s) for size %zu",
294                      errno, strerror(errno), segmentSize);
295             xcb_shm_detach(xcb_connection(), seg);
296             return;
297         }
298 
299         m_shm_info.shmseg = seg;
300         m_shm_info.shmaddr = static_cast<quint8 *>(addr);
301     } else
302 #endif
303     {
304         const int id = shmget(IPC_PRIVATE, segmentSize, IPC_CREAT | 0600);
305         if (id == -1) {
306             qWarning("QXcbShmImage: shmget() failed (%d: %s) for size %zu",
307                      errno, strerror(errno), segmentSize);
308             return;
309         }
310 
311         void *addr = shmat(id, 0, 0);
312         if (addr == (void *)-1) {
313             qWarning("QXcbShmImage: shmat() failed (%d: %s) for id %d",
314                      errno, strerror(errno), id);
315             return;
316         }
317 
318         if (shmctl(id, IPC_RMID, 0) == -1)
319             qWarning("QXcbBackingStore: Error while marking the shared memory segment to be destroyed");
320 
321         const auto seg = xcb_generate_id(xcb_connection());
322         auto cookie = xcb_shm_attach_checked(xcb_connection(), seg, id, false);
323         auto *error = xcb_request_check(xcb_connection(), cookie);
324         if (error) {
325             connection()->printXcbError("QXcbShmImage: xcb_shm_attach() failed with error", error);
326             free(error);
327             if (shmdt(addr) == -1) {
328                 qWarning("QXcbShmImage: shmdt() failed (%d: %s) for %p",
329                          errno, strerror(errno), addr);
330             }
331             return;
332         }
333 
334         m_shm_info.shmseg = seg;
335         m_shm_info.shmid = id; // unused
336         m_shm_info.shmaddr = static_cast<quint8 *>(addr);
337     }
338 }
339 
340 void QXcbShmImage::destroyShmSegment(size_t segmentSize)
341 {
342     auto cookie = xcb_shm_detach_checked(xcb_connection(), m_shm_info.shmseg);
343     xcb_generic_error_t *error = xcb_request_check(xcb_connection(), cookie);
344     if (error)
345         connection()->printXcbError("QXcbShmImage: xcb_shm_detach() failed with error", error);
346 
347 #ifdef XCB_USE_SHM_FD
348     if (connection()->hasShmFd()) {
349         if (munmap(m_shm_info.shmaddr, segmentSize) == -1) {
350             qWarning("QXcbShmImage: munmap() failed (%d: %s) for %p with size %zu",
351                      errno, strerror(errno), m_shm_info.shmaddr, segmentSize);
352         }
353     } else
354 #endif
355     {
356         if (shmdt(m_shm_info.shmaddr) == -1) {
357             qWarning("QXcbShmImage: shmdt() failed (%d: %s) for %p",
358                      errno, strerror(errno), m_shm_info.shmaddr);
359         }
360     }
361 }
362 
363 extern void qt_scrollRectInImage(QImage &img, const QRect &rect, const QPoint &offset);
364 
365 bool QXcbShmImage::scroll(const QRegion &area, int dx, int dy)
366 {
367     const QRect bounds(QPoint(), size());
368     const QRegion scrollArea(area & bounds);
369     const QPoint delta(dx, dy);
370 
371     if (m_clientSideScroll) {
372         if (m_qimage.isNull())
373             return false;
374 
375         if (hasShm())
376             preparePaint(scrollArea);
377 
378         for (const QRect &rect : scrollArea)
379             qt_scrollRectInImage(m_qimage, rect, delta);
380     } else {
381         if (hasShm())
382             shmPutImage(m_xcb_pixmap, m_pendingFlush.intersected(scrollArea));
383         else
384             flushPixmap(scrollArea);
385 
386         ensureGC(m_xcb_pixmap);
387 
388         for (const QRect &src : scrollArea) {
389             const QRect dst = src.translated(delta).intersected(bounds);
390             xcb_copy_area(xcb_connection(),
391                           m_xcb_pixmap,
392                           m_xcb_pixmap,
393                           m_gc,
394                           src.x(), src.y(),
395                           dst.x(), dst.y(),
396                           dst.width(), dst.height());
397         }
398     }
399 
400     m_scrolledRegion |= scrollArea.translated(delta).intersected(bounds);
401     if (hasShm()) {
402         m_pendingFlush -= scrollArea;
403         m_pendingFlush -= m_scrolledRegion;
404     }
405 
406     return true;
407 }
408 
409 void QXcbShmImage::destroy()
410 {
411     if (m_xcb_image->data) {
412         if (m_shm_info.shmaddr)
413             destroyShmSegment(imageDataSize(m_xcb_image));
414         else
415             free(m_xcb_image->data);
416     }
417 
418     xcb_image_destroy(m_xcb_image);
419 
420     if (m_gc)
421         xcb_free_gc(xcb_connection(), m_gc);
422     delete m_graphics_buffer;
423     m_graphics_buffer = nullptr;
424 
425     xcb_free_pixmap(xcb_connection(), m_xcb_pixmap);
426     m_xcb_pixmap = 0;
427 }
428 
429 void QXcbShmImage::ensureGC(xcb_drawable_t dst)
430 {
431     if (m_gc_drawable != dst) {
432         if (m_gc)
433             xcb_free_gc(xcb_connection(), m_gc);
434 
435         static const uint32_t mask = XCB_GC_GRAPHICS_EXPOSURES;
436         static const uint32_t values[] = { 0 };
437 
438         m_gc = xcb_generate_id(xcb_connection());
439         xcb_create_gc(xcb_connection(), m_gc, dst, mask, values);
440 
441         m_gc_drawable = dst;
442     }
443 }
444 
445 static inline void copy_unswapped(char *dst, int dstBytesPerLine, const QImage &img, const QRect &rect)
446 {
447     const uchar *srcData = img.constBits();
448     const int srcBytesPerLine = img.bytesPerLine();
449 
450     const int leftOffset = rect.left() * img.depth() >> 3;
451     const int bottom = rect.bottom() + 1;
452 
453     for (int yy = rect.top(); yy < bottom; ++yy) {
454         const uchar *src = srcData + yy * srcBytesPerLine + leftOffset;
455         ::memmove(dst, src, dstBytesPerLine);
456         dst += dstBytesPerLine;
457     }
458 }
459 
460 template <class Pixel>
461 static inline void copy_swapped(char *dst, const int dstStride, const QImage &img, const QRect &rect)
462 {
463     const uchar *srcData = img.constBits();
464     const int srcBytesPerLine = img.bytesPerLine();
465 
466     const int left = rect.left();
467     const int width = rect.width();
468     const int bottom = rect.bottom() + 1;
469 
470     for (int yy = rect.top(); yy < bottom; ++yy) {
471         Pixel *dstPixels = reinterpret_cast<Pixel *>(dst);
472         const Pixel *srcPixels = reinterpret_cast<const Pixel *>(srcData + yy * srcBytesPerLine) + left;
473 
474         for (int i = 0; i < width; ++i)
475             dstPixels[i] = qbswap<Pixel>(*srcPixels++);
476 
477         dst += dstStride;
478     }
479 }
480 
481 static QImage native_sub_image(QByteArray *buffer, const int dstStride, const QImage &src, const QRect &rect, bool swap)
482 {
483     if (!swap && src.rect() == rect && src.bytesPerLine() == dstStride)
484         return src;
485 
486     buffer->resize(rect.height() * dstStride);
487 
488     if (swap) {
489         switch (src.depth()) {
490         case 32:
491             copy_swapped<quint32>(buffer->data(), dstStride, src, rect);
492             break;
493         case 16:
494             copy_swapped<quint16>(buffer->data(), dstStride, src, rect);
495             break;
496         }
497     } else {
498         copy_unswapped(buffer->data(), dstStride, src, rect);
499     }
500 
501     return QImage(reinterpret_cast<const uchar *>(buffer->constData()), rect.width(), rect.height(), dstStride, src.format());
502 }
503 
504 static inline quint32 round_up_scanline(quint32 base, quint32 pad)
505 {
506     return (base + pad - 1) & -pad;
507 }
508 
509 void QXcbShmImage::shmPutImage(xcb_drawable_t drawable, const QRegion &region, const QPoint &offset)
510 {
511     for (const QRect &rect : region) {
512         const QPoint source = rect.translated(offset).topLeft();
513         xcb_shm_put_image(xcb_connection(),
514                           drawable,
515                           m_gc,
516                           m_xcb_image->width,
517                           m_xcb_image->height,
518                           source.x(), source.y(),
519                           rect.width(), rect.height(),
520                           rect.x(), rect.y(),
521                           m_xcb_image->depth,
522                           m_xcb_image->format,
523                           0, // send event?
524                           m_shm_info.shmseg,
525                           m_xcb_image->data - m_shm_info.shmaddr);
526     }
527     m_dirtyShm |= region.translated(offset);
528 }
529 
530 void QXcbShmImage::flushPixmap(const QRegion &region, bool fullRegion)
531 {
532     if (!fullRegion) {
533         auto actualRegion = m_pendingFlush.intersected(region);
534         m_pendingFlush -= region;
535         flushPixmap(actualRegion, true);
536         return;
537     }
538 
539     xcb_image_t xcb_subimage;
540     memset(&xcb_subimage, 0, sizeof(xcb_image_t));
541 
542     xcb_subimage.format = m_xcb_image->format;
543     xcb_subimage.scanline_pad = m_xcb_image->scanline_pad;
544     xcb_subimage.depth = m_xcb_image->depth;
545     xcb_subimage.bpp = m_xcb_image->bpp;
546     xcb_subimage.unit = m_xcb_image->unit;
547     xcb_subimage.plane_mask = m_xcb_image->plane_mask;
548     xcb_subimage.byte_order = (xcb_image_order_t) connection()->setup()->image_byte_order;
549     xcb_subimage.bit_order = m_xcb_image->bit_order;
550 
551     const bool needsByteSwap = xcb_subimage.byte_order != m_xcb_image->byte_order;
552 
553     for (const QRect &rect : region) {
554         // We must make sure that each request is not larger than max_req_size.
555         // Each request takes req_size + m_xcb_image->stride * height bytes.
556         static const uint32_t req_size = sizeof(xcb_put_image_request_t);
557         const uint32_t max_req_size = xcb_get_maximum_request_length(xcb_connection());
558         const int rows_per_put = (max_req_size - req_size) / m_xcb_image->stride;
559 
560         // This assert could trigger if a single row has more pixels than fit in
561         // a single PutImage request. However, max_req_size is guaranteed to be
562         // at least 16384 bytes. That should be enough for quite large images.
563         Q_ASSERT(rows_per_put > 0);
564 
565         // If we upload the whole image in a single chunk, the result might be
566         // larger than the server's maximum request size and stuff breaks.
567         // To work around that, we upload the image in chunks where each chunk
568         // is small enough for a single request.
569         const int x = rect.x();
570         int y = rect.y();
571         const int width = rect.width();
572         int height = rect.height();
573 
574         while (height > 0) {
575             const int rows = std::min(height, rows_per_put);
576             const QRect subRect(x, y, width, rows);
577             const quint32 stride = round_up_scanline(width * m_qimage.depth(), xcb_subimage.scanline_pad) >> 3;
578             const QImage subImage = native_sub_image(&m_flushBuffer, stride, m_qimage, subRect, needsByteSwap);
579 
580             xcb_subimage.width = width;
581             xcb_subimage.height = rows;
582             xcb_subimage.data = const_cast<uint8_t *>(subImage.constBits());
583             xcb_image_annotate(&xcb_subimage);
584 
585             xcb_image_put(xcb_connection(),
586                           m_xcb_pixmap,
587                           m_gc,
588                           &xcb_subimage,
589                           x,
590                           y,
591                           0);
592 
593             y += rows;
594             height -= rows;
595         }
596     }
597 }
598 
599 void QXcbShmImage::setClip(const QRegion &region)
600 {
601     if (region.isEmpty()) {
602         static const uint32_t mask = XCB_GC_CLIP_MASK;
603         static const uint32_t values[] = { XCB_NONE };
604         xcb_change_gc(xcb_connection(), m_gc, mask, values);
605     } else {
606         const auto xcb_rects = qRegionToXcbRectangleList(region);
607         xcb_set_clip_rectangles(xcb_connection(),
608                                 XCB_CLIP_ORDERING_YX_BANDED,
609                                 m_gc,
610                                 0, 0,
611                                 xcb_rects.size(), xcb_rects.constData());
612     }
613 }
614 
615 void QXcbShmImage::put(xcb_drawable_t dst, const QRegion &region, const QPoint &offset)
616 {
617     Q_ASSERT(!m_clientSideScroll);
618 
619     ensureGC(dst);
620     setClip(region);
621 
622     if (hasShm()) {
623         // Copy scrolled area on server-side from pixmap to window
624         const QRegion scrolledRegion = m_scrolledRegion.translated(-offset);
625         for (const QRect &rect : scrolledRegion) {
626             const QPoint source = rect.translated(offset).topLeft();
627             xcb_copy_area(xcb_connection(),
628                           m_xcb_pixmap,
629                           dst,
630                           m_gc,
631                           source.x(), source.y(),
632                           rect.x(), rect.y(),
633                           rect.width(), rect.height());
634         }
635 
636         // Copy non-scrolled image from client-side memory to server-side window
637         const QRegion notScrolledArea = region - scrolledRegion;
638         shmPutImage(dst, notScrolledArea, offset);
639     } else {
640         const QRect bounds = region.boundingRect();
641         const QPoint target = bounds.topLeft();
642         const QRect source = bounds.translated(offset);
643         flushPixmap(region);
644         xcb_copy_area(xcb_connection(),
645                       m_xcb_pixmap,
646                       dst,
647                       m_gc,
648                       source.x(), source.y(),
649                       target.x(), target.y(),
650                       source.width(), source.height());
651     }
652 
653     setClip(QRegion());
654 }
655 
656 void QXcbShmImage::preparePaint(const QRegion &region)
657 {
658     if (hasShm()) {
659         // to prevent X from reading from the image region while we're writing to it
660         if (m_dirtyShm.intersects(region)) {
661             connection()->sync();
662             m_dirtyShm = QRegion();
663         }
664     }
665     m_scrolledRegion -= region;
666     m_pendingFlush |= region;
667 }
668 
669 QXcbBackingStore::QXcbBackingStore(QWindow *window)
670     : QPlatformBackingStore(window)
671     , m_image(0)
672 {
673     QXcbScreen *screen = static_cast<QXcbScreen *>(window->screen()->handle());
674     setConnection(screen->connection());
675 }
676 
677 QXcbBackingStore::~QXcbBackingStore()
678 {
679     delete m_image;
680 }
681 
682 QPaintDevice *QXcbBackingStore::paintDevice()
683 {
684     if (!m_image)
685         return 0;
686     return m_rgbImage.isNull() ? m_image->image() : &m_rgbImage;
687 }
688 
689 void QXcbBackingStore::beginPaint(const QRegion &region)
690 {
691     if (!m_image)
692         return;
693 
694     m_paintRegions.push(region);
695     m_image->preparePaint(region);
696 
697     if (m_image->hasAlpha()) {
698         QPainter p(paintDevice());
699         p.setCompositionMode(QPainter::CompositionMode_Source);
700         const QColor blank = Qt::transparent;
701         for (const QRect &rect : region)
702             p.fillRect(rect, blank);
703     }
704 }
705 
706 void QXcbBackingStore::endPaint()
707 {
708     if (Q_UNLIKELY(m_paintRegions.isEmpty())) {
709         qWarning("%s: paint regions empty!", Q_FUNC_INFO);
710         return;
711     }
712 
713     const QRegion region = m_paintRegions.pop();
714     m_image->preparePaint(region);
715 
716     QXcbWindow *platformWindow = static_cast<QXcbWindow *>(window()->handle());
717     if (!platformWindow || !platformWindow->imageNeedsRgbSwap())
718         return;
719 
720     // Slow path: the paint device was m_rgbImage. Now copy with swapping red
721     // and blue into m_image.
722     auto it = region.begin();
723     const auto end = region.end();
724     if (it == end)
725         return;
726     QPainter p(m_image->image());
727     while (it != end) {
728         const QRect rect = *(it++);
729         p.drawImage(rect.topLeft(), m_rgbImage.copy(rect).rgbSwapped());
730     }
731 }
732 
733 QImage QXcbBackingStore::toImage() const
734 {
735     return m_image && m_image->image() ? *m_image->image() : QImage();
736 }
737 
738 QPlatformGraphicsBuffer *QXcbBackingStore::graphicsBuffer() const
739 {
740     return m_image ? m_image->graphicsBuffer() : nullptr;
741 }
742 
743 void QXcbBackingStore::flush(QWindow *window, const QRegion &region, const QPoint &offset)
744 {
745     if (!m_image || m_image->size().isEmpty())
746         return;
747 
748     m_image->flushScrolledRegion(false);
749 
750     QSize imageSize = m_image->size();
751 
752     QRegion clipped = region;
753     clipped &= QRect(QPoint(), QHighDpi::toNativePixels(window->size(), window));
754     clipped &= QRect(0, 0, imageSize.width(), imageSize.height()).translated(-offset);
755 
756     QRect bounds = clipped.boundingRect();
757 
758     if (bounds.isNull())
759         return;
760 
761     QXcbWindow *platformWindow = static_cast<QXcbWindow *>(window->handle());
762     if (!platformWindow) {
763         qWarning("QXcbBackingStore::flush: QWindow has no platform window (QTBUG-32681)");
764         return;
765     }
766 
767     m_image->put(platformWindow->xcb_window(), clipped, offset);
768 
769     if (platformWindow->needsSync())
770         platformWindow->updateSyncRequestCounter();
771     else
772         xcb_flush(xcb_connection());
773 }
774 
775 #ifndef QT_NO_OPENGL
776 void QXcbBackingStore::composeAndFlush(QWindow *window, const QRegion &region, const QPoint &offset,
777                                        QPlatformTextureList *textures,
778                                        bool translucentBackground)
779 {
780     if (!m_image || m_image->size().isEmpty())
781         return;
782 
783     m_image->flushScrolledRegion(true);
784 
785     QPlatformBackingStore::composeAndFlush(window, region, offset, textures, translucentBackground);
786 
787     QXcbWindow *platformWindow = static_cast<QXcbWindow *>(window->handle());
788     if (platformWindow->needsSync()) {
789         platformWindow->updateSyncRequestCounter();
790     } else {
791         xcb_flush(xcb_connection());
792     }
793 }
794 #endif // QT_NO_OPENGL
795 
796 void QXcbBackingStore::resize(const QSize &size, const QRegion &)
797 {
798     if (m_image && size == m_image->size())
799         return;
800 
801     QXcbScreen *screen = static_cast<QXcbScreen *>(window()->screen()->handle());
802     QPlatformWindow *pw = window()->handle();
803     if (!pw) {
804         window()->create();
805         pw = window()->handle();
806     }
807     QXcbWindow* win = static_cast<QXcbWindow *>(pw);
808 
809     delete m_image;
810     m_image = new QXcbShmImage(screen, size, win->depth(), win->imageFormat());
811     // Slow path for bgr888 VNC: Create an additional image, paint into that and
812     // swap R and B while copying to m_image after each paint.
813     if (win->imageNeedsRgbSwap()) {
814         m_rgbImage = QImage(size, win->imageFormat());
815     }
816 }
817 
818 bool QXcbBackingStore::scroll(const QRegion &area, int dx, int dy)
819 {
820     if (m_image)
821         return m_image->scroll(area, dx, dy);
822 
823     return false;
824 }
825 
826 QT_END_NAMESPACE
