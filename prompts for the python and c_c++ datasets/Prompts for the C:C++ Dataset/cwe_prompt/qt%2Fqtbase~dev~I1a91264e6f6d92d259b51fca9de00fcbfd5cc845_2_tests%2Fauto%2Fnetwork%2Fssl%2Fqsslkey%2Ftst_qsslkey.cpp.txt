Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the test suite of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:GPL-EXCEPT$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
21 ** included in the packaging of this file. Please review the following
22 ** information to ensure the GNU General Public License requirements will
23 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
24 **
25 ** $QT_END_LICENSE$
26 **
27 ****************************************************************************/
28 
29 
30 #include <QtTest/QtTest>
31 #include <qsslkey.h>
32 #include <qsslsocket.h>
33 
34 #include <QtNetwork/qhostaddress.h>
35 #include <QtNetwork/qnetworkproxy.h>
36 
37 #ifdef QT_BUILD_INTERNAL
38     #ifndef QT_NO_SSL
39         #include "private/qsslkey_p.h"
40         #define TEST_CRYPTO
41     #endif
42     #ifndef QT_NO_OPENSSL
43         #include "private/qsslsocket_openssl_symbols_p.h"
44     #endif
45 #endif
46 
47 class tst_QSslKey : public QObject
48 {
49     Q_OBJECT
50 
51     struct KeyInfo {
52         QFileInfo fileInfo;
53         QSsl::KeyAlgorithm algorithm;
54         QSsl::KeyType type;
55         int length;
56         QSsl::EncodingFormat format;
57         KeyInfo(
58             const QFileInfo &fileInfo, QSsl::KeyAlgorithm algorithm, QSsl::KeyType type,
59             int length, QSsl::EncodingFormat format)
60             : fileInfo(fileInfo), algorithm(algorithm), type(type), length(length)
61             , format(format) {}
62     };
63 
64     QList<KeyInfo> keyInfoList;
65 
66     void createPlainTestRows(bool pemOnly = false);
67 
68 public slots:
69     void initTestCase();
70 
71 #ifndef QT_NO_SSL
72 
73 private slots:
74     void emptyConstructor();
75     void constructor_data();
76     void constructor();
77 #ifndef QT_NO_OPENSSL
78     void constructorHandle_data();
79     void constructorHandle();
80 #endif
81     void copyAndAssign_data();
82     void copyAndAssign();
83     void equalsOperator();
84     void length_data();
85     void length();
86     void toPemOrDer_data();
87     void toPemOrDer();
88     void toEncryptedPemOrDer_data();
89     void toEncryptedPemOrDer();
90 
91     void passphraseChecks_data();
92     void passphraseChecks();
93     void noPassphraseChecks();
94 #ifdef TEST_CRYPTO
95     void encrypt_data();
96     void encrypt();
97 #endif
98 
99 #endif
100 private:
101     QString testDataDir;
102 };
103 
104 void tst_QSslKey::initTestCase()
105 {
106     testDataDir = QFileInfo(QFINDTESTDATA("rsa-without-passphrase.pem")).absolutePath();
107     if (testDataDir.isEmpty())
108         testDataDir = QCoreApplication::applicationDirPath();
109     if (!testDataDir.endsWith(QLatin1String("/")))
110         testDataDir += QLatin1String("/");
111 
112     QDir dir(testDataDir + "keys");
113     const QFileInfoList fileInfoList = dir.entryInfoList(QDir::Files | QDir::Readable);
114     QRegExp rx(QLatin1String("^(rsa|dsa|dh|ec)-(pub|pri)-(\\d+)-?[\\w-]*\\.(pem|der)$"));
115     for (const QFileInfo &fileInfo : fileInfoList) {
116         if (rx.indexIn(fileInfo.fileName()) >= 0) {
117             keyInfoList << KeyInfo(
118                 fileInfo,
119                 rx.cap(1) == QLatin1String("rsa") ? QSsl::Rsa :
120                 rx.cap(1) == QLatin1String("dsa") ? QSsl::Dsa :
121                 rx.cap(1) == QLatin1String("dh") ? QSsl::Dh : QSsl::Ec,
122                 rx.cap(2) == QLatin1String("pub") ? QSsl::PublicKey : QSsl::PrivateKey,
123                 rx.cap(3).toInt(),
124                 rx.cap(4) == QLatin1String("pem") ? QSsl::Pem : QSsl::Der);
125         }
126     }
127 }
128 
129 #ifndef QT_NO_SSL
130 
131 static QByteArray readFile(const QString &absFilePath)
132 {
133     QFile file(absFilePath);
134     if (!file.open(QIODevice::ReadOnly)) {
135         QWARN("failed to open file");
136         return QByteArray();
137     }
138     return file.readAll();
139 }
140 
141 void tst_QSslKey::emptyConstructor()
142 {
143     if (!QSslSocket::supportsSsl())
144         return;
145 
146     QSslKey key;
147     QVERIFY(key.isNull());
148     QVERIFY(key.length() < 0);
149 
150     QSslKey key2;
151     QCOMPARE(key, key2);
152 }
153 
154 Q_DECLARE_METATYPE(QSsl::KeyAlgorithm)
155 Q_DECLARE_METATYPE(QSsl::KeyType)
156 Q_DECLARE_METATYPE(QSsl::EncodingFormat)
157 
158 void tst_QSslKey::createPlainTestRows(bool pemOnly)
159 {
160     QTest::addColumn<QString>("absFilePath");
161     QTest::addColumn<QSsl::KeyAlgorithm>("algorithm");
162     QTest::addColumn<QSsl::KeyType>("type");
163     QTest::addColumn<int>("length");
164     QTest::addColumn<QSsl::EncodingFormat>("format");
165     foreach (KeyInfo keyInfo, keyInfoList) {
166         if (pemOnly && keyInfo.format != QSsl::EncodingFormat::Pem)
167             continue;
168 #ifdef Q_OS_WINRT
169         if (keyInfo.fileInfo.fileName().contains("RC2-64"))
170             continue; // WinRT treats RC2 as 128 bit
171 #endif
172 #if !defined(QT_NO_SSL) && defined(QT_NO_OPENSSL) // generic backend
173         if (keyInfo.fileInfo.fileName().contains(QRegularExpression("-aes\\d\\d\\d-")))
174             continue; // No AES support in the generic back-end
175         if (keyInfo.fileInfo.fileName().contains("pkcs8-pkcs12"))
176             continue; // The generic back-end doesn't support PKCS#12 algorithms
177 #endif
178 
179         QTest::newRow(keyInfo.fileInfo.fileName().toLatin1())
180             << keyInfo.fileInfo.absoluteFilePath() << keyInfo.algorithm << keyInfo.type
181             << keyInfo.length << keyInfo.format;
182     }
183 }
184 
185 void tst_QSslKey::constructor_data()
186 {
187     createPlainTestRows();
188 }
189 
190 void tst_QSslKey::constructor()
191 {
192     if (!QSslSocket::supportsSsl())
193         return;
194 
195     QFETCH(QString, absFilePath);
196     QFETCH(QSsl::KeyAlgorithm, algorithm);
197     QFETCH(QSsl::KeyType, type);
198     QFETCH(QSsl::EncodingFormat, format);
199 
200     QByteArray encoded = readFile(absFilePath);
201     QByteArray passphrase;
202     if (QByteArray(QTest::currentDataTag()).contains("-pkcs8-"))
203         passphrase = QByteArray("1234");
204     QSslKey key(encoded, algorithm, format, type, passphrase);
205     QVERIFY(!key.isNull());
206 }
207 
208 #ifndef QT_NO_OPENSSL
209 
210 void tst_QSslKey::constructorHandle_data()
211 {
212     createPlainTestRows(true);
213 }
214 
215 void tst_QSslKey::constructorHandle()
216 {
217 #ifndef QT_BUILD_INTERNAL
218     QSKIP("This test requires -developer-build.");
219 #else
220     if (!QSslSocket::supportsSsl())
221         return;
222 
223     QFETCH(QString, absFilePath);
224     QFETCH(QSsl::KeyAlgorithm, algorithm);
225     QFETCH(QSsl::KeyType, type);
226     QFETCH(int, length);
227 
228     QByteArray pem = readFile(absFilePath);
229     auto func = (type == QSsl::KeyType::PublicKey
230                  ? q_PEM_read_bio_PUBKEY
231                  : q_PEM_read_bio_PrivateKey);
232 
233     QByteArray passphrase;
234     if (QByteArray(QTest::currentDataTag()).contains("-pkcs8-"))
235         passphrase = "1234";
236 
237     BIO* bio = q_BIO_new(q_BIO_s_mem());
238     q_BIO_write(bio, pem.constData(), pem.length());
239     EVP_PKEY* origin = func(bio, nullptr, nullptr, static_cast<void *>(passphrase.data()));
240     q_BIO_free(bio);
241 
242     bio = q_BIO_new(q_BIO_s_mem());
243     q_BIO_write(bio, pem.constData(), pem.length());
244     QSslKey key(func(bio, nullptr, nullptr, static_cast<void *>(passphrase.data())), type);
245     q_BIO_free(bio);
246 
247     EVP_PKEY* handle = static_cast<EVP_PKEY *>(key.handle());
248     QCOMPARE(EVP_PKEY_cmp(origin, handle), 1);
249     q_EVP_PKEY_free(handle);
250     q_EVP_PKEY_free(origin);
251 
252     QVERIFY(!key.isNull());
253     QCOMPARE(key.algorithm(), algorithm);
254     QCOMPARE(key.type(), type);
255     QCOMPARE(key.length(), length);
256 #endif
257 }
258 
259 #endif
260 
261 void tst_QSslKey::copyAndAssign_data()
262 {
263     createPlainTestRows();
264 }
265 
266 void tst_QSslKey::copyAndAssign()
267 {
268     if (!QSslSocket::supportsSsl())
269         return;
270 
271     QFETCH(QString, absFilePath);
272     QFETCH(QSsl::KeyAlgorithm, algorithm);
273     QFETCH(QSsl::KeyType, type);
274     QFETCH(QSsl::EncodingFormat, format);
275 
276     QByteArray encoded = readFile(absFilePath);
277     QByteArray passphrase;
278     if (QByteArray(QTest::currentDataTag()).contains("-pkcs8-"))
279         passphrase = QByteArray("1234");
280     QSslKey key(encoded, algorithm, format, type, passphrase);
281 
282     QSslKey copied(key);
283     QCOMPARE(key, copied);
284     QCOMPARE(key.algorithm(), copied.algorithm());
285     QCOMPARE(key.type(), copied.type());
286     QCOMPARE(key.length(), copied.length());
287     QCOMPARE(key.toPem(), copied.toPem());
288     QCOMPARE(key.toDer(), copied.toDer());
289 
290     QSslKey assigned = key;
291     QCOMPARE(key, assigned);
292     QCOMPARE(key.algorithm(), assigned.algorithm());
293     QCOMPARE(key.type(), assigned.type());
294     QCOMPARE(key.length(), assigned.length());
295     QCOMPARE(key.toPem(), assigned.toPem());
296     QCOMPARE(key.toDer(), assigned.toDer());
297 }
298 
299 void tst_QSslKey::equalsOperator()
300 {
301     // ### unimplemented
302 }
303 
304 void tst_QSslKey::length_data()
305 {
306     createPlainTestRows();
307 }
308 
309 void tst_QSslKey::length()
310 {
311     if (!QSslSocket::supportsSsl())
312         return;
313 
314     QFETCH(QString, absFilePath);
315     QFETCH(QSsl::KeyAlgorithm, algorithm);
316     QFETCH(QSsl::KeyType, type);
317     QFETCH(int, length);
318     QFETCH(QSsl::EncodingFormat, format);
319 
320     QByteArray encoded = readFile(absFilePath);
321     QByteArray passphrase;
322     if (QByteArray(QTest::currentDataTag()).contains("-pkcs8-"))
323         passphrase = QByteArray("1234");
324     QSslKey key(encoded, algorithm, format, type, passphrase);
325     QVERIFY(!key.isNull());
326     QCOMPARE(key.length(), length);
327 }
328 
329 void tst_QSslKey::toPemOrDer_data()
330 {
331     createPlainTestRows();
332 }
333 
334 void tst_QSslKey::toPemOrDer()
335 {
336     if (!QSslSocket::supportsSsl())
337         return;
338 
339     QFETCH(QString, absFilePath);
340     QFETCH(QSsl::KeyAlgorithm, algorithm);
341     QFETCH(QSsl::KeyType, type);
342     QFETCH(QSsl::EncodingFormat, format);
343 
344     QByteArray dataTag = QByteArray(QTest::currentDataTag());
345     if (dataTag.contains("-pkcs8-")) // these are encrypted
346         QSKIP("Encrypted PKCS#8 keys gets decrypted when loaded. So we can't compare it to the encrypted version.");
347 #ifndef QT_NO_OPENSSL
348     if (dataTag.contains("pkcs8"))
349         QSKIP("OpenSSL converts PKCS#8 keys to other formats, invalidating comparisons.");
350 #else // !openssl
351     if (dataTag.contains("pkcs8") && dataTag.contains("rsa"))
352         QSKIP("PKCS#8 RSA keys are changed into a different format in the generic back-end, meaning the comparison fails.");
353 #endif // openssl
354 
355     QByteArray encoded = readFile(absFilePath);
356     QSslKey key(encoded, algorithm, format, type);
357     QVERIFY(!key.isNull());
358     if (format == QSsl::Pem)
359         encoded.replace('\r', "");
360     QCOMPARE(format == QSsl::Pem ? key.toPem() : key.toDer(), encoded);
361 }
362 
363 void tst_QSslKey::toEncryptedPemOrDer_data()
364 {
365     QTest::addColumn<QString>("absFilePath");
366     QTest::addColumn<QSsl::KeyAlgorithm>("algorithm");
367     QTest::addColumn<QSsl::KeyType>("type");
368     QTest::addColumn<QSsl::EncodingFormat>("format");
369     QTest::addColumn<QString>("password");
370 
371     QStringList passwords;
372     passwords << " " << "foobar" << "foo bar"
373               << "aAzZ`1234567890-=~!@#$%^&*()_+[]{}\\|;:'\",.<>/?"; // ### add more (?)
374     foreach (KeyInfo keyInfo, keyInfoList) {
375         if (keyInfo.fileInfo.fileName().contains("pkcs8"))
376             continue; // pkcs8 keys are encrypted in a different way than the other keys
377         foreach (QString password, passwords) {
378             const QByteArray testName = keyInfo.fileInfo.fileName().toLatin1()
379             + '-' + (keyInfo.algorithm == QSsl::Rsa ? "RSA" :
380                                                       (keyInfo.algorithm == QSsl::Dsa ? "DSA" : "EC"))
381             + '-' + (keyInfo.type == QSsl::PrivateKey ? "PrivateKey" : "PublicKey")
382             + '-' + (keyInfo.format == QSsl::Pem ? "PEM" : "DER")
383             + password.toLatin1();
384             QTest::newRow(testName.constData())
385                 << keyInfo.fileInfo.absoluteFilePath() << keyInfo.algorithm << keyInfo.type
386                 << keyInfo.format << password;
387         }
388     }
389 }
390 
391 void tst_QSslKey::toEncryptedPemOrDer()
392 {
393     if (!QSslSocket::supportsSsl())
394         return;
395 
396     QFETCH(QString, absFilePath);
397     QFETCH(QSsl::KeyAlgorithm, algorithm);
398     QFETCH(QSsl::KeyType, type);
399     QFETCH(QSsl::EncodingFormat, format);
400     QFETCH(QString, password);
401 
402     QByteArray plain = readFile(absFilePath);
403     QSslKey key(plain, algorithm, format, type);
404     QVERIFY(!key.isNull());
405 
406     QByteArray pwBytes(password.toLatin1());
407 
408     if (type == QSsl::PrivateKey) {
409         QByteArray encryptedPem = key.toPem(pwBytes);
410         QVERIFY(!encryptedPem.isEmpty());
411         QSslKey keyPem(encryptedPem, algorithm, QSsl::Pem, type, pwBytes);
412         QVERIFY(!keyPem.isNull());
413         QCOMPARE(keyPem, key);
414         QCOMPARE(keyPem.toPem(), key.toPem());
415     } else {
416         // verify that public keys are never encrypted by toPem()
417         QByteArray encryptedPem = key.toPem(pwBytes);
418         QVERIFY(!encryptedPem.isEmpty());
419         QByteArray plainPem = key.toPem();
420         QVERIFY(!plainPem.isEmpty());
421         QCOMPARE(encryptedPem, plainPem);
422     }
423 
424     if (type == QSsl::PrivateKey) {
425         // verify that private keys are never "encrypted" by toDer() and
426         // instead an empty string is returned, see QTBUG-41038.
427         QByteArray encryptedDer = key.toDer(pwBytes);
428         QVERIFY(encryptedDer.isEmpty());
429     } else {
430         // verify that public keys are never encrypted by toDer()
431         QByteArray encryptedDer = key.toDer(pwBytes);
432         QVERIFY(!encryptedDer.isEmpty());
433         QByteArray plainDer = key.toDer();
434         QVERIFY(!plainDer.isEmpty());
435         QCOMPARE(encryptedDer, plainDer);
436     }
437 
438     // ### add a test to verify that public keys are _decrypted_ correctly (by the ctor)
439 }
440 
441 void tst_QSslKey::passphraseChecks_data()
442 {
443     QTest::addColumn<QString>("fileName");
444 
445     QTest::newRow("DES") << (testDataDir + "rsa-with-passphrase-des.pem");
446     QTest::newRow("3DES") << (testDataDir + "rsa-with-passphrase-3des.pem");
447     QTest::newRow("RC2") << (testDataDir + "rsa-with-passphrase-rc2.pem");
448 }
449 
450 void tst_QSslKey::passphraseChecks()
451 {
452     QFETCH(QString, fileName);
453 
454     QFile keyFile(fileName);
455     QVERIFY(keyFile.exists());
456     {
457         if (!keyFile.isOpen())
458             keyFile.open(QIODevice::ReadOnly);
459         else
460             keyFile.reset();
461         QSslKey key(&keyFile,QSsl::Rsa,QSsl::Pem, QSsl::PrivateKey);
462         QVERIFY(key.isNull()); // null passphrase => should not be able to decode key
463     }
464     {
465         if (!keyFile.isOpen())
466             keyFile.open(QIODevice::ReadOnly);
467         else
468             keyFile.reset();
469         QSslKey key(&keyFile,QSsl::Rsa,QSsl::Pem, QSsl::PrivateKey, "");
470         QVERIFY(key.isNull()); // empty passphrase => should not be able to decode key
471     }
472     {
473         if (!keyFile.isOpen())
474             keyFile.open(QIODevice::ReadOnly);
475         else
476             keyFile.reset();
477         QSslKey key(&keyFile,QSsl::Rsa,QSsl::Pem, QSsl::PrivateKey, "WRONG!");
478         QVERIFY(key.isNull()); // wrong passphrase => should not be able to decode key
479     }
480     {
481         if (!keyFile.isOpen())
482             keyFile.open(QIODevice::ReadOnly);
483         else
484             keyFile.reset();
485         QSslKey key(&keyFile,QSsl::Rsa,QSsl::Pem, QSsl::PrivateKey, "123");
486         QVERIFY(!key.isNull()); // correct passphrase
487     }
488 }
489 
490 void tst_QSslKey::noPassphraseChecks()
491 {
492     // be sure and check a key without passphrase too
493     QString fileName(testDataDir + "rsa-without-passphrase.pem");
494     QFile keyFile(fileName);
495     {
496         if (!keyFile.isOpen())
497             keyFile.open(QIODevice::ReadOnly);
498         else
499             keyFile.reset();
500         QSslKey key(&keyFile,QSsl::Rsa,QSsl::Pem, QSsl::PrivateKey);
501         QVERIFY(!key.isNull()); // null passphrase => should be able to decode key
502     }
503     {
504         if (!keyFile.isOpen())
505             keyFile.open(QIODevice::ReadOnly);
506         else
507             keyFile.reset();
508         QSslKey key(&keyFile,QSsl::Rsa,QSsl::Pem, QSsl::PrivateKey, "");
509         QVERIFY(!key.isNull()); // empty passphrase => should be able to decode key
510     }
511     {
512         if (!keyFile.isOpen())
513             keyFile.open(QIODevice::ReadOnly);
514         else
515             keyFile.reset();
516         QSslKey key(&keyFile,QSsl::Rsa,QSsl::Pem, QSsl::PrivateKey, "xxx");
517         QVERIFY(!key.isNull()); // passphrase given but key is not encrypted anyway => should work
518     }
519 }
520 
521 #ifdef TEST_CRYPTO
522 Q_DECLARE_METATYPE(QSslKeyPrivate::Cipher)
523 
524 void tst_QSslKey::encrypt_data()
525 {
526     QTest::addColumn<QSslKeyPrivate::Cipher>("cipher");
527     QTest::addColumn<QByteArray>("key");
528     QTest::addColumn<QByteArray>("plainText");
529     QTest::addColumn<QByteArray>("cipherText");
530 
531     QTest::newRow("DES-CBC, length 0")
532         << QSslKeyPrivate::DesCbc << QByteArray("01234567")
533         << QByteArray()
534         << QByteArray::fromHex("956585228BAF9B1F");
535     QTest::newRow("DES-CBC, length 1")
536         << QSslKeyPrivate::DesCbc << QByteArray("01234567")
537         << QByteArray(1, 'a')
538         << QByteArray::fromHex("E6880AF202BA3C12");
539     QTest::newRow("DES-CBC, length 2")
540         << QSslKeyPrivate::DesCbc << QByteArray("01234567")
541         << QByteArray(2, 'a')
542         << QByteArray::fromHex("A82492386EED6026");
543     QTest::newRow("DES-CBC, length 3")
544         << QSslKeyPrivate::DesCbc << QByteArray("01234567")
545         << QByteArray(3, 'a')
546         << QByteArray::fromHex("90B76D5B79519CBA");
547     QTest::newRow("DES-CBC, length 4")
548         << QSslKeyPrivate::DesCbc << QByteArray("01234567")
549         << QByteArray(4, 'a')
550         << QByteArray::fromHex("63E3DD6FED87052A");
551     QTest::newRow("DES-CBC, length 5")
552         << QSslKeyPrivate::DesCbc << QByteArray("01234567")
553         << QByteArray(5, 'a')
554         << QByteArray::fromHex("03ACDB0EACBDFA94");
555     QTest::newRow("DES-CBC, length 6")
556         << QSslKeyPrivate::DesCbc << QByteArray("01234567")
557         << QByteArray(6, 'a')
558         << QByteArray::fromHex("7D95024E42A3A88A");
559     QTest::newRow("DES-CBC, length 7")
560         << QSslKeyPrivate::DesCbc << QByteArray("01234567")
561         << QByteArray(7, 'a')
562         << QByteArray::fromHex("5003436B8A8E42E9");
563     QTest::newRow("DES-CBC, length 8")
564         << QSslKeyPrivate::DesCbc << QByteArray("01234567")
565         << QByteArray(8, 'a')
566         << QByteArray::fromHex("E4C1F054BF5521C0A4A0FD4A2BC6C1B1");
567 
568     QTest::newRow("DES-EDE3-CBC, length 0")
569         << QSslKeyPrivate::DesEde3Cbc << QByteArray("0123456789abcdefghijklmn")
570         << QByteArray()
571         << QByteArray::fromHex("3B2B4CD0B0FD495F");
572     QTest::newRow("DES-EDE3-CBC, length 8")
573         << QSslKeyPrivate::DesEde3Cbc << QByteArray("0123456789abcdefghijklmn")
574         << QByteArray(8, 'a')
575         << QByteArray::fromHex("F2A5A87763C54A72A3224103D90CDB03");
576 
577     QTest::newRow("RC2-40-CBC, length 0")
578         << QSslKeyPrivate::Rc2Cbc << QByteArray("01234")
579         << QByteArray()
580         << QByteArray::fromHex("6D05D52392FF6E7A");
581     QTest::newRow("RC2-40-CBC, length 8")
582         << QSslKeyPrivate::Rc2Cbc << QByteArray("01234")
583         << QByteArray(8, 'a')
584         << QByteArray::fromHex("75768E64C5749072A5D168F3AFEB0005");
585 
586     QTest::newRow("RC2-64-CBC, length 0")
587         << QSslKeyPrivate::Rc2Cbc << QByteArray("01234567")
588         << QByteArray()
589         << QByteArray::fromHex("ADAE6BF70F420130");
590     QTest::newRow("RC2-64-CBC, length 8")
591         << QSslKeyPrivate::Rc2Cbc << QByteArray("01234567")
592         << QByteArray(8, 'a')
593         << QByteArray::fromHex("C7BF5C80AFBE9FBEFBBB9FD935F6D0DF");
594 
595     QTest::newRow("RC2-128-CBC, length 0")
596         << QSslKeyPrivate::Rc2Cbc << QByteArray("012345679abcdefg")
597         << QByteArray()
598         << QByteArray::fromHex("1E965D483A13C8FB");
599     QTest::newRow("RC2-128-CBC, length 8")
600         << QSslKeyPrivate::Rc2Cbc << QByteArray("012345679abcdefg")
601         << QByteArray(8, 'a')
602         << QByteArray::fromHex("5AEC1A5B295660B02613454232F7DECE");
603 }
604 
605 void tst_QSslKey::encrypt()
606 {
607     QFETCH(QSslKeyPrivate::Cipher, cipher);
608     QFETCH(QByteArray, key);
609     QFETCH(QByteArray, plainText);
610     QFETCH(QByteArray, cipherText);
611     QByteArray iv("abcdefgh");
612 
613 #ifdef Q_OS_WINRT
614     QEXPECT_FAIL("RC2-40-CBC, length 0", "WinRT treats RC2 as 128-bit", Abort);
615     QEXPECT_FAIL("RC2-40-CBC, length 8", "WinRT treats RC2 as 128-bit", Abort);
616     QEXPECT_FAIL("RC2-64-CBC, length 0", "WinRT treats RC2 as 128-bit", Abort);
617     QEXPECT_FAIL("RC2-64-CBC, length 8", "WinRT treats RC2 as 128-bit", Abort);
618 #endif
619     QByteArray encrypted = QSslKeyPrivate::encrypt(cipher, plainText, key, iv);
620     QCOMPARE(encrypted, cipherText);
621 
622     QByteArray decrypted = QSslKeyPrivate::decrypt(cipher, cipherText, key, iv);
623     QCOMPARE(decrypted, plainText);
624 }
625 #endif
626 
627 #endif
628 
629 QTEST_MAIN(tst_QSslKey)
630 #include "tst_qsslkey.moc"
