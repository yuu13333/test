I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2021 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the test suite of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:GPL-EXCEPT$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
21 ** included in the packaging of this file. Please review the following
22 ** information to ensure the GNU General Public License requirements will
23 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
24 **
25 ** $QT_END_LICENSE$
26 **
27 ****************************************************************************/
28 
29 #include <QFile>
30 #include <QMap>
31 #include <QString>
32 #include <QTest>
33 #include <qdebug.h>
34 
35 
36 class tst_QMap : public QObject
37 {
38     Q_OBJECT
39 
40 private slots:
41     void insertion_int_int();
42     void insertion_int_string();
43     void insertion_string_int();
44 
45     void lookup_int_int();
46     void lookup_int_string();
47     void lookup_string_int();
48 
49     void iteration();
50     void toStdMap();
51     void iterator_begin();
52 
53     void ctorStdMap();
54 
55     void insertion_int_intx();
56     void insertion_int_int_with_hint1();
57     void insertion_int_int2();
58     void insertion_int_int_with_hint2();
59 
60     void insertion_string_int2();
61     void insertion_string_int2_hint();
62 
63     void insertMap();
64 };
65 
66 
67 void tst_QMap::insertion_int_int()
68 {
69     QMap<int, int> map;
70     QBENCHMARK {
71         for (int i = 0; i < 100000; ++i)
72             map.insert(i, i);
73     }
74 }
75 
76 void tst_QMap::insertion_int_intx()
77 {
78     // This is the same test - but executed later.
79     // The results in the beginning of the test seems to be a somewhat inaccurate.
80     QMap<int, int> map;
81     QBENCHMARK {
82         for (int i = 0; i < 100000; ++i)
83             map.insert(i, i);
84     }
85 }
86 
87 void tst_QMap::insertion_int_int_with_hint1()
88 {
89     QMap<int, int> map;
90     QBENCHMARK {
91         for (int i = 0; i < 100000; ++i)
92             map.insert(map.constEnd(), i, i);
93     }
94 }
95 
96 void tst_QMap::insertion_int_int2()
97 {
98     QMap<int, int> map;
99     QBENCHMARK {
100         for (int i = 100000; i >= 0; --i)
101             map.insert(i, i);
102     }
103 }
104 
105 void tst_QMap::insertion_int_int_with_hint2()
106 {
107     QMap<int, int> map;
108     QBENCHMARK {
109         for (int i = 100000; i >= 0; --i)
110             map.insert(map.constBegin(), i, i);
111     }
112 }
113 
114 void tst_QMap::insertion_int_string()
115 {
116     QMap<int, QString> map;
117     QString str("Hello World");
118     QBENCHMARK {
119         for (int i = 0; i < 100000; ++i)
120             map.insert(i, str);
121     }
122 }
123 
124 void tst_QMap::insertion_string_int()
125 {
126     QMap<QString, int> map;
127     QString str("Hello World");
128     QBENCHMARK {
129         for (int i = 1; i < 100000; ++i) {
130             const auto text = QStringView(QChar::fromUcs4(i));
131             str.replace(0, text.size(), text.toString());
132             map.insert(str, i);
133         }
134     }
135 }
136 
137 
138 void tst_QMap::lookup_int_int()
139 {
140     QMap<int, int> map;
141     for (int i = 0; i < 100000; ++i)
142         map.insert(i, i);
143 
144     int sum = 0;
145     QBENCHMARK {
146         for (int i = 0; i < 100000; ++i)
147              sum += map.value(i);
148     }
149 }
150 
151 void tst_QMap::lookup_int_string()
152 {
153     QMap<int, QString> map;
154     QString str("Hello World");
155     for (int i = 0; i < 100000; ++i)
156         map.insert(i, str);
157 
158     QBENCHMARK {
159         for (int i = 0; i < 100000; ++i)
160              str += map.value(i);
161     }
162 }
163 
164 void tst_QMap::lookup_string_int()
165 {
166     QMap<QString, int> map;
167     QString str("Hello World");
168     for (int i = 1; i < 100000; ++i) {
169         const auto text = QStringView(QChar::fromUcs4(i));
170         str.replace(0, text.size(), text.toString());
171         map.insert(str, i);
172     }
173 
174     int sum = 0;
175     QBENCHMARK {
176         for (int i = 1; i < 100000; ++i) {
177             const auto text = QStringView(QChar::fromUcs4(i));
178             str.replace(0, text.size(), text.toString());
179             sum += map.value(str);
180         }
181     }
182 }
183 
184 // iteration speed doesn't depend on the type of the map.
185 void tst_QMap::iteration()
186 {
187     QMap<int, int> map;
188     for (int i = 0; i < 100000; ++i)
189         map.insert(i, i);
190 
191     int j = 0;
192     QBENCHMARK {
193         for (int i = 0; i < 100; ++i) {
194             QMap<int, int>::const_iterator it = map.constBegin();
195             QMap<int, int>::const_iterator end = map.constEnd();
196             while (it != end) {
197                 j += *it;
198                 ++it;
199             }
200         }
201     }
202 }
203 
204 void tst_QMap::toStdMap()
205 {
206     QMap<int, int> map;
207     for (int i = 0; i < 100000; ++i)
208         map.insert(i, i);
209 
210     QBENCHMARK {
211         std::map<int, int> n = map.toStdMap();
212         n.begin();
213     }
214 }
215 
216 void tst_QMap::iterator_begin()
217 {
218     QMap<int, int> map;
219     for (int i = 0; i < 100000; ++i)
220         map.insert(i, i);
221 
222     QBENCHMARK {
223         for (int i = 0; i < 100000; ++i) {
224             QMap<int, int>::const_iterator it = map.constBegin();
225             QMap<int, int>::const_iterator end = map.constEnd();
226             if (it == end) // same as if (false)
227                 ++it;
228         }
229     }
230 }
231 
232 void tst_QMap::ctorStdMap()
233 {
234     std::map<int, int> map;
235     for (int i = 0; i < 100000; ++i)
236         map.insert(std::pair<int, int>(i, i));
237 
238     QBENCHMARK {
239         QMap<int, int> qmap(map);
240         qmap.constBegin();
241     }
242 }
243 
244 class XString : public QString
245 {
246 public:
247     bool operator < (const XString& x) const // an expensive operator <
248     {
249         return toInt() < x.toInt();
250     }
251 };
252 
253 void tst_QMap::insertion_string_int2()
254 {
255     QMap<XString, int> map;
256     QBENCHMARK {
257         for (int i = 1; i < 5000; ++i) {
258             XString str;
259             str.setNum(i);
260             map.insert(str, i);
261         }
262     }
263 }
264 
265 void tst_QMap::insertion_string_int2_hint()
266 {
267     QMap<XString, int> map;
268     QBENCHMARK {
269         for (int i = 1; i < 5000; ++i) {
270             XString str;
271             str.setNum(i);
272             map.insert(map.end(), str, i);
273         }
274     }
275 }
276 
277 void tst_QMap::insertMap()
278 {
279     QMap<int, int> map;
280     for (int i = 0; i < 100000; ++i)
281         map.insert(i * 4, 0);
282     QMap<int, int> map2;
283     for (int i = 0; i < 50000; ++i)
284         map2.insert(i * 7, 0);
285     QBENCHMARK_ONCE {
286         map.insert(map2);
287     }
288 }
289 
290 QTEST_MAIN(tst_QMap)
291 
292 #include "main.moc"
