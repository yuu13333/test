I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 Intel Corporation.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qdeadlinetimer.h"
41 #include "qdeadlinetimer_p.h"
42 #include "qnumeric_p.h"
43 
44 QT_BEGIN_NAMESPACE
45 
46 namespace {
47     class TimeReference
48     {
49         enum : qint64 {
50             kilo = 1000,
51             mega = kilo * 1000,
52             giga = mega * 1000
53         };
54         enum : unsigned {
55             umega = 1000 * 1000,
56             ugiga = mega * 1000
57         };
58     public:
59         inline TimeReference(qint64 = 0, unsigned = 0);
60         inline void updateTimer(qint64 &, unsigned &);
61 
62         inline bool addNanoseconds(qint64);
63         inline bool addMilliseconds(qint64);
64         bool addSecsAndNSecs(qint64, qint64);
65 
66         inline bool subtract(const qint64, const unsigned);
67 
68         inline bool toMilliseconds(qint64 *) const;
69         inline bool toNanoseconds(qint64 *) const;
70 
71     private:
72         bool adjust(const qint64, const unsigned, bool = false);
73 
74     private:
75         qint64 secs;
76         unsigned nsecs;
77     };
78 }
79 
80 inline TimeReference::TimeReference(qint64 t1, unsigned t2)
81     : secs(t1), nsecs(t2)
82 {
83 }
84 
85 inline void TimeReference::updateTimer(qint64 &t1, unsigned &t2)
86 {
87     t1 = secs;
88     t2 = nsecs;
89 }
90 
91 #if defined(Q_OS_UNIX) && !defined(Q_OS_DARWIN)
92 inline bool TimeReference::addNanoseconds(qint64 arg)
93 {
94     return addSecsAndNSecs(arg / giga, arg % giga);
95 }
96 
97 inline bool TimeReference::addMilliseconds(qint64 arg)
98 {
99     return addSecsAndNSecs(arg / kilo, (arg % kilo) * mega);
100 }
101 
102 bool TimeReference::addSecsAndNSecs(qint64 addSecs, qint64 addNSecs)
103 {
104     // Normalize the arguments
105     if (qAbs(addNSecs) >= giga) {
106         if (add_overflow<qint64>(addSecs, addNSecs / giga, &addSecs))
107             return false;
108 
109         addNSecs %= giga;
110     }
111 
112     return (addNSecs < 0) ? adjust(addSecs, ugiga - unsigned(-addNSecs), true) : adjust(addSecs, unsigned(addNSecs));
113 }
114 
115 
116 bool TimeReference::adjust(const qint64 t1, const unsigned t2, bool owed)
117 {
118     Q_STATIC_ASSERT(QDeadlineTimerNanosecondsInT2);
119 
120     qint64 carrySeconds = owed ? -1 : 0;       // It'd be {-1, 0, 1} depending on the nanoseconds
121 
122     nsecs += t2;
123     if (nsecs >= ugiga) {
124         nsecs -= ugiga;
125         carrySeconds++;
126     }
127 
128     // TODO: Fix this so to catch the unlikely case where secs + t1 overflows, but the sum is still salvageable due to the carried second
129     return !add_overflow<qint64>(secs, t1, &secs) && !add_overflow<qint64>(secs, carrySeconds, &secs);
130 }
131 
132 inline bool TimeReference::subtract(const qint64 t1, const unsigned t2)
133 {
134     Q_ASSERT(t2 < ugiga);
135     return adjust(-t1, ugiga - t2, true);
136 }
137 
138 inline bool TimeReference::toMilliseconds(qint64 *result) const
139 {
140     static constexpr qint64 maxSeconds = std::numeric_limits<qint64>::max() / kilo;
141     static constexpr qint64 minSeconds = std::numeric_limits<qint64>::min() / kilo;
142     if (secs > maxSeconds || secs < minSeconds)
143         return false;
144 
145     return !add_overflow<qint64>(secs * kilo, nsecs / umega, result);
146 }
147 
148 inline bool TimeReference::toNanoseconds(qint64 *result) const
149 {
150     static constexpr qint64 maxSeconds = std::numeric_limits<qint64>::max() / giga;
151     static constexpr qint64 minSeconds = std::numeric_limits<qint64>::min() / giga;
152     if (secs > maxSeconds || secs < minSeconds)
153         return false;
154 
155     return !add_overflow<qint64>(secs * giga, nsecs, result);
156 }
157 #else
158 inline bool TimeReference::addNanoseconds(qint64 arg)
159 {
160     return adjust(arg, 0);
161 }
162 
163 inline bool TimeReference::addMilliseconds(qint64 arg)
164 {
165     static constexpr qint64 maxMilliseconds = std::numeric_limits<qint64>::max() / mega;
166     if (qAbs(arg) > maxMilliseconds)
167         return false;
168 
169     return addNanoseconds(arg * mega);
170 }
171 
172 inline bool TimeReference::addSecsAndNSecs(qint64 addSecs, qint64 addNSecs)
173 {
174     static constexpr qint64 maxSeconds = std::numeric_limits<qint64>::max() / giga;
175     static constexpr qint64 minSeconds = std::numeric_limits<qint64>::min() / giga;
176     if (addSecs > maxSeconds || addSecs < minSeconds || add_overflow<qint64>(addSecs * giga, addNSecs, &addNSecs))
177         return false;
178 
179     return addNanoseconds(addNSecs);
180 }
181 
182 
183 bool TimeReference::adjust(const qint64 t1, const unsigned t2, bool owed)
184 {
185     Q_STATIC_ASSERT(!QDeadlineTimerNanosecondsInT2);
186     Q_UNUSED(t2);
187     Q_UNUSED(owed);
188 
189     return !add_overflow<qint64>(secs, t1, &secs);
190 }
191 
192 inline bool TimeReference::subtract(const qint64 t1, const unsigned t2)
193 {
194     Q_UNUSED(t2);
195 
196     return addNanoseconds(-t1);
197 }
198 
199 inline bool TimeReference::toMilliseconds(qint64 *result) const
200 {
201     *result = secs / mega;
202     return true;
203 }
204 
205 inline bool TimeReference::toNanoseconds(qint64 *result) const
206 {
207     *result = secs;
208     return true;
209 }
210 #endif
211 
212 /*!
213     \class QDeadlineTimer
214     \inmodule QtCore
215     \brief The QDeadlineTimer class marks a deadline in the future.
216     \since 5.8
217 
218     \reentrant
219     \ingroup tools
220 
221     The QDeadlineTimer class is usually used to calculate future deadlines and
222     verify whether the deadline has expired. QDeadlineTimer can also be used
223     for deadlines without expiration ("forever"). It forms a counterpart to
224     QElapsedTimer, which calculates how much time has elapsed since
225     QElapsedTimer::start() was called.
226 
227     QDeadlineTimer provides a more convenient API compared to
228     QElapsedTimer::hasExpired().
229 
230     The typical use-case for the class is to create a QDeadlineTimer before the
231     operation in question is started, and then use remainingTime() or
232     hasExpired() to determine whether to continue trying the operation.
233     QDeadlineTimer objects can be passed to functions being called to execute
234     this operation so they know how long to still operate.
235 
236     \code
237     void executeOperation(int msecs)
238     {
239         QDeadlineTimer deadline(msecs);
240         do {
241             if (readFromDevice(deadline.remainingTime())
242                 break;
243             waitForReadyRead(deadline);
244         } while (!deadline.hasExpired());
245     }
246     \endcode
247 
248     Many QDeadlineTimer functions deal with time out values, which all are
249     measured in milliseconds. There are two special values, the same as many
250     other Qt functions named \c{waitFor} or similar:
251 
252     \list
253       \li 0: no time left, expired
254       \li -1: infinite time left, timer never expires
255     \endlist
256 
257     \section1 Reference Clocks
258 
259     QDeadlineTimer will use the same clock as QElapsedTimer (see
260     QElapsedTimer::clockType() and QElapsedTimer::isMonotonic()).
261 
262     \section1 Timer types
263 
264     Like QTimer, QDeadlineTimer can select among different levels of coarseness
265     on the timers. You can select precise timing by passing Qt::PreciseTimer to
266     the functions that set of change the timer, or you can select coarse timing
267     by passing Qt::CoarseTimer. Qt::VeryCoarseTimer is currently interpreted
268     the same way as Qt::CoarseTimer.
269 
270     This feature is dependent on support from the operating system: if the OS
271     does not support a coarse timer functionality, then QDeadlineTimer will
272     behave like Qt::PreciseTimer was passed.
273 
274     QDeadlineTimer defaults to Qt::CoarseTimer because on operating systems
275     that do support coarse timing, making timing calls to that clock source is
276     often much more efficient. The level of coarseness depends on the
277     operating system, but should be in the order of a couple of milliseconds.
278 
279     \section1 \c{std::chrono} Compatibility
280 
281     QDeadlineTimer is compatible with the \c{std::chrono} API from C++11 and
282     can be constructed from or compared to both \c{std::chrono::duration} and
283     \c{std::chrono::time_point} objects. In addition, it is fully compatible
284     with the time literals from C++14, which allow one to write code as:
285 
286     \code
287         using namespace std::chrono;
288         using namespace std::chrono_literals;
289 
290         QDeadlineTimer deadline(30s);
291         device->waitForReadyRead(deadline);
292         if (deadline.remainingTime<nanoseconds>() > 300ms)
293             cleanup();
294     \endcode
295 
296     As can be seen in the example above, QDeadlineTimer offers a templated
297     version of remainingTime() and deadline() that can be used to return
298     \c{std::chrono} objects.
299 
300     Note that comparing to \c{time_point} is not as efficient as comparing to
301     \c{duration}, since QDeadlineTimer may need to convert from its own
302     internal clock source to the clock source used by the \c{time_point} object.
303     Also note that, due to this conversion, the deadlines will not be precise,
304     so the following code is not expected to compare equally:
305 
306     \code
307         using namespace std::chrono;
308         using namespace std::chrono_literals;
309         auto now = steady_clock::now();
310         QDeadlineTimer deadline(now + 1s);
311         Q_ASSERT(deadline == now + 1s);
312     \endcode
313 
314     \sa QTime, QTimer, QDeadlineTimer, Qt::TimerType
315 */
316 
317 /*!
318     \enum QDeadlineTimer::ForeverConstant
319 
320     \value Forever      Used when creating a QDeadlineTimer to indicate the
321                         deadline should not expire
322 */
323 
324 /*!
325     \fn QDeadlineTimer::QDeadlineTimer(Qt::TimerType timerType)
326 
327     Constructs an expired QDeadlineTimer object. For this object,
328     remainingTime() will return 0.
329 
330     The timer type \a timerType may be ignored, since the timer is already
331     expired. Similarly, for optimization purposes, this function will not
332     attempt to obtain the current time and will use a value known to be in the
333     past. Therefore, deadline() may return an unexpected value and this object
334     cannot be used in calculation of how long it is overdue. If that
335     functionality is required, use QDeadlineTimer::current().
336 
337     \sa hasExpired(), remainingTime(), Qt::TimerType, current()
338 */
339 
340 /*!
341     \fn QDeadlineTimer::QDeadlineTimer(ForeverConstant, Qt::TimerType timerType)
342 
343     QDeadlineTimer objects created with ForeverConstant never expire.
344     For such objects, remainingTime() will return -1, deadline() will return the
345     maximum value, and isForever() will return true.
346 
347     The timer type \a timerType may be ignored, since the timer is already
348     expired.
349 
350     \sa ForeverConstant, hasExpired(), isForever(), remainingTime(), timerType()
351 */
352 
353 /*!
354     Constructs a QDeadlineTimer object with an expiry time of \a msecs msecs
355     from the moment of the creation of this object, if msecs is positive. If \a
356     msecs is zero, this QDeadlineTimer will be marked as expired, causing
357     remainingTime() to return zero and deadline() to return an indeterminate
358     time point in the past. If \a msecs is -1, the timer will be set it to
359     never expire, causing remainingTime() to return -1 and deadline() to return
360     the maximum value.
361 
362     The QDeadlineTimer object will be constructed with the specified timer \a type.
363 
364     For optimization purposes, if \a msecs is zero, this function may skip
365     obtaining the current time and may instead use a value known to be in the
366     past. If that happens, deadline() may return an unexpected value and this
367     object cannot be used in calculation of how long it is overdue. If that
368     functionality is required, use QDeadlineTimer::current() and add time to
369     it.
370 
371     \sa hasExpired(), isForever(), remainingTime(), setRemainingTime()
372 */
373 QDeadlineTimer::QDeadlineTimer(qint64 msecs, Qt::TimerType type) Q_DECL_NOTHROW
374     : t2(0)
375 {
376     setRemainingTime(msecs, type);
377 }
378 
379 /*!
380     \fn template <class Clock, class Duration> QDeadlineTimer::QDeadlineTimer(std::chrono::time_point<Clock, Duration> deadline, Qt::TimerType type)
381 
382     Constructs a QDeadlineTimer object with a deadline at \a deadline time
383     point, converting from the clock source \c{Clock} to Qt's internal clock
384     source (see QElapsedTimer::clockType()).
385 
386     If \a deadline is in the past, this QDeadlineTimer object is set to
387     expired, whereas if \a deadline is equal to \c{Duration::max()}, then this
388     object is set to never expire.
389 
390     The QDeadlineTimer object will be constructed with the specified timer \a type.
391 
392     \sa hasExpired(), isForever(), remainingTime(), setDeadline()
393 */
394 
395 /*!
396     \fn template <class Rep, class Period> QDeadlineTimer::QDeadlineTimer(std::chrono::duration<Rep, Period> remaining, Qt::TimerType type)
397 
398     Constructs a QDeadlineTimer object with a remaining time of \a remaining.
399     If \a remaining is zero or negative, this QDeadlineTimer object will be
400     mark as expired, whereas if \a remaining is equal to \c{duration::max()},
401     the object will be set to never expire.
402 
403     The QDeadlineTimer object will be constructed with the specified timer \a type.
404 
405     This constructor can be used with C++14's user-defined literals for time, such as in:
406 
407     \code
408         using namespace std::chrono_literals;
409         QDeadlineTimer deadline(250ms);
410     \endcode
411 
412     For optimization purposes, if \a remaining is zero or negative, this
413     function may skip obtaining the current time and may instead use a value
414     known to be in the past. If that happens, deadline() may return an
415     unexpected value and this object cannot be used in calculation of how long
416     it is overdue. If that functionality is required, use
417     QDeadlineTimer::current() and add time to it.
418 
419     \sa hasExpired(), isForever(), remainingTime(), setRemainingTime()
420 */
421 
422 /*!
423     \fn template <class Clock, class Duration> void QDeadlineTimer::setDeadline(std::chrono::time_point<Clock, Duration> deadline, Qt::TimerType type)
424 
425     Sets this QDeadlineTimer to the deadline marked by \a deadline time
426     point, converting from the clock source \c{Clock} to Qt's internal clock
427     source (see QElapsedTimer::clockType()).
428 
429     If \a deadline is in the past, this QDeadlineTimer object is set to
430     expired, whereas if \a deadline is equal to \c{Duration::max()}, then this
431     object is set to never expire.
432 
433     The timer type for this QDeadlineTimer object will be set to the specified \a type.
434 
435     \sa hasExpired(), isForever(), remainingTime(),
436 */
437 
438 /*!
439     Sets the remaining time for this QDeadlineTimer object to \a msecs
440     milliseconds from now, if \a msecs has a positive value. If \a msecs is
441     zero, this QDeadlineTimer object will be marked as expired, whereas a value
442     of -1 will set it to never expire.
443 
444     The timer type for this QDeadlineTimer object will be set to the specified \a timerType.
445 
446     \sa setPreciseRemainingTime(), hasExpired(), isForever(), remainingTime()
447 */
448 void QDeadlineTimer::setRemainingTime(qint64 msecs, Qt::TimerType timerType) Q_DECL_NOTHROW
449 {
450     if (msecs == -1) {
451         *this = QDeadlineTimer(Forever, timerType);
452         return;
453     }
454 
455     *this = current(timerType);
456 
457     TimeReference ref(t1, t2);
458     if (!ref.addMilliseconds(msecs)) {
459         *this = QDeadlineTimer(Forever, timerType);
460         return;
461     }
462     ref.updateTimer(t1, t2);
463 }
464 
465 /*!
466     Sets the remaining time for this QDeadlineTimer object to \a secs seconds
467     plus \a nsecs nanoseconds from now, if \a secs has a positive value. If \a
468     secs is -1, this QDeadlineTimer will be set it to never expire. If both
469     parameters are zero, this QDeadlineTimer will be marked as expired.
470 
471     The timer type for this QDeadlineTimer object will be set to the specified
472     \a timerType.
473 
474     \sa setRemainingTime(), hasExpired(), isForever(), remainingTime()
475 */
476 void QDeadlineTimer::setPreciseRemainingTime(qint64 secs, qint64 nsecs, Qt::TimerType timerType) Q_DECL_NOTHROW
477 {
478     if (secs == -1) {
479         *this = QDeadlineTimer(Forever, timerType);
480         return;
481     }
482 
483     *this = current(timerType);
484     TimeReference ref(t1, t2);
485     if (!ref.addSecsAndNSecs(secs, nsecs)) {
486         *this = QDeadlineTimer(Forever, timerType);
487         return;
488     }
489     ref.updateTimer(t1, t2);
490 }
491 
492 /*!
493     \overload
494     \fn template <class Rep, class Period> void QDeadlineTimer::setRemainingTime(std::chrono::duration<Rep, Period> remaining, Qt::TimerType type)
495 
496     Sets the remaining time for this QDeadlineTimer object to \a remaining. If
497     \a remaining is zero or negative, this QDeadlineTimer object will be mark
498     as expired, whereas if \a remaining is equal to \c{duration::max()}, the
499     object will be set to never expire.
500 
501     The timer type for this QDeadlineTimer object will be set to the specified \a type.
502 
503     This function can be used with C++14's user-defined literals for time, such as in:
504 
505     \code
506         using namespace std::chrono_literals;
507         deadline.setRemainingTime(250ms);
508     \endcode
509 
510     \note Qt detects the necessary C++14 compiler support by way of the feature
511     test recommendations from
512     \l{https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations}
513     {C++ Committee's Standing Document 6}.
514 
515     \sa setDeadline(), remainingTime(), hasExpired(), isForever()
516 */
517 
518 /*!
519     \fn bool QDeadlineTimer::isForever() const
520 
521     Returns true if this QDeadlineTimer object never expires, false otherwise.
522     For timers that never expire, remainingTime() always returns -1 and
523     deadline() returns the maximum value.
524 
525     \sa ForeverConstant, hasExpired(), remainingTime()
526 */
527 
528 /*!
529     Returns true if this QDeadlineTimer object has expired, false if there
530     remains time left. For objects that have expired, remainingTime() will
531     return zero and deadline() will return a time point in the past.
532 
533     QDeadlineTimer objects created with the \l {ForeverConstant} never expire
534     and this function always returns false for them.
535 
536     \sa isForever(), remainingTime()
537 */
538 bool QDeadlineTimer::hasExpired() const Q_DECL_NOTHROW
539 {
540     if (isForever())
541         return false;
542     return *this <= current(timerType());
543 }
544 
545 /*!
546     \fn Qt::TimerType QDeadlineTimer::timerType() const
547 
548     Returns the timer type is active for this object.
549 
550     \sa setTimerType()
551 */
552 
553 /*!
554     Changes the timer type for this object to \a timerType.
555 
556     The behavior for each possible value of \a timerType is operating-system
557     dependent. Qt::PreciseTimer will use the most precise timer that Qt can
558     find, with resolution of 1 millisecond or better, whereas QDeadlineTimer
559     will try to use a more coarse timer for Qt::CoarseTimer and
560     Qt::VeryCoarseTimer.
561 
562     \sa Qt::TimerType
563  */
564 void QDeadlineTimer::setTimerType(Qt::TimerType timerType)
565 {
566     type = timerType;
567 }
568 
569 /*!
570     Returns the remaining time in this QDeadlineTimer object in milliseconds.
571     If the timer has already expired, this function will return zero and it is
572     not possible to obtain the amount of time overdue with this function (to do
573     that, see deadline()). If the timer was set to never expire, this function
574     returns -1.
575 
576     This function is suitable for use in Qt APIs that take a millisecond
577     timeout, such as the many \l QIODevice \c waitFor functions or the timed
578     lock functions in \l QMutex, \l QWaitCondition, \l QSemaphore, or
579     \l QReadWriteLock. For example:
580 
581     \code
582         mutex.tryLock(deadline.remainingTime());
583     \endcode
584 
585     \sa remainingTimeNSecs(), isForever(), hasExpired()
586 */
587 qint64 QDeadlineTimer::remainingTime() const Q_DECL_NOTHROW
588 {
589     if (isForever())
590         return -1;
591 
592     QDeadlineTimer now = current(timerType());
593     TimeReference ref(t1, t2);
594 
595     qint64 msecs;
596     if (!ref.subtract(now.t1, now.t2) || !ref.toMilliseconds(&msecs))
597         return -1;
598 
599     return msecs < 0 ? 0 : msecs;
600 }
601 
602 /*!
603     Returns the remaining time in this QDeadlineTimer object in nanoseconds. If
604     the timer has already expired, this function will return zero and it is not
605     possible to obtain the amount of time overdue with this function. If the
606     timer was set to never expire, this function returns -1.
607 
608     \sa remainingTime(), isForever(), hasExpired()
609 */
610 qint64 QDeadlineTimer::remainingTimeNSecs() const Q_DECL_NOTHROW
611 {
612     if (isForever())
613         return -1;
614     qint64 raw = rawRemainingTimeNSecs();
615     return raw < 0 ? 0 : raw;
616 }
617 
618 /*!
619     \internal
620     Same as remainingTimeNSecs, but may return negative remaining times. Does
621     not deal with Forever. In case of overflow or underflow the result is
622     saturated to the maximum possible value.
623 */
624 qint64 QDeadlineTimer::rawRemainingTimeNSecs() const Q_DECL_NOTHROW
625 {
626     QDeadlineTimer now = current(timerType());
627     TimeReference ref(t1, t2);
628 
629     qint64 nsecs;
630     if (!ref.subtract(now.t1, now.t2) || !ref.toNanoseconds(&nsecs))
631         return std::numeric_limits<qint64>::max();
632 
633     return nsecs;
634 }
635 
636 /*!
637     Returns the absolute time point for the deadline stored in QDeadlineTimer
638     object, calculated in milliseconds relative to the reference clock, the
639     same as QElapsedTimer::msecsSinceReference(). The value will be in the past
640     if this QDeadlineTimer has expired.
641 
642     If this QDeadlineTimer never expires, this function returns
643     \c{std::numeric_limits<qint64>::max()}.
644 
645     This function can be used to calculate the amount of time a timer is
646     overdue, by subtracting QDeadlineTimer::current() or
647     QElapsedTimer::msecsSinceReference(), as in the following example:
648 
649     \code
650         qint64 realTimeLeft = deadline.deadline();
651         if (realTimeLeft != (std::numeric_limits<qint64>::max)()) {
652             realTimeLeft -= QDeadlineTimer::current().deadline();
653             // or:
654             //QElapsedTimer timer;
655             //timer.start();
656             //realTimeLeft -= timer.msecsSinceReference();
657         }
658     \endcode
659 
660     \note Timers that were created as expired have an indetermine time point in
661     the past as their deadline, so the above calculation may not work.
662 
663     \sa remainingTime(), deadlineNSecs(), setDeadline()
664 */
665 qint64 QDeadlineTimer::deadline() const Q_DECL_NOTHROW
666 {
667     if (isForever())
668         return std::numeric_limits<qint64>::max();
669 
670     qint64 result;
671     return TimeReference(t1, t2).toMilliseconds(&result) ? result : std::numeric_limits<qint64>::max();
672 }
673 
674 /*!
675     Returns the absolute time point for the deadline stored in QDeadlineTimer
676     object, calculated in nanoseconds relative to the reference clock, the
677     same as QElapsedTimer::msecsSinceReference(). The value will be in the past
678     if this QDeadlineTimer has expired.
679 
680     If this QDeadlineTimer never expires or the number of nanoseconds until the
681     deadline can't be accommodated in the return type, this function returns
682     \c{std::numeric_limits<qint64>::max()}.
683 
684     This function can be used to calculate the amount of time a timer is
685     overdue, by subtracting QDeadlineTimer::current(), as in the following
686     example:
687 
688     \code
689         qint64 realTimeLeft = deadline.deadlineNSecs();
690         if (realTimeLeft != std::numeric_limits<qint64>::max())
691             realTimeLeft -= QDeadlineTimer::current().deadlineNSecs();
692     \endcode
693 
694     \note Timers that were created as expired have an indetermine time point in
695     the past as their deadline, so the above calculation may not work.
696 
697     \sa remainingTime(), deadlineNSecs()
698 */
699 qint64 QDeadlineTimer::deadlineNSecs() const Q_DECL_NOTHROW
700 {
701     if (isForever())
702         return std::numeric_limits<qint64>::max();
703 
704     qint64 result;
705     return TimeReference(t1, t2).toNanoseconds(&result) ? result : std::numeric_limits<qint64>::max();
706 }
707 
708 /*!
709     Sets the deadline for this QDeadlineTimer object to be the \a msecs
710     absolute time point, counted in milliseconds since the reference clock (the
711     same as QElapsedTimer::msecsSinceReference()), and the timer type to \a
712     timerType. If the value is in the past, this QDeadlineTimer will be marked
713     as expired.
714 
715     If \a msecs is \c{std::numeric_limits<qint64>::max()} or the deadline is
716     beyond a representable point in the future, this QDeadlineTimer will be set
717     to never expire.
718 
719     \sa setPreciseDeadline(), deadline(), deadlineNSecs(), setRemainingTime()
720 */
721 void QDeadlineTimer::setDeadline(qint64 msecs, Qt::TimerType timerType) Q_DECL_NOTHROW
722 {
723     type = timerType;
724 
725     TimeReference ref;
726     if (msecs == std::numeric_limits<qint64>::max() || !ref.addMilliseconds(msecs)) {
727         *this = QDeadlineTimer(Forever, timerType);
728         return;
729     }
730     ref.updateTimer(t1, t2);
731 }
732 
733 /*!
734     Sets the deadline for this QDeadlineTimer object to be \a secs seconds and
735     \a nsecs nanoseconds since the reference clock epoch (the same as
736     QElapsedTimer::msecsSinceReference()), and the timer type to \a timerType.
737     If the value is in the past, this QDeadlineTimer will be marked as expired.
738 
739     If \a secs or \a nsecs is \c{std::numeric_limits<qint64>::max()}, this
740     QDeadlineTimer will be set to never expire. If \a nsecs is more than 1
741     billion nanoseconds (1 second), then \a secs will be adjusted accordingly.
742 
743     \sa setDeadline(), deadline(), deadlineNSecs(), setRemainingTime()
744 */
745 void QDeadlineTimer::setPreciseDeadline(qint64 secs, qint64 nsecs, Qt::TimerType timerType) Q_DECL_NOTHROW
746 {
747     type = timerType;
748 
749     TimeReference ref;
750     if (!ref.addSecsAndNSecs(secs, nsecs)) {
751         *this = QDeadlineTimer(Forever, timerType);
752         return;
753     }
754     ref.updateTimer(t1, t2);
755 }
756 
757 /*!
758     Returns a QDeadlineTimer object whose deadline is extended from \a dt's
759     deadline by \a nsecs nanoseconds. If \a dt was set to never expire, this
760     function returns a QDeadlineTimer that will not expire either.
761 
762     \note if \a dt was created as expired, its deadline is indeterminate and
763     adding an amount of time may or may not cause it to become unexpired.
764 */
765 QDeadlineTimer QDeadlineTimer::addNSecs(QDeadlineTimer dt, qint64 nsecs) Q_DECL_NOTHROW
766 {
767     if (dt.isForever())
768         return dt;
769 
770     TimeReference ref(dt.t1, dt.t2);
771     if (!ref.addNanoseconds(nsecs))
772         return QDeadlineTimer(Forever, dt.timerType());
773     ref.updateTimer(dt.t1, dt.t2);
774 
775     return dt;
776 }
777 
778 /*!
779     \fn QDeadlineTimer QDeadlineTimer::current(Qt::TimerType timerType)
780 
781     Returns a QDeadlineTimer that is expired but is guaranteed to contain the
782     current time. Objects created by this function can participate in the
783     calculation of how long a timer is overdue, using the deadline() function.
784 
785     The QDeadlineTimer object will be constructed with the specified \a timerType.
786 */
787 
788 /*!
789     \fn bool operator==(QDeadlineTimer d1, QDeadlineTimer d2)
790     \relates QDeadlineTimer
791 
792     Returns true if the deadline on \a d1 and the deadline in \a d2 are the
793     same, false otherwise. The timer type used to create the two deadlines is
794     ignored. This function is equivalent to:
795 
796     \code
797         return d1.deadlineNSecs() == d2.deadlineNSecs();
798     \endcode
799 
800     \note comparing QDeadlineTimer objects with different timer types is
801     not supported and may result in unpredictable behavior.
802 */
803 
804 /*!
805     \fn bool operator!=(QDeadlineTimer d1, QDeadlineTimer d2)
806     \relates QDeadlineTimer
807 
808     Returns true if the deadline on \a d1 and the deadline in \a d2 are
809     diferent, false otherwise. The timer type used to create the two deadlines
810     is ignored. This function is equivalent to:
811 
812     \code
813         return d1.deadlineNSecs() != d2.deadlineNSecs();
814     \endcode
815 
816     \note comparing QDeadlineTimer objects with different timer types is
817     not supported and may result in unpredictable behavior.
818 */
819 
820 /*!
821     \fn bool operator<(QDeadlineTimer d1, QDeadlineTimer d2)
822     \relates QDeadlineTimer
823 
824     Returns true if the deadline on \a d1 is earlier than the deadline in \a
825     d2, false otherwise. The timer type used to create the two deadlines is
826     ignored. This function is equivalent to:
827 
828     \code
829         return d1.deadlineNSecs() < d2.deadlineNSecs();
830     \endcode
831 
832     \note comparing QDeadlineTimer objects with different timer types is
833     not supported and may result in unpredictable behavior.
834 */
835 
836 /*!
837     \fn bool operator<=(QDeadlineTimer d1, QDeadlineTimer d2)
838     \relates QDeadlineTimer
839 
840     Returns true if the deadline on \a d1 is earlier than or the same as the
841     deadline in \a d2, false otherwise. The timer type used to create the two
842     deadlines is ignored. This function is equivalent to:
843 
844     \code
845         return d1.deadlineNSecs() <= d2.deadlineNSecs();
846     \endcode
847 
848     \note comparing QDeadlineTimer objects with different timer types is
849     not supported and may result in unpredictable behavior.
850 */
851 
852 /*!
853     \fn bool operator>(QDeadlineTimer d1, QDeadlineTimer d2)
854     \relates QDeadlineTimer
855 
856     Returns true if the deadline on \a d1 is later than the deadline in \a
857     d2, false otherwise. The timer type used to create the two deadlines is
858     ignored. This function is equivalent to:
859 
860     \code
861         return d1.deadlineNSecs() > d2.deadlineNSecs();
862     \endcode
863 
864     \note comparing QDeadlineTimer objects with different timer types is
865     not supported and may result in unpredictable behavior.
866 */
867 
868 /*!
869     \fn bool operator>=(QDeadlineTimer d1, QDeadlineTimer d2)
870     \relates QDeadlineTimer
871 
872     Returns true if the deadline on \a d1 is later than or the same as the
873     deadline in \a d2, false otherwise. The timer type used to create the two
874     deadlines is ignored. This function is equivalent to:
875 
876     \code
877         return d1.deadlineNSecs() >= d2.deadlineNSecs();
878     \endcode
879 
880     \note comparing QDeadlineTimer objects with different timer types is
881     not supported and may result in unpredictable behavior.
882 */
883 
884 /*!
885     \fn QDeadlineTimer operator+(QDeadlineTimer dt, qint64 msecs)
886     \relates QDeadlineTimer
887 
888     Returns a QDeadlineTimer object whose deadline is \a msecs later than the
889     deadline stored in \a dt. If \a dt is set to never expire, this function
890     returns a QDeadlineTimer that does not expire either.
891 
892     To add times of precision greater than 1 millisecond, use addNSecs().
893 */
894 
895 QDeadlineTimer operator+(QDeadlineTimer dt, qint64 msecs)
896 {
897     if (dt.isForever())
898         return dt;
899 
900     TimeReference ref(dt.t1, dt.t2);
901     if (!ref.addMilliseconds(msecs))
902         return QDeadlineTimer(QDeadlineTimer::Forever, Qt::TimerType(dt.type));
903     ref.updateTimer(dt.t1, dt.t2);
904 
905     return dt;
906 }
907 
908 /*!
909     \fn QDeadlineTimer operator+(qint64 msecs, QDeadlineTimer dt)
910     \relates QDeadlineTimer
911 
912     Returns a QDeadlineTimer object whose deadline is \a msecs later than the
913     deadline stored in \a dt. If \a dt is set to never expire, this function
914     returns a QDeadlineTimer that does not expire either.
915 
916     To add times of precision greater than 1 millisecond, use addNSecs().
917 */
918 
919 /*!
920     \fn QDeadlineTimer operator-(QDeadlineTimer dt, qint64 msecs)
921     \relates QDeadlineTimer
922 
923     Returns a QDeadlineTimer object whose deadline is \a msecs before the
924     deadline stored in \a dt. If \a dt is set to never expire, this function
925     returns a QDeadlineTimer that does not expire either.
926 
927     To subtract times of precision greater than 1 millisecond, use addNSecs().
928 */
929 
930 /*!
931     \fn QDeadlineTimer &QDeadlineTimer::operator+=(qint64 msecs)
932 
933     Extends this QDeadlineTimer object by \a msecs milliseconds and returns
934     itself. If this object is set to never expire, this function does nothing.
935 
936     To add times of precision greater than 1 millisecond, use addNSecs().
937 */
938 
939 /*!
940     \fn QDeadlineTimer &QDeadlineTimer::operator-=(qint64 msecs)
941 
942     Shortens this QDeadlineTimer object by \a msecs milliseconds and returns
943     itself. If this object is set to never expire, this function does nothing.
944 
945     To subtract times of precision greater than 1 millisecond, use addNSecs().
946 */
947 
948 /*!
949   \fn void QDeadlineTimer::swap(QDeadlineTimer &other)
950 
951   Swaps this deadline timer with the \a other deadline timer.
952  */
953 
954 /*!
955   \fn template <class Clock, class Duration> QDeadlineTimer & QDeadlineTimer::operator=(std::chrono::time_point<Clock, Duration> deadline_)
956 
957   Assigns \a deadline_ to this deadline timer.
958  */
959 
960 /*!
961   \fn template <class Rep, class Period> QDeadlineTimer & QDeadlineTimer::operator=(std::chrono::duration<Rep, Period> remaining)
962 
963   Sets this deadline timer to the \a remaining time.
964  */
965 
966 /*!
967   \fn std::chrono::nanoseconds QDeadlineTimer::remainingTimeAsDuration() const
968 
969   Returns the time remaining before the deadline.
970  */
971 
972 // the rest of the functions are in qelapsedtimer_xxx.cpp
973 
974 QT_END_NAMESPACE
