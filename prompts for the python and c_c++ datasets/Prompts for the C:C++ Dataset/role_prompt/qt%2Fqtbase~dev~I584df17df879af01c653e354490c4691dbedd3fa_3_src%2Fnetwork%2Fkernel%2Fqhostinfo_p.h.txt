I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtNetwork module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #ifndef QHOSTINFO_P_H
41 #define QHOSTINFO_P_H
42 
43 //
44 //  W A R N I N G
45 //  -------------
46 //
47 // This file is not part of the Qt API.  It exists for the convenience
48 // of the QHostInfo class.  This header file may change from
49 // version to version without notice, or even be removed.
50 //
51 // We mean it.
52 //
53 
54 #include <QtNetwork/private/qtnetworkglobal_p.h>
55 #include "QtCore/qcoreapplication.h"
56 #include "private/qcoreapplication_p.h"
57 #include "private/qmetaobject_p.h"
58 #include "QtNetwork/qhostinfo.h"
59 #include "QtCore/qmutex.h"
60 #include "QtCore/qwaitcondition.h"
61 #include "QtCore/qobject.h"
62 #include "QtCore/qpointer.h"
63 #include "QtCore/qthread.h"
64 #if QT_CONFIG(thread)
65 #include "QtCore/qthreadpool.h"
66 #endif
67 #include "QtCore/qrunnable.h"
68 #include "QtCore/qlist.h"
69 #include "QtCore/qqueue.h"
70 #include <QElapsedTimer>
71 #include <QCache>
72 
73 #include <QNetworkSession>
74 #include <QSharedPointer>
75 
76 #include <atomic>
77 
78 QT_BEGIN_NAMESPACE
79 
80 
81 class QHostInfoResult : public QObject
82 {
83     Q_OBJECT
84 public:
85     QHostInfoResult(const QObject *receiver, QtPrivate::QSlotObjectBase *slotObj)
86         : receiver(receiver), slotObj(slotObj),
87           withContextObject(slotObj && receiver)
88     {
89         if (receiver)
90             moveToThread(receiver->thread());
91     }
92 
93     void postResultsReady(const QHostInfo &info);
94 
95 Q_SIGNALS:
96     void resultsReady(const QHostInfo &info);
97 
98 protected:
99     bool event(QEvent *event) override;
100 
101 private:
102     QHostInfoResult(const QHostInfoResult *other)
103         : receiver(other->receiver), slotObj(other->slotObj),
104           withContextObject(other->withContextObject)
105     {
106         // maintain thread affinity
107         moveToThread(other->thread());
108         // cleanup if the application terminates before results are delivered
109         connect(QCoreApplication::instance(), &QCoreApplication::aboutToQuit,
110             this, &QObject::deleteLater);
111     }
112 
113     QPointer<const QObject> receiver = nullptr;
114     QtPrivate::QSlotObjectBase *slotObj = nullptr;
115     const bool withContextObject = false;
116 };
117 
118 class QHostInfoAgent
119 {
120 public:
121     static QHostInfo fromName(const QString &hostName);
122 #ifndef QT_NO_BEARERMANAGEMENT
123     static QHostInfo fromName(const QString &hostName, QSharedPointer<QNetworkSession> networkSession);
124 #endif
125 private:
126     static QHostInfo lookup(const QString &hostName);
127     static QHostInfo reverseLookup(const QHostAddress &address);
128 };
129 
130 class QHostInfoPrivate
131 {
132 public:
133     inline QHostInfoPrivate()
134         : err(QHostInfo::NoError),
135           errorStr(QLatin1String(QT_TRANSLATE_NOOP("QHostInfo", "Unknown error"))),
136           lookupId(0)
137     {
138     }
139 #ifndef QT_NO_BEARERMANAGEMENT
140     //not a public API yet
141     static QHostInfo fromName(const QString &hostName, QSharedPointer<QNetworkSession> networkSession);
142 #endif
143 
144     QHostInfo::HostInfoError err;
145     QString errorStr;
146     QList<QHostAddress> addrs;
147     QString hostName;
148     int lookupId;
149 };
150 
151 // These functions are outside of the QHostInfo class and strictly internal.
152 // Do NOT use them outside of QAbstractSocket.
153 QHostInfo Q_NETWORK_EXPORT qt_qhostinfo_lookup(const QString &name, QObject *receiver, const char *member, bool *valid, int *id);
154 void Q_AUTOTEST_EXPORT qt_qhostinfo_clear_cache();
155 void Q_AUTOTEST_EXPORT qt_qhostinfo_enable_cache(bool e);
156 void Q_AUTOTEST_EXPORT qt_qhostinfo_cache_inject(const QString &hostname, const QHostInfo &resolution);
157 
158 class QHostInfoCache
159 {
160 public:
161     QHostInfoCache();
162     const int max_age; // seconds
163 
164     QHostInfo get(const QString &name, bool *valid);
165     void put(const QString &name, const QHostInfo &info);
166     void clear();
167 
168     bool isEnabled() { return enabled.load(std::memory_order_relaxed); }
169     // this function is currently only used for the auto tests
170     // and not usable by public API
171     void setEnabled(bool e) { enabled.store(e, std::memory_order_relaxed); }
172 private:
173     std::atomic<bool> enabled;
174     struct QHostInfoCacheElement {
175         QHostInfo info;
176         QElapsedTimer age;
177     };
178     QCache<QString,QHostInfoCacheElement> cache;
179     QMutex mutex;
180 };
181 
182 // the following classes are used for the (normal) case: We use multiple threads to lookup DNS
183 
184 class QHostInfoRunnable : public QRunnable
185 {
186 public:
187     QHostInfoRunnable(const QString &hn, int i, const QObject *receiver,
188                       QtPrivate::QSlotObjectBase *slotObj);
189     void run() override;
190 
191     QString toBeLookedUp;
192     int id;
193     QHostInfoResult resultEmitter;
194 };
195 
196 
197 class QHostInfoLookupManager
198 {
199 public:
200     QHostInfoLookupManager();
201     ~QHostInfoLookupManager();
202 
203     void clear();
204 
205     // called from QHostInfo
206     void scheduleLookup(QHostInfoRunnable *r);
207     void abortLookup(int id);
208 
209     // called from QHostInfoRunnable
210     void lookupFinished(QHostInfoRunnable *r);
211     bool wasAborted(int id);
212 
213     QHostInfoCache cache;
214 
215     friend class QHostInfoRunnable;
216 protected:
217 #if QT_CONFIG(thread)
218     QList<QHostInfoRunnable*> currentLookups; // in progress
219     QList<QHostInfoRunnable*> postponedLookups; // postponed because in progress for same host
220 #endif
221     QQueue<QHostInfoRunnable*> scheduledLookups; // not yet started
222     QList<QHostInfoRunnable*> finishedLookups; // recently finished
223     QList<int> abortedLookups; // ids of aborted lookups
224 
225 #if QT_CONFIG(thread)
226     QThreadPool threadPool;
227 #endif
228     QMutex mutex;
229 
230     bool wasDeleted;
231 
232 private:
233     void rescheduleWithMutexHeld();
234 };
235 
236 QT_END_NAMESPACE
237 
238 #endif // QHOSTINFO_P_H
