I want you to act as a code reviewer of Qt Creator in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "graphicsscene.h"
27 #include "actionhandler.h"
28 #include "actionprovider.h"
29 #include "finalstateitem.h"
30 #include "initialstateitem.h"
31 #include "parallelitem.h"
32 #include "sceneutils.h"
33 #include "scxmleditorconstants.h"
34 #include "scxmltagutils.h"
35 #include "scxmluifactory.h"
36 #include "snapline.h"
37 #include "stateitem.h"
38 #include "transitionitem.h"
39 #include "utilsprovider.h"
40 #include "warning.h"
41 #include "warningitem.h"
42 
43 #include <utils/qtcassert.h>
44 #include <utils/qtcfallthrough.h>
45 
46 #include <QAction>
47 #include <QGuiApplication>
48 #include <QClipboard>
49 #include <QMenu>
50 #include <QMimeData>
51 #include <QThread>
52 #include <QUndoStack>
53 
54 using namespace ScxmlEditor::PluginInterface;
55 
56 GraphicsScene::GraphicsScene(QObject *parent)
57     : QGraphicsScene(parent)
58 {
59     //setMinimumRenderSize(5);
60     setItemIndexMethod(QGraphicsScene::NoIndex);
61 }
62 
63 GraphicsScene::~GraphicsScene()
64 {
65     clear();
66 }
67 
68 void GraphicsScene::unselectAll()
69 {
70     const QList<QGraphicsItem*> selectedItems = this->selectedItems();
71     foreach (QGraphicsItem *it, selectedItems)
72         it->setSelected(false);
73     if (m_document)
74         m_document->setCurrentTag(0);
75 }
76 
77 void GraphicsScene::unhighlightAll()
78 {
79     foreach (BaseItem *it, m_baseItems)
80         it->setHighlight(false);
81 }
82 
83 void GraphicsScene::highlightItems(const QVector<ScxmlTag*> &lstIds)
84 {
85     foreach (BaseItem *it, m_baseItems)
86         it->setHighlight(lstIds.contains(it->tag()));
87 }
88 
89 QRectF GraphicsScene::selectedBoundingRect() const
90 {
91     QRectF r;
92     foreach (BaseItem *item, m_baseItems) {
93         if (item->isSelected())
94             r = r.united(item->sceneBoundingRect());
95     }
96     return r;
97 }
98 
99 qreal GraphicsScene::selectedMaxWidth() const
100 {
101     qreal maxw = 0;
102     foreach (BaseItem *item, m_baseItems) {
103         if (item->isSelected() && item->type() >= InitialStateType)
104             maxw = qMax(maxw, item->sceneBoundingRect().width());
105     }
106     return maxw;
107 }
108 
109 qreal GraphicsScene::selectedMaxHeight() const
110 {
111     qreal maxh = 0;
112     foreach (BaseItem *item, m_baseItems) {
113         if (item->isSelected() && item->type() >= InitialStateType)
114             maxh = qMax(maxh, item->sceneBoundingRect().height());
115     }
116     return maxh;
117 }
118 
119 void GraphicsScene::alignStates(int alignType)
120 {
121     if (alignType >= ActionAlignLeft && alignType <= ActionAlignVertical) {
122         m_document->undoStack()->beginMacro(tr("Align states"));
123         QRectF r = selectedBoundingRect();
124 
125         if (r.isValid()) {
126             switch (alignType) {
127             case ActionAlignLeft:
128                 foreach (BaseItem *item, m_baseItems) {
129                     if (item->isSelected() && item->type() >= InitialStateType)
130                         item->moveStateBy(r.left() - item->sceneBoundingRect().left(), 0);
131                 }
132                 break;
133             case ActionAlignRight:
134                 foreach (BaseItem *item, m_baseItems) {
135                     if (item->isSelected() && item->type() >= InitialStateType)
136                         item->moveStateBy(r.right() - item->sceneBoundingRect().right(), 0);
137                 }
138                 break;
139             case ActionAlignTop:
140                 foreach (BaseItem *item, m_baseItems) {
141                     if (item->isSelected() && item->type() >= InitialStateType)
142                         item->moveStateBy(0, r.top() - item->sceneBoundingRect().top());
143                 }
144                 break;
145             case ActionAlignBottom:
146                 foreach (BaseItem *item, m_baseItems) {
147                     if (item->isSelected() && item->type() >= InitialStateType)
148                         item->moveStateBy(0, r.bottom() - item->sceneBoundingRect().bottom());
149                 }
150                 break;
151             case ActionAlignHorizontal:
152                 foreach (BaseItem *item, m_baseItems) {
153                     if (item->isSelected() && item->type() >= InitialStateType)
154                         item->moveStateBy(0, r.center().y() - item->sceneBoundingRect().center().y());
155                 }
156                 break;
157             case ActionAlignVertical:
158                 foreach (BaseItem *item, m_baseItems) {
159                     if (item->isSelected() && item->type() >= InitialStateType)
160                         item->moveStateBy(r.center().x() - item->sceneBoundingRect().center().x(), 0);
161                 }
162                 break;
163             default:
164                 break;
165             }
166         }
167 
168         m_document->undoStack()->endMacro();
169     }
170 }
171 
172 void GraphicsScene::adjustStates(int adjustType)
173 {
174     if (adjustType >= ActionAdjustWidth && adjustType <= ActionAdjustSize) {
175         m_document->undoStack()->beginMacro(tr("Adjust states"));
176         qreal maxw = selectedMaxWidth();
177         qreal maxh = selectedMaxHeight();
178 
179         foreach (BaseItem *item, m_baseItems) {
180             if (item->isSelected() && item->type() >= InitialStateType) {
181                 QRectF rr = item->boundingRect();
182                 if ((adjustType == ActionAdjustWidth || adjustType == ActionAdjustSize) && !qFuzzyCompare(rr.width(), maxw))
183                     rr.setWidth(maxw);
184                 if ((adjustType == ActionAdjustHeight || adjustType == ActionAdjustSize) && !qFuzzyCompare(rr.height(), maxh))
185                     rr.setHeight(maxh);
186 
187                 item->setItemBoundingRect(rr);
188                 qgraphicsitem_cast<ConnectableItem*>(item)->updateTransitions(true);
189             }
190         }
191         m_document->undoStack()->endMacro();
192     }
193 }
194 void GraphicsScene::cut()
195 {
196     m_document->undoStack()->beginMacro(tr("Cut"));
197     copy();
198     removeSelectedItems();
199     m_document->undoStack()->endMacro();
200 }
201 
202 void GraphicsScene::removeSelectedItems()
203 {
204     QVector<ScxmlTag*> tags = SceneUtils::findRemovedTags(m_baseItems);
205     if (tags.count() > 0) {
206         m_document->undoStack()->beginMacro(tr("Remove item(s)"));
207 
208         // Then remove found tags
209         for (int i = tags.count(); i--;) {
210             m_document->setCurrentTag(tags[i]);
211             m_document->removeTag(tags[i]);
212         }
213         m_document->setCurrentTag(0);
214         m_document->undoStack()->endMacro();
215     }
216 }
217 
218 void GraphicsScene::copy()
219 {
220     if (!m_document->currentTag())
221         return;
222 
223     QPointF minPos;
224     QVector<ScxmlTag*> tags;
225     if (m_document->currentTag()->tagType() == Scxml) {
226         QVector<BaseItem*> items;
227         foreach (BaseItem *item, m_baseItems) {
228             if (!item->parentItem())
229                 items << item;
230         }
231         tags = SceneUtils::findCopyTags(items, minPos);
232     } else {
233         tags = SceneUtils::findCopyTags(m_baseItems, minPos);
234     }
235 
236     if (tags.isEmpty() && m_document->currentTag())
237         tags << m_document->currentTag();
238 
239     if (tags.count() > 0) {
240         auto mime = new QMimeData;
241         QByteArray result = m_document->content(tags);
242         mime->setText(QLatin1String(result));
243         mime->setData("StateChartEditor/StateData", result);
244         QStringList strTypes;
245         foreach (const ScxmlTag *tag, tags) {
246             strTypes << tag->tagName(false);
247         }
248         mime->setData("StateChartEditor/CopiedTagTypes", strTypes.join(",").toLocal8Bit());
249         mime->setData("StateChartEditor/CopiedMinPos", QString::fromLatin1("%1:%2").arg(minPos.x()).arg(minPos.y()).toLocal8Bit());
250         QGuiApplication::clipboard()->setMimeData(mime);
251     }
252 
253     checkPaste();
254 }
255 
256 void GraphicsScene::checkPaste()
257 {
258     const QMimeData *mimeData = QGuiApplication::clipboard()->mimeData();
259     const QString copiedTagTypes = QLatin1String(mimeData->data("StateChartEditor/CopiedTagTypes"));
260 
261     emit pasteAvailable(TagUtils::checkPaste(copiedTagTypes, m_document->currentTag()));
262 }
263 
264 void GraphicsScene::paste(const QPointF &targetPos)
265 {
266     const QMimeData *mimeData = QGuiApplication::clipboard()->mimeData();
267 
268     QPointF startPos(targetPos);
269 
270     BaseItem *targetItem = nullptr;
271     foreach (BaseItem *item, m_baseItems) {
272         if (item->isSelected() && item->type() >= StateType) {
273             targetItem = item;
274             break;
275         }
276     }
277 
278     if (m_lastPasteTargetItem != targetItem)
279         m_pasteCounter = 0;
280     m_lastPasteTargetItem = targetItem;
281 
282     if (m_lastPasteTargetItem)
283         startPos = m_lastPasteTargetItem->boundingRect().topLeft();
284     QPointF pastedPos = startPos + QPointF(m_pasteCounter * 30, m_pasteCounter * 30);
285     m_pasteCounter++;
286 
287     QString strMinPos = QLatin1String(mimeData->data("StateChartEditor/CopiedMinPos"));
288     QPointF minPos(0, 0);
289     if (!strMinPos.isEmpty()) {
290         QStringList coords = strMinPos.split(":", QString::SkipEmptyParts);
291         if (coords.count() == 2)
292             minPos = QPointF(coords[0].toDouble(), coords[1].toDouble());
293     }
294 
295     m_document->pasteData(mimeData->data("StateChartEditor/StateData"), minPos, pastedPos);
296 }
297 
298 void GraphicsScene::setEditorInfo(const QString &key, const QString &value)
299 {
300     foreach (BaseItem *item, m_baseItems) {
301         if (item->isSelected() && item->type() >= TransitionType)
302             item->setEditorInfo(key, value);
303     }
304 }
305 
306 void GraphicsScene::setDocument(ScxmlDocument *document)
307 {
308     if (m_document)
309         disconnect(m_document, 0, this, 0);
310 
311     m_document = document;
312 
313     init();
314     connectDocument();
315 }
316 
317 void GraphicsScene::connectDocument()
318 {
319     if (m_document) {
320         connect(m_document.data(), &ScxmlDocument::beginTagChange, this, &GraphicsScene::beginTagChange);
321         connect(m_document.data(), &ScxmlDocument::endTagChange, this, &GraphicsScene::endTagChange);
322     }
323 }
324 
325 void GraphicsScene::disconnectDocument()
326 {
327     if (m_document)
328         m_document->disconnect(this);
329 }
330 
331 void GraphicsScene::init()
332 {
333     m_initializing = true;
334 
335     disconnectDocument();
336     clear();
337     addItem(m_lineX = new SnapLine);
338     addItem(m_lineY = new SnapLine);
339 
340     if (m_document) {
341         const ScxmlTag *rootTag = m_document->rootTag();
342         if (rootTag) {
343 
344             for (int i = 0; i < rootTag->childCount(); ++i) {
345                 ScxmlTag *child = rootTag->child(i);
346                 ConnectableItem *newItem = SceneUtils::createItemByTagType(child->tagType());
347                 if (newItem) {
348                     addItem(newItem);
349                     newItem->init(child);
350                 }
351             }
352 
353             const QList<QGraphicsItem*> items = this->items();
354             for (int i = 0; i < items.count(); ++i) {
355                 if (items[i]->type() >= TransitionType) {
356                     auto item = qgraphicsitem_cast<BaseItem*>(items[i]);
357                     if (item)
358                         item->finalizeCreation();
359                 }
360             }
361         }
362     }
363 
364     m_initializing = false;
365     warningVisibilityChanged(0, 0);
366     emit selectedStateCountChanged(0);
367     emit selectedBaseItemCountChanged(0);
368 }
369 
370 void GraphicsScene::runLayoutToSelectedStates()
371 {
372     m_document->undoStack()->beginMacro(tr("Relayout"));
373 
374     QVector<BaseItem*> selectedItems;
375     foreach (BaseItem *node, m_baseItems) {
376         if (node->isSelected()) {
377             int index = 0;
378             for (int i = 0; i < selectedItems.count(); ++i) {
379                 if (node->depth() <= selectedItems[i]->depth()) {
380                     index = i;
381                     break;
382                 }
383             }
384             selectedItems.insert(index, node);
385         }
386     }
387 
388     // Layout selected items
389     for (int i = 0; i < selectedItems.count(); ++i)
390         selectedItems[i]->doLayout(selectedItems[i]->depth());
391 
392     // Layout scene items if necessary
393     if (selectedItems.isEmpty()) {
394         QList<QGraphicsItem*> sceneItems;
395         foreach (BaseItem *item, m_baseItems) {
396             if (item->type() >= InitialStateType && !item->parentItem())
397                 sceneItems << item;
398         }
399         SceneUtils::layout(sceneItems);
400 
401         foreach (QGraphicsItem *item, sceneItems) {
402             if (item->type() >= StateType)
403                 static_cast<StateItem*>(item)->shrink();
404         }
405     }
406 
407     // Update properties
408     foreach (BaseItem *node, selectedItems) {
409         node->updateUIProperties();
410     }
411 
412     m_document->undoStack()->endMacro();
413 }
414 
415 void GraphicsScene::runAutomaticLayout()
416 {
417     m_autoLayoutRunning = true;
418 
419     // 1. Find max depth
420     int maxDepth = 0;
421     foreach (BaseItem *node, m_baseItems) {
422         maxDepth = qMax(maxDepth, node->depth());
423         node->setBlockUpdates(true);
424     }
425 
426     // 2. Layout every depth-level separately
427     for (int d = (maxDepth + 1); d--;) {
428         foreach (BaseItem *node, m_baseItems)
429             node->doLayout(d);
430     }
431 
432     // 3. Layout scene items
433     QList<QGraphicsItem*> sceneItems;
434     foreach (BaseItem *item, m_baseItems) {
435         if (item->type() >= InitialStateType && !item->parentItem())
436             sceneItems << item;
437     }
438     SceneUtils::layout(sceneItems);
439 
440     foreach (QGraphicsItem *item, sceneItems) {
441         if (item->type() >= StateType)
442             static_cast<StateItem*>(item)->shrink();
443     }
444 
445     foreach (BaseItem *node, m_baseItems) {
446         node->updateUIProperties();
447         node->setBlockUpdates(false);
448     }
449 
450     m_autoLayoutRunning = false;
451 }
452 
453 void GraphicsScene::beginTagChange(ScxmlDocument::TagChange change, ScxmlTag *tag, const QVariant &value)
454 {
455     switch (change) {
456     case ScxmlDocument::TagRemoveChild: {
457         if (tag)
458             removeItems(tag->child(value.toInt()));
459         break;
460     }
461     default:
462         break;
463     }
464 }
465 
466 void GraphicsScene::endTagChange(ScxmlDocument::TagChange change, ScxmlTag *tag, const QVariant &value)
467 {
468     Q_UNUSED(value)
469     QTC_ASSERT(tag, return);
470 
471     switch (change) {
472     case ScxmlDocument::TagAttributesChanged: {
473         foreach (BaseItem *item, m_baseItems) {
474             if (item->tag() == tag)
475                 item->updateAttributes();
476         }
477         break;
478     }
479     case ScxmlDocument::TagEditorInfoChanged: {
480         foreach (BaseItem *item, m_baseItems) {
481             if (item->tag() == tag)
482                 item->updateEditorInfo();
483         }
484         break;
485     }
486     case ScxmlDocument::TagCurrentChanged: {
487         foreach (BaseItem *item, m_baseItems) {
488             if (!item->isSelected() && item->tag() == tag)
489                 item->setSelected(true);
490         }
491         checkPaste();
492         break;
493     }
494     case ScxmlDocument::TagChangeParent: {
495         auto childItem = qobject_cast<ConnectableItem*>(findItem(tag));
496 
497         if (childItem) {
498             BaseItem *newParentItem = findItem(tag->parentTag());
499             BaseItem *oldParentItem = childItem->parentBaseItem();
500 
501             QPointF sPos = childItem->scenePos();
502             if (oldParentItem) {
503                 childItem->setParentItem(nullptr);
504                 childItem->setPos(sPos);
505             }
506 
507             if (newParentItem)
508                 childItem->setPos(newParentItem->mapFromScene(childItem->sceneBoundingRect().center()) - childItem->boundingRect().center());
509 
510             childItem->setParentItem(newParentItem);
511             childItem->updateUIProperties();
512             childItem->updateTransitions(true);
513             childItem->updateTransitionAttributes(true);
514             childItem->checkWarnings();
515             childItem->checkInitial();
516             if (newParentItem) {
517                 newParentItem->checkInitial();
518                 newParentItem->updateAttributes();
519                 newParentItem->checkWarnings();
520                 newParentItem->checkOverlapping();
521                 newParentItem->updateUIProperties();
522             }
523 
524             if (oldParentItem)
525                 oldParentItem->checkInitial();
526 
527             if (!oldParentItem || !newParentItem)
528                 checkInitialState();
529         }
530         break;
531     }
532     case ScxmlDocument::TagAddTags: {
533         // Finalize transitions
534         QVector<ScxmlTag*> childTransitionTags;
535         if (tag->tagName(false) == "transition")
536             childTransitionTags << tag;
537 
538         TagUtils::findAllTransitionChildren(tag, childTransitionTags);
539         for (int i = 0; i < childTransitionTags.count(); ++i) {
540             BaseItem *item = findItem(childTransitionTags[i]);
541             if (item)
542                 item->finalizeCreation();
543         }
544     }
545     Q_FALLTHROUGH(); // FIXME: intended fallthrough?
546     case ScxmlDocument::TagAddChild: {
547         ScxmlTag *childTag = tag->child(value.toInt());
548         if (childTag) {
549             // Check that there is no any item with this tag
550             BaseItem *childItem = findItem(childTag);
551             BaseItem *parentItem = findItem(tag);
552             if (!childItem) {
553                 if (childTag->tagType() == Transition || childTag->tagType() == InitialTransition) {
554                     auto transition = new TransitionItem;
555                     addItem(transition);
556                     transition->setStartItem(qgraphicsitem_cast<ConnectableItem*>(parentItem));
557                     transition->init(childTag, 0, false, false);
558                     transition->updateAttributes();
559                 } else {
560                     childItem = SceneUtils::createItemByTagType(childTag->tagType(), QPointF());
561                     if (childItem) {
562                         childItem->init(childTag, parentItem, false);
563                         if (!parentItem)
564                             addItem(childItem);
565 
566                         childItem->finalizeCreation();
567                         childItem->updateUIProperties();
568                     }
569                 }
570             }
571 
572             if (parentItem) {
573                 parentItem->updateAttributes();
574                 parentItem->updateUIProperties();
575                 parentItem->checkInitial();
576             } else
577                 checkInitialState();
578         }
579         break;
580     }
581     case ScxmlDocument::TagRemoveChild: {
582         BaseItem *parentItem = findItem(tag);
583         if (parentItem) {
584             parentItem->updateAttributes();
585             parentItem->checkInitial();
586         } else {
587             checkInitialState();
588         }
589         break;
590     }
591     case ScxmlDocument::TagChangeOrder: {
592         BaseItem *parentItem = findItem(tag->parentTag());
593         if (parentItem)
594             parentItem->updateAttributes();
595         else
596             checkInitialState();
597     }
598     default:
599         break;
600     }
601 }
602 
603 void GraphicsScene::setTopMostScene(bool topmost)
604 {
605     m_topMostScene = topmost;
606 }
607 
608 bool GraphicsScene::topMostScene() const
609 {
610     return m_topMostScene;
611 }
612 
613 void GraphicsScene::setActionHandler(ActionHandler *mgr)
614 {
615     m_actionHandler = mgr;
616 }
617 
618 void GraphicsScene::setWarningModel(ScxmlEditor::OutputPane::WarningModel *model)
619 {
620     m_warningModel = model;
621 }
622 
623 void GraphicsScene::setUiFactory(ScxmlUiFactory *uifactory)
624 {
625     m_uiFactory = uifactory;
626 }
627 
628 ActionHandler *GraphicsScene::actionHandler() const
629 {
630     return m_actionHandler;
631 }
632 
633 ScxmlEditor::OutputPane::WarningModel *GraphicsScene::warningModel() const
634 {
635     return m_warningModel;
636 }
637 
638 ScxmlUiFactory *GraphicsScene::uiFactory() const
639 {
640     return m_uiFactory;
641 }
642 
643 void GraphicsScene::addConnectableItem(ItemType type, const QPointF &pos, BaseItem *parentItem)
644 {
645     m_document->undoStack()->beginMacro(tr("Add new state"));
646     ConnectableItem *newItem = SceneUtils::createItem(type, pos);
647 
648     if (newItem) {
649         ScxmlTag *newTag = SceneUtils::createTag(type, m_document);
650         ScxmlTag *parentTag = parentItem ? parentItem->tag() : m_document->rootTag();
651 
652         newItem->setTag(newTag);
653         newItem->setParentItem(parentItem);
654         if (!parentItem)
655             addItem(newItem);
656 
657         newItem->updateAttributes();
658         newItem->updateEditorInfo();
659         newItem->updateUIProperties();
660 
661         if (parentItem)
662             parentItem->updateUIProperties();
663 
664         m_document->addTag(parentTag, newTag);
665         unselectAll();
666         newItem->setSelected(true);
667     }
668     m_document->undoStack()->endMacro();
669 }
670 
671 void GraphicsScene::keyPressEvent(QKeyEvent *event)
672 {
673     QGraphicsItem *focusItem = this->focusItem();
674     if (!focusItem || focusItem->type() != TextType) {
675         if (event->key() == Qt::Key_Delete)
676             removeSelectedItems();
677     }
678     QGraphicsScene::keyPressEvent(event);
679 }
680 
681 void GraphicsScene::mousePressEvent(QGraphicsSceneMouseEvent *event)
682 {
683     QGraphicsItem *it = itemAt(event->scenePos(), QTransform());
684     if (!it || it->type() == LayoutType) {
685         if (event->button() == Qt::LeftButton) {
686             QGraphicsScene::mousePressEvent(event);
687             m_document->setCurrentTag(m_document->rootTag());
688             return;
689         } else if (m_actionHandler && event->button() == Qt::RightButton) {
690             event->accept();
691             QMenu menu;
692             menu.addAction(m_actionHandler->action(ActionCopy));
693             menu.addAction(m_actionHandler->action(ActionPaste));
694             menu.addAction(m_actionHandler->action(ActionScreenshot));
695             menu.addAction(m_actionHandler->action(ActionExportToImage));
696             menu.addSeparator();
697             menu.addAction(m_actionHandler->action(ActionZoomIn));
698             menu.addAction(m_actionHandler->action(ActionZoomOut));
699             menu.addAction(m_actionHandler->action(ActionFitToView));
700 
701             if (m_uiFactory) {
702                 auto actionProvider = static_cast<ActionProvider*>(m_uiFactory->object(Constants::C_UI_FACTORY_OBJECT_ACTIONPROVIDER));
703                 if (actionProvider) {
704                     menu.addSeparator();
705                     actionProvider->initStateMenu(m_document->rootTag(), &menu);
706                 }
707             }
708 
709             menu.exec(event->screenPos());
710             return;
711         }
712     }
713     QGraphicsScene::mousePressEvent(event);
714 }
715 
716 BaseItem *GraphicsScene::findItem(const ScxmlTag *tag) const
717 {
718     if (!tag)
719         return nullptr;
720 
721     foreach (BaseItem *it, m_baseItems) {
722         if (it->tag() == tag)
723             return it;
724     }
725 
726     return nullptr;
727 }
728 
729 void GraphicsScene::removeItems(const ScxmlTag *tag)
730 {
731     if (tag) {
732         // Find right items
733         QVector<BaseItem*> items;
734         foreach (BaseItem *it, m_baseItems) {
735             if (it->tag() == tag)
736                 items << it;
737         }
738 
739         // Then delete them
740         for (int i = items.count(); i--;) {
741             items[i]->setTag(0);
742             delete items[i];
743         }
744     }
745 }
746 
747 QPair<bool, bool> GraphicsScene::checkSnapToItem(BaseItem *item, const QPointF &p, QPointF &pp)
748 {
749     if (m_selectedStateCount > 1)
750         return QPair<bool, bool>(false, false);
751 
752     QGraphicsItem *parentItem = item->parentItem();
753 
754     qreal diffX = 8;
755     qreal diffXdY = 2000;
756 
757     qreal diffY = 8;
758     qreal diffYdX = 2000;
759 
760     foreach (BaseItem *it, m_baseItems) {
761         if (!it->isSelected() && it != item && it->parentItem() == parentItem && it->type() >= InitialStateType) {
762             QPointF c = it->sceneCenter();
763             qreal dX = qAbs(c.x() - p.x());
764             qreal dY = qAbs(c.y() - p.y());
765 
766             if (dX < 7 && dY < diffXdY) {
767                 pp.setX(c.x());
768                 diffX = dX;
769                 diffXdY = dY;
770                 m_lineY->show(c.x(), c.y(), c.x(), p.y());
771             }
772 
773             if (dY < 7 && dX < diffYdX) {
774                 pp.setY(c.y());
775                 diffY = dY;
776                 diffYdX = dX;
777                 m_lineX->show(c.x(), c.y(), p.x(), c.y());
778             }
779         }
780     }
781 
782     if (qFuzzyCompare(diffX, 8))
783         m_lineY->hideLine();
784     if (qFuzzyCompare(diffY, 8))
785         m_lineX->hideLine();
786 
787     return QPair<bool, bool>(diffX < 8, diffY < 8);
788 }
789 
790 void GraphicsScene::selectionChanged(bool para)
791 {
792     Q_UNUSED(para)
793 
794     int count = 0;
795     int baseCount = 0;
796     int stateTypeCount = 0;
797 
798     foreach (BaseItem *item, m_baseItems) {
799         if (item->isSelected()) {
800             if (item->type() >= TransitionType)
801                 baseCount++;
802             if (item->type() >= InitialStateType)
803                 count++;
804             if (item->type() >= StateType)
805                 stateTypeCount++;
806         }
807     }
808 
809     m_selectedStateTypeCount = stateTypeCount;
810 
811     if (count != m_selectedStateCount) {
812         m_selectedStateCount = count;
813         emit selectedStateCountChanged(m_selectedStateCount);
814     }
815 
816     if (baseCount != m_selectedBaseItemCount) {
817         m_selectedBaseItemCount = baseCount;
818         emit selectedBaseItemCountChanged(m_selectedBaseItemCount);
819     }
820 }
821 
822 void GraphicsScene::addWarningItem(WarningItem *item)
823 {
824     if (!m_allWarnings.contains(item)) {
825         m_allWarnings << item;
826         if (!m_autoLayoutRunning && !m_initializing)
827             QMetaObject::invokeMethod(this, "warningVisibilityChanged", Qt::QueuedConnection, Q_ARG(int, 0));
828     }
829 }
830 
831 void GraphicsScene::removeWarningItem(WarningItem *item)
832 {
833     m_allWarnings.removeAll(item);
834 
835     if (!m_autoLayoutRunning && !m_initializing)
836         QMetaObject::invokeMethod(this, "warningVisibilityChanged", Qt::QueuedConnection, Q_ARG(int, 0));
837 }
838 
839 void GraphicsScene::warningVisibilityChanged(int type, WarningItem *item)
840 {
841     if (!m_autoLayoutRunning && !m_initializing) {
842         foreach (WarningItem *it, m_allWarnings) {
843             if (it != item && (type == 0 || it->type() == type))
844                 it->check();
845         }
846     }
847 }
848 
849 ScxmlTag *GraphicsScene::tagByWarning(const ScxmlEditor::OutputPane::Warning *w) const
850 {
851     ScxmlTag *tag = nullptr;
852     foreach (WarningItem *it, m_allWarnings) {
853         if (it->warning() == w) {
854             tag = it->tag();
855             break;
856         }
857     }
858     return tag;
859 }
860 
861 void GraphicsScene::highlightWarningItem(const ScxmlEditor::OutputPane::Warning *w)
862 {
863     ScxmlTag *tag = tagByWarning(w);
864 
865     if (tag)
866         highlightItems(QVector<ScxmlTag*>() << tag);
867     else
868         unhighlightAll();
869 }
870 
871 void GraphicsScene::selectWarningItem(const ScxmlEditor::OutputPane::Warning *w)
872 {
873     ScxmlTag *tag = tagByWarning(w);
874 
875     if (tag) {
876         unselectAll();
877         m_document->setCurrentTag(tag);
878     }
879 }
880 
881 QList<QGraphicsItem*> GraphicsScene::sceneItems(Qt::SortOrder order) const
882 {
883     QList<QGraphicsItem*> children;
884     QList<QGraphicsItem*> items = this->items(order);
885     for (int i = 0; i < items.count(); ++i) {
886         if (!items[i]->parentItem() && items[i]->type() >= InitialStateType)
887             children << items[i];
888     }
889 
890     return children;
891 }
892 
893 void GraphicsScene::addChild(BaseItem *item)
894 {
895     if (!m_baseItems.contains(item)) {
896         connect(item, &BaseItem::selectedStateChanged, this, &GraphicsScene::selectionChanged);
897         connect(item, &BaseItem::openToDifferentView, this, [=](BaseItem *item){
898             openStateView(item);
899         }, Qt::QueuedConnection);
900         m_baseItems << item;
901     }
902 }
903 
904 void GraphicsScene::removeChild(BaseItem *item)
905 {
906     if (item)
907         disconnect(item, 0, this, 0);
908     m_baseItems.removeAll(item);
909 
910     selectionChanged(false);
911 }
912 
913 void GraphicsScene::checkItemsVisibility(double scaleFactor)
914 {
915     foreach (BaseItem *item, m_baseItems) {
916         item->checkVisibility(scaleFactor);
917     }
918 }
919 
920 void GraphicsScene::checkInitialState()
921 {
922     if (m_document) {
923         QList<QGraphicsItem*> sceneItems;
924         foreach (BaseItem *item, m_baseItems) {
925             if (item->type() >= InitialStateType && !item->parentItem())
926                 sceneItems << item;
927         }
928         if (m_uiFactory) {
929             auto utilsProvider = static_cast<UtilsProvider*>(m_uiFactory->object("utilsProvider"));
930             if (utilsProvider)
931                 utilsProvider->checkInitialState(sceneItems, m_document->rootTag());
932         }
933     }
934 }
935 
936 void GraphicsScene::clearAllTags()
937 {
938     foreach (BaseItem *it, m_baseItems) {
939         it->setTag(0);
940     }
941 }
942 
943 void GraphicsScene::setBlockUpdates(bool block)
944 {
945     foreach (BaseItem *it, m_baseItems) {
946         it->setBlockUpdates(block);
947     }
948 }
