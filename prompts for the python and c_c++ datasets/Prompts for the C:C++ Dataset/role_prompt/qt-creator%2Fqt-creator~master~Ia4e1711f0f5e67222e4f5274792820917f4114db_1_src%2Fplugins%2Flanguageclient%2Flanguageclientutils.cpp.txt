I want you to act as a code reviewer of Qt Creator in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2019 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "languageclientutils.h"
27 
28 #include "client.h"
29 #include "languageclient_global.h"
30 #include "languageclientmanager.h"
31 #include "languageclientoutline.h"
32 
33 #include <coreplugin/editormanager/documentmodel.h>
34 #include <coreplugin/icore.h>
35 
36 #include <texteditor/codeassist/textdocumentmanipulatorinterface.h>
37 #include <texteditor/refactoringchanges.h>
38 #include <texteditor/textdocument.h>
39 #include <texteditor/texteditor.h>
40 #include <utils/textutils.h>
41 #include <utils/utilsicons.h>
42 
43 #include <QFile>
44 #include <QMenu>
45 #include <QTextDocument>
46 #include <QToolBar>
47 #include <QToolButton>
48 #include <treeviewcombobox.h>
49 
50 using namespace LanguageServerProtocol;
51 using namespace Utils;
52 using namespace TextEditor;
53 
54 namespace LanguageClient {
55 
56 QTextCursor rangeToTextCursor(const Range &range, QTextDocument *doc)
57 {
58     QTextCursor cursor(doc);
59     cursor.setPosition(range.end().toPositionInDocument(doc));
60     cursor.setPosition(range.start().toPositionInDocument(doc), QTextCursor::KeepAnchor);
61     return cursor;
62 }
63 
64 ChangeSet::Range convertRange(const QTextDocument *doc, const Range &range)
65 {
66     return ChangeSet::Range(
67         Text::positionInText(doc, range.start().line() + 1, range.start().character() + 1),
68         Text::positionInText(doc, range.end().line() + 1, range.end().character()) + 1);
69 }
70 
71 ChangeSet editsToChangeSet(const QList<TextEdit> &edits, const QTextDocument *doc)
72 {
73     ChangeSet changeSet;
74     for (const TextEdit &edit : edits)
75         changeSet.replace(convertRange(doc, edit.range()), edit.newText());
76     return changeSet;
77 }
78 
79 bool applyTextDocumentEdit(const TextDocumentEdit &edit)
80 {
81     const QList<TextEdit> &edits = edit.edits();
82     if (edits.isEmpty())
83         return true;
84     const DocumentUri &uri = edit.id().uri();
85     if (TextDocument* doc = TextDocument::textDocumentForFilePath(uri.toFilePath())) {
86         LanguageClientValue<int> version = edit.id().version();
87         if (!version.isNull() && version.value(0) < doc->document()->revision())
88             return false;
89     }
90     return applyTextEdits(uri, edits);
91 }
92 
93 bool applyTextEdits(const DocumentUri &uri, const QList<TextEdit> &edits)
94 {
95     if (edits.isEmpty())
96         return true;
97     RefactoringChanges changes;
98     RefactoringFilePtr file;
99     file = changes.file(uri.toFilePath().toString());
100     file->setChangeSet(editsToChangeSet(edits, file->document()));
101     return file->apply();
102 }
103 
104 void applyTextEdit(TextDocumentManipulatorInterface &manipulator, const TextEdit &edit)
105 {
106     using namespace Utils::Text;
107     const Range range = edit.range();
108     const QTextDocument *doc = manipulator.textCursorAt(manipulator.currentPosition()).document();
109     const int start = positionInText(doc, range.start().line() + 1, range.start().character() + 1);
110     const int end = positionInText(doc, range.end().line() + 1, range.end().character() + 1);
111     manipulator.replace(start, end - start, edit.newText());
112 }
113 
114 bool applyWorkspaceEdit(const WorkspaceEdit &edit)
115 {
116     bool result = true;
117     const QList<TextDocumentEdit> &documentChanges
118         = edit.documentChanges().value_or(QList<TextDocumentEdit>());
119     if (!documentChanges.isEmpty()) {
120         for (const TextDocumentEdit &documentChange : documentChanges)
121             result |= applyTextDocumentEdit(documentChange);
122     } else {
123         const WorkspaceEdit::Changes &changes = edit.changes().value_or(WorkspaceEdit::Changes());
124         for (const DocumentUri &file : changes.keys())
125             result |= applyTextEdits(file, changes.value(file));
126         return result;
127     }
128     return result;
129 }
130 
131 QTextCursor endOfLineCursor(const QTextCursor &cursor)
132 {
133     QTextCursor ret = cursor;
134     ret.movePosition(QTextCursor::EndOfLine);
135     return ret;
136 }
137 
138 void updateCodeActionRefactoringMarker(Client *client,
139                                        const CodeAction &action,
140                                        const DocumentUri &uri)
141 {
142     TextDocument* doc = TextDocument::textDocumentForFilePath(uri.toFilePath());
143     if (!doc)
144         return;
145     const QVector<BaseTextEditor *> editors = BaseTextEditor::textEditorsForDocument(doc);
146     if (editors.isEmpty())
147         return;
148 
149     const QList<Diagnostic> &diagnostics = action.diagnostics().value_or(QList<Diagnostic>());
150 
151     RefactorMarkers markers;
152     RefactorMarker marker;
153     marker.type = client->id();
154     if (action.isValid(nullptr))
155         marker.tooltip = action.title();
156     if (action.edit().has_value()) {
157         WorkspaceEdit edit = action.edit().value();
158         marker.callback = [edit](const TextEditorWidget *) {
159             applyWorkspaceEdit(edit);
160         };
161         if (diagnostics.isEmpty()) {
162             QList<TextEdit> edits;
163             if (optional<QList<TextDocumentEdit>> documentChanges = edit.documentChanges()) {
164                 QList<TextDocumentEdit> changesForUri = Utils::filtered(
165                     documentChanges.value(), [uri](const TextDocumentEdit &edit) {
166                     return edit.id().uri() == uri;
167                 });
168                 for (const TextDocumentEdit &edit : changesForUri)
169                     edits << edit.edits();
170             } else if (optional<WorkspaceEdit::Changes> localChanges = edit.changes()) {
171                 edits = localChanges.value()[uri];
172             }
173             for (const TextEdit &edit : edits) {
174                 marker.cursor = endOfLineCursor(edit.range().start().toTextCursor(doc->document()));
175                 markers << marker;
176             }
177         }
178     } else if (action.command().has_value()) {
179         const Command command = action.command().value();
180         marker.callback = [command, client = QPointer<Client>(client)](const TextEditorWidget *) {
181             if (client)
182                 client->executeCommand(command);
183         };
184     } else {
185         return;
186     }
187     for (const Diagnostic &diagnostic : diagnostics) {
188         marker.cursor = endOfLineCursor(diagnostic.range().start().toTextCursor(doc->document()));
189         markers << marker;
190     }
191     for (BaseTextEditor *editor : editors) {
192         if (TextEditorWidget *editorWidget = editor->editorWidget())
193             editorWidget->setRefactorMarkers(markers + editorWidget->refactorMarkers());
194     }
195 }
196 
197 void updateEditorToolBar(Core::IEditor *editor)
198 {
199     auto *textEditor = qobject_cast<BaseTextEditor *>(editor);
200     if (!textEditor)
201         return;
202     TextEditorWidget *widget = textEditor->editorWidget();
203     if (!widget)
204         return;
205 
206     TextDocument *document = textEditor->textDocument();
207     Client *client = LanguageClientManager::clientForDocument(textEditor->textDocument());
208 
209     static QMap<QWidget *, QAction *> actions;
210 
211     if (actions.contains(widget)) {
212         auto action = actions[widget];
213         if (client) {
214             action->setText(client->name());
215         } else {
216             widget->toolBar()->removeAction(action);
217             actions.remove(widget);
218             delete action;
219         }
220     } else if (client) {
221         const QIcon icon = Utils::Icon({{":/languageclient/images/languageclient.png",
222                                          Utils::Theme::IconsBaseColor}})
223                                .icon();
224         actions[widget] = widget->toolBar()->addAction(
225             icon, client->name(), [document]() {
226                 auto menu = new QMenu;
227                 auto *clientsGroup = new QActionGroup(menu);
228                 clientsGroup->setExclusive(true);
229                 for (auto client : LanguageClientManager::clientsSupportingDocument(document)) {
230                     auto action = clientsGroup->addAction(client->name());
231                     auto reopen = [action, client = QPointer<Client>(client), document]() {
232                         if (!client)
233                             return;
234                         LanguageClientManager::reOpenDocumentWithClient(document, client);
235                         action->setChecked(true);
236                     };
237                     action->setCheckable(true);
238                     action->setChecked(client == LanguageClientManager::clientForDocument(document));
239                     QObject::connect(action, &QAction::triggered, reopen);
240                 }
241                 menu->addActions(clientsGroup->actions());
242                 menu->addAction("Manage...", []() {
243                     Core::ICore::showOptionsDialog(Constants::LANGUAGECLIENT_SETTINGS_PAGE);
244                 });
245                 menu->popup(QCursor::pos());
246             });
247         QObject::connect(widget, &QWidget::destroyed, [widget]() {
248             actions.remove(widget);
249         });
250     }
251 
252     static QMap<QWidget *, QPair<Client *, QAction *>> outlines;
253 
254     if (outlines.contains(widget)) {
255         auto outline = outlines[widget];
256         if (outline.first != client
257             || !LanguageClientOutlineWidgetFactory::clientSupportsDocumentSymbols(client,
258                                                                                   document)) {
259             auto oldAction = outline.second;
260             widget->toolBar()->removeAction(oldAction);
261             delete oldAction;
262         }
263     }
264 
265     if (!outlines.contains(widget)) {
266         if (TreeViewComboBox *comboBox = LanguageClientOutlineWidgetFactory::createComboBox(client,
267                                                                                             editor)) {
268             outlines[widget] = {client,
269                                 widget->insertExtraToolBarWidget(TextEditorWidget::Left, comboBox)};
270         }
271     }
272 }
273 
274 const QIcon symbolIcon(int type)
275 {
276     using namespace Utils::CodeModelIcon;
277     static QMap<SymbolKind, QIcon> icons;
278     if (type < int(SymbolKind::FirstSymbolKind) || type > int(SymbolKind::LastSymbolKind))
279         return {};
280     auto kind = static_cast<SymbolKind>(type);
281     if (!icons.contains(kind)) {
282         switch (kind) {
283         case SymbolKind::File: icons[kind] = Utils::Icons::NEWFILE.icon(); break;
284         case SymbolKind::Module:
285         case SymbolKind::Namespace:
286         case SymbolKind::Package: icons[kind] = iconForType(Namespace); break;
287         case SymbolKind::Class: icons[kind] = iconForType(Class); break;
288         case SymbolKind::Method: icons[kind] = iconForType(FuncPublic); break;
289         case SymbolKind::Property: icons[kind] = iconForType(Property); break;
290         case SymbolKind::Field: icons[kind] = iconForType(VarPublic); break;
291         case SymbolKind::Constructor: icons[kind] = iconForType(Class); break;
292         case SymbolKind::Enum: icons[kind] = iconForType(Enum); break;
293         case SymbolKind::Interface: icons[kind] = iconForType(Class); break;
294         case SymbolKind::Function: icons[kind] = iconForType(FuncPublic); break;
295         case SymbolKind::Variable:
296         case SymbolKind::Constant:
297         case SymbolKind::String:
298         case SymbolKind::Number:
299         case SymbolKind::Boolean:
300         case SymbolKind::Array: icons[kind] = iconForType(VarPublic); break;
301         case SymbolKind::Object: icons[kind] = iconForType(Class); break;
302         case SymbolKind::Key:
303         case SymbolKind::Null: icons[kind] = iconForType(Keyword); break;
304         case SymbolKind::EnumMember: icons[kind] = iconForType(Enumerator); break;
305         case SymbolKind::Struct: icons[kind] = iconForType(Struct); break;
306         case SymbolKind::Event:
307         case SymbolKind::Operator: icons[kind] = iconForType(FuncPublic); break;
308         case SymbolKind::TypeParameter: icons[kind] = iconForType(VarPublic); break;
309         }
310     }
311     return icons[kind];
312 }
313 
314 } // namespace LanguageClient
