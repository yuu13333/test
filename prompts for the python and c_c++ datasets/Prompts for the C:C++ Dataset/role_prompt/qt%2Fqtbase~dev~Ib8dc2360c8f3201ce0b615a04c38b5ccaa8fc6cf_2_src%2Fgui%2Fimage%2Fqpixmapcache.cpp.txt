I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #define Q_TEST_QPIXMAPCACHE
41 #include "qpixmapcache.h"
42 #include "qobject.h"
43 #include "qdebug.h"
44 #include "qpixmapcache_p.h"
45 
46 QT_BEGIN_NAMESPACE
47 
48 /*!
49     \class QPixmapCache
50     \inmodule QtGui
51 
52     \brief The QPixmapCache class provides an application-wide cache for pixmaps.
53 
54     This class is a tool for optimized drawing with QPixmap. You can
55     use it to store temporary pixmaps that are expensive to generate
56     without using more storage space than cacheLimit(). Use insert()
57     to insert pixmaps, find() to find them, and clear() to empty the
58     cache.
59 
60     QPixmapCache contains no member data, only static functions to
61     access the global pixmap cache. It creates an internal QCache
62     object for caching the pixmaps.
63 
64     The cache associates a pixmap with a user-provided string as a key,
65     or with a QPixmapCache::Key that the cache generates.
66     Using QPixmapCache::Key for keys is faster than using strings. The string API is
67     very convenient for complex keys but the QPixmapCache::Key API will be very
68     efficient and convenient for a one-to-one object-to-pixmap mapping - in
69     this case, you can store the keys as members of an object.
70 
71     If two pixmaps are inserted into the cache using equal keys then the
72     last pixmap will replace the first pixmap in the cache. This follows the
73     behavior of the QHash and QCache classes.
74 
75     The cache becomes full when the total size of all pixmaps in the
76     cache exceeds cacheLimit(). The initial cache limit is 10240 KB (10 MB);
77     you can change this by calling setCacheLimit() with the required value.
78     A pixmap takes roughly (\e{width} * \e{height} * \e{depth})/8 bytes of
79     memory.
80 
81     The \e{Qt Quarterly} article
82     \l{http://doc.qt.io/archives/qq/qq12-qpixmapcache.html}{Optimizing
83     with QPixmapCache} explains how to use QPixmapCache to speed up
84     applications by caching the results of painting.
85 
86     \sa QCache, QPixmap
87 */
88 
89 static const int cache_limit_default = 10240; // 10 MB cache limit
90 static int cost(const QPixmap &pixmap)
91 {
92     const int costKb = (pixmap.width() * pixmap.height() * pixmap.depth() / 8) / 1024;
93     return costKb ? costKb : 1; // a small pixmap should have at least a cost of 1(kb)
94 }
95 
96 /*!
97     \class QPixmapCache::Key
98     \brief The QPixmapCache::Key class can be used for efficient access
99     to the QPixmapCache.
100     \inmodule QtGui
101     \since 4.6
102 
103     Use QPixmapCache::insert() to receive an instance of Key generated
104     by the pixmap cache. You can store the key in your own objects for
105     a very efficient one-to-one object-to-pixmap mapping.
106 */
107 
108 /*!
109     Constructs an empty Key object.
110 */
111 QPixmapCache::Key::Key() : d(0)
112 {
113 }
114 
115 /*!
116    \internal
117     Constructs a copy of \a other.
118 */
119 QPixmapCache::Key::Key(const Key &other)
120 {
121     if (other.d)
122         ++(other.d->ref);
123     d = other.d;
124 }
125 
126 /*!
127     Destroys the key.
128 */
129 QPixmapCache::Key::~Key()
130 {
131     if (d && --(d->ref) == 0)
132         delete d;
133 }
134 
135 /*!
136     \internal
137 
138     Returns \c true if this key is the same as the given \a key; otherwise returns
139     false.
140 */
141 bool QPixmapCache::Key::operator ==(const Key &key) const
142 {
143     return (d == key.d);
144 }
145 
146 /*!
147     \fn bool QPixmapCache::Key::operator !=(const Key &key) const
148     \internal
149 */
150 
151 /*!
152     \fn QPixmapCache::Key::Key(Key &&)
153     \internal
154     \since 5.6
155 */
156 
157 /*!
158     \fn QPixmapCache::Key &QPixmapCache::Key::operator=(Key &&)
159     \internal
160     \since 5.6
161 */
162 
163 /*!
164     \fn void QPixmapCache::Key::swap(Key &)
165     \internal
166     \since 5.6
167 */
168 
169 /*!
170     Returns \c true if there is a cached pixmap associated with this key.
171     Otherwise, if pixmap was flushed, the key is no longer valid.
172     \since 5.7
173 */
174 bool QPixmapCache::Key::isValid() const Q_DECL_NOTHROW
175 {
176     return d && d->isValid;
177 }
178 
179 /*!
180     \internal
181 */
182 QPixmapCache::Key &QPixmapCache::Key::operator =(const Key &other)
183 {
184     if (d != other.d) {
185         if (other.d)
186             ++(other.d->ref);
187         if (d && --(d->ref) == 0)
188             delete d;
189         d = other.d;
190     }
191     return *this;
192 }
193 
194 class QPMCache : public QObject, public QCache<QPixmapCache::Key, QPixmapCacheEntry>
195 {
196     Q_OBJECT
197 public:
198     QPMCache();
199     ~QPMCache();
200 
201     void timerEvent(QTimerEvent *) override;
202     bool insert(const QString& key, const QPixmap &pixmap, int cost);
203     QPixmapCache::Key insert(const QPixmap &pixmap, int cost);
204     bool replace(const QPixmapCache::Key &key, const QPixmap &pixmap, int cost);
205     bool remove(const QString &key);
206     bool remove(const QPixmapCache::Key &key);
207 
208     void resizeKeyArray(int size);
209     QPixmapCache::Key createKey();
210     void releaseKey(const QPixmapCache::Key &key);
211     void clear();
212 
213     QPixmap *object(const QString &key) const;
214     QPixmap *object(const QPixmapCache::Key &key) const;
215 
216     static inline QPixmapCache::KeyData *get(const QPixmapCache::Key &key)
217     {return key.d;}
218 
219     static QPixmapCache::KeyData* getKeyData(QPixmapCache::Key *key);
220 
221     bool flushDetachedPixmaps(bool nt);
222 
223 private:
224     enum { soon_time = 10000, flush_time = 30000 };
225     int *keyArray;
226     int theid;
227     int ps;
228     int keyArraySize;
229     int freeKey;
230     QHash<QString, QPixmapCache::Key> cacheKeys;
231     bool t;
232 };
233 
234 QT_BEGIN_INCLUDE_NAMESPACE
235 #include "qpixmapcache.moc"
236 QT_END_INCLUDE_NAMESPACE
237 
238 uint qHash(const QPixmapCache::Key &k)
239 {
240     return qHash(QPMCache::get(k)->key);
241 }
242 
243 QPMCache::QPMCache()
244     : QObject(0),
245       QCache<QPixmapCache::Key, QPixmapCacheEntry>(cache_limit_default),
246       keyArray(0), theid(0), ps(0), keyArraySize(0), freeKey(0), t(false)
247 {
248 }
249 QPMCache::~QPMCache()
250 {
251     clear();
252     free(keyArray);
253 }
254 
255 /*
256   This is supposed to cut the cache size down by about 25% in a
257   minute once the application becomes idle, to let any inserted pixmap
258   remain in the cache for some time before it becomes a candidate for
259   cleaning-up, and to not cut down the size of the cache while the
260   cache is in active use.
261 
262   When the last detached pixmap has been deleted from the cache, kill the
263   timer so Qt won't keep the CPU from going into sleep mode. Currently
264   the timer is not restarted when the pixmap becomes unused, but it does
265   restart once something else is added (i.e. the cache space is actually needed).
266 
267   Returns \c true if any were removed.
268 */
269 bool QPMCache::flushDetachedPixmaps(bool nt)
270 {
271     int mc = maxCost();
272     setMaxCost(nt ? totalCost() * 3 / 4 : totalCost() -1);
273     setMaxCost(mc);
274     ps = totalCost();
275 
276     bool any = false;
277     QHash<QString, QPixmapCache::Key>::iterator it = cacheKeys.begin();
278     while (it != cacheKeys.end()) {
279         if (!contains(it.value())) {
280             releaseKey(it.value());
281             it = cacheKeys.erase(it);
282             any = true;
283         } else {
284             ++it;
285         }
286     }
287 
288     return any;
289 }
290 
291 void QPMCache::timerEvent(QTimerEvent *)
292 {
293     bool nt = totalCost() == ps;
294     if (!flushDetachedPixmaps(nt)) {
295         killTimer(theid);
296         theid = 0;
297     } else if (nt != t) {
298         killTimer(theid);
299         theid = startTimer(nt ? soon_time : flush_time);
300         t = nt;
301     }
302 }
303 
304 
305 QPixmap *QPMCache::object(const QString &key) const
306 {
307     QPixmapCache::Key cacheKey = cacheKeys.value(key);
308     if (!cacheKey.d || !cacheKey.d->isValid) {
309         const_cast<QPMCache *>(this)->cacheKeys.remove(key);
310         return 0;
311     }
312     QPixmap *ptr = QCache<QPixmapCache::Key, QPixmapCacheEntry>::object(cacheKey);
313      //We didn't find the pixmap in the cache, the key is not valid anymore
314     if (!ptr) {
315         const_cast<QPMCache *>(this)->cacheKeys.remove(key);
316     }
317     return ptr;
318 }
319 
320 QPixmap *QPMCache::object(const QPixmapCache::Key &key) const
321 {
322     Q_ASSERT(key.d->isValid);
323     QPixmap *ptr = QCache<QPixmapCache::Key, QPixmapCacheEntry>::object(key);
324     //We didn't find the pixmap in the cache, the key is not valid anymore
325     if (!ptr)
326         const_cast<QPMCache *>(this)->releaseKey(key);
327     return ptr;
328 }
329 
330 bool QPMCache::insert(const QString& key, const QPixmap &pixmap, int cost)
331 {
332     QPixmapCache::Key &cacheKey = cacheKeys[key];
333     //If for the same key we add already a pixmap we should delete it
334     if (cacheKey.d)
335         QCache<QPixmapCache::Key, QPixmapCacheEntry>::remove(cacheKey);
336 
337     //we create a new key the old one has been removed
338     cacheKey = createKey();
339 
340     bool success = QCache<QPixmapCache::Key, QPixmapCacheEntry>::insert(cacheKey, new QPixmapCacheEntry(cacheKey, pixmap), cost);
341     if (success) {
342         if (!theid) {
343             theid = startTimer(flush_time);
344             t = false;
345         }
346     } else {
347         //Insertion failed we released the new allocated key
348         cacheKeys.remove(key);
349     }
350     return success;
351 }
352 
353 QPixmapCache::Key QPMCache::insert(const QPixmap &pixmap, int cost)
354 {
355     QPixmapCache::Key cacheKey = createKey();
356     bool success = QCache<QPixmapCache::Key, QPixmapCacheEntry>::insert(cacheKey, new QPixmapCacheEntry(cacheKey, pixmap), cost);
357     if (success) {
358         if (!theid) {
359             theid = startTimer(flush_time);
360             t = false;
361         }
362     }
363     return cacheKey;
364 }
365 
366 bool QPMCache::replace(const QPixmapCache::Key &key, const QPixmap &pixmap, int cost)
367 {
368     Q_ASSERT(key.d->isValid);
369     //If for the same key we had already an entry so we should delete the pixmap and use the new one
370     QCache<QPixmapCache::Key, QPixmapCacheEntry>::remove(key);
371 
372     QPixmapCache::Key cacheKey = createKey();
373 
374     bool success = QCache<QPixmapCache::Key, QPixmapCacheEntry>::insert(cacheKey, new QPixmapCacheEntry(cacheKey, pixmap), cost);
375     if (success) {
376         if(!theid) {
377             theid = startTimer(flush_time);
378             t = false;
379         }
380         const_cast<QPixmapCache::Key&>(key) = cacheKey;
381     }
382     return success;
383 }
384 
385 bool QPMCache::remove(const QString &key)
386 {
387     auto cacheKey = cacheKeys.constFind(key);
388     //The key was not in the cache
389     if (cacheKey == cacheKeys.constEnd())
390         return false;
391     const bool result = QCache<QPixmapCache::Key, QPixmapCacheEntry>::remove(cacheKey.value());
392     cacheKeys.erase(cacheKey);
393     return result;
394 }
395 
396 bool QPMCache::remove(const QPixmapCache::Key &key)
397 {
398     return QCache<QPixmapCache::Key, QPixmapCacheEntry>::remove(key);
399 }
400 
401 void QPMCache::resizeKeyArray(int size)
402 {
403     if (size <= keyArraySize || size == 0)
404         return;
405     keyArray = q_check_ptr(reinterpret_cast<int *>(realloc(keyArray,
406                     size * sizeof(int))));
407     for (int i = keyArraySize; i != size; ++i)
408         keyArray[i] = i + 1;
409     keyArraySize = size;
410 }
411 
412 QPixmapCache::Key QPMCache::createKey()
413 {
414     if (freeKey == keyArraySize)
415         resizeKeyArray(keyArraySize ? keyArraySize << 1 : 2);
416     int id = freeKey;
417     freeKey = keyArray[id];
418     QPixmapCache::Key key;
419     QPixmapCache::KeyData *d = QPMCache::getKeyData(&key);
420     d->key = ++id;
421     return key;
422 }
423 
424 void QPMCache::releaseKey(const QPixmapCache::Key &key)
425 {
426     if (key.d->key > keyArraySize || key.d->key <= 0)
427         return;
428     key.d->key--;
429     keyArray[key.d->key] = freeKey;
430     freeKey = key.d->key;
431     key.d->isValid = false;
432     key.d->key = 0;
433 }
434 
435 void QPMCache::clear()
436 {
437     free(keyArray);
438     keyArray = 0;
439     freeKey = 0;
440     keyArraySize = 0;
441     //Mark all keys as invalid
442     QList<QPixmapCache::Key> keys = QCache<QPixmapCache::Key, QPixmapCacheEntry>::keys();
443     for (int i = 0; i < keys.size(); ++i)
444         keys.at(i).d->isValid = false;
445     QCache<QPixmapCache::Key, QPixmapCacheEntry>::clear();
446 }
447 
448 QPixmapCache::KeyData* QPMCache::getKeyData(QPixmapCache::Key *key)
449 {
450     if (!key->d)
451         key->d = new QPixmapCache::KeyData;
452     return key->d;
453 }
454 
455 Q_GLOBAL_STATIC(QPMCache, pm_cache)
456 
457 int Q_AUTOTEST_EXPORT q_QPixmapCache_keyHashSize()
458 {
459     return pm_cache()->size();
460 }
461 
462 QPixmapCacheEntry::~QPixmapCacheEntry()
463 {
464     pm_cache()->releaseKey(key);
465 }
466 
467 /*!
468     \obsolete
469     \overload
470 
471     Returns the pixmap associated with the \a key in the cache, or
472     null if there is no such pixmap.
473 
474     \warning If valid, you should copy the pixmap immediately (this is
475     fast). Subsequent insertions into the cache could cause the
476     pointer to become invalid. For this reason, we recommend you use
477     bool find(const QString&, QPixmap*) instead.
478 
479     Example:
480     \snippet code/src_gui_image_qpixmapcache.cpp 0
481 */
482 
483 QPixmap *QPixmapCache::find(const QString &key)
484 {
485     return pm_cache()->object(key);
486 }
487 
488 
489 /*!
490     \obsolete
491 
492     Use bool find(const QString&, QPixmap*) instead.
493 */
494 
495 bool QPixmapCache::find(const QString &key, QPixmap& pixmap)
496 {
497     return find(key, &pixmap);
498 }
499 
500 /*!
501     Looks for a cached pixmap associated with the given \a key in the cache.
502     If the pixmap is found, the function sets \a pixmap to that pixmap and
503     returns \c true; otherwise it leaves \a pixmap alone and returns \c false.
504 
505     \since 4.6
506 
507     Example:
508     \snippet code/src_gui_image_qpixmapcache.cpp 1
509 */
510 
511 bool QPixmapCache::find(const QString &key, QPixmap* pixmap)
512 {
513     QPixmap *ptr = pm_cache()->object(key);
514     if (ptr && pixmap)
515         *pixmap = *ptr;
516     return ptr != 0;
517 }
518 
519 /*!
520     Looks for a cached pixmap associated with the given \a key in the cache.
521     If the pixmap is found, the function sets \a pixmap to that pixmap and
522     returns \c true; otherwise it leaves \a pixmap alone and returns \c false. If
523     the pixmap is not found, it means that the \a key is no longer valid,
524     so it will be released for the next insertion.
525 
526     \since 4.6
527 */
528 bool QPixmapCache::find(const Key &key, QPixmap* pixmap)
529 {
530     //The key is not valid anymore, a flush happened before probably
531     if (!key.d || !key.d->isValid)
532         return false;
533     QPixmap *ptr = pm_cache()->object(key);
534     if (ptr && pixmap)
535         *pixmap = *ptr;
536     return ptr != 0;
537 }
538 
539 /*!
540     Inserts a copy of the pixmap \a pixmap associated with the \a key into
541     the cache.
542 
543     All pixmaps inserted by the Qt library have a key starting with
544     "$qt", so your own pixmap keys should never begin "$qt".
545 
546     When a pixmap is inserted and the cache is about to exceed its
547     limit, it removes pixmaps until there is enough room for the
548     pixmap to be inserted.
549 
550     The oldest pixmaps (least recently accessed in the cache) are
551     deleted when more space is needed.
552 
553     The function returns \c true if the object was inserted into the
554     cache; otherwise it returns \c false.
555 
556     \sa setCacheLimit()
557 */
558 
559 bool QPixmapCache::insert(const QString &key, const QPixmap &pixmap)
560 {
561     return pm_cache()->insert(key, pixmap, cost(pixmap));
562 }
563 
564 /*!
565     Inserts a copy of the given \a pixmap into the cache and returns a key
566     that can be used to retrieve it.
567 
568     When a pixmap is inserted and the cache is about to exceed its
569     limit, it removes pixmaps until there is enough room for the
570     pixmap to be inserted.
571 
572     The oldest pixmaps (least recently accessed in the cache) are
573     deleted when more space is needed.
574 
575     \sa setCacheLimit(), replace()
576 
577     \since 4.6
578 */
579 QPixmapCache::Key QPixmapCache::insert(const QPixmap &pixmap)
580 {
581     return pm_cache()->insert(pixmap, cost(pixmap));
582 }
583 
584 /*!
585     Replaces the pixmap associated with the given \a key with the \a pixmap
586     specified. Returns \c true if the \a pixmap has been correctly inserted into
587     the cache; otherwise returns \c false.
588 
589     \sa setCacheLimit(), insert()
590 
591     \since 4.6
592 */
593 bool QPixmapCache::replace(const Key &key, const QPixmap &pixmap)
594 {
595     //The key is not valid anymore, a flush happened before probably
596     if (!key.d || !key.d->isValid)
597         return false;
598     return pm_cache()->replace(key, pixmap, cost(pixmap));
599 }
600 
601 /*!
602     Returns the cache limit (in kilobytes).
603 
604     The default cache limit is 10240 KB.
605 
606     \sa setCacheLimit()
607 */
608 
609 int QPixmapCache::cacheLimit()
610 {
611     return pm_cache()->maxCost();
612 }
613 
614 /*!
615     Sets the cache limit to \a n kilobytes.
616 
617     The default setting is 10240 KB.
618 
619     \sa cacheLimit()
620 */
621 
622 void QPixmapCache::setCacheLimit(int n)
623 {
624     pm_cache()->setMaxCost(n);
625 }
626 
627 /*!
628   Removes the pixmap associated with \a key from the cache.
629 */
630 void QPixmapCache::remove(const QString &key)
631 {
632     pm_cache()->remove(key);
633 }
634 
635 /*!
636   Removes the pixmap associated with \a key from the cache and releases
637   the key for a future insertion.
638 
639   \since 4.6
640 */
641 void QPixmapCache::remove(const Key &key)
642 {
643     //The key is not valid anymore, a flush happened before probably
644     if (!key.d || !key.d->isValid)
645         return;
646     pm_cache()->remove(key);
647 }
648 
649 /*!
650     Removes all pixmaps from the cache.
651 */
652 
653 void QPixmapCache::clear()
654 {
655     QT_TRY {
656         if (pm_cache.exists())
657             pm_cache->clear();
658     } QT_CATCH(const std::bad_alloc &) {
659         // if we ran out of memory during pm_cache(), it's no leak,
660         // so just ignore it.
661     }
662 }
663 
664 void QPixmapCache::flushDetachedPixmaps()
665 {
666     pm_cache()->flushDetachedPixmaps(true);
667 }
668 
669 int QPixmapCache::totalUsed()
670 {
671     return (pm_cache()->totalCost()+1023) / 1024;
672 }
673 
674 /*!
675    \fn QPixmapCache::KeyData::KeyData()
676 
677    \internal
678 */
679 /*!
680    \fn QPixmapCache::KeyData::KeyData(const KeyData &other)
681    \internal
682 */
683 /*!
684    \fn QPixmapCache::KeyData::~KeyData()
685 
686    \internal
687 */
688 QT_END_NAMESPACE
