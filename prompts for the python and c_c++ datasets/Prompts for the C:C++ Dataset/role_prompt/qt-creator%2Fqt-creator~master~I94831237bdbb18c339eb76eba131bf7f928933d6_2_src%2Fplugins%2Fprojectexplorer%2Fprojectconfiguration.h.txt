I want you to act as a code reviewer of Qt Creator in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #pragma once
27 
28 #include "projectexplorer_export.h"
29 
30 #include <coreplugin/id.h>
31 #include <utils/macroexpander.h>
32 
33 #include <QObject>
34 #include <QString>
35 #include <QVariantMap>
36 
37 QT_BEGIN_NAMESPACE
38 class QFormLayout;
39 QT_END_NAMESPACE
40 
41 namespace ProjectExplorer {
42 
43 class Project;
44 class ProjectConfiguration;
45 
46 class PROJECTEXPLORER_EXPORT ProjectConfigurationAspect : public QObject
47 {
48     Q_OBJECT
49 
50 public:
51     explicit ProjectConfigurationAspect(ProjectConfiguration *projectConfig);
52     ~ProjectConfigurationAspect() override;
53 
54     ProjectConfiguration *projectConfiguration() const { return m_projectConfiguration; }
55 
56     void copyFrom(ProjectConfigurationAspect *other);
57 
58     void setId(Core::Id id) { m_id = id; }
59     void setDisplayName(const QString &displayName) { m_displayName = displayName; }
60     void setSettingsKey(const QString &settingsKey) { m_settingsKey = settingsKey; }
61 
62     Core::Id id() const { return m_id; }
63     QString displayName() const { return m_displayName; }
64     QString settingsKey() const { return  m_settingsKey; }
65 
66     bool isVisible() const { return m_visible; }
67     void setVisible(bool visible) { m_visible = visible; }
68 
69     virtual void addToConfigurationLayout(QFormLayout *layout);
70 
71 signals:
72     void changed();
73 
74 protected:
75     friend class ProjectConfiguration;
76 
77     virtual void fromMap(const QVariantMap &) {}
78     virtual void toMap(QVariantMap &) const {}
79 
80     Core::Id m_id;
81     QString m_displayName;
82     QString m_settingsKey; // Name of data in settings.
83     bool m_visible = true;
84     ProjectConfiguration *m_projectConfiguration = nullptr;
85 };
86 
87 class PROJECTEXPLORER_EXPORT ProjectConfiguration : public QObject
88 {
89     Q_OBJECT
90 
91 protected:
92     explicit ProjectConfiguration(QObject *parent, Core::Id id);
93 
94 public:
95     ~ProjectConfiguration() override = default;
96 
97     Core::Id id() const;
98 
99     QString displayName() const;
100 
101     bool usesDefaultDisplayName() const;
102     void setDisplayName(const QString &name);
103     void setDefaultDisplayName(const QString &name);
104 
105     void setToolTip(const QString &text);
106     QString toolTip() const;
107 
108     // Note: Make sure subclasses call the superclasses' fromMap() function!
109     virtual bool fromMap(const QVariantMap &map);
110 
111     // Note: Make sure subclasses call the superclasses' toMap() function!
112     virtual QVariantMap toMap() const;
113 
114     Utils::MacroExpander *macroExpander() { return &m_macroExpander; }
115     const Utils::MacroExpander *macroExpander() const { return &m_macroExpander; }
116 
117     virtual Project *project() const = 0;
118 
119     virtual bool isActive() const = 0;
120 
121     static QString settingsIdKey();
122 
123     template<class Aspect, typename ...Args>
124     Aspect *addAspect(Args && ...args)
125     {
126         auto aspect = new Aspect(this, args...);
127         m_aspects.append(aspect);
128         return aspect;
129     }
130 
131     const QList<ProjectConfigurationAspect *> aspects() const { return m_aspects; }
132 
133     ProjectConfigurationAspect *extraAspect(Core::Id id) const;
134 
135     template <typename T> T *extraAspect() const
136     {
137         for (ProjectConfigurationAspect *aspect : m_aspects)
138             if (T *result = qobject_cast<T *>(aspect))
139                 return result;
140         return nullptr;
141     }
142 
143 signals:
144     void displayNameChanged();
145     void toolTipChanged();
146 
147 protected:
148     QList<ProjectConfigurationAspect *> m_aspects;
149 
150 private:
151     const Core::Id m_id;
152     QString m_displayName;
153     QString m_defaultDisplayName;
154     QString m_toolTip;
155     Utils::MacroExpander m_macroExpander;
156 };
157 
158 class PROJECTEXPLORER_EXPORT StatefulProjectConfiguration : public ProjectConfiguration
159 {
160     Q_OBJECT
161 
162 public:
163     StatefulProjectConfiguration() = default;
164 
165     bool isEnabled() const;
166 
167     virtual QString disabledReason() const = 0;
168 
169 signals:
170     void enabledChanged();
171 
172 protected:
173     StatefulProjectConfiguration(QObject *parent, Core::Id id);
174 
175     void setEnabled(bool enabled);
176 
177 private:
178     bool m_isEnabled = false;
179 };
180 
181 // helper function:
182 PROJECTEXPLORER_EXPORT Core::Id idFromMap(const QVariantMap &map);
183 
184 } // namespace ProjectExplorer
