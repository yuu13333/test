I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2022 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #ifndef QPOINT_H
41 #define QPOINT_H
42 
43 #include <QtCore/qnamespace.h>
44 
45 #if defined(Q_OS_DARWIN) || defined(Q_QDOC)
46 struct CGPoint;
47 #endif
48 
49 QT_BEGIN_NAMESPACE
50 
51 class QPoint
52 {
53 public:
54     constexpr QPoint() noexcept;
55     constexpr QPoint(int xpos, int ypos) noexcept;
56 
57     constexpr inline bool isNull() const noexcept;
58 
59     constexpr inline int x() const noexcept;
60     constexpr inline int y() const noexcept;
61     constexpr inline void setX(int x) noexcept;
62     constexpr inline void setY(int y) noexcept;
63 
64     constexpr inline int manhattanLength() const;
65 
66     constexpr QPoint transposed() const noexcept { return {yp, xp}; }
67 
68     constexpr inline int &rx() noexcept;
69     constexpr inline int &ry() noexcept;
70 
71     constexpr inline QPoint &operator+=(const QPoint &p);
72     constexpr inline QPoint &operator-=(const QPoint &p);
73 
74     constexpr inline QPoint &operator*=(float factor);
75     constexpr inline QPoint &operator*=(double factor);
76     constexpr inline QPoint &operator*=(int factor);
77 
78     constexpr inline QPoint &operator/=(qreal divisor);
79 
80     constexpr static inline int dotProduct(const QPoint &p1, const QPoint &p2)
81     { return p1.xp * p2.xp + p1.yp * p2.yp; }
82 
83     friend constexpr inline bool operator==(const QPoint &p1, const QPoint &p2) noexcept
84     { return p1.xp == p2.xp && p1.yp == p2.yp; }
85     friend constexpr inline bool operator!=(const QPoint &p1, const QPoint &p2) noexcept
86     { return p1.xp != p2.xp || p1.yp != p2.yp; }
87     friend constexpr inline QPoint operator+(const QPoint &p1, const QPoint &p2) noexcept
88     { return QPoint(p1.xp + p2.xp, p1.yp + p2.yp); }
89     friend constexpr inline QPoint operator-(const QPoint &p1, const QPoint &p2) noexcept
90     { return QPoint(p1.xp - p2.xp, p1.yp - p2.yp); }
91     friend constexpr inline QPoint operator*(const QPoint &p, float factor)
92     { return QPoint(qRound(p.xp * factor), qRound(p.yp * factor)); }
93     friend constexpr inline QPoint operator*(const QPoint &p, double factor)
94     { return QPoint(qRound(p.xp * factor), qRound(p.yp * factor)); }
95     friend constexpr inline QPoint operator*(const QPoint &p, int factor) noexcept
96     { return QPoint(p.xp * factor, p.yp * factor); }
97     friend constexpr inline QPoint operator*(float factor, const QPoint &p)
98     { return QPoint(qRound(p.xp * factor), qRound(p.yp * factor)); }
99     friend constexpr inline QPoint operator*(double factor, const QPoint &p)
100     { return QPoint(qRound(p.xp * factor), qRound(p.yp * factor)); }
101     friend constexpr inline QPoint operator*(int factor, const QPoint &p) noexcept
102     { return QPoint(p.xp * factor, p.yp * factor); }
103     friend constexpr inline QPoint operator+(const QPoint &p) noexcept
104     { return p; }
105     friend constexpr inline QPoint operator-(const QPoint &p) noexcept
106     { return QPoint(-p.xp, -p.yp); }
107     friend constexpr inline QPoint operator/(const QPoint &p, qreal c)
108     { return QPoint(qRound(p.xp / c), qRound(p.yp / c)); }
109 
110 #if defined(Q_OS_DARWIN) || defined(Q_QDOC)
111     [[nodiscard]] Q_CORE_EXPORT CGPoint toCGPoint() const noexcept;
112 #endif
113     [[nodiscard]] constexpr inline QPointF toPointF() const noexcept;
114 
115 private:
116     friend class QTransform;
117     int xp;
118     int yp;
119 
120     template <std::size_t I,
121               typename P,
122               std::enable_if_t<(I < 2), bool> = true,
123               std::enable_if_t<std::is_same_v<std::decay_t<P>, QPoint>, bool> = true>
124     friend constexpr decltype(auto) get(P &&p) noexcept
125     {
126         if constexpr (I == 0)
127             return (std::forward<P>(p).xp);
128         else if constexpr (I == 1)
129             return (std::forward<P>(p).yp);
130     }
131 };
132 
133 Q_DECLARE_TYPEINFO(QPoint, Q_PRIMITIVE_TYPE);
134 
135 /*****************************************************************************
136   QPoint stream functions
137  *****************************************************************************/
138 #ifndef QT_NO_DATASTREAM
139 Q_CORE_EXPORT QDataStream &operator<<(QDataStream &, const QPoint &);
140 Q_CORE_EXPORT QDataStream &operator>>(QDataStream &, QPoint &);
141 #endif
142 
143 /*****************************************************************************
144   QPoint inline functions
145  *****************************************************************************/
146 
147 constexpr inline QPoint::QPoint() noexcept : xp(0), yp(0) {}
148 
149 constexpr inline QPoint::QPoint(int xpos, int ypos) noexcept : xp(xpos), yp(ypos) {}
150 
151 constexpr inline bool QPoint::isNull() const noexcept
152 {
153     return xp == 0 && yp == 0;
154 }
155 
156 constexpr inline int QPoint::x() const noexcept
157 {
158     return xp;
159 }
160 
161 constexpr inline int QPoint::y() const noexcept
162 {
163     return yp;
164 }
165 
166 constexpr inline void QPoint::setX(int xpos) noexcept
167 {
168     xp = xpos;
169 }
170 
171 constexpr inline void QPoint::setY(int ypos) noexcept
172 {
173     yp = ypos;
174 }
175 
176 inline int constexpr QPoint::manhattanLength() const
177 {
178     return qAbs(x()) + qAbs(y());
179 }
180 
181 constexpr inline int &QPoint::rx() noexcept
182 {
183     return xp;
184 }
185 
186 constexpr inline int &QPoint::ry() noexcept
187 {
188     return yp;
189 }
190 
191 constexpr inline QPoint &QPoint::operator+=(const QPoint &p)
192 {
193     xp += p.xp;
194     yp += p.yp;
195     return *this;
196 }
197 
198 constexpr inline QPoint &QPoint::operator-=(const QPoint &p)
199 {
200     xp -= p.xp;
201     yp -= p.yp;
202     return *this;
203 }
204 
205 constexpr inline QPoint &QPoint::operator*=(float factor)
206 {
207     xp = qRound(xp * factor);
208     yp = qRound(yp * factor);
209     return *this;
210 }
211 
212 constexpr inline QPoint &QPoint::operator*=(double factor)
213 {
214     xp = qRound(xp * factor);
215     yp = qRound(yp * factor);
216     return *this;
217 }
218 
219 constexpr inline QPoint &QPoint::operator*=(int factor)
220 {
221     xp = xp * factor;
222     yp = yp * factor;
223     return *this;
224 }
225 
226 constexpr inline QPoint &QPoint::operator/=(qreal c)
227 {
228     xp = qRound(xp / c);
229     yp = qRound(yp / c);
230     return *this;
231 }
232 
233 #ifndef QT_NO_DEBUG_STREAM
234 Q_CORE_EXPORT QDebug operator<<(QDebug, const QPoint &);
235 #endif
236 
237 Q_CORE_EXPORT size_t qHash(QPoint key, size_t seed = 0) noexcept;
238 
239 
240 
241 
242 class QPointF
243 {
244 public:
245     constexpr QPointF() noexcept;
246     constexpr QPointF(const QPoint &p) noexcept;
247     constexpr QPointF(qreal xpos, qreal ypos) noexcept;
248 
249     constexpr inline qreal manhattanLength() const;
250 
251     inline bool isNull() const noexcept;
252 
253     constexpr inline qreal x() const noexcept;
254     constexpr inline qreal y() const noexcept;
255     constexpr inline void setX(qreal x) noexcept;
256     constexpr inline void setY(qreal y) noexcept;
257 
258     constexpr QPointF transposed() const noexcept { return {yp, xp}; }
259 
260     constexpr inline qreal &rx() noexcept;
261     constexpr inline qreal &ry() noexcept;
262 
263     constexpr inline QPointF &operator+=(const QPointF &p);
264     constexpr inline QPointF &operator-=(const QPointF &p);
265     constexpr inline QPointF &operator*=(qreal c);
266     constexpr inline QPointF &operator/=(qreal c);
267 
268     constexpr static inline qreal dotProduct(const QPointF &p1, const QPointF &p2)
269     {
270         return p1.xp * p2.xp + p1.yp * p2.yp;
271     }
272 
273     QT_WARNING_PUSH
274     QT_WARNING_DISABLE_FLOAT_COMPARE
275     friend constexpr inline bool operator==(const QPointF &p1, const QPointF &p2)
276     {
277         return ((!p1.xp || !p2.xp) ? qFuzzyIsNull(p1.xp - p2.xp) : qFuzzyCompare(p1.xp, p2.xp))
278             && ((!p1.yp || !p2.yp) ? qFuzzyIsNull(p1.yp - p2.yp) : qFuzzyCompare(p1.yp, p2.yp));
279     }
280     friend constexpr inline bool operator!=(const QPointF &p1, const QPointF &p2)
281     {
282         return !(p1 == p2);
283     }
284     QT_WARNING_POP
285 
286     friend constexpr inline QPointF operator+(const QPointF &p1, const QPointF &p2)
287     { return QPointF(p1.xp + p2.xp, p1.yp + p2.yp); }
288     friend constexpr inline QPointF operator-(const QPointF &p1, const QPointF &p2)
289     { return QPointF(p1.xp - p2.xp, p1.yp - p2.yp); }
290     friend constexpr inline QPointF operator*(const QPointF &p, qreal c)
291     { return QPointF(p.xp * c, p.yp * c); }
292     friend constexpr inline QPointF operator*(qreal c, const QPointF &p)
293     { return QPointF(p.xp * c, p.yp * c); }
294     friend constexpr inline QPointF operator+(const QPointF &p)
295     { return p; }
296     friend constexpr inline QPointF operator-(const QPointF &p)
297     { return QPointF(-p.xp, -p.yp); }
298     friend constexpr inline QPointF operator/(const QPointF &p, qreal divisor)
299     {
300         Q_ASSERT(divisor < 0 || divisor > 0);
301         return QPointF(p.xp / divisor, p.yp / divisor);
302     }
303 
304     constexpr QPoint toPoint() const;
305 
306 #if defined(Q_OS_DARWIN) || defined(Q_QDOC)
307     [[nodiscard]] Q_CORE_EXPORT static QPointF fromCGPoint(CGPoint point) noexcept;
308     [[nodiscard]] Q_CORE_EXPORT CGPoint toCGPoint() const noexcept;
309 #endif
310 
311 private:
312     friend class QTransform;
313 
314     qreal xp;
315     qreal yp;
316 
317     template <std::size_t I,
318               typename P,
319               std::enable_if_t<(I < 2), bool> = true,
320               std::enable_if_t<std::is_same_v<std::decay_t<P>, QPointF>, bool> = true>
321     friend constexpr decltype(auto) get(P &&p) noexcept
322     {
323         if constexpr (I == 0)
324             return (std::forward<P>(p).xp);
325         else if constexpr (I == 1)
326             return (std::forward<P>(p).yp);
327     }
328 };
329 
330 Q_DECLARE_TYPEINFO(QPointF, Q_PRIMITIVE_TYPE);
331 
332 size_t qHash(QPointF, size_t seed = 0) = delete;
333 
334 /*****************************************************************************
335   QPointF stream functions
336  *****************************************************************************/
337 #ifndef QT_NO_DATASTREAM
338 Q_CORE_EXPORT QDataStream &operator<<(QDataStream &, const QPointF &);
339 Q_CORE_EXPORT QDataStream &operator>>(QDataStream &, QPointF &);
340 #endif
341 
342 /*****************************************************************************
343   QPointF inline functions
344  *****************************************************************************/
345 
346 constexpr inline QPointF::QPointF() noexcept : xp(0), yp(0) { }
347 
348 constexpr inline QPointF::QPointF(qreal xpos, qreal ypos) noexcept : xp(xpos), yp(ypos) { }
349 
350 constexpr inline QPointF::QPointF(const QPoint &p) noexcept : xp(p.x()), yp(p.y()) { }
351 
352 constexpr inline qreal QPointF::manhattanLength() const
353 {
354     return qAbs(x()) + qAbs(y());
355 }
356 
357 inline bool QPointF::isNull() const noexcept
358 {
359     return qIsNull(xp) && qIsNull(yp);
360 }
361 
362 constexpr inline qreal QPointF::x() const noexcept
363 {
364     return xp;
365 }
366 
367 constexpr inline qreal QPointF::y() const noexcept
368 {
369     return yp;
370 }
371 
372 constexpr inline void QPointF::setX(qreal xpos) noexcept
373 {
374     xp = xpos;
375 }
376 
377 constexpr inline void QPointF::setY(qreal ypos) noexcept
378 {
379     yp = ypos;
380 }
381 
382 constexpr inline qreal &QPointF::rx() noexcept
383 {
384     return xp;
385 }
386 
387 constexpr inline qreal &QPointF::ry() noexcept
388 {
389     return yp;
390 }
391 
392 constexpr inline QPointF &QPointF::operator+=(const QPointF &p)
393 {
394     xp += p.xp;
395     yp += p.yp;
396     return *this;
397 }
398 
399 constexpr inline QPointF &QPointF::operator-=(const QPointF &p)
400 {
401     xp -= p.xp;
402     yp -= p.yp;
403     return *this;
404 }
405 
406 constexpr inline QPointF &QPointF::operator*=(qreal c)
407 {
408     xp *= c;
409     yp *= c;
410     return *this;
411 }
412 
413 constexpr inline QPointF &QPointF::operator/=(qreal divisor)
414 {
415     Q_ASSERT(divisor > 0 || divisor < 0);
416     xp /= divisor;
417     yp /= divisor;
418     return *this;
419 }
420 
421 constexpr QPointF QPoint::toPointF() const noexcept { return *this; }
422 
423 constexpr inline QPoint QPointF::toPoint() const
424 {
425     return QPoint(qRound(xp), qRound(yp));
426 }
427 
428 #ifndef QT_NO_DEBUG_STREAM
429 Q_CORE_EXPORT QDebug operator<<(QDebug d, const QPointF &p);
430 #endif
431 
432 QT_END_NAMESPACE
433 
434 /*****************************************************************************
435   QPoint/QPointF tuple protocol
436  *****************************************************************************/
437 
438 namespace std {
439     template <>
440     class tuple_size<QT_PREPEND_NAMESPACE(QPoint)> : public integral_constant<size_t, 2> {};
441     template <>
442     class tuple_element<0, QT_PREPEND_NAMESPACE(QPoint)> { public: using type = int; };
443     template <>
444     class tuple_element<1, QT_PREPEND_NAMESPACE(QPoint)> { public: using type = int; };
445 
446     template <>
447     class tuple_size<QT_PREPEND_NAMESPACE(QPointF)> : public integral_constant<size_t, 2> {};
448     template <>
449     class tuple_element<0, QT_PREPEND_NAMESPACE(QPointF)> { public: using type = QT_PREPEND_NAMESPACE(qreal); };
450     template <>
451     class tuple_element<1, QT_PREPEND_NAMESPACE(QPointF)> { public: using type = QT_PREPEND_NAMESPACE(qreal); };
452 }
453 
454 #endif // QPOINT_H
