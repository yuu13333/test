I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2020 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #ifndef QMATH_H
41 #define QMATH_H
42 
43 #if 0
44 #pragma qt_class(QtMath)
45 #endif
46 
47 #include <QtCore/qglobal.h>
48 #include <QtCore/qalgorithms.h>
49 
50 #if __has_include(<bit>) && __cplusplus > 201703L
51 #include <bit>
52 #endif
53 
54 #ifndef _USE_MATH_DEFINES
55 #  define _USE_MATH_DEFINES
56 #  define undef_USE_MATH_DEFINES
57 #endif
58 
59 #include <cmath>
60 
61 #ifdef undef_USE_MATH_DEFINES
62 #  undef _USE_MATH_DEFINES
63 #  undef undef_USE_MATH_DEFINES
64 #endif
65 
66 QT_BEGIN_NAMESPACE
67 
68 #define QT_SINE_TABLE_SIZE 256
69 
70 extern Q_CORE_EXPORT const qreal qt_sine_table[QT_SINE_TABLE_SIZE];
71 
72 template <typename T> int qCeil(T v)
73 {
74     using std::ceil;
75     return int(ceil(v));
76 }
77 
78 template <typename T> int qFloor(T v)
79 {
80     using std::floor;
81     return int(floor(v));
82 }
83 
84 template <typename T> auto qFabs(T v)
85 {
86     using std::fabs;
87     return fabs(v);
88 }
89 
90 template <typename T> auto qSin(T v)
91 {
92     using std::sin;
93     return sin(v);
94 }
95 
96 template <typename T> auto qCos(T v)
97 {
98     using std::cos;
99     return cos(v);
100 }
101 
102 template <typename T> auto qTan(T v)
103 {
104     using std::tan;
105     return tan(v);
106 }
107 
108 template <typename T> auto qAcos(T v)
109 {
110     using std::acos;
111     return acos(v);
112 }
113 
114 template <typename T> auto qAsin(T v)
115 {
116     using std::asin;
117     return asin(v);
118 }
119 
120 template <typename T> auto qAtan(T v)
121 {
122     using std::atan;
123     return atan(v);
124 }
125 
126 template <typename T1, typename T2> auto qAtan2(T1 y, T2 x)
127 {
128     using std::atan2;
129     return atan2(y, x);
130 }
131 
132 template <typename T> auto qSqrt(T v)
133 {
134     using std::sqrt;
135     return sqrt(v);
136 }
137 
138 namespace QtPrivate {
139 // Implements hypot() without limiting number of arguments:
140 template <typename T>
141 class QHypotHelper
142 {
143     const T scale, total;
144     QHypotHelper(T first, T prior) : scale(qAbs(first)), total(prior) {}
145 public:
146     QHypotHelper(T first) : QHypotHelper(qAbs(first), T(1)) {}
147     T result() const { return scale * std::sqrt(total); }
148 
149     template<typename F, typename R = decltype(std::hypot(T(1), F(1)))>
150     QHypotHelper<R> add(F next) const
151     {
152         const R val = qAbs(next);
153         const R ratio = next / scale;
154         if (val > scale)
155             return QHypotHelper<R>(val, total / ratio / ratio + 1);
156         return QHypotHelper<R>(scale, total + ratio * ratio);
157     }
158 };
159 } // QtPrivate
160 
161 template <typename Tx, typename Ty>
162 auto qHypot(Tx x, Ty y)
163 {
164     // C99 has hypot(), hence C++11 has std::hypot()
165     using std::hypot;
166     return hypot(x, y);
167 }
168 
169 template <typename Tx, typename Ty, typename Tz>
170 auto qHypot(Tx x, Ty y, Tz z)
171 {
172 #if __cpp_lib_hypot >= 201603L
173     using std::hypot;
174     return hypot(x, y, z);
175 #else
176     return QtPrivate::QHypotHelper(x).add(y).add(z).result();
177 #endif
178 }
179 
180 template <typename T> auto qLn(T v)
181 {
182     using std::log;
183     return log(v);
184 }
185 
186 template <typename T> auto qExp(T v)
187 {
188     using std::exp;
189     return exp(v);
190 }
191 
192 template <typename T1, typename T2> auto qPow(T1 x, T2 y)
193 {
194     using std::pow;
195     return pow(x, y);
196 }
197 
198 // TODO: use template variables (e.g. Qt::pi<type>) for these once we have C++14 support:
199 
200 #ifndef M_E
201 #define M_E (2.7182818284590452354)
202 #endif
203 
204 #ifndef M_LOG2E
205 #define M_LOG2E (1.4426950408889634074)
206 #endif
207 
208 #ifndef M_LOG10E
209 #define M_LOG10E (0.43429448190325182765)
210 #endif
211 
212 #ifndef M_LN2
213 #define M_LN2 (0.69314718055994530942)
214 #endif
215 
216 #ifndef M_LN10
217 #define M_LN10 (2.30258509299404568402)
218 #endif
219 
220 #ifndef M_PI
221 #define M_PI (3.14159265358979323846)
222 #endif
223 
224 #ifndef M_PI_2
225 #define M_PI_2 (1.57079632679489661923)
226 #endif
227 
228 #ifndef M_PI_4
229 #define M_PI_4 (0.78539816339744830962)
230 #endif
231 
232 #ifndef M_1_PI
233 #define M_1_PI (0.31830988618379067154)
234 #endif
235 
236 #ifndef M_2_PI
237 #define M_2_PI (0.63661977236758134308)
238 #endif
239 
240 #ifndef M_2_SQRTPI
241 #define M_2_SQRTPI (1.12837916709551257390)
242 #endif
243 
244 #ifndef M_SQRT2
245 #define M_SQRT2 (1.41421356237309504880)
246 #endif
247 
248 #ifndef M_SQRT1_2
249 #define M_SQRT1_2 (0.70710678118654752440)
250 #endif
251 
252 inline qreal qFastSin(qreal x)
253 {
254     int si = int(x * (0.5 * QT_SINE_TABLE_SIZE / M_PI)); // Would be more accurate with qRound, but slower.
255     qreal d = x - si * (2.0 * M_PI / QT_SINE_TABLE_SIZE);
256     int ci = si + QT_SINE_TABLE_SIZE / 4;
257     si &= QT_SINE_TABLE_SIZE - 1;
258     ci &= QT_SINE_TABLE_SIZE - 1;
259     return qt_sine_table[si] + (qt_sine_table[ci] - 0.5 * qt_sine_table[si] * d) * d;
260 }
261 
262 inline qreal qFastCos(qreal x)
263 {
264     int ci = int(x * (0.5 * QT_SINE_TABLE_SIZE / M_PI)); // Would be more accurate with qRound, but slower.
265     qreal d = x - ci * (2.0 * M_PI / QT_SINE_TABLE_SIZE);
266     int si = ci + QT_SINE_TABLE_SIZE / 4;
267     si &= QT_SINE_TABLE_SIZE - 1;
268     ci &= QT_SINE_TABLE_SIZE - 1;
269     return qt_sine_table[si] - (qt_sine_table[ci] + 0.5 * qt_sine_table[si] * d) * d;
270 }
271 
272 constexpr inline float qDegreesToRadians(float degrees)
273 {
274     return degrees * float(M_PI/180);
275 }
276 
277 constexpr inline double qDegreesToRadians(double degrees)
278 {
279     return degrees * (M_PI / 180);
280 }
281 
282 constexpr inline long double qDegreesToRadians(long double degrees)
283 {
284     return degrees * (M_PI / 180);
285 }
286 
287 template <typename T, std::enable_if_t<std::is_integral_v<T>, bool> = true>
288 constexpr inline double qDegreesToRadians(T degrees)
289 {
290     return qDegreesToRadians(static_cast<double>(degrees));
291 }
292 
293 constexpr inline float qRadiansToDegrees(float radians)
294 {
295     return radians * float(180/M_PI);
296 }
297 
298 constexpr inline double qRadiansToDegrees(double radians)
299 {
300     return radians * (180 / M_PI);
301 }
302 
303 constexpr inline long double qRadiansToDegrees(long double radians)
304 {
305     return radians * (180 / M_PI);
306 }
307 
308 // A qRadiansToDegrees(Integral) overload isn't here; it's extremely
309 // questionable that someone is manipulating quantities in radians
310 // using integral datatypes...
311 
312 namespace QtPrivate {
313 constexpr inline quint32 qConstexprNextPowerOfTwo(quint32 v) {
314     v |= v >> 1;
315     v |= v >> 2;
316     v |= v >> 4;
317     v |= v >> 8;
318     v |= v >> 16;
319     ++v;
320     return v;
321 }
322 
323 constexpr inline quint64 qConstexprNextPowerOfTwo(quint64 v) {
324     v |= v >> 1;
325     v |= v >> 2;
326     v |= v >> 4;
327     v |= v >> 8;
328     v |= v >> 16;
329     v |= v >> 32;
330     ++v;
331     return v;
332 }
333 
334 constexpr inline quint32 qConstexprNextPowerOfTwo(qint32 v)
335 {
336     return qConstexprNextPowerOfTwo(quint32(v));
337 }
338 
339 constexpr inline quint64 qConstexprNextPowerOfTwo(qint64 v)
340 {
341     return qConstexprNextPowerOfTwo(quint64(v));
342 }
343 } // namespace QtPrivate
344 
345 constexpr inline quint32 qNextPowerOfTwo(quint32 v)
346 {
347 #if defined(__cpp_lib_int_pow2) && __cpp_lib_int_pow2 >= 202002L
348     return std::bit_ceil(v + 1);
349 #elif defined(QT_HAS_BUILTIN_CLZ)
350     if (v == 0)
351         return 1;
352     return 2U << (31 ^ QAlgorithmsPrivate::qt_builtin_clz(v));
353 #else
354     return QtPrivate::qConstexprNextPowerOfTwo(v);
355 #endif
356 }
357 
358 constexpr inline quint64 qNextPowerOfTwo(quint64 v)
359 {
360 #if defined(__cpp_lib_int_pow2) && __cpp_lib_int_pow2 >= 202002L
361     return std::bit_ceil(v + 1);
362 #elif defined(QT_HAS_BUILTIN_CLZLL)
363     if (v == 0)
364         return 1;
365     return Q_UINT64_C(2) << (63 ^ QAlgorithmsPrivate::qt_builtin_clzll(v));
366 #else
367     return QtPrivate::qConstexprNextPowerOfTwo(v);
368 #endif
369 }
370 
371 constexpr inline quint32 qNextPowerOfTwo(qint32 v)
372 {
373     return qNextPowerOfTwo(quint32(v));
374 }
375 
376 constexpr inline quint64 qNextPowerOfTwo(qint64 v)
377 {
378     return qNextPowerOfTwo(quint64(v));
379 }
380 
381 QT_END_NAMESPACE
382 
383 #endif // QMATH_H
