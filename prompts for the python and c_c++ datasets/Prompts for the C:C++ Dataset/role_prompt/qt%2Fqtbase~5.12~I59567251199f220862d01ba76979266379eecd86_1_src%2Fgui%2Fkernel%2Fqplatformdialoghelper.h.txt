I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2017 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #ifndef QPLATFORMDIALOGHELPER_H
41 #define QPLATFORMDIALOGHELPER_H
42 
43 //
44 //  W A R N I N G
45 //  -------------
46 //
47 // This file is part of the QPA API and is not meant to be used
48 // in applications. Usage of this API may make your code
49 // source and binary incompatible with future versions of Qt.
50 //
51 
52 #include <QtGui/qtguiglobal.h>
53 #include <QtCore/QtGlobal>
54 #include <QtCore/QObject>
55 #include <QtCore/QList>
56 #include <QtCore/QSharedDataPointer>
57 #include <QtCore/QSharedPointer>
58 #include <QtCore/QDir>
59 #include <QtCore/QUrl>
60 #include <QtGui/QRgb>
61 
62 QT_BEGIN_NAMESPACE
63 
64 
65 class QString;
66 class QColor;
67 class QFont;
68 class QWindow;
69 class QVariant;
70 class QUrl;
71 class QColorDialogOptionsPrivate;
72 class QFontDialogOptionsPrivate;
73 class QFileDialogOptionsPrivate;
74 class QMessageDialogOptionsPrivate;
75 
76 #define QPLATFORMDIALOGHELPERS_HAS_CREATE
77 
78 class Q_GUI_EXPORT QPlatformDialogHelper : public QObject
79 {
80     Q_OBJECT
81 public:
82     enum StyleHint {
83     };
84     enum DialogCode { Rejected, Accepted };
85 
86     enum StandardButton {
87         // keep this in sync with QDialogButtonBox::StandardButton and QMessageBox::StandardButton
88         NoButton           = 0x00000000,
89         Ok                 = 0x00000400,
90         Save               = 0x00000800,
91         SaveAll            = 0x00001000,
92         Open               = 0x00002000,
93         Yes                = 0x00004000,
94         YesToAll           = 0x00008000,
95         No                 = 0x00010000,
96         NoToAll            = 0x00020000,
97         Abort              = 0x00040000,
98         Retry              = 0x00080000,
99         Ignore             = 0x00100000,
100         Close              = 0x00200000,
101         Cancel             = 0x00400000,
102         Discard            = 0x00800000,
103         Help               = 0x01000000,
104         Apply              = 0x02000000,
105         Reset              = 0x04000000,
106         RestoreDefaults    = 0x08000000,
107 
108 
109         FirstButton        = Ok,                // internal
110         LastButton         = RestoreDefaults,   // internal
111         LowestBit          = 10,                // internal: log2(FirstButton)
112         HighestBit         = 27                 // internal: log2(LastButton)
113     };
114 
115     Q_DECLARE_FLAGS(StandardButtons, StandardButton)
116     Q_FLAG(StandardButtons)
117 
118     enum ButtonRole {
119         // keep this in sync with QDialogButtonBox::ButtonRole and QMessageBox::ButtonRole
120         // TODO Qt 6: make the enum copies explicit, and make InvalidRole == 0 so that
121         // AcceptRole can be or'ed with flags, and EOL can be the same as InvalidRole (null-termination)
122         InvalidRole = -1,
123         AcceptRole,
124         RejectRole,
125         DestructiveRole,
126         ActionRole,
127         HelpRole,
128         YesRole,
129         NoRole,
130         ResetRole,
131         ApplyRole,
132 
133         NRoles,
134 
135         RoleMask        = 0x0FFFFFFF,
136         AlternateRole   = 0x10000000,
137         Stretch         = 0x20000000,
138         Reverse         = 0x40000000,
139         EOL             = InvalidRole
140     };
141     Q_ENUM(ButtonRole)
142 
143     enum ButtonLayout {
144         // keep this in sync with QDialogButtonBox::ButtonLayout and QMessageBox::ButtonLayout
145         UnknownLayout = -1,
146         WinLayout,
147         MacLayout,
148         KdeLayout,
149         GnomeLayout,
150         MacModelessLayout
151     };
152 
153     QPlatformDialogHelper();
154     virtual ~QPlatformDialogHelper();
155 
156     virtual QVariant styleHint(StyleHint hint) const;
157 
158     virtual void exec() = 0;
159     virtual bool show(Qt::WindowFlags windowFlags,
160                           Qt::WindowModality windowModality,
161                           QWindow *parent) = 0;
162     virtual void hide() = 0;
163 
164     static QVariant defaultStyleHint(QPlatformDialogHelper::StyleHint hint);
165 
166     static const int *buttonLayout(Qt::Orientation orientation = Qt::Horizontal, ButtonLayout policy = UnknownLayout);
167     static ButtonRole buttonRole(StandardButton button);
168 
169 Q_SIGNALS:
170     void accept();
171     void reject();
172 };
173 
174 QT_END_NAMESPACE
175 Q_DECLARE_METATYPE(QPlatformDialogHelper::StandardButton)
176 Q_DECLARE_METATYPE(QPlatformDialogHelper::ButtonRole)
177 QT_BEGIN_NAMESPACE
178 
179 class Q_GUI_EXPORT QColorDialogOptions
180 {
181     Q_GADGET
182     Q_DISABLE_COPY(QColorDialogOptions)
183 protected:
184     explicit QColorDialogOptions(QColorDialogOptionsPrivate *dd);
185     ~QColorDialogOptions();
186 public:
187     enum ColorDialogOption {
188         ShowAlphaChannel    = 0x00000001,
189         NoButtons           = 0x00000002,
190         DontUseNativeDialog = 0x00000004
191     };
192 
193     Q_DECLARE_FLAGS(ColorDialogOptions, ColorDialogOption)
194     Q_FLAG(ColorDialogOptions)
195 
196     static QSharedPointer<QColorDialogOptions> create();
197     QSharedPointer<QColorDialogOptions> clone() const;
198 
199     QString windowTitle() const;
200     void setWindowTitle(const QString &);
201 
202     void setOption(ColorDialogOption option, bool on = true);
203     bool testOption(ColorDialogOption option) const;
204     void setOptions(ColorDialogOptions options);
205     ColorDialogOptions options() const;
206 
207     static int customColorCount();
208     static QRgb customColor(int index);
209     static QRgb *customColors();
210     static void setCustomColor(int index, QRgb color);
211 
212     static QRgb *standardColors();
213     static QRgb standardColor(int index);
214     static void setStandardColor(int index, QRgb color);
215 
216 private:
217     QColorDialogOptionsPrivate *d;
218 };
219 
220 class Q_GUI_EXPORT QPlatformColorDialogHelper : public QPlatformDialogHelper
221 {
222     Q_OBJECT
223 public:
224     const QSharedPointer<QColorDialogOptions> &options() const;
225     void setOptions(const QSharedPointer<QColorDialogOptions> &options);
226 
227     virtual void setCurrentColor(const QColor &) = 0;
228     virtual QColor currentColor() const = 0;
229 
230 Q_SIGNALS:
231     void currentColorChanged(const QColor &color);
232     void colorSelected(const QColor &color);
233 
234 private:
235     QSharedPointer<QColorDialogOptions> m_options;
236 };
237 
238 class Q_GUI_EXPORT QFontDialogOptions
239 {
240     Q_GADGET
241     Q_DISABLE_COPY(QFontDialogOptions)
242 protected:
243     explicit QFontDialogOptions(QFontDialogOptionsPrivate *dd);
244     ~QFontDialogOptions();
245 
246 public:
247     enum FontDialogOption {
248         NoButtons           = 0x00000001,
249         DontUseNativeDialog = 0x00000002,
250         ScalableFonts       = 0x00000004,
251         NonScalableFonts    = 0x00000008,
252         MonospacedFonts     = 0x00000010,
253         ProportionalFonts   = 0x00000020
254     };
255 
256     Q_DECLARE_FLAGS(FontDialogOptions, FontDialogOption)
257     Q_FLAG(FontDialogOptions)
258 
259     static QSharedPointer<QFontDialogOptions> create();
260     QSharedPointer<QFontDialogOptions> clone() const;
261 
262     QString windowTitle() const;
263     void setWindowTitle(const QString &);
264 
265     void setOption(FontDialogOption option, bool on = true);
266     bool testOption(FontDialogOption option) const;
267     void setOptions(FontDialogOptions options);
268     FontDialogOptions options() const;
269 
270 private:
271     QFontDialogOptionsPrivate *d;
272 };
273 
274 class Q_GUI_EXPORT QPlatformFontDialogHelper : public QPlatformDialogHelper
275 {
276     Q_OBJECT
277 public:
278     virtual void setCurrentFont(const QFont &) = 0;
279     virtual QFont currentFont() const = 0;
280 
281     const QSharedPointer<QFontDialogOptions> &options() const;
282     void setOptions(const QSharedPointer<QFontDialogOptions> &options);
283 
284 Q_SIGNALS:
285     void currentFontChanged(const QFont &font);
286     void fontSelected(const QFont &font);
287 
288 private:
289     QSharedPointer<QFontDialogOptions> m_options;
290 };
291 
292 class Q_GUI_EXPORT QFileDialogOptions
293 {
294     Q_GADGET
295     Q_DISABLE_COPY(QFileDialogOptions)
296 protected:
297     QFileDialogOptions(QFileDialogOptionsPrivate *dd);
298     ~QFileDialogOptions();
299 
300 public:
301     enum ViewMode { Detail, List };
302     Q_ENUM(ViewMode)
303 
304     enum FileMode { AnyFile, ExistingFile, Directory, ExistingFiles, DirectoryOnly };
305     Q_ENUM(FileMode)
306 
307     enum AcceptMode { AcceptOpen, AcceptSave };
308     Q_ENUM(AcceptMode)
309 
310     enum DialogLabel { LookIn, FileName, FileType, Accept, Reject, DialogLabelCount };
311     Q_ENUM(DialogLabel)
312 
313     enum FileDialogOption
314     {
315         ShowDirsOnly                = 0x00000001,
316         DontResolveSymlinks         = 0x00000002,
317         DontConfirmOverwrite        = 0x00000004,
318         DontUseSheet                = 0x00000008,
319         DontUseNativeDialog         = 0x00000010,
320         ReadOnly                    = 0x00000020,
321         HideNameFilterDetails       = 0x00000040,
322         DontUseCustomDirectoryIcons = 0x00000080
323     };
324     Q_DECLARE_FLAGS(FileDialogOptions, FileDialogOption)
325     Q_FLAG(FileDialogOptions)
326 
327     static QSharedPointer<QFileDialogOptions> create();
328     QSharedPointer<QFileDialogOptions> clone() const;
329 
330     QString windowTitle() const;
331     void setWindowTitle(const QString &);
332 
333     void setOption(FileDialogOption option, bool on = true);
334     bool testOption(FileDialogOption option) const;
335     void setOptions(FileDialogOptions options);
336     FileDialogOptions options() const;
337 
338     QDir::Filters filter() const;
339     void setFilter(QDir::Filters filters);
340 
341     void setViewMode(ViewMode mode);
342     ViewMode viewMode() const;
343 
344     void setFileMode(FileMode mode);
345     FileMode fileMode() const;
346 
347     void setAcceptMode(AcceptMode mode);
348     AcceptMode acceptMode() const;
349 
350     void setSidebarUrls(const QList<QUrl> &urls);
351     QList<QUrl> sidebarUrls() const;
352 
353     bool useDefaultNameFilters() const;
354     void setUseDefaultNameFilters(bool d);
355 
356     void setNameFilters(const QStringList &filters);
357     QStringList nameFilters() const;
358 
359     void setMimeTypeFilters(const QStringList &filters);
360     QStringList mimeTypeFilters() const;
361 
362     void setDefaultSuffix(const QString &suffix);
363     QString defaultSuffix() const;
364 
365     void setHistory(const QStringList &paths);
366     QStringList history() const;
367 
368     void setLabelText(DialogLabel label, const QString &text);
369     QString labelText(DialogLabel label) const;
370     bool isLabelExplicitlySet(DialogLabel label);
371 
372     QUrl initialDirectory() const;
373     void setInitialDirectory(const QUrl &);
374 
375     QString initiallySelectedMimeTypeFilter() const;
376     void setInitiallySelectedMimeTypeFilter(const QString &);
377 
378     QString initiallySelectedNameFilter() const;
379     void setInitiallySelectedNameFilter(const QString &);
380 
381     QList<QUrl> initiallySelectedFiles() const;
382     void setInitiallySelectedFiles(const QList<QUrl> &);
383 
384     void setSupportedSchemes(const QStringList &schemes);
385     QStringList supportedSchemes() const;
386 
387     static QString defaultNameFilterString();
388 
389 private:
390     QFileDialogOptionsPrivate *d;
391 };
392 
393 class Q_GUI_EXPORT QPlatformFileDialogHelper : public QPlatformDialogHelper
394 {
395     Q_OBJECT
396 public:
397     virtual bool defaultNameFilterDisables() const = 0;
398     virtual void setDirectory(const QUrl &directory) = 0;
399     virtual QUrl directory() const = 0;
400     virtual void selectFile(const QUrl &filename) = 0;
401     virtual QList<QUrl> selectedFiles() const = 0;
402     virtual void setFilter() = 0;
403     virtual void selectMimeTypeFilter(const QString &filter);
404     virtual void selectNameFilter(const QString &filter) = 0;
405     virtual QString selectedMimeTypeFilter() const;
406     virtual QString selectedNameFilter() const = 0;
407 
408     virtual bool isSupportedUrl(const QUrl &url) const;
409 
410     const QSharedPointer<QFileDialogOptions> &options() const;
411     void setOptions(const QSharedPointer<QFileDialogOptions> &options);
412 
413     static QStringList cleanFilterList(const QString &filter);
414     static const char *filterRegExp;
415 
416 Q_SIGNALS:
417     void fileSelected(const QUrl &file);
418     void filesSelected(const QList<QUrl> &files);
419     void currentChanged(const QUrl &path);
420     void directoryEntered(const QUrl &directory);
421     void filterSelected(const QString &filter);
422 
423 private:
424     QSharedPointer<QFileDialogOptions> m_options;
425 };
426 
427 class Q_GUI_EXPORT QMessageDialogOptions
428 {
429     Q_GADGET
430     Q_DISABLE_COPY(QMessageDialogOptions)
431 protected:
432     QMessageDialogOptions(QMessageDialogOptionsPrivate *dd);
433     ~QMessageDialogOptions();
434 
435 public:
436     // Keep in sync with QMessageBox::Icon
437     enum Icon { NoIcon, Information, Warning, Critical, Question };
438     Q_ENUM(Icon)
439 
440     static QSharedPointer<QMessageDialogOptions> create();
441     QSharedPointer<QMessageDialogOptions> clone() const;
442 
443     QString windowTitle() const;
444     void setWindowTitle(const QString &);
445 
446     void setIcon(Icon icon);
447     Icon icon() const;
448 
449     void setText(const QString &text);
450     QString text() const;
451 
452     void setInformativeText(const QString &text);
453     QString informativeText() const;
454 
455     void setDetailedText(const QString &text);
456     QString detailedText() const;
457 
458     void setStandardButtons(QPlatformDialogHelper::StandardButtons buttons);
459     QPlatformDialogHelper::StandardButtons standardButtons() const;
460 
461     struct CustomButton {
462         QString label;
463         QPlatformDialogHelper::ButtonRole role;
464         int id;
465         void *button; // strictly internal use only
466 
467         bool operator==(const CustomButton &other) {
468             return id == other.id;
469         }
470     };
471 
472     int addButton(const QString &label, QPlatformDialogHelper::ButtonRole role, void *buttonImpl = nullptr);
473     void removeButton(int id);
474     const QVector<CustomButton> &customButtons();
475     const CustomButton *customButton(int id);
476 
477 private:
478     QMessageDialogOptionsPrivate *d;
479 };
480 
481 class Q_GUI_EXPORT QPlatformMessageDialogHelper : public QPlatformDialogHelper
482 {
483     Q_OBJECT
484 public:
485     const QSharedPointer<QMessageDialogOptions> &options() const;
486     void setOptions(const QSharedPointer<QMessageDialogOptions> &options);
487 
488 Q_SIGNALS:
489     void clicked(QPlatformDialogHelper::StandardButton button, QPlatformDialogHelper::ButtonRole role);
490 
491 private:
492     QSharedPointer<QMessageDialogOptions> m_options;
493 };
494 
495 QT_END_NAMESPACE
496 
497 #endif // QPLATFORMDIALOGHELPER_H
