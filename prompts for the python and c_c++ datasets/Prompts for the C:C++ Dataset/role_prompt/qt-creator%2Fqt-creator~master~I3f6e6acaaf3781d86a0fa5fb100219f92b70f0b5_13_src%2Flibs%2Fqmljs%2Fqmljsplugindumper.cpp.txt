I want you to act as a code reviewer of Qt Creator in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "qmljsplugindumper.h"
27 #include "qmljsmodelmanagerinterface.h"
28 #include "qmljsutils.h"
29 
30 #include <qmljs/qmljsinterpreter.h>
31 #include <qmljs/qmljsviewercontext.h>
32 
33 #include <utils/algorithm.h>
34 #include <utils/filesystemwatcher.h>
35 #include <utils/fileutils.h>
36 #include <utils/hostosinfo.h>
37 #include <utils/runextensions.h>
38 
39 #include <QDir>
40 #include <QDirIterator>
41 #include <QRegularExpression>
42 
43 using namespace LanguageUtils;
44 using namespace QmlJS;
45 
46 PluginDumper::PluginDumper(ModelManagerInterface *modelManager)
47     : QObject(modelManager)
48     , m_modelManager(modelManager)
49     , m_pluginWatcher(nullptr)
50 {
51     qRegisterMetaType<QmlJS::ModelManagerInterface::ProjectInfo>("QmlJS::ModelManagerInterface::ProjectInfo");
52 }
53 
54 Utils::FileSystemWatcher *PluginDumper::pluginWatcher()
55 {
56     if (!m_pluginWatcher) {
57         m_pluginWatcher = new Utils::FileSystemWatcher(this);
58         m_pluginWatcher->setObjectName(QLatin1String("PluginDumperWatcher"));
59         connect(m_pluginWatcher, &Utils::FileSystemWatcher::fileChanged,
60                 this, &PluginDumper::pluginChanged);
61     }
62     return m_pluginWatcher;
63 }
64 
65 void PluginDumper::loadBuiltinTypes(const QmlJS::ModelManagerInterface::ProjectInfo &info)
66 {
67     // move to the owning thread
68     metaObject()->invokeMethod(this, "onLoadBuiltinTypes",
69                                Q_ARG(QmlJS::ModelManagerInterface::ProjectInfo, info));
70 }
71 
72 void PluginDumper::loadPluginTypes(const QString &libraryPath, const QString &importPath, const QString &importUri, const QString &importVersion)
73 {
74     // move to the owning thread
75     metaObject()->invokeMethod(this, "onLoadPluginTypes",
76                                Q_ARG(QString, libraryPath),
77                                Q_ARG(QString, importPath),
78                                Q_ARG(QString, importUri),
79                                Q_ARG(QString, importVersion));
80 }
81 
82 void PluginDumper::scheduleRedumpPlugins()
83 {
84     // move to the owning thread
85     metaObject()->invokeMethod(this, "dumpAllPlugins", Qt::QueuedConnection);
86 }
87 
88 void PluginDumper::onLoadBuiltinTypes(const QmlJS::ModelManagerInterface::ProjectInfo &info, bool force)
89 {
90     if (info.qmlDumpPath.isEmpty() || info.qtQmlPath.isEmpty())
91         return;
92 
93     const QString importsPath = QDir::cleanPath(info.qtQmlPath);
94     if (m_runningQmldumps.values().contains(importsPath))
95         return;
96 
97     LibraryInfo builtinInfo;
98     if (!force) {
99         const Snapshot snapshot = m_modelManager->snapshot();
100         builtinInfo = snapshot.libraryInfo(info.qtQmlPath);
101         if (builtinInfo.isValid())
102             return;
103     }
104     builtinInfo = LibraryInfo(LibraryInfo::Found);
105     m_modelManager->updateLibraryInfo(info.qtQmlPath, builtinInfo);
106 
107     // prefer QTDIR/qml/builtins.qmltypes if available
108     const QString builtinQmltypesPath = info.qtQmlPath + QLatin1String("/builtins.qmltypes");
109     if (QFile::exists(builtinQmltypesPath)) {
110         loadQmltypesFile(QStringList(builtinQmltypesPath), info.qtQmlPath, builtinInfo);
111         return;
112     }
113 
114     runQmlDump(info, QStringList(QLatin1String("--builtins")), info.qtQmlPath);
115     m_qtToInfo.insert(info.qtQmlPath, info);
116 }
117 
118 static QString makeAbsolute(const QString &path, const QString &base)
119 {
120     if (QFileInfo(path).isAbsolute())
121         return path;
122     return QString::fromLatin1("%1/%3").arg(base, path);
123 }
124 
125 void PluginDumper::onLoadPluginTypes(const QString &libraryPath, const QString &importPath, const QString &importUri, const QString &importVersion)
126 {
127     const QString canonicalLibraryPath = QDir::cleanPath(libraryPath);
128     if (m_runningQmldumps.values().contains(canonicalLibraryPath))
129         return;
130     const Snapshot snapshot = m_modelManager->snapshot();
131     const LibraryInfo libraryInfo = snapshot.libraryInfo(canonicalLibraryPath);
132     if (libraryInfo.pluginTypeInfoStatus() != LibraryInfo::NoTypeInfo)
133         return;
134 
135     // avoid inserting the same plugin twice
136     int index;
137     for (index = 0; index < m_plugins.size(); ++index) {
138         if (m_plugins.at(index).qmldirPath == libraryPath)
139             break;
140     }
141     if (index == m_plugins.size())
142         m_plugins.append(Plugin());
143 
144     Plugin &plugin = m_plugins[index];
145     plugin.qmldirPath = canonicalLibraryPath;
146     plugin.importPath = importPath;
147     plugin.importUri = importUri;
148     plugin.importVersion = importVersion;
149 
150     // add default qmltypes file if it exists
151     QDirIterator it(canonicalLibraryPath, QStringList { "*.qmltypes" }, QDir::Files);
152 
153     while (it.hasNext()) {
154         const QString defaultQmltypesPath = makeAbsolute(it.next(), canonicalLibraryPath);
155 
156         if (!plugin.typeInfoPaths.contains(defaultQmltypesPath))
157             plugin.typeInfoPaths += defaultQmltypesPath;
158     }
159 
160     // add typeinfo files listed in qmldir
161     foreach (const QmlDirParser::TypeInfo &typeInfo, libraryInfo.typeInfos()) {
162         QString pathNow = makeAbsolute(typeInfo.fileName, canonicalLibraryPath);
163         if (!plugin.typeInfoPaths.contains(pathNow) && QFile::exists(pathNow))
164             plugin.typeInfoPaths += pathNow;
165     }
166 
167     // watch plugin libraries
168     foreach (const QmlDirParser::Plugin &plugin, snapshot.libraryInfo(canonicalLibraryPath).plugins()) {
169         const QString pluginLibrary = resolvePlugin(canonicalLibraryPath, plugin.path, plugin.name);
170         if (!pluginLibrary.isEmpty()) {
171             if (!pluginWatcher()->watchesFile(pluginLibrary))
172                 pluginWatcher()->addFile(pluginLibrary, Utils::FileSystemWatcher::WatchModifiedDate);
173             m_libraryToPluginIndex.insert(pluginLibrary, index);
174         }
175     }
176 
177     // watch library qmltypes file
178     if (!plugin.typeInfoPaths.isEmpty()) {
179         foreach (const QString &path, plugin.typeInfoPaths) {
180             if (!QFile::exists(path))
181                 continue;
182             if (!pluginWatcher()->watchesFile(path))
183                 pluginWatcher()->addFile(path, Utils::FileSystemWatcher::WatchModifiedDate);
184             m_libraryToPluginIndex.insert(path, index);
185         }
186     }
187 
188     dump(plugin);
189 }
190 
191 void PluginDumper::dumpAllPlugins()
192 {
193     foreach (const Plugin &plugin, m_plugins) {
194         dump(plugin);
195     }
196 }
197 
198 static QString noTypeinfoError(const QString &libraryPath)
199 {
200     return PluginDumper::tr("QML module does not contain information about components contained in plugins.\n\n"
201                             "Module path: %1\n"
202                             "See \"Using QML Modules with Plugins\" in the documentation.").arg(
203                 libraryPath);
204 }
205 
206 static QString qmldumpErrorMessage(const QString &libraryPath, const QString &error)
207 {
208     return noTypeinfoError(libraryPath) + QLatin1String("\n\n") +
209             PluginDumper::tr("Automatic type dump of QML module failed.\nErrors:\n%1").
210             arg(error) + QLatin1Char('\n');
211 }
212 
213 static QString qmldumpFailedMessage(const QString &libraryPath, const QString &error)
214 {
215     QString firstLines =
216             QStringList(error.split(QLatin1Char('\n')).mid(0, 10)).join(QLatin1Char('\n'));
217     return noTypeinfoError(libraryPath) + QLatin1String("\n\n") +
218             PluginDumper::tr("Automatic type dump of QML module failed.\n"
219                              "First 10 lines or errors:\n"
220                              "\n"
221                              "%1"
222                              "\n"
223                              "Check 'General Messages' output pane for details."
224                              ).arg(firstLines);
225 }
226 
227 static void printParseWarnings(const QString &libraryPath, const QString &warning)
228 {
229     ModelManagerInterface::writeWarning(
230                 PluginDumper::tr("Warnings while parsing QML type information of %1:\n"
231                                  "%2").arg(libraryPath, warning));
232 }
233 
234 static QString qmlPluginDumpErrorMessage(QProcess *process)
235 {
236     QString errorMessage;
237     const QString binary = QDir::toNativeSeparators(process->program());
238     switch (process->error()) {
239     case QProcess::FailedToStart:
240         errorMessage = PluginDumper::tr("\"%1\" failed to start: %2").arg(binary, process->errorString());
241         break;
242     case QProcess::Crashed:
243         errorMessage = PluginDumper::tr("\"%1\" crashed.").arg(binary);
244         break;
245     case QProcess::Timedout:
246         errorMessage = PluginDumper::tr("\"%1\" timed out.").arg(binary);
247         break;
248     case QProcess::ReadError:
249     case QProcess::WriteError:
250         errorMessage = PluginDumper::tr("I/O error running \"%1\".").arg(binary);
251         break;
252     case QProcess::UnknownError:
253         if (process->exitCode())
254             errorMessage = PluginDumper::tr("\"%1\" returned exit code %2.").arg(binary).arg(process->exitCode());
255         break;
256     }
257     errorMessage += QLatin1Char('\n') + PluginDumper::tr("Arguments: %1").arg(process->arguments().join(QLatin1Char(' ')));
258     if (process->error() != QProcess::FailedToStart) {
259         const QString stdErr = QString::fromLocal8Bit(process->readAllStandardError());
260         if (!stdErr.isEmpty()) {
261             errorMessage += QLatin1Char('\n');
262             errorMessage += stdErr;
263         }
264     }
265     return errorMessage;
266 }
267 
268 void PluginDumper::qmlPluginTypeDumpDone(int exitCode)
269 {
270     QProcess *process = qobject_cast<QProcess *>(sender());
271     if (!process)
272         return;
273     process->deleteLater();
274 
275     const QString libraryPath = m_runningQmldumps.take(process);
276     if (libraryPath.isEmpty())
277         return;
278     const Snapshot snapshot = m_modelManager->snapshot();
279     LibraryInfo libraryInfo = snapshot.libraryInfo(libraryPath);
280     bool privatePlugin = libraryPath.endsWith(QLatin1String("private"));
281 
282     if (exitCode != 0) {
283         const QString errorMessages = qmlPluginDumpErrorMessage(process);
284         if (!privatePlugin)
285             ModelManagerInterface::writeWarning(qmldumpErrorMessage(libraryPath, errorMessages));
286         libraryInfo.setPluginTypeInfoStatus(LibraryInfo::DumpError, qmldumpFailedMessage(libraryPath, errorMessages));
287 
288         const QByteArray output = process->readAllStandardOutput();
289 
290         class CppQmlTypesInfo {
291         public:
292             QString error;
293             QString warning;
294             CppQmlTypesLoader::BuiltinObjects objectsList;
295             QList<ModuleApiInfo> moduleApis;
296             QStringList dependencies;
297         };
298 
299         auto watcher = QSharedPointer<QFutureWatcher<CppQmlTypesInfo>>(new QFutureWatcher<CppQmlTypesInfo>());
300 
301         connect(watcher.data(), &QFutureWatcher<CppQmlTypesInfo>::finished, this,
302                 [this, &watcher, libraryInfo, privatePlugin, libraryPath] {
303             CppQmlTypesInfo infos = watcher->result();
304 
305             LibraryInfo libInfo = libraryInfo;
306 
307             if (!infos.error.isEmpty()) {
308                 libInfo.setPluginTypeInfoStatus(LibraryInfo::DumpError,
309                                                         qmldumpErrorMessage(libraryPath, infos.error));
310                 if (!privatePlugin)
311                     printParseWarnings(libraryPath, libInfo.pluginTypeInfoError());
312             } else {
313                 libInfo.setMetaObjects(infos.objectsList.values());
314                 libInfo.setModuleApis(infos.moduleApis);
315                 libInfo.setPluginTypeInfoStatus(LibraryInfo::DumpDone);
316             }
317 
318             if (!infos.warning.isEmpty())
319                 printParseWarnings(libraryPath, infos.warning);
320 
321             libInfo.updateFingerprint();
322 
323             m_modelManager->updateLibraryInfo(libraryPath, libInfo);
324             watcher.clear();
325         });
326 
327         auto future = Utils::runAsync([output, libraryPath](QFutureInterface<CppQmlTypesInfo>& future)
328         {
329             CppQmlTypesInfo infos;
330             CppQmlTypesLoader::parseQmlTypeDescriptions(output, &infos.objectsList, &infos.moduleApis, &infos.dependencies,
331                                                         &infos.error, &infos.warning,
332                                                         QLatin1String("<dump of ") + libraryPath + QLatin1Char('>'));
333             future.reportFinished(&infos);
334         });
335 
336         watcher->setFuture(future);
337     }
338 }
339 
340 void PluginDumper::qmlPluginTypeDumpError(QProcess::ProcessError)
341 {
342     QProcess *process = qobject_cast<QProcess *>(sender());
343     if (!process)
344         return;
345     process->deleteLater();
346 
347     const QString libraryPath = m_runningQmldumps.take(process);
348     if (libraryPath.isEmpty())
349         return;
350     const QString errorMessages = qmlPluginDumpErrorMessage(process);
351     const Snapshot snapshot = m_modelManager->snapshot();
352     LibraryInfo libraryInfo = snapshot.libraryInfo(libraryPath);
353     if (!libraryPath.endsWith(QLatin1String("private"), Qt::CaseInsensitive))
354         ModelManagerInterface::writeWarning(qmldumpErrorMessage(libraryPath, errorMessages));
355     libraryInfo.setPluginTypeInfoStatus(LibraryInfo::DumpError, qmldumpFailedMessage(libraryPath, errorMessages));
356     libraryInfo.updateFingerprint();
357     m_modelManager->updateLibraryInfo(libraryPath, libraryInfo);
358 }
359 
360 void PluginDumper::pluginChanged(const QString &pluginLibrary)
361 {
362     const int pluginIndex = m_libraryToPluginIndex.value(pluginLibrary, -1);
363     if (pluginIndex == -1)
364         return;
365 
366     const Plugin &plugin = m_plugins.at(pluginIndex);
367     dump(plugin);
368 }
369 
370 QFuture<PluginDumper::QmlTypeDescription> PluginDumper::loadQmlTypeDescription(const QStringList &paths) const {
371     auto future = Utils::runAsync([=](QFutureInterface<PluginDumper::QmlTypeDescription>& future)
372     {
373         PluginDumper::QmlTypeDescription result;
374 
375         for (const QString &p: paths) {
376             Utils::FileReader reader;
377             if (!reader.fetch(p, QFile::Text)) {
378                 result.errors += reader.errorString();
379                 continue;
380             }
381             QString error;
382             QString warning;
383             CppQmlTypesLoader::BuiltinObjects objs;
384             QList<ModuleApiInfo> apis;
385             QStringList deps;
386             CppQmlTypesLoader::parseQmlTypeDescriptions(reader.data(), &objs, &apis, &deps,
387                                                         &error, &warning, p);
388             if (!error.isEmpty()) {
389                 result.errors += tr("Failed to parse \"%1\".\nError: %2").arg(p, error);
390             } else {
391                 result.objects += objs.values();
392                 result.moduleApis += apis;
393                 if (!deps.isEmpty())
394                     result.dependencies += deps;
395             }
396             if (!warning.isEmpty())
397                 result.warnings += warning;
398         }
399 
400         future.reportFinished(&result);
401     });
402 
403     return future;
404 }
405 
406 /*!
407  * \brief Build the path of an existing qmltypes file from a module name.
408  * \param name
409  * \return the module's qmltypes file path or an empty string if not found
410  *
411  * Look for \a name qmltypes file in model manager's import paths.
412  *
413  * \sa QmlJs::modulePath
414  * \sa LinkPrivate::importNonFile
415  */
416 QString PluginDumper::buildQmltypesPath(const QString &name) const
417 {
418     QString qualifiedName;
419     QString version;
420 
421     QRegularExpression import("^(?<name>[\\w|\\.]+)\\s+(?<major>\\d+)\\.(?<minor>\\d+)$");
422     QRegularExpressionMatch m = import.match(name);
423     if (m.hasMatch()) {
424         qualifiedName = m.captured("name");
425         version = m.captured("major") + QLatin1Char('.') + m.captured("minor");
426     }
427 
428     const QString path = modulePath(qualifiedName, version, m_modelManager->importPathsNames());
429 
430     if (path.isEmpty())
431         return QString();
432 
433     QDirIterator it(path, QStringList { "*.qmltypes" }, QDir::Files);
434 
435     if (it.hasNext())
436         return it.next();
437 
438     return QString();
439 }
440 
441 /*!
442  * \brief Recursively load dependencies.
443  * \param dependencies
444  * \param errors
445  * \param warnings
446  * \param objects
447  *
448  * Recursively load type descriptions of dependencies, collecting results
449  * in \a objects.
450  */
451 QFuture<PluginDumper::DependencyInfo> PluginDumper::loadDependencies(const QStringList &dependencies,
452                                                                      QSharedPointer<QSet<QString>> visited) const
453 {
454     auto iface = QSharedPointer<QFutureInterface<PluginDumper::DependencyInfo>>(new QFutureInterface<PluginDumper::DependencyInfo>);
455 
456     if (visited.isNull()) {
457         visited = QSharedPointer<QSet<QString>>(new QSet<QString>());
458     }
459 
460     QStringList dependenciesPaths;
461     QString path;
462     for (const QString &name: dependencies) {
463         path = buildQmltypesPath(name);
464         if (!path.isNull())
465             dependenciesPaths << path;
466         visited->insert(name);
467     }
468 
469     auto typesWatcher = QSharedPointer<QFutureWatcher<PluginDumper::QmlTypeDescription>>(new QFutureWatcher<PluginDumper::QmlTypeDescription>());
470     connect(typesWatcher.data(), &QFutureWatcher<PluginDumper::QmlTypeDescription>::finished, this, [this, iface, visited, &typesWatcher] {
471         QStringList newDependencies = typesWatcher->result().dependencies;
472         newDependencies = Utils::toList(Utils::toSet(newDependencies) - *visited.data());
473 
474         if (!newDependencies.isEmpty()) {
475             auto loadWatcher = QSharedPointer<QFutureWatcher<PluginDumper::DependencyInfo>>(new QFutureWatcher<PluginDumper::DependencyInfo>());
476             connect(loadWatcher.data(), &QFutureWatcher<PluginDumper::DependencyInfo>::finished, this, [iface, newDependencies, visited, &typesWatcher, &loadWatcher] {
477                 PluginDumper::DependencyInfo result = loadWatcher->result();
478 
479                 result.errors += typesWatcher->result().errors;
480                 result.objects += typesWatcher->result().objects;
481                 result.warnings+= typesWatcher->result().warnings;
482 
483                 iface->reportFinished(&result);
484                 typesWatcher.clear();
485                 loadWatcher.clear();
486             });
487 
488             loadWatcher->setFuture(loadDependencies(newDependencies, visited));
489         } else {
490             PluginDumper::DependencyInfo result;
491             result.errors += typesWatcher->result().errors;
492             result.objects += typesWatcher->result().objects;
493             result.warnings+= typesWatcher->result().warnings;
494             iface->reportFinished(&result);
495             typesWatcher.clear();
496         }
497     });
498     typesWatcher->setFuture(loadQmlTypeDescription(dependenciesPaths));
499 
500     return iface->future();
501 }
502 
503 void PluginDumper::loadQmltypesFile(const QStringList &qmltypesFilePaths,
504                                     const QString &libraryPath,
505                                     QmlJS::LibraryInfo libraryInfo)
506 {
507     auto typesWatcher = QSharedPointer<QFutureWatcher<PluginDumper::QmlTypeDescription>>(new QFutureWatcher<PluginDumper::QmlTypeDescription>());
508     connect(typesWatcher.data(), &QFutureWatcher<PluginDumper::QmlTypeDescription>::finished, this, [this, &typesWatcher, libraryPath, libraryInfo] {
509 
510         auto loadWatcher = QSharedPointer<QFutureWatcher<PluginDumper::DependencyInfo>>(new QFutureWatcher<PluginDumper::DependencyInfo>());
511         connect(loadWatcher.data(), &QFutureWatcher<PluginDumper::DependencyInfo>::finished, this, [this, &typesWatcher, &loadWatcher, libraryPath, libraryInfo] {
512 
513             QStringList deps = typesWatcher->result().dependencies;
514             QStringList errors = typesWatcher->result().errors;
515             QStringList warnings = typesWatcher->result().errors;
516             QList<FakeMetaObject::ConstPtr> objects = typesWatcher->result().objects;
517 
518             errors += loadWatcher->result().errors;
519             warnings += loadWatcher->result().warnings;
520             objects += loadWatcher->result().objects;
521 
522             QmlJS::LibraryInfo libInfo = libraryInfo;
523 
524             libInfo.setMetaObjects(objects);
525             libInfo.setModuleApis(typesWatcher->result().moduleApis);
526             libInfo.setDependencies(typesWatcher->result().dependencies);
527 
528             if (errors.isEmpty()) {
529                 libInfo.setPluginTypeInfoStatus(LibraryInfo::TypeInfoFileDone);
530             } else {
531                 printParseWarnings(libraryPath, errors.join(QLatin1Char('\n')));
532                 errors.prepend(tr("Errors while reading typeinfo files:"));
533                 libInfo.setPluginTypeInfoStatus(LibraryInfo::TypeInfoFileError, errors.join(QLatin1Char('\n')));
534             }
535 
536             if (!warnings.isEmpty())
537                 printParseWarnings(libraryPath, warnings.join(QLatin1String("\n")));
538 
539             libInfo.updateFingerprint();
540             m_modelManager->updateLibraryInfo(libraryPath, libInfo);
541             typesWatcher.clear();
542             loadWatcher.clear();
543         });
544         if (!typesWatcher->result().dependencies.isEmpty()) {
545             loadWatcher->setFuture(loadDependencies(typesWatcher->result().dependencies, QSharedPointer<QSet<QString>>()));
546         }
547     });
548     typesWatcher->setFuture(loadQmlTypeDescription(qmltypesFilePaths));
549 }
550 
551 void PluginDumper::runQmlDump(const QmlJS::ModelManagerInterface::ProjectInfo &info,
552     const QStringList &arguments, const QString &importPath)
553 {
554     QDir wd = QDir(importPath);
555     wd.cdUp();
556     QProcess *process = new QProcess(this);
557     process->setEnvironment(info.qmlDumpEnvironment.toStringList());
558     QString workingDir = wd.canonicalPath();
559     process->setWorkingDirectory(workingDir);
560     connect(process, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished),
561             this, &PluginDumper::qmlPluginTypeDumpDone);
562     connect(process, &QProcess::errorOccurred, this, &PluginDumper::qmlPluginTypeDumpError);
563     process->start(info.qmlDumpPath, arguments);
564     m_runningQmldumps.insert(process, importPath);
565 }
566 
567 void PluginDumper::dump(const Plugin &plugin)
568 {
569     ModelManagerInterface::ProjectInfo info = m_modelManager->defaultProjectInfo();
570     const Snapshot snapshot = m_modelManager->snapshot();
571     LibraryInfo libraryInfo = snapshot.libraryInfo(plugin.qmldirPath);
572 
573     // if there are type infos, don't dump!
574     if (!plugin.typeInfoPaths.isEmpty()) {
575         if (!libraryInfo.isValid())
576             return;
577 
578         loadQmltypesFile(plugin.typeInfoPaths, plugin.qmldirPath, libraryInfo);
579         return;
580     }
581 
582     if (plugin.importUri.isEmpty())
583         return; // initial scan without uri, ignore
584 
585     if (!info.tryQmlDump || info.qmlDumpPath.isEmpty()) {
586         if (!libraryInfo.isValid())
587             return;
588 
589         QString errorMessage;
590         if (!info.tryQmlDump) {
591             errorMessage = noTypeinfoError(plugin.qmldirPath);
592         } else {
593             errorMessage = qmldumpErrorMessage(plugin.qmldirPath,
594                     tr("Could not locate the helper application for dumping type information from C++ plugins.\n"
595                        "Please build the qmldump application on the Qt version options page."));
596         }
597 
598         libraryInfo.setPluginTypeInfoStatus(LibraryInfo::DumpError, errorMessage);
599         libraryInfo.updateFingerprint();
600         m_modelManager->updateLibraryInfo(plugin.qmldirPath, libraryInfo);
601         return;
602     }
603 
604     QStringList args;
605     if (info.qmlDumpHasRelocatableFlag)
606         args << QLatin1String("-nonrelocatable");
607     args << plugin.importUri;
608     args << plugin.importVersion;
609     args << (plugin.importPath.isEmpty() ? QLatin1String(".") : plugin.importPath);
610     runQmlDump(info, args, plugin.qmldirPath);
611 }
612 
613 /*!
614   Returns the result of the merge of \a baseName with \a path, \a suffixes, and \a prefix.
615   The \a prefix must contain the dot.
616 
617   \a qmldirPath is the location of the qmldir file.
618 
619   Adapted from QDeclarativeImportDatabase::resolvePlugin.
620 */
621 QString PluginDumper::resolvePlugin(const QDir &qmldirPath, const QString &qmldirPluginPath,
622                                     const QString &baseName, const QStringList &suffixes,
623                                     const QString &prefix)
624 {
625     QStringList searchPaths;
626     searchPaths.append(QLatin1String("."));
627 
628     bool qmldirPluginPathIsRelative = QDir::isRelativePath(qmldirPluginPath);
629     if (!qmldirPluginPathIsRelative)
630         searchPaths.prepend(qmldirPluginPath);
631 
632     foreach (const QString &pluginPath, searchPaths) {
633 
634         QString resolvedPath;
635 
636         if (pluginPath == QLatin1String(".")) {
637             if (qmldirPluginPathIsRelative)
638                 resolvedPath = qmldirPath.absoluteFilePath(qmldirPluginPath);
639             else
640                 resolvedPath = qmldirPath.absolutePath();
641         } else {
642             resolvedPath = pluginPath;
643         }
644 
645         QDir dir(resolvedPath);
646         foreach (const QString &suffix, suffixes) {
647             QString pluginFileName = prefix;
648 
649             pluginFileName += baseName;
650             pluginFileName += suffix;
651 
652             QFileInfo fileInfo(dir, pluginFileName);
653 
654             if (fileInfo.exists())
655                 return fileInfo.absoluteFilePath();
656         }
657     }
658 
659     return QString();
660 }
661 
662 /*!
663   Returns the result of the merge of \a baseName with \a dir and the platform suffix.
664 
665   Adapted from QDeclarativeImportDatabase::resolvePlugin.
666 
667   \table
668   \header \li Platform \li Valid suffixes
669   \row \li Windows     \li \c .dll
670   \row \li Unix/Linux  \li \c .so
671   \row \li AIX  \li \c .a
672   \row \li HP-UX       \li \c .sl, \c .so (HP-UXi)
673   \row \li Mac OS X    \li \c .dylib, \c .bundle, \c .so
674   \endtable
675 
676   Version number on unix are ignored.
677 */
678 QString PluginDumper::resolvePlugin(const QDir &qmldirPath, const QString &qmldirPluginPath,
679                                     const QString &baseName)
680 {
681     QStringList validSuffixList;
682     QString prefix;
683     if (Utils::HostOsInfo::isWindowsHost()) {
684         // try a qmake-style debug build first
685         validSuffixList = QStringList({"d.dll",  ".dll"});
686     } else if (Utils::HostOsInfo::isMacHost()) {
687         // try a qmake-style debug build first
688         validSuffixList = QStringList({"_debug.dylib", ".dylib", ".so", ".bundle", "lib"});
689     } else {
690         // Examples of valid library names:
691         //  libfoo.so
692         prefix = "lib";
693 #if defined(Q_OS_HPUX)
694 /*
695     See "HP-UX Linker and Libraries User's Guide", section "Link-time Differences between PA-RISC and IPF":
696     "In PA-RISC (PA-32 and PA-64) shared libraries are suffixed with .sl. In IPF (32-bit and 64-bit),
697     the shared libraries are suffixed with .so. For compatibility, the IPF linker also supports the .sl suffix."
698  */
699         validSuffixList << QLatin1String(".sl");
700 # if defined __ia64
701         validSuffixList << QLatin1String(".so");
702 # endif
703 #elif defined(Q_OS_AIX)
704         validSuffixList << QLatin1String(".a") << QLatin1String(".so");
705 #else
706         validSuffixList << QLatin1String(".so");
707 #endif
708     }
709     return resolvePlugin(qmldirPath, qmldirPluginPath, baseName, validSuffixList, prefix);
710 }
