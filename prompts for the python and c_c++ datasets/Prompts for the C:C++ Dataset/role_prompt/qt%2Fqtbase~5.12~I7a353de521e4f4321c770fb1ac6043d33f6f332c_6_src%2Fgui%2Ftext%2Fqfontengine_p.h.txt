I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #ifndef QFONTENGINE_P_H
41 #define QFONTENGINE_P_H
42 
43 //
44 //  W A R N I N G
45 //  -------------
46 //
47 // This file is not part of the Qt API.  It exists purely as an
48 // implementation detail.  This header file may change from version to
49 // version without notice, or even be removed.
50 //
51 // We mean it.
52 //
53 
54 #include <QtGui/private/qtguiglobal_p.h>
55 #include "QtCore/qatomic.h"
56 #include <QtCore/qvarlengtharray.h>
57 #include <QtCore/QLinkedList>
58 #include <QtCore/qhashfunctions.h>
59 #include "private/qtextengine_p.h"
60 #include "private/qfont_p.h"
61 
62 QT_BEGIN_NAMESPACE
63 
64 class QPainterPath;
65 class QFontEngineGlyphCache;
66 
67 struct QGlyphLayout;
68 
69 #define MAKE_TAG(ch1, ch2, ch3, ch4) (\
70     (((quint32)(ch1)) << 24) | \
71     (((quint32)(ch2)) << 16) | \
72     (((quint32)(ch3)) << 8) | \
73     ((quint32)(ch4)) \
74    )
75 
76 // ### this only used in getPointInOutline(), refactor it and then remove these magic numbers
77 enum HB_Compat_Error {
78     Err_Ok                           = 0x0000,
79     Err_Not_Covered                  = 0xFFFF,
80     Err_Invalid_Argument             = 0x1A66,
81     Err_Invalid_SubTable_Format      = 0x157F,
82     Err_Invalid_SubTable             = 0x1570
83 };
84 
85 typedef void (*qt_destroy_func_t) (void *user_data);
86 typedef bool (*qt_get_font_table_func_t) (void *user_data, uint tag, uchar *buffer, uint *length);
87 
88 class Q_GUI_EXPORT QFontEngine
89 {
90 public:
91     enum Type {
92         Box,
93         Multi,
94 
95         // MS Windows types
96         Win,
97 
98         // Apple Mac OS types
99         Mac,
100 
101         // QWS types
102         Freetype,
103         QPF1,
104         QPF2,
105         Proxy,
106 
107         DirectWrite,
108 
109         TestFontEngine = 0x1000
110     };
111 
112     enum GlyphFormat {
113         Format_None,
114         Format_Render = Format_None,
115         Format_Mono,
116         Format_A8,
117         Format_A32,
118         Format_ARGB
119     };
120 
121     enum ShaperFlag {
122         DesignMetrics = 0x0002,
123         GlyphIndicesOnly = 0x0004
124     };
125     Q_DECLARE_FLAGS(ShaperFlags, ShaperFlag)
126 
127     /* Used with the Freetype font engine. We don't cache glyphs that are too large anyway, so we can make this struct rather small */
128     struct Glyph {
129         Glyph() = default;
130         ~Glyph() { delete [] data; }
131         short linearAdvance = 0;
132         unsigned char width = 0;
133         unsigned char height = 0;
134         short x = 0;
135         short y = 0;
136         short advance = 0;
137         signed char format = 0;
138         uchar *data = nullptr;
139     private:
140         Q_DISABLE_COPY(Glyph);
141     };
142 
143     virtual ~QFontEngine();
144 
145     inline Type type() const { return m_type; }
146 
147     // all of these are in unscaled metrics if the engine supports uncsaled metrics,
148     // otherwise in design metrics
149     struct Properties {
150         QByteArray postscriptName;
151         QByteArray copyright;
152         QRectF boundingBox;
153         QFixed emSquare;
154         QFixed ascent;
155         QFixed descent;
156         QFixed leading;
157         QFixed italicAngle;
158         QFixed capHeight;
159         QFixed lineWidth;
160     };
161     virtual Properties properties() const;
162     virtual void getUnscaledGlyph(glyph_t glyph, QPainterPath *path, glyph_metrics_t *metrics);
163     QByteArray getSfntTable(uint tag) const;
164     virtual bool getSfntTableData(uint tag, uchar *buffer, uint *length) const;
165 
166     struct FaceId {
167         FaceId() : index(0), encoding(0) {}
168         QByteArray filename;
169         QByteArray uuid;
170         int index;
171         int encoding;
172     };
173     virtual FaceId faceId() const { return FaceId(); }
174     enum SynthesizedFlags {
175         SynthesizedItalic = 0x1,
176         SynthesizedBold = 0x2,
177         SynthesizedStretch = 0x4
178     };
179     virtual int synthesized() const { return 0; }
180     virtual bool supportsSubPixelPositions() const { return false; }
181     virtual QFixed subPixelPositionForX(QFixed x) const;
182 
183     virtual QFixed emSquareSize() const { return ascent(); }
184 
185     /* returns 0 as glyph index for non existent glyphs */
186     virtual glyph_t glyphIndex(uint ucs4) const = 0;
187     virtual bool stringToCMap(const QChar *str, int len, QGlyphLayout *glyphs, int *nglyphs, ShaperFlags flags) const = 0;
188     virtual void recalcAdvances(QGlyphLayout *, ShaperFlags) const {}
189     virtual void doKerning(QGlyphLayout *, ShaperFlags) const;
190 
191     virtual void addGlyphsToPath(glyph_t *glyphs, QFixedPoint *positions, int nglyphs,
192                                  QPainterPath *path, QTextItem::RenderFlags flags);
193 
194     void getGlyphPositions(const QGlyphLayout &glyphs, const QTransform &matrix, QTextItem::RenderFlags flags,
195                            QVarLengthArray<glyph_t> &glyphs_out, QVarLengthArray<QFixedPoint> &positions);
196 
197     virtual void addOutlineToPath(qreal, qreal, const QGlyphLayout &, QPainterPath *, QTextItem::RenderFlags flags);
198     void addBitmapFontToPath(qreal x, qreal y, const QGlyphLayout &, QPainterPath *, QTextItem::RenderFlags);
199     /**
200      * Create a qimage with the alpha values for the glyph.
201      * Returns an image indexed_8 with index values ranging from 0=fully transparent to 255=opaque
202      */
203     // ### Refactor this into a smaller and more flexible API.
204     virtual QImage alphaMapForGlyph(glyph_t);
205     virtual QImage alphaMapForGlyph(glyph_t glyph, QFixed subPixelPosition);
206     virtual QImage alphaMapForGlyph(glyph_t, const QTransform &t);
207     virtual QImage alphaMapForGlyph(glyph_t, QFixed subPixelPosition, const QTransform &t);
208     virtual QImage alphaRGBMapForGlyph(glyph_t, QFixed subPixelPosition, const QTransform &t);
209     virtual QImage bitmapForGlyph(glyph_t, QFixed subPixelPosition, const QTransform &t);
210     virtual Glyph *glyphData(glyph_t glyph, QFixed subPixelPosition, GlyphFormat neededFormat, const QTransform &t);
211     virtual bool hasInternalCaching() const { return false; }
212 
213     virtual glyph_metrics_t alphaMapBoundingBox(glyph_t glyph, QFixed /*subPixelPosition*/, const QTransform &matrix, GlyphFormat /*format*/)
214     {
215         return boundingBox(glyph, matrix);
216     }
217 
218     virtual void removeGlyphFromCache(glyph_t);
219 
220     virtual glyph_metrics_t boundingBox(const QGlyphLayout &glyphs) = 0;
221     virtual glyph_metrics_t boundingBox(glyph_t glyph) = 0;
222     virtual glyph_metrics_t boundingBox(glyph_t glyph, const QTransform &matrix);
223     glyph_metrics_t tightBoundingBox(const QGlyphLayout &glyphs);
224 
225     virtual QFixed ascent() const = 0;
226     virtual QFixed capHeight() const = 0;
227     virtual QFixed descent() const = 0;
228     virtual QFixed leading() const = 0;
229     virtual QFixed xHeight() const;
230     virtual QFixed averageCharWidth() const;
231 
232     virtual QFixed lineThickness() const;
233     virtual QFixed underlinePosition() const;
234 
235     virtual qreal maxCharWidth() const = 0;
236     virtual qreal minLeftBearing() const;
237     virtual qreal minRightBearing() const;
238 
239     virtual void getGlyphBearings(glyph_t glyph, qreal *leftBearing = 0, qreal *rightBearing = 0);
240 
241     inline bool canRender(uint ucs4) const { return glyphIndex(ucs4) != 0; }
242     virtual bool canRender(const QChar *str, int len) const;
243 
244     virtual bool supportsTransformation(const QTransform &transform) const;
245 
246     virtual int glyphCount() const;
247     virtual int glyphMargin(GlyphFormat format) { return format == Format_A32 ? 2 : 0; }
248 
249     virtual QFontEngine *cloneWithSize(qreal /*pixelSize*/) const { return 0; }
250 
251     virtual Qt::HANDLE handle() const;
252 
253     void *harfbuzzFont() const;
254     void *harfbuzzFace() const;
255     bool supportsScript(QChar::Script script) const;
256 
257     inline static bool scriptRequiresOpenType(QChar::Script script)
258     {
259         return ((script >= QChar::Script_Syriac && script <= QChar::Script_Sinhala)
260                 || script == QChar::Script_Khmer || script == QChar::Script_Nko);
261     }
262 
263     virtual int getPointInOutline(glyph_t glyph, int flags, quint32 point, QFixed *xpos, QFixed *ypos, quint32 *nPoints);
264 
265     void clearGlyphCache(const void *key);
266     void setGlyphCache(const void *key, QFontEngineGlyphCache *data);
267     QFontEngineGlyphCache *glyphCache(const void *key, GlyphFormat format, const QTransform &transform) const;
268 
269     static const uchar *getCMap(const uchar *table, uint tableSize, bool *isSymbolFont, int *cmapSize);
270     static quint32 getTrueTypeGlyphIndex(const uchar *cmap, int cmapSize, uint unicode);
271 
272     static QByteArray convertToPostscriptFontFamilyName(const QByteArray &fontFamily);
273 
274     virtual bool hasUnreliableGlyphOutline() const;
275     virtual bool expectsGammaCorrectedBlending() const;
276 
277     enum HintStyle {
278         HintNone,
279         HintLight,
280         HintMedium,
281         HintFull
282     };
283     virtual void setDefaultHintStyle(HintStyle) { }
284 
285     enum SubpixelAntialiasingType {
286         Subpixel_None,
287         Subpixel_RGB,
288         Subpixel_BGR,
289         Subpixel_VRGB,
290         Subpixel_VBGR
291     };
292 
293 private:
294     const Type m_type;
295 
296 public:
297     QAtomicInt ref;
298     QFontDef fontDef;
299 
300     class Holder { // replace by std::unique_ptr once available
301         void *ptr;
302         qt_destroy_func_t destroy_func;
303     public:
304         Holder() : ptr(nullptr), destroy_func(nullptr) {}
305         explicit Holder(void *p, qt_destroy_func_t d) : ptr(p), destroy_func(d) {}
306         ~Holder() { if (ptr && destroy_func) destroy_func(ptr); }
307         Holder(Holder &&other) Q_DECL_NOTHROW
308             : ptr(other.ptr),
309               destroy_func(other.destroy_func)
310         {
311             other.ptr = nullptr;
312             other.destroy_func = nullptr;
313         }
314         Holder &operator=(Holder &&other) Q_DECL_NOTHROW
315         { swap(other); return *this; }
316 
317         void swap(Holder &other) Q_DECL_NOTHROW
318         {
319             qSwap(ptr, other.ptr);
320             qSwap(destroy_func, other.destroy_func);
321         }
322 
323         void *get() const Q_DECL_NOTHROW { return ptr; }
324         void *release() Q_DECL_NOTHROW {
325             void *result = ptr;
326             ptr = nullptr;
327             destroy_func = nullptr;
328             return result;
329         }
330         void reset() Q_DECL_NOTHROW { Holder().swap(*this); }
331         qt_destroy_func_t get_deleter() const Q_DECL_NOTHROW { return destroy_func; }
332 
333         bool operator!() const Q_DECL_NOTHROW { return !ptr; }
334     };
335 
336     mutable Holder font_; // \ NOTE: Declared before m_glyphCaches, so font_, face_
337     mutable Holder face_; // / are destroyed _after_ m_glyphCaches is destroyed.
338 
339     struct FaceData {
340         void *user_data;
341         qt_get_font_table_func_t get_font_table;
342     } faceData;
343 
344     uint cache_cost; // amount of mem used in bytes by the font
345     uint fsType : 16;
346     bool symbol;
347     bool isSmoothlyScalable;
348     struct KernPair {
349         uint left_right;
350         QFixed adjust;
351 
352         inline bool operator<(const KernPair &other) const
353         {
354             return left_right < other.left_right;
355         }
356     };
357     QVector<KernPair> kerning_pairs;
358     void loadKerningPairs(QFixed scalingFactor);
359 
360     GlyphFormat glyphFormat;
361     int m_subPixelPositionCount; // Number of positions within a single pixel for this cache
362 
363     inline QVariant userData() const { return m_userData; }
364 
365 protected:
366     explicit QFontEngine(Type type);
367 
368     QFixed lastRightBearing(const QGlyphLayout &glyphs, bool round = false);
369 
370     inline void setUserData(const QVariant &userData) { m_userData = userData; }
371     QFixed calculatedCapHeight() const;
372 
373 private:
374     struct GlyphCacheEntry {
375         GlyphCacheEntry();
376         GlyphCacheEntry(const GlyphCacheEntry &);
377         ~GlyphCacheEntry();
378 
379         GlyphCacheEntry &operator=(const GlyphCacheEntry &);
380 
381         QExplicitlySharedDataPointer<QFontEngineGlyphCache> cache;
382         bool operator==(const GlyphCacheEntry &other) const { return cache == other.cache; }
383     };
384     typedef QLinkedList<GlyphCacheEntry> GlyphCaches;
385     mutable QHash<const void *, GlyphCaches> m_glyphCaches;
386 
387 private:
388     QVariant m_userData;
389 
390     mutable qreal m_minLeftBearing;
391     mutable qreal m_minRightBearing;
392 
393 };
394 Q_DECLARE_TYPEINFO(QFontEngine::KernPair, Q_PRIMITIVE_TYPE);
395 
396 Q_DECLARE_OPERATORS_FOR_FLAGS(QFontEngine::ShaperFlags)
397 
398 inline bool operator ==(const QFontEngine::FaceId &f1, const QFontEngine::FaceId &f2)
399 {
400     return f1.index == f2.index && f1.encoding == f2.encoding && f1.filename == f2.filename && f1.uuid == f2.uuid;
401 }
402 
403 inline uint qHash(const QFontEngine::FaceId &f, uint seed = 0)
404     Q_DECL_NOEXCEPT_EXPR(noexcept(qHash(f.filename)))
405 {
406     QtPrivate::QHashCombine hash;
407     seed = hash(seed, f.filename);
408     seed = hash(seed, f.uuid);
409     seed = hash(seed, f.index);
410     seed = hash(seed, f.encoding);
411     return seed;
412 }
413 
414 
415 class QGlyph;
416 
417 
418 
419 class QFontEngineBox : public QFontEngine
420 {
421 public:
422     QFontEngineBox(int size);
423     ~QFontEngineBox();
424 
425     virtual glyph_t glyphIndex(uint ucs4) const override;
426     virtual bool stringToCMap(const QChar *str, int len, QGlyphLayout *glyphs, int *nglyphs, ShaperFlags flags) const override;
427     virtual void recalcAdvances(QGlyphLayout *, ShaperFlags) const override;
428 
429     void draw(QPaintEngine *p, qreal x, qreal y, const QTextItemInt &si);
430     virtual void addOutlineToPath(qreal x, qreal y, const QGlyphLayout &glyphs, QPainterPath *path, QTextItem::RenderFlags flags) override;
431 
432     virtual glyph_metrics_t boundingBox(const QGlyphLayout &glyphs) override;
433     virtual glyph_metrics_t boundingBox(glyph_t glyph) override;
434     virtual QFontEngine *cloneWithSize(qreal pixelSize) const override;
435 
436     virtual QFixed ascent() const override;
437     virtual QFixed capHeight() const override;
438     virtual QFixed descent() const override;
439     virtual QFixed leading() const override;
440     virtual qreal maxCharWidth() const override;
441     virtual qreal minLeftBearing() const override { return 0; }
442     virtual qreal minRightBearing() const override { return 0; }
443     virtual QImage alphaMapForGlyph(glyph_t) override;
444 
445     virtual bool canRender(const QChar *string, int len) const override;
446 
447     inline int size() const { return _size; }
448 
449 protected:
450     explicit QFontEngineBox(Type type, int size);
451 
452 private:
453     friend class QFontPrivate;
454     int _size;
455 };
456 
457 class Q_GUI_EXPORT QFontEngineMulti : public QFontEngine
458 {
459 public:
460     explicit QFontEngineMulti(QFontEngine *engine, int script, const QStringList &fallbackFamilies = QStringList());
461     ~QFontEngineMulti();
462 
463     virtual glyph_t glyphIndex(uint ucs4) const override;
464     virtual bool stringToCMap(const QChar *str, int len, QGlyphLayout *glyphs, int *nglyphs, ShaperFlags flags) const override;
465 
466     virtual glyph_metrics_t boundingBox(const QGlyphLayout &glyphs) override;
467     virtual glyph_metrics_t boundingBox(glyph_t glyph) override;
468 
469     virtual void recalcAdvances(QGlyphLayout *, ShaperFlags) const override;
470     virtual void doKerning(QGlyphLayout *, ShaperFlags) const override;
471     virtual void addOutlineToPath(qreal, qreal, const QGlyphLayout &, QPainterPath *, QTextItem::RenderFlags flags) override;
472     virtual void getGlyphBearings(glyph_t glyph, qreal *leftBearing = 0, qreal *rightBearing = 0) override;
473 
474     virtual QFixed ascent() const override;
475     virtual QFixed capHeight() const override;
476     virtual QFixed descent() const override;
477     virtual QFixed leading() const override;
478     virtual QFixed xHeight() const override;
479     virtual QFixed averageCharWidth() const override;
480     virtual QImage alphaMapForGlyph(glyph_t) override;
481     virtual QImage alphaMapForGlyph(glyph_t glyph, QFixed subPixelPosition) override;
482     virtual QImage alphaMapForGlyph(glyph_t, const QTransform &t) override;
483     virtual QImage alphaMapForGlyph(glyph_t, QFixed subPixelPosition, const QTransform &t) override;
484     virtual QImage alphaRGBMapForGlyph(glyph_t, QFixed subPixelPosition, const QTransform &t) override;
485 
486     virtual QFixed lineThickness() const override;
487     virtual QFixed underlinePosition() const override;
488     virtual qreal maxCharWidth() const override;
489     virtual qreal minLeftBearing() const override;
490     virtual qreal minRightBearing() const override;
491 
492     virtual bool canRender(const QChar *string, int len) const override;
493 
494     inline int fallbackFamilyCount() const { return m_fallbackFamilies.size(); }
495     inline QString fallbackFamilyAt(int at) const { return m_fallbackFamilies.at(at); }
496 
497     void setFallbackFamiliesList(const QStringList &fallbackFamilies);
498 
499     static uchar highByte(glyph_t glyph); // Used for determining engine
500 
501     inline QFontEngine *engine(int at) const
502     { Q_ASSERT(at < m_engines.size()); return m_engines.at(at); }
503 
504     void ensureEngineAt(int at);
505 
506     static QFontEngine *createMultiFontEngine(QFontEngine *fe, int script);
507 
508 protected:
509     virtual void ensureFallbackFamiliesQueried();
510     virtual bool shouldLoadFontEngineForCharacter(int at, uint ucs4) const;
511     virtual QFontEngine *loadEngine(int at);
512 
513 private:
514     QVector<QFontEngine *> m_engines;
515     QStringList m_fallbackFamilies;
516     const int m_script;
517     bool m_fallbackFamiliesQueried;
518 };
519 
520 class QTestFontEngine : public QFontEngineBox
521 {
522 public:
523     QTestFontEngine(int size);
524 };
525 
526 QT_END_NAMESPACE
527 
528 
529 
530 #endif // QFONTENGINE_P_H
