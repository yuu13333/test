I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the plugins of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qgenericunixservices_p.h"
41 #include <QtGui/private/qtguiglobal_p.h>
42 
43 #include <QtCore/QDebug>
44 #include <QtCore/QFile>
45 #if QT_CONFIG(process)
46 # include <QtCore/QProcess>
47 #endif
48 #include <QtCore/QSettings>
49 #include <QtCore/QStandardPaths>
50 #include <QtCore/QUrl>
51 
52 #if QT_CONFIG(dbus)
53 // These QtCore includes are needed for flatpak support
54 #include <QtCore/QFileInfo>
55 #include <QtCore/QUrlQuery>
56 
57 #include <QtDBus/QDBusConnection>
58 #include <QtDBus/QDBusMessage>
59 #include <QtDBus/QDBusPendingCall>
60 #include <QtDBus/QDBusPendingCallWatcher>
61 #include <QtDBus/QDBusPendingReply>
62 #include <QtDBus/QDBusUnixFileDescriptor>
63 
64 #include <fcntl.h>
65 
66 #endif // QT_CONFIG(dbus)
67 
68 #include <stdlib.h>
69 
70 QT_BEGIN_NAMESPACE
71 
72 #if QT_CONFIG(multiprocess)
73 
74 enum { debug = 0 };
75 
76 static inline QByteArray detectDesktopEnvironment()
77 {
78     const QByteArray xdgCurrentDesktop = qgetenv("XDG_CURRENT_DESKTOP");
79     if (!xdgCurrentDesktop.isEmpty())
80         return xdgCurrentDesktop.toUpper(); // KDE, GNOME, UNITY, LXDE, MATE, XFCE...
81 
82     // Classic fallbacks
83     if (!qEnvironmentVariableIsEmpty("KDE_FULL_SESSION"))
84         return QByteArrayLiteral("KDE");
85     if (!qEnvironmentVariableIsEmpty("GNOME_DESKTOP_SESSION_ID"))
86         return QByteArrayLiteral("GNOME");
87 
88     // Fallback to checking $DESKTOP_SESSION (unreliable)
89     QByteArray desktopSession = qgetenv("DESKTOP_SESSION");
90 
91     // This can be a path in /usr/share/xsessions
92     int slash = desktopSession.lastIndexOf('/');
93     if (slash != -1) {
94 #ifndef QT_NO_SETTINGS
95         QSettings desktopFile(QFile::decodeName(desktopSession + ".desktop"), QSettings::IniFormat);
96         desktopFile.beginGroup(QStringLiteral("Desktop Entry"));
97         QByteArray desktopName = desktopFile.value(QStringLiteral("DesktopNames")).toByteArray();
98         if (!desktopName.isEmpty())
99             return desktopName;
100 #endif
101 
102         // try decoding just the basename
103         desktopSession = desktopSession.mid(slash + 1);
104     }
105 
106     if (desktopSession == "gnome")
107         return QByteArrayLiteral("GNOME");
108     else if (desktopSession == "xfce")
109         return QByteArrayLiteral("XFCE");
110     else if (desktopSession == "kde")
111         return QByteArrayLiteral("KDE");
112 
113     return QByteArrayLiteral("UNKNOWN");
114 }
115 
116 static inline bool checkExecutable(const QString &candidate, QString *result)
117 {
118     *result = QStandardPaths::findExecutable(candidate);
119     return !result->isEmpty();
120 }
121 
122 static inline bool detectWebBrowser(const QByteArray &desktop,
123                                     bool checkBrowserVariable,
124                                     QString *browser)
125 {
126     const char *browsers[] = {"google-chrome", "firefox", "mozilla", "opera"};
127 
128     browser->clear();
129     if (checkExecutable(QStringLiteral("xdg-open"), browser))
130         return true;
131 
132     if (checkBrowserVariable) {
133         QByteArray browserVariable = qgetenv("DEFAULT_BROWSER");
134         if (browserVariable.isEmpty())
135             browserVariable = qgetenv("BROWSER");
136         if (!browserVariable.isEmpty() && checkExecutable(QString::fromLocal8Bit(browserVariable), browser))
137             return true;
138     }
139 
140     if (desktop == QByteArray("KDE")) {
141         // Konqueror launcher
142         if (checkExecutable(QStringLiteral("kfmclient"), browser)) {
143             browser->append(QLatin1String(" exec"));
144             return true;
145         }
146     } else if (desktop == QByteArray("GNOME")) {
147         if (checkExecutable(QStringLiteral("gnome-open"), browser))
148             return true;
149     }
150 
151     for (size_t i = 0; i < sizeof(browsers)/sizeof(char *); ++i)
152         if (checkExecutable(QLatin1String(browsers[i]), browser))
153             return true;
154     return false;
155 }
156 
157 static inline bool launch(const QString &launcher, const QUrl &url)
158 {
159     const QString command = launcher + QLatin1Char(' ') + QLatin1String(url.toEncoded());
160     if (debug)
161         qDebug("Launching %s", qPrintable(command));
162 #if !QT_CONFIG(process)
163     const bool ok = ::system(qPrintable(command + QLatin1String(" &")));
164 #else
165     const bool ok = QProcess::startDetached(command);
166 #endif
167     if (!ok)
168         qWarning("Launch failed (%s)", qPrintable(command));
169     return ok;
170 }
171 
172 #if QT_CONFIG(dbus)
173 static inline bool checkRunningUnderFlatpak()
174 {
175     bool inSandbox = false;
176     if (!qEnvironmentVariableIsEmpty("XDG_RUNTIME_DIR")) {
177         const QByteArray runtimeDir = qgetenv("XDG_RUNTIME_DIR");
178         if (!runtimeDir.isEmpty())
179             inSandbox = QFileInfo::exists(QFile::decodeName(runtimeDir) + QStringLiteral("/flatpak-info"));
180     }
181 
182     return inSandbox;
183 }
184 
185 static inline bool flatpakOpenUrl(const QUrl &url)
186 {
187     // DBus signature:
188     // OpenURI (IN   s      parent_window,
189     //          IN   s      uri,
190     //          IN   a{sv}  options,
191     //          OUT  o      handle)
192     // Options:
193     // writable (b) - Whether to allow the chosen application to write to the file.
194     //                This key only takes effect the uri points to a local file that is exported in the document portal,
195     //                and the chosen application is sandboxed itself.
196 
197     QDBusMessage message = QDBusMessage::createMethodCall(QLatin1String("org.freedesktop.portal.Desktop"),
198                                                           QLatin1String("/org/freedesktop/portal/desktop"),
199                                                           QLatin1String("org.freedesktop.portal.OpenURI"),
200                                                           QLatin1String("OpenURI"));
201     // FIXME parent_window_id and handle writable option
202     message << QString() << url.toString() << QVariantMap();
203 
204     QDBusPendingCall pendingCall = QDBusConnection::sessionBus().asyncCall(message);
205     QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(pendingCall);
206     watcher->waitForFinished();
207 
208     QDBusPendingReply<QDBusObjectPath> reply = *watcher;
209     return !reply.isError();
210 }
211 
212 static inline bool flatpakSendEmail(const QUrl &url)
213 {
214     // DBus signature:
215     // ComposeEmail (IN   s      parent_window,
216     //               IN   a{sv}  options,
217     //               OUT  o      handle)
218     // Options:
219     // address (s) - The email address to send to.
220     // subject (s) - The subject for the email.
221     // body (s) - The body for the email.
222     // attachment_fds (ah) - File descriptors for files to attach.
223 
224     QUrlQuery urlQuery(url);
225     QVariantMap options;
226     options.insert(QLatin1String("address"), url.path());
227     options.insert(QLatin1String("subject"), urlQuery.queryItemValue(QLatin1String("subject")));
228     options.insert(QLatin1String("body"), urlQuery.queryItemValue(QLatin1String("body")));
229 
230     QList<QDBusUnixFileDescriptor> attachments;
231     const QStringList attachmentUris = urlQuery.allQueryItemValues(QLatin1String("attachment"));
232 
233     for (const QString &attachmentUri : attachmentUris) {
234         const int fd = open(attachmentUri.toStdString().c_str(), O_PATH | O_CLOEXEC);
235         if (fd != -1) {
236             QDBusUnixFileDescriptor descriptor(fd);
237             attachments << descriptor;
238         }
239     }
240 
241     options.insert(QLatin1String("attachment_fds"), QVariant::fromValue(attachments));
242 
243     QDBusMessage message = QDBusMessage::createMethodCall(QLatin1String("org.freedesktop.portal.Desktop"),
244                                                           QLatin1String("/org/freedesktop/portal/desktop"),
245                                                           QLatin1String("org.freedesktop.portal.Email"),
246                                                           QLatin1String("ComposeEmail"));
247 
248     // FIXME parent_window_id
249     message << QString() << options;
250 
251     QDBusPendingCall pendingCall = QDBusConnection::sessionBus().asyncCall(message);
252     QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(pendingCall);
253     watcher->waitForFinished();
254 
255     QDBusPendingReply<QDBusObjectPath> reply = *watcher;
256     return !reply.isError();
257 }
258 #endif // QT_CONFIG(dbus)
259 
260 QByteArray QGenericUnixServices::desktopEnvironment() const
261 {
262     static const QByteArray result = detectDesktopEnvironment();
263     return result;
264 }
265 
266 bool QGenericUnixServices::openUrl(const QUrl &url)
267 {
268     if (url.scheme() == QLatin1String("mailto")) {
269 #if QT_CONFIG(dbus)
270         if (checkRunningUnderFlatpak())
271             return flatpakSendEmail(url);
272 #endif
273         return openDocument(url);
274     }
275 
276 #if QT_CONFIG(dbus)
277     if (checkRunningUnderFlatpak())
278         return flatpakOpenUrl(url);
279 #endif
280 
281     if (m_webBrowser.isEmpty() && !detectWebBrowser(desktopEnvironment(), true, &m_webBrowser)) {
282         qWarning("Unable to detect a web browser to launch '%s'", qPrintable(url.toString()));
283         return false;
284     }
285     return launch(m_webBrowser, url);
286 }
287 
288 bool QGenericUnixServices::openDocument(const QUrl &url)
289 {
290     if (m_documentLauncher.isEmpty() && !detectWebBrowser(desktopEnvironment(), false, &m_documentLauncher)) {
291         qWarning("Unable to detect a launcher for '%s'", qPrintable(url.toString()));
292         return false;
293     }
294     return launch(m_documentLauncher, url);
295 }
296 
297 #else
298 QByteArray QGenericUnixServices::desktopEnvironment() const
299 {
300     return QByteArrayLiteral("UNKNOWN");
301 }
302 
303 bool QGenericUnixServices::openUrl(const QUrl &url)
304 {
305     Q_UNUSED(url)
306     qWarning("openUrl() not supported on this platform");
307     return false;
308 }
309 
310 bool QGenericUnixServices::openDocument(const QUrl &url)
311 {
312     Q_UNUSED(url)
313     qWarning("openDocument() not supported on this platform");
314     return false;
315 }
316 
317 #endif // QT_NO_MULTIPROCESS
318 
319 QT_END_NAMESPACE
