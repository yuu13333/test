I want you to act as a code reviewer of Qt Creator in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2020 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 #include "androidsdkdownloader.h"
26 
27 #include <QDir>
28 #include <QDirIterator>
29 #include <QLoggingCategory>
30 #include <QMessageBox>
31 #include <QProcess>
32 #include <QStandardPaths>
33 
34 namespace {
35 Q_LOGGING_CATEGORY(sdkDownloaderLog, "qtc.android.sdkDownloader", QtWarningMsg)
36 }
37 
38 /**
39  * @class SdkDownloader
40  * @brief Download Android SDK tools package from within Qt Creator.
41  */
42 AndroidSdkDownloader::AndroidSdkDownloader()
43 {
44     connect(&m_manager, SIGNAL(finished(QNetworkReply *)), SLOT(downloadFinished(QNetworkReply *)));
45 }
46 
47 void AndroidSdkDownloader::sslErrors(const QList<QSslError> &sslErrors)
48 {
49 #if QT_CONFIG(ssl)
50     for (const QSslError &error : sslErrors)
51         qCDebug(sdkDownloaderLog, "SSL error: %s\n", qPrintable(error.errorString()));
52 #else
53     Q_UNUSED(sslErrors);
54 #endif
55 }
56 
57 static void setSdkFilesExecPermission( const QString &sdkExtractPath)
58 {
59     QDirIterator it(sdkExtractPath + QDir::separator() + "tools", QStringList() << "*",
60                     QDir::Files, QDirIterator::Subdirectories);
61     while (it.hasNext()) {
62         QFile file(it.next());
63         if (!file.fileName().contains('.')) {
64             QFlags<QFileDevice::Permission> currentPermissions
65                 = file.permissions();
66             file.setPermissions(currentPermissions | QFileDevice::ExeOwner);
67         }
68     }
69 }
70 
71 void AndroidSdkDownloader::downloadAndExtractSdk(const QUrl &sdkUrl, const QString &jdkPath, const QString &sdkExtractPath)
72 {
73     if (sdkUrl.isEmpty()) {
74         QMessageBox msgBox(QMessageBox::Warning,
75                            tr("Download SDK Tools"),
76                            tr("Couldn't get a valid SDK Tools download URL."));
77         msgBox.exec();
78         return;
79     }
80 
81     QUrl url(sdkUrl);
82     QNetworkRequest request(url);
83     m_reply = m_manager.get(request);
84 
85 #if QT_CONFIG(ssl)
86     connect(m_reply, SIGNAL(sslErrors(QList<QSslError>)), SLOT(sslErrors(QList<QSslError>)));
87 #endif
88 
89     m_progressDialog = new QProgressDialog("Downloading SDK Tools package...", "Cancel", 0, 100);
90     m_progressDialog->setWindowModality(Qt::WindowModal);
91     m_progressDialog->setWindowTitle("Download SDK Tools");
92     m_progressDialog->setFixedSize(m_progressDialog->sizeHint());
93 
94     connect(m_reply, &QNetworkReply::downloadProgress, this, [this](qint64 received, qint64 max) {
95         m_progressDialog->setRange(0, max);
96         m_progressDialog->setValue(received);
97     });
98 
99     connect(m_progressDialog, SIGNAL(canceled()), this, SLOT(cancel()));
100 
101     connect(this, &AndroidSdkDownloader::sdkPackageWriteFinished, this, [this, jdkPath, sdkExtractPath]() {
102         if (extractSdk(jdkPath, sdkExtractPath)) {
103             setSdkFilesExecPermission(sdkExtractPath);
104             emit sdkExtracted();
105         }
106     });
107 }
108 
109 bool AndroidSdkDownloader::extractSdk(const QString &jdkPath, const QString &sdkExtractPath)
110 {
111     if (!QDir(sdkExtractPath).exists()) {
112         if (!QDir().mkdir(sdkExtractPath))
113             qCDebug(sdkDownloaderLog, "Coud not create SDK folder (%s)", qPrintable(sdkExtractPath));
114     }
115 
116     QString jarCmdPath = jdkPath + QDir::separator() + "bin" + QDir::separator() + "jar";
117     QStringList args;
118     args << "xf" << m_sdkFilename;
119 
120     QProcess *jarExtractProc = new QProcess();
121     jarExtractProc->setWorkingDirectory(sdkExtractPath);
122     jarExtractProc->start(jarCmdPath, args);
123     jarExtractProc->waitForFinished();
124     jarExtractProc->close();
125 
126     return jarExtractProc->exitCode() ? false : true;
127 }
128 
129 void AndroidSdkDownloader::cancel()
130 {
131     m_reply->abort();
132     m_reply->deleteLater();
133     m_progressDialog->hide();
134 }
135 
136 QString AndroidSdkDownloader::getSaveFilename(const QUrl &url)
137 {
138     QString path = url.path();
139     QString basename = QFileInfo(path).fileName();
140 
141     if (basename.isEmpty())
142         basename = "sdk-tools.zip";
143 
144     if (QFile::exists(basename)) {
145         int i = 0;
146         basename += '.';
147         while (QFile::exists(basename + QString::number(i)))
148             ++i;
149         basename += QString::number(i);
150     }
151 
152     QString fullPath = QStandardPaths::writableLocation(QStandardPaths::DownloadLocation)
153                        + QDir::separator() + basename;
154     return fullPath;
155 }
156 
157 bool AndroidSdkDownloader::saveToDisk(const QString &filename, QIODevice *data)
158 {
159     QFile file(filename);
160     if (!file.open(QIODevice::WriteOnly)) {
161         qCDebug(sdkDownloaderLog,
162                 "Could not open %s for writing: %s",
163                 qPrintable(filename),
164                 qPrintable(file.errorString()));
165         return false;
166     }
167 
168     file.write(data->readAll());
169     file.close();
170 
171     return true;
172 }
173 
174 bool AndroidSdkDownloader::isHttpRedirect(QNetworkReply *reply)
175 {
176     int statusCode = reply->attribute(QNetworkRequest::HttpStatusCodeAttribute).toInt();
177     return statusCode == 301 || statusCode == 302 || statusCode == 303 || statusCode == 305
178            || statusCode == 307 || statusCode == 308;
179 }
180 
181 void AndroidSdkDownloader::downloadFinished(QNetworkReply *reply)
182 {
183     QUrl url = reply->url();
184     if (reply->error()) {
185         qCDebug(sdkDownloaderLog,
186                 "Downloading Android SDK Tools from URL (%s) failed: %s",
187                 url.toEncoded().constData(),
188                 qPrintable(reply->errorString()));
189     } else {
190         if (isHttpRedirect(reply)) {
191             qCDebug(sdkDownloaderLog,
192                     "Download (%s) was redirected",
193                     url.toEncoded().constData());
194         } else {
195             m_sdkFilename = getSaveFilename(url);
196             if (saveToDisk(m_sdkFilename, reply)) {
197                 qCDebug(sdkDownloaderLog,
198                         "Download of Android SDK Tools saved to (%s)",
199                         qPrintable(m_sdkFilename));
200                 emit sdkPackageWriteFinished();
201             }
202         }
203     }
204 
205     reply->deleteLater();
206 }
