I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #define Q_TEST_QPIXMAPCACHE
41 #include "qpixmapcache.h"
42 #include "qobject.h"
43 #include "qdebug.h"
44 #include "qpixmapcache_p.h"
45 #include "qthread.h"
46 #include "qcoreapplication.h"
47 
48 QT_BEGIN_NAMESPACE
49 
50 /*!
51     \class QPixmapCache
52     \inmodule QtGui
53 
54     \brief The QPixmapCache class provides an application-wide cache for pixmaps.
55 
56     This class is a tool for optimized drawing with QPixmap. You can
57     use it to store temporary pixmaps that are expensive to generate
58     without using more storage space than cacheLimit(). Use insert()
59     to insert pixmaps, find() to find them, and clear() to empty the
60     cache.
61 
62     QPixmapCache contains no member data, only static functions to
63     access the global pixmap cache. It creates an internal QCache
64     object for caching the pixmaps.
65 
66     The cache associates a pixmap with a user-provided string as a key,
67     or with a QPixmapCache::Key that the cache generates.
68     Using QPixmapCache::Key for keys is faster than using strings. The string API is
69     very convenient for complex keys but the QPixmapCache::Key API will be very
70     efficient and convenient for a one-to-one object-to-pixmap mapping - in
71     this case, you can store the keys as members of an object.
72 
73     If two pixmaps are inserted into the cache using equal keys then the
74     last pixmap will replace the first pixmap in the cache. This follows the
75     behavior of the QHash and QCache classes.
76 
77     The cache becomes full when the total size of all pixmaps in the
78     cache exceeds cacheLimit(). The initial cache limit is 10240 KB (10 MB);
79     you can change this by calling setCacheLimit() with the required value.
80     A pixmap takes roughly (\e{width} * \e{height} * \e{depth})/8 bytes of
81     memory.
82 
83     The \e{Qt Quarterly} article
84     \l{http://doc.qt.io/archives/qq/qq12-qpixmapcache.html}{Optimizing
85     with QPixmapCache} explains how to use QPixmapCache to speed up
86     applications by caching the results of painting.
87 
88     \note QPixmapCache is only usable from the application's main thread.
89     Access from other threads will be ignored and return failure.
90 
91     \sa QCache, QPixmap
92 */
93 
94 static const int cache_limit_default = 10240; // 10 MB cache limit
95 
96 static inline qsizetype cost(const QPixmap &pixmap)
97 {
98     // make sure to do a 64bit calculation
99     const qsizetype costKb = static_cast<qsizetype>(pixmap.width())
100                            * pixmap.height() * pixmap.depth() / (8 * 1024);
101     // a small pixmap should have at least a cost of 1(kb)
102     return qBound(1LL, costKb, std::numeric_limits<qsizetype>::max());
103 }
104 
105 static inline bool qt_pixmapcache_thread_test()
106 {
107     if (Q_LIKELY(QCoreApplication::instance() && QThread::currentThread() == QCoreApplication::instance()->thread()))
108         return true;
109 
110     return false;
111 }
112 
113 /*!
114     \class QPixmapCache::Key
115     \brief The QPixmapCache::Key class can be used for efficient access
116     to the QPixmapCache.
117     \inmodule QtGui
118     \since 4.6
119 
120     Use QPixmapCache::insert() to receive an instance of Key generated
121     by the pixmap cache. You can store the key in your own objects for
122     a very efficient one-to-one object-to-pixmap mapping.
123 */
124 
125 /*!
126     Constructs an empty Key object.
127 */
128 QPixmapCache::Key::Key() : d(nullptr)
129 {
130 }
131 
132 /*!
133    \internal
134     Constructs a copy of \a other.
135 */
136 QPixmapCache::Key::Key(const Key &other)
137 {
138     if (other.d)
139         ++(other.d->ref);
140     d = other.d;
141 }
142 
143 /*!
144     Destroys the key.
145 */
146 QPixmapCache::Key::~Key()
147 {
148     if (d && --(d->ref) == 0)
149         delete d;
150 }
151 
152 /*!
153     \internal
154 
155     Returns \c true if this key is the same as the given \a key; otherwise returns
156     false.
157 */
158 bool QPixmapCache::Key::operator ==(const Key &key) const
159 {
160     return (d == key.d);
161 }
162 
163 /*!
164     \fn bool QPixmapCache::Key::operator !=(const Key &key) const
165     \internal
166 */
167 
168 /*!
169     \fn QPixmapCache::Key::Key(Key &&)
170     \internal
171     \since 5.6
172 */
173 
174 /*!
175     \fn QPixmapCache::Key &QPixmapCache::Key::operator=(Key &&)
176     \internal
177     \since 5.6
178 */
179 
180 /*!
181     \fn void QPixmapCache::Key::swap(Key &)
182     \internal
183     \since 5.6
184 */
185 
186 /*!
187     Returns \c true if there is a cached pixmap associated with this key.
188     Otherwise, if pixmap was flushed, the key is no longer valid.
189     \since 5.7
190 */
191 bool QPixmapCache::Key::isValid() const noexcept
192 {
193     return d && d->isValid;
194 }
195 
196 /*!
197     \internal
198 */
199 QPixmapCache::Key &QPixmapCache::Key::operator =(const Key &other)
200 {
201     if (d != other.d) {
202         if (other.d)
203             ++(other.d->ref);
204         if (d && --(d->ref) == 0)
205             delete d;
206         d = other.d;
207     }
208     return *this;
209 }
210 
211 class QPMCache : public QObject, public QCache<QPixmapCache::Key, QPixmapCacheEntry>
212 {
213     Q_OBJECT
214 public:
215     QPMCache();
216     ~QPMCache();
217 
218     void timerEvent(QTimerEvent *) override;
219     bool insert(const QString& key, const QPixmap &pixmap, int cost);
220     QPixmapCache::Key insert(const QPixmap &pixmap, int cost);
221     bool replace(const QPixmapCache::Key &key, const QPixmap &pixmap, int cost);
222     bool remove(const QString &key);
223     bool remove(const QPixmapCache::Key &key);
224 
225     void resizeKeyArray(int size);
226     QPixmapCache::Key createKey();
227     void releaseKey(const QPixmapCache::Key &key);
228     void clear();
229 
230     QPixmap *object(const QString &key) const;
231     QPixmap *object(const QPixmapCache::Key &key) const;
232 
233     static inline QPixmapCache::KeyData *get(const QPixmapCache::Key &key)
234     {return key.d;}
235 
236     static QPixmapCache::KeyData* getKeyData(QPixmapCache::Key *key);
237 
238     bool flushDetachedPixmaps(bool nt);
239 
240 private:
241     enum { soon_time = 10000, flush_time = 30000 };
242     int *keyArray;
243     int theid;
244     int ps;
245     int keyArraySize;
246     int freeKey;
247     QHash<QString, QPixmapCache::Key> cacheKeys;
248     bool t;
249 };
250 
251 QT_BEGIN_INCLUDE_NAMESPACE
252 #include "qpixmapcache.moc"
253 QT_END_INCLUDE_NAMESPACE
254 
255 size_t qHash(const QPixmapCache::Key &k, size_t seed)
256 {
257     const auto *keyData = QPMCache::get(k);
258     return qHash(keyData ? keyData->key : 0, seed);
259 }
260 
261 QPMCache::QPMCache()
262     : QObject(nullptr),
263       QCache<QPixmapCache::Key, QPixmapCacheEntry>(cache_limit_default),
264       keyArray(nullptr), theid(0), ps(0), keyArraySize(0), freeKey(0), t(false)
265 {
266 }
267 QPMCache::~QPMCache()
268 {
269     clear();
270     free(keyArray);
271 }
272 
273 /*
274   This is supposed to cut the cache size down by about 25% in a
275   minute once the application becomes idle, to let any inserted pixmap
276   remain in the cache for some time before it becomes a candidate for
277   cleaning-up, and to not cut down the size of the cache while the
278   cache is in active use.
279 
280   When the last detached pixmap has been deleted from the cache, kill the
281   timer so Qt won't keep the CPU from going into sleep mode. Currently
282   the timer is not restarted when the pixmap becomes unused, but it does
283   restart once something else is added (i.e. the cache space is actually needed).
284 
285   Returns \c true if any were removed.
286 */
287 bool QPMCache::flushDetachedPixmaps(bool nt)
288 {
289     auto mc = maxCost();
290     const qsizetype currentTotal = totalCost();
291     if (currentTotal)
292         setMaxCost(nt ? currentTotal * 3 / 4 : currentTotal - 1);
293     setMaxCost(mc);
294     ps = totalCost();
295 
296     bool any = false;
297     QHash<QString, QPixmapCache::Key>::iterator it = cacheKeys.begin();
298     while (it != cacheKeys.end()) {
299         const auto value = it.value();
300         if (value.isValid() && !contains(value)) {
301             releaseKey(value);
302             it = cacheKeys.erase(it);
303             any = true;
304         } else {
305             ++it;
306         }
307     }
308 
309     return any;
310 }
311 
312 void QPMCache::timerEvent(QTimerEvent *)
313 {
314     bool nt = totalCost() == ps;
315     if (!flushDetachedPixmaps(nt)) {
316         killTimer(theid);
317         theid = 0;
318     } else if (nt != t) {
319         killTimer(theid);
320         theid = startTimer(nt ? soon_time : flush_time);
321         t = nt;
322     }
323 }
324 
325 
326 QPixmap *QPMCache::object(const QString &key) const
327 {
328     QPixmapCache::Key cacheKey = cacheKeys.value(key);
329     if (!cacheKey.d || !cacheKey.d->isValid) {
330         const_cast<QPMCache *>(this)->cacheKeys.remove(key);
331         return nullptr;
332     }
333     QPixmap *ptr = QCache<QPixmapCache::Key, QPixmapCacheEntry>::object(cacheKey);
334      //We didn't find the pixmap in the cache, the key is not valid anymore
335     if (!ptr) {
336         const_cast<QPMCache *>(this)->cacheKeys.remove(key);
337     }
338     return ptr;
339 }
340 
341 QPixmap *QPMCache::object(const QPixmapCache::Key &key) const
342 {
343     Q_ASSERT(key.isValid());
344     QPixmap *ptr = QCache<QPixmapCache::Key, QPixmapCacheEntry>::object(key);
345     //We didn't find the pixmap in the cache, the key is not valid anymore
346     if (!ptr)
347         const_cast<QPMCache *>(this)->releaseKey(key);
348     return ptr;
349 }
350 
351 bool QPMCache::insert(const QString& key, const QPixmap &pixmap, int cost)
352 {
353     QPixmapCache::Key &cacheKey = cacheKeys[key];
354     //If for the same key we add already a pixmap we should delete it
355     if (cacheKey.d)
356         QCache<QPixmapCache::Key, QPixmapCacheEntry>::remove(cacheKey);
357 
358     //we create a new key the old one has been removed
359     cacheKey = createKey();
360 
361     bool success = QCache<QPixmapCache::Key, QPixmapCacheEntry>::insert(cacheKey, new QPixmapCacheEntry(cacheKey, pixmap), cost);
362     if (success) {
363         if (!theid) {
364             theid = startTimer(flush_time);
365             t = false;
366         }
367     } else {
368         //Insertion failed we released the new allocated key
369         cacheKeys.remove(key);
370     }
371     return success;
372 }
373 
374 QPixmapCache::Key QPMCache::insert(const QPixmap &pixmap, int cost)
375 {
376     QPixmapCache::Key cacheKey = createKey();
377     bool success = QCache<QPixmapCache::Key, QPixmapCacheEntry>::insert(cacheKey, new QPixmapCacheEntry(cacheKey, pixmap), cost);
378     if (success) {
379         if (!theid) {
380             theid = startTimer(flush_time);
381             t = false;
382         }
383     }
384     return cacheKey;
385 }
386 
387 bool QPMCache::replace(const QPixmapCache::Key &key, const QPixmap &pixmap, int cost)
388 {
389     Q_ASSERT(key.isValid());
390     //If for the same key we had already an entry so we should delete the pixmap and use the new one
391     QCache<QPixmapCache::Key, QPixmapCacheEntry>::remove(key);
392 
393     QPixmapCache::Key cacheKey = createKey();
394 
395     bool success = QCache<QPixmapCache::Key, QPixmapCacheEntry>::insert(cacheKey, new QPixmapCacheEntry(cacheKey, pixmap), cost);
396     if (success) {
397         if (!theid) {
398             theid = startTimer(flush_time);
399             t = false;
400         }
401         const_cast<QPixmapCache::Key&>(key) = cacheKey;
402     }
403     return success;
404 }
405 
406 bool QPMCache::remove(const QString &key)
407 {
408     auto cacheKey = cacheKeys.constFind(key);
409     //The key was not in the cache
410     if (cacheKey == cacheKeys.constEnd())
411         return false;
412     const bool result = QCache<QPixmapCache::Key, QPixmapCacheEntry>::remove(cacheKey.value());
413     cacheKeys.erase(cacheKey);
414     return result;
415 }
416 
417 bool QPMCache::remove(const QPixmapCache::Key &key)
418 {
419     return QCache<QPixmapCache::Key, QPixmapCacheEntry>::remove(key);
420 }
421 
422 void QPMCache::resizeKeyArray(int size)
423 {
424     if (size <= keyArraySize || size == 0)
425         return;
426     keyArray = q_check_ptr(static_cast<int *>(realloc(keyArray,
427                     size * sizeof(int))));
428     for (int i = keyArraySize; i != size; ++i)
429         keyArray[i] = i + 1;
430     keyArraySize = size;
431 }
432 
433 QPixmapCache::Key QPMCache::createKey()
434 {
435     if (freeKey == keyArraySize)
436         resizeKeyArray(keyArraySize ? keyArraySize << 1 : 2);
437     int id = freeKey;
438     freeKey = keyArray[id];
439     QPixmapCache::Key key;
440     QPixmapCache::KeyData *d = QPMCache::getKeyData(&key);
441     d->key = ++id;
442     return key;
443 }
444 
445 void QPMCache::releaseKey(const QPixmapCache::Key &key)
446 {
447     QPixmapCache::KeyData *keyData = key.d;
448     if (!keyData || keyData->key > keyArraySize || keyData->key <= 0)
449         return;
450     keyData->key--;
451     keyArray[keyData->key] = freeKey;
452     freeKey = keyData->key;
453     keyData->isValid = false;
454     keyData->key = 0;
455 }
456 
457 void QPMCache::clear()
458 {
459     free(keyArray);
460     keyArray = nullptr;
461     freeKey = 0;
462     keyArraySize = 0;
463     //Mark all keys as invalid
464     const QList<QPixmapCache::Key> keys = QCache<QPixmapCache::Key, QPixmapCacheEntry>::keys();
465     for (const auto &key : keys) {
466         if (key.d)
467             key.d->isValid = false;
468     }
469     QCache<QPixmapCache::Key, QPixmapCacheEntry>::clear();
470     // Nothing left to flush; stop the timer
471     if (theid) {
472         killTimer(theid);
473         theid = 0;
474     }
475 }
476 
477 QPixmapCache::KeyData* QPMCache::getKeyData(QPixmapCache::Key *key)
478 {
479     if (!key->d)
480         key->d = new QPixmapCache::KeyData;
481     return key->d;
482 }
483 
484 Q_GLOBAL_STATIC(QPMCache, pm_cache)
485 
486 int Q_AUTOTEST_EXPORT q_QPixmapCache_keyHashSize()
487 {
488     return pm_cache()->size();
489 }
490 
491 QPixmapCacheEntry::~QPixmapCacheEntry()
492 {
493     pm_cache()->releaseKey(key);
494 }
495 
496 /*!
497     Looks for a cached pixmap associated with the given \a key in the cache.
498     If the pixmap is found, the function sets \a pixmap to that pixmap and
499     returns \c true; otherwise it leaves \a pixmap alone and returns \c false.
500 
501     \since 4.6
502 
503     Example:
504     \snippet code/src_gui_image_qpixmapcache.cpp 1
505 */
506 
507 bool QPixmapCache::find(const QString &key, QPixmap *pixmap)
508 {
509     if (!qt_pixmapcache_thread_test())
510         return false;
511     QPixmap *ptr = pm_cache()->object(key);
512     if (ptr && pixmap)
513         *pixmap = *ptr;
514     return ptr != nullptr;
515 }
516 
517 /*!
518     Looks for a cached pixmap associated with the given \a key in the cache.
519     If the pixmap is found, the function sets \a pixmap to that pixmap and
520     returns \c true; otherwise it leaves \a pixmap alone and returns \c false. If
521     the pixmap is not found, it means that the \a key is no longer valid,
522     so it will be released for the next insertion.
523 
524     \since 4.6
525 */
526 bool QPixmapCache::find(const Key &key, QPixmap *pixmap)
527 {
528     if (!qt_pixmapcache_thread_test())
529         return false;
530     //The key is not valid anymore, a flush happened before probably
531     if (!key.d || !key.d->isValid)
532         return false;
533     QPixmap *ptr = pm_cache()->object(key);
534     if (ptr && pixmap)
535         *pixmap = *ptr;
536     return ptr != nullptr;
537 }
538 
539 /*!
540     Inserts a copy of the pixmap \a pixmap associated with the \a key into
541     the cache.
542 
543     All pixmaps inserted by the Qt library have a key starting with
544     "$qt", so your own pixmap keys should never begin "$qt".
545 
546     When a pixmap is inserted and the cache is about to exceed its
547     limit, it removes pixmaps until there is enough room for the
548     pixmap to be inserted.
549 
550     The oldest pixmaps (least recently accessed in the cache) are
551     deleted when more space is needed.
552 
553     The function returns \c true if the object was inserted into the
554     cache; otherwise it returns \c false.
555 
556     \sa setCacheLimit()
557 */
558 
559 bool QPixmapCache::insert(const QString &key, const QPixmap &pixmap)
560 {
561     if (!qt_pixmapcache_thread_test())
562         return false;
563     return pm_cache()->insert(key, pixmap, cost(pixmap));
564 }
565 
566 /*!
567     Inserts a copy of the given \a pixmap into the cache and returns a key
568     that can be used to retrieve it.
569 
570     When a pixmap is inserted and the cache is about to exceed its
571     limit, it removes pixmaps until there is enough room for the
572     pixmap to be inserted.
573 
574     The oldest pixmaps (least recently accessed in the cache) are
575     deleted when more space is needed.
576 
577     \sa setCacheLimit(), replace()
578 
579     \since 4.6
580 */
581 QPixmapCache::Key QPixmapCache::insert(const QPixmap &pixmap)
582 {
583     if (!qt_pixmapcache_thread_test())
584         return QPixmapCache::Key();
585     return pm_cache()->insert(pixmap, cost(pixmap));
586 }
587 
588 /*!
589     Replaces the pixmap associated with the given \a key with the \a pixmap
590     specified. Returns \c true if the \a pixmap has been correctly inserted into
591     the cache; otherwise returns \c false.
592 
593     \sa setCacheLimit(), insert()
594 
595     \since 4.6
596 */
597 bool QPixmapCache::replace(const Key &key, const QPixmap &pixmap)
598 {
599     if (!qt_pixmapcache_thread_test())
600         return false;
601     //The key is not valid anymore, a flush happened before probably
602     if (!key.d || !key.d->isValid)
603         return false;
604     return pm_cache()->replace(key, pixmap, cost(pixmap));
605 }
606 
607 /*!
608     Returns the cache limit (in kilobytes).
609 
610     The default cache limit is 10240 KB.
611 
612     \sa setCacheLimit()
613 */
614 
615 int QPixmapCache::cacheLimit()
616 {
617     if (!qt_pixmapcache_thread_test())
618         return 0;
619     return pm_cache()->maxCost();
620 }
621 
622 /*!
623     Sets the cache limit to \a n kilobytes.
624 
625     The default setting is 10240 KB.
626 
627     \sa cacheLimit()
628 */
629 
630 void QPixmapCache::setCacheLimit(int n)
631 {
632     if (!qt_pixmapcache_thread_test())
633         return;
634     pm_cache()->setMaxCost(n);
635 }
636 
637 /*!
638   Removes the pixmap associated with \a key from the cache.
639 */
640 void QPixmapCache::remove(const QString &key)
641 {
642     if (!qt_pixmapcache_thread_test())
643         return;
644     pm_cache()->remove(key);
645 }
646 
647 /*!
648   Removes the pixmap associated with \a key from the cache and releases
649   the key for a future insertion.
650 
651   \since 4.6
652 */
653 void QPixmapCache::remove(const Key &key)
654 {
655     if (!qt_pixmapcache_thread_test())
656         return;
657     //The key is not valid anymore, a flush happened before probably
658     if (!key.d || !key.d->isValid)
659         return;
660     pm_cache()->remove(key);
661 }
662 
663 /*!
664     Removes all pixmaps from the cache.
665 */
666 
667 void QPixmapCache::clear()
668 {
669     if (!QCoreApplication::closingDown() && !qt_pixmapcache_thread_test())
670         return;
671     QT_TRY {
672         if (pm_cache.exists())
673             pm_cache->clear();
674     } QT_CATCH(const std::bad_alloc &) {
675         // if we ran out of memory during pm_cache(), it's no leak,
676         // so just ignore it.
677     }
678 }
679 
680 void QPixmapCache::flushDetachedPixmaps()
681 {
682     if (!qt_pixmapcache_thread_test())
683         return;
684     pm_cache()->flushDetachedPixmaps(true);
685 }
686 
687 int QPixmapCache::totalUsed()
688 {
689     if (!qt_pixmapcache_thread_test())
690         return 0;
691     return (pm_cache()->totalCost()+1023) / 1024;
692 }
693 
694 /*!
695    \fn QPixmapCache::KeyData::KeyData()
696 
697    \internal
698 */
699 /*!
700    \fn QPixmapCache::KeyData::KeyData(const KeyData &other)
701    \internal
702 */
703 /*!
704    \fn QPixmapCache::KeyData::~KeyData()
705 
706    \internal
707 */
708 QT_END_NAMESPACE
