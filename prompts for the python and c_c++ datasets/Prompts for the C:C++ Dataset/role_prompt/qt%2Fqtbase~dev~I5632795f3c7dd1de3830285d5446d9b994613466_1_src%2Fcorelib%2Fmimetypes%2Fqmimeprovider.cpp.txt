I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2018 The Qt Company Ltd.
4 ** Copyright (C) 2018 Klaralvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author David Faure <david.faure@kdab.com>
5 ** Copyright (C) 2019 Intel Corporation.
6 ** Contact: https://www.qt.io/licensing/
7 **
8 ** This file is part of the QtCore module of the Qt Toolkit.
9 **
10 ** $QT_BEGIN_LICENSE:LGPL$
11 ** Commercial License Usage
12 ** Licensees holding valid commercial Qt licenses may use this file in
13 ** accordance with the commercial license agreement provided with the
14 ** Software or, alternatively, in accordance with the terms contained in
15 ** a written agreement between you and The Qt Company. For licensing terms
16 ** and conditions see https://www.qt.io/terms-conditions. For further
17 ** information use the contact form at https://www.qt.io/contact-us.
18 **
19 ** GNU Lesser General Public License Usage
20 ** Alternatively, this file may be used under the terms of the GNU Lesser
21 ** General Public License version 3 as published by the Free Software
22 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
23 ** packaging of this file. Please review the following information to
24 ** ensure the GNU Lesser General Public License version 3 requirements
25 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
26 **
27 ** GNU General Public License Usage
28 ** Alternatively, this file may be used under the terms of the GNU
29 ** General Public License version 2.0 or (at your option) the GNU General
30 ** Public license version 3 or any later version approved by the KDE Free
31 ** Qt Foundation. The licenses are as published by the Free Software
32 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
33 ** included in the packaging of this file. Please review the following
34 ** information to ensure the GNU General Public License requirements will
35 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
36 ** https://www.gnu.org/licenses/gpl-3.0.html.
37 **
38 ** $QT_END_LICENSE$
39 **
40 ****************************************************************************/
41 
42 #include "qmimeprovider_p.h"
43 
44 #include "qmimetypeparser_p.h"
45 #include <qstandardpaths.h>
46 #include "qmimemagicrulematcher_p.h"
47 
48 #include <QXmlStreamReader>
49 #include <QBuffer>
50 #include <QDir>
51 #include <QFile>
52 #include <QByteArrayMatcher>
53 #include <QDebug>
54 #include <QDateTime>
55 #include <QtEndian>
56 
57 #if QT_CONFIG(mimetype_database)
58 #  if defined(Q_CC_MSVC)
59 #    pragma section(".qtmimedatabase", read, shared)
60 __declspec(allocate(".qtmimedatabase")) __declspec(align(4096))
61 #  elif defined(Q_OS_DARWIN)
62 __attribute__((section("__TEXT,.qtmimedatabase"), aligned(4096)))
63 #  elif (defined(Q_OF_ELF) || defined(Q_OS_WIN)) && defined(Q_CC_GNU)
64 __attribute__((section(".qtmimedatabase"), aligned(4096)))
65 #  endif
66 
67 #  include "qmimeprovider_database.cpp"
68 
69 #  ifdef MIME_DATABASE_IS_ZSTD
70 #    if !QT_CONFIG(zstd)
71 #      error "MIME database is zstd but no support compiled in!"
72 #    endif
73 #    include <zstd.h>
74 #  endif
75 #  ifdef MIME_DATABASE_IS_GZIP
76 #    ifdef QT_NO_COMPRESS
77 #      error "MIME database is zlib but no support compiled in!"
78 #    endif
79 #    define ZLIB_CONST
80 #    include <zconf.h>
81 #    include <zlib.h>
82 #  endif
83 #endif
84 
85 QT_BEGIN_NAMESPACE
86 
87 QMimeProviderBase::QMimeProviderBase(QMimeDatabasePrivate *db, const QString &directory)
88     : m_db(db), m_directory(directory)
89 {
90 }
91 
92 
93 QMimeBinaryProvider::QMimeBinaryProvider(QMimeDatabasePrivate *db, const QString &directory)
94     : QMimeProviderBase(db, directory), m_mimetypeListLoaded(false)
95 {
96     ensureLoaded();
97 }
98 
99 struct QMimeBinaryProvider::CacheFile
100 {
101     CacheFile(const QString &fileName);
102     ~CacheFile();
103 
104     bool isValid() const { return m_valid; }
105     inline quint16 getUint16(int offset) const
106     {
107         return qFromBigEndian(*reinterpret_cast<quint16 *>(data + offset));
108     }
109     inline quint32 getUint32(int offset) const
110     {
111         return qFromBigEndian(*reinterpret_cast<quint32 *>(data + offset));
112     }
113     inline const char *getCharStar(int offset) const
114     {
115         return reinterpret_cast<const char *>(data + offset);
116     }
117     bool load();
118     bool reload();
119 
120     QFile file;
121     uchar *data;
122     QDateTime m_mtime;
123     bool m_valid;
124 };
125 
126 QMimeBinaryProvider::CacheFile::CacheFile(const QString &fileName)
127     : file(fileName), m_valid(false)
128 {
129     load();
130 }
131 
132 QMimeBinaryProvider::CacheFile::~CacheFile()
133 {
134 }
135 
136 bool QMimeBinaryProvider::CacheFile::load()
137 {
138     if (!file.open(QIODevice::ReadOnly))
139         return false;
140     data = file.map(0, file.size());
141     if (data) {
142         const int major = getUint16(0);
143         const int minor = getUint16(2);
144         m_valid = (major == 1 && minor >= 1 && minor <= 2);
145     }
146     m_mtime = QFileInfo(file).lastModified();
147     return m_valid;
148 }
149 
150 bool QMimeBinaryProvider::CacheFile::reload()
151 {
152     m_valid = false;
153     if (file.isOpen()) {
154         file.close();
155     }
156     data = nullptr;
157     return load();
158 }
159 
160 QMimeBinaryProvider::~QMimeBinaryProvider()
161 {
162     delete m_cacheFile;
163 }
164 
165 bool QMimeBinaryProvider::isValid()
166 {
167     return m_cacheFile != nullptr;
168 }
169 
170 // Position of the "list offsets" values, at the beginning of the mime.cache file
171 enum {
172     PosAliasListOffset = 4,
173     PosParentListOffset = 8,
174     PosLiteralListOffset = 12,
175     PosReverseSuffixTreeOffset = 16,
176     PosGlobListOffset = 20,
177     PosMagicListOffset = 24,
178     // PosNamespaceListOffset = 28,
179     PosIconsListOffset = 32,
180     PosGenericIconsListOffset = 36
181 };
182 
183 bool QMimeBinaryProvider::checkCacheChanged()
184 {
185     QFileInfo fileInfo(m_cacheFile->file);
186     if (fileInfo.lastModified() > m_cacheFile->m_mtime) {
187         // Deletion can't happen by just running update-mime-database.
188         // But the user could use rm -rf :-)
189         m_cacheFile->reload(); // will mark itself as invalid on failure
190         return true;
191     }
192     return false;
193 }
194 
195 void QMimeBinaryProvider::ensureLoaded()
196 {
197     if (!m_cacheFile) {
198         const QString cacheFileName = m_directory + QLatin1String("/mime.cache");
199         m_cacheFile = new CacheFile(cacheFileName);
200         m_mimetypeListLoaded = false;
201     } else {
202         if (checkCacheChanged())
203             m_mimetypeListLoaded = false;
204         else
205             return; // nothing to do
206     }
207     if (!m_cacheFile->isValid()) { // verify existence and version
208         delete m_cacheFile;
209         m_cacheFile = nullptr;
210     }
211 }
212 
213 static QMimeType mimeTypeForNameUnchecked(const QString &name)
214 {
215     QMimeTypePrivate data;
216     data.name = name;
217     data.fromCache = true;
218     // The rest is retrieved on demand.
219     // comment and globPatterns: in loadMimeTypePrivate
220     // iconName: in loadIcon
221     // genericIconName: in loadGenericIcon
222     return QMimeType(data);
223 }
224 
225 QMimeType QMimeBinaryProvider::mimeTypeForName(const QString &name)
226 {
227     if (!m_mimetypeListLoaded)
228         loadMimeTypeList();
229     if (!m_mimetypeNames.contains(name))
230         return QMimeType(); // unknown mimetype
231     return mimeTypeForNameUnchecked(name);
232 }
233 
234 void QMimeBinaryProvider::addFileNameMatches(const QString &fileName, QMimeGlobMatchResult &result)
235 {
236     if (fileName.isEmpty())
237         return;
238     Q_ASSERT(m_cacheFile);
239     const QString lowerFileName = fileName.toLower();
240     // Check literals (e.g. "Makefile")
241     matchGlobList(result, m_cacheFile, m_cacheFile->getUint32(PosLiteralListOffset), fileName);
242     // Check complex globs (e.g. "callgrind.out[0-9]*")
243     matchGlobList(result, m_cacheFile, m_cacheFile->getUint32(PosGlobListOffset), fileName);
244     // Check the very common *.txt cases with the suffix tree
245     const int reverseSuffixTreeOffset = m_cacheFile->getUint32(PosReverseSuffixTreeOffset);
246     const int numRoots = m_cacheFile->getUint32(reverseSuffixTreeOffset);
247     const int firstRootOffset = m_cacheFile->getUint32(reverseSuffixTreeOffset + 4);
248     matchSuffixTree(result, m_cacheFile, numRoots, firstRootOffset, lowerFileName, lowerFileName.length() - 1, false);
249     if (result.m_matchingMimeTypes.isEmpty())
250         matchSuffixTree(result, m_cacheFile, numRoots, firstRootOffset, fileName, fileName.length() - 1, true);
251 }
252 
253 void QMimeBinaryProvider::matchGlobList(QMimeGlobMatchResult &result, CacheFile *cacheFile, int off, const QString &fileName)
254 {
255     const int numGlobs = cacheFile->getUint32(off);
256     //qDebug() << "Loading" << numGlobs << "globs from" << cacheFile->file.fileName() << "at offset" << cacheFile->globListOffset;
257     for (int i = 0; i < numGlobs; ++i) {
258         const int globOffset = cacheFile->getUint32(off + 4 + 12 * i);
259         const int mimeTypeOffset = cacheFile->getUint32(off + 4 + 12 * i + 4);
260         const int flagsAndWeight = cacheFile->getUint32(off + 4 + 12 * i + 8);
261         const int weight = flagsAndWeight & 0xff;
262         const bool caseSensitive = flagsAndWeight & 0x100;
263         const Qt::CaseSensitivity qtCaseSensitive = caseSensitive ? Qt::CaseSensitive : Qt::CaseInsensitive;
264         const QString pattern = QLatin1String(cacheFile->getCharStar(globOffset));
265 
266         const char *mimeType = cacheFile->getCharStar(mimeTypeOffset);
267         //qDebug() << pattern << mimeType << weight << caseSensitive;
268         QMimeGlobPattern glob(pattern, QString() /*unused*/, weight, qtCaseSensitive);
269 
270         // TODO: this could be done faster for literals where a simple == would do.
271         if (glob.matchFileName(fileName))
272             result.addMatch(QLatin1String(mimeType), weight, pattern);
273     }
274 }
275 
276 bool QMimeBinaryProvider::matchSuffixTree(QMimeGlobMatchResult &result, QMimeBinaryProvider::CacheFile *cacheFile, int numEntries, int firstOffset, const QString &fileName, int charPos, bool caseSensitiveCheck)
277 {
278     QChar fileChar = fileName[charPos];
279     int min = 0;
280     int max = numEntries - 1;
281     while (min <= max) {
282         const int mid = (min + max) / 2;
283         const int off = firstOffset + 12 * mid;
284         const QChar ch = char16_t(cacheFile->getUint32(off));
285         if (ch < fileChar)
286             min = mid + 1;
287         else if (ch > fileChar)
288             max = mid - 1;
289         else {
290             --charPos;
291             int numChildren = cacheFile->getUint32(off + 4);
292             int childrenOffset = cacheFile->getUint32(off + 8);
293             bool success = false;
294             if (charPos > 0)
295                 success = matchSuffixTree(result, cacheFile, numChildren, childrenOffset, fileName, charPos, caseSensitiveCheck);
296             if (!success) {
297                 for (int i = 0; i < numChildren; ++i) {
298                     const int childOff = childrenOffset + 12 * i;
299                     const int mch = cacheFile->getUint32(childOff);
300                     if (mch != 0)
301                         break;
302                     const int mimeTypeOffset = cacheFile->getUint32(childOff + 4);
303                     const char *mimeType = cacheFile->getCharStar(mimeTypeOffset);
304                     const int flagsAndWeight = cacheFile->getUint32(childOff + 8);
305                     const int weight = flagsAndWeight & 0xff;
306                     const bool caseSensitive = flagsAndWeight & 0x100;
307                     if (caseSensitiveCheck || !caseSensitive) {
308                         result.addMatch(QLatin1String(mimeType), weight,
309                                         QLatin1Char('*') + fileName.midRef(charPos + 1));
310                         success = true;
311                     }
312                 }
313             }
314             return success;
315         }
316     }
317     return false;
318 }
319 
320 bool QMimeBinaryProvider::matchMagicRule(QMimeBinaryProvider::CacheFile *cacheFile, int numMatchlets, int firstOffset, const QByteArray &data)
321 {
322     const char *dataPtr = data.constData();
323     const int dataSize = data.size();
324     for (int matchlet = 0; matchlet < numMatchlets; ++matchlet) {
325         const int off = firstOffset + matchlet * 32;
326         const int rangeStart = cacheFile->getUint32(off);
327         const int rangeLength = cacheFile->getUint32(off + 4);
328         //const int wordSize = cacheFile->getUint32(off + 8);
329         const int valueLength = cacheFile->getUint32(off + 12);
330         const int valueOffset = cacheFile->getUint32(off + 16);
331         const int maskOffset = cacheFile->getUint32(off + 20);
332         const char *mask = maskOffset ? cacheFile->getCharStar(maskOffset) : nullptr;
333 
334         if (!QMimeMagicRule::matchSubstring(dataPtr, dataSize, rangeStart, rangeLength, valueLength, cacheFile->getCharStar(valueOffset), mask))
335             continue;
336 
337         const int numChildren = cacheFile->getUint32(off + 24);
338         const int firstChildOffset = cacheFile->getUint32(off + 28);
339         if (numChildren == 0) // No submatch? Then we are done.
340             return true;
341         // Check that one of the submatches matches too
342         if (matchMagicRule(cacheFile, numChildren, firstChildOffset, data))
343             return true;
344     }
345     return false;
346 }
347 
348 void QMimeBinaryProvider::findByMagic(const QByteArray &data, int *accuracyPtr, QMimeType &candidate)
349 {
350     const int magicListOffset = m_cacheFile->getUint32(PosMagicListOffset);
351     const int numMatches = m_cacheFile->getUint32(magicListOffset);
352     //const int maxExtent = cacheFile->getUint32(magicListOffset + 4);
353     const int firstMatchOffset = m_cacheFile->getUint32(magicListOffset + 8);
354 
355     for (int i = 0; i < numMatches; ++i) {
356         const int off = firstMatchOffset + i * 16;
357         const int numMatchlets = m_cacheFile->getUint32(off + 8);
358         const int firstMatchletOffset = m_cacheFile->getUint32(off + 12);
359         if (matchMagicRule(m_cacheFile, numMatchlets, firstMatchletOffset, data)) {
360             const int mimeTypeOffset = m_cacheFile->getUint32(off + 4);
361             const char *mimeType = m_cacheFile->getCharStar(mimeTypeOffset);
362             *accuracyPtr = m_cacheFile->getUint32(off);
363             // Return the first match. We have no rules for conflicting magic data...
364             // (mime.cache itself is sorted, but what about local overrides with a lower prio?)
365             candidate = mimeTypeForNameUnchecked(QLatin1String(mimeType));
366             return;
367         }
368     }
369 }
370 
371 void QMimeBinaryProvider::addParents(const QString &mime, QStringList &result)
372 {
373     const QByteArray mimeStr = mime.toLatin1();
374     const int parentListOffset = m_cacheFile->getUint32(PosParentListOffset);
375     const int numEntries = m_cacheFile->getUint32(parentListOffset);
376 
377     int begin = 0;
378     int end = numEntries - 1;
379     while (begin <= end) {
380         const int medium = (begin + end) / 2;
381         const int off = parentListOffset + 4 + 8 * medium;
382         const int mimeOffset = m_cacheFile->getUint32(off);
383         const char *aMime = m_cacheFile->getCharStar(mimeOffset);
384         const int cmp = qstrcmp(aMime, mimeStr);
385         if (cmp < 0) {
386             begin = medium + 1;
387         } else if (cmp > 0) {
388             end = medium - 1;
389         } else {
390             const int parentsOffset = m_cacheFile->getUint32(off + 4);
391             const int numParents = m_cacheFile->getUint32(parentsOffset);
392             for (int i = 0; i < numParents; ++i) {
393                 const int parentOffset = m_cacheFile->getUint32(parentsOffset + 4 + 4 * i);
394                 const char *aParent = m_cacheFile->getCharStar(parentOffset);
395                 const QString strParent = QString::fromLatin1(aParent);
396                 if (!result.contains(strParent))
397                     result.append(strParent);
398             }
399             break;
400         }
401     }
402 }
403 
404 QString QMimeBinaryProvider::resolveAlias(const QString &name)
405 {
406     const QByteArray input = name.toLatin1();
407     const int aliasListOffset = m_cacheFile->getUint32(PosAliasListOffset);
408     const int numEntries = m_cacheFile->getUint32(aliasListOffset);
409     int begin = 0;
410     int end = numEntries - 1;
411     while (begin <= end) {
412         const int medium = (begin + end) / 2;
413         const int off = aliasListOffset + 4 + 8 * medium;
414         const int aliasOffset = m_cacheFile->getUint32(off);
415         const char *alias = m_cacheFile->getCharStar(aliasOffset);
416         const int cmp = qstrcmp(alias, input);
417         if (cmp < 0) {
418             begin = medium + 1;
419         } else if (cmp > 0) {
420             end = medium - 1;
421         } else {
422             const int mimeOffset = m_cacheFile->getUint32(off + 4);
423             const char *mimeType = m_cacheFile->getCharStar(mimeOffset);
424             return QLatin1String(mimeType);
425         }
426     }
427     return QString();
428 }
429 
430 void QMimeBinaryProvider::addAliases(const QString &name, QStringList &result)
431 {
432     const QByteArray input = name.toLatin1();
433     const int aliasListOffset = m_cacheFile->getUint32(PosAliasListOffset);
434     const int numEntries = m_cacheFile->getUint32(aliasListOffset);
435     for (int pos = 0; pos < numEntries; ++pos) {
436         const int off = aliasListOffset + 4 + 8 * pos;
437         const int mimeOffset = m_cacheFile->getUint32(off + 4);
438         const char *mimeType = m_cacheFile->getCharStar(mimeOffset);
439 
440         if (input == mimeType) {
441             const int aliasOffset = m_cacheFile->getUint32(off);
442             const char *alias = m_cacheFile->getCharStar(aliasOffset);
443             const QString strAlias = QString::fromLatin1(alias);
444             if (!result.contains(strAlias))
445                 result.append(strAlias);
446         }
447     }
448 }
449 
450 void QMimeBinaryProvider::loadMimeTypeList()
451 {
452     if (!m_mimetypeListLoaded) {
453         m_mimetypeListLoaded = true;
454         m_mimetypeNames.clear();
455         // Unfortunately mime.cache doesn't have a full list of all mimetypes.
456         // So we have to parse the plain-text files called "types".
457         QFile file(m_directory + QStringLiteral("/types"));
458         if (file.open(QIODevice::ReadOnly)) {
459             QTextStream stream(&file);
460             stream.setCodec("ISO 8859-1");
461             QString line;
462             while (stream.readLineInto(&line))
463                 m_mimetypeNames.insert(line);
464         }
465     }
466 }
467 
468 void QMimeBinaryProvider::addAllMimeTypes(QList<QMimeType> &result)
469 {
470     loadMimeTypeList();
471     if (result.isEmpty()) {
472         result.reserve(m_mimetypeNames.count());
473         for (const QString &name : qAsConst(m_mimetypeNames))
474             result.append(mimeTypeForNameUnchecked(name));
475     } else {
476         for (const QString &name : qAsConst(m_mimetypeNames))
477             if (std::find_if(result.constBegin(), result.constEnd(), [name](const QMimeType &mime) -> bool { return mime.name() == name; })
478                     == result.constEnd())
479                 result.append(mimeTypeForNameUnchecked(name));
480     }
481 }
482 
483 void QMimeBinaryProvider::loadMimeTypePrivate(QMimeTypePrivate &data)
484 {
485 #ifdef QT_NO_XMLSTREAMREADER
486     Q_UNUSED(data);
487     qWarning("Cannot load mime type since QXmlStreamReader is not available.");
488     return;
489 #else
490     if (data.loaded)
491         return;
492     data.loaded = true;
493     // load comment and globPatterns
494 
495     const QString file = data.name + QLatin1String(".xml");
496     // shared-mime-info since 1.3 lowercases the xml files
497     QStringList mimeFiles = QStandardPaths::locateAll(QStandardPaths::GenericDataLocation, QLatin1String("mime/") + file.toLower());
498     if (mimeFiles.isEmpty())
499         mimeFiles = QStandardPaths::locateAll(QStandardPaths::GenericDataLocation, QLatin1String("mime/") + file); // pre-1.3
500     if (mimeFiles.isEmpty()) {
501         qWarning() << "No file found for" << file << ", even though update-mime-info said it would exist.\n"
502                       "Either it was just removed, or the directory doesn't have executable permission..."
503                    << QStandardPaths::locateAll(QStandardPaths::GenericDataLocation, QLatin1String("mime"), QStandardPaths::LocateDirectory);
504         return;
505     }
506 
507     QString mainPattern;
508 
509     for (QStringList::const_reverse_iterator it = mimeFiles.crbegin(), end = mimeFiles.crend(); it != end; ++it) { // global first, then local.
510         QFile qfile(*it);
511         if (!qfile.open(QFile::ReadOnly))
512             continue;
513 
514         QXmlStreamReader xml(&qfile);
515         if (xml.readNextStartElement()) {
516             if (xml.name() != QLatin1String("mime-type")) {
517                 continue;
518             }
519             const QStringRef name = xml.attributes().value(QLatin1String("type"));
520             if (name.isEmpty())
521                 continue;
522             if (name.compare(data.name, Qt::CaseInsensitive))
523                 qWarning() << "Got name" << name << "in file" << file << "expected" << data.name;
524 
525             while (xml.readNextStartElement()) {
526                 const QStringRef tag = xml.name();
527                 if (tag == QLatin1String("comment")) {
528                     QString lang = xml.attributes().value(QLatin1String("xml:lang")).toString();
529                     const QString text = xml.readElementText();
530                     if (lang.isEmpty()) {
531                         lang = QLatin1String("default"); // no locale attribute provided, treat it as default.
532                     }
533                     data.localeComments.insert(lang, text);
534                     continue; // we called readElementText, so we're at the EndElement already.
535                 } else if (tag == QLatin1String("icon")) { // as written out by shared-mime-info >= 0.40
536                     data.iconName = xml.attributes().value(QLatin1String("name")).toString();
537                 } else if (tag == QLatin1String("glob-deleteall")) { // as written out by shared-mime-info >= 0.70
538                     data.globPatterns.clear();
539                 } else if (tag == QLatin1String("glob")) { // as written out by shared-mime-info >= 0.70
540                     const QString pattern = xml.attributes().value(QLatin1String("pattern")).toString();
541                     if (mainPattern.isEmpty() && pattern.startsWith(QLatin1Char('*'))) {
542                         mainPattern = pattern;
543                     }
544                     if (!data.globPatterns.contains(pattern))
545                         data.globPatterns.append(pattern);
546                 }
547                 xml.skipCurrentElement();
548             }
549             Q_ASSERT(xml.name() == QLatin1String("mime-type"));
550         }
551     }
552 
553     // Let's assume that shared-mime-info is at least version 0.70
554     // Otherwise we would need 1) a version check, and 2) code for parsing patterns from the globs file.
555 #if 1
556     if (!mainPattern.isEmpty() && (data.globPatterns.isEmpty() || data.globPatterns.constFirst() != mainPattern)) {
557         // ensure it's first in the list of patterns
558         data.globPatterns.removeAll(mainPattern);
559         data.globPatterns.prepend(mainPattern);
560     }
561 #else
562     const bool globsInXml = sharedMimeInfoVersion() >= QT_VERSION_CHECK(0, 70, 0);
563     if (globsInXml) {
564         if (!mainPattern.isEmpty() && data.globPatterns.constFirst() != mainPattern) {
565             // ensure it's first in the list of patterns
566             data.globPatterns.removeAll(mainPattern);
567             data.globPatterns.prepend(mainPattern);
568         }
569     } else {
570         // Fallback: get the patterns from the globs file
571         // TODO: This would be the only way to support shared-mime-info < 0.70
572         // But is this really worth the effort?
573     }
574 #endif
575 #endif //QT_NO_XMLSTREAMREADER
576 }
577 
578 // Binary search in the icons or generic-icons list
579 QLatin1String QMimeBinaryProvider::iconForMime(CacheFile *cacheFile, int posListOffset, const QByteArray &inputMime)
580 {
581     const int iconsListOffset = cacheFile->getUint32(posListOffset);
582     const int numIcons = cacheFile->getUint32(iconsListOffset);
583     int begin = 0;
584     int end = numIcons - 1;
585     while (begin <= end) {
586         const int medium = (begin + end) / 2;
587         const int off = iconsListOffset + 4 + 8 * medium;
588         const int mimeOffset = cacheFile->getUint32(off);
589         const char *mime = cacheFile->getCharStar(mimeOffset);
590         const int cmp = qstrcmp(mime, inputMime);
591         if (cmp < 0)
592             begin = medium + 1;
593         else if (cmp > 0)
594             end = medium - 1;
595         else {
596             const int iconOffset = cacheFile->getUint32(off + 4);
597             return QLatin1String(cacheFile->getCharStar(iconOffset));
598         }
599     }
600     return QLatin1String();
601 }
602 
603 void QMimeBinaryProvider::loadIcon(QMimeTypePrivate &data)
604 {
605     const QByteArray inputMime = data.name.toLatin1();
606     const QLatin1String icon = iconForMime(m_cacheFile, PosIconsListOffset, inputMime);
607     if (!icon.isEmpty()) {
608         data.iconName = icon;
609     }
610 }
611 
612 void QMimeBinaryProvider::loadGenericIcon(QMimeTypePrivate &data)
613 {
614     const QByteArray inputMime = data.name.toLatin1();
615     const QLatin1String icon = iconForMime(m_cacheFile, PosGenericIconsListOffset, inputMime);
616     if (!icon.isEmpty()) {
617         data.genericIconName = icon;
618     }
619 }
620 
621 ////
622 
623 #if QT_CONFIG(mimetype_database)
624 static QString internalMimeFileName()
625 {
626     return QStringLiteral("<internal MIME data>");
627 }
628 
629 QMimeXMLProvider::QMimeXMLProvider(QMimeDatabasePrivate *db, InternalDatabaseEnum)
630     : QMimeProviderBase(db, internalMimeFileName())
631 {
632     Q_STATIC_ASSERT_X(sizeof(mimetype_database), "Bundled MIME database is empty");
633     Q_STATIC_ASSERT_X(sizeof(mimetype_database) <= MimeTypeDatabaseOriginalSize,
634                       "Compressed MIME database is larger than the original size");
635     Q_STATIC_ASSERT_X(MimeTypeDatabaseOriginalSize <= 16*1024*1024,
636                       "Bundled MIME database is too big");
637     const char *data = reinterpret_cast<const char *>(mimetype_database);
638     qsizetype size = MimeTypeDatabaseOriginalSize;
639 
640 #ifdef MIME_DATABASE_IS_ZSTD
641     // uncompress with libzstd
642     std::unique_ptr<char []> uncompressed(new char[size]);
643     size = ZSTD_decompress(uncompressed.get(), size, mimetype_database, sizeof(mimetype_database));
644     Q_ASSERT(!ZSTD_isError(size));
645     data = uncompressed.get();
646 #elif defined(MIME_DATABASE_IS_GZIP)
647     std::unique_ptr<char []> uncompressed(new char[size]);
648     z_stream zs = {};
649     zs.next_in = mimetype_database;
650     zs.avail_in = sizeof(mimetype_database);
651     zs.next_out = reinterpret_cast<Bytef *>(uncompressed.get());
652     zs.avail_out = size;
653 
654     int res = inflateInit2(&zs, MAX_WBITS | 32);
655     Q_ASSERT(res == Z_OK);
656     res = inflate(&zs, Z_FINISH);
657     Q_ASSERT(res == Z_STREAM_END);
658     res = inflateEnd(&zs);
659     Q_ASSERT(res == Z_OK);
660 
661     data = uncompressed.get();
662     size = zs.total_out;
663 #endif
664 
665     load(data, size);
666 }
667 #else // !QT_CONFIG(mimetype_database)
668 // never called in release mode, but some debug builds may need
669 // this to be defined.
670 QMimeXMLProvider::QMimeXMLProvider(QMimeDatabasePrivate *db, InternalDatabaseEnum)
671     : QMimeProviderBase(db, QString())
672 {
673     Q_UNREACHABLE();
674 }
675 #endif // QT_CONFIG(mimetype_database)
676 
677 QMimeXMLProvider::QMimeXMLProvider(QMimeDatabasePrivate *db, const QString &directory)
678     : QMimeProviderBase(db, directory)
679 {
680     ensureLoaded();
681 }
682 
683 QMimeXMLProvider::~QMimeXMLProvider()
684 {
685 }
686 
687 bool QMimeXMLProvider::isValid()
688 {
689     // If you change this method, adjust the logic in QMimeDatabasePrivate::loadProviders,
690     // which assumes isValid==false is only possible in QMimeBinaryProvider.
691     return true;
692 }
693 
694 QMimeType QMimeXMLProvider::mimeTypeForName(const QString &name)
695 {
696     return m_nameMimeTypeMap.value(name);
697 }
698 
699 void QMimeXMLProvider::addFileNameMatches(const QString &fileName, QMimeGlobMatchResult &result)
700 {
701     m_mimeTypeGlobs.matchingGlobs(fileName, result);
702 }
703 
704 void QMimeXMLProvider::findByMagic(const QByteArray &data, int *accuracyPtr, QMimeType &candidate)
705 {
706     QString candidateName;
707     bool foundOne = false;
708     for (const QMimeMagicRuleMatcher &matcher : qAsConst(m_magicMatchers)) {
709         if (matcher.matches(data)) {
710             const int priority = matcher.priority();
711             if (priority > *accuracyPtr) {
712                 *accuracyPtr = priority;
713                 candidateName = matcher.mimetype();
714                 foundOne = true;
715             }
716         }
717     }
718     if (foundOne)
719         candidate = mimeTypeForName(candidateName);
720 }
721 
722 void QMimeXMLProvider::ensureLoaded()
723 {
724     QStringList allFiles;
725     const QString packageDir = m_directory + QStringLiteral("/packages");
726     QDir dir(packageDir);
727     const QStringList files = dir.entryList(QDir::Files | QDir::NoDotAndDotDot);
728     allFiles.reserve(files.count());
729     for (const QString &xmlFile : files)
730         allFiles.append(packageDir + QLatin1Char('/') + xmlFile);
731 
732     if (m_allFiles == allFiles)
733         return;
734     m_allFiles = allFiles;
735 
736     m_nameMimeTypeMap.clear();
737     m_aliases.clear();
738     m_parents.clear();
739     m_mimeTypeGlobs.clear();
740     m_magicMatchers.clear();
741 
742     //qDebug() << "Loading" << m_allFiles;
743 
744     for (const QString &file : qAsConst(allFiles))
745         load(file);
746 }
747 
748 void QMimeXMLProvider::load(const QString &fileName)
749 {
750     QString errorMessage;
751     if (!load(fileName, &errorMessage))
752         qWarning("QMimeDatabase: Error loading %ls\n%ls", qUtf16Printable(fileName), qUtf16Printable(errorMessage));
753 }
754 
755 bool QMimeXMLProvider::load(const QString &fileName, QString *errorMessage)
756 {
757     QFile file(fileName);
758     if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
759         if (errorMessage)
760             *errorMessage = QLatin1String("Cannot open ") + fileName + QLatin1String(": ") + file.errorString();
761         return false;
762     }
763 
764     if (errorMessage)
765         errorMessage->clear();
766 
767     QMimeTypeParser parser(*this);
768     return parser.parse(&file, fileName, errorMessage);
769 }
770 
771 #if QT_CONFIG(mimetype_database)
772 void QMimeXMLProvider::load(const char *data, qsizetype len)
773 {
774     QBuffer buffer;
775     buffer.setData(QByteArray::fromRawData(data, len));
776     buffer.open(QIODevice::ReadOnly);
777     QString errorMessage;
778     QMimeTypeParser parser(*this);
779     if (!parser.parse(&buffer, internalMimeFileName(), &errorMessage))
780         qWarning("QMimeDatabase: Error loading internal MIME data\n%s", qPrintable(errorMessage));
781 }
782 #endif
783 
784 void QMimeXMLProvider::addGlobPattern(const QMimeGlobPattern &glob)
785 {
786     m_mimeTypeGlobs.addGlob(glob);
787 }
788 
789 void QMimeXMLProvider::addMimeType(const QMimeType &mt)
790 {
791     Q_ASSERT(!mt.d.data()->fromCache);
792     m_nameMimeTypeMap.insert(mt.name(), mt);
793 }
794 
795 void QMimeXMLProvider::addParents(const QString &mime, QStringList &result)
796 {
797     for (const QString &parent : m_parents.value(mime)) {
798         if (!result.contains(parent))
799             result.append(parent);
800     }
801 }
802 
803 void QMimeXMLProvider::addParent(const QString &child, const QString &parent)
804 {
805     m_parents[child].append(parent);
806 }
807 
808 void QMimeXMLProvider::addAliases(const QString &name, QStringList &result)
809 {
810     // Iterate through the whole hash. This method is rarely used.
811     for (auto it = m_aliases.constBegin(), end = m_aliases.constEnd() ; it != end ; ++it) {
812         if (it.value() == name) {
813             if (!result.contains(it.key()))
814                 result.append(it.key());
815         }
816     }
817 
818 }
819 
820 QString QMimeXMLProvider::resolveAlias(const QString &name)
821 {
822     return m_aliases.value(name);
823 }
824 
825 void QMimeXMLProvider::addAlias(const QString &alias, const QString &name)
826 {
827     m_aliases.insert(alias, name);
828 }
829 
830 void QMimeXMLProvider::addAllMimeTypes(QList<QMimeType> &result)
831 {
832     if (result.isEmpty()) { // fast path
833         result = m_nameMimeTypeMap.values();
834     } else {
835         for (auto it = m_nameMimeTypeMap.constBegin(), end = m_nameMimeTypeMap.constEnd() ; it != end ; ++it) {
836             const QString newMime = it.key();
837             if (std::find_if(result.constBegin(), result.constEnd(), [newMime](const QMimeType &mime) -> bool { return mime.name() == newMime; })
838                     == result.constEnd())
839                 result.append(it.value());
840         }
841     }
842 }
843 
844 void QMimeXMLProvider::addMagicMatcher(const QMimeMagicRuleMatcher &matcher)
845 {
846     m_magicMatchers.append(matcher);
847 }
848 
849 QT_END_NAMESPACE
