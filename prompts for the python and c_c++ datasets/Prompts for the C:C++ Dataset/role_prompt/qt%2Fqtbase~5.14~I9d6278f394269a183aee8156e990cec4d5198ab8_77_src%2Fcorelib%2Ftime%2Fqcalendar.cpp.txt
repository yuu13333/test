I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2019 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:GPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU
19 ** General Public License version 3 or (at your option) any later version
20 ** approved by the KDE Free Qt Foundation. The licenses are as published by
21 ** the Free Software Foundation and appearing in the file LICENSE.GPL3
22 ** included in the packaging of this file. Please review the following
23 ** information to ensure the GNU General Public License requirements will
24 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
25 **
26 ** $QT_END_LICENSE$
27 **
28 ****************************************************************************/
29 #include "qcalendar.h"
30 #include "qcalendarbackend_p.h"
31 #include "qgregoriancalendar_p.h"
32 
33 #include "qdatetime.h"
34 #include "qcalendarmath_p.h"
35 #include <qdebug.h>
36 
37 QT_BEGIN_NAMESPACE
38 
39 QMap<QString, QCalendarBackend *> QCalendarBackend::s_calendars;
40 
41 /*!
42     \since 5.14
43 
44     \class QCalendarBackend
45     \inmodule QtCore
46     \reentrant
47     \brief The QCalendarBackend class provides basic calendaring functions.
48 
49     QCalendarBackend provides the base class on which all calendar types are
50     implemented. On construction, the backend is registered with its primary
51     name. It may also be registered with various other names, where the calendar
52     is known by several aliases. Registering with the name used by CLDR (the
53     Unicode consortium's Common Locale Data Repository) is recommended,
54     particularly when interacting with third-party software. The backend is
55     deregistered upon destruction. While a backend is registered for a name,
56     QCalendar can be constructed using that name to select the backend.
57 
58     Each calendar backend must inherit from QCalendarBackend and implement its
59     pure virtual methods. It may also override some other virtual methods, as
60     needed.
61 
62     Most backends are pure code, with no data elements. Such backends should
63     normally be implemented as singletons. For a backend to be added to the
64     QCalendar::System enum, it should be such a singleton, with an instance()
65     method that returns the single instance (and no public constructor).
66 
67     Non-singleton calendar backends should ensure that each instance registers
68     with a distinct primary name. Later instances attempting to register with a
69     name already in use shall fail to register and be unavailable to QCalendar,
70     hence unusable.
71 
72     \sa QDate, QDateTime, QDateEdit, QDateTimeEdit, QCalendarWidget
73 */
74 
75 /*!
76     Constructs the calendar and registers it.
77 */
78 QCalendarBackend::QCalendarBackend(const QString &name) : m_name(name)
79 {
80     registerCalendar(name);
81 }
82 
83 /*!
84     Destroys the calendar.
85 
86     Deregisters it in the process.
87 */
88 QCalendarBackend::~QCalendarBackend()
89 {
90     auto dead =
91         std::remove_if(s_calendars.begin(), s_calendars.end(),
92                        [this] (QCalendarBackend *it) -> bool {
93                            return it == this;
94                        });
95     while (dead != s_calendars.end())
96         dead = s_calendars.erase(dead);
97 }
98 
99 /*!
100   The primary name of this calendar.
101  */
102 const QString &QCalendarBackend::name() const { return m_name; }
103 QStringView QCalendar::name() const { return d ? d->name() : QString(); }
104 
105 // date queries
106 /*!
107    \fn int QCalendarBackend::daysInMonth(int month, int year) const
108 
109    Returns number of days in the month number \a month, in year \a year.
110 
111    An implementation should return 0 if the given year had no such month. If
112    year is QCalendar::Unspecified, return the usual number of days for the
113    month, in those years that include it.
114 
115    Calendars with intercallary days may represent these as extra days of the
116    preceding month, or as short months separate from the usual ones. In the
117    former case, daysInMonth(month, year) should be the number of ordinary days
118    in the month, although \c{isValid(year, month, day)} might return \c true for
119    some larger values of \c day.
120 
121    \sa daysInYear(), monthsInYear(), minDaysInMonth(), maxDaysInMonth()
122 */
123 
124 // properties of the calendar
125 
126 /*!
127     \fn bool QCalendarBackend::isLeapYear(int year) const
128 
129     Returns \c true if the specified \a year is a leap year for this calendar.
130 
131     \sa daysInYear(), isValid()
132 */
133 
134 /*!
135     \fn bool QCalendarBackend::isLunar() const
136 
137     Returns \c true if this calendar is a lunar calendar. Otherwise returns \c
138     false.
139 
140     A lunar calendar is a calendar based upon the monthly cycles of the Moon's
141     phases (synodic months). This contrasts with solar calendars, whose annual
142     cycles are based only upon the solar year.
143 
144     \sa isLuniSolar(), isSolar(), isProleptic()
145 */
146 
147 /*!
148     \fn bool QCalendarBackend::isLuniSolar() const
149 
150     Returns \c true if this calendar is a lunisolar calendar. Otherwise returns
151     \c false.
152 
153     A lunisolar calendar is a calendar whose date indicates both the moon phase
154     and the time of the solar year.
155 
156     \sa isLunar(), isSolar(), isProleptic()
157 */
158 
159 /*!
160     \fn bool QCalendarBackend::isSolar() const
161 
162     Returns \c true if this calendar is a solar calendar. Otherwise returns
163     \c false.
164 
165     A solar calendar is a calendar whose dates indicate the season or almost
166     equivalently the apparent position of the sun relative to the fixed stars.
167     The Gregorian calendar, widely accepted as standard in the world,
168     is an example of solar calendar.
169 
170     \sa isLuniSolar(), isLunar(), isProleptic()
171 */
172 
173 /*!
174     Returns the total number of days in the year number \a year.
175     Returns zero if there is no such year in this calendar.
176 
177     This base implementation returns 366 for leap years and 365 for ordinary
178     years.
179 
180     \sa monthsInYear(), daysInMonth(), isLeapYear()
181 */
182 int QCalendarBackend::daysInYear(int year) const
183 {
184     return monthsInYear(year) ? isLeapYear(year) ? 366 : 365 : 0;
185 }
186 
187 /*!
188     Returns the total number of months in the year number \a year.
189     Returns zero if there is no such year in this calendar.
190 
191     This base implementation returns 12 for any valid year.
192 
193     \sa daysInYear(), maxMonthsInYear(), isValid()
194 */
195 int QCalendarBackend::monthsInYear(int year) const
196 {
197     return year > 0 || (year < 0 ? isProleptic() : hasYearZero()) ? 12 : 0;
198 }
199 
200 /*!
201     Returns \c true if the date specified by \a year, \a month and \a day is
202     valid for this calendar; otherwise returns \c false. For example,
203     the date 2018-04-19 is valid for the Gregorian calendar, but 2018-16-19 and
204     2018-04-38 are invalid.
205 
206     Calendars with intercallary days may represent these as extra days of the
207     preceding month or as short months separate from the usual ones. In the
208     former case, a \a day value greater than \c{daysInMonth(\a{month},
209     \a{year})} may be valid.
210 
211     \sa daysInMonth(), monthsInYear()
212 */
213 bool QCalendarBackend::isValid(int year, int month, int day) const
214 {
215     return day > 0 && day <= daysInMonth(month, year);
216 }
217 
218 /*!
219     Returns \c true if this calendar is a proleptic calendar. Otherwise returns
220     \c false.
221 
222     A proleptic calendar results from allowing negative year numbers to indicate
223     years before the nominal start of the calendar system.
224 
225     \sa isLuniSolar(), isSolar(), isLunar(), hasYearZero()
226 */
227 
228 bool QCalendarBackend::isProleptic() const
229 {
230     return true;
231 }
232 
233 /*!
234     Returns \c true if year number \c 0 is considered a valid year in this
235     calendar. Otherwise returns \c false.
236 
237     \sa isValid(), isProleptic()
238 */
239 
240 bool QCalendarBackend::hasYearZero() const
241 {
242     return false;
243 }
244 
245 /*!
246     Returns the maximum number of days in a month for any year.
247 
248     This base implementation returns 31, as this is a common case.
249 
250     For calendars with intercallary days, although daysInMonth() doesn't include
251     the intercallary days in its count for an individual month, maxDaysInMonth()
252     should include intercallary days, so that it is the maximum value of \c day
253     for which \c{isValid(year, month, day)} can be true.
254 
255     \sa maxMonthsInYear(), daysInMonth()
256 */
257 int QCalendarBackend::maxDaysInMonth() const
258 {
259     return 31;
260 }
261 
262 /*!
263     Returns the minimum number of days in any valid month of any valid year.
264 
265     This base implementation returns 29, as this is a common case.
266 
267     \sa maxMonthsInYear(), daysInMonth()
268 */
269 int QCalendarBackend::minDaysInMonth() const
270 {
271     return 29;
272 }
273 
274 /*!
275     Returns the maximum number of months possible in any year.
276 
277     This base implementation returns 12, as this is a common case.
278 
279     \sa maxDaysInMonth(), monthsInYear()
280 */
281 int QCalendarBackend::maxMonthsInYear() const
282 {
283     return 12;
284 }
285 
286 /*!
287    Returns the day of the week for a given Julian Day Number.
288 
289    This is 1 for Monday through 7 for Sunday.
290 
291    Calendars with intercallary days may return larger values for these
292    intercallary days. They should avoid using 0 for any special purpose (it is
293    already used in QDate::dayOfWeek() to mean an invalid date). The calendar
294    should treat the numbers used as an \c enum, whose values need not be
295    contiguous, nor need they follow closely from the 1 through 7 of the usual
296    returns. It suffices that weekDayName() can recognize each such number as
297    identifying a distinct name, that it returns to identify the particular
298    intercallary day.
299 
300    This base implementation uses the day-numbering that various calendars have
301    borrowed off the Hebrew calendar.
302 
303    \sa weekDayName(), standaloneWeekDayName(), QDate::dayOfWeek()
304  */
305 int QCalendarBackend::dayOfWeek(qint64 jd) const
306 {
307     return QRoundingDown::qMod(jd, 7) + 1;
308 }
309 
310 // Month and week-day name look-ups (implemented in qlocale.cpp):
311 /*!
312   \fn QString QCalendarBackend::monthName(const QLocale &locale, int month, int year,
313                                           QLocale::FormatType format) const
314 
315   Returns the name of the specified \a month in the given \a year for the chosen
316   \a locale, using the given \a format to determine how complete the name is.
317 
318   If \a year is Unspecified, return the name for the month that usually has this
319   number within a typical year. Calendars with a leap month that isn't always
320   the last may need to take account of the year to map the month number to the
321   particular year's month with that number.
322 
323   \note Backends for which CLDR provides data can configure the default
324   implementation of the two month name look-up methods by arranging for
325   localeMonthIndexData() and localeMonthData() to provide access to the CLDR
326   data (see cldr2qlocalexml.py, qlocalexml2cpp.py and existing backends).
327   Conversely, backends that override both month name look-up methods need not
328   return anything meaningful from localeMonthIndexData() or localeMonthData().
329 
330   \sa standaloneMonthName(), QLocale::monthName()
331 */
332 
333 /*!
334   \fn QString QCalendarBackend::standaloneMonthName(const QLocale &locale, int month, int year
335                                                     QLocale::FormatType format) const
336 
337   Returns the standalone name of the specified \a month in the chosen \a locale,
338   using the specified \a format to determine how complete the name is.
339 
340   If \a year is Unspecified, return the standalone name for the month that
341   usually has this number within a typical year. Calendars with a leap month
342   that isn't always the last may need to take account of the year to map the
343   month number to the particular year's month with that number.
344 
345   \sa monthName(), QLocale::standaloneMonthName()
346 */
347 
348 /*!
349   \fn QString QCalendarBackend::weekDayName(const QLocale &locale, int day,
350                                             QLocale::FormatType format) const
351 
352   Returns the name of the specified \a day of the week in the chosen \a locale,
353   using the specified \a format to determine how complete the name is.
354 
355   The base implementation handles \a day values from 1 to 7 using the day names
356   CLDR provides, which are suitable for calendards that use the same
357   (Hebrew-derived) week as the Gregorian calendar.
358 
359   Calendars whose dayOfWeek() returns a value outside the range from 1 to 7 need
360   to reimplement this method to handle such extra week-day values. They can
361   assume that \a day is a value returned by the same calendar's dayOfWeek().
362 
363   \sa dayOfWeek(), standaloneWeekDayName(), QLocale::dayName()
364 */
365 
366 /*!
367   \fn QString QCalendarBackend::standaloneWeekDayName(const QLocale &locale, int day,
368                                                       QLocale::FormatType format) const
369 
370   Returns the standalone name of the specified \a day of the week in the chosen
371   \a locale, using the specified \a format to determine how complete the name
372   is.
373 
374   The base implementation handles \a day values from 1 to 7 using the standalone
375   day names CLDR provides, which are suitable for calendards that use the same
376   (Hebrew-derived) week as the Gregorian calendar.
377 
378   Calendars whose dayOfWeek() returns a value outside the range from 1 to 7 need
379   to reimplement this method to handle such extra week-day values. They can
380   assume that \a day is a value returned by the same calendar's dayOfWeek().
381 
382   \sa dayOfWeek(), weekDayName(), QLocale::standaloneDayName()
383 */
384 
385 /*!
386   \fn QString QCalendarBackend::dateTimeToString(QStringView format, const QDateTime &datetime,
387                                                  const QDate &dateOnly, const QTime &timeOnly,
388                                                  const QLocale &locale) const
389 
390   Returns a string representing a given date, time or date-time.
391 
392   If \a datetime is specified and valid, it is used and both date and time
393   format tokens are converted to appropriate representations of the parts of the
394   datetime. Otherwise, if \a dateOnly is valid, only date format tokens are
395   converted; else, if \a timeOnly is valid, only time format tokens are
396   converted. If none are valid, an empty string is returned.
397 
398   The specified \a locale influences how some format tokens are converted; for
399   example, when substituting day and month names and their short-forms. For the
400   supported formatting tokens, see QDate::toString() and QTime::toString(). As
401   described above, the provided date, time and date-time determine which of
402   these tokens are recognized: where these appear in \a format they are replaced
403   by data. Any text in \a format not recognized as a format token is copied
404   verbatim into the result string.
405 
406   \sa QDate::toString(), QTime::toString(), QDateTime::toString()
407 */
408 // End of methods implemented in qlocale.cpp
409 
410 // Registry
411 
412 /*!
413     Ensures each enum-available calendar has been instantiated.
414 
415     This arranges for each to register itself by name; it only does anything on
416     its first call, which ensures that name-based lookups can always find all
417     the calendars available via the enum.
418 */
419 void QCalendarBackend::scanEnum()
420 {
421     static bool todo = true;
422     if (todo) {
423 #define SYSTEM_INSTANCE(name, ignored) QCalendar name ## Inst(QCalendar::System::name);
424         FOREACH_CALENDAR(SYSTEM_INSTANCE)
425 #undef SYSTEM_INSTANCE
426 
427         todo = false;
428     }
429 }
430 
431 /*!
432     Returns a list of names of the available calendar systems. Any
433     QCalendarBackend sub-class must be registered before being exposed to Date
434     and Time APIs.
435 
436     \sa registerCalendar(), fromName()
437 */
438 QStringList QCalendarBackend::availableCalendars()
439 {
440     scanEnum();
441     return s_calendars.keys();
442 }
443 
444 /*!
445     Registers a name for this calendar backend. Once a backend is registered,
446     its name will be included in the list of available calendars and the
447     calendar can be instantiated by name.
448 
449     Returns \c false if the given \a name is already in use, otherwise it
450     registers this calendar backend and returns \c true.
451 
452     \sa availableCalendars(), fromName()
453 */
454 bool QCalendarBackend::registerCalendar(const QString &name)
455 {
456     Q_ASSERT(!name.isEmpty());
457     if (s_calendars.contains(name)) {
458         qDebug() << "Calendar name" << name << "is already taken";
459         return false;
460     }
461 
462     s_calendars.insert(name, this);
463     return true;
464 }
465 
466 /*!
467   Returns a pointer to a named calendar backend.
468 
469   If the given \a name is present in availableCalendars(), the backend matching
470   it is returned; otherwise, \c nullptr is returned. Matching of names ignores
471   case. Note that this won't provoke construction of a calendar backend, it will
472   only return ones that have been instantiated (and not yet destroyed) by some
473   other means. However, calendars available via the QCalendar::System enum are
474   always registered when this is called.
475 
476   \sa availableCalendars(), registerCalendar(), fromEnum()
477 */
478 const QCalendarBackend *QCalendarBackend::fromName(QStringView name)
479 {
480     scanEnum();
481     for (auto it = s_calendars.constBegin(), end = s_calendars.constEnd(); it != end; it++) {
482         if (name.compare(it.key(), Qt::CaseInsensitive) == 0)
483             return it.value();
484     }
485     return nullptr;
486 }
487 
488 /*!
489   \overload
490  */
491 const QCalendarBackend *QCalendarBackend::fromName(QLatin1String name)
492 {
493     scanEnum();
494     for (auto it = s_calendars.constBegin(), end = s_calendars.constEnd(); it != end; it++) {
495         if (it.key().compare(name, Qt::CaseInsensitive) == 0)
496             return it.value();
497     }
498     return nullptr;
499 }
500 
501 /*!
502   Returns a pointer to a calendar backend, specified by enum.
503 
504   This will instantiate the indicated calendar (which will enable fromName() to
505   return it subsequently), but only for the Qt-supported calendars for which
506   (where relevant) the appropriate feature has been enabled.
507 */
508 const QCalendarBackend *QCalendarBackend::fromEnum(QCalendar::System system)
509 {
510     switch (system) {
511 #define INSTANCECASE(name, ignored) \
512     case QCalendar::System::name: \
513         return Q ## name ## Calendar::instance();
514     FOREACH_CALENDAR(INSTANCECASE)
515 #undef INSTANCECASE
516     case QCalendar::System::Last:
517         Q_UNREACHABLE();
518         break;
519     }
520     return nullptr;
521 }
522 
523 /*!
524   \since 5.14
525 
526   \class QCalendar
527   \inmodule QtCore
528   \reentrant
529   \brief The QCalendar class describes calendar systems.
530 
531   A QCalendar object maps a year, month and day-number to a specific day
532   (ultimately identified by its Julian day number), using the rules of a
533   particular system.
534 
535   The default QCalendar() is a proleptic Gregorian calendar, which has no year
536   zero. Other calendars may be supported by enabling suitable features or
537   loading plugins. Calendars supported as features can be constructed by passing
538   the QCalendar::System enumeration to the constructor. All supported calendars
539   may be constructed by name, once they have been constructed. (Thus plugins
540   instantiate their calendar backend to register it.) Built-in backends,
541   accessible via QCalendar::System, are also always available by name.
542 
543   A QCalendar value is immutable.
544 
545   \sa QCalendarBackend, QDate, QDateTime
546 */
547 
548 /*!
549     \enum QCalendar::System
550 
551     This enumerated type is used to specify a choice of calendar system.
552 
553     \value Gregorian The default calendar, used internationally.
554 
555     \sa QCalendar
556 */
557 
558 /*!
559   \fn QCalendar::QCalendar(QCalendar::System system)
560   \fn QCalendar::QCalendar(QLatin1String name)
561   \fn QCalendar::QCalendar(QStringView name)
562 
563   Constructs a calendar object.
564 
565   The choice of calendar to use may be indicated as \a system, using the
566   enumeration QCalendar::System, or by \a name, using a string (either Unicode
567   or Latin 1). Construction by name may depend on an instance of the given
568   calendar being constructed by other means first.
569 
570   \sa QCalendar, System
571 */
572 
573 QCalendar::QCalendar(QCalendar::System system)
574     : d(QCalendarBackend::fromEnum(system)) {}
575 
576 QCalendar::QCalendar(QLatin1String name)
577     : d(QCalendarBackend::fromName(name)) {}
578 
579 QCalendar::QCalendar(QStringView name)
580     : d(QCalendarBackend::fromName(name)) {}
581 
582 // Date queries:
583 
584 /*!
585   Returns the number of days in the given \a month of the given \a year.
586 
587   Months are numbered consecutively, starting with 1 for the first month of each
588   year.
589 
590   \sa maxDaysInMonth(), minDaysInMonth()
591 */
592 int QCalendar::daysInMonth(int month, int year) const
593 {
594     return d ? d->daysInMonth(month, year) : 0;
595 }
596 
597 /*!
598   Returns the number of days in the given \a year.
599 */
600 int QCalendar::daysInYear(int year) const
601 {
602     return d ? d->daysInYear(year) : 0;
603 }
604 
605 /*!
606   Returns the number of months in the given \a year.
607 */
608 int QCalendar::monthsInYear(int year) const
609 {
610     return d ? d->monthsInYear(year) : 0;
611 }
612 
613 /*!
614   Returns \c true precisely if the given \a year, \a month and \a day specify a
615   valid date in this calendar.
616 
617   Usually this means 1 <= month <= monthsInYear(year) and 1 <= day <=
618   daysInMonth(month, year). However, calendars with intercallary days or months
619   may complicate that.
620 */
621 bool QCalendar::isValid(int year, int month, int day) const
622 {
623     return d && d->isValid(year, month, day);
624 }
625 
626 // properties of the calendar
627 
628 /*!
629     Returns \c true if this calendar object is the default calendar system used
630     by Qt, e.g. in QDate; that is, it only returns true for the Gregorian
631     calendar.
632 */
633 bool QCalendar::isSystemCalendar() const
634 {
635     return d == QGregorianCalendar::instance();
636 }
637 
638 /*!
639   Returns \c true if the given year is a leap year.
640 
641   Since the year is not a whole number of days long, some years are longer than
642   others. The difference may be a whole month or just a single day; the details
643   vary between calendars.
644 
645   \sa isValid()
646 */
647 bool QCalendar::isLeapYear(int year) const
648 {
649     return d && d->isLeapYear(year);
650 }
651 
652 /*!
653   Returns \c true if this calendar is a lunar calendar.
654 
655   A lunar calendar is one based primarily on the phases of the moon.
656 */
657 bool QCalendar::isLunar() const
658 {
659     return d && d->isLunar();
660 }
661 
662 /*!
663   Returns \c true if this calendar is luni-solar.
664 
665   A luni-solar calendar expresses the phases of the moon but adapts itself to
666   also keep track of the Sun's varying position in the sky, relative to the
667   fixed stars.
668 */
669 bool QCalendar::isLuniSolar() const
670 {
671     return d && d->isLuniSolar();
672 }
673 
674 /*!
675   Returns \c true if this calendar is solar.
676 
677   A solar calendar is based primaril on the Sun's varying position in the sky,
678   relative to the fixed stars.
679 */
680 bool QCalendar::isSolar() const
681 {
682     return d && d->isSolar();
683 }
684 
685 /*!
686   Returns \c true if this calendar is proleptic.
687 
688   A proleptic calendar is able to describe years arbitrarily long before its
689   first. These are represented by negative year numbers and possibly by a year
690   zero.
691 
692   \sa hasYearZero()
693 */
694 bool QCalendar::isProleptic() const
695 {
696     return d && d->isProleptic();
697 }
698 
699 /*!
700   Returns \c true if this calendar has a year zero.
701 
702   A non-proleptic calendar with no year zero represents years from its first
703   year onwards but provides no way to describe years before its first; such a
704   calendar has no year zero and is not proleptic.
705 
706   A calendar which represents years before its first may number these years
707   simply by following the usual integer counting, so that the year before the
708   first is year zero, with negative-numbered years preceding this; such a
709   calendar is proleptic and has a year zero. A calendar might also have a year
710   zero (for example, the year of some great event, with subsequent years being
711   the first year after that event, the second year after, and so on) without
712   describing years before its year zero. Such a calendar would have a year zero
713   without being proleptic.
714 
715   Some calendars, however, represent years before their first by an alternate
716   numbering; for example, the proleptic Gregorian calendar's first year is 1 CE
717   and the year before it is 1 BCE, preceded by 2 BCE and so on. In this case,
718   we use negative year numbers, with year -1 as the year before year 1, year -2
719   as the year before year -1 and so on. Such a calendar is proleptic but has no
720   year zero.
721 
722   \sa isProleptic()
723 */
724 bool QCalendar::hasYearZero() const
725 {
726     return d && d->hasYearZero();
727 }
728 
729 /*!
730   Returns the number of days in the longest month in the calendar, in any year.
731 
732   \sa daysInMonth(), minDaysInMonth()
733 */
734 int QCalendar::maxDaysInMonth() const
735 {
736     return d ? d->maxDaysInMonth() : 0;
737 }
738 
739 /*!
740   Returns the number of days in the shortest month in the calendar, in any year.
741 
742   \sa daysInMonth(), maxDaysInMonth()
743 */
744 int QCalendar::minDaysInMonth() const
745 {
746     return d ? d->minDaysInMonth() : 0;
747 }
748 
749 /*!
750   Returns the largest number of months that any year may contain.
751 
752   \sa monthName(), standaloneMonthName(), monthsInYear()
753 */
754 int QCalendar::maxMonthsInYear() const
755 {
756     return d ?  d->maxMonthsInYear() : 0;
757 }
758 
759 // Julian Day conversions:
760 
761 /*!
762   Converts a year, month and day to a QDate.
763 
764   Returns a QDate with the given \a year, \a month and \a day of the month in
765   this calendar, if there is one. Otherwise, returns a QDate whose isNull() is
766   true.
767 
768   \sa isValid(), partsFromDate()
769 */
770 QDate QCalendar::dateFromParts(int year, int month, int day) const
771 {
772     qint64 jd;
773     return d && d->dateToJulianDay(year, month, day, jd)
774         ? QDate::fromJulianDay(jd) : QDate();
775 }
776 
777 /*!
778   Converts a QDate to a year, month and day of the month.
779 
780   Returns true if the calendar is able to represent the given \a date. If so, it
781   sets \a year, \a month and \a day to the so-named parts of its representation.
782 
783   \sa dateFromParts(), isProleptic(), hasYearZero()
784 */
785 bool QCalendar::partsFromDate(QDate date, int &year, int &month, int &day) const
786 {
787     return d && d->julianDayToDate(date.toJulianDay(), year, month, day);
788 }
789 
790 /*!
791   Returns the day of the week number for the given \a date.
792 
793   Returns zero if the calendar is unable to represent the indicated date.
794   Returns 1 for Monday through 7 for Sunday. Calendars with intercallary days
795   may use other numbers to represent these.
796 
797   \sa partsFromDate(), Qt::DayOfWeek
798 */
799 int QCalendar::dayOfWeek(QDate date) const
800 {
801     return d ? d->dayOfWeek(date.toJulianDay()) : 0;
802 }
803 
804 // Locale data access
805 
806 /*!
807   Returns a suitably localised name for a month.
808 
809   The month is indicated by a number, with \a month = 1 meaning the first month
810   of the year and subsequent months numbered accordingly. Returns an empty
811   string if the \a month number is unrecognized.
812 
813   The \a year may be Unspecified, in which case the mapping from numbers to
814   names for a typical year's months should be used. Some calendars have leap
815   months that aren't always at the end of the year; their mapping of month
816   numbers to names may then depend on the placement of a leap month. Thus the
817   year should normally be specified, if known.
818 
819   The name is returned in the form that would normally be used in a full date,
820   in the specified \a locale; the \a format determines how fully it shall be
821   expressed (i.e. to what extent it is abbreviated).
822 
823   \sa standaloneMonthName(), maxMonthsInYear(), dateTimeString()
824 */
825 QString QCalendar::monthName(const QLocale &locale, int month, int year,
826                              QLocale::FormatType format) const
827 {
828     return d ? d->monthName(locale, month, year, format) : QString();
829 }
830 
831 /*!
832   Returns a suitably localised standalone name for a month.
833 
834   The month is indicated by a number, with \a month = 1 meaning the first month
835   of the year and subsequent months numbered accordingly. Returns an empty
836   string if the \a month number is unrecognized.
837 
838   The \a year may be Unspecified, in which case the mapping from numbers to
839   names for a typical year's months should be used. Some calendars have leap
840   months that aren't always at the end of the year; their mapping of month
841   numbers to names may then depend on the placement of a leap month. Thus the
842   year should normally be specified, if known.
843 
844   The name is returned in the form that would be used in isolation in the
845   specified \a locale; the \a format determines how fully it shall be expressed
846   (i.e. to what extent it is abbreviated).
847 
848   \sa monthName(), maxMonthsInYear(), dateTimeString()
849 */
850 QString QCalendar::standaloneMonthName(const QLocale &locale, int month, int year,
851                                        QLocale::FormatType format) const
852 {
853     return d ? d->standaloneMonthName(locale, month, year, format) : QString();
854 }
855 
856 /*!
857   Returns a suitably localised name for a day of the week.
858 
859   The days of the week are numbered from 1 for Monday through 7 for Sunday. Some
860   calendars may support higher numbers for other days (e.g. intercallary days,
861   that are not part of any week). Returns an empty string if the \a day number
862   is unrecognized.
863 
864   The name is returned in the form that would normally be used in a full date,
865   in the specified \a locale; the \a format determines how fully it shall be
866   expressed (i.e. to what extent it is abbreviated).
867 
868   \sa standaloneWeekDayName(), dayOfWeek()
869 */
870 QString QCalendar::weekDayName(const QLocale &locale, int day,
871                                QLocale::FormatType format) const
872 {
873     return d ? d->weekDayName(locale, day, format) : QString();
874 }
875 
876 /*!
877   Returns a suitably localised standalone name for a day of the week.
878 
879   The days of the week are numbered from 1 for Monday through 7 for Sunday. Some
880   calendars may support higher numbers for other days (e.g. intercallary days,
881   that are not part of any week). Returns an empty string if the \a day number
882   is unrecognized.
883 
884   The name is returned in the form that would be used in isolation (for example
885   as a column heading in a calendar's tabular display of a month with successive
886   weeks as rows) in the specified \a locale; the \a format determines how fully
887   it shall be expressed (i.e. to what extent it is abbreviated).
888 
889   \sa weekDayName(), dayOfWeek()
890 */
891 QString QCalendar::standaloneWeekDayName(const QLocale &locale, int day,
892                                          QLocale::FormatType format) const
893 {
894     return d ? d->standaloneWeekDayName(locale, day, format) : QString();
895 }
896 
897 /*!
898   Returns a string representing a given date, time or date-time.
899 
900   If \a datetime is valid, it is represented and format specifiers for both date
901   and time fields are recognized; otherwise, if \a dateOnly is valid, it is
902   represented and only format specifiers for date fields are recognized;
903   finally, if \a timeOnly is valid, it is represented and only format specifiers
904   for time fields are recognized. If none of these is valid, an empty string is
905   returned.
906 
907   See QDate::toString and QTime::toString() for the supported field specifiers.
908   Characters in \a format that are recognized as field specifiers are replaced
909   by text representing appropriate data from the date and/or time being
910   represented. The texts to represent them may depend on the \a locale
911   specified. Other charagers in \a format are copied verbatim into the returned
912   string.
913 
914   \sa monthName(), weekDayName(), QDate::toString(), QTime::toString()
915 */
916 QString QCalendar::dateTimeToString(QStringView format, const QDateTime &datetime,
917                                     const QDate &dateOnly, const QTime &timeOnly,
918                                     const QLocale &locale) const
919 {
920     return d ? d->dateTimeToString(format, datetime, dateOnly, timeOnly, locale) : QString();
921 }
922 
923 /*!
924     Returns a list of names of the available calendar systems.
925 
926     These may be supplied by plugins or other code linked into an application,
927     in addition to the ones provided by Qt, some of which are controlled by
928     features.
929 */
930 QStringList QCalendar::availableCalendars()
931 {
932     return QCalendarBackend::availableCalendars();
933 }
934 
935 QT_END_NAMESPACE
