I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2020 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:GPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU
19 ** General Public License version 3 or (at your option) any later version
20 ** approved by the KDE Free Qt Foundation. The licenses are as published by
21 ** the Free Software Foundation and appearing in the file LICENSE.GPL3
22 ** included in the packaging of this file. Please review the following
23 ** information to ensure the GNU General Public License requirements will
24 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
25 **
26 ** $QT_END_LICENSE$
27 **
28 ****************************************************************************/
29 #include "qcalendar.h"
30 #include "qcalendarbackend_p.h"
31 #include "qgregoriancalendar_p.h"
32 #ifndef QT_BOOTSTRAPPED
33 #include "qjuliancalendar_p.h"
34 #include "qmilankoviccalendar_p.h"
35 #endif
36 #if QT_CONFIG(jalalicalendar)
37 #include "qjalalicalendar_p.h"
38 #endif
39 #if QT_CONFIG(islamiccivilcalendar)
40 #include "qislamiccivilcalendar_p.h"
41 #endif
42 
43 #include "qdatetime.h"
44 #include "qcalendarmath_p.h"
45 #include <qhash.h>
46 #include <qdebug.h>
47 
48 #include <unordered_map>
49 
50 QT_BEGIN_NAMESPACE
51 
52 namespace {
53 
54 struct CalendarName : public QString
55 {
56     CalendarName(const QString &name) : QString(name) {}
57 };
58 
59 inline bool operator==(const CalendarName &u, const CalendarName &v)
60 {
61     return u.compare(v, Qt::CaseInsensitive) == 0;
62 }
63 
64 inline size_t qHash(const CalendarName &key, size_t seed = 0) noexcept
65 {
66     return qHash(key.toLower(), seed);
67 }
68 
69 struct Registry {
70     std::vector<QCalendarBackend *> byId;
71     QHash<CalendarName, QCalendarBackend *> byName;
72     QCalendarBackend *gregorianCalendar = nullptr;
73     bool populated = false;
74 
75     Registry()
76     {
77         byId.resize(int(QCalendar::System::Last) + 1);
78     }
79 
80     ~Registry()
81     {
82         qDeleteAll(byId);
83     }
84 
85     bool registerName(QCalendarBackend *calendar, const QString &name)
86     {
87         if (byName.find(name) != byName.end()) {
88             qWarning() << "Calendar name" << name
89                        << "is already taken, new calendar will not be registered.";
90             return false;
91         }
92         byName.insert(name, calendar);
93         return true;
94     }
95     void addCalendar(QCalendarBackend *calendar, const QString &name, QCalendar::System id)
96     {
97         if (!registerName(calendar, name)) {
98             delete calendar;
99             return;
100         }
101         Q_ASSERT(byId.size() >= size_t(id));
102         if (id == QCalendar::System::User) {
103             byId.push_back(calendar);
104         } else {
105             Q_ASSERT(byId[size_t(id)] == nullptr);
106             byId[size_t(id)] = calendar;
107         }
108         if (id == QCalendar::System::Gregorian) {
109             Q_ASSERT(!gregorianCalendar);
110             gregorianCalendar = calendar;
111         }
112     }
113     /*
114         \internal
115         Ensures each enum-available calendar has been instantiated.
116 
117         This arranges for each to register itself by name; it only does anything on
118         its first call, which ensures that name-based lookups can always find all
119         the calendars available via the enum.
120     */
121     void populate()
122     {
123         if (populated)
124             return;
125 
126         for (int i = 0; i <= int(QCalendar::System::Last); ++i)
127             (void)QCalendar(QCalendar::System(i));
128 
129         populated = true;
130     }
131 };
132 
133 }
134 
135 Q_GLOBAL_STATIC(Registry, calendarRegistry);
136 
137 
138 /*!
139     \since 5.14
140 
141     \class QCalendarBackend
142     \inmodule QtCore
143     \internal
144     \reentrant
145     \brief The QCalendarBackend class provides basic calendaring functions.
146 
147     QCalendarBackend provides the base class on which all calendar types are
148     implemented. On construction, the backend is registered with its primary
149     name.
150 
151     A backend may also be registered with aliases, where the calendar is known
152     by several names. Registering with the name used by CLDR (the Unicode
153     consortium's Common Locale Data Repository) is recommended, particularly
154     when interacting with third-party software. Once a backend is registered for
155     a name, QCalendar can be constructed using that name to select the backend.
156 
157     Each calendar backend must inherit from QCalendarBackend and implement its
158     pure virtual methods. It may also override some other virtual methods, as
159     needed.
160 
161     Most backends are pure code, with no data elements. Such backends should
162     normally be implemented as singletons. For a backend to be added to the
163     QCalendar::System enum, it should be such a singleton, with a case in
164     QCalendar::fromEnum()'s switch statement to instantiate it.
165 
166     Non-singleton calendar backends should ensure that each instance is created
167     with a distinct primary name. Later instances attempting to register with a
168     name already in use shall fail to register and be unavailable to QCalendar,
169     hence unusable.
170 
171     \sa registerAlias(), QDate, QDateTime, QDateEdit, QDateTimeEdit, QCalendarWidget
172 */
173 
174 /*!
175     Constructs the calendar and registers it under \a name using \a id.
176 */
177 QCalendarBackend::QCalendarBackend(const QString &name, QCalendar::System id)
178 {
179     calendarRegistry->addCalendar(this, name, id);
180 }
181 
182 /*!
183     Destroys the calendar.
184 
185     Never call this from user code. Each calendar backend, once instantiated,
186     shall exist for the lifetime of the program. Its destruction is taken care
187     of by destruction of the registry of calendar backends and their names.
188 */
189 QCalendarBackend::~QCalendarBackend()
190 {
191 }
192 
193 /*!
194     The calendar system of this calendar.
195 
196     Each calendar backend constructible from the QCalendar::System enum should
197     return the member of that enum that produces it. Other calendars should
198     return User.
199 
200     \sa QCalendarBackend::fromEnum()
201 */
202 QCalendar::System QCalendarBackend::calendarSystem() const
203 {
204     return QCalendar::System::User;
205 }
206 
207 /*!
208     The primary name of this calendar.
209  */
210 QString QCalendar::name() const
211 {
212     return d ? d->name() : QString();
213 }
214 
215 // date queries
216 /*!
217    \fn int QCalendarBackend::daysInMonth(int month, int year) const
218 
219    Returns number of days in the month number \a month, in year \a year.
220 
221    An implementation should return 0 if the given year had no such month. If
222    year is QCalendar::Unspecified, return the usual number of days for the
223    month, in those years that include it.
224 
225    Calendars with intercallary days may represent these as extra days of the
226    preceding month, or as short months separate from the usual ones. In the
227    former case, daysInMonth(month, year) should be the number of ordinary days
228    in the month, although \c{isDateValid(year, month, day)} might return \c true
229    for some larger values of \c day.
230 
231    \sa daysInYear(), monthsInYear(), minimumDaysInMonth(), maximumDaysInMonth()
232 */
233 
234 // properties of the calendar
235 
236 /*!
237     \fn bool QCalendarBackend::isLeapYear(int year) const
238 
239     Returns \c true if the specified \a year is a leap year for this calendar.
240 
241     \sa daysInYear(), isDateValid()
242 */
243 
244 /*!
245     \fn bool QCalendarBackend::isLunar() const
246 
247     Returns \c true if this calendar is a lunar calendar. Otherwise returns \c
248     false.
249 
250     A lunar calendar is a calendar based upon the monthly cycles of the Moon's
251     phases (synodic months). This contrasts with solar calendars, whose annual
252     cycles are based only upon the solar year.
253 
254     \sa isLuniSolar(), isSolar(), isProleptic()
255 */
256 
257 /*!
258     \fn bool QCalendarBackend::isLuniSolar() const
259 
260     Returns \c true if this calendar is a lunisolar calendar. Otherwise returns
261     \c false.
262 
263     A lunisolar calendar is a calendar whose date indicates both the moon phase
264     and the time of the solar year.
265 
266     \sa isLunar(), isSolar(), isProleptic()
267 */
268 
269 /*!
270     \fn bool QCalendarBackend::isSolar() const
271 
272     Returns \c true if this calendar is a solar calendar. Otherwise returns
273     \c false.
274 
275     A solar calendar is a calendar whose dates indicate the season or almost
276     equivalently the apparent position of the sun relative to the fixed stars.
277     The Gregorian calendar, widely accepted as standard in the world,
278     is an example of solar calendar.
279 
280     \sa isLuniSolar(), isLunar(), isProleptic()
281 */
282 
283 /*!
284     Returns the total number of days in the year number \a year.
285     Returns zero if there is no such year in this calendar.
286 
287     This base implementation returns 366 for leap years and 365 for ordinary
288     years.
289 
290     \sa monthsInYear(), daysInMonth(), isLeapYear()
291 */
292 int QCalendarBackend::daysInYear(int year) const
293 {
294     return monthsInYear(year) ? isLeapYear(year) ? 366 : 365 : 0;
295 }
296 
297 /*!
298     Returns the total number of months in the year number \a year.
299     Returns zero if there is no such year in this calendar.
300 
301     This base implementation returns 12 for any valid year.
302 
303     \sa daysInYear(), maximumMonthsInYear(), isDateValid()
304 */
305 int QCalendarBackend::monthsInYear(int year) const
306 {
307     return year > 0 || (year < 0 ? isProleptic() : hasYearZero()) ? 12 : 0;
308 }
309 
310 /*!
311     Returns \c true if the date specified by \a year, \a month, and \a day is
312     valid for this calendar; otherwise returns \c false. For example,
313     the date 2018-04-19 is valid for the Gregorian calendar, but 2018-16-19 and
314     2018-04-38 are invalid.
315 
316     Calendars with intercallary days may represent these as extra days of the
317     preceding month or as short months separate from the usual ones. In the
318     former case, a \a day value greater than \c{daysInMonth(\a{month},
319     \a{year})} may be valid.
320 
321     \sa daysInMonth(), monthsInYear()
322 */
323 bool QCalendarBackend::isDateValid(int year, int month, int day) const
324 {
325     return day > 0 && day <= daysInMonth(month, year);
326 }
327 
328 /*!
329     Returns \c true if this calendar is a proleptic calendar. Otherwise returns
330     \c false.
331 
332     A proleptic calendar results from allowing negative year numbers to indicate
333     years before the nominal start of the calendar system.
334 
335     \sa isLuniSolar(), isSolar(), isLunar(), hasYearZero()
336 */
337 
338 bool QCalendarBackend::isProleptic() const
339 {
340     return true;
341 }
342 
343 /*!
344     Returns \c true if year number \c 0 is considered a valid year in this
345     calendar. Otherwise returns \c false.
346 
347     \sa isDateValid(), isProleptic()
348 */
349 
350 bool QCalendarBackend::hasYearZero() const
351 {
352     return false;
353 }
354 
355 /*!
356     Returns the maximum number of days in a month for any year.
357 
358     This base implementation returns 31, as this is a common case.
359 
360     For calendars with intercallary days, although daysInMonth() doesn't include
361     the intercallary days in its count for an individual month,
362     maximumDaysInMonth() should include intercallary days, so that it is the
363     maximum value of \c day for which \c{isDateValid(year, month, day)} can be
364     true.
365 
366     \sa maximumMonthsInYear(), daysInMonth()
367 */
368 int QCalendarBackend::maximumDaysInMonth() const
369 {
370     return 31;
371 }
372 
373 /*!
374     Returns the minimum number of days in any valid month of any valid year.
375 
376     This base implementation returns 29, as this is a common case.
377 
378     \sa maximumMonthsInYear(), daysInMonth()
379 */
380 int QCalendarBackend::minimumDaysInMonth() const
381 {
382     return 29;
383 }
384 
385 /*!
386     Returns the maximum number of months possible in any year.
387 
388     This base implementation returns 12, as this is a common case.
389 
390     \sa maximumDaysInMonth(), monthsInYear()
391 */
392 int QCalendarBackend::maximumMonthsInYear() const
393 {
394     return 12;
395 }
396 
397 // Julian day number calculations
398 
399 /*!
400     \fn bool QCalendarBackend::dateToJulianDay(int year, int month, int day, qint64 *jd) const
401 
402     Computes the Julian day number corresponding to the specified \a year, \a
403     month, and \a day. Returns true and sets \a jd if there is such a date in
404     this calendar; otherwise, returns false.
405 
406     \sa QCalendar::partsFromDate(), julianDayToDate()
407 */
408 
409 /*!
410     \fn QCalendar::YearMonthDay QCalendarBackend::julianDayToDate(qint64 jd) const
411 
412     Computes the year, month, and day in this calendar for the given Julian day
413     number \a jd. If the given day falls outside this calendar's scope
414     (e.g. before the start-date of a non-proleptic calendar), the returned
415     structure's isValid() is false; otherwise, its year, month, and day fields
416     provide this calendar's description of the date.
417 
418     \sa QCalendar::dateFromParts(), dateToJulianDay()
419 */
420 
421 /*!
422    Returns the day of the week for the given Julian Day Number \a jd.
423 
424    This is 1 for Monday through 7 for Sunday.
425 
426    Calendars with intercallary days may return larger values for these
427    intercallary days. They should avoid using 0 for any special purpose (it is
428    already used in QDate::dayOfWeek() to mean an invalid date). The calendar
429    should treat the numbers used as an \c enum, whose values need not be
430    contiguous, nor need they follow closely from the 1 through 7 of the usual
431    returns. It suffices that weekDayName() can recognize each such number as
432    identifying a distinct name, that it returns to identify the particular
433    intercallary day.
434 
435    This base implementation uses the day-numbering that various calendars have
436    borrowed off the Hebrew calendar.
437 
438    \sa weekDayName(), standaloneWeekDayName(), QDate::dayOfWeek()
439  */
440 int QCalendarBackend::dayOfWeek(qint64 jd) const
441 {
442     return QRoundingDown::qMod(jd, 7) + 1;
443 }
444 
445 // Month and week-day name look-ups (implemented in qlocale.cpp):
446 /*!
447     \fn QString QCalendarBackend::monthName(const QLocale &locale, int month, int year,
448                                             QLocale::FormatType format) const
449 
450     Returns the name of the specified \a month in the given \a year for the
451     chosen \a locale, using the given \a format to determine how complete the
452     name is.
453 
454     If \a year is Unspecified, return the name for the month that usually has
455     this number within a typical year. Calendars with a leap month that isn't
456     always the last may need to take account of the year to map the month number
457     to the particular year's month with that number.
458 
459     \note Backends for which CLDR provides data can configure the default
460     implementation of the two month name look-up methods by arranging for
461     localeMonthIndexData() and localeMonthData() to provide access to the CLDR
462     data (see cldr2qlocalexml.py, qlocalexml2cpp.py and existing backends).
463     Conversely, backends that override both month name look-up methods need not
464     return anything meaningful from localeMonthIndexData() or localeMonthData().
465 
466     \sa standaloneMonthName(), QLocale::monthName()
467 */
468 
469 /*!
470     \fn QString QCalendarBackend::standaloneMonthName(const QLocale &locale, int month, int year
471                                                       QLocale::FormatType format) const
472 
473     Returns the standalone name of the specified \a month in the chosen \a
474     locale, using the specified \a format to determine how complete the name is.
475 
476     If \a year is Unspecified, return the standalone name for the month that
477     usually has this number within a typical year. Calendars with a leap month
478     that isn't always the last may need to take account of the year to map the
479     month number to the particular year's month with that number.
480 
481     \sa monthName(), QLocale::standaloneMonthName()
482 */
483 
484 /*!
485     \fn QString QCalendarBackend::weekDayName(const QLocale &locale, int day,
486                                               QLocale::FormatType format) const
487 
488     Returns the name of the specified \a day of the week in the chosen \a
489     locale, using the specified \a format to determine how complete the name is.
490 
491     The base implementation handles \a day values from 1 to 7 using the day
492     names CLDR provides, which are suitable for calendards that use the same
493     (Hebrew-derived) week as the Gregorian calendar.
494 
495     Calendars whose dayOfWeek() returns a value outside the range from 1 to 7
496     need to reimplement this method to handle such extra week-day values. They
497     can assume that \a day is a value returned by the same calendar's
498     dayOfWeek().
499 
500     \sa dayOfWeek(), standaloneWeekDayName(), QLocale::dayName()
501 */
502 
503 /*!
504     \fn QString QCalendarBackend::standaloneWeekDayName(const QLocale &locale, int day,
505                                                         QLocale::FormatType format) const
506 
507     Returns the standalone name of the specified \a day of the week in the
508     chosen \a locale, using the specified \a format to determine how complete
509     the name is.
510 
511     The base implementation handles \a day values from 1 to 7 using the
512     standalone day names CLDR provides, which are suitable for calendards that
513     use the same (Hebrew-derived) week as the Gregorian calendar.
514 
515     Calendars whose dayOfWeek() returns a value outside the range from 1 to 7
516     need to reimplement this method to handle such extra week-day values. They
517     can assume that \a day is a value returned by the same calendar's
518     dayOfWeek().
519 
520     \sa dayOfWeek(), weekDayName(), QLocale::standaloneDayName()
521 */
522 
523 /*!
524     \fn QString QCalendarBackend::dateTimeToString(QStringView format, const QDateTime &datetime,
525                                                    QDate dateOnly, QTime timeOnly,
526                                                    const QLocale &locale) const
527 
528     Returns a string representing a given date, time or date-time.
529 
530     If \a datetime is specified and valid, it is used and both date and time
531     format tokens are converted to appropriate representations of the parts of
532     the datetime. Otherwise, if \a dateOnly is valid, only date format tokens
533     are converted; else, if \a timeOnly is valid, only time format tokens are
534     converted. If none are valid, an empty string is returned.
535 
536     The specified \a locale influences how some format tokens are converted; for
537     example, when substituting day and month names and their short-forms. For
538     the supported formatting tokens, see QDate::toString() and
539     QTime::toString(). As described above, the provided date, time and date-time
540     determine which of these tokens are recognized: where these appear in \a
541     format they are replaced by data. Any text in \a format not recognized as a
542     format token is copied verbatim into the result string.
543 
544     \sa QDate::toString(), QTime::toString(), QDateTime::toString()
545 */
546 // End of methods implemented in qlocale.cpp
547 
548 /*!
549     Returns a list of names of the available calendar systems. Any
550     QCalendarBackend sub-class must be registered before being exposed to Date
551     and Time APIs.
552 
553     \sa registerAlias(), fromName()
554 */
555 QStringList QCalendarBackend::availableCalendars()
556 {
557     if (calendarRegistry.isDestroyed())
558         return {};
559     calendarRegistry->populate();
560     return QStringList(calendarRegistry->byName.keyBegin(), calendarRegistry->byName.keyEnd());
561 }
562 
563 /*!
564     Registers an alias for this calendar backend. Once a backend is registered,
565     its name will be included in the list of available calendars and the
566     calendar can be instantiated by name.
567 
568     Returns \c false if the given \a name is already in use, otherwise it
569     registers this calendar backend and returns \c true.
570 
571     \sa availableCalendars(), fromName()
572 */
573 bool QCalendarBackend::registerAlias(const QString &name)
574 {
575     if (calendarRegistry.isDestroyed())
576         return false;
577     return calendarRegistry->registerName(this, name);
578 }
579 
580 /*!
581     Returns a pointer to a named calendar backend.
582 
583     If the given \a name is present in availableCalendars(), the backend
584     matching it is returned; otherwise, \c nullptr is returned. Matching of
585     names ignores case. Note that this won't provoke construction of a calendar
586     backend, it will only return ones that have been instantiated (and not yet
587     destroyed) by some other means. However, calendars available via the
588     QCalendar::System enum are always registered when this is called.
589 
590     \sa availableCalendars(), registerAlias(), fromEnum()
591 */
592 const QCalendarBackend *QCalendarBackend::fromName(QStringView name)
593 {
594     if (calendarRegistry.isDestroyed())
595         return nullptr;
596     calendarRegistry->populate();
597     auto it = calendarRegistry->byName.find(name.toString());
598     return it == calendarRegistry->byName.end() ? nullptr : *it;
599 }
600 
601 /*!
602     \overload
603  */
604 const QCalendarBackend *QCalendarBackend::fromName(QLatin1String name)
605 {
606     if (calendarRegistry.isDestroyed())
607         return nullptr;
608     calendarRegistry->populate();
609     auto it = calendarRegistry->byName.find(QString(name));
610     return it == calendarRegistry->byName.end() ? nullptr : *it;
611 }
612 
613 /*!
614     Returns a pointer to a calendar backend, specified by enum.
615 
616     This will instantiate the indicated calendar (which will enable fromName()
617     to return it subsequently), but only for the Qt-supported calendars for
618     which (where relevant) the appropriate feature has been enabled.
619 */
620 const QCalendarBackend *QCalendarBackend::fromEnum(QCalendar::System system)
621 {
622     if (calendarRegistry.isDestroyed() || system == QCalendar::System::User)
623         return nullptr;
624     Q_ASSERT(calendarRegistry->byId.size() >= size_t(system));
625     if (auto *c = calendarRegistry->byId[size_t(system)])
626         return c;
627     switch (system) {
628     case QCalendar::System::Gregorian:
629         return new QGregorianCalendar;
630 #ifndef QT_BOOTSTRAPPED
631     case QCalendar::System::Julian:
632         return new QJulianCalendar;
633     case QCalendar::System::Milankovic:
634         return new QMilankovicCalendar;
635 #endif
636 #if QT_CONFIG(jalalicalendar)
637     case QCalendar::System::Jalali:
638         return new QJalaliCalendar;
639 #endif
640 #if QT_CONFIG(islamiccivilcalendar)
641     case QCalendar::System::IslamicCivil:
642         return new QIslamicCivilCalendar;
643 #else // When highest-numbered system isn't enabled, ensure we have a case for Last:
644     case QCalendar::System::Last:
645 #endif
646     case QCalendar::System::User:
647         Q_UNREACHABLE();
648     }
649     return nullptr;
650 }
651 
652 /*!
653     \since 5.14
654 
655     \class QCalendar
656     \inmodule QtCore
657     \reentrant
658     \brief The QCalendar class describes calendar systems.
659 
660     A QCalendar object maps a year, month, and day-number to a specific day
661     (ultimately identified by its Julian day number), using the rules of a
662     particular system.
663 
664     The default QCalendar() is a proleptic Gregorian calendar, which has no year
665     zero. Other calendars may be supported by enabling suitable features or
666     loading plugins. Calendars supported as features can be constructed by
667     passing the QCalendar::System enumeration to the constructor. All supported
668     calendars may be constructed by name, once they have been constructed. (Thus
669     plugins instantiate their calendar backend to register it.) Built-in
670     backends, accessible via QCalendar::System, are also always available by
671     name.
672 
673     A QCalendar value is immutable.
674 
675     \sa QDate, QDateTime
676 */
677 
678 /*!
679     \enum QCalendar::System
680 
681     This enumerated type is used to specify a choice of calendar system.
682 
683     \value Gregorian The default calendar, used internationally.
684     \value Julian An ancient Roman calendar with too few leap years.
685     \value Milankovic A revised Julian calendar used by some Orthodox churches.
686     \value Jalali The Solar Hijri calendar (also called Persian).
687     \value IslamicCivil The (tabular) Islamic Civil calendar.
688     \omitvalue Last
689     \omitvalue User
690 
691     \sa QCalendar
692 */
693 
694 /*!
695     \fn QCalendar::QCalendar()
696     \fn QCalendar::QCalendar(QCalendar::System system)
697     \fn QCalendar::QCalendar(QLatin1String name)
698     \fn QCalendar::QCalendar(QStringView name)
699 
700     Constructs a calendar object.
701 
702     The choice of calendar to use may be indicated as \a system, using the
703     enumeration QCalendar::System, or by \a name, using a string (either Unicode
704     or Latin 1). Construction by name may depend on an instance of the given
705     calendar being constructed by other means first. With no argument, the
706     default constructor returns the Gregorian calendar.
707 
708     \sa QCalendar, System, isValid()
709 */
710 
711 QCalendar::QCalendar()
712     : d(nullptr)
713 {
714     if (calendarRegistry.isDestroyed())
715         return;
716     d = calendarRegistry->gregorianCalendar;
717     if (!d)
718         d = new QGregorianCalendar;
719 }
720 
721 QCalendar::QCalendar(QCalendar::System system)
722     : d(QCalendarBackend::fromEnum(system)) {}
723 
724 QCalendar::QCalendar(QLatin1String name)
725     : d(QCalendarBackend::fromName(name)) {}
726 
727 QCalendar::QCalendar(QStringView name)
728     : d(QCalendarBackend::fromName(name)) {}
729 
730 /*!
731     \fn bool QCalendar::isValid() const
732 
733     Returns true if this is a valid calendar object.
734 
735     Constructing a calendar with an unrecognised calendar name may result in an
736     invalid object. Use this method to check after creating a calendar by name.
737 */
738 
739 // Date queries:
740 
741 /*!
742     Returns the number of days in the given \a month of the given \a year.
743 
744     Months are numbered consecutively, starting with 1 for the first month of
745     each year. If \a year is \c Unspecified (its default, if not passed), the
746     month's length in a normal year is returned.
747 
748     \sa maximumDaysInMonth(), minimumDaysInMonth()
749 */
750 int QCalendar::daysInMonth(int month, int year) const
751 {
752     return d ? d->daysInMonth(month, year) : 0;
753 }
754 
755 /*!
756     Returns the number of days in the given \a year.
757 
758     Handling of \c Unspecified as \a year is undefined.
759 */
760 int QCalendar::daysInYear(int year) const
761 {
762     return d ? d->daysInYear(year) : 0;
763 }
764 
765 /*!
766     Returns the number of months in the given \a year.
767 
768     If \a year is \c Unspecified, returns the maximum number of months in a
769     year.
770 
771     \sa maximumMonthsInYear()
772 */
773 int QCalendar::monthsInYear(int year) const
774 {
775     return d ? year == Unspecified ? d->maximumMonthsInYear() : d->monthsInYear(year) : 0;
776 }
777 
778 /*!
779     Returns \c true precisely if the given \a year, \a month, and \a day specify
780     a valid date in this calendar.
781 
782     Usually this means 1 <= month <= monthsInYear(year) and 1 <= day <=
783     daysInMonth(month, year). However, calendars with intercallary days or
784     months may complicate that.
785 */
786 bool QCalendar::isDateValid(int year, int month, int day) const
787 {
788     return d && d->isDateValid(year, month, day);
789 }
790 
791 // properties of the calendar
792 
793 /*!
794     Returns \c true if this calendar object is the Gregorian calendar object
795     used as default calendar by other Qt APIs, e.g. in QDate.
796 */
797 bool QCalendar::isGregorian() const
798 {
799     Q_ASSERT(!calendarRegistry.isDestroyed());
800     return d == calendarRegistry->gregorianCalendar;
801 }
802 
803 /*!
804     Returns \c true if the given \a year is a leap year.
805 
806     Since the year is not a whole number of days long, some years are longer
807     than others. The difference may be a whole month or just a single day; the
808     details vary between calendars.
809 
810     \sa isDateValid()
811 */
812 bool QCalendar::isLeapYear(int year) const
813 {
814     return d && d->isLeapYear(year);
815 }
816 
817 /*!
818     Returns \c true if this calendar is a lunar calendar.
819 
820     A lunar calendar is one based primarily on the phases of the moon.
821 */
822 bool QCalendar::isLunar() const
823 {
824     return d && d->isLunar();
825 }
826 
827 /*!
828     Returns \c true if this calendar is luni-solar.
829 
830     A luni-solar calendar expresses the phases of the moon but adapts itself to
831     also keep track of the Sun's varying position in the sky, relative to the
832     fixed stars.
833 */
834 bool QCalendar::isLuniSolar() const
835 {
836     return d && d->isLuniSolar();
837 }
838 
839 /*!
840     Returns \c true if this calendar is solar.
841 
842     A solar calendar is based primarily on the Sun's varying position in the
843     sky, relative to the fixed stars.
844 */
845 bool QCalendar::isSolar() const
846 {
847     return d && d->isSolar();
848 }
849 
850 /*!
851     Returns \c true if this calendar is proleptic.
852 
853     A proleptic calendar is able to describe years arbitrarily long before its
854     first. These are represented by negative year numbers and possibly by a year
855     zero.
856 
857     \sa hasYearZero()
858 */
859 bool QCalendar::isProleptic() const
860 {
861     return d && d->isProleptic();
862 }
863 
864 /*!
865     Returns \c true if this calendar has a year zero.
866 
867     A calendar may represent years from its first year onwards but provide no
868     way to describe years before its first; such a calendar has no year zero and
869     is not proleptic.
870 
871     A calendar which represents years before its first may number these years
872     simply by following the usual integer counting, so that the year before the
873     first is year zero, with negative-numbered years preceding this; such a
874     calendar is proleptic and has a year zero. A calendar might also have a year
875     zero (for example, the year of some great event, with subsequent years being
876     the first year after that event, the second year after, and so on) without
877     describing years before its year zero. Such a calendar would have a year
878     zero without being proleptic.
879 
880     Some calendars, however, represent years before their first by an alternate
881     numbering; for example, the proleptic Gregorian calendar's first year is 1
882     CE and the year before it is 1 BCE, preceded by 2 BCE and so on. In this
883     case, we use negative year numbers for this alternate numbering, with year
884     -1 as the year before year 1, year -2 as the year before year -1 and so
885     on. Such a calendar is proleptic but has no year zero.
886 
887     \sa isProleptic()
888 */
889 bool QCalendar::hasYearZero() const
890 {
891     return d && d->hasYearZero();
892 }
893 
894 /*!
895     Returns the number of days in the longest month in the calendar, in any year.
896 
897     \sa daysInMonth(), minimumDaysInMonth()
898 */
899 int QCalendar::maximumDaysInMonth() const
900 {
901     return d ? d->maximumDaysInMonth() : 0;
902 }
903 
904 /*!
905     Returns the number of days in the shortest month in the calendar, in any year.
906 
907     \sa daysInMonth(), maximumDaysInMonth()
908 */
909 int QCalendar::minimumDaysInMonth() const
910 {
911     return d ? d->minimumDaysInMonth() : 0;
912 }
913 
914 /*!
915     Returns the largest number of months that any year may contain.
916 
917     \sa monthName(), standaloneMonthName(), monthsInYear()
918 */
919 int QCalendar::maximumMonthsInYear() const
920 {
921     return d ? d->maximumMonthsInYear() : 0;
922 }
923 
924 // Julian Day conversions:
925 
926 /*!
927     \fn QDate QCalendar::dateFromParts(int year, int month, int day) const
928     \fn QDate QCalendar::dateFromParts(const QCalendar::YearMonthDay &parts) const
929 
930     Converts a year, month, and day to a QDate.
931 
932     The \a year, \a month, and \a day may be passed as separate numbers or
933     packaged together as the members of \a parts. Returns a QDate with the given
934     year, month, and day of the month in this calendar, if there is one.
935     Otherwise, including the case where any of the values is
936     QCalendar::Unspecified, returns a QDate whose isNull() is true.
937 
938     \sa isDateValid(), partsFromDate()
939 */
940 QDate QCalendar::dateFromParts(int year, int month, int day) const
941 {
942     qint64 jd;
943     return d && d->dateToJulianDay(year, month, day, &jd)
944         ? QDate::fromJulianDay(jd) : QDate();
945 }
946 
947 QDate QCalendar::dateFromParts(const QCalendar::YearMonthDay &parts) const
948 {
949     return parts.isValid() ? dateFromParts(parts.year, parts.month, parts.day) : QDate();
950 }
951 
952 /*!
953     Converts a QDate to a year, month, and day of the month.
954 
955     The returned structure's isValid() shall be false if the calendar is unable
956     to represent the given \a date. Otherwise its year, month, and day
957     members record the so-named parts of its representation.
958 
959     \sa dateFromParts(), isProleptic(), hasYearZero()
960 */
961 QCalendar::YearMonthDay QCalendar::partsFromDate(QDate date) const
962 {
963     return d ? d->julianDayToDate(date.toJulianDay()) : YearMonthDay();
964 }
965 
966 /*!
967     Returns the day of the week number for the given \a date.
968 
969     Returns zero if the calendar is unable to represent the indicated date.
970     Returns 1 for Monday through 7 for Sunday. Calendars with intercallary days
971     may use other numbers to represent these.
972 
973     \sa partsFromDate(), Qt::DayOfWeek
974 */
975 int QCalendar::dayOfWeek(QDate date) const
976 {
977     return d ? d->dayOfWeek(date.toJulianDay()) : 0;
978 }
979 
980 // Locale data access
981 
982 /*!
983     Returns a suitably localised name for a month.
984 
985     The month is indicated by a number, with \a month = 1 meaning the first
986     month of the year and subsequent months numbered accordingly. Returns an
987     empty string if the \a month number is unrecognized.
988 
989     The \a year may be Unspecified, in which case the mapping from numbers to
990     names for a typical year's months should be used. Some calendars have leap
991     months that aren't always at the end of the year; their mapping of month
992     numbers to names may then depend on the placement of a leap month. Thus the
993     year should normally be specified, if known.
994 
995     The name is returned in the form that would normally be used in a full date,
996     in the specified \a locale; the \a format determines how fully it shall be
997     expressed (i.e. to what extent it is abbreviated).
998 
999     \sa standaloneMonthName(), maximumMonthsInYear(), dateTimeToString()
1000 */
1001 QString QCalendar::monthName(const QLocale &locale, int month, int year,
1002                              QLocale::FormatType format) const
1003 {
1004     const int maxMonth = year == Unspecified ? maximumMonthsInYear() : monthsInYear(year);
1005     if (!d || month < 1 || month > maxMonth)
1006         return QString();
1007 
1008     return d->monthName(locale, month, year, format);
1009 }
1010 
1011 /*!
1012     Returns a suitably localised standalone name for a month.
1013 
1014     The month is indicated by a number, with \a month = 1 meaning the first
1015     month of the year and subsequent months numbered accordingly. Returns an
1016     empty string if the \a month number is unrecognized.
1017 
1018     The \a year may be Unspecified, in which case the mapping from numbers to
1019     names for a typical year's months should be used. Some calendars have leap
1020     months that aren't always at the end of the year; their mapping of month
1021     numbers to names may then depend on the placement of a leap month. Thus the
1022     year should normally be specified, if known.
1023 
1024     The name is returned in the form that would be used in isolation in the
1025     specified \a locale; the \a format determines how fully it shall be
1026     expressed (i.e. to what extent it is abbreviated).
1027 
1028     \sa monthName(), maximumMonthsInYear(), dateTimeToString()
1029 */
1030 QString QCalendar::standaloneMonthName(const QLocale &locale, int month, int year,
1031                                        QLocale::FormatType format) const
1032 {
1033     const int maxMonth = year == Unspecified ? maximumMonthsInYear() : monthsInYear(year);
1034     if (!d || month < 1 || month > maxMonth)
1035         return QString();
1036 
1037     return d->standaloneMonthName(locale, month, year, format);
1038 }
1039 
1040 /*!
1041     Returns a suitably localised name for a day of the week.
1042 
1043     The days of the week are numbered from 1 for Monday through 7 for
1044     Sunday. Some calendars may support higher numbers for other days
1045     (e.g. intercallary days, that are not part of any week). Returns an empty
1046     string if the \a day number is unrecognized.
1047 
1048     The name is returned in the form that would normally be used in a full date,
1049     in the specified \a locale; the \a format determines how fully it shall be
1050     expressed (i.e. to what extent it is abbreviated).
1051 
1052     \sa standaloneWeekDayName(), dayOfWeek()
1053 */
1054 QString QCalendar::weekDayName(const QLocale &locale, int day,
1055                                QLocale::FormatType format) const
1056 {
1057     return d ? d->weekDayName(locale, day, format) : QString();
1058 }
1059 
1060 /*!
1061     Returns a suitably localised standalone name for a day of the week.
1062 
1063     The days of the week are numbered from 1 for Monday through 7 for
1064     Sunday. Some calendars may support higher numbers for other days
1065     (e.g. intercallary days, that are not part of any week). Returns an empty
1066     string if the \a day number is unrecognized.
1067 
1068     The name is returned in the form that would be used in isolation (for
1069     example as a column heading in a calendar's tabular display of a month with
1070     successive weeks as rows) in the specified \a locale; the \a format
1071     determines how fully it shall be expressed (i.e. to what extent it is
1072     abbreviated).
1073 
1074     \sa weekDayName(), dayOfWeek()
1075 */
1076 QString QCalendar::standaloneWeekDayName(const QLocale &locale, int day,
1077                                          QLocale::FormatType format) const
1078 {
1079     return d ? d->standaloneWeekDayName(locale, day, format) : QString();
1080 }
1081 
1082 /*!
1083     Returns a string representing a given date, time or date-time.
1084 
1085     If \a datetime is valid, it is represented and format specifiers for both
1086     date and time fields are recognized; otherwise, if \a dateOnly is valid, it
1087     is represented and only format specifiers for date fields are recognized;
1088     finally, if \a timeOnly is valid, it is represented and only format
1089     specifiers for time fields are recognized. If none of these is valid, an
1090     empty string is returned.
1091 
1092     See QDate::toString and QTime::toString() for the supported field
1093     specifiers.  Characters in \a format that are recognized as field specifiers
1094     are replaced by text representing appropriate data from the date and/or time
1095     being represented. The texts to represent them may depend on the \a locale
1096     specified. Other charagers in \a format are copied verbatim into the
1097     returned string.
1098 
1099     \sa monthName(), weekDayName(), QDate::toString(), QTime::toString()
1100 */
1101 QString QCalendar::dateTimeToString(QStringView format, const QDateTime &datetime,
1102                                     QDate dateOnly, QTime timeOnly,
1103                                     const QLocale &locale) const
1104 {
1105     return d ? d->dateTimeToString(format, datetime, dateOnly, timeOnly, locale) : QString();
1106 }
1107 
1108 /*!
1109     Returns a list of names of the available calendar systems.
1110 
1111     These may be supplied by plugins or other code linked into an application,
1112     in addition to the ones provided by Qt, some of which are controlled by
1113     features.
1114 */
1115 QStringList QCalendar::availableCalendars()
1116 {
1117     return QCalendarBackend::availableCalendars();
1118 }
1119 
1120 QT_END_NAMESPACE
