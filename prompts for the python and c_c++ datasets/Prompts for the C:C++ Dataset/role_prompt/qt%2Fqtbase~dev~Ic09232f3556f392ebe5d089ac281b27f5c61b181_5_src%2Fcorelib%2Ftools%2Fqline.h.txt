I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2020 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #ifndef QLINE_H
41 #define QLINE_H
42 
43 #include "qmath.h"
44 
45 #include <QtCore/qpoint.h>
46 
47 QT_BEGIN_NAMESPACE
48 
49 
50 /*******************************************************************************
51  * class QLine
52  *******************************************************************************/
53 
54 class Q_CORE_EXPORT QLine
55 {
56 public:
57     constexpr inline QLine();
58     constexpr inline QLine(const QPoint &pt1, const QPoint &pt2);
59     constexpr inline QLine(int x1, int y1, int x2, int y2);
60 
61     constexpr inline bool isNull() const;
62 
63     constexpr inline QPoint p1() const;
64     constexpr inline QPoint p2() const;
65 
66     constexpr inline int x1() const;
67     constexpr inline int y1() const;
68 
69     constexpr inline int x2() const;
70     constexpr inline int y2() const;
71 
72     constexpr inline int dx() const;
73     constexpr inline int dy() const;
74 
75     inline void translate(const QPoint &p);
76     inline void translate(int dx, int dy);
77 
78     Q_REQUIRED_RESULT constexpr inline QLine translated(const QPoint &p) const;
79     Q_REQUIRED_RESULT constexpr inline QLine translated(int dx, int dy) const;
80 
81     Q_REQUIRED_RESULT constexpr inline QPoint center() const;
82 
83     inline void setP1(const QPoint &p1);
84     inline void setP2(const QPoint &p2);
85     inline void setPoints(const QPoint &p1, const QPoint &p2);
86     inline void setLine(int x1, int y1, int x2, int y2);
87 
88     constexpr inline bool operator==(const QLine &d) const;
89     constexpr inline bool operator!=(const QLine &d) const { return !(*this == d); }
90 
91 private:
92     QPoint pt1, pt2;
93 };
94 Q_DECLARE_TYPEINFO(QLine, Q_MOVABLE_TYPE);
95 
96 /*******************************************************************************
97  * class QLine inline members
98  *******************************************************************************/
99 
100 constexpr inline QLine::QLine() { }
101 
102 constexpr inline QLine::QLine(const QPoint &pt1_, const QPoint &pt2_) : pt1(pt1_), pt2(pt2_) { }
103 
104 constexpr inline QLine::QLine(int x1pos, int y1pos, int x2pos, int y2pos) : pt1(QPoint(x1pos, y1pos)), pt2(QPoint(x2pos, y2pos)) { }
105 
106 constexpr inline bool QLine::isNull() const
107 {
108     return pt1 == pt2;
109 }
110 
111 constexpr inline int QLine::x1() const
112 {
113     return pt1.x();
114 }
115 
116 constexpr inline int QLine::y1() const
117 {
118     return pt1.y();
119 }
120 
121 constexpr inline int QLine::x2() const
122 {
123     return pt2.x();
124 }
125 
126 constexpr inline int QLine::y2() const
127 {
128     return pt2.y();
129 }
130 
131 constexpr inline QPoint QLine::p1() const
132 {
133     return pt1;
134 }
135 
136 constexpr inline QPoint QLine::p2() const
137 {
138     return pt2;
139 }
140 
141 constexpr inline int QLine::dx() const
142 {
143     return pt2.x() - pt1.x();
144 }
145 
146 constexpr inline int QLine::dy() const
147 {
148     return pt2.y() - pt1.y();
149 }
150 
151 inline void QLine::translate(const QPoint &point)
152 {
153     pt1 += point;
154     pt2 += point;
155 }
156 
157 inline void QLine::translate(int adx, int ady)
158 {
159     this->translate(QPoint(adx, ady));
160 }
161 
162 constexpr inline QLine QLine::translated(const QPoint &p) const
163 {
164     return QLine(pt1 + p, pt2 + p);
165 }
166 
167 constexpr inline QLine QLine::translated(int adx, int ady) const
168 {
169     return translated(QPoint(adx, ady));
170 }
171 
172 constexpr inline QPoint QLine::center() const
173 {
174     return QPoint(int((qint64(pt1.x()) + pt2.x()) / 2), int((qint64(pt1.y()) + pt2.y()) / 2));
175 }
176 
177 inline void QLine::setP1(const QPoint &aP1)
178 {
179     pt1 = aP1;
180 }
181 
182 inline void QLine::setP2(const QPoint &aP2)
183 {
184     pt2 = aP2;
185 }
186 
187 inline void QLine::setPoints(const QPoint &aP1, const QPoint &aP2)
188 {
189     pt1 = aP1;
190     pt2 = aP2;
191 }
192 
193 inline void QLine::setLine(int aX1, int aY1, int aX2, int aY2)
194 {
195     pt1 = QPoint(aX1, aY1);
196     pt2 = QPoint(aX2, aY2);
197 }
198 
199 constexpr inline bool QLine::operator==(const QLine &d) const
200 {
201     return pt1 == d.pt1 && pt2 == d.pt2;
202 }
203 
204 #ifndef QT_NO_DEBUG_STREAM
205 Q_CORE_EXPORT QDebug operator<<(QDebug d, const QLine &p);
206 #endif
207 
208 #ifndef QT_NO_DATASTREAM
209 Q_CORE_EXPORT QDataStream &operator<<(QDataStream &, const QLine &);
210 Q_CORE_EXPORT QDataStream &operator>>(QDataStream &, QLine &);
211 #endif
212 
213 /*******************************************************************************
214  * class QLineF
215  *******************************************************************************/
216 class Q_CORE_EXPORT QLineF {
217 public:
218 
219     enum IntersectType { NoIntersection, BoundedIntersection, UnboundedIntersection };
220     using IntersectionType = IntersectType;
221 
222     constexpr inline QLineF();
223     constexpr inline QLineF(const QPointF &pt1, const QPointF &pt2);
224     constexpr inline QLineF(qreal x1, qreal y1, qreal x2, qreal y2);
225     constexpr inline QLineF(const QLine &line) : pt1(line.p1()), pt2(line.p2()) { }
226 
227     Q_REQUIRED_RESULT static QLineF fromPolar(qreal length, qreal angle);
228 
229     constexpr bool isNull() const;
230 
231     constexpr inline QPointF p1() const;
232     constexpr inline QPointF p2() const;
233 
234     constexpr inline qreal x1() const;
235     constexpr inline qreal y1() const;
236 
237     constexpr inline qreal x2() const;
238     constexpr inline qreal y2() const;
239 
240     constexpr inline qreal dx() const;
241     constexpr inline qreal dy() const;
242 
243     qreal length() const;
244     void setLength(qreal len);
245 
246     qreal angle() const;
247     void setAngle(qreal angle);
248 
249     qreal angleTo(const QLineF &l) const;
250 
251     Q_REQUIRED_RESULT QLineF unitVector() const;
252     Q_REQUIRED_RESULT constexpr inline QLineF normalVector() const;
253 
254     IntersectionType intersects(const QLineF &l, QPointF *intersectionPoint = nullptr) const;
255 
256     constexpr inline QPointF pointAt(qreal t) const;
257     inline void translate(const QPointF &p);
258     inline void translate(qreal dx, qreal dy);
259 
260     Q_REQUIRED_RESULT constexpr inline QLineF translated(const QPointF &p) const;
261     Q_REQUIRED_RESULT constexpr inline QLineF translated(qreal dx, qreal dy) const;
262 
263     Q_REQUIRED_RESULT constexpr inline QPointF center() const;
264 
265     inline void setP1(const QPointF &p1);
266     inline void setP2(const QPointF &p2);
267     inline void setPoints(const QPointF &p1, const QPointF &p2);
268     inline void setLine(qreal x1, qreal y1, qreal x2, qreal y2);
269 
270     constexpr inline bool operator==(const QLineF &d) const;
271     constexpr inline bool operator!=(const QLineF &d) const { return !(*this == d); }
272 
273     constexpr QLine toLine() const;
274 
275 private:
276     QPointF pt1, pt2;
277 };
278 Q_DECLARE_TYPEINFO(QLineF, Q_MOVABLE_TYPE);
279 
280 /*******************************************************************************
281  * class QLineF inline members
282  *******************************************************************************/
283 
284 constexpr inline QLineF::QLineF()
285 {
286 }
287 
288 constexpr inline QLineF::QLineF(const QPointF &apt1, const QPointF &apt2)
289     : pt1(apt1), pt2(apt2)
290 {
291 }
292 
293 constexpr inline QLineF::QLineF(qreal x1pos, qreal y1pos, qreal x2pos, qreal y2pos)
294     : pt1(x1pos, y1pos), pt2(x2pos, y2pos)
295 {
296 }
297 
298 constexpr inline qreal QLineF::x1() const
299 {
300     return pt1.x();
301 }
302 
303 constexpr inline qreal QLineF::y1() const
304 {
305     return pt1.y();
306 }
307 
308 constexpr inline qreal QLineF::x2() const
309 {
310     return pt2.x();
311 }
312 
313 constexpr inline qreal QLineF::y2() const
314 {
315     return pt2.y();
316 }
317 
318 constexpr inline bool QLineF::isNull() const
319 {
320     return qFuzzyCompare(pt1.x(), pt2.x()) && qFuzzyCompare(pt1.y(), pt2.y());
321 }
322 
323 constexpr inline QPointF QLineF::p1() const
324 {
325     return pt1;
326 }
327 
328 constexpr inline QPointF QLineF::p2() const
329 {
330     return pt2;
331 }
332 
333 constexpr inline qreal QLineF::dx() const
334 {
335     return pt2.x() - pt1.x();
336 }
337 
338 constexpr inline qreal QLineF::dy() const
339 {
340     return pt2.y() - pt1.y();
341 }
342 
343 constexpr inline QLineF QLineF::normalVector() const
344 {
345     return QLineF(p1(), p1() + QPointF(dy(), -dx()));
346 }
347 
348 inline void QLineF::translate(const QPointF &point)
349 {
350     pt1 += point;
351     pt2 += point;
352 }
353 
354 inline void QLineF::translate(qreal adx, qreal ady)
355 {
356     this->translate(QPointF(adx, ady));
357 }
358 
359 constexpr inline QLineF QLineF::translated(const QPointF &p) const
360 {
361     return QLineF(pt1 + p, pt2 + p);
362 }
363 
364 constexpr inline QLineF QLineF::translated(qreal adx, qreal ady) const
365 {
366     return translated(QPointF(adx, ady));
367 }
368 
369 constexpr inline QPointF QLineF::center() const
370 {
371     return QPointF(0.5 * pt1.x() + 0.5 * pt2.x(), 0.5 * pt1.y() + 0.5 * pt2.y());
372 }
373 
374 QT_WARNING_PUSH
375 QT_WARNING_DISABLE_FLOAT_COMPARE
376 
377 inline void QLineF::setLength(qreal len)
378 {
379     const qreal oldlength = length();
380     if (!oldlength)
381         return;
382     const qreal factor = len / oldlength;
383     pt2 = QPointF(pt1.x() + dx() * factor, pt1.y() + dy() * factor);
384 }
385 
386 QT_WARNING_POP
387 
388 constexpr inline QPointF QLineF::pointAt(qreal t) const
389 {
390     return QPointF(pt1.x() + (pt2.x() - pt1.x()) * t, pt1.y() + (pt2.y() - pt1.y()) * t);
391 }
392 
393 constexpr inline QLine QLineF::toLine() const
394 {
395     return QLine(pt1.toPoint(), pt2.toPoint());
396 }
397 
398 
399 inline void QLineF::setP1(const QPointF &aP1)
400 {
401     pt1 = aP1;
402 }
403 
404 inline void QLineF::setP2(const QPointF &aP2)
405 {
406     pt2 = aP2;
407 }
408 
409 inline void QLineF::setPoints(const QPointF &aP1, const QPointF &aP2)
410 {
411     pt1 = aP1;
412     pt2 = aP2;
413 }
414 
415 inline void QLineF::setLine(qreal aX1, qreal aY1, qreal aX2, qreal aY2)
416 {
417     pt1 = QPointF(aX1, aY1);
418     pt2 = QPointF(aX2, aY2);
419 }
420 
421 
422 constexpr inline bool QLineF::operator==(const QLineF &d) const
423 {
424     return pt1 == d.pt1 && pt2 == d.pt2;
425 }
426 
427 
428 
429 #ifndef QT_NO_DEBUG_STREAM
430 Q_CORE_EXPORT QDebug operator<<(QDebug d, const QLineF &p);
431 #endif
432 
433 #ifndef QT_NO_DATASTREAM
434 Q_CORE_EXPORT QDataStream &operator<<(QDataStream &, const QLineF &);
435 Q_CORE_EXPORT QDataStream &operator>>(QDataStream &, QLineF &);
436 #endif
437 
438 QT_END_NAMESPACE
439 
440 #endif // QLINE_H
