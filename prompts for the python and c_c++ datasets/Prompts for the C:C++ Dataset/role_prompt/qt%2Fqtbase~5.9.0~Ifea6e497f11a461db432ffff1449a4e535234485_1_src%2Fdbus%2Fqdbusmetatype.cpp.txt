I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Copyright (C) 2016 Intel Corporation.
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the QtDBus module of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:LGPL$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU Lesser General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU Lesser
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
22 ** packaging of this file. Please review the following information to
23 ** ensure the GNU Lesser General Public License version 3 requirements
24 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
25 **
26 ** GNU General Public License Usage
27 ** Alternatively, this file may be used under the terms of the GNU
28 ** General Public License version 2.0 or (at your option) the GNU General
29 ** Public license version 3 or any later version approved by the KDE Free
30 ** Qt Foundation. The licenses are as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
32 ** included in the packaging of this file. Please review the following
33 ** information to ensure the GNU General Public License requirements will
34 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
35 ** https://www.gnu.org/licenses/gpl-3.0.html.
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 #include "qdbusmetatype.h"
42 #include "qdbusmetatype_p.h"
43 #include "qdbus_symbols_p.h"
44 
45 #include <string.h>
46 
47 #include "qdbusargument_p.h"
48 #include "qdbusutil_p.h"
49 #include "qdbusunixfiledescriptor.h"
50 #ifndef QT_BOOTSTRAPPED
51 #include "qdbusconnectionmanager_p.h"
52 #include "qdbusmessage.h"
53 #endif
54 
55 #ifndef QT_NO_DBUS
56 
57 #ifndef DBUS_TYPE_UNIX_FD
58 # define DBUS_TYPE_UNIX_FD int('h')
59 # define DBUS_TYPE_UNIX_FD_AS_STRING "h"
60 #endif
61 
62 QT_BEGIN_NAMESPACE
63 
64 static void registerMarshallOperatorsNoLock(QVector<QDBusCustomTypeInfo> &ct, int id,
65                                             QDBusMetaType::MarshallFunction mf,
66                                             QDBusMetaType::DemarshallFunction df);
67 
68 template<typename T>
69 inline static void registerHelper(QVector<QDBusCustomTypeInfo> &ct)
70 {
71     void (*mf)(QDBusArgument &, const T *) = qDBusMarshallHelper<T>;
72     void (*df)(const QDBusArgument &, T *) = qDBusDemarshallHelper<T>;
73     registerMarshallOperatorsNoLock(ct, qMetaTypeId<T>(),
74         reinterpret_cast<QDBusMetaType::MarshallFunction>(mf),
75         reinterpret_cast<QDBusMetaType::DemarshallFunction>(df));
76 }
77 
78 QDBusMetaTypeId *QDBusMetaTypeId::instance()
79 {
80 #ifdef QT_BOOTSTRAPPED
81     static QDBusMetaTypeId self;
82     return &self;
83 #else
84     return QDBusConnectionManager::instance();
85 #endif
86 }
87 
88 QDBusMetaTypeId::QDBusMetaTypeId()
89 {
90     // register our types with Qt Core (calling qMetaTypeId<T>() does this implicitly)
91     (void)message();
92     (void)argument();
93     (void)variant();
94     (void)objectpath();
95     (void)signature();
96     (void)error();
97     (void)unixfd();
98 
99 #ifndef QDBUS_NO_SPECIALTYPES
100     // and register Qt Core's with us
101     registerHelper<QDate>(customTypes);
102     registerHelper<QTime>(customTypes);
103     registerHelper<QDateTime>(customTypes);
104     registerHelper<QRect>(customTypes);
105     registerHelper<QRectF>(customTypes);
106     registerHelper<QSize>(customTypes);
107     registerHelper<QSizeF>(customTypes);
108     registerHelper<QPoint>(customTypes);
109     registerHelper<QPointF>(customTypes);
110     registerHelper<QLine>(customTypes);
111     registerHelper<QLineF>(customTypes);
112     registerHelper<QVariantList>(customTypes);
113     registerHelper<QVariantMap>(customTypes);
114     registerHelper<QVariantHash>(customTypes);
115 
116     registerHelper<QList<bool> >(customTypes);
117     registerHelper<QList<short> >(customTypes);
118     registerHelper<QList<ushort> >(customTypes);
119     registerHelper<QList<int> >(customTypes);
120     registerHelper<QList<uint> >(customTypes);
121     registerHelper<QList<qlonglong> >(customTypes);
122     registerHelper<QList<qulonglong> >(customTypes);
123     registerHelper<QList<double> >(customTypes);
124     registerHelper<QList<QDBusObjectPath> >(customTypes);
125     registerHelper<QList<QDBusSignature> >(customTypes);
126     registerHelper<QList<QDBusUnixFileDescriptor> >(customTypes);
127 #endif
128 }
129 
130 /*!
131     \class QDBusMetaType
132     \inmodule QtDBus
133     \brief Meta-type registration system for the Qt D-Bus module.
134     \internal
135 
136     The QDBusMetaType class allows you to register class types for
137     marshalling and demarshalling over D-Bus. D-Bus supports a very
138     limited set of primitive types, but allows one to extend the type
139     system by creating compound types, such as arrays (lists) and
140     structs. In order to use them with Qt D-Bus, those types must be
141     registered.
142 
143     See \l {qdbustypesystem.html}{Qt D-Bus Type System} for more
144     information on the type system and how to register additional
145     types.
146 
147     \sa {qdbustypesystem.html}{Qt D-Bus Type System},
148     qDBusRegisterMetaType(), QMetaType, QVariant, QDBusArgument
149 */
150 
151 /*!
152     \fn int qDBusRegisterMetaType()
153     \relates QDBusArgument
154     \threadsafe
155     \since 4.2
156 
157     Registers \c{T} with the
158     \l {qdbustypesystem.html}{Qt D-Bus Type System} and the Qt \l
159     {QMetaType}{meta-type system}, if it's not already registered.
160 
161     To register a type, it must be declared as a meta-type with the
162     Q_DECLARE_METATYPE() macro, and then registered as in the
163     following example:
164 
165     \snippet code/src_qdbus_qdbusmetatype.cpp 0
166 
167     If \c{T} isn't one of
168     Qt's \l{container classes}, the \c{operator<<} and
169     \c{operator>>} streaming operators between \c{T} and QDBusArgument
170     must be already declared. See the \l {qdbustypesystem.html}{Qt D-Bus
171     Type System} page for more information on how to declare such
172     types.
173 
174     This function returns the Qt meta type id for the type (the same
175     value that is returned from qRegisterMetaType()).
176 
177     \note The feature that a \c{T} inheriting a streamable type (including
178     the containers QList, QHash or QMap) can be streamed without providing
179     custom \c{operator<<} and \c{operator>>} is deprecated as of Qt 5.7,
180     because it ignores everything in \c{T} except the base class. There is
181     no diagnostic. You should always provide these operators for all types
182     you wish to stream and not rely on Qt-provided stream operators for
183     base classes.
184 
185     \sa {qdbustypesystem.html}{Qt D-Bus Type System}, qRegisterMetaType(), QMetaType
186 */
187 
188 /*!
189     \typedef QDBusMetaType::MarshallFunction
190     \internal
191 */
192 
193 /*!
194     \typedef QDBusMetaType::DemarshallFunction
195     \internal
196 */
197 
198 /*!
199     \internal
200     Registers the marshalling and demarshalling functions for meta
201     type \a id.
202 */
203 void QDBusMetaType::registerMarshallOperators(int id, MarshallFunction mf,
204                                               DemarshallFunction df)
205 {
206     QByteArray var;
207     QDBusMetaTypeId *mgr = QDBusMetaTypeId::instance();
208     if (id < 0 || !mf || !df || !mgr)
209         return;                 // error!
210 
211     QWriteLocker locker(&mgr->customTypesLock);
212     QVector<QDBusCustomTypeInfo> &ct = mgr->customTypes;
213     registerMarshallOperatorsNoLock(ct, id, mf, df);
214 }
215 
216 static void registerMarshallOperatorsNoLock(QVector<QDBusCustomTypeInfo> &ct, int id,
217                                             QDBusMetaType::MarshallFunction mf,
218                                             QDBusMetaType::DemarshallFunction df)
219 {
220     if (id >= ct.size())
221         ct.resize(id + 1);
222     QDBusCustomTypeInfo &info = ct[id];
223     info.marshall = mf;
224     info.demarshall = df;
225 }
226 
227 /*!
228     \internal
229     Executes the marshalling of type \a id (whose data is contained in
230     \a data) to the D-Bus marshalling argument \a arg. Returns \c true if
231     the marshalling succeeded, or false if an error occurred.
232 */
233 bool QDBusMetaType::marshall(QDBusArgument &arg, int id, const void *data)
234 {
235     QDBusMetaTypeId::init();
236 
237     MarshallFunction mf;
238     {
239         const QDBusMetaTypeId *mgr = QDBusMetaTypeId::instance();
240         if (!mgr)
241             return false;       // shutting down
242 
243         QReadLocker locker(&mgr->customTypesLock);
244         const QVector<QDBusCustomTypeInfo> &ct = mgr->customTypes;
245         if (id >= ct.size())
246             return false;       // non-existent
247 
248         const QDBusCustomTypeInfo &info = ct.at(id);
249         if (!info.marshall) {
250             mf = 0;             // make gcc happy
251             return false;
252         } else
253             mf = info.marshall;
254     }
255 
256     mf(arg, data);
257     return true;
258 }
259 
260 /*!
261     \internal
262     Executes the demarshalling of type \a id (whose data will be placed in
263     \a data) from the D-Bus marshalling argument \a arg. Returns \c true if
264     the demarshalling succeeded, or false if an error occurred.
265 */
266 bool QDBusMetaType::demarshall(const QDBusArgument &arg, int id, void *data)
267 {
268     QDBusMetaTypeId::init();
269 
270     DemarshallFunction df;
271     {
272         const QDBusMetaTypeId *mgr = QDBusMetaTypeId::instance();
273         if (!mgr)
274             return false;       // shutting down
275 
276         QReadLocker locker(&mgr->customTypesLock);
277         const QVector<QDBusCustomTypeInfo> &ct = mgr->customTypes;
278         if (id >= ct.size())
279             return false;       // non-existent
280 
281         const QDBusCustomTypeInfo &info = ct.at(id);
282         if (!info.demarshall) {
283             df = 0;             // make gcc happy
284             return false;
285         } else
286             df = info.demarshall;
287     }
288 #ifndef QT_BOOTSTRAPPED
289     QDBusArgument copy = arg;
290     df(copy, data);
291 #else
292     Q_UNUSED(arg);
293     Q_UNUSED(data);
294     Q_UNUSED(df);
295 #endif
296     return true;
297 }
298 
299 /*!
300     \fn QDBusMetaType::signatureToType(const char *signature)
301     \internal
302 
303     Returns the Qt meta type id for the given D-Bus signature for exactly one full type, given
304     by \a signature.
305 
306     Note: this function only handles the basic D-Bus types.
307 
308     \sa QDBusUtil::isValidSingleSignature(), typeToSignature(),
309         QVariant::type(), QVariant::userType()
310 */
311 int QDBusMetaType::signatureToType(const char *signature)
312 {
313     if (!signature)
314         return QMetaType::UnknownType;
315 
316     QDBusMetaTypeId::init();
317     switch (signature[0])
318     {
319     case DBUS_TYPE_BOOLEAN:
320         return QVariant::Bool;
321 
322     case DBUS_TYPE_BYTE:
323         return QMetaType::UChar;
324 
325     case DBUS_TYPE_INT16:
326         return QMetaType::Short;
327 
328     case DBUS_TYPE_UINT16:
329         return QMetaType::UShort;
330 
331     case DBUS_TYPE_INT32:
332         return QVariant::Int;
333 
334     case DBUS_TYPE_UINT32:
335         return QVariant::UInt;
336 
337     case DBUS_TYPE_INT64:
338         return QVariant::LongLong;
339 
340     case DBUS_TYPE_UINT64:
341         return QVariant::ULongLong;
342 
343     case DBUS_TYPE_DOUBLE:
344         return QVariant::Double;
345 
346     case DBUS_TYPE_STRING:
347         return QVariant::String;
348 
349     case DBUS_TYPE_OBJECT_PATH:
350         return QDBusMetaTypeId::objectpath();
351 
352     case DBUS_TYPE_SIGNATURE:
353         return QDBusMetaTypeId::signature();
354 
355     case DBUS_TYPE_UNIX_FD:
356         return QDBusMetaTypeId::unixfd();
357 
358     case DBUS_TYPE_VARIANT:
359         return QDBusMetaTypeId::variant();
360 
361     case DBUS_TYPE_ARRAY:       // special case
362         switch (signature[1]) {
363         case DBUS_TYPE_BYTE:
364             return QVariant::ByteArray;
365 
366         case DBUS_TYPE_STRING:
367             return QVariant::StringList;
368 
369         case DBUS_TYPE_VARIANT:
370             return QVariant::List;
371 
372         case DBUS_TYPE_OBJECT_PATH:
373             return qMetaTypeId<QList<QDBusObjectPath> >();
374 
375         case DBUS_TYPE_SIGNATURE:
376             return qMetaTypeId<QList<QDBusSignature> >();
377 
378         }
379         Q_FALLTHROUGH();
380     default:
381         return QMetaType::UnknownType;
382     }
383 }
384 
385 /*!
386     \fn QDBusMetaType::typeToSignature(int type)
387     \internal
388 
389     Returns the D-Bus signature equivalent to the supplied meta type id \a type.
390 
391     More types can be registered with the qDBusRegisterMetaType() function.
392 
393     \sa QDBusUtil::isValidSingleSignature(), signatureToType(),
394         QVariant::type(), QVariant::userType()
395 */
396 const char *QDBusMetaType::typeToSignature(int type)
397 {
398     // check if it's a static type
399     switch (type)
400     {
401     case QMetaType::UChar:
402         return DBUS_TYPE_BYTE_AS_STRING;
403 
404     case QVariant::Bool:
405         return DBUS_TYPE_BOOLEAN_AS_STRING;
406 
407     case QMetaType::Short:
408         return DBUS_TYPE_INT16_AS_STRING;
409 
410     case QMetaType::UShort:
411         return DBUS_TYPE_UINT16_AS_STRING;
412 
413     case QVariant::Int:
414         return DBUS_TYPE_INT32_AS_STRING;
415 
416     case QVariant::UInt:
417         return DBUS_TYPE_UINT32_AS_STRING;
418 
419     case QVariant::LongLong:
420         return DBUS_TYPE_INT64_AS_STRING;
421 
422     case QVariant::ULongLong:
423         return DBUS_TYPE_UINT64_AS_STRING;
424 
425     case QVariant::Double:
426         return DBUS_TYPE_DOUBLE_AS_STRING;
427 
428     case QVariant::String:
429         return DBUS_TYPE_STRING_AS_STRING;
430 
431     case QVariant::StringList:
432         return DBUS_TYPE_ARRAY_AS_STRING
433             DBUS_TYPE_STRING_AS_STRING; // as
434 
435     case QVariant::ByteArray:
436         return DBUS_TYPE_ARRAY_AS_STRING
437             DBUS_TYPE_BYTE_AS_STRING; // ay
438     }
439 
440     // try the database
441     QDBusMetaTypeId *mgr = QDBusMetaTypeId::instance();
442     if (!mgr)
443         return Q_NULLPTR;       // shutting down
444 
445     if (type == QDBusMetaTypeId::variant())
446         return DBUS_TYPE_VARIANT_AS_STRING;
447     else if (type == QDBusMetaTypeId::objectpath())
448         return DBUS_TYPE_OBJECT_PATH_AS_STRING;
449     else if (type == QDBusMetaTypeId::signature())
450         return DBUS_TYPE_SIGNATURE_AS_STRING;
451     else if (type == QDBusMetaTypeId::unixfd())
452         return DBUS_TYPE_UNIX_FD_AS_STRING;
453 
454     {
455         QReadLocker locker(&mgr->customTypesLock);
456         const QVector<QDBusCustomTypeInfo> &ct = mgr->customTypes;
457         if (type >= ct.size())
458             return 0;           // type not registered with us
459 
460         const QDBusCustomTypeInfo &info = ct.at(type);
461 
462         if (!info.signature.isNull())
463             return info.signature;
464 
465         if (!info.marshall)
466             return 0;           // type not registered with us
467     }
468 
469     // call to user code to construct the signature type
470     QDBusCustomTypeInfo *info;
471     {
472         // createSignature will never return a null QByteArray
473         // if there was an error, it'll return ""
474         QByteArray signature = QDBusArgumentPrivate::createSignature(type);
475 
476         // re-acquire lock
477         QWriteLocker locker(&mgr->customTypesLock);
478         QVector<QDBusCustomTypeInfo> &ct = mgr->customTypes;
479         info = &ct[type];
480         info->signature = signature;
481     }
482     return info->signature;
483 }
484 
485 QT_END_NAMESPACE
486 
487 #endif // QT_NO_DBUS
