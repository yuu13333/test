I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2021 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the test suite of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:GPL-EXCEPT$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
21 ** included in the packaging of this file. Please review the following
22 ** information to ensure the GNU General Public License requirements will
23 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
24 **
25 ** $QT_END_LICENSE$
26 **
27 ****************************************************************************/
28 
29 
30 #include <QTest>
31 #include <QStandardPaths>
32 #include <qcoreapplication.h>
33 #include <qstring.h>
34 #include <qtemporarydir.h>
35 #include <qfile.h>
36 #include <qdir.h>
37 #include <qset.h>
38 #include <QtTest/private/qtesthelpers_p.h>
39 #ifdef Q_OS_WIN
40 # include <shlwapi.h>
41 # include <qt_windows.h>
42 #endif
43 #ifdef Q_OS_UNIX // for geteuid()
44 # include <sys/types.h>
45 # include <unistd.h>
46 #endif
47 
48 #ifdef Q_OS_INTEGRITY
49 #include "qplatformdefs.h"
50 #endif
51 
52 #include <type_traits>
53 
54 class tst_QTemporaryDir : public QObject
55 {
56     Q_OBJECT
57 public:
58 public slots:
59     void initTestCase();
60     void cleanupTestCase();
61 
62 private slots:
63     void construction();
64     void fileTemplate();
65     void fileTemplate_data();
66     void getSetCheck();
67     void fileName();
68     void filePath_data();
69     void filePath();
70     void autoRemove();
71     void nonWritableCurrentDir();
72     void openOnRootDrives();
73     void stressTest();
74     void rename();
75 
76     void qtemporarydir_is_move_constructible();
77     void
78     destroying_a_moved_from_qtemporarydir_does_not_remove_the_owned_directory_from_the_filesystem();
79     void move_construction_preserves_isValid();
80     void move_construction_preserves_errorString();
81     void move_construction_preserves_autoRemove();
82     void move_construction_preserves_path();
83 
84     void QTBUG_4796_data();
85     void QTBUG_4796();
86 
87     void QTBUG43352_failedSetPermissions();
88 
89 private:
90     QString m_previousCurrent;
91 };
92 
93 void tst_QTemporaryDir::initTestCase()
94 {
95     m_previousCurrent = QDir::currentPath();
96     QDir::setCurrent(QDir::tempPath());
97     QVERIFY(QDir("test-XXXXXX").exists() || QDir().mkdir("test-XXXXXX"));
98     QCoreApplication::setApplicationName("tst_qtemporarydir");
99 }
100 
101 void tst_QTemporaryDir::cleanupTestCase()
102 {
103     QVERIFY(QDir().rmdir("test-XXXXXX"));
104 
105     QDir::setCurrent(m_previousCurrent);
106 }
107 
108 void tst_QTemporaryDir::construction()
109 {
110     QTemporaryDir dir;
111     QString tmp = QDir::tempPath();
112     QCOMPARE(dir.path().left(tmp.size()), tmp);
113     QVERIFY(dir.path().contains("tst_qtemporarydir"));
114     QVERIFY(QFileInfo(dir.path()).isDir());
115     QCOMPARE(dir.errorString(), QString());
116 }
117 
118 // Testing get/set functions
119 void tst_QTemporaryDir::getSetCheck()
120 {
121     QTemporaryDir obj1;
122     // bool QTemporaryDir::autoRemove()
123     // void QTemporaryDir::setAutoRemove(bool)
124     obj1.setAutoRemove(false);
125     QCOMPARE(false, obj1.autoRemove());
126     obj1.setAutoRemove(true);
127     QCOMPARE(true, obj1.autoRemove());
128 }
129 
130 static QString hanTestText()
131 {
132     QString text;
133     text += QChar(0x65B0);
134     text += QChar(0x5E10);
135     text += QChar(0x6237);
136     return text;
137 }
138 
139 static QString umlautTestText()
140 {
141     QString text;
142     text += QChar(0xc4);
143     text += QChar(0xe4);
144     text += QChar(0xd6);
145     text += QChar(0xf6);
146     text += QChar(0xdc);
147     text += QChar(0xfc);
148     text += QChar(0xdf);
149     return text;
150 }
151 
152 void tst_QTemporaryDir::fileTemplate_data()
153 {
154     QTest::addColumn<QString>("constructorTemplate");
155     QTest::addColumn<QString>("prefix");
156     QTest::addColumn<QString>("suffix");
157 
158     QTest::newRow("default") << "" << "tst_qtemporarydir-" << "";
159 
160     QTest::newRow("xxx-suffix") << "qt_XXXXXXxxx" << "qt_" << "xxx";
161     QTest::newRow("xXx-suffix") << "qt_XXXXXXxXx" << "qt_" << "xXx";
162     QTest::newRow("no-suffix") << "qt_XXXXXX" << "qt_" << "";
163     QTest::newRow("10X") << "qt_XXXXXXXXXX" << "qt_" << "";
164     QTest::newRow("4Xsuffix") << "qt_XXXXXX_XXXX" << "qt_" << "_XXXX";
165     QTest::newRow("4Xprefix") << "qt_XXXX" << "qt_XXXX" << "";
166     QTest::newRow("5Xprefix") << "qt_XXXXX" << "qt_XXXXX" << "";
167     if (QTestPrivate::canHandleUnicodeFileNames()) {
168         // Test Umlauts (contained in Latin1)
169         QString prefix = "qt_" + umlautTestText();
170         QTest::newRow("Umlauts") << (prefix + "XXXXXX") << prefix << "";
171         // test non-Latin1
172         prefix = "qt_" + hanTestText();
173         QTest::newRow("Chinese") << (prefix + "XXXXXX" + umlautTestText()) << prefix << umlautTestText();
174     }
175 
176 #ifdef Q_OS_WIN
177     auto tmp = QDir::toNativeSeparators(QDir::tempPath());
178     if (PathGetDriveNumber((const wchar_t *) tmp.utf16()) < 0)
179         return; // skip if we have no drive letter
180 
181     tmp.data()[1] = u'$';
182     const auto tmpPath = tmp + uR"(\UNC.XXXXXX.tmpDir)"_qs;
183 
184     QTest::newRow("UNC-backslash")
185             << uR"(\\localhost\)"_qs + tmpPath << "UNC."
186             << ".tmpDir";
187     QTest::newRow("UNC-prefix")
188             << uR"(\\?\UNC\localhost\)"_qs + tmpPath << "UNC."
189             << ".tmpDir";
190     QTest::newRow("UNC-slash")
191             << u"//localhost/"_qs + QDir::fromNativeSeparators(tmpPath) << "UNC."
192             << ".tmpDir";
193     QTest::newRow("UNC-prefix-slash")
194             << uR"(//?/UNC/localhost/)"_qs + QDir::fromNativeSeparators(tmpPath) << "UNC."
195             << ".tmpDir";
196 #endif
197 }
198 
199 void tst_QTemporaryDir::fileTemplate()
200 {
201     QFETCH(QString, constructorTemplate);
202     QFETCH(QString, prefix);
203     QFETCH(QString, suffix);
204 
205     QTemporaryDir tempDir(constructorTemplate);
206 
207     QVERIFY(tempDir.isValid());
208 
209     QString dirName = QDir(tempDir.path()).dirName();
210     if (prefix.length()) {
211         QCOMPARE(dirName.left(prefix.length()), prefix);
212         QCOMPARE(dirName.right(suffix.length()), suffix);
213     }
214 }
215 
216 
217 /*
218     This tests whether the temporary dir really gets placed in QDir::tempPath
219 */
220 void tst_QTemporaryDir::fileName()
221 {
222     // Get QDir::tempPath and make an absolute path.
223     QString tempPath = QDir::tempPath();
224     QString absoluteTempPath = QDir(tempPath).absolutePath();
225     QTemporaryDir dir;
226     dir.setAutoRemove(true);
227     QString fileName = dir.path();
228     QVERIFY2(fileName.contains("/tst_qtemporarydir-"), qPrintable(fileName));
229     QVERIFY(QDir(fileName).exists());
230     // Get path to the temp dir, without the file name.
231     QString absoluteFilePath = QFileInfo(fileName).absolutePath();
232 #if defined(Q_OS_WIN)
233     absoluteFilePath = absoluteFilePath.toLower();
234     absoluteTempPath = absoluteTempPath.toLower();
235 #endif
236     QCOMPARE(absoluteFilePath, absoluteTempPath);
237 }
238 
239 void tst_QTemporaryDir::filePath_data()
240 {
241     QTest::addColumn<QString>("templatePath");
242     QTest::addColumn<QString>("fileName");
243 
244     QTest::newRow("0") << QString() << "/tmpfile";
245     QTest::newRow("1") << QString() << "tmpfile";
246     QTest::newRow("2") << "XXXXX" << "tmpfile";
247     QTest::newRow("3") << "YYYYY" << "subdir/file";
248 }
249 
250 void tst_QTemporaryDir::filePath()
251 {
252     QFETCH(QString, templatePath);
253     QFETCH(QString, fileName);
254 
255     QTemporaryDir dir(templatePath);
256     const QString filePath = dir.filePath(fileName);
257     const QString expectedFilePath = QDir::isAbsolutePath(fileName) ?
258                                      QString() : dir.path() + QLatin1Char('/') + fileName;
259     QCOMPARE(filePath, expectedFilePath);
260 }
261 
262 void tst_QTemporaryDir::autoRemove()
263 {
264     // Test auto remove
265     QString dirName;
266     {
267         QTemporaryDir dir("tempXXXXXX");
268         dir.setAutoRemove(true);
269         QVERIFY(dir.isValid());
270         dirName = dir.path();
271     }
272 #ifdef Q_OS_WIN
273     // Windows seems unreliable here: sometimes it says the directory still exists,
274     // immediately after we deleted it.
275     QTRY_VERIFY(!QDir(dirName).exists());
276 #else
277     QVERIFY(!QDir(dirName).exists());
278 #endif
279 
280     // Test if disabling auto remove works.
281     {
282         QTemporaryDir dir("tempXXXXXX");
283         dir.setAutoRemove(false);
284         QVERIFY(dir.isValid());
285         dirName = dir.path();
286     }
287     QVERIFY(QDir(dirName).exists());
288     QVERIFY(QDir().rmdir(dirName));
289     QVERIFY(!QDir(dirName).exists());
290 
291     // Do not explicitly call setAutoRemove (tests if it really is the default as documented)
292     {
293         QTemporaryDir dir("tempXXXXXX");
294         QVERIFY(dir.isValid());
295         dirName = dir.path();
296     }
297 #ifdef Q_OS_WIN
298     QTRY_VERIFY(!QDir(dirName).exists());
299 #else
300     QVERIFY(!QDir(dirName).exists());
301 #endif
302 
303     // Test autoremove with files and subdirs in the temp dir
304     {
305         QTemporaryDir tempDir("tempXXXXXX");
306         QVERIFY(tempDir.isValid());
307         dirName = tempDir.path();
308         QDir dir(dirName);
309         QVERIFY(dir.mkdir(QString::fromLatin1("dir1")));
310         QVERIFY(dir.mkdir(QString::fromLatin1("dir2")));
311         QVERIFY(dir.mkdir(QString::fromLatin1("dir2/nested")));
312         QFile file(dirName + "/dir1/file");
313         QVERIFY(file.open(QIODevice::WriteOnly));
314         QCOMPARE(file.write("Hello"), 5LL);
315         file.close();
316         QVERIFY(file.setPermissions(QFile::ReadUser));
317     }
318 #ifdef Q_OS_WIN
319     QTRY_VERIFY(!QDir(dirName).exists());
320 #else
321     QVERIFY(!QDir(dirName).exists());
322 #endif
323 }
324 
325 void tst_QTemporaryDir::nonWritableCurrentDir()
326 {
327 #ifdef Q_OS_UNIX
328 
329 #  ifdef Q_OS_ANDROID
330     const char nonWritableDir[] = "/data";
331 #  else
332     const char nonWritableDir[] = "/home";
333 #  endif
334 
335     if (::geteuid() == 0)
336         QSKIP("not valid running this test as root");
337 
338     struct ChdirOnReturn
339     {
340         ChdirOnReturn(const QString& d) : dir(d) {}
341         ~ChdirOnReturn() {
342             QDir::setCurrent(dir);
343         }
344         QString dir;
345     };
346 
347     const QFileInfo nonWritableDirFi = QFileInfo(QLatin1String(nonWritableDir));
348     QVERIFY(nonWritableDirFi.isDir());
349 
350     QVERIFY(!nonWritableDirFi.isWritable());
351 
352     ChdirOnReturn cor(QDir::currentPath());
353     QVERIFY(QDir::setCurrent(nonWritableDirFi.absoluteFilePath()));
354     // QTemporaryDir("tempXXXXXX") is probably a bad idea in any app
355     // where the current dir could anything...
356     QTemporaryDir dir("tempXXXXXX");
357     dir.setAutoRemove(true);
358     QVERIFY(!dir.isValid());
359     QVERIFY(!dir.errorString().isEmpty());
360     QVERIFY(dir.path().isEmpty());
361 #endif
362 }
363 
364 void tst_QTemporaryDir::openOnRootDrives()
365 {
366 #if defined(Q_OS_WIN)
367     unsigned int lastErrorMode = SetErrorMode(SEM_FAILCRITICALERRORS);
368 #endif
369     // If it's possible to create a file in the root directory, it
370     // must be possible to create a temp dir there too.
371     foreach (const QFileInfo &driveInfo, QDir::drives()) {
372         QFile testFile(driveInfo.filePath() + "XXXXXX");
373         if (testFile.open(QIODevice::ReadWrite)) {
374             testFile.remove();
375             QTemporaryDir dir(driveInfo.filePath() + "XXXXXX");
376             dir.setAutoRemove(true);
377             QVERIFY(dir.isValid());
378         }
379     }
380 #if defined(Q_OS_WIN)
381     SetErrorMode(lastErrorMode);
382 #endif
383 }
384 
385 void tst_QTemporaryDir::stressTest()
386 {
387     const int iterations = 1000;
388     QTemporaryDir rootDir;
389     QVERIFY(rootDir.isValid());
390 
391     QSet<QString> names;
392     const QString pattern = rootDir.path() + QStringLiteral("/XXXXXX");
393     for (int i = 0; i < iterations; ++i) {
394         QTemporaryDir dir(pattern);
395         dir.setAutoRemove(false);
396         QVERIFY2(dir.isValid(),
397                  qPrintable(QString::fromLatin1("Failed to create #%1 under %2: %3.")
398                             .arg(i)
399                             .arg(QDir::toNativeSeparators(pattern))
400                             .arg(dir.errorString())));
401         QVERIFY(!names.contains(dir.path()));
402         names.insert(dir.path());
403     }
404 }
405 
406 void tst_QTemporaryDir::rename()
407 {
408     // This test checks what happens if the temporary dir is renamed.
409     // Then the autodelete feature can't possibly find it.
410 
411     QDir dir;
412     QVERIFY(!dir.exists("temporary-dir.renamed"));
413 
414     QString tempname;
415     {
416         QTemporaryDir tempDir(dir.filePath("temporary-dir.XXXXXX"));
417 
418         QVERIFY(tempDir.isValid());
419         tempname = tempDir.path();
420 
421         QVERIFY(QDir().rename(tempname, "temporary-dir.renamed"));
422         QVERIFY(!QDir(tempname).exists());
423         dir.setPath("temporary-dir.renamed");
424         QCOMPARE(dir.path(), QString("temporary-dir.renamed"));
425         QVERIFY(dir.exists());
426     }
427 
428     // Auto-delete couldn't find it
429     QVERIFY(dir.exists());
430     // Clean up by hand
431     QVERIFY(dir.removeRecursively());
432     QVERIFY(!dir.exists());
433 }
434 
435 void tst_QTemporaryDir::qtemporarydir_is_move_constructible()
436 {
437     QVERIFY(std::is_move_constructible_v<QTemporaryDir>);
438 }
439 
440 void tst_QTemporaryDir::
441         destroying_a_moved_from_qtemporarydir_does_not_remove_the_owned_directory_from_the_filesystem()
442 {
443     QTemporaryDir *original{ new QTemporaryDir };
444     QVERIFY(original->isValid());
445 
446     original->setAutoRemove(true);
447 
448     QFileInfo owned_directory_info{ original->path() };
449     QVERIFY(owned_directory_info.exists());
450 
451     QTemporaryDir moved_into(std::move(*original));
452 
453     delete original;
454 
455     QVERIFY(owned_directory_info.exists());
456 }
457 
458 void tst_QTemporaryDir::move_construction_preserves_isValid()
459 {
460     {
461         QTemporaryDir originally_true{};
462         QVERIFY(originally_true.isValid());
463 
464         QTemporaryDir moved_into(std::move(originally_true));
465         QVERIFY(moved_into.isValid());
466     }
467 
468     {
469         // To ensure that QTemporaryDir will fail such that isValid
470         // will be false, we construct the temporary directory with a
471         // name that is invalid.
472         // We use the null-byte as it is invalid in directories names
473         // both on *nix systems and windows.
474         QTemporaryDir originally_false{ QChar{ 0 } + QString{ "XXXXXX" } };
475         QVERIFY(!originally_false.isValid());
476 
477         QTemporaryDir moved_into(std::move(originally_false));
478         QVERIFY(!moved_into.isValid());
479     }
480 }
481 
482 void tst_QTemporaryDir::move_construction_preserves_errorString()
483 {
484     {
485         QTemporaryDir originally_empty_error_string{};
486         QVERIFY(originally_empty_error_string.isValid());
487         QVERIFY(originally_empty_error_string.errorString().isEmpty());
488 
489         QTemporaryDir moved_into(std::move(originally_empty_error_string));
490         QVERIFY(moved_into.errorString().isEmpty());
491     }
492 
493     {
494         // To ensure that QTemporaryDir will fail such that error
495         // string will not be empty, we construct the temporary
496         // directory with a name that is invalid.
497         // We use the null-byte as it is invalid in directories names
498         // both on *nix systems and windows.
499         QTemporaryDir originally_errored{ QChar{ 0 } + QString{ "XXXXXX" } };
500         QVERIFY(!originally_errored.errorString().isEmpty());
501 
502         QString cached_error_string{ originally_errored.errorString() };
503 
504         QTemporaryDir moved_into(std::move(originally_errored));
505         QVERIFY(moved_into.errorString() == cached_error_string);
506     }
507 }
508 
509 void tst_QTemporaryDir::move_construction_preserves_autoRemove()
510 {
511     {
512         QTemporaryDir originally_true{};
513         originally_true.setAutoRemove(true);
514 
515         QTemporaryDir moved_into(std::move(originally_true));
516         QVERIFY(moved_into.autoRemove());
517     }
518 
519     {
520         QTemporaryDir originally_false{};
521         originally_false.setAutoRemove(false);
522 
523         QTemporaryDir moved_into(std::move(originally_false));
524         QVERIFY(!moved_into.autoRemove());
525 
526         // We enable autoRemove again to ensure that the directory is
527         // cleaned up.
528         moved_into.setAutoRemove(true);
529     }
530 }
531 
532 void tst_QTemporaryDir::move_construction_preserves_path()
533 {
534     QTemporaryDir original{};
535 
536     QString cached_path{ original.path() };
537 
538     QTemporaryDir moved_into{ std::move(original) };
539     QVERIFY(moved_into.path() == cached_path);
540 }
541 
542 void tst_QTemporaryDir::QTBUG_4796_data()
543 {
544     QTest::addColumn<QString>("prefix");
545     QTest::addColumn<QString>("suffix");
546     QTest::addColumn<bool>("openResult");
547 
548     QString unicode = QString::fromUtf8("\xc3\xa5\xc3\xa6\xc3\xb8");
549 
550     QTest::newRow("<empty>") << QString() << QString() << true;
551     QTest::newRow(".") << QString(".") << QString() << true;
552     QTest::newRow("..") << QString("..") << QString() << true;
553     QTest::newRow("blaXXXXXX") << QString("bla") << QString() << true;
554     QTest::newRow("does-not-exist/qt_temp.XXXXXX") << QString("does-not-exist/qt_temp") << QString() << false;
555     QTest::newRow("XXXXXX<unicode>") << QString() << unicode << true;
556     QTest::newRow("<unicode>XXXXXX") << unicode << QString() << true;
557 }
558 
559 void tst_QTemporaryDir::QTBUG_4796() // unicode support
560 {
561     QVERIFY(QDir("test-XXXXXX").exists());
562 
563     struct CleanOnReturn
564     {
565         ~CleanOnReturn()
566         {
567             foreach (const QString &tempName, tempNames)
568                 QVERIFY(QDir(tempName).removeRecursively());
569         }
570 
571         void reset()
572         {
573             tempNames.clear();
574         }
575 
576         QStringList tempNames;
577     };
578 
579     CleanOnReturn cleaner;
580 
581     QFETCH(QString, prefix);
582     QFETCH(QString, suffix);
583     QFETCH(bool, openResult);
584 
585     {
586         QString fileTemplate1 = prefix + QString("XX") + suffix;
587         QString fileTemplate2 = prefix + QString("XXXX") + suffix;
588         QString fileTemplate3 = prefix + QString("XXXXXX") + suffix;
589         QString fileTemplate4 = prefix + QString("XXXXXXXX") + suffix;
590 
591         QTemporaryDir dir1(fileTemplate1);
592         QTemporaryDir dir2(fileTemplate2);
593         QTemporaryDir dir3(fileTemplate3);
594         QTemporaryDir dir4(fileTemplate4);
595         QTemporaryDir dir5("test-XXXXXX/" + fileTemplate1);
596         QTemporaryDir dir6("test-XXXXXX/" + fileTemplate3);
597 
598         QCOMPARE(dir1.isValid(), openResult);
599         QCOMPARE(dir2.isValid(), openResult);
600         QCOMPARE(dir3.isValid(), openResult);
601         QCOMPARE(dir4.isValid(), openResult);
602         QCOMPARE(dir5.isValid(), openResult);
603         QCOMPARE(dir6.isValid(), openResult);
604 
605         // make sure the dir exists under the *correct* name
606         if (openResult) {
607             cleaner.tempNames << dir1.path()
608                 << dir2.path()
609                 << dir3.path()
610                 << dir4.path()
611                 << dir5.path()
612                 << dir6.path();
613 
614             QDir currentDir;
615             QString fileName1 = currentDir.relativeFilePath(dir1.path());
616             QString fileName2 = currentDir.relativeFilePath(dir2.path());
617             QString fileName3 = currentDir.relativeFilePath(dir3.path());
618             QString fileName4 = currentDir.relativeFilePath(dir4.path());
619             QString fileName5 = currentDir.relativeFilePath(dir5.path());
620             QString fileName6 = currentDir.relativeFilePath(dir6.path());
621 
622             QVERIFY(fileName1.startsWith(prefix));
623             QVERIFY(fileName2.startsWith(prefix));
624             QVERIFY(fileName5.startsWith("test-XXXXXX/" + prefix));
625             QVERIFY(fileName6.startsWith("test-XXXXXX/" + prefix));
626 
627             if (!prefix.isEmpty()) {
628                 QVERIFY(fileName3.startsWith(prefix));
629                 QVERIFY(fileName4.startsWith(prefix));
630             }
631         }
632     }
633 
634 #ifdef Q_OS_WIN
635     QTest::qWait(20);
636 #endif
637     foreach (const QString &tempName, cleaner.tempNames)
638         QVERIFY2(!QDir(tempName).exists(), qPrintable(tempName));
639 
640     cleaner.reset();
641 }
642 
643 void tst_QTemporaryDir::QTBUG43352_failedSetPermissions()
644 {
645     QString path = QStandardPaths::writableLocation(QStandardPaths::DownloadLocation) + QStringLiteral("/");
646     int count = QDir(path).entryList().size();
647 
648     {
649         QTemporaryDir dir(path);
650     }
651 
652     QCOMPARE(QDir(path).entryList().size(), count);
653 }
654 
655 QTEST_MAIN(tst_QTemporaryDir)
656 #include "tst_qtemporarydir.moc"
