I want you to act as a code reviewer of Qt Creator in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "branchmodel.h"
27 #include "gitclient.h"
28 #include "gitconstants.h"
29 
30 #include <vcsbase/vcsoutputwindow.h>
31 #include <vcsbase/vcscommand.h>
32 
33 #include <utils/qtcassert.h>
34 
35 #include <QDateTime>
36 #include <QFont>
37 
38 using namespace VcsBase;
39 
40 namespace Git {
41 namespace Internal {
42 
43 enum RootNodes {
44     LocalBranches = 0,
45     RemoteBranches = 1,
46     Tags = 2
47 };
48 
49 // --------------------------------------------------------------------------
50 // BranchNode:
51 // --------------------------------------------------------------------------
52 
53 class BranchNode
54 {
55 public:
56     BranchNode() :
57         name("<ROOT>")
58     { }
59 
60     BranchNode(const QString &n, const QString &s = QString(), const QString &t = QString(),
61                const QDateTime &dt = QDateTime()) :
62         name(n), sha(s), tracking(t), dateTime(dt)
63     { }
64 
65     ~BranchNode()
66     {
67         while (!children.isEmpty())
68             delete children.first();
69         if (parent)
70             parent->children.removeAll(this);
71     }
72 
73     BranchNode *rootNode() const
74     {
75         return parent ? parent->rootNode() : const_cast<BranchNode *>(this);
76     }
77 
78     int count() const
79     {
80         return children.count();
81     }
82 
83     bool isLeaf() const
84     {
85         return children.isEmpty() && parent && parent->parent;
86     }
87 
88     bool childOf(BranchNode *node) const
89     {
90         if (this == node)
91             return true;
92         return parent ? parent->childOf(node) : false;
93     }
94 
95     bool childOfRoot(RootNodes root) const
96     {
97         BranchNode *rn = rootNode();
98         if (rn->isLeaf())
99             return false;
100         if (root >= rn->children.count())
101             return false;
102         return childOf(rn->children.at(root));
103     }
104 
105     bool isTag() const
106     {
107         return childOfRoot(Tags);
108     }
109 
110     bool isLocal() const
111     {
112         return childOfRoot(LocalBranches);
113     }
114 
115     BranchNode *childOfName(const QString &name) const
116     {
117         for (int i = 0; i < children.count(); ++i) {
118             if (children.at(i)->name == name)
119                 return children.at(i);
120         }
121         return nullptr;
122     }
123 
124     QStringList fullName(bool includePrefix = false) const
125     {
126         QTC_ASSERT(isLeaf(), return QStringList());
127 
128         QStringList fn;
129         QList<const BranchNode *> nodes;
130         const BranchNode *current = this;
131         while (current->parent) {
132             nodes.prepend(current);
133             current = current->parent;
134         }
135 
136         if (includePrefix)
137             fn.append(nodes.first()->sha);
138         nodes.removeFirst();
139 
140         for (const BranchNode *n : qAsConst(nodes))
141             fn.append(n->name);
142 
143         return fn;
144     }
145 
146     void insert(const QStringList &path, BranchNode *n)
147     {
148         BranchNode *current = this;
149         for (int i = 0; i < path.count(); ++i) {
150             BranchNode *c = current->childOfName(path.at(i));
151             if (c)
152                 current = c;
153             else
154                 current = current->append(new BranchNode(path.at(i)));
155         }
156         current->append(n);
157     }
158 
159     BranchNode *append(BranchNode *n)
160     {
161         n->parent = this;
162         children.append(n);
163         return n;
164     }
165 
166     QStringList childrenNames() const
167     {
168         if (children.count() > 0) {
169             QStringList names;
170             for (BranchNode *n : children) {
171                 names.append(n->childrenNames());
172             }
173             return names;
174         }
175         return {fullName().join('/')};
176     }
177 
178     int rowOf(BranchNode *node)
179     {
180         return children.indexOf(node);
181     }
182 
183     BranchNode *parent = nullptr;
184     QList<BranchNode *> children;
185 
186     QString name;
187     QString sha;
188     QString tracking;
189     QDateTime dateTime;
190     mutable QString toolTip;
191 };
192 
193 // --------------------------------------------------------------------------
194 // BranchModel:
195 // --------------------------------------------------------------------------
196 
197 BranchModel::BranchModel(GitClient *client, QObject *parent) :
198     QAbstractItemModel(parent),
199     m_client(client),
200     m_rootNode(new BranchNode),
201     m_remoteBranchesTitle(tr("Remote Branches"))
202 {
203     QTC_CHECK(m_client);
204 
205     // Abuse the sha field for ref prefix
206     m_rootNode->append(new BranchNode(tr("Local Branches"), "refs/heads"));
207     m_rootNode->append(new BranchNode(m_remoteBranchesTitle, "refs/remotes"));
208 }
209 
210 BranchModel::~BranchModel()
211 {
212     delete m_rootNode;
213 }
214 
215 QModelIndex BranchModel::index(int row, int column, const QModelIndex &parentIdx) const
216 {
217     if (column > 1)
218         return QModelIndex();
219     BranchNode *parentNode = indexToNode(parentIdx);
220 
221     if (row >= parentNode->count())
222         return QModelIndex();
223     return nodeToIndex(parentNode->children.at(row), column);
224 }
225 
226 QModelIndex BranchModel::parent(const QModelIndex &index) const
227 {
228     if (!index.isValid())
229         return QModelIndex();
230 
231     BranchNode *node = indexToNode(index);
232     if (node->parent == m_rootNode)
233         return QModelIndex();
234     return nodeToIndex(node->parent, 0);
235 }
236 
237 int BranchModel::rowCount(const QModelIndex &parentIdx) const
238 {
239     if (parentIdx.column() > 0)
240         return 0;
241 
242     return indexToNode(parentIdx)->count();
243 }
244 
245 int BranchModel::columnCount(const QModelIndex &parent) const
246 {
247     Q_UNUSED(parent);
248     return 2;
249 }
250 
251 QVariant BranchModel::data(const QModelIndex &index, int role) const
252 {
253     BranchNode *node = indexToNode(index);
254     if (!node)
255         return QVariant();
256 
257     switch (role) {
258     case Qt::DisplayRole: {
259         QString res;
260         switch (index.column()) {
261         case 0: {
262             res = node->name;
263             if (!node->tracking.isEmpty())
264                 res += " [" + node->tracking + ']';
265             break;
266         }
267         case 1:
268             if (node->isLeaf() && node->dateTime.isValid())
269                 res = node->dateTime.toString("yyyy-MM-dd HH:mm");
270             break;
271         }
272         return res;
273     }
274     case Qt::EditRole:
275         return index.column() == 0 ? node->fullName().join('/') : QVariant();
276     case Qt::ToolTipRole:
277         if (!node->isLeaf())
278             return QVariant();
279         if (node->toolTip.isEmpty())
280             node->toolTip = toolTip(node->sha);
281         return node->toolTip;
282     case Qt::FontRole:
283     {
284         QFont font;
285         if (!node->isLeaf()) {
286             font.setBold(true);
287         } else if (node == m_currentBranch) {
288             font.setBold(true);
289             font.setUnderline(true);
290         }
291         return font;
292     }
293     default:
294         return QVariant();
295     }
296 }
297 
298 bool BranchModel::setData(const QModelIndex &index, const QVariant &value, int role)
299 {
300     if (index.column() != 0 || role != Qt::EditRole)
301         return false;
302     BranchNode *node = indexToNode(index);
303     if (!node)
304         return false;
305 
306     const QString newName = value.toString();
307     if (newName.isEmpty())
308         return false;
309 
310     const QString oldName = node->fullName().join('/');
311     if (oldName == newName)
312         return false;
313 
314     renameBranch(oldName, newName);
315     return true;
316 }
317 
318 Qt::ItemFlags BranchModel::flags(const QModelIndex &index) const
319 {
320     BranchNode *node = indexToNode(index);
321     if (!node)
322         return Qt::NoItemFlags;
323     if (index.column() == 0 && node->isLeaf() && node->isLocal())
324         return Qt::ItemIsSelectable | Qt::ItemIsEditable | Qt::ItemIsEnabled;
325     else
326         return Qt::ItemIsSelectable | Qt::ItemIsEnabled;
327 }
328 
329 void BranchModel::clear()
330 {
331     for (BranchNode *root : qAsConst(m_rootNode->children)) {
332         while (root->count())
333             delete root->children.takeLast();
334     }
335     if (hasTags())
336         m_rootNode->children.takeLast();
337 
338     m_currentBranch = nullptr;
339     m_obsoleteLocalBranches.clear();
340 }
341 
342 bool BranchModel::refresh(const QString &workingDirectory, QString *errorMessage)
343 {
344     beginResetModel();
345     clear();
346     if (workingDirectory.isEmpty()) {
347         endResetModel();
348         return false;
349     }
350 
351     m_currentSha = m_client->synchronousTopRevision(workingDirectory);
352     const QStringList args = {"--format=%(objectname)\t%(refname)\t%(upstream:short)\t"
353                               "%(*objectname)\t%(committerdate:raw)\t%(*committerdate:raw)"};
354     QString output;
355     if (!m_client->synchronousForEachRefCmd(workingDirectory, args, &output, errorMessage))
356         VcsOutputWindow::appendError(*errorMessage);
357 
358     m_workingDirectory = workingDirectory;
359     const QStringList lines = output.split('\n');
360     for (const QString &l : lines)
361         parseOutputLine(l);
362 
363     if (m_currentBranch) {
364         if (m_currentBranch->isLocal())
365             m_currentBranch = nullptr;
366         setCurrentBranch();
367     }
368 
369     endResetModel();
370 
371     return true;
372 }
373 
374 void BranchModel::setCurrentBranch()
375 {
376     QString currentBranch = m_client->synchronousCurrentLocalBranch(m_workingDirectory);
377     if (currentBranch.isEmpty())
378         return;
379 
380     BranchNode *local = m_rootNode->children.at(LocalBranches);
381     const QStringList branchParts = currentBranch.split('/');
382     for (const QString &branchPart : branchParts) {
383         local = local->childOfName(branchPart);
384         if (!local)
385             return;
386     }
387     m_currentBranch = local;
388 }
389 
390 void BranchModel::renameBranch(const QString &oldName, const QString &newName)
391 {
392     QString errorMessage;
393     QString output;
394     if (!m_client->synchronousBranchCmd(m_workingDirectory, {"-m", oldName,  newName},
395                                         &output, &errorMessage))
396         VcsOutputWindow::appendError(errorMessage);
397     else
398         refresh(m_workingDirectory, &errorMessage);
399 }
400 
401 void BranchModel::renameTag(const QString &oldName, const QString &newName)
402 {
403     QString errorMessage;
404     QString output;
405     if (!m_client->synchronousTagCmd(m_workingDirectory, {newName, oldName},
406                                      &output, &errorMessage)
407             || !m_client->synchronousTagCmd(m_workingDirectory, {"-d", oldName},
408                                             &output, &errorMessage)) {
409         VcsOutputWindow::appendError(errorMessage);
410     } else {
411         refresh(m_workingDirectory, &errorMessage);
412     }
413 }
414 
415 QString BranchModel::workingDirectory() const
416 {
417     return m_workingDirectory;
418 }
419 
420 GitClient *BranchModel::client() const
421 {
422     return m_client;
423 }
424 
425 QModelIndex BranchModel::currentBranch() const
426 {
427     if (!m_currentBranch)
428         return QModelIndex();
429     return nodeToIndex(m_currentBranch, 0);
430 }
431 
432 QString BranchModel::fullName(const QModelIndex &idx, bool includePrefix) const
433 {
434     if (!idx.isValid())
435         return QString();
436     BranchNode *node = indexToNode(idx);
437     if (!node || !node->isLeaf())
438         return QString();
439     return node->fullName(includePrefix).join('/');
440 }
441 
442 QStringList BranchModel::localBranchNames() const
443 {
444     if (!m_rootNode || !m_rootNode->count())
445         return QStringList();
446 
447     return m_rootNode->children.at(LocalBranches)->childrenNames() + m_obsoleteLocalBranches;
448 }
449 
450 QString BranchModel::sha(const QModelIndex &idx) const
451 {
452     if (!idx.isValid())
453         return QString();
454     BranchNode *node = indexToNode(idx);
455     return node->sha;
456 }
457 
458 QDateTime BranchModel::dateTime(const QModelIndex &idx) const
459 {
460     if (!idx.isValid())
461         return QDateTime();
462     BranchNode *node = indexToNode(idx);
463     return node->dateTime;
464 }
465 
466 bool BranchModel::hasTags() const
467 {
468     return m_rootNode->children.count() > Tags;
469 }
470 
471 bool BranchModel::isLocal(const QModelIndex &idx) const
472 {
473     if (!idx.isValid())
474         return false;
475     BranchNode *node = indexToNode(idx);
476     return node->isLocal();
477 }
478 
479 bool BranchModel::isLeaf(const QModelIndex &idx) const
480 {
481     if (!idx.isValid())
482         return false;
483     BranchNode *node = indexToNode(idx);
484     return node->isLeaf();
485 }
486 
487 bool BranchModel::isTag(const QModelIndex &idx) const
488 {
489     if (!idx.isValid() || !hasTags())
490         return false;
491     return indexToNode(idx)->isTag();
492 }
493 
494 void BranchModel::removeBranch(const QModelIndex &idx)
495 {
496     QString branch = fullName(idx);
497     if (branch.isEmpty())
498         return;
499 
500     QString errorMessage;
501     QString output;
502 
503     if (!m_client->synchronousBranchCmd(m_workingDirectory, {"-D", branch}, &output, &errorMessage)) {
504         VcsOutputWindow::appendError(errorMessage);
505         return;
506     }
507     removeNode(idx);
508 }
509 
510 void BranchModel::removeTag(const QModelIndex &idx)
511 {
512     QString tag = fullName(idx);
513     if (tag.isEmpty())
514         return;
515 
516     QString errorMessage;
517     QString output;
518 
519     if (!m_client->synchronousTagCmd(m_workingDirectory, {"-d", tag}, &output, &errorMessage)) {
520         VcsOutputWindow::appendError(errorMessage);
521         return;
522     }
523     removeNode(idx);
524 }
525 
526 void BranchModel::checkoutBranch(const QModelIndex &idx)
527 {
528     QString branch = fullName(idx, !isLocal(idx));
529     if (branch.isEmpty())
530         return;
531 
532     // No StashGuard since this function for now is only used with clean working dir.
533     // If it is ever used from another place, please add StashGuard here
534     m_client->synchronousCheckout(m_workingDirectory, branch);
535 }
536 
537 bool BranchModel::branchIsMerged(const QModelIndex &idx)
538 {
539     QString branch = fullName(idx);
540     if (branch.isEmpty())
541         return false;
542 
543     QString errorMessage;
544     QString output;
545 
546     if (!m_client->synchronousBranchCmd(m_workingDirectory, {"-a", "--contains", sha(idx)},
547                                         &output, &errorMessage)) {
548         VcsOutputWindow::appendError(errorMessage);
549     }
550 
551     const QStringList lines = output.split('\n', QString::SkipEmptyParts);
552     for (const QString &l : lines) {
553         QString currentBranch = l.mid(2); // remove first letters (those are either
554                                           // "  " or "* " depending on whether it is
555                                           // the currently checked out branch or not)
556         if (currentBranch != branch)
557             return true;
558     }
559     return false;
560 }
561 
562 static int positionForName(BranchNode *node, const QString &name)
563 {
564     int pos = 0;
565     for (pos = 0; pos < node->count(); ++pos) {
566         if (node->children.at(pos)->name >= name)
567             break;
568     }
569     return pos;
570 }
571 
572 QModelIndex BranchModel::addBranch(const QString &name, bool track, const QModelIndex &startPoint)
573 {
574     if (!m_rootNode || !m_rootNode->count())
575         return QModelIndex();
576 
577     const QString trackedBranch = fullName(startPoint);
578     const QString fullTrackedBranch = fullName(startPoint, true);
579     QString startSha;
580     QString output;
581     QString errorMessage;
582     QDateTime branchDateTime;
583 
584     QStringList args = {QLatin1String(track ? "--track" : "--no-track"), name};
585     if (!fullTrackedBranch.isEmpty()) {
586         args << fullTrackedBranch;
587         startSha = sha(startPoint);
588         branchDateTime = dateTime(startPoint);
589     } else {
590         QString output;
591         QString errorMessage;
592         const QStringList arguments({"-n1", "--format=%H %ct"});
593         if (m_client->synchronousLog(m_workingDirectory, arguments, &output, &errorMessage,
594                                       VcsCommand::SuppressCommandLogging)) {
595             const QStringList values = output.split(' ');
596             startSha = values[0];
597             branchDateTime = QDateTime::fromTime_t(values[1].toInt());
598         }
599     }
600 
601     if (!m_client->synchronousBranchCmd(m_workingDirectory, args, &output, &errorMessage)) {
602         VcsOutputWindow::appendError(errorMessage);
603         return QModelIndex();
604     }
605 
606     BranchNode *local = m_rootNode->children.at(LocalBranches);
607     const int slash = name.indexOf('/');
608     const QString leafName = slash == -1 ? name : name.mid(slash + 1);
609     bool added = false;
610     if (slash != -1) {
611         const QString nodeName = name.left(slash);
612         int pos = positionForName(local, nodeName);
613         BranchNode *child = (pos == local->count()) ? nullptr : local->children.at(pos);
614         if (!child || child->name != nodeName) {
615             child = new BranchNode(nodeName);
616             beginInsertRows(nodeToIndex(local, 0), pos, pos);
617             added = true;
618             child->parent = local;
619             local->children.insert(pos, child);
620         }
621         local = child;
622     }
623     int pos = positionForName(local, leafName);
624     auto newNode = new BranchNode(leafName, startSha, track ? trackedBranch : QString(),
625                                   branchDateTime);
626     if (!added)
627         beginInsertRows(nodeToIndex(local, 0), pos, pos);
628     newNode->parent = local;
629     local->children.insert(pos, newNode);
630     endInsertRows();
631     return nodeToIndex(newNode, 0);
632 }
633 
634 void BranchModel::setRemoteTracking(const QModelIndex &trackingIndex)
635 {
636     QModelIndex current = currentBranch();
637     QTC_ASSERT(current.isValid(), return);
638     const QString currentName = fullName(current);
639     const QString shortTracking = fullName(trackingIndex);
640     const QString tracking = fullName(trackingIndex, true);
641     m_client->synchronousSetTrackingBranch(m_workingDirectory, currentName, tracking);
642     m_currentBranch->tracking = shortTracking;
643     emit dataChanged(current, current);
644 }
645 
646 void BranchModel::setOldBranchesIncluded(bool value)
647 {
648     m_oldBranchesIncluded = value;
649 }
650 
651 Utils::optional<QString> BranchModel::remoteName(const QModelIndex &idx) const
652 {
653     if (!idx.isValid())
654         return Utils::nullopt;
655 
656     if (isLocal(idx) || isLeaf(idx) || isTag(idx))
657         return Utils::nullopt;
658 
659     const BranchNode *node = indexToNode(idx);
660     const QString remote = node ? node->name : QString();
661 
662     // fetch all remotes when "Remote Branches" is selected
663     if (remote == m_remoteBranchesTitle)
664         return QString();
665 
666     return remote;
667 }
668 
669 void BranchModel::parseOutputLine(const QString &line)
670 {
671     if (line.size() < 3)
672         return;
673 
674     // objectname, refname, upstream:short, *objectname, committerdate:raw, *committerdate:raw
675     QStringList lineParts = line.split('\t');
676     const QString shaDeref = lineParts.at(3);
677     const QString sha = shaDeref.isEmpty() ? lineParts.at(0) : shaDeref;
678     const QString fullName = lineParts.at(1);
679     const QString upstream = lineParts.at(2);
680     QDateTime dateTime;
681     const bool current = (sha == m_currentSha);
682     QString strDateTime = lineParts.at(5);
683     if (strDateTime.isEmpty())
684         strDateTime = lineParts.at(4);
685     if (!strDateTime.isEmpty()) {
686         const uint timeT = strDateTime.leftRef(strDateTime.indexOf(' ')).toUInt();
687         dateTime = QDateTime::fromTime_t(timeT);
688     }
689 
690     if (!m_oldBranchesIncluded && !current && dateTime.isValid()) {
691         const qint64 age = dateTime.daysTo(QDateTime::currentDateTime());
692         if (age > Constants::OBSOLETE_COMMIT_AGE_IN_DAYS) {
693             const QString heads = "refs/heads/";
694             if (fullName.startsWith(heads))
695                 m_obsoleteLocalBranches.append(fullName.mid(heads.size()));
696             return;
697         }
698     }
699     bool showTags = m_client->settings().boolValue(GitSettings::showTagsKey);
700 
701     // insert node into tree:
702     QStringList nameParts = fullName.split('/');
703     nameParts.removeFirst(); // remove refs...
704 
705     BranchNode *root = nullptr;
706     if (nameParts.first() == "heads") {
707         root = m_rootNode->children.at(LocalBranches);
708     } else if (nameParts.first() == "remotes") {
709         root = m_rootNode->children.at(RemoteBranches);
710     } else if (showTags && nameParts.first() == "tags") {
711         if (!hasTags()) // Tags is missing, add it
712             m_rootNode->append(new BranchNode(tr("Tags"), "refs/tags"));
713         root = m_rootNode->children.at(Tags);
714     } else {
715         return;
716     }
717 
718     nameParts.removeFirst();
719 
720     // limit depth of list. Git basically only ever wants one / and considers the rest as part of
721     // the name.
722     while (nameParts.count() > 3) {
723         nameParts[2] = nameParts.at(2) + '/' + nameParts.at(3);
724         nameParts.removeAt(3);
725     }
726 
727     const QString name = nameParts.last();
728     nameParts.removeLast();
729 
730     auto newNode = new BranchNode(name, sha, upstream, dateTime);
731     root->insert(nameParts, newNode);
732     if (current)
733         m_currentBranch = newNode;
734 }
735 
736 BranchNode *BranchModel::indexToNode(const QModelIndex &index) const
737 {
738     if (index.column() > 1)
739         return nullptr;
740     if (!index.isValid())
741         return m_rootNode;
742     return static_cast<BranchNode *>(index.internalPointer());
743 }
744 
745 QModelIndex BranchModel::nodeToIndex(BranchNode *node, int column) const
746 {
747     if (node == m_rootNode)
748         return QModelIndex();
749     return createIndex(node->parent->rowOf(node), column, static_cast<void *>(node));
750 }
751 
752 void BranchModel::removeNode(const QModelIndex &idx)
753 {
754     QModelIndex nodeIndex = idx; // idx is a leaf, so count must be 0.
755     BranchNode *node = indexToNode(nodeIndex);
756     while (node->count() == 0 && node->parent != m_rootNode) {
757         BranchNode *parentNode = node->parent;
758         const QModelIndex parentIndex = nodeToIndex(parentNode, 0);
759         const int nodeRow = nodeIndex.row();
760         beginRemoveRows(parentIndex, nodeRow, nodeRow);
761         parentNode->children.removeAt(nodeRow);
762         delete node;
763         endRemoveRows();
764         node = parentNode;
765         nodeIndex = parentIndex;
766     }
767 }
768 
769 QString BranchModel::toolTip(const QString &sha) const
770 {
771     // Show the sha description excluding diff as toolTip
772     QString output;
773     QString errorMessage;
774     QStringList arguments("-n1");
775     arguments << sha;
776     if (!m_client->synchronousLog(m_workingDirectory, arguments, &output, &errorMessage,
777                                   VcsCommand::SuppressCommandLogging)) {
778         return errorMessage;
779     }
780     return output;
781 }
782 
783 } // namespace Internal
784 } // namespace Git
785 
