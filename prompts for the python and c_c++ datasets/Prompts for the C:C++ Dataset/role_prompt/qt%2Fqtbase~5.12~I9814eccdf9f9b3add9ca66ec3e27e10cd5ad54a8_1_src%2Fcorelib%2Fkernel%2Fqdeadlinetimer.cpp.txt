I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 Intel Corporation.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qdeadlinetimer.h"
41 #include "qdeadlinetimer_p.h"
42 
43 QT_BEGIN_NAMESPACE
44 
45 Q_DECL_CONST_FUNCTION static inline QPair<qint64, qint64> toSecsAndNSecs(qint64 nsecs)
46 {
47     qint64 secs = nsecs / (1000*1000*1000);
48     if (nsecs < 0)
49         --secs;
50     nsecs -= secs * 1000*1000*1000;
51     return qMakePair(secs, nsecs);
52 }
53 
54 /*!
55     \class QDeadlineTimer
56     \inmodule QtCore
57     \brief The QDeadlineTimer class marks a deadline in the future.
58     \since 5.8
59 
60     \reentrant
61     \ingroup tools
62 
63     The QDeadlineTimer class is usually used to calculate future deadlines and
64     verify whether the deadline has expired. QDeadlineTimer can also be used
65     for deadlines without expiration ("forever"). It forms a counterpart to
66     QElapsedTimer, which calculates how much time has elapsed since
67     QElapsedTimer::start() was called.
68 
69     QDeadlineTimer provides a more convenient API compared to
70     QElapsedTimer::hasExpired().
71 
72     The typical use-case for the class is to create a QDeadlineTimer before the
73     operation in question is started, and then use remainingTime() or
74     hasExpired() to determine whether to continue trying the operation.
75     QDeadlineTimer objects can be passed to functions being called to execute
76     this operation so they know how long to still operate.
77 
78     \code
79     void executeOperation(int msecs)
80     {
81         QDeadlineTimer deadline(msecs);
82         do {
83             if (readFromDevice(deadline.remainingTime())
84                 break;
85             waitForReadyRead(deadline);
86         } while (!deadline.hasExpired());
87     }
88     \endcode
89 
90     Many QDeadlineTimer functions deal with time out values, which all are
91     measured in milliseconds. There are two special values, the same as many
92     other Qt functions named \c{waitFor} or similar:
93 
94     \list
95       \li 0: no time left, expired
96       \li -1: infinite time left, timer never expires
97     \endlist
98 
99     \section1 Reference Clocks
100 
101     QDeadlineTimer will use the same clock as QElapsedTimer (see
102     QElapsedTimer::clockType() and QElapsedTimer::isMonotonic()).
103 
104     \section1 Timer types
105 
106     Like QTimer, QDeadlineTimer can select among different levels of coarseness
107     on the timers. You can select precise timing by passing Qt::PreciseTimer to
108     the functions that set of change the timer, or you can select coarse timing
109     by passing Qt::CoarseTimer. Qt::VeryCoarseTimer is currently interpreted
110     the same way as Qt::CoarseTimer.
111 
112     This feature is dependent on support from the operating system: if the OS
113     does not support a coarse timer functionality, then QDeadlineTimer will
114     behave like Qt::PreciseTimer was passed.
115 
116     QDeadlineTimer defaults to Qt::CoarseTimer because on operating systems
117     that do support coarse timing, making timing calls to that clock source is
118     often much more efficient. The level of coarseness depends on the
119     operating system, but should be in the order of a couple of milliseconds.
120 
121     \section1 \c{std::chrono} Compatibility
122 
123     QDeadlineTimer is compatible with the \c{std::chrono} API from C++11 and
124     can be constructed from or compared to both \c{std::chrono::duration} and
125     \c{std::chrono::time_point} objects. In addition, it is fully compatible
126     with the time literals from C++14, which allow one to write code as:
127 
128     \code
129         using namespace std::chrono;
130         using namespace std::chrono_literals;
131 
132         QDeadlineTimer deadline(30s);
133         device->waitForReadyRead(deadline);
134         if (deadline.remainingTime<nanoseconds>() > 300ms)
135             cleanup();
136     \endcode
137 
138     As can be seen in the example above, QDeadlineTimer offers a templated
139     version of remainingTime() and deadline() that can be used to return
140     \c{std::chrono} objects.
141 
142     Note that comparing to \c{time_point} is not as efficient as comparing to
143     \c{duration}, since QDeadlineTimer may need to convert from its own
144     internal clock source to the clock source used by the \c{time_point} object.
145     Also note that, due to this conversion, the deadlines will not be precise,
146     so the following code is not expected to compare equally:
147 
148     \code
149         using namespace std::chrono;
150         using namespace std::chrono_literals;
151         auto now = steady_clock::now();
152         QDeadlineTimer deadline(now + 1s);
153         Q_ASSERT(deadline == now + 1s);
154     \endcode
155 
156     \sa QTime, QTimer, QDeadlineTimer, Qt::TimerType
157 */
158 
159 /*!
160     \enum QDeadlineTimer::ForeverConstant
161 
162     \value Forever      Used when creating a QDeadlineTimer to indicate the
163                         deadline should not expire
164 */
165 
166 /*!
167     \fn QDeadlineTimer::QDeadlineTimer(Qt::TimerType timerType)
168 
169     Constructs an expired QDeadlineTimer object. For this object,
170     remainingTime() will return 0.
171 
172     The timer type \a timerType may be ignored, since the timer is already
173     expired. Similarly, for optimization purposes, this function will not
174     attempt to obtain the current time and will use a value known to be in the
175     past. Therefore, deadline() may return an unexpected value and this object
176     cannot be used in calculation of how long it is overdue. If that
177     functionality is required, use QDeadlineTimer::current().
178 
179     \sa hasExpired(), remainingTime(), Qt::TimerType, current()
180 */
181 
182 /*!
183     \fn QDeadlineTimer::QDeadlineTimer(ForeverConstant, Qt::TimerType timerType)
184 
185     QDeadlineTimer objects created with ForeverConstant never expire.
186     For such objects, remainingTime() will return -1, deadline() will return the
187     maximum value, and isForever() will return true.
188 
189     The timer type \a timerType may be ignored, since the timer is already
190     expired.
191 
192     \sa ForeverConstant, hasExpired(), isForever(), remainingTime(), timerType()
193 */
194 
195 /*!
196     Constructs a QDeadlineTimer object with an expiry time of \a msecs msecs
197     from the moment of the creation of this object, if msecs is positive. If \a
198     msecs is zero, this QDeadlineTimer will be marked as expired, causing
199     remainingTime() to return zero and deadline() to return an indeterminate
200     time point in the past. If \a msecs is -1, the timer will be set it to
201     never expire, causing remainingTime() to return -1 and deadline() to return
202     the maximum value.
203 
204     The QDeadlineTimer object will be constructed with the specified timer \a type.
205 
206     For optimization purposes, if \a msecs is zero, this function may skip
207     obtaining the current time and may instead use a value known to be in the
208     past. If that happens, deadline() may return an unexpected value and this
209     object cannot be used in calculation of how long it is overdue. If that
210     functionality is required, use QDeadlineTimer::current() and add time to
211     it.
212 
213     \sa hasExpired(), isForever(), remainingTime(), setRemainingTime()
214 */
215 QDeadlineTimer::QDeadlineTimer(qint64 msecs, Qt::TimerType type) Q_DECL_NOTHROW
216     : t2(0)
217 {
218     setRemainingTime(msecs, type);
219 }
220 
221 /*!
222     \fn template <class Clock, class Duration> QDeadlineTimer::QDeadlineTimer(std::chrono::time_point<Clock, Duration> deadline, Qt::TimerType type)
223 
224     Constructs a QDeadlineTimer object with a deadline at \a deadline time
225     point, converting from the clock source \c{Clock} to Qt's internal clock
226     source (see QElapsedTimer::clcokType()).
227 
228     If \a deadline is in the past, this QDeadlineTimer object is set to
229     expired, whereas if \a deadline is equal to \c{Duration::max()}, then this
230     object is set to never expire.
231 
232     The QDeadlineTimer object will be constructed with the specified timer \a type.
233 
234     \sa hasExpired(), isForever(), remainingTime(), setDeadline()
235 */
236 
237 /*!
238     \fn template <class Rep, class Period> QDeadlineTimer::QDeadlineTimer(std::chrono::duration<Rep, Period> remaining, Qt::TimerType type)
239 
240     Constructs a QDeadlineTimer object with a remaining time of \a remaining.
241     If \a remaining is zero or negative, this QDeadlineTimer object will be
242     mark as expired, whereas if \a remaining is equal to \c{duration::max()},
243     the object will be set to never expire.
244 
245     The QDeadlineTimer object will be constructed with the specified timer \a type.
246 
247     This constructor can be used with C++14's user-defined literals for time, such as in:
248 
249     \code
250         using namespace std::chrono_literals;
251         QDeadlineTimer deadline(250ms);
252     \endcode
253 
254     For optimization purposes, if \a remaining is zero or negative, this
255     function may skip obtaining the current time and may instead use a value
256     known to be in the past. If that happens, deadline() may return an
257     unexpected value and this object cannot be used in calculation of how long
258     it is overdue. If that functionality is required, use
259     QDeadlineTimer::current() and add time to it.
260 
261     \sa hasExpired(), isForever(), remainingTime(), setRemainingTime()
262 */
263 
264 /*!
265     \fn template <class Clock, class Duration> void QDeadlineTimer::setDeadline(std::chrono::time_point<Clock, Duration> deadline, Qt::TimerType type)
266 
267     Sets this QDeadlineTimer to the deadline marked by \a deadline time
268     point, converting from the clock source \c{Clock} to Qt's internal clock
269     source (see QElapsedTimer::clcokType()).
270 
271     If \a deadline is in the past, this QDeadlineTimer object is set to
272     expired, whereas if \a deadline is equal to \c{Duration::max()}, then this
273     object is set to never expire.
274 
275     The timer type for this QDeadlineTimer object will be set to the specified \a type.
276 
277     \sa hasExpired(), isForever(), remainingTime(),
278 */
279 
280 /*!
281     Sets the remaining time for this QDeadlineTimer object to \a msecs
282     milliseconds from now, if \a msecs has a positive value. If \a msecs is
283     zero, this QDeadlineTimer object will be marked as expired, whereas a value
284     of -1 will set it to never expire.
285 
286     The timer type for this QDeadlineTimer object will be set to the specified \a timerType.
287 
288     \sa setPreciseRemainingTime(), hasExpired(), isForever(), remainingTime()
289 */
290 void QDeadlineTimer::setRemainingTime(qint64 msecs, Qt::TimerType timerType) Q_DECL_NOTHROW
291 {
292     if (msecs == -1)
293         *this = QDeadlineTimer(Forever, timerType);
294     else
295         setPreciseRemainingTime(msecs / 1000, msecs % 1000 * 1000 * 1000, timerType);
296 }
297 
298 /*!
299     Sets the remaining time for this QDeadlineTimer object to \a secs seconds
300     plus \a nsecs nanoseconds from now, if \a secs has a positive value. If \a
301     secs is -1, this QDeadlineTimer will be set it to never expire. If both
302     parameters are zero, this QDeadlineTimer will be marked as expired.
303 
304     The timer type for this QDeadlineTimer object will be set to the specified
305     \a timerType.
306 
307     \sa setRemainingTime(), hasExpired(), isForever(), remainingTime()
308 */
309 void QDeadlineTimer::setPreciseRemainingTime(qint64 secs, qint64 nsecs, Qt::TimerType timerType) Q_DECL_NOTHROW
310 {
311     if (secs == -1) {
312         *this = QDeadlineTimer(Forever, timerType);
313         return;
314     }
315 
316     *this = current(timerType);
317     if (QDeadlineTimerNanosecondsInT2) {
318         t1 += secs + toSecsAndNSecs(nsecs).first;
319         t2 += toSecsAndNSecs(nsecs).second;
320         if (t2 > 1000*1000*1000) {
321             t2 -= 1000*1000*1000;
322             ++t1;
323         }
324     } else {
325         t1 += secs * 1000 * 1000 * 1000 + nsecs;
326     }
327 }
328 
329 /*!
330     \overload
331     \fn template <class Rep, class Period> void QDeadlineTimer::setRemainingTime(std::chrono::duration<Rep, Period> remaining, Qt::TimerType type)
332 
333     Sets the remaining time for this QDeadlineTimer object to \a remaining. If
334     \a remaining is zero or negative, this QDeadlineTimer object will be mark
335     as expired, whereas if \a remaining is equal to \c{duration::max()}, the
336     object will be set to never expire.
337 
338     The timer type for this QDeadlineTimer object will be set to the specified \a type.
339 
340     This function can be used with C++14's user-defined literals for time, such as in:
341 
342     \code
343         using namespace std::chrono_literals;
344         deadline.setRemainingTime(250ms);
345     \endcode
346 
347     \note Qt detects the necessary C++14 compiler support by way of the feature
348     test recommendations from
349     \l{https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations}
350     {C++ Committee's Standing Document 6}.
351 
352     \sa setDeadline(), remainingTime(), hasExpired(), isForever()
353 */
354 
355 /*!
356     \fn bool QDeadlineTimer::isForever() const
357 
358     Returns true if this QDeadlineTimer object never expires, false otherwise.
359     For timers that never expire, remainingTime() always returns -1 and
360     deadline() returns the maximum value.
361 
362     \sa ForeverConstant, hasExpired(), remainingTime()
363 */
364 
365 /*!
366     Returns true if this QDeadlineTimer object has expired, false if there
367     remains time left. For objects that have expired, remainingTime() will
368     return zero and deadline() will return a time point in the past.
369 
370     QDeadlineTimer objects created with the \l {ForeverConstant} never expire
371     and this function always returns false for them.
372 
373     \sa isForever(), remainingTime()
374 */
375 bool QDeadlineTimer::hasExpired() const Q_DECL_NOTHROW
376 {
377     if (isForever())
378         return false;
379     return *this <= current(timerType());
380 }
381 
382 /*!
383     \fn Qt::TimerType QDeadlineTimer::timerType() const
384 
385     Returns the timer type is active for this object.
386 
387     \sa setTimerType()
388 */
389 
390 /*!
391     Changes the timer type for this object to \a timerType.
392 
393     The behavior for each possible value of \a timerType is operating-system
394     dependent. Qt::PreciseTimer will use the most precise timer that Qt can
395     find, with resolution of 1 millisecond or better, whereas QDeadlineTimer
396     will try to use a more coarse timer for Qt::CoarseTimer and
397     Qt::VeryCoarseTimer.
398 
399     \sa Qt::TimerType
400  */
401 void QDeadlineTimer::setTimerType(Qt::TimerType timerType)
402 {
403     type = timerType;
404 }
405 
406 /*!
407     Returns the remaining time in this QDeadlineTimer object in milliseconds.
408     If the timer has already expired, this function will return zero and it is
409     not possible to obtain the amount of time overdue with this function (to do
410     that, see deadline()). If the timer was set to never expire, this function
411     returns -1.
412 
413     This function is suitable for use in Qt APIs that take a millisecond
414     timeout, such as the many \l QIODevice \c waitFor functions or the timed
415     lock functions in \l QMutex, \l QWaitCondition, \l QSemaphore, or
416     \l QReadWriteLock. For example:
417 
418     \code
419         mutex.tryLock(deadline.remainingTime());
420     \endcode
421 
422     \sa remainingTimeNSecs(), isForever(), hasExpired()
423 */
424 qint64 QDeadlineTimer::remainingTime() const Q_DECL_NOTHROW
425 {
426     qint64 ns = remainingTimeNSecs();
427     return ns <= 0 ? ns : (ns + 999999) / (1000 * 1000);
428 }
429 
430 /*!
431     Returns the remaining time in this QDeadlineTimer object in nanoseconds. If
432     the timer has already expired, this function will return zero and it is not
433     possible to obtain the amount of time overdue with this function. If the
434     timer was set to never expire, this function returns -1.
435 
436     \sa remainingTime(), isForever(), hasExpired()
437 */
438 qint64 QDeadlineTimer::remainingTimeNSecs() const Q_DECL_NOTHROW
439 {
440     if (isForever())
441         return -1;
442     qint64 raw = rawRemainingTimeNSecs();
443     return raw < 0 ? 0 : raw;
444 }
445 
446 /*!
447     \internal
448     Same as remainingTimeNSecs, but may return negative remaining times. Does
449     not deal with Forever.
450 */
451 qint64 QDeadlineTimer::rawRemainingTimeNSecs() const Q_DECL_NOTHROW
452 {
453     QDeadlineTimer now = current(timerType());
454     if (QDeadlineTimerNanosecondsInT2)
455         return (t1 - now.t1) * (1000*1000*1000) + t2 - now.t2;
456     return t1 - now.t1;
457 }
458 
459 /*!
460     Returns the absolute time point for the deadline stored in QDeadlineTimer
461     object, calculated in milliseconds relative to the reference clock, the
462     same as QElapsedTimer::msecsSinceReference(). The value will be in the past
463     if this QDeadlineTimer has expired.
464 
465     If this QDeadlineTimer never expires, this function returns
466     \c{std::numeric_limits<qint64>::max()}.
467 
468     This function can be used to calculate the amount of time a timer is
469     overdue, by subtracting QDeadlineTimer::current() or
470     QElapsedTimer::msecsSinceReference(), as in the following example:
471 
472     \code
473         qint64 realTimeLeft = deadline.deadline();
474         if (realTimeLeft != (std::numeric_limits<qint64>::max)()) {
475             realTimeLeft -= QDeadlineTimer::current().deadline();
476             // or:
477             //QElapsedTimer timer;
478             //timer.start();
479             //realTimeLeft -= timer.msecsSinceReference();
480         }
481     \endcode
482 
483     \note Timers that were created as expired have an indetermine time point in
484     the past as their deadline, so the above calculation may not work.
485 
486     \sa remainingTime(), deadlineNSecs(), setDeadline()
487 */
488 qint64 QDeadlineTimer::deadline() const Q_DECL_NOTHROW
489 {
490     if (isForever())
491         return t1;
492     return deadlineNSecs() / (1000 * 1000);
493 }
494 
495 /*!
496     Returns the absolute time point for the deadline stored in QDeadlineTimer
497     object, calculated in nanoseconds relative to the reference clock, the
498     same as QElapsedTimer::msecsSinceReference(). The value will be in the past
499     if this QDeadlineTimer has expired.
500 
501     If this QDeadlineTimer never expires, this function returns
502     \c{std::numeric_limits<qint64>::max()}.
503 
504     This function can be used to calculate the amount of time a timer is
505     overdue, by subtracting QDeadlineTimer::current(), as in the following
506     example:
507 
508     \code
509         qint64 realTimeLeft = deadline.deadlineNSecs();
510         if (realTimeLeft != std::numeric_limits<qint64>::max())
511             realTimeLeft -= QDeadlineTimer::current().deadlineNSecs();
512     \endcode
513 
514     \note Timers that were created as expired have an indetermine time point in
515     the past as their deadline, so the above calculation may not work.
516 
517     \sa remainingTime(), deadlineNSecs()
518 */
519 qint64 QDeadlineTimer::deadlineNSecs() const Q_DECL_NOTHROW
520 {
521     if (isForever())
522         return t1;
523     if (QDeadlineTimerNanosecondsInT2)
524         return t1 * 1000 * 1000 * 1000 + t2;
525     return t1;
526 }
527 
528 /*!
529     Sets the deadline for this QDeadlineTimer object to be the \a msecs
530     absolute time point, counted in milliseconds since the reference clock (the
531     same as QElapsedTimer::msecsSinceReference()), and the timer type to \a
532     timerType. If the value is in the past, this QDeadlineTimer will be marked
533     as expired.
534 
535     If \a msecs is \c{std::numeric_limits<qint64>::max()}, this QDeadlineTimer
536     will be set to never expire.
537 
538     \sa setPreciseDeadline(), deadline(), deadlineNSecs(), setRemainingTime()
539 */
540 void QDeadlineTimer::setDeadline(qint64 msecs, Qt::TimerType timerType) Q_DECL_NOTHROW
541 {
542     if (msecs == (std::numeric_limits<qint64>::max)()) {
543         setPreciseDeadline(msecs, 0, timerType);    // msecs == MAX implies Forever
544     } else {
545         setPreciseDeadline(msecs / 1000, msecs % 1000 * 1000 * 1000, timerType);
546     }
547 }
548 
549 /*!
550     Sets the deadline for this QDeadlineTimer object to be \a secs seconds and
551     \a nsecs nanoseconds since the reference clock epoch (the same as
552     QElapsedTimer::msecsSinceReference()), and the timer type to \a timerType.
553     If the value is in the past, this QDeadlineTimer will be marked as expired.
554 
555     If \a secs or \a nsecs is \c{std::numeric_limits<qint64>::max()}, this
556     QDeadlineTimer will be set to never expire. If \a nsecs is more than 1
557     billion nanoseconds (1 second), then \a secs will be adjusted accordingly.
558 
559     \sa setDeadline(), deadline(), deadlineNSecs(), setRemainingTime()
560 */
561 void QDeadlineTimer::setPreciseDeadline(qint64 secs, qint64 nsecs, Qt::TimerType timerType) Q_DECL_NOTHROW
562 {
563     type = timerType;
564     if (secs == (std::numeric_limits<qint64>::max)() || nsecs == (std::numeric_limits<qint64>::max)()) {
565         *this = QDeadlineTimer(Forever, timerType);
566     } else if (QDeadlineTimerNanosecondsInT2) {
567         t1 = secs + toSecsAndNSecs(nsecs).first;
568         t2 = toSecsAndNSecs(nsecs).second;
569     } else {
570         t1 = secs * (1000*1000*1000) + nsecs;
571     }
572 }
573 
574 /*!
575     Returns a QDeadlineTimer object whose deadline is extended from \a dt's
576     deadline by \a nsecs nanoseconds. If \a dt was set to never expire, this
577     function returns a QDeadlineTimer that will not expire either.
578 
579     \note if \a dt was created as expired, its deadline is indeterminate and
580     adding an amount of time may or may not cause it to become unexpired.
581 */
582 QDeadlineTimer QDeadlineTimer::addNSecs(QDeadlineTimer dt, qint64 nsecs) Q_DECL_NOTHROW
583 {
584     if (dt.isForever() || nsecs == (std::numeric_limits<qint64>::max)()) {
585         dt = QDeadlineTimer(Forever, dt.timerType());
586     } else if (QDeadlineTimerNanosecondsInT2) {
587         dt.t1 += toSecsAndNSecs(nsecs).first;
588         dt.t2 += toSecsAndNSecs(nsecs).second;
589         if (dt.t2 > 1000*1000*1000) {
590             dt.t2 -= 1000*1000*1000;
591             ++dt.t1;
592         }
593     } else {
594         dt.t1 += nsecs;
595     }
596     return dt;
597 }
598 
599 /*!
600     \fn QDeadlineTimer QDeadlineTimer::current(Qt::TimerType timerType)
601 
602     Returns a QDeadlineTimer that is expired but is guaranteed to contain the
603     current time. Objects created by this function can participate in the
604     calculation of how long a timer is overdue, using the deadline() function.
605 
606     The QDeadlineTimer object will be constructed with the specified \a timerType.
607 */
608 
609 /*!
610     \fn bool operator==(QDeadlineTimer d1, QDeadlineTimer d2)
611     \relates QDeadlineTimer
612 
613     Returns true if the deadline on \a d1 and the deadline in \a d2 are the
614     same, false otherwise. The timer type used to create the two deadlines is
615     ignored. This function is equivalent to:
616 
617     \code
618         return d1.deadlineNSecs() == d2.deadlineNSecs();
619     \endcode
620 
621     \note comparing QDeadlineTimer objects with different timer types is
622     not supported and may result in unpredictable behavior.
623 */
624 
625 /*!
626     \fn bool operator!=(QDeadlineTimer d1, QDeadlineTimer d2)
627     \relates QDeadlineTimer
628 
629     Returns true if the deadline on \a d1 and the deadline in \a d2 are
630     diferent, false otherwise. The timer type used to create the two deadlines
631     is ignored. This function is equivalent to:
632 
633     \code
634         return d1.deadlineNSecs() != d2.deadlineNSecs();
635     \endcode
636 
637     \note comparing QDeadlineTimer objects with different timer types is
638     not supported and may result in unpredictable behavior.
639 */
640 
641 /*!
642     \fn bool operator<(QDeadlineTimer d1, QDeadlineTimer d2)
643     \relates QDeadlineTimer
644 
645     Returns true if the deadline on \a d1 is earlier than the deadline in \a
646     d2, false otherwise. The timer type used to create the two deadlines is
647     ignored. This function is equivalent to:
648 
649     \code
650         return d1.deadlineNSecs() < d2.deadlineNSecs();
651     \endcode
652 
653     \note comparing QDeadlineTimer objects with different timer types is
654     not supported and may result in unpredictable behavior.
655 */
656 
657 /*!
658     \fn bool operator<=(QDeadlineTimer d1, QDeadlineTimer d2)
659     \relates QDeadlineTimer
660 
661     Returns true if the deadline on \a d1 is earlier than or the same as the
662     deadline in \a d2, false otherwise. The timer type used to create the two
663     deadlines is ignored. This function is equivalent to:
664 
665     \code
666         return d1.deadlineNSecs() <= d2.deadlineNSecs();
667     \endcode
668 
669     \note comparing QDeadlineTimer objects with different timer types is
670     not supported and may result in unpredictable behavior.
671 */
672 
673 /*!
674     \fn bool operator>(QDeadlineTimer d1, QDeadlineTimer d2)
675     \relates QDeadlineTimer
676 
677     Returns true if the deadline on \a d1 is later than the deadline in \a
678     d2, false otherwise. The timer type used to create the two deadlines is
679     ignored. This function is equivalent to:
680 
681     \code
682         return d1.deadlineNSecs() > d2.deadlineNSecs();
683     \endcode
684 
685     \note comparing QDeadlineTimer objects with different timer types is
686     not supported and may result in unpredictable behavior.
687 */
688 
689 /*!
690     \fn bool operator>=(QDeadlineTimer d1, QDeadlineTimer d2)
691     \relates QDeadlineTimer
692 
693     Returns true if the deadline on \a d1 is later than or the same as the
694     deadline in \a d2, false otherwise. The timer type used to create the two
695     deadlines is ignored. This function is equivalent to:
696 
697     \code
698         return d1.deadlineNSecs() >= d2.deadlineNSecs();
699     \endcode
700 
701     \note comparing QDeadlineTimer objects with different timer types is
702     not supported and may result in unpredictable behavior.
703 */
704 
705 /*!
706     \fn QDeadlineTimer operator+(QDeadlineTimer dt, qint64 msecs)
707     \relates QDeadlineTimer
708 
709     Returns a QDeadlineTimer object whose deadline is \a msecs later than the
710     deadline stored in \a dt. If \a dt is set to never expire, this function
711     returns a QDeadlineTimer that does not expire either.
712 
713     To add times of precision greater than 1 millisecond, use addNSecs().
714 */
715 
716 /*!
717     \fn QDeadlineTimer operator+(qint64 msecs, QDeadlineTimer dt)
718     \relates QDeadlineTimer
719 
720     Returns a QDeadlineTimer object whose deadline is \a msecs later than the
721     deadline stored in \a dt. If \a dt is set to never expire, this function
722     returns a QDeadlineTimer that does not expire either.
723 
724     To add times of precision greater than 1 millisecond, use addNSecs().
725 */
726 
727 /*!
728     \fn QDeadlineTimer operator-(QDeadlineTimer dt, qint64 msecs)
729     \relates QDeadlineTimer
730 
731     Returns a QDeadlineTimer object whose deadline is \a msecs before the
732     deadline stored in \a dt. If \a dt is set to never expire, this function
733     returns a QDeadlineTimer that does not expire either.
734 
735     To subtract times of precision greater than 1 millisecond, use addNSecs().
736 */
737 
738 /*!
739     \fn QDeadlineTimer &QDeadlineTimer::operator+=(qint64 msecs)
740 
741     Extends this QDeadlineTimer object by \a msecs milliseconds and returns
742     itself. If this object is set to never expire, this function does nothing.
743 
744     To add times of precision greater than 1 millisecond, use addNSecs().
745 */
746 
747 /*!
748     \fn QDeadlineTimer &QDeadlineTimer::operator-=(qint64 msecs)
749 
750     Shortens this QDeadlineTimer object by \a msecs milliseconds and returns
751     itself. If this object is set to never expire, this function does nothing.
752 
753     To subtract times of precision greater than 1 millisecond, use addNSecs().
754 */
755 
756 /*!
757   \fn void QDeadlineTimer::swap(QDeadlineTimer &other)
758 
759   Swaps this deadline timer with the \a other deadline timer.
760  */
761 
762 /*!
763   \fn template <class Clock, class Duration> QDeadlineTimer & QDeadlineTimer::operator=(std::chrono::time_point<Clock, Duration> deadline_)
764 
765   Assigns \a deadline_ to this deadline timer.
766  */
767 
768 /*!
769   \fn template <class Rep, class Period> QDeadlineTimer & QDeadlineTimer::operator=(std::chrono::duration<Rep, Period> remaining)
770 
771   Sets this deadline timer to the \a remaining time.
772  */
773 
774 /*!
775   \fn std::chrono::nanoseconds QDeadlineTimer::remainingTimeAsDuration() const
776 
777   Returns the time remaining before the deadline.
778  */
779 
780 // the rest of the functions are in qelapsedtimer_xxx.cpp
781 
782 QT_END_NAMESPACE
