I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtTest module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #ifndef QTESTACCESSIBLE_H
41 #define QTESTACCESSIBLE_H
42 
43 #if 0
44 // inform syncqt
45 #pragma qt_no_master_include
46 #endif
47 
48 #include <QtCore/qglobal.h>
49 
50 #define QVERIFY_EVENT(event) \
51     QVERIFY(QTestAccessibility::verifyEvent(event))
52 
53 #include <QtCore/qlist.h>
54 #include <QtCore/qdebug.h>
55 #include <QtGui/qaccessible.h>
56 #include <QtGui/qguiapplication.h>
57 #include <QtTest/qttestglobal.h>
58 #include <QtTest/qtestsystem.h>
59 
60 #if QT_CONFIG(accessibility)
61 
62 QT_BEGIN_NAMESPACE
63 
64 
65 class QObject;
66 
67 // Use pointers since we subclass QAccessibleEvent
68 using EventList = QList<QAccessibleEvent*>;
69 
70 bool operator==(const QAccessibleEvent &l, const QAccessibleEvent &r)
71 {
72     if (l.type() != r.type()) {
73 //        qDebug() << "QAccessibleEvent with wrong type: " << qAccessibleEventString(l.type()) << " and " << qAccessibleEventString(r.type());
74         return false;
75     }
76     if (l.object() != r.object() ||
77             l.child() != r.child()) {
78 //        qDebug() << "QAccessibleEvent for wrong object: " << l.object() << " and " << r.object() << " child: " << l.child() << " and " << r.child();
79         return false;
80     }
81 
82     if (l.type() == QAccessible::StateChanged) {
83         return static_cast<const QAccessibleStateChangeEvent*>(&l)->changedStates()
84                 == static_cast<const QAccessibleStateChangeEvent*>(&r)->changedStates();
85     } else if (l.type() == QAccessible::TextCaretMoved) {
86         return static_cast<const QAccessibleTextCursorEvent*>(&l)->cursorPosition()
87                 == static_cast<const QAccessibleTextCursorEvent*>(&r)->cursorPosition();
88     } else if (l.type() == QAccessible::TextSelectionChanged) {
89         const QAccessibleTextSelectionEvent *le = static_cast<const QAccessibleTextSelectionEvent*>(&l);
90         const QAccessibleTextSelectionEvent *re = static_cast<const QAccessibleTextSelectionEvent*>(&r);
91         return  le->cursorPosition() == re->cursorPosition() &&
92                 le->selectionStart() == re->selectionStart() &&
93                 le->selectionEnd() == re->selectionEnd();
94     } else if (l.type() == QAccessible::TextInserted) {
95         const QAccessibleTextInsertEvent *le = static_cast<const QAccessibleTextInsertEvent*>(&l);
96         const QAccessibleTextInsertEvent *re = static_cast<const QAccessibleTextInsertEvent*>(&r);
97         return  le->cursorPosition() == re->cursorPosition() &&
98                 le->changePosition() == re->changePosition() &&
99                 le->textInserted() == re->textInserted();
100     } else if (l.type() == QAccessible::TextRemoved) {
101         const QAccessibleTextRemoveEvent *le = static_cast<const QAccessibleTextRemoveEvent*>(&l);
102         const QAccessibleTextRemoveEvent *re = static_cast<const QAccessibleTextRemoveEvent*>(&r);
103         return  le->cursorPosition() == re->cursorPosition() &&
104                 le->changePosition() == re->changePosition() &&
105                 le->textRemoved() == re->textRemoved();
106     } else if (l.type() == QAccessible::TextUpdated) {
107         const QAccessibleTextUpdateEvent *le = static_cast<const QAccessibleTextUpdateEvent*>(&l);
108         const QAccessibleTextUpdateEvent *re = static_cast<const QAccessibleTextUpdateEvent*>(&r);
109         return  le->cursorPosition() == re->cursorPosition() &&
110                 le->changePosition() == re->changePosition() &&
111                 le->textInserted() == re->textInserted() &&
112                 le->textRemoved() == re->textRemoved();
113     } else if (l.type() == QAccessible::ValueChanged) {
114         const QAccessibleValueChangeEvent *le = static_cast<const QAccessibleValueChangeEvent*>(&l);
115         const QAccessibleValueChangeEvent *re = static_cast<const QAccessibleValueChangeEvent*>(&r);
116         return le->value() == re->value();
117     }
118     return true;
119 }
120 
121 class QTestAccessibility
122 {
123 public:
124     static void initialize()
125     {
126         if (!instance()) {
127             instance() = new QTestAccessibility;
128             qAddPostRoutine(cleanup);
129         }
130     }
131 
132     static void cleanup()
133     {
134         delete instance();
135         instance() = nullptr;
136     }
137     static void clearEvents() { eventList().clear(); }
138     static EventList events() { return eventList(); }
139     static bool verifyEvent(QAccessibleEvent *ev)
140     {
141         for (int i = 0; eventList().isEmpty() && i < 5; ++i)
142             QTest::qWait(50);
143         if (eventList().isEmpty()) {
144             qWarning("Timeout waiting for accessibility event.");
145             return false;
146         }
147         const bool res = *eventList().first() == *ev;
148         if (!res)
149             qWarning("%s", qPrintable(msgAccessibilityEventListMismatch(eventList(), ev)));
150         delete eventList().takeFirst();
151         return res;
152     }
153     static bool containsEvent(QAccessibleEvent *event) {
154         for (const QAccessibleEvent *ev : qAsConst(eventList())) {
155             if (*ev == *event)
156                 return true;
157         }
158         return false;
159     }
160 
161 private:
162     QTestAccessibility()
163     {
164         QAccessible::installUpdateHandler(updateHandler);
165         QAccessible::installRootObjectHandler(rootObjectHandler);
166     }
167 
168     ~QTestAccessibility()
169     {
170         QAccessible::installUpdateHandler(nullptr);
171         QAccessible::installRootObjectHandler(nullptr);
172     }
173 
174     static void rootObjectHandler(QObject *object)
175     {
176         //    qDebug("rootObjectHandler called %p", object);
177         if (object) {
178             QGuiApplication* app = qobject_cast<QGuiApplication*>(object);
179             if ( !app )
180                 qWarning("root Object is not a QGuiApplication!");
181         } else {
182             qWarning("root Object called with 0 pointer");
183         }
184     }
185 
186     static void updateHandler(QAccessibleEvent *event)
187     {
188         auto ev = copyEvent(event);
189         if (ev->object()) {
190             QObject::connect(ev->object(), &QObject::destroyed, [&, ev](){
191                 auto index= eventList().indexOf(ev);
192                 if (index == -1)
193                     return;
194                 eventList().at(index)->m_object = nullptr;
195             });
196         }
197         eventList().append(ev);
198     }
199     static QAccessibleEvent *copyEvent(QAccessibleEvent *event)
200     {
201         QAccessibleEvent *ev;
202         if (event->type() == QAccessible::StateChanged) {
203             if (event->object())
204                 ev = new QAccessibleStateChangeEvent(event->object(),
205                         static_cast<QAccessibleStateChangeEvent*>(event)->changedStates());
206             else
207                 ev = new QAccessibleStateChangeEvent(event->accessibleInterface(),
208                         static_cast<QAccessibleStateChangeEvent*>(event)->changedStates());
209         } else if (event->type() == QAccessible::TextCaretMoved) {
210             if (event->object())
211                 ev = new QAccessibleTextCursorEvent(event->object(), static_cast<QAccessibleTextCursorEvent*>(event)->cursorPosition());
212             else
213                 ev = new QAccessibleTextCursorEvent(event->accessibleInterface(), static_cast<QAccessibleTextCursorEvent*>(event)->cursorPosition());
214         } else if (event->type() == QAccessible::TextSelectionChanged) {
215             const QAccessibleTextSelectionEvent *original = static_cast<QAccessibleTextSelectionEvent*>(event);
216             QAccessibleTextSelectionEvent *sel;
217             if (event->object())
218                 sel = new QAccessibleTextSelectionEvent(event->object(), original->selectionStart(), original->selectionEnd());
219             else
220                 sel = new QAccessibleTextSelectionEvent(event->accessibleInterface(), original->selectionStart(), original->selectionEnd());
221             sel->setCursorPosition(original->cursorPosition());
222             ev = sel;
223         } else if (event->type() == QAccessible::TextInserted) {
224             const QAccessibleTextInsertEvent *original = static_cast<QAccessibleTextInsertEvent*>(event);
225             QAccessibleTextInsertEvent *ins;
226             if (original->object())
227                 ins = new QAccessibleTextInsertEvent(event->object(), original->changePosition(), original->textInserted());
228             else
229                 ins = new QAccessibleTextInsertEvent(event->accessibleInterface(), original->changePosition(), original->textInserted());
230             ins->setCursorPosition(original->cursorPosition());
231             ev = ins;
232         } else if (event->type() == QAccessible::TextRemoved) {
233             const QAccessibleTextRemoveEvent *original = static_cast<QAccessibleTextRemoveEvent*>(event);
234             QAccessibleTextRemoveEvent *rem;
235             if (event->object())
236                 rem = new QAccessibleTextRemoveEvent(event->object(), original->changePosition(), original->textRemoved());
237             else
238                 rem = new QAccessibleTextRemoveEvent(event->accessibleInterface(), original->changePosition(), original->textRemoved());
239             rem->setCursorPosition(original->cursorPosition());
240             ev = rem;
241         } else if (event->type() == QAccessible::TextUpdated) {
242             const QAccessibleTextUpdateEvent *original = static_cast<QAccessibleTextUpdateEvent*>(event);
243             QAccessibleTextUpdateEvent *upd;
244             if (event->object())
245                 upd = new QAccessibleTextUpdateEvent(event->object(), original->changePosition(), original->textRemoved(), original->textInserted());
246             else
247                 upd = new QAccessibleTextUpdateEvent(event->accessibleInterface(), original->changePosition(), original->textRemoved(), original->textInserted());
248             upd->setCursorPosition(original->cursorPosition());
249             ev = upd;
250         } else if (event->type() == QAccessible::ValueChanged) {
251             if (event->object())
252                 ev = new QAccessibleValueChangeEvent(event->object(), static_cast<QAccessibleValueChangeEvent*>(event)->value());
253             else
254                 ev = new QAccessibleValueChangeEvent(event->accessibleInterface(), static_cast<QAccessibleValueChangeEvent*>(event)->value());
255         } else if (event->type() == QAccessible::TableModelChanged) {
256             QAccessibleTableModelChangeEvent *oldEvent = static_cast<QAccessibleTableModelChangeEvent*>(event);
257             QAccessibleTableModelChangeEvent *newEvent;
258             if (event->object())
259                 newEvent = new QAccessibleTableModelChangeEvent(event->object(), oldEvent->modelChangeType());
260             else
261                 newEvent = new QAccessibleTableModelChangeEvent(event->accessibleInterface(), oldEvent->modelChangeType());
262             newEvent->setFirstRow(oldEvent->firstRow());
263             newEvent->setFirstColumn(oldEvent->firstColumn());
264             newEvent->setLastRow(oldEvent->lastRow());
265             newEvent->setLastColumn(oldEvent->lastColumn());
266             ev = newEvent;
267         } else {
268             if (event->object())
269                 ev = new QAccessibleEvent(event->object(), event->type());
270             else
271                 ev = new QAccessibleEvent(event->accessibleInterface(), event->type());
272         }
273         ev->setChild(event->child());
274         return ev;
275     }
276 
277     static EventList &eventList()
278     {
279         static EventList list;
280         return list;
281     }
282 
283     static QTestAccessibility *&instance()
284     {
285         static QTestAccessibility *ta = nullptr;
286         return ta;
287     }
288 
289 private:
290     static QString msgAccessibilityEventListMismatch(const EventList &haystack,
291                                                      const QAccessibleEvent *needle)
292     {
293         QString rc;
294         QDebug str = QDebug(&rc).nospace();
295         str << "Event " << *needle
296             <<  " not found at head of event list of size " << haystack.size() << " :";
297         for (const QAccessibleEvent *e : haystack)
298             str << ' ' << *e;
299         return rc;
300     }
301 
302 };
303 
304 QT_END_NAMESPACE
305 
306 #endif // QT_CONFIG(accessibility)
307 #endif // QTESTACCESSIBLE_H
