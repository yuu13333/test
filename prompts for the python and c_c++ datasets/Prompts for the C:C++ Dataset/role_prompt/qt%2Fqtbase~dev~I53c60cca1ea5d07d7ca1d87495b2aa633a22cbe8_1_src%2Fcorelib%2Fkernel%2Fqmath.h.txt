I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #ifndef QMATH_H
41 #define QMATH_H
42 
43 #if 0
44 #pragma qt_class(QtMath)
45 #endif
46 
47 #include <QtCore/qglobal.h>
48 #include <QtCore/qalgorithms.h>
49 
50 #ifndef _USE_MATH_DEFINES
51 #  define _USE_MATH_DEFINES
52 #  define undef_USE_MATH_DEFINES
53 #endif
54 
55 #include <cmath>
56 
57 #ifdef undef_USE_MATH_DEFINES
58 #  undef _USE_MATH_DEFINES
59 #  undef undef_USE_MATH_DEFINES
60 #endif
61 
62 QT_BEGIN_NAMESPACE
63 
64 #define QT_SINE_TABLE_SIZE 256
65 
66 extern Q_CORE_EXPORT const qreal qt_sine_table[QT_SINE_TABLE_SIZE];
67 
68 inline int qCeil(qreal v)
69 {
70 #if (Q_PROCESSOR_WORDSIZE == 8) && !defined(QT_COORD_TYPE) && !defined(__SSE4_1__) && \
71     !defined(Q_PROCESSOR_ARM_64) && !defined(Q_PROCESSOR_POWER_64)
72     // Do a fast ceil using negative truncate from double to long long when roundss, fcvtps or frip are not available
73     return int(quint64(v - INT32_MAX) + INT32_MAX);
74 #else
75     using std::ceil;
76     return int(ceil(v));
77 #endif
78 }
79 
80 inline int qFloor(qreal v)
81 {
82 #if (Q_PROCESSOR_WORDSIZE == 8) && !defined(QT_COORD_TYPE) && !defined(__SSE4_1__) && \
83     !defined(Q_PROCESSOR_ARM_64) && !defined(Q_PROCESSOR_POWER_64)
84     // Do a fast floor using positive truncate from double to long long when roundss, fcvtms or frim are not available
85     return int(quint64(v - INT32_MIN) + INT32_MIN);
86 #else
87     using std::floor;
88     return int(floor(v));
89 #endif
90 }
91 
92 inline qreal qFabs(qreal v)
93 {
94     using std::fabs;
95     return fabs(v);
96 }
97 
98 inline qreal qSin(qreal v)
99 {
100     using std::sin;
101     return sin(v);
102 }
103 
104 inline qreal qCos(qreal v)
105 {
106     using std::cos;
107     return cos(v);
108 }
109 
110 inline qreal qTan(qreal v)
111 {
112     using std::tan;
113     return tan(v);
114 }
115 
116 inline qreal qAcos(qreal v)
117 {
118     using std::acos;
119     return acos(v);
120 }
121 
122 inline qreal qAsin(qreal v)
123 {
124     using std::asin;
125     return asin(v);
126 }
127 
128 inline qreal qAtan(qreal v)
129 {
130     using std::atan;
131     return atan(v);
132 }
133 
134 inline qreal qAtan2(qreal y, qreal x)
135 {
136     using std::atan2;
137     return atan2(y, x);
138 }
139 
140 inline qreal qSqrt(qreal v)
141 {
142     using std::sqrt;
143     return sqrt(v);
144 }
145 
146 inline qreal qLn(qreal v)
147 {
148     using std::log;
149     return log(v);
150 }
151 
152 inline qreal qExp(qreal v)
153 {
154     using std::exp;
155     return exp(v);
156 }
157 
158 inline qreal qPow(qreal x, qreal y)
159 {
160     using std::pow;
161     return pow(x, y);
162 }
163 
164 // TODO: use template variables (e.g. Qt::pi<type>) for these once we have C++14 support:
165 
166 #ifndef M_E
167 #define M_E (2.7182818284590452354)
168 #endif
169 
170 #ifndef M_LOG2E
171 #define M_LOG2E (1.4426950408889634074)
172 #endif
173 
174 #ifndef M_LOG10E
175 #define M_LOG10E (0.43429448190325182765)
176 #endif
177 
178 #ifndef M_LN2
179 #define M_LN2 (0.69314718055994530942)
180 #endif
181 
182 #ifndef M_LN10
183 #define M_LN10 (2.30258509299404568402)
184 #endif
185 
186 #ifndef M_PI
187 #define M_PI (3.14159265358979323846)
188 #endif
189 
190 #ifndef M_PI_2
191 #define M_PI_2 (1.57079632679489661923)
192 #endif
193 
194 #ifndef M_PI_4
195 #define M_PI_4 (0.78539816339744830962)
196 #endif
197 
198 #ifndef M_1_PI
199 #define M_1_PI (0.31830988618379067154)
200 #endif
201 
202 #ifndef M_2_PI
203 #define M_2_PI (0.63661977236758134308)
204 #endif
205 
206 #ifndef M_2_SQRTPI
207 #define M_2_SQRTPI (1.12837916709551257390)
208 #endif
209 
210 #ifndef M_SQRT2
211 #define M_SQRT2 (1.41421356237309504880)
212 #endif
213 
214 #ifndef M_SQRT1_2
215 #define M_SQRT1_2 (0.70710678118654752440)
216 #endif
217 
218 inline qreal qFastSin(qreal x)
219 {
220     int si = int(x * (0.5 * QT_SINE_TABLE_SIZE / M_PI)); // Would be more accurate with qRound, but slower.
221     qreal d = x - si * (2.0 * M_PI / QT_SINE_TABLE_SIZE);
222     int ci = si + QT_SINE_TABLE_SIZE / 4;
223     si &= QT_SINE_TABLE_SIZE - 1;
224     ci &= QT_SINE_TABLE_SIZE - 1;
225     return qt_sine_table[si] + (qt_sine_table[ci] - 0.5 * qt_sine_table[si] * d) * d;
226 }
227 
228 inline qreal qFastCos(qreal x)
229 {
230     int ci = int(x * (0.5 * QT_SINE_TABLE_SIZE / M_PI)); // Would be more accurate with qRound, but slower.
231     qreal d = x - ci * (2.0 * M_PI / QT_SINE_TABLE_SIZE);
232     int si = ci + QT_SINE_TABLE_SIZE / 4;
233     si &= QT_SINE_TABLE_SIZE - 1;
234     ci &= QT_SINE_TABLE_SIZE - 1;
235     return qt_sine_table[si] - (qt_sine_table[ci] + 0.5 * qt_sine_table[si] * d) * d;
236 }
237 
238 Q_DECL_CONSTEXPR inline float qDegreesToRadians(float degrees)
239 {
240     return degrees * float(M_PI/180);
241 }
242 
243 Q_DECL_CONSTEXPR inline double qDegreesToRadians(double degrees)
244 {
245     return degrees * (M_PI / 180);
246 }
247 
248 Q_DECL_CONSTEXPR inline float qRadiansToDegrees(float radians)
249 {
250     return radians * float(180/M_PI);
251 }
252 
253 Q_DECL_CONSTEXPR inline double qRadiansToDegrees(double radians)
254 {
255     return radians * (180 / M_PI);
256 }
257 
258 
259 Q_DECL_RELAXED_CONSTEXPR inline quint32 qNextPowerOfTwo(quint32 v)
260 {
261 #if defined(QT_HAS_BUILTIN_CLZ)
262     if (v == 0)
263         return 1;
264     return 2U << (31 ^ QAlgorithmsPrivate::qt_builtin_clz(v));
265 #else
266     v |= v >> 1;
267     v |= v >> 2;
268     v |= v >> 4;
269     v |= v >> 8;
270     v |= v >> 16;
271     ++v;
272     return v;
273 #endif
274 }
275 
276 Q_DECL_RELAXED_CONSTEXPR inline quint64 qNextPowerOfTwo(quint64 v)
277 {
278 #if defined(QT_HAS_BUILTIN_CLZLL)
279     if (v == 0)
280         return 1;
281     return Q_UINT64_C(2) << (63 ^ QAlgorithmsPrivate::qt_builtin_clzll(v));
282 #else
283     v |= v >> 1;
284     v |= v >> 2;
285     v |= v >> 4;
286     v |= v >> 8;
287     v |= v >> 16;
288     v |= v >> 32;
289     ++v;
290     return v;
291 #endif
292 }
293 
294 Q_DECL_RELAXED_CONSTEXPR inline quint32 qNextPowerOfTwo(qint32 v)
295 {
296     return qNextPowerOfTwo(quint32(v));
297 }
298 
299 Q_DECL_RELAXED_CONSTEXPR inline quint64 qNextPowerOfTwo(qint64 v)
300 {
301     return qNextPowerOfTwo(quint64(v));
302 }
303 
304 QT_END_NAMESPACE
305 
306 #endif // QMATH_H
