I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtNetwork module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qnetworkproxy.h"
41 
42 #ifndef QT_NO_NETWORKPROXY
43 
44 #include <CFNetwork/CFNetwork.h>
45 #include <CoreFoundation/CoreFoundation.h>
46 #include <SystemConfiguration/SystemConfiguration.h>
47 
48 #include <QtCore/QRegExp>
49 #include <QtCore/QStringList>
50 #include <QtCore/QUrl>
51 #include <QtCore/qendian.h>
52 #include <QtCore/qstringlist.h>
53 #include "private/qcore_mac_p.h"
54 
55 /*
56  * MacOS X has a proxy configuration module in System Preferences (on
57  * MacOS X 10.5, it's in Network, Advanced), where one can set the
58  * proxy settings for:
59  *
60  * \list
61  *   \li FTP proxy
62  *   \li Web Proxy (HTTP)
63  *   \li Secure Web Proxy (HTTPS)
64  *   \li Streaming Proxy (RTSP)
65  *   \li SOCKS Proxy
66  *   \li Gopher Proxy
67  *   \li URL for Automatic Proxy Configuration (PAC scripts)
68  *   \li Bypass list (by default: *.local, 169.254/16)
69  * \endlist
70  *
71  * The matching configuration can be obtained by calling SCDynamicStoreCopyProxies
72  * (from <SystemConfiguration/SCDynamicStoreCopySpecific.h>). See
73  * Apple's documentation:
74  *
75  * http://developer.apple.com/DOCUMENTATION/Networking/Reference/SysConfig/SCDynamicStoreCopySpecific/CompositePage.html#//apple_ref/c/func/SCDynamicStoreCopyProxies
76  *
77  */
78 
79 QT_BEGIN_NAMESPACE
80 
81 static bool isHostExcluded(CFDictionaryRef dict, const QString &host)
82 {
83     if (host.isEmpty())
84         return true;
85 
86     bool isSimple = !host.contains(QLatin1Char('.')) && !host.contains(QLatin1Char(':'));
87     CFNumberRef excludeSimples;
88     if (isSimple &&
89         (excludeSimples = (CFNumberRef)CFDictionaryGetValue(dict, kSCPropNetProxiesExcludeSimpleHostnames))) {
90         int enabled;
91         if (CFNumberGetValue(excludeSimples, kCFNumberIntType, &enabled) && enabled)
92             return true;
93     }
94 
95     QHostAddress ipAddress;
96     bool isIpAddress = ipAddress.setAddress(host);
97 
98     // not a simple host name
99     // does it match the list of exclusions?
100     CFArrayRef exclusionList = (CFArrayRef)CFDictionaryGetValue(dict, kSCPropNetProxiesExceptionsList);
101     if (!exclusionList)
102         return false;
103 
104     CFIndex size = CFArrayGetCount(exclusionList);
105     for (CFIndex i = 0; i < size; ++i) {
106         CFStringRef cfentry = (CFStringRef)CFArrayGetValueAtIndex(exclusionList, i);
107         QString entry = QCFString::toQString(cfentry);
108 
109         if (isIpAddress && ipAddress.isInSubnet(QHostAddress::parseSubnet(entry))) {
110             return true;        // excluded
111         } else {
112             // do wildcard matching
113             QRegExp rx(entry, Qt::CaseInsensitive, QRegExp::Wildcard);
114             if (rx.exactMatch(host))
115                 return true;
116         }
117     }
118 
119     // host was not excluded
120     return false;
121 }
122 
123 static QNetworkProxy proxyFromDictionary(CFDictionaryRef dict, QNetworkProxy::ProxyType type,
124                                          CFStringRef enableKey, CFStringRef hostKey,
125                                          CFStringRef portKey)
126 {
127     CFNumberRef protoEnabled;
128     CFNumberRef protoPort;
129     CFStringRef protoHost;
130     if (enableKey
131         && (protoEnabled = (CFNumberRef)CFDictionaryGetValue(dict, enableKey))
132         && (protoHost = (CFStringRef)CFDictionaryGetValue(dict, hostKey))
133         && (protoPort = (CFNumberRef)CFDictionaryGetValue(dict, portKey))) {
134         int enabled;
135         if (CFNumberGetValue(protoEnabled, kCFNumberIntType, &enabled) && enabled) {
136             QString host = QCFString::toQString(protoHost);
137 
138             int port;
139             CFNumberGetValue(protoPort, kCFNumberIntType, &port);
140 
141             return QNetworkProxy(type, host, port);
142         }
143     }
144 
145     // proxy not enabled
146     return QNetworkProxy();
147 }
148 
149 
150 static QNetworkProxy proxyFromDictionary(CFDictionaryRef dict)
151 {
152     QNetworkProxy::ProxyType proxyType = QNetworkProxy::DefaultProxy;
153     QString hostName;
154     quint16 port = 0;
155     QString user;
156     QString password;
157 
158     CFStringRef cfProxyType = (CFStringRef)CFDictionaryGetValue(dict, kCFProxyTypeKey);
159     if (CFStringCompare(cfProxyType, kCFProxyTypeNone, 0) == kCFCompareEqualTo) {
160         proxyType = QNetworkProxy::NoProxy;
161     } else if (CFStringCompare(cfProxyType, kCFProxyTypeFTP, 0) == kCFCompareEqualTo) {
162         proxyType = QNetworkProxy::FtpCachingProxy;
163     } else if (CFStringCompare(cfProxyType, kCFProxyTypeHTTP, 0) == kCFCompareEqualTo) {
164         proxyType = QNetworkProxy::HttpProxy;
165     } else if (CFStringCompare(cfProxyType, kCFProxyTypeHTTPS, 0) == kCFCompareEqualTo) {
166         proxyType = QNetworkProxy::HttpProxy;
167     } else if (CFStringCompare(cfProxyType, kCFProxyTypeSOCKS, 0) == kCFCompareEqualTo) {
168         proxyType = QNetworkProxy::Socks5Proxy;
169     }
170 
171     hostName = QCFString::toQString((CFStringRef)CFDictionaryGetValue(dict, kCFProxyHostNameKey));
172     user     = QCFString::toQString((CFStringRef)CFDictionaryGetValue(dict, kCFProxyUsernameKey));
173     password = QCFString::toQString((CFStringRef)CFDictionaryGetValue(dict, kCFProxyPasswordKey));
174 
175     CFNumberRef portNumber = (CFNumberRef)CFDictionaryGetValue(dict, kCFProxyPortNumberKey);
176     if (portNumber) {
177         CFNumberGetValue(portNumber, kCFNumberSInt16Type, &port);
178     }
179 
180     return QNetworkProxy(proxyType, hostName, port, user, password);
181 }
182 
183 namespace {
184 struct PACInfo {
185     QCFType<CFArrayRef> proxies;
186     QCFType<CFErrorRef> error;
187     bool done;
188 };
189 
190 void proxyAutoConfigCallback(void *client, CFArrayRef proxylist, CFErrorRef error)
191 {
192     PACInfo *info = reinterpret_cast<PACInfo *>(reinterpret_cast<CFStreamClientContext *>(client)->info);
193     info->done = true;
194     info->proxies = proxylist;
195     info->error = error;
196 }
197 } // anon namespace
198 
199 QList<QNetworkProxy> macQueryInternal(const QNetworkProxyQuery &query)
200 {
201     QList<QNetworkProxy> result;
202 
203     // obtain a dictionary to the proxy settings:
204     CFDictionaryRef dict = SCDynamicStoreCopyProxies(NULL);
205     if (!dict) {
206         qWarning("QNetworkProxyFactory::systemProxyForQuery: SCDynamicStoreCopyProxies returned NULL");
207         return result;          // failed
208     }
209 
210     if (isHostExcluded(dict, query.peerHostName())) {
211         CFRelease(dict);
212         return result;          // no proxy for this host
213     }
214 
215     // is there a PAC enabled? If so, use it first.
216     CFNumberRef pacEnabled;
217     if ((pacEnabled = (CFNumberRef)CFDictionaryGetValue(dict, kSCPropNetProxiesProxyAutoConfigEnable))) {
218         int enabled;
219         if (CFNumberGetValue(pacEnabled, kCFNumberIntType, &enabled) && enabled) {
220             // PAC is enabled
221             // kSCPropNetProxiesProxyAutoConfigURLString returns the URL string
222             // as entered in the system proxy configuration dialog
223             CFStringRef pacLocationSetting = (CFStringRef)CFDictionaryGetValue(dict, kSCPropNetProxiesProxyAutoConfigURLString);
224             QCFType<CFStringRef> cfPacLocation = CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault, pacLocationSetting, NULL, NULL,
225                 kCFStringEncodingUTF8);
226 
227             QCFType<CFDataRef> pacData;
228             QCFType<CFURLRef> pacUrl = CFURLCreateWithString(kCFAllocatorDefault, cfPacLocation, NULL);
229             if (!pacUrl) {
230                 qWarning("Invalid PAC URL \"%s\"", qPrintable(QCFString::toQString(cfPacLocation)));
231                 return result;
232             }
233 
234             QByteArray encodedURL = query.url().toEncoded(); // converted to UTF-8
235             if (encodedURL.isEmpty()) {
236                 return result; // Invalid URL, abort
237             }
238 
239             QCFType<CFURLRef> targetURL = CFURLCreateWithBytes(kCFAllocatorDefault, (UInt8*)encodedURL.data(), encodedURL.size(), kCFStringEncodingUTF8, NULL);
240             if (!targetURL) {
241                 return result; // URL creation problem, abort
242             }
243 
244             PACInfo pacInfo;
245             pacInfo.done = false;
246 
247             CFStreamClientContext pacCtx;
248             pacCtx.version = 0;
249             pacCtx.info = &pacInfo;
250             pacCtx.retain = NULL;
251             pacCtx.release = NULL;
252             pacCtx.copyDescription = NULL;
253 
254             static CFStringRef pacRunLoopMode = CFSTR("qtPACRunLoopMode");
255 
256             QCFType<CFRunLoopSourceRef> pacRunLoopSource = CFNetworkExecuteProxyAutoConfigurationURL(pacUrl, targetURL, &proxyAutoConfigCallback, &pacCtx);
257             CFRunLoopAddSource(CFRunLoopGetCurrent(), pacRunLoopSource, pacRunLoopMode);
258             while (!pacInfo.done)
259                 CFRunLoopRunInMode(pacRunLoopMode, 1000, /*returnAfterSourceHandled*/ true);
260 
261             if (!pacInfo.proxies) {
262                 QString pacLocation = QCFString::toQString(cfPacLocation);
263                 QCFType<CFStringRef> pacErrorDescription = CFErrorCopyDescription(pacInfo.error);
264                 qWarning("Execution of PAC script at \"%s\" failed: %s", qPrintable(pacLocation), qPrintable(QCFString::toQString(pacErrorDescription)));
265                 return result;
266             }
267 
268             CFIndex size = CFArrayGetCount(pacInfo.proxies);
269             for (CFIndex i = 0; i < size; ++i) {
270                 CFDictionaryRef proxy = (CFDictionaryRef)CFArrayGetValueAtIndex(pacInfo.proxies, i);
271                 result << proxyFromDictionary(proxy);
272             }
273             return result;
274         }
275     }
276 
277     // no PAC, decide which proxy we're looking for based on the query
278     bool isHttps = false;
279     QString protocol = query.protocolTag().toLower();
280 
281     // try the protocol-specific proxy
282     QNetworkProxy protocolSpecificProxy;
283     if (protocol == QLatin1String("ftp")) {
284         protocolSpecificProxy =
285             proxyFromDictionary(dict, QNetworkProxy::FtpCachingProxy,
286                                 kSCPropNetProxiesFTPEnable,
287                                 kSCPropNetProxiesFTPProxy,
288                                 kSCPropNetProxiesFTPPort);
289     } else if (protocol == QLatin1String("http")) {
290         protocolSpecificProxy =
291             proxyFromDictionary(dict, QNetworkProxy::HttpProxy,
292                                 kSCPropNetProxiesHTTPEnable,
293                                 kSCPropNetProxiesHTTPProxy,
294                                 kSCPropNetProxiesHTTPPort);
295     } else if (protocol == QLatin1String("https")) {
296         isHttps = true;
297         protocolSpecificProxy =
298             proxyFromDictionary(dict, QNetworkProxy::HttpProxy,
299                                 kSCPropNetProxiesHTTPSEnable,
300                                 kSCPropNetProxiesHTTPSProxy,
301                                 kSCPropNetProxiesHTTPSPort);
302     }
303     if (protocolSpecificProxy.type() != QNetworkProxy::DefaultProxy)
304         result << protocolSpecificProxy;
305 
306     // let's add SOCKSv5 if present too
307     QNetworkProxy socks5 = proxyFromDictionary(dict, QNetworkProxy::Socks5Proxy,
308                                                kSCPropNetProxiesSOCKSEnable,
309                                                kSCPropNetProxiesSOCKSProxy,
310                                                kSCPropNetProxiesSOCKSPort);
311     if (socks5.type() != QNetworkProxy::DefaultProxy)
312         result << socks5;
313 
314     // let's add the HTTPS proxy if present (and if we haven't added
315     // yet)
316     if (!isHttps) {
317         QNetworkProxy https = proxyFromDictionary(dict, QNetworkProxy::HttpProxy,
318                                                   kSCPropNetProxiesHTTPSEnable,
319                                                   kSCPropNetProxiesHTTPSProxy,
320                                                   kSCPropNetProxiesHTTPSPort);
321         if (https.type() != QNetworkProxy::DefaultProxy && https != protocolSpecificProxy)
322             result << https;
323     }
324 
325     CFRelease(dict);
326     return result;
327 }
328 
329 QList<QNetworkProxy> QNetworkProxyFactory::systemProxyForQuery(const QNetworkProxyQuery &query)
330 {
331     QList<QNetworkProxy> result = macQueryInternal(query);
332     if (result.isEmpty())
333         result << QNetworkProxy::NoProxy;
334 
335     return result;
336 }
337 
338 #endif
339 
340 QT_END_NAMESPACE
