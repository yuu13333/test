I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Copyright (C) 2017 Intel Corporation.
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the QtCore module of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:LGPL$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU Lesser General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU Lesser
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
22 ** packaging of this file. Please review the following information to
23 ** ensure the GNU Lesser General Public License version 3 requirements
24 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
25 **
26 ** GNU General Public License Usage
27 ** Alternatively, this file may be used under the terms of the GNU
28 ** General Public License version 2.0 or (at your option) the GNU General
29 ** Public license version 3 or any later version approved by the KDE Free
30 ** Qt Foundation. The licenses are as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
32 ** included in the packaging of this file. Please review the following
33 ** information to ensure the GNU General Public License requirements will
34 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
35 ** https://www.gnu.org/licenses/gpl-3.0.html.
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 #include "qplatformdefs.h"
42 #include "qstring.h"
43 #include "qvector.h"
44 #include "qlist.h"
45 #include "qdir.h"
46 #include "qdatetime.h"
47 #include "qoperatingsystemversion.h"
48 #include "qoperatingsystemversion_p.h"
49 #if defined(Q_OS_WIN) || defined(Q_OS_CYGWIN) || defined(Q_OS_WINRT)
50 #include "qoperatingsystemversion_win_p.h"
51 #include "private/qwinregistry_p.h"
52 #endif
53 #include <private/qlocale_tools_p.h>
54 
55 #include <qmutex.h>
56 #include <QtCore/private/qlocking_p.h>
57 
58 #include <stdlib.h>
59 #include <limits.h>
60 #include <stdarg.h>
61 #include <string.h>
62 
63 #ifndef QT_NO_EXCEPTIONS
64 #  include <string>
65 #  include <exception>
66 #endif
67 
68 #include <errno.h>
69 #if defined(Q_CC_MSVC)
70 #  include <crtdbg.h>
71 #endif
72 
73 #ifdef Q_OS_WINRT
74 #include <Ws2tcpip.h>
75 #endif // Q_OS_WINRT
76 
77 #ifdef Q_OS_WIN
78 #  include <qt_windows.h>
79 #endif
80 
81 #if defined(Q_OS_VXWORKS) && defined(_WRS_KERNEL)
82 #  include <envLib.h>
83 #endif
84 
85 #if defined(Q_OS_ANDROID) && !defined(Q_OS_ANDROID_EMBEDDED)
86 #include <private/qjni_p.h>
87 #endif
88 
89 #if defined(Q_OS_SOLARIS)
90 #  include <sys/systeminfo.h>
91 #endif
92 
93 #if defined(Q_OS_DARWIN) && QT_HAS_INCLUDE(<IOKit/IOKitLib.h>)
94 #  include <IOKit/IOKitLib.h>
95 #  include <private/qcore_mac_p.h>
96 #endif
97 
98 #ifdef Q_OS_UNIX
99 #include <sys/utsname.h>
100 #include <private/qcore_unix_p.h>
101 #endif
102 
103 #ifdef Q_OS_BSD4
104 #include <sys/sysctl.h>
105 #endif
106 
107 #if defined(Q_OS_INTEGRITY)
108 extern "C" {
109     // Function mmap resides in libshm_client.a. To be able to link with it one needs
110     // to define symbols 'shm_area_password' and 'shm_area_name', because the library
111     // is meant to allow the application that links to it to use POSIX shared memory
112     // without full system POSIX.
113 #  pragma weak shm_area_password
114 #  pragma weak shm_area_name
115     char *shm_area_password = "dummy";
116     char *shm_area_name = "dummy";
117 }
118 #endif
119 
120 #include "archdetect.cpp"
121 
122 #ifdef qFatal
123 // the qFatal in this file are just redirections from elsewhere, so
124 // don't capture any context again
125 #  undef qFatal
126 #endif
127 
128 QT_BEGIN_NAMESPACE
129 
130 #if !QT_DEPRECATED_SINCE(5, 0)
131 // Make sure they're defined to be exported
132 Q_CORE_EXPORT void *qMemCopy(void *dest, const void *src, size_t n);
133 Q_CORE_EXPORT void *qMemSet(void *dest, int c, size_t n);
134 #endif
135 
136 // Statically check assumptions about the environment we're running
137 // in. The idea here is to error or warn if otherwise implicit Qt
138 // assumptions are not fulfilled on new hardware or compilers
139 // (if this list becomes too long, consider factoring into a separate file)
140 Q_STATIC_ASSERT_X(sizeof(int) == 4, "Qt assumes that int is 32 bits");
141 Q_STATIC_ASSERT_X(UCHAR_MAX == 255, "Qt assumes that char is 8 bits");
142 Q_STATIC_ASSERT_X(QT_POINTER_SIZE == sizeof(void *), "QT_POINTER_SIZE defined incorrectly");
143 Q_STATIC_ASSERT_X(sizeof(float) == 4, "Qt assumes that float is 32 bits");
144 
145 // While we'd like to check for __STDC_IEC_559__, as per ISO/IEC 9899:2011
146 // Annex F (C11, normative for C++11), there are a few corner cases regarding
147 // denormals where GHS compiler is relying hardware behavior that is not IEC
148 // 559 compliant. So split the check in several subchecks.
149 
150 // On GHC the compiler reports std::numeric_limits<float>::is_iec559 as false.
151 // This is all right according to our needs.
152 #if !defined(Q_CC_GHS)
153 Q_STATIC_ASSERT_X(std::numeric_limits<float>::is_iec559,
154                   "Qt assumes IEEE 754 floating point");
155 #endif
156 
157 // Technically, presence of NaN and infinities are implied from the above check,
158 // but double checking our environment doesn't hurt...
159 Q_STATIC_ASSERT_X(std::numeric_limits<float>::has_infinity &&
160                   std::numeric_limits<float>::has_quiet_NaN &&
161                   std::numeric_limits<float>::has_signaling_NaN,
162                   "Qt assumes IEEE 754 floating point");
163 
164 // is_iec559 checks for ISO/IEC/IEEE 60559:2011 (aka IEEE 754-2008) compliance,
165 // but that allows for a non-binary radix. We need to recheck that.
166 // Note how __STDC_IEC_559__ would instead check for IEC 60559:1989, aka
167 // ANSI/IEEE 754âˆ’1985, which specifically implies binary floating point numbers.
168 Q_STATIC_ASSERT_X(std::numeric_limits<float>::radix == 2,
169                   "Qt assumes binary IEEE 754 floating point");
170 
171 // not required by the definition of size_t, but we depend on this
172 Q_STATIC_ASSERT_X(sizeof(size_t) == sizeof(void *), "size_t and a pointer don't have the same size");
173 Q_STATIC_ASSERT(sizeof(size_t) == sizeof(qsizetype)); // implied by the definition
174 Q_STATIC_ASSERT((std::is_same<qsizetype, qptrdiff>::value));
175 
176 /*!
177     \class QFlag
178     \inmodule QtCore
179     \brief The QFlag class is a helper data type for QFlags.
180 
181     It is equivalent to a plain \c int, except with respect to
182     function overloading and type conversions. You should never need
183     to use this class in your applications.
184 
185     \sa QFlags
186 */
187 
188 /*!
189     \fn QFlag::QFlag(int value)
190 
191     Constructs a QFlag object that stores the \a value.
192 */
193 
194 /*!
195     \fn QFlag::QFlag(uint value)
196     \since 5.3
197 
198     Constructs a QFlag object that stores the \a value.
199 */
200 
201 /*!
202     \fn QFlag::QFlag(short value)
203     \since 5.3
204 
205     Constructs a QFlag object that stores the \a value.
206 */
207 
208 /*!
209     \fn QFlag::QFlag(ushort value)
210     \since 5.3
211 
212     Constructs a QFlag object that stores the \a value.
213 */
214 
215 /*!
216     \fn QFlag::operator int() const
217 
218     Returns the value stored by the QFlag object.
219 */
220 
221 /*!
222     \fn QFlag::operator uint() const
223     \since 5.3
224 
225     Returns the value stored by the QFlag object.
226 */
227 
228 /*!
229     \class QFlags
230     \inmodule QtCore
231     \brief The QFlags class provides a type-safe way of storing
232     OR-combinations of enum values.
233 
234 
235     \ingroup tools
236 
237     The QFlags<Enum> class is a template class, where Enum is an enum
238     type. QFlags is used throughout Qt for storing combinations of
239     enum values.
240 
241     The traditional C++ approach for storing OR-combinations of enum
242     values is to use an \c int or \c uint variable. The inconvenience
243     with this approach is that there's no type checking at all; any
244     enum value can be OR'd with any other enum value and passed on to
245     a function that takes an \c int or \c uint.
246 
247     Qt uses QFlags to provide type safety. For example, the
248     Qt::Alignment type is simply a typedef for
249     QFlags<Qt::AlignmentFlag>. QLabel::setAlignment() takes a
250     Qt::Alignment parameter, which means that any combination of
251     Qt::AlignmentFlag values, or 0, is legal:
252 
253     \snippet code/src_corelib_global_qglobal.cpp 0
254 
255     If you try to pass a value from another enum or just a plain
256     integer other than 0, the compiler will report an error. If you
257     need to cast integer values to flags in a untyped fashion, you can
258     use the explicit QFlags constructor as cast operator.
259 
260     If you want to use QFlags for your own enum types, use
261     the Q_DECLARE_FLAGS() and Q_DECLARE_OPERATORS_FOR_FLAGS().
262 
263     Example:
264 
265     \snippet code/src_corelib_global_qglobal.cpp 1
266 
267     You can then use the \c MyClass::Options type to store
268     combinations of \c MyClass::Option values.
269 
270     \section1 Flags and the Meta-Object System
271 
272     The Q_DECLARE_FLAGS() macro does not expose the flags to the meta-object
273     system, so they cannot be used by Qt Script or edited in Qt Designer.
274     To make the flags available for these purposes, the Q_FLAG() macro must
275     be used:
276 
277     \snippet code/src_corelib_global_qglobal.cpp meta-object flags
278 
279     \section1 Naming Convention
280 
281     A sensible naming convention for enum types and associated QFlags
282     types is to give a singular name to the enum type (e.g., \c
283     Option) and a plural name to the QFlags type (e.g., \c Options).
284     When a singular name is desired for the QFlags type (e.g., \c
285     Alignment), you can use \c Flag as the suffix for the enum type
286     (e.g., \c AlignmentFlag).
287 
288     \sa QFlag
289 */
290 
291 /*!
292     \typedef QFlags::Int
293     \since 5.0
294 
295     Typedef for the integer type used for storage as well as for
296     implicit conversion. Either \c int or \c{unsigned int}, depending
297     on whether the enum's underlying type is signed or unsigned.
298 */
299 
300 /*!
301     \typedef QFlags::enum_type
302 
303     Typedef for the Enum template type.
304 */
305 
306 /*!
307     \fn template<typename Enum> QFlags<Enum>::QFlags(const QFlags &other)
308 
309     Constructs a copy of \a other.
310 */
311 
312 /*!
313     \fn template <typename Enum> QFlags<Enum>::QFlags(Enum flags)
314 
315     Constructs a QFlags object storing the \a flags.
316 */
317 
318 /*!
319     \fn template <typename Enum> QFlags<Enum>::QFlags(Zero)
320 
321     Constructs a QFlags object with no flags set. The parameter must be a
322     literal 0 value.
323 */
324 
325 /*!
326     \fn template <typename Enum> QFlags<Enum>::QFlags(QFlag flag)
327 
328     Constructs a QFlags object initialized with the integer \a flag.
329 
330     The QFlag type is a helper type. By using it here instead of \c
331     int, we effectively ensure that arbitrary enum values cannot be
332     cast to a QFlags, whereas untyped enum values (i.e., \c int
333     values) can.
334 */
335 
336 /*!
337     \fn template <typename Enum> QFlags<Enum>::QFlags(std::initializer_list<Enum> flags)
338     \since 5.4
339 
340     Constructs a QFlags object initialized with all \a flags
341     combined using the bitwise OR operator.
342 
343     \sa operator|=(), operator|()
344 */
345 
346 /*!
347     \fn template <typename Enum> QFlags &QFlags<Enum>::operator=(const QFlags &other)
348 
349     Assigns \a other to this object and returns a reference to this
350     object.
351 */
352 
353 /*!
354     \fn template <typename Enum> QFlags &QFlags<Enum>::operator&=(int mask)
355 
356     Performs a bitwise AND operation with \a mask and stores the
357     result in this QFlags object. Returns a reference to this object.
358 
359     \sa operator&(), operator|=(), operator^=()
360 */
361 
362 /*!
363     \fn template <typename Enum> QFlags &QFlags<Enum>::operator&=(uint mask)
364 
365     \overload
366 */
367 
368 /*!
369     \fn template <typename Enum> QFlags &QFlags<Enum>::operator&=(Enum mask)
370 
371     \overload
372 */
373 
374 /*!
375     \fn template <typename Enum> QFlags &QFlags<Enum>::operator|=(QFlags other)
376 
377     Performs a bitwise OR operation with \a other and stores the
378     result in this QFlags object. Returns a reference to this object.
379 
380     \sa operator|(), operator&=(), operator^=()
381 */
382 
383 /*!
384     \fn template <typename Enum> QFlags &QFlags<Enum>::operator|=(Enum other)
385 
386     \overload
387 */
388 
389 /*!
390     \fn template <typename Enum> QFlags &QFlags<Enum>::operator^=(QFlags other)
391 
392     Performs a bitwise XOR operation with \a other and stores the
393     result in this QFlags object. Returns a reference to this object.
394 
395     \sa operator^(), operator&=(), operator|=()
396 */
397 
398 /*!
399     \fn template <typename Enum> QFlags &QFlags<Enum>::operator^=(Enum other)
400 
401     \overload
402 */
403 
404 /*!
405     \fn template <typename Enum> QFlags<Enum>::operator Int() const
406 
407     Returns the value stored in the QFlags object as an integer.
408 
409     \sa Int
410 */
411 
412 /*!
413     \fn template <typename Enum> QFlags QFlags<Enum>::operator|(QFlags other) const
414 
415     Returns a QFlags object containing the result of the bitwise OR
416     operation on this object and \a other.
417 
418     \sa operator|=(), operator^(), operator&(), operator~()
419 */
420 
421 /*!
422     \fn template <typename Enum> QFlags QFlags<Enum>::operator|(Enum other) const
423 
424     \overload
425 */
426 
427 /*!
428     \fn template <typename Enum> QFlags QFlags<Enum>::operator^(QFlags other) const
429 
430     Returns a QFlags object containing the result of the bitwise XOR
431     operation on this object and \a other.
432 
433     \sa operator^=(), operator&(), operator|(), operator~()
434 */
435 
436 /*!
437     \fn template <typename Enum> QFlags QFlags<Enum>::operator^(Enum other) const
438 
439     \overload
440 */
441 
442 /*!
443     \fn template <typename Enum> QFlags QFlags<Enum>::operator&(int mask) const
444 
445     Returns a QFlags object containing the result of the bitwise AND
446     operation on this object and \a mask.
447 
448     \sa operator&=(), operator|(), operator^(), operator~()
449 */
450 
451 /*!
452     \fn template <typename Enum> QFlags QFlags<Enum>::operator&(uint mask) const
453 
454     \overload
455 */
456 
457 /*!
458     \fn template <typename Enum> QFlags QFlags<Enum>::operator&(Enum mask) const
459 
460     \overload
461 */
462 
463 /*!
464     \fn template <typename Enum> QFlags QFlags<Enum>::operator~() const
465 
466     Returns a QFlags object that contains the bitwise negation of
467     this object.
468 
469     \sa operator&(), operator|(), operator^()
470 */
471 
472 /*!
473     \fn template <typename Enum> bool QFlags<Enum>::operator!() const
474 
475     Returns \c true if no flag is set (i.e., if the value stored by the
476     QFlags object is 0); otherwise returns \c false.
477 */
478 
479 /*!
480     \fn template <typename Enum> bool QFlags<Enum>::testFlag(Enum flag) const
481     \since 4.2
482 
483     Returns \c true if the flag \a flag is set, otherwise \c false.
484 */
485 
486 /*!
487     \fn template <typename Enum> QFlags QFlags<Enum>::setFlag(Enum flag, bool on)
488     \since 5.7
489 
490     Sets the flag \a flag if \a on is \c true or unsets it if
491     \a on is \c false. Returns a reference to this object.
492 */
493 
494 /*!
495   \macro Q_DISABLE_COPY(Class)
496   \relates QObject
497 
498   Disables the use of copy constructors and assignment operators
499   for the given \a Class.
500 
501   Instances of subclasses of QObject should not be thought of as
502   values that can be copied or assigned, but as unique identities.
503   This means that when you create your own subclass of QObject
504   (director or indirect), you should \e not give it a copy constructor
505   or an assignment operator.  However, it may not enough to simply
506   omit them from your class, because, if you mistakenly write some code
507   that requires a copy constructor or an assignment operator (it's easy
508   to do), your compiler will thoughtfully create it for you. You must
509   do more.
510 
511   The curious user will have seen that the Qt classes derived
512   from QObject typically include this macro in a private section:
513 
514   \snippet code/src_corelib_global_qglobal.cpp 43
515 
516   It declares a copy constructor and an assignment operator in the
517   private section, so that if you use them by mistake, the compiler
518   will report an error.
519 
520   \snippet code/src_corelib_global_qglobal.cpp 44
521 
522   But even this might not catch absolutely every case. You might be
523   tempted to do something like this:
524 
525   \snippet code/src_corelib_global_qglobal.cpp 45
526 
527   First of all, don't do that. Most compilers will generate code that
528   uses the copy constructor, so the privacy violation error will be
529   reported, but your C++ compiler is not required to generate code for
530   this statement in a specific way. It could generate code using
531   \e{neither} the copy constructor \e{nor} the assignment operator we
532   made private. In that case, no error would be reported, but your
533   application would probably crash when you called a member function
534   of \c{w}.
535 
536   \sa Q_DISABLE_COPY_MOVE, Q_DISABLE_MOVE
537 */
538 
539 /*!
540   \macro Q_DISABLE_MOVE(Class)
541   \relates QObject
542 
543   Disables the use of move constructors and move assignment operators
544   for the given \a Class.
545 
546   \sa Q_DISABLE_COPY, Q_DISABLE_COPY_MOVE
547   \since 5.13
548 */
549 
550 /*!
551   \macro Q_DISABLE_COPY_MOVE(Class)
552   \relates QObject
553 
554   A convenience macro that disables the use of copy constructors, assignment
555   operators, move constructors and move assignment operators for the given
556   \a Class, combining Q_DISABLE_COPY and Q_DISABLE_MOVE.
557 
558   \sa Q_DISABLE_COPY, Q_DISABLE_MOVE
559   \since 5.13
560 */
561 
562 /*!
563     \macro Q_DECLARE_FLAGS(Flags, Enum)
564     \relates QFlags
565 
566     The Q_DECLARE_FLAGS() macro expands to
567 
568     \snippet code/src_corelib_global_qglobal.cpp 2
569 
570     \a Enum is the name of an existing enum type, whereas \a Flags is
571     the name of the QFlags<\e{Enum}> typedef.
572 
573     See the QFlags documentation for details.
574 
575     \sa Q_DECLARE_OPERATORS_FOR_FLAGS()
576 */
577 
578 /*!
579     \macro Q_DECLARE_OPERATORS_FOR_FLAGS(Flags)
580     \relates QFlags
581 
582     The Q_DECLARE_OPERATORS_FOR_FLAGS() macro declares global \c
583     operator|() functions for \a Flags, which is of type QFlags<T>.
584 
585     See the QFlags documentation for details.
586 
587     \sa Q_DECLARE_FLAGS()
588 */
589 
590 /*!
591     \headerfile <QtGlobal>
592     \title Global Qt Declarations
593     \ingroup funclists
594 
595     \brief The <QtGlobal> header file includes the fundamental global
596     declarations. It is included by most other Qt header files.
597 
598     The global declarations include \l{types}, \l{functions} and
599     \l{macros}.
600 
601     The type definitions are partly convenience definitions for basic
602     types (some of which guarantee certain bit-sizes on all platforms
603     supported by Qt), partly types related to Qt message handling. The
604     functions are related to generating messages, Qt version handling
605     and comparing and adjusting object values. And finally, some of
606     the declared macros enable programmers to add compiler or platform
607     specific code to their applications, while others are convenience
608     macros for larger operations.
609 
610     \section1 Types
611 
612     The header file declares several type definitions that guarantee a
613     specified bit-size on all platforms supported by Qt for various
614     basic types, for example \l qint8 which is a signed char
615     guaranteed to be 8-bit on all platforms supported by Qt. The
616     header file also declares the \l qlonglong type definition for \c
617     {long long int } (\c __int64 on Windows).
618 
619     Several convenience type definitions are declared: \l qreal for \c
620     double or \c float, \l uchar for \c unsigned char, \l uint for \c unsigned
621     int, \l ulong for \c unsigned long and \l ushort for \c unsigned
622     short.
623 
624     Finally, the QtMsgType definition identifies the various messages
625     that can be generated and sent to a Qt message handler;
626     QtMessageHandler is a type definition for a pointer to a function with
627     the signature
628     \c {void myMessageHandler(QtMsgType, const QMessageLogContext &, const char *)}.
629     QMessageLogContext class contains the line, file, and function the
630     message was logged at. This information is created by the QMessageLogger
631     class.
632 
633     \section1 Functions
634 
635     The <QtGlobal> header file contains several functions comparing
636     and adjusting an object's value. These functions take a template
637     type as argument: You can retrieve the absolute value of an object
638     using the qAbs() function, and you can bound a given object's
639     value by given minimum and maximum values using the qBound()
640     function. You can retrieve the minimum and maximum of two given
641     objects using qMin() and qMax() respectively. All these functions
642     return a corresponding template type; the template types can be
643     replaced by any other type.
644 
645     Example:
646 
647     \snippet code/src_corelib_global_qglobal.cpp 3
648 
649     <QtGlobal> also contains functions that generate messages from the
650     given string argument: qDebug(), qInfo(), qWarning(), qCritical(),
651     and qFatal(). These functions call the message handler
652     with the given message.
653 
654     Example:
655 
656     \snippet code/src_corelib_global_qglobal.cpp 4
657 
658     The remaining functions are qRound() and qRound64(), which both
659     accept a \c double or \c float value as their argument returning
660     the value rounded up to the nearest integer and 64-bit integer
661     respectively, the qInstallMessageHandler() function which installs
662     the given QtMessageHandler, and the qVersion() function which
663     returns the version number of Qt at run-time as a string.
664 
665     \section1 Macros
666 
667     The <QtGlobal> header file provides a range of macros (Q_CC_*)
668     that are defined if the application is compiled using the
669     specified platforms. For example, the Q_CC_SUN macro is defined if
670     the application is compiled using Forte Developer, or Sun Studio
671     C++.  The header file also declares a range of macros (Q_OS_*)
672     that are defined for the specified platforms. For example,
673     Q_OS_UNIX which is defined for the Unix-based systems.
674 
675     The purpose of these macros is to enable programmers to add
676     compiler or platform specific code to their application.
677 
678     The remaining macros are convenience macros for larger operations:
679     The QT_TR_NOOP(), QT_TRANSLATE_NOOP(), and QT_TRANSLATE_NOOP3()
680     macros provide the possibility of marking strings for delayed
681     translation. QT_TR_N_NOOP(), QT_TRANSLATE_N_NOOP(), and
682     QT_TRANSLATE_N_NOOP3() are numerator dependent variants of these.
683     The Q_ASSERT() and Q_ASSERT_X() enables warning messages of various
684     level of refinement. The Q_FOREACH() and foreach() macros
685     implement Qt's foreach loop.
686 
687     The Q_INT64_C() and Q_UINT64_C() macros wrap signed and unsigned
688     64-bit integer literals in a platform-independent way. The
689     Q_CHECK_PTR() macro prints a warning containing the source code's
690     file name and line number, saying that the program ran out of
691     memory, if the pointer is 0. The qPrintable() and qUtf8Printable()
692     macros represent an easy way of printing text.
693 
694     The QT_POINTER_SIZE macro expands to the size of a pointer in bytes.
695 
696     The macros QT_VERSION and QT_VERSION_STR expand to a numeric value
697     or a string, respectively, that specifies the version of Qt that the
698     application is compiled against.
699 
700     \sa <QtAlgorithms>, QSysInfo
701 */
702 
703 /*!
704     \typedef qreal
705     \relates <QtGlobal>
706 
707     Typedef for \c double unless Qt is configured with the
708     \c{-qreal float} option.
709 */
710 
711 /*! \typedef uchar
712     \relates <QtGlobal>
713 
714     Convenience typedef for \c{unsigned char}.
715 */
716 
717 /*! \typedef ushort
718     \relates <QtGlobal>
719 
720     Convenience typedef for \c{unsigned short}.
721 */
722 
723 /*! \typedef uint
724     \relates <QtGlobal>
725 
726     Convenience typedef for \c{unsigned int}.
727 */
728 
729 /*! \typedef ulong
730     \relates <QtGlobal>
731 
732     Convenience typedef for \c{unsigned long}.
733 */
734 
735 /*! \typedef qint8
736     \relates <QtGlobal>
737 
738     Typedef for \c{signed char}. This type is guaranteed to be 8-bit
739     on all platforms supported by Qt.
740 */
741 
742 /*!
743     \typedef quint8
744     \relates <QtGlobal>
745 
746     Typedef for \c{unsigned char}. This type is guaranteed to
747     be 8-bit on all platforms supported by Qt.
748 */
749 
750 /*! \typedef qint16
751     \relates <QtGlobal>
752 
753     Typedef for \c{signed short}. This type is guaranteed to be
754     16-bit on all platforms supported by Qt.
755 */
756 
757 /*!
758     \typedef quint16
759     \relates <QtGlobal>
760 
761     Typedef for \c{unsigned short}. This type is guaranteed to
762     be 16-bit on all platforms supported by Qt.
763 */
764 
765 /*! \typedef qint32
766     \relates <QtGlobal>
767 
768     Typedef for \c{signed int}. This type is guaranteed to be 32-bit
769     on all platforms supported by Qt.
770 */
771 
772 /*!
773     \typedef quint32
774     \relates <QtGlobal>
775 
776     Typedef for \c{unsigned int}. This type is guaranteed to
777     be 32-bit on all platforms supported by Qt.
778 */
779 
780 /*! \typedef qint64
781     \relates <QtGlobal>
782 
783     Typedef for \c{long long int} (\c __int64 on Windows). This type
784     is guaranteed to be 64-bit on all platforms supported by Qt.
785 
786     Literals of this type can be created using the Q_INT64_C() macro:
787 
788     \snippet code/src_corelib_global_qglobal.cpp 5
789 
790     \sa Q_INT64_C(), quint64, qlonglong
791 */
792 
793 /*!
794     \typedef quint64
795     \relates <QtGlobal>
796 
797     Typedef for \c{unsigned long long int} (\c{unsigned __int64} on
798     Windows). This type is guaranteed to be 64-bit on all platforms
799     supported by Qt.
800 
801     Literals of this type can be created using the Q_UINT64_C()
802     macro:
803 
804     \snippet code/src_corelib_global_qglobal.cpp 6
805 
806     \sa Q_UINT64_C(), qint64, qulonglong
807 */
808 
809 /*!
810     \typedef qintptr
811     \relates <QtGlobal>
812 
813     Integral type for representing pointers in a signed integer (useful for
814     hashing, etc.).
815 
816     Typedef for either qint32 or qint64. This type is guaranteed to
817     be the same size as a pointer on all platforms supported by Qt. On
818     a system with 32-bit pointers, qintptr is a typedef for qint32;
819     on a system with 64-bit pointers, qintptr is a typedef for
820     qint64.
821 
822     Note that qintptr is signed. Use quintptr for unsigned values.
823 
824     \sa qptrdiff, qint32, qint64
825 */
826 
827 /*!
828     \typedef quintptr
829     \relates <QtGlobal>
830 
831     Integral type for representing pointers in an unsigned integer (useful for
832     hashing, etc.).
833 
834     Typedef for either quint32 or quint64. This type is guaranteed to
835     be the same size as a pointer on all platforms supported by Qt. On
836     a system with 32-bit pointers, quintptr is a typedef for quint32;
837     on a system with 64-bit pointers, quintptr is a typedef for
838     quint64.
839 
840     Note that quintptr is unsigned. Use qptrdiff for signed values.
841 
842     \sa qptrdiff, quint32, quint64
843 */
844 
845 /*!
846     \typedef qptrdiff
847     \relates <QtGlobal>
848 
849     Integral type for representing pointer differences.
850 
851     Typedef for either qint32 or qint64. This type is guaranteed to be
852     the same size as a pointer on all platforms supported by Qt. On a
853     system with 32-bit pointers, quintptr is a typedef for quint32; on
854     a system with 64-bit pointers, quintptr is a typedef for quint64.
855 
856     Note that qptrdiff is signed. Use quintptr for unsigned values.
857 
858     \sa quintptr, qint32, qint64
859 */
860 
861 /*!
862     \typedef qsizetype
863     \relates <QtGlobal>
864     \since 5.10
865 
866     Integral type providing Posix' \c ssize_t for all platforms.
867 
868     This type is guaranteed to be the same size as a \c size_t on all
869     platforms supported by Qt.
870 
871     Note that qsizetype is signed. Use \c size_t for unsigned values.
872 
873     \sa qptrdiff
874 */
875 
876 /*!
877     \enum QtMsgType
878     \relates <QtGlobal>
879 
880     This enum describes the messages that can be sent to a message
881     handler (QtMessageHandler). You can use the enum to identify and
882     associate the various message types with the appropriate
883     actions.
884 
885     \value QtDebugMsg
886            A message generated by the qDebug() function.
887     \value QtInfoMsg
888            A message generated by the qInfo() function.
889     \value QtWarningMsg
890            A message generated by the qWarning() function.
891     \value QtCriticalMsg
892            A message generated by the qCritical() function.
893     \value QtFatalMsg
894            A message generated by the qFatal() function.
895     \value QtSystemMsg
896 
897     \c QtInfoMsg was added in Qt 5.5.
898 
899     \sa QtMessageHandler, qInstallMessageHandler()
900 */
901 
902 /*! \typedef QFunctionPointer
903     \relates <QtGlobal>
904 
905     This is a typedef for \c{void (*)()}, a pointer to a function that takes
906     no arguments and returns void.
907 */
908 
909 /*! \macro qint64 Q_INT64_C(literal)
910     \relates <QtGlobal>
911 
912     Wraps the signed 64-bit integer \a literal in a
913     platform-independent way.
914 
915     Example:
916 
917     \snippet code/src_corelib_global_qglobal.cpp 8
918 
919     \sa qint64, Q_UINT64_C()
920 */
921 
922 /*! \macro quint64 Q_UINT64_C(literal)
923     \relates <QtGlobal>
924 
925     Wraps the unsigned 64-bit integer \a literal in a
926     platform-independent way.
927 
928     Example:
929 
930     \snippet code/src_corelib_global_qglobal.cpp 9
931 
932     \sa quint64, Q_INT64_C()
933 */
934 
935 /*! \typedef qlonglong
936     \relates <QtGlobal>
937 
938     Typedef for \c{long long int} (\c __int64 on Windows). This is
939     the same as \l qint64.
940 
941     \sa qulonglong, qint64
942 */
943 
944 /*!
945     \typedef qulonglong
946     \relates <QtGlobal>
947 
948     Typedef for \c{unsigned long long int} (\c{unsigned __int64} on
949     Windows). This is the same as \l quint64.
950 
951     \sa quint64, qlonglong
952 */
953 
954 /*! \fn template <typename T> T qAbs(const T &t)
955     \relates <QtGlobal>
956 
957     Compares \a t to the 0 of type T and returns the absolute
958     value. Thus if T is \e {double}, then \a t is compared to
959     \e{(double) 0}.
960 
961     Example:
962 
963     \snippet code/src_corelib_global_qglobal.cpp 10
964 */
965 
966 /*! \fn int qRound(double d)
967     \relates <QtGlobal>
968 
969     Rounds \a d to the nearest integer.
970 
971     Rounds half up (e.g. 0.5 -> 1, -0.5 -> 0).
972 
973     Example:
974 
975     \snippet code/src_corelib_global_qglobal.cpp 11A
976 */
977 
978 /*! \fn int qRound(float d)
979     \relates <QtGlobal>
980 
981     Rounds \a d to the nearest integer.
982 
983     Rounds half up (e.g. 0.5f -> 1, -0.5f -> 0).
984 
985     Example:
986 
987     \snippet code/src_corelib_global_qglobal.cpp 11B
988 */
989 
990 /*! \fn qint64 qRound64(double d)
991     \relates <QtGlobal>
992 
993     Rounds \a d to the nearest 64-bit integer.
994 
995     Rounds half up (e.g. 0.5 -> 1, -0.5 -> 0).
996 
997     Example:
998 
999     \snippet code/src_corelib_global_qglobal.cpp 12A
1000 */
1001 
1002 /*! \fn qint64 qRound64(float d)
1003     \relates <QtGlobal>
1004 
1005     Rounds \a d to the nearest 64-bit integer.
1006 
1007     Rounds half up (e.g. 0.5f -> 1, -0.5f -> 0).
1008 
1009     Example:
1010 
1011     \snippet code/src_corelib_global_qglobal.cpp 12B
1012 */
1013 
1014 /*! \fn template <typename T> const T &qMin(const T &a, const T &b)
1015     \relates <QtGlobal>
1016 
1017     Returns the minimum of \a a and \a b.
1018 
1019     Example:
1020 
1021     \snippet code/src_corelib_global_qglobal.cpp 13
1022 
1023     \sa qMax(), qBound()
1024 */
1025 
1026 /*! \fn template <typename T> const T &qMax(const T &a, const T &b)
1027     \relates <QtGlobal>
1028 
1029     Returns the maximum of \a a and \a b.
1030 
1031     Example:
1032 
1033     \snippet code/src_corelib_global_qglobal.cpp 14
1034 
1035     \sa qMin(), qBound()
1036 */
1037 
1038 /*! \fn template <typename T> const T &qBound(const T &min, const T &val, const T &max)
1039     \relates <QtGlobal>
1040 
1041     Returns \a val bounded by \a min and \a max. This is equivalent
1042     to qMax(\a min, qMin(\a val, \a max)).
1043 
1044     Example:
1045 
1046     \snippet code/src_corelib_global_qglobal.cpp 15
1047 
1048     \sa qMin(), qMax()
1049 */
1050 
1051 /*! \fn template <typename T> auto qOverload(T functionPointer)
1052     \relates <QtGlobal>
1053     \since 5.7
1054 
1055     Returns a pointer to an overloaded function. The template
1056     parameter is the list of the argument types of the function.
1057     \a functionPointer is the pointer to the (member) function:
1058 
1059     \snippet code/src_corelib_global_qglobal.cpp 52
1060 
1061     If a member function is also const-overloaded \l qConstOverload and
1062     \l qNonConstOverload need to be used.
1063 
1064     qOverload() requires C++14 enabled. In C++11-only code, the helper
1065     classes QOverload, QConstOverload, and QNonConstOverload can be used directly:
1066 
1067     \snippet code/src_corelib_global_qglobal.cpp 53
1068 
1069     \note Qt detects the necessary C++14 compiler support by way of the feature
1070     test recommendations from
1071     \l{https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations}
1072     {C++ Committee's Standing Document 6}.
1073 
1074     \sa qConstOverload(), qNonConstOverload(), {Differences between String-Based
1075     and Functor-Based Connections}
1076 */
1077 
1078 /*! \fn template <typename T> auto qConstOverload(T memberFunctionPointer)
1079     \relates <QtGlobal>
1080     \since 5.7
1081 
1082     Returns the \a memberFunctionPointer pointer to a constant member function:
1083 
1084     \snippet code/src_corelib_global_qglobal.cpp 54
1085 
1086     \sa qOverload, qNonConstOverload, {Differences between String-Based
1087     and Functor-Based Connections}
1088 */
1089 
1090 /*! \fn template <typename T> auto qNonConstOverload(T memberFunctionPointer)
1091     \relates <QtGlobal>
1092     \since 5.7
1093 
1094     Returns the \a memberFunctionPointer pointer to a non-constant member function:
1095 
1096     \snippet code/src_corelib_global_qglobal.cpp 54
1097 
1098     \sa qOverload, qNonConstOverload, {Differences between String-Based
1099     and Functor-Based Connections}
1100 */
1101 
1102 /*!
1103     \macro QT_VERSION_CHECK
1104     \relates <QtGlobal>
1105 
1106     Turns the major, minor and patch numbers of a version into an
1107     integer, 0xMMNNPP (MM = major, NN = minor, PP = patch). This can
1108     be compared with another similarly processed version id.
1109 
1110     Example:
1111 
1112     \snippet code/src_corelib_global_qglobal.cpp qt-version-check
1113 
1114     \sa QT_VERSION
1115 */
1116 
1117 /*!
1118     \macro QT_VERSION
1119     \relates <QtGlobal>
1120 
1121     This macro expands a numeric value of the form 0xMMNNPP (MM =
1122     major, NN = minor, PP = patch) that specifies Qt's version
1123     number. For example, if you compile your application against Qt
1124     4.1.2, the QT_VERSION macro will expand to 0x040102.
1125 
1126     You can use QT_VERSION to use the latest Qt features where
1127     available.
1128 
1129     Example:
1130 
1131     \snippet code/src_corelib_global_qglobal.cpp 16
1132 
1133     \sa QT_VERSION_STR, qVersion()
1134 */
1135 
1136 /*!
1137     \macro QT_VERSION_STR
1138     \relates <QtGlobal>
1139 
1140     This macro expands to a string that specifies Qt's version number
1141     (for example, "4.1.2"). This is the version against which the
1142     application is compiled.
1143 
1144     \sa qVersion(), QT_VERSION
1145 */
1146 
1147 /*!
1148     \relates <QtGlobal>
1149 
1150     Returns the version number of Qt at run-time as a string (for
1151     example, "4.1.2"). This may be a different version than the
1152     version the application was compiled against.
1153 
1154     \sa QT_VERSION_STR, QLibraryInfo::version()
1155 */
1156 
1157 const char *qVersion() noexcept
1158 {
1159     return QT_VERSION_STR;
1160 }
1161 
1162 bool qSharedBuild() noexcept
1163 {
1164 #ifdef QT_SHARED
1165     return true;
1166 #else
1167     return false;
1168 #endif
1169 }
1170 
1171 /*****************************************************************************
1172   System detection routines
1173  *****************************************************************************/
1174 
1175 /*!
1176     \class QSysInfo
1177     \inmodule QtCore
1178     \brief The QSysInfo class provides information about the system.
1179 
1180     \list
1181     \li \l WordSize specifies the size of a pointer for the platform
1182        on which the application is compiled.
1183     \li \l ByteOrder specifies whether the platform is big-endian or
1184        little-endian.
1185     \endlist
1186 
1187     Some constants are defined only on certain platforms. You can use
1188     the preprocessor symbols Q_OS_WIN and Q_OS_MACOS to test that
1189     the application is compiled under Windows or \macos.
1190 
1191     \sa QLibraryInfo
1192 */
1193 
1194 /*!
1195     \enum QSysInfo::Sizes
1196 
1197     This enum provides platform-specific information about the sizes of data
1198     structures used by the underlying architecture.
1199 
1200     \value WordSize The size in bits of a pointer for the platform on which
1201            the application is compiled (32 or 64).
1202 */
1203 
1204 /*!
1205     \deprecated
1206     \variable QSysInfo::WindowsVersion
1207     \brief the version of the Windows operating system on which the
1208            application is run.
1209 */
1210 
1211 /*!
1212     \deprecated
1213     \fn QSysInfo::WindowsVersion QSysInfo::windowsVersion()
1214     \since 4.4
1215 
1216     Returns the version of the Windows operating system on which the
1217     application is run, or WV_None if the operating system is not
1218     Windows.
1219 */
1220 
1221 /*!
1222     \deprecated
1223     \variable QSysInfo::MacintoshVersion
1224     \brief the version of the Macintosh operating system on which
1225            the application is run.
1226 */
1227 
1228 /*!
1229     \deprecated
1230     \fn QSysInfo::MacVersion QSysInfo::macVersion()
1231 
1232     Returns the version of Darwin (\macos or iOS) on which the
1233     application is run, or MV_None if the operating system
1234     is not a version of Darwin.
1235 */
1236 
1237 /*!
1238     \enum QSysInfo::Endian
1239 
1240     \value BigEndian  Big-endian byte order (also called Network byte order)
1241     \value LittleEndian  Little-endian byte order
1242     \value ByteOrder  Equals BigEndian or LittleEndian, depending on
1243                       the platform's byte order.
1244 */
1245 
1246 /*!
1247     \deprecated
1248     \enum QSysInfo::WinVersion
1249 
1250     This enum provides symbolic names for the various versions of the
1251     Windows operating system. On Windows, the
1252     QSysInfo::WindowsVersion variable gives the version of the system
1253     on which the application is run.
1254 
1255     MS-DOS-based versions:
1256 
1257     \value WV_32s   Windows 3.1 with Win 32s
1258     \value WV_95    Windows 95
1259     \value WV_98    Windows 98
1260     \value WV_Me    Windows Me
1261 
1262     NT-based versions (note that each operating system version is only represented once rather than each Windows edition):
1263 
1264     \value WV_NT    Windows NT (operating system version 4.0)
1265     \value WV_2000  Windows 2000 (operating system version 5.0)
1266     \value WV_XP    Windows XP (operating system version 5.1)
1267     \value WV_2003  Windows Server 2003, Windows Server 2003 R2, Windows Home Server, Windows XP Professional x64 Edition (operating system version 5.2)
1268     \value WV_VISTA Windows Vista, Windows Server 2008 (operating system version 6.0)
1269     \value WV_WINDOWS7 Windows 7, Windows Server 2008 R2 (operating system version 6.1)
1270     \value WV_WINDOWS8 Windows 8 (operating system version 6.2)
1271     \value WV_WINDOWS8_1 Windows 8.1 (operating system version 6.3), introduced in Qt 5.2
1272     \value WV_WINDOWS10 Windows 10 (operating system version 10.0), introduced in Qt 5.5
1273 
1274     Alternatively, you may use the following macros which correspond directly to the Windows operating system version number:
1275 
1276     \value WV_4_0   Operating system version 4.0, corresponds to Windows NT
1277     \value WV_5_0   Operating system version 5.0, corresponds to Windows 2000
1278     \value WV_5_1   Operating system version 5.1, corresponds to Windows XP
1279     \value WV_5_2   Operating system version 5.2, corresponds to Windows Server 2003, Windows Server 2003 R2, Windows Home Server, and Windows XP Professional x64 Edition
1280     \value WV_6_0   Operating system version 6.0, corresponds to Windows Vista and Windows Server 2008
1281     \value WV_6_1   Operating system version 6.1, corresponds to Windows 7 and Windows Server 2008 R2
1282     \value WV_6_2   Operating system version 6.2, corresponds to Windows 8
1283     \value WV_6_3   Operating system version 6.3, corresponds to Windows 8.1, introduced in Qt 5.2
1284     \value WV_10_0  Operating system version 10.0, corresponds to Windows 10, introduced in Qt 5.5
1285 
1286     The following masks can be used for testing whether a Windows
1287     version is MS-DOS-based or NT-based:
1288 
1289     \value WV_DOS_based MS-DOS-based version of Windows
1290     \value WV_NT_based  NT-based version of Windows
1291 
1292     \value WV_None Operating system other than Windows.
1293 
1294     \omitvalue WV_CE
1295     \omitvalue WV_CENET
1296     \omitvalue WV_CE_5
1297     \omitvalue WV_CE_6
1298     \omitvalue WV_CE_based
1299 
1300     \sa MacVersion
1301 */
1302 
1303 /*!
1304     \deprecated
1305     \enum QSysInfo::MacVersion
1306 
1307     This enum provides symbolic names for the various versions of the
1308     Darwin operating system, covering both \macos and iOS. The
1309     QSysInfo::MacintoshVersion variable gives the version of the
1310     system on which the application is run.
1311 
1312     \value MV_9        \macos 9
1313     \value MV_10_0     \macos 10.0
1314     \value MV_10_1     \macos 10.1
1315     \value MV_10_2     \macos 10.2
1316     \value MV_10_3     \macos 10.3
1317     \value MV_10_4     \macos 10.4
1318     \value MV_10_5     \macos 10.5
1319     \value MV_10_6     \macos 10.6
1320     \value MV_10_7     \macos 10.7
1321     \value MV_10_8     \macos 10.8
1322     \value MV_10_9     \macos 10.9
1323     \value MV_10_10    \macos 10.10
1324     \value MV_10_11    \macos 10.11
1325     \value MV_10_12    \macos 10.12
1326     \value MV_Unknown  An unknown and currently unsupported platform
1327 
1328     \value MV_CHEETAH  Apple codename for MV_10_0
1329     \value MV_PUMA     Apple codename for MV_10_1
1330     \value MV_JAGUAR   Apple codename for MV_10_2
1331     \value MV_PANTHER  Apple codename for MV_10_3
1332     \value MV_TIGER    Apple codename for MV_10_4
1333     \value MV_LEOPARD  Apple codename for MV_10_5
1334     \value MV_SNOWLEOPARD  Apple codename for MV_10_6
1335     \value MV_LION     Apple codename for MV_10_7
1336     \value MV_MOUNTAINLION Apple codename for MV_10_8
1337     \value MV_MAVERICKS    Apple codename for MV_10_9
1338     \value MV_YOSEMITE     Apple codename for MV_10_10
1339     \value MV_ELCAPITAN    Apple codename for MV_10_11
1340     \value MV_SIERRA       Apple codename for MV_10_12
1341 
1342     \value MV_IOS      iOS (any)
1343     \value MV_IOS_4_3  iOS 4.3
1344     \value MV_IOS_5_0  iOS 5.0
1345     \value MV_IOS_5_1  iOS 5.1
1346     \value MV_IOS_6_0  iOS 6.0
1347     \value MV_IOS_6_1  iOS 6.1
1348     \value MV_IOS_7_0  iOS 7.0
1349     \value MV_IOS_7_1  iOS 7.1
1350     \value MV_IOS_8_0  iOS 8.0
1351     \value MV_IOS_8_1  iOS 8.1
1352     \value MV_IOS_8_2  iOS 8.2
1353     \value MV_IOS_8_3  iOS 8.3
1354     \value MV_IOS_8_4  iOS 8.4
1355     \value MV_IOS_9_0  iOS 9.0
1356     \value MV_IOS_9_1  iOS 9.1
1357     \value MV_IOS_9_2  iOS 9.2
1358     \value MV_IOS_9_3  iOS 9.3
1359     \value MV_IOS_10_0 iOS 10.0
1360 
1361     \value MV_TVOS          tvOS (any)
1362     \value MV_TVOS_9_0      tvOS 9.0
1363     \value MV_TVOS_9_1      tvOS 9.1
1364     \value MV_TVOS_9_2      tvOS 9.2
1365     \value MV_TVOS_10_0     tvOS 10.0
1366 
1367     \value MV_WATCHOS       watchOS (any)
1368     \value MV_WATCHOS_2_0   watchOS 2.0
1369     \value MV_WATCHOS_2_1   watchOS 2.1
1370     \value MV_WATCHOS_2_2   watchOS 2.2
1371     \value MV_WATCHOS_3_0   watchOS 3.0
1372 
1373     \value MV_None     Not a Darwin operating system
1374 
1375     \sa WinVersion
1376 */
1377 
1378 /*!
1379     \macro Q_OS_DARWIN
1380     \relates <QtGlobal>
1381 
1382     Defined on Darwin-based operating systems such as \macos, iOS, watchOS, and tvOS.
1383 */
1384 
1385 /*!
1386     \macro Q_OS_MAC
1387     \relates <QtGlobal>
1388 
1389     Deprecated synonym for \c Q_OS_DARWIN. Do not use.
1390  */
1391 
1392 /*!
1393     \macro Q_OS_OSX
1394     \relates <QtGlobal>
1395 
1396     Deprecated synonym for \c Q_OS_MACOS. Do not use.
1397  */
1398 
1399 /*!
1400     \macro Q_OS_MACOS
1401     \relates <QtGlobal>
1402 
1403     Defined on \macos.
1404  */
1405 
1406 /*!
1407     \macro Q_OS_IOS
1408     \relates <QtGlobal>
1409 
1410     Defined on iOS.
1411  */
1412 
1413 /*!
1414     \macro Q_OS_WATCHOS
1415     \relates <QtGlobal>
1416 
1417     Defined on watchOS.
1418  */
1419 
1420 /*!
1421     \macro Q_OS_TVOS
1422     \relates <QtGlobal>
1423 
1424     Defined on tvOS.
1425  */
1426 
1427 /*!
1428     \macro Q_OS_WIN
1429     \relates <QtGlobal>
1430 
1431     Defined on all supported versions of Windows. That is, if
1432     \l Q_OS_WIN32, \l Q_OS_WIN64, or \l Q_OS_WINRT is defined.
1433 */
1434 
1435 /*!
1436     \macro Q_OS_WINDOWS
1437     \relates <QtGlobal>
1438 
1439     This is a synonym for Q_OS_WIN.
1440 */
1441 
1442 /*!
1443     \macro Q_OS_WIN32
1444     \relates <QtGlobal>
1445 
1446     Defined on 32-bit and 64-bit versions of Windows.
1447 */
1448 
1449 /*!
1450     \macro Q_OS_WIN64
1451     \relates <QtGlobal>
1452 
1453     Defined on 64-bit versions of Windows.
1454 */
1455 
1456 /*!
1457     \macro Q_OS_WINRT
1458     \relates <QtGlobal>
1459 
1460     Defined for Windows Runtime (Windows Store apps) on Windows 8, Windows RT,
1461     and Windows Phone 8.
1462 */
1463 
1464 /*!
1465     \macro Q_OS_CYGWIN
1466     \relates <QtGlobal>
1467 
1468     Defined on Cygwin.
1469 */
1470 
1471 /*!
1472     \macro Q_OS_SOLARIS
1473     \relates <QtGlobal>
1474 
1475     Defined on Sun Solaris.
1476 */
1477 
1478 /*!
1479     \macro Q_OS_HPUX
1480     \relates <QtGlobal>
1481 
1482     Defined on HP-UX.
1483 */
1484 
1485 /*!
1486     \macro Q_OS_LINUX
1487     \relates <QtGlobal>
1488 
1489     Defined on Linux.
1490 */
1491 
1492 /*!
1493     \macro Q_OS_ANDROID
1494     \relates <QtGlobal>
1495 
1496     Defined on Android.
1497 */
1498 
1499 /*!
1500     \macro Q_OS_FREEBSD
1501     \relates <QtGlobal>
1502 
1503     Defined on FreeBSD.
1504 */
1505 
1506 /*!
1507     \macro Q_OS_NETBSD
1508     \relates <QtGlobal>
1509 
1510     Defined on NetBSD.
1511 */
1512 
1513 /*!
1514     \macro Q_OS_OPENBSD
1515     \relates <QtGlobal>
1516 
1517     Defined on OpenBSD.
1518 */
1519 
1520 /*!
1521     \macro Q_OS_AIX
1522     \relates <QtGlobal>
1523 
1524     Defined on AIX.
1525 */
1526 
1527 /*!
1528     \macro Q_OS_HURD
1529     \relates <QtGlobal>
1530 
1531     Defined on GNU Hurd.
1532 */
1533 
1534 /*!
1535     \macro Q_OS_QNX
1536     \relates <QtGlobal>
1537 
1538     Defined on QNX Neutrino.
1539 */
1540 
1541 /*!
1542     \macro Q_OS_LYNX
1543     \relates <QtGlobal>
1544 
1545     Defined on LynxOS.
1546 */
1547 
1548 /*!
1549     \macro Q_OS_BSD4
1550     \relates <QtGlobal>
1551 
1552     Defined on Any BSD 4.4 system.
1553 */
1554 
1555 /*!
1556     \macro Q_OS_UNIX
1557     \relates <QtGlobal>
1558 
1559     Defined on Any UNIX BSD/SYSV system.
1560 */
1561 
1562 /*!
1563     \macro Q_OS_WASM
1564     \relates <QtGlobal>
1565 
1566     Defined on Web Assembly.
1567 */
1568 
1569 /*!
1570     \macro Q_CC_SYM
1571     \relates <QtGlobal>
1572 
1573     Defined if the application is compiled using Digital Mars C/C++
1574     (used to be Symantec C++).
1575 */
1576 
1577 /*!
1578     \macro Q_CC_MSVC
1579     \relates <QtGlobal>
1580 
1581     Defined if the application is compiled using Microsoft Visual
1582     C/C++, Intel C++ for Windows.
1583 */
1584 
1585 /*!
1586     \macro Q_CC_CLANG
1587     \relates <QtGlobal>
1588 
1589     Defined if the application is compiled using Clang.
1590 */
1591 
1592 /*!
1593     \macro Q_CC_BOR
1594     \relates <QtGlobal>
1595 
1596     Defined if the application is compiled using Borland/Turbo C++.
1597 */
1598 
1599 /*!
1600     \macro Q_CC_WAT
1601     \relates <QtGlobal>
1602 
1603     Defined if the application is compiled using Watcom C++.
1604 */
1605 
1606 /*!
1607     \macro Q_CC_GNU
1608     \relates <QtGlobal>
1609 
1610     Defined if the application is compiled using GNU C++.
1611 */
1612 
1613 /*!
1614     \macro Q_CC_COMEAU
1615     \relates <QtGlobal>
1616 
1617     Defined if the application is compiled using Comeau C++.
1618 */
1619 
1620 /*!
1621     \macro Q_CC_EDG
1622     \relates <QtGlobal>
1623 
1624     Defined if the application is compiled using Edison Design Group
1625     C++.
1626 */
1627 
1628 /*!
1629     \macro Q_CC_OC
1630     \relates <QtGlobal>
1631 
1632     Defined if the application is compiled using CenterLine C++.
1633 */
1634 
1635 /*!
1636     \macro Q_CC_SUN
1637     \relates <QtGlobal>
1638 
1639     Defined if the application is compiled using Forte Developer, or
1640     Sun Studio C++.
1641 */
1642 
1643 /*!
1644     \macro Q_CC_MIPS
1645     \relates <QtGlobal>
1646 
1647     Defined if the application is compiled using MIPSpro C++.
1648 */
1649 
1650 /*!
1651     \macro Q_CC_DEC
1652     \relates <QtGlobal>
1653 
1654     Defined if the application is compiled using DEC C++.
1655 */
1656 
1657 /*!
1658     \macro Q_CC_HPACC
1659     \relates <QtGlobal>
1660 
1661     Defined if the application is compiled using HP aC++.
1662 */
1663 
1664 /*!
1665     \macro Q_CC_USLC
1666     \relates <QtGlobal>
1667 
1668     Defined if the application is compiled using SCO OUDK and UDK.
1669 */
1670 
1671 /*!
1672     \macro Q_CC_CDS
1673     \relates <QtGlobal>
1674 
1675     Defined if the application is compiled using Reliant C++.
1676 */
1677 
1678 /*!
1679     \macro Q_CC_KAI
1680     \relates <QtGlobal>
1681 
1682     Defined if the application is compiled using KAI C++.
1683 */
1684 
1685 /*!
1686     \macro Q_CC_INTEL
1687     \relates <QtGlobal>
1688 
1689     Defined if the application is compiled using Intel C++ for Linux,
1690     Intel C++ for Windows.
1691 */
1692 
1693 /*!
1694     \macro Q_CC_HIGHC
1695     \relates <QtGlobal>
1696 
1697     Defined if the application is compiled using MetaWare High C/C++.
1698 */
1699 
1700 /*!
1701     \macro Q_CC_PGI
1702     \relates <QtGlobal>
1703 
1704     Defined if the application is compiled using Portland Group C++.
1705 */
1706 
1707 /*!
1708     \macro Q_CC_GHS
1709     \relates <QtGlobal>
1710 
1711     Defined if the application is compiled using Green Hills
1712     Optimizing C++ Compilers.
1713 */
1714 
1715 /*!
1716     \macro Q_PROCESSOR_ALPHA
1717     \relates <QtGlobal>
1718 
1719     Defined if the application is compiled for Alpha processors.
1720 
1721     \sa QSysInfo::buildCpuArchitecture()
1722 */
1723 
1724 /*!
1725     \macro Q_PROCESSOR_ARM
1726     \relates <QtGlobal>
1727 
1728     Defined if the application is compiled for ARM processors. Qt currently
1729     supports three optional ARM revisions: \l Q_PROCESSOR_ARM_V5, \l
1730     Q_PROCESSOR_ARM_V6, and \l Q_PROCESSOR_ARM_V7.
1731 
1732     \sa QSysInfo::buildCpuArchitecture()
1733 */
1734 /*!
1735     \macro Q_PROCESSOR_ARM_V5
1736     \relates <QtGlobal>
1737 
1738     Defined if the application is compiled for ARMv5 processors. The \l
1739     Q_PROCESSOR_ARM macro is also defined when Q_PROCESSOR_ARM_V5 is defined.
1740 
1741     \sa QSysInfo::buildCpuArchitecture()
1742 */
1743 /*!
1744     \macro Q_PROCESSOR_ARM_V6
1745     \relates <QtGlobal>
1746 
1747     Defined if the application is compiled for ARMv6 processors. The \l
1748     Q_PROCESSOR_ARM and \l Q_PROCESSOR_ARM_V5 macros are also defined when
1749     Q_PROCESSOR_ARM_V6 is defined.
1750 
1751     \sa QSysInfo::buildCpuArchitecture()
1752 */
1753 /*!
1754     \macro Q_PROCESSOR_ARM_V7
1755     \relates <QtGlobal>
1756 
1757     Defined if the application is compiled for ARMv7 processors. The \l
1758     Q_PROCESSOR_ARM, \l Q_PROCESSOR_ARM_V5, and \l Q_PROCESSOR_ARM_V6 macros
1759     are also defined when Q_PROCESSOR_ARM_V7 is defined.
1760 
1761     \sa QSysInfo::buildCpuArchitecture()
1762 */
1763 
1764 /*!
1765     \macro Q_PROCESSOR_AVR32
1766     \relates <QtGlobal>
1767 
1768     Defined if the application is compiled for AVR32 processors.
1769 
1770     \sa QSysInfo::buildCpuArchitecture()
1771 */
1772 
1773 /*!
1774     \macro Q_PROCESSOR_BLACKFIN
1775     \relates <QtGlobal>
1776 
1777     Defined if the application is compiled for Blackfin processors.
1778 
1779     \sa QSysInfo::buildCpuArchitecture()
1780 */
1781 
1782 /*!
1783     \macro Q_PROCESSOR_IA64
1784     \relates <QtGlobal>
1785 
1786     Defined if the application is compiled for IA-64 processors. This includes
1787     all Itanium and Itanium 2 processors.
1788 
1789     \sa QSysInfo::buildCpuArchitecture()
1790 */
1791 
1792 /*!
1793     \macro Q_PROCESSOR_MIPS
1794     \relates <QtGlobal>
1795 
1796     Defined if the application is compiled for MIPS processors. Qt currently
1797     supports seven MIPS revisions: \l Q_PROCESSOR_MIPS_I, \l
1798     Q_PROCESSOR_MIPS_II, \l Q_PROCESSOR_MIPS_III, \l Q_PROCESSOR_MIPS_IV, \l
1799     Q_PROCESSOR_MIPS_V, \l Q_PROCESSOR_MIPS_32, and \l Q_PROCESSOR_MIPS_64.
1800 
1801     \sa QSysInfo::buildCpuArchitecture()
1802 */
1803 /*!
1804     \macro Q_PROCESSOR_MIPS_I
1805     \relates <QtGlobal>
1806 
1807     Defined if the application is compiled for MIPS-I processors. The \l
1808     Q_PROCESSOR_MIPS macro is also defined when Q_PROCESSOR_MIPS_I is defined.
1809 
1810     \sa QSysInfo::buildCpuArchitecture()
1811 */
1812 /*!
1813     \macro Q_PROCESSOR_MIPS_II
1814     \relates <QtGlobal>
1815 
1816     Defined if the application is compiled for MIPS-II processors. The \l
1817     Q_PROCESSOR_MIPS and \l Q_PROCESSOR_MIPS_I macros are also defined when
1818     Q_PROCESSOR_MIPS_II is defined.
1819 
1820     \sa QSysInfo::buildCpuArchitecture()
1821 */
1822 /*!
1823     \macro Q_PROCESSOR_MIPS_32
1824     \relates <QtGlobal>
1825 
1826     Defined if the application is compiled for MIPS32 processors. The \l
1827     Q_PROCESSOR_MIPS, \l Q_PROCESSOR_MIPS_I, and \l Q_PROCESSOR_MIPS_II macros
1828     are also defined when Q_PROCESSOR_MIPS_32 is defined.
1829 
1830     \sa QSysInfo::buildCpuArchitecture()
1831 */
1832 /*!
1833     \macro Q_PROCESSOR_MIPS_III
1834     \relates <QtGlobal>
1835 
1836     Defined if the application is compiled for MIPS-III processors. The \l
1837     Q_PROCESSOR_MIPS, \l Q_PROCESSOR_MIPS_I, and \l Q_PROCESSOR_MIPS_II macros
1838     are also defined when Q_PROCESSOR_MIPS_III is defined.
1839 
1840     \sa QSysInfo::buildCpuArchitecture()
1841 */
1842 /*!
1843     \macro Q_PROCESSOR_MIPS_IV
1844     \relates <QtGlobal>
1845 
1846     Defined if the application is compiled for MIPS-IV processors. The \l
1847     Q_PROCESSOR_MIPS, \l Q_PROCESSOR_MIPS_I, \l Q_PROCESSOR_MIPS_II, and \l
1848     Q_PROCESSOR_MIPS_III macros are also defined when Q_PROCESSOR_MIPS_IV is
1849     defined.
1850 
1851     \sa QSysInfo::buildCpuArchitecture()
1852 */
1853 /*!
1854     \macro Q_PROCESSOR_MIPS_V
1855     \relates <QtGlobal>
1856 
1857     Defined if the application is compiled for MIPS-V processors. The \l
1858     Q_PROCESSOR_MIPS, \l Q_PROCESSOR_MIPS_I, \l Q_PROCESSOR_MIPS_II, \l
1859     Q_PROCESSOR_MIPS_III, and \l Q_PROCESSOR_MIPS_IV macros are also defined
1860     when Q_PROCESSOR_MIPS_V is defined.
1861 
1862     \sa QSysInfo::buildCpuArchitecture()
1863 */
1864 /*!
1865     \macro Q_PROCESSOR_MIPS_64
1866     \relates <QtGlobal>
1867 
1868     Defined if the application is compiled for MIPS64 processors. The \l
1869     Q_PROCESSOR_MIPS, \l Q_PROCESSOR_MIPS_I, \l Q_PROCESSOR_MIPS_II, \l
1870     Q_PROCESSOR_MIPS_III, \l Q_PROCESSOR_MIPS_IV, and \l Q_PROCESSOR_MIPS_V
1871     macros are also defined when Q_PROCESSOR_MIPS_64 is defined.
1872 
1873     \sa QSysInfo::buildCpuArchitecture()
1874 */
1875 
1876 /*!
1877     \macro Q_PROCESSOR_POWER
1878     \relates <QtGlobal>
1879 
1880     Defined if the application is compiled for POWER processors. Qt currently
1881     supports two Power variants: \l Q_PROCESSOR_POWER_32 and \l
1882     Q_PROCESSOR_POWER_64.
1883 
1884     \sa QSysInfo::buildCpuArchitecture()
1885 */
1886 /*!
1887     \macro Q_PROCESSOR_POWER_32
1888     \relates <QtGlobal>
1889 
1890     Defined if the application is compiled for 32-bit Power processors. The \l
1891     Q_PROCESSOR_POWER macro is also defined when Q_PROCESSOR_POWER_32 is
1892     defined.
1893 
1894     \sa QSysInfo::buildCpuArchitecture()
1895 */
1896 /*!
1897     \macro Q_PROCESSOR_POWER_64
1898     \relates <QtGlobal>
1899 
1900     Defined if the application is compiled for 64-bit Power processors. The \l
1901     Q_PROCESSOR_POWER macro is also defined when Q_PROCESSOR_POWER_64 is
1902     defined.
1903 
1904     \sa QSysInfo::buildCpuArchitecture()
1905 */
1906 
1907 /*!
1908     \macro Q_PROCESSOR_RISCV
1909     \relates <QtGlobal>
1910     \since 5.13
1911 
1912     Defined if the application is compiled for RISC-V processors. Qt currently
1913     supports two RISC-V variants: \l Q_PROCESSOR_RISCV_32 and \l
1914     Q_PROCESSOR_RISCV_64.
1915 
1916     \sa QSysInfo::buildCpuArchitecture()
1917 */
1918 
1919 /*!
1920     \macro Q_PROCESSOR_RISCV_32
1921     \relates <QtGlobal>
1922     \since 5.13
1923 
1924     Defined if the application is compiled for 32-bit RISC-V processors. The \l
1925     Q_PROCESSOR_RISCV macro is also defined when Q_PROCESSOR_RISCV_32 is
1926     defined.
1927 
1928     \sa QSysInfo::buildCpuArchitecture()
1929 */
1930 
1931 /*!
1932     \macro Q_PROCESSOR_RISCV_64
1933     \relates <QtGlobal>
1934     \since 5.13
1935 
1936     Defined if the application is compiled for 64-bit RISC-V processors. The \l
1937     Q_PROCESSOR_RISCV macro is also defined when Q_PROCESSOR_RISCV_64 is
1938     defined.
1939 
1940     \sa QSysInfo::buildCpuArchitecture()
1941 */
1942 
1943 /*!
1944     \macro Q_PROCESSOR_S390
1945     \relates <QtGlobal>
1946 
1947     Defined if the application is compiled for S/390 processors. Qt supports
1948     one optional variant of S/390: Q_PROCESSOR_S390_X.
1949 
1950     \sa QSysInfo::buildCpuArchitecture()
1951 */
1952 /*!
1953     \macro Q_PROCESSOR_S390_X
1954     \relates <QtGlobal>
1955 
1956     Defined if the application is compiled for S/390x processors. The \l
1957     Q_PROCESSOR_S390 macro is also defined when Q_PROCESSOR_S390_X is defined.
1958 
1959     \sa QSysInfo::buildCpuArchitecture()
1960 */
1961 
1962 /*!
1963     \macro Q_PROCESSOR_SH
1964     \relates <QtGlobal>
1965 
1966     Defined if the application is compiled for SuperH processors. Qt currently
1967     supports one SuperH revision: \l Q_PROCESSOR_SH_4A.
1968 
1969     \sa QSysInfo::buildCpuArchitecture()
1970 */
1971 /*!
1972     \macro Q_PROCESSOR_SH_4A
1973     \relates <QtGlobal>
1974 
1975     Defined if the application is compiled for SuperH 4A processors. The \l
1976     Q_PROCESSOR_SH macro is also defined when Q_PROCESSOR_SH_4A is defined.
1977 
1978     \sa QSysInfo::buildCpuArchitecture()
1979 */
1980 
1981 /*!
1982     \macro Q_PROCESSOR_SPARC
1983     \relates <QtGlobal>
1984 
1985     Defined if the application is compiled for SPARC processors. Qt currently
1986     supports one optional SPARC revision: \l Q_PROCESSOR_SPARC_V9.
1987 
1988     \sa QSysInfo::buildCpuArchitecture()
1989 */
1990 /*!
1991     \macro Q_PROCESSOR_SPARC_V9
1992     \relates <QtGlobal>
1993 
1994     Defined if the application is compiled for SPARC V9 processors. The \l
1995     Q_PROCESSOR_SPARC macro is also defined when Q_PROCESSOR_SPARC_V9 is
1996     defined.
1997 
1998     \sa QSysInfo::buildCpuArchitecture()
1999 */
2000 
2001 /*!
2002     \macro Q_PROCESSOR_X86
2003     \relates <QtGlobal>
2004 
2005     Defined if the application is compiled for x86 processors. Qt currently
2006     supports two x86 variants: \l Q_PROCESSOR_X86_32 and \l Q_PROCESSOR_X86_64.
2007 
2008     \sa QSysInfo::buildCpuArchitecture()
2009 */
2010 /*!
2011     \macro Q_PROCESSOR_X86_32
2012     \relates <QtGlobal>
2013 
2014     Defined if the application is compiled for 32-bit x86 processors. This
2015     includes all i386, i486, i586, and i686 processors. The \l Q_PROCESSOR_X86
2016     macro is also defined when Q_PROCESSOR_X86_32 is defined.
2017 
2018     \sa QSysInfo::buildCpuArchitecture()
2019 */
2020 /*!
2021     \macro Q_PROCESSOR_X86_64
2022     \relates <QtGlobal>
2023 
2024     Defined if the application is compiled for 64-bit x86 processors. This
2025     includes all AMD64, Intel 64, and other x86_64/x64 processors. The \l
2026     Q_PROCESSOR_X86 macro is also defined when Q_PROCESSOR_X86_64 is defined.
2027 
2028     \sa QSysInfo::buildCpuArchitecture()
2029 */
2030 
2031 /*!
2032   \macro QT_DISABLE_DEPRECATED_BEFORE
2033   \relates <QtGlobal>
2034 
2035   This macro can be defined in the project file to disable functions deprecated in
2036   a specified version of Qt or any earlier version. The default version number is 5.0,
2037   meaning that functions deprecated in or before Qt 5.0 will not be included.
2038 
2039   For instance, when using a future release of Qt 5, set
2040   \c{QT_DISABLE_DEPRECATED_BEFORE=0x050100} to disable functions deprecated in
2041   Qt 5.1 and earlier. In any release, set
2042   \c{QT_DISABLE_DEPRECATED_BEFORE=0x000000} to enable all functions, including
2043   the ones deprecated in Qt 5.0.
2044 
2045   \sa QT_DEPRECATED_WARNINGS
2046  */
2047 
2048 
2049 /*!
2050   \macro QT_DEPRECATED_WARNINGS
2051   \relates <QtGlobal>
2052 
2053   Since Qt 5.13, this macro has no effect. In Qt 5.12 and before, if this macro
2054   is defined, the compiler will generate warnings if any API declared as
2055   deprecated by Qt is used.
2056 
2057   \sa QT_DISABLE_DEPRECATED_BEFORE, QT_NO_DEPRECATED_WARNINGS
2058  */
2059 
2060 /*!
2061   \macro QT_NO_DEPRECATED_WARNINGS
2062   \relates <QtGlobal>
2063   \since 5.13
2064 
2065   This macro can be used to suppress deprecation warnings that would otherwise
2066   be generated when using deprecated APIs.
2067 
2068   \sa QT_DISABLE_DEPRECATED_BEFORE
2069 */
2070 
2071 #if defined(QT_BUILD_QMAKE)
2072 // needed to bootstrap qmake
2073 static const unsigned int qt_one = 1;
2074 const int QSysInfo::ByteOrder = ((*((unsigned char *) &qt_one) == 0) ? BigEndian : LittleEndian);
2075 #endif
2076 
2077 #if defined(Q_OS_MAC)
2078 
2079 QT_BEGIN_INCLUDE_NAMESPACE
2080 #include "private/qcore_mac_p.h"
2081 #include "qnamespace.h"
2082 QT_END_INCLUDE_NAMESPACE
2083 
2084 #if QT_DEPRECATED_SINCE(5, 9)
2085 QT_WARNING_PUSH
2086 QT_WARNING_DISABLE_DEPRECATED
2087 QSysInfo::MacVersion QSysInfo::macVersion()
2088 {
2089     const auto version = QOperatingSystemVersion::current();
2090 #if defined(Q_OS_OSX)
2091     return QSysInfo::MacVersion(Q_MV_OSX(version.majorVersion(), version.minorVersion()));
2092 #elif defined(Q_OS_IOS)
2093     return QSysInfo::MacVersion(Q_MV_IOS(version.majorVersion(), version.minorVersion()));
2094 #elif defined(Q_OS_TVOS)
2095     return QSysInfo::MacVersion(Q_MV_TVOS(version.majorVersion(), version.minorVersion()));
2096 #elif defined(Q_OS_WATCHOS)
2097     return QSysInfo::MacVersion(Q_MV_WATCHOS(version.majorVersion(), version.minorVersion()));
2098 #else
2099     return QSysInfo::MV_Unknown;
2100 #endif
2101 }
2102 const QSysInfo::MacVersion QSysInfo::MacintoshVersion = QSysInfo::macVersion();
2103 QT_WARNING_POP
2104 #endif
2105 
2106 #ifdef Q_OS_DARWIN
2107 static const char *osVer_helper(QOperatingSystemVersion version = QOperatingSystemVersion::current())
2108 {
2109 #ifdef Q_OS_MACOS
2110     if (version.majorVersion() == 10) {
2111         switch (version.minorVersion()) {
2112         case 9:
2113             return "Mavericks";
2114         case 10:
2115             return "Yosemite";
2116         case 11:
2117             return "El Capitan";
2118         case 12:
2119             return "Sierra";
2120         case 13:
2121             return "High Sierra";
2122         case 14:
2123             return "Mojave";
2124         }
2125     }
2126     // unknown, future version
2127 #else
2128     Q_UNUSED(version);
2129 #endif
2130     return 0;
2131 }
2132 #endif
2133 
2134 #elif defined(Q_OS_WIN) || defined(Q_OS_CYGWIN) || defined(Q_OS_WINRT)
2135 
2136 QT_BEGIN_INCLUDE_NAMESPACE
2137 #include "qt_windows.h"
2138 QT_END_INCLUDE_NAMESPACE
2139 
2140 #  ifndef QT_BOOTSTRAPPED
2141 class QWindowsSockInit
2142 {
2143 public:
2144     QWindowsSockInit();
2145     ~QWindowsSockInit();
2146     int version;
2147 };
2148 
2149 QWindowsSockInit::QWindowsSockInit()
2150 :   version(0)
2151 {
2152     //### should we try for 2.2 on all platforms ??
2153     WSAData wsadata;
2154 
2155     // IPv6 requires Winsock v2.0 or better.
2156     if (WSAStartup(MAKEWORD(2,0), &wsadata) != 0) {
2157         qWarning("QTcpSocketAPI: WinSock v2.0 initialization failed.");
2158     } else {
2159         version = 0x20;
2160     }
2161 }
2162 
2163 QWindowsSockInit::~QWindowsSockInit()
2164 {
2165     WSACleanup();
2166 }
2167 Q_GLOBAL_STATIC(QWindowsSockInit, winsockInit)
2168 #  endif // QT_BOOTSTRAPPED
2169 
2170 #if QT_DEPRECATED_SINCE(5, 9)
2171 QT_WARNING_PUSH
2172 QT_WARNING_DISABLE_DEPRECATED
2173 QSysInfo::WinVersion QSysInfo::windowsVersion()
2174 {
2175     const auto version = QOperatingSystemVersion::current();
2176     if (version.majorVersion() == 6 && version.minorVersion() == 1)
2177         return QSysInfo::WV_WINDOWS7;
2178     if (version.majorVersion() == 6 && version.minorVersion() == 2)
2179         return QSysInfo::WV_WINDOWS8;
2180     if (version.majorVersion() == 6 && version.minorVersion() == 3)
2181         return QSysInfo::WV_WINDOWS8_1;
2182     if (version.majorVersion() == 10 && version.minorVersion() == 0)
2183         return QSysInfo::WV_WINDOWS10;
2184     return QSysInfo::WV_NT_based;
2185 }
2186 const QSysInfo::WinVersion QSysInfo::WindowsVersion = QSysInfo::windowsVersion();
2187 QT_WARNING_POP
2188 #endif
2189 
2190 static QString readVersionRegistryString(const wchar_t *subKey)
2191 {
2192      QString result;
2193      if (auto key = qwin_open_registry_key(HKEY_LOCAL_MACHINE,
2194                                            LR"(SOFTWARE\Microsoft\Windows NT\CurrentVersion)")) {
2195          result = qwin_read_registry_string(key, subKey);
2196      }
2197     return result;
2198 }
2199 
2200 static inline QString windows10ReleaseId()
2201 {
2202     return readVersionRegistryString(L"ReleaseId");
2203 }
2204 
2205 static inline QString windows7Build()
2206 {
2207     return readVersionRegistryString(L"CurrentBuild");
2208 }
2209 
2210 static QString winSp_helper()
2211 {
2212     const auto osv = qWindowsVersionInfo();
2213     const qint16 major = osv.wServicePackMajor;
2214     if (major) {
2215         QString sp = QStringLiteral("SP ") + QString::number(major);
2216         const qint16 minor = osv.wServicePackMinor;
2217         if (minor)
2218             sp += QLatin1Char('.') + QString::number(minor);
2219 
2220         return sp;
2221     }
2222     return QString();
2223 }
2224 
2225 static const char *osVer_helper(QOperatingSystemVersion version = QOperatingSystemVersion::current())
2226 {
2227     Q_UNUSED(version);
2228     const OSVERSIONINFOEX osver = qWindowsVersionInfo();
2229     const bool workstation = osver.wProductType == VER_NT_WORKSTATION;
2230 
2231 #define Q_WINVER(major, minor) (major << 8 | minor)
2232     switch (Q_WINVER(osver.dwMajorVersion, osver.dwMinorVersion)) {
2233     case Q_WINVER(6, 1):
2234         return workstation ? "7" : "Server 2008 R2";
2235     case Q_WINVER(6, 2):
2236         return workstation ? "8" : "Server 2012";
2237     case Q_WINVER(6, 3):
2238         return workstation ? "8.1" : "Server 2012 R2";
2239     case Q_WINVER(10, 0):
2240         return workstation ? "10" : "Server 2016";
2241     }
2242 #undef Q_WINVER
2243     // unknown, future version
2244     return 0;
2245 }
2246 
2247 #endif
2248 #if defined(Q_OS_UNIX)
2249 #  if (defined(Q_OS_LINUX) && !defined(Q_OS_ANDROID)) || defined(Q_OS_FREEBSD)
2250 #    define USE_ETC_OS_RELEASE
2251 struct QUnixOSVersion
2252 {
2253                                     // from /etc/os-release         older /etc/lsb-release         // redhat /etc/redhat-release         // debian /etc/debian_version
2254     QString productType;            // $ID                          $DISTRIB_ID                    // single line file containing:       // Debian
2255     QString productVersion;         // $VERSION_ID                  $DISTRIB_RELEASE               // <Vendor_ID release Version_ID>     // single line file <Release_ID/sid>
2256     QString prettyName;             // $PRETTY_NAME                 $DISTRIB_DESCRIPTION
2257 };
2258 
2259 static QString unquote(const char *begin, const char *end)
2260 {
2261     // man os-release says:
2262     // Variable assignment values must be enclosed in double
2263     // or single quotes if they include spaces, semicolons or
2264     // other special characters outside of Aâ€“Z, aâ€“z, 0â€“9. Shell
2265     // special characters ("$", quotes, backslash, backtick)
2266     // must be escaped with backslashes, following shell style.
2267     // All strings should be in UTF-8 format, and non-printable
2268     // characters should not be used. It is not supported to
2269     // concatenate multiple individually quoted strings.
2270     if (*begin == '"') {
2271         Q_ASSERT(end[-1] == '"');
2272         return QString::fromUtf8(begin + 1, end - begin - 2);
2273     }
2274     return QString::fromUtf8(begin, end - begin);
2275 }
2276 static QByteArray getEtcFileContent(const char *filename)
2277 {
2278     // we're avoiding QFile here
2279     int fd = qt_safe_open(filename, O_RDONLY);
2280     if (fd == -1)
2281         return QByteArray();
2282 
2283     QT_STATBUF sbuf;
2284     if (QT_FSTAT(fd, &sbuf) == -1) {
2285         qt_safe_close(fd);
2286         return QByteArray();
2287     }
2288 
2289     QByteArray buffer(sbuf.st_size, Qt::Uninitialized);
2290     buffer.resize(qt_safe_read(fd, buffer.data(), sbuf.st_size));
2291     qt_safe_close(fd);
2292     return buffer;
2293 }
2294 
2295 static bool readEtcFile(QUnixOSVersion &v, const char *filename,
2296                         const QByteArray &idKey, const QByteArray &versionKey, const QByteArray &prettyNameKey)
2297 {
2298 
2299     QByteArray buffer = getEtcFileContent(filename);
2300     if (buffer.isEmpty())
2301         return false;
2302 
2303     const char *ptr = buffer.constData();
2304     const char *end = buffer.constEnd();
2305     const char *eol;
2306     QByteArray line;
2307     for ( ; ptr != end; ptr = eol + 1) {
2308         // find the end of the line after ptr
2309         eol = static_cast<const char *>(memchr(ptr, '\n', end - ptr));
2310         if (!eol)
2311             eol = end - 1;
2312         line.setRawData(ptr, eol - ptr);
2313 
2314         if (line.startsWith(idKey)) {
2315             ptr += idKey.length();
2316             v.productType = unquote(ptr, eol);
2317             continue;
2318         }
2319 
2320         if (line.startsWith(prettyNameKey)) {
2321             ptr += prettyNameKey.length();
2322             v.prettyName = unquote(ptr, eol);
2323             continue;
2324         }
2325 
2326         if (line.startsWith(versionKey)) {
2327             ptr += versionKey.length();
2328             v.productVersion = unquote(ptr, eol);
2329             continue;
2330         }
2331     }
2332 
2333     return true;
2334 }
2335 
2336 static bool readOsRelease(QUnixOSVersion &v)
2337 {
2338     QByteArray id = QByteArrayLiteral("ID=");
2339     QByteArray versionId = QByteArrayLiteral("VERSION_ID=");
2340     QByteArray prettyName = QByteArrayLiteral("PRETTY_NAME=");
2341 
2342     // man os-release(5) says:
2343     // The file /etc/os-release takes precedence over /usr/lib/os-release.
2344     // Applications should check for the former, and exclusively use its data
2345     // if it exists, and only fall back to /usr/lib/os-release if it is
2346     // missing.
2347     return readEtcFile(v, "/etc/os-release", id, versionId, prettyName) ||
2348             readEtcFile(v, "/usr/lib/os-release", id, versionId, prettyName);
2349 }
2350 
2351 static bool readEtcLsbRelease(QUnixOSVersion &v)
2352 {
2353     bool ok = readEtcFile(v, "/etc/lsb-release", QByteArrayLiteral("DISTRIB_ID="),
2354                           QByteArrayLiteral("DISTRIB_RELEASE="), QByteArrayLiteral("DISTRIB_DESCRIPTION="));
2355     if (ok && (v.prettyName.isEmpty() || v.prettyName == v.productType)) {
2356         // some distributions have redundant information for the pretty name,
2357         // so try /etc/<lowercasename>-release
2358 
2359         // we're still avoiding QFile here
2360         QByteArray distrorelease = "/etc/" + v.productType.toLatin1().toLower() + "-release";
2361         int fd = qt_safe_open(distrorelease, O_RDONLY);
2362         if (fd != -1) {
2363             QT_STATBUF sbuf;
2364             if (QT_FSTAT(fd, &sbuf) != -1 && sbuf.st_size > v.prettyName.length()) {
2365                 // file apparently contains interesting information
2366                 QByteArray buffer(sbuf.st_size, Qt::Uninitialized);
2367                 buffer.resize(qt_safe_read(fd, buffer.data(), sbuf.st_size));
2368                 v.prettyName = QString::fromLatin1(buffer.trimmed());
2369             }
2370             qt_safe_close(fd);
2371         }
2372     }
2373 
2374     // some distributions have a /etc/lsb-release file that does not provide the values
2375     // we are looking for, i.e. DISTRIB_ID, DISTRIB_RELEASE and DISTRIB_DESCRIPTION.
2376     // Assuming that neither DISTRIB_ID nor DISTRIB_RELEASE were found, or contained valid values,
2377     // returning false for readEtcLsbRelease will allow further /etc/<lowercasename>-release parsing.
2378     return ok && !(v.productType.isEmpty() && v.productVersion.isEmpty());
2379 }
2380 
2381 #if defined(Q_OS_LINUX)
2382 static QByteArray getEtcFileFirstLine(const char *fileName)
2383 {
2384     QByteArray buffer = getEtcFileContent(fileName);
2385     if (buffer.isEmpty())
2386         return QByteArray();
2387 
2388     const char *ptr = buffer.constData();
2389     int eol = buffer.indexOf("\n");
2390     return QByteArray(ptr, eol).trimmed();
2391 }
2392 
2393 static bool readEtcRedHatRelease(QUnixOSVersion &v)
2394 {
2395     // /etc/redhat-release analysed should be a one line file
2396     // the format of its content is <Vendor_ID release Version>
2397     // i.e. "Red Hat Enterprise Linux Workstation release 6.5 (Santiago)"
2398     QByteArray line = getEtcFileFirstLine("/etc/redhat-release");
2399     if (line.isEmpty())
2400         return false;
2401 
2402     v.prettyName = QString::fromLatin1(line);
2403 
2404     const char keyword[] = "release ";
2405     int releaseIndex = line.indexOf(keyword);
2406     v.productType = QString::fromLatin1(line.mid(0, releaseIndex)).remove(QLatin1Char(' '));
2407     int spaceIndex = line.indexOf(' ', releaseIndex + strlen(keyword));
2408     v.productVersion = QString::fromLatin1(line.mid(releaseIndex + strlen(keyword),
2409                                                     spaceIndex > -1 ? spaceIndex - releaseIndex - int(strlen(keyword)) : -1));
2410     return true;
2411 }
2412 
2413 static bool readEtcDebianVersion(QUnixOSVersion &v)
2414 {
2415     // /etc/debian_version analysed should be a one line file
2416     // the format of its content is <Release_ID/sid>
2417     // i.e. "jessie/sid"
2418     QByteArray line = getEtcFileFirstLine("/etc/debian_version");
2419     if (line.isEmpty())
2420         return false;
2421 
2422     v.productType = QStringLiteral("Debian");
2423     v.productVersion = QString::fromLatin1(line);
2424     return true;
2425 }
2426 #endif
2427 
2428 static bool findUnixOsVersion(QUnixOSVersion &v)
2429 {
2430     if (readOsRelease(v))
2431         return true;
2432     if (readEtcLsbRelease(v))
2433         return true;
2434 #if defined(Q_OS_LINUX)
2435     if (readEtcRedHatRelease(v))
2436         return true;
2437     if (readEtcDebianVersion(v))
2438         return true;
2439 #endif
2440     return false;
2441 }
2442 #  endif // USE_ETC_OS_RELEASE
2443 #endif // Q_OS_UNIX
2444 
2445 #if defined(Q_OS_ANDROID) && !defined(Q_OS_ANDROID_EMBEDDED)
2446 static const char *osVer_helper(QOperatingSystemVersion)
2447 {
2448 /* Data:
2449 
2450 
2451 
2452 Cupcake
2453 Donut
2454 Eclair
2455 Eclair
2456 Eclair
2457 Froyo
2458 Gingerbread
2459 Gingerbread
2460 Honeycomb
2461 Honeycomb
2462 Honeycomb
2463 Ice Cream Sandwich
2464 Ice Cream Sandwich
2465 Jelly Bean
2466 Jelly Bean
2467 Jelly Bean
2468 KitKat
2469 KitKat
2470 Lollipop
2471 Lollipop
2472 Marshmallow
2473 Nougat
2474 Nougat
2475 Oreo
2476  */
2477     static const char versions_string[] =
2478         "\0"
2479         "Cupcake\0"
2480         "Donut\0"
2481         "Eclair\0"
2482         "Froyo\0"
2483         "Gingerbread\0"
2484         "Honeycomb\0"
2485         "Ice Cream Sandwich\0"
2486         "Jelly Bean\0"
2487         "KitKat\0"
2488         "Lollipop\0"
2489         "Marshmallow\0"
2490         "Nougat\0"
2491         "Oreo\0"
2492         "\0";
2493 
2494     static const int versions_indices[] = {
2495            0,    0,    0,    1,    9,   15,   15,   15,
2496           22,   28,   28,   40,   40,   40,   50,   50,
2497           69,   69,   69,   80,   80,   87,   87,   96,
2498          108,  108,  115,   -1
2499     };
2500 
2501     static const int versions_count = (sizeof versions_indices) / (sizeof versions_indices[0]);
2502 
2503     // https://source.android.com/source/build-numbers.html
2504     // https://developer.android.com/guide/topics/manifest/uses-sdk-element.html#ApiLevels
2505     const int sdk_int = QJNIObjectPrivate::getStaticField<jint>("android/os/Build$VERSION", "SDK_INT");
2506     return &versions_string[versions_indices[qBound(0, sdk_int, versions_count - 1)]];
2507 }
2508 #endif
2509 
2510 /*!
2511     \since 5.4
2512 
2513     Returns the architecture of the CPU that Qt was compiled for, in text
2514     format. Note that this may not match the actual CPU that the application is
2515     running on if there's an emulation layer or if the CPU supports multiple
2516     architectures (like x86-64 processors supporting i386 applications). To
2517     detect that, use currentCpuArchitecture().
2518 
2519     Values returned by this function are stable and will not change over time,
2520     so applications can rely on the returned value as an identifier, except
2521     that new CPU types may be added over time.
2522 
2523     Typical returned values are (note: list not exhaustive):
2524     \list
2525         \li "arm"
2526         \li "arm64"
2527         \li "i386"
2528         \li "ia64"
2529         \li "mips"
2530         \li "mips64"
2531         \li "power"
2532         \li "power64"
2533         \li "sparc"
2534         \li "sparcv9"
2535         \li "x86_64"
2536     \endlist
2537 
2538     \sa QSysInfo::buildAbi(), QSysInfo::currentCpuArchitecture()
2539 */
2540 QString QSysInfo::buildCpuArchitecture()
2541 {
2542     return QStringLiteral(ARCH_PROCESSOR);
2543 }
2544 
2545 /*!
2546     \since 5.4
2547 
2548     Returns the architecture of the CPU that the application is running on, in
2549     text format. Note that this function depends on what the OS will report and
2550     may not detect the actual CPU architecture if the OS hides that information
2551     or is unable to provide it. For example, a 32-bit OS running on a 64-bit
2552     CPU is usually unable to determine the CPU is actually capable of running
2553     64-bit programs.
2554 
2555     Values returned by this function are mostly stable: an attempt will be made
2556     to ensure that they stay constant over time and match the values returned
2557     by QSysInfo::builldCpuArchitecture(). However, due to the nature of the
2558     operating system functions being used, there may be discrepancies.
2559 
2560     Typical returned values are (note: list not exhaustive):
2561     \list
2562         \li "arm"
2563         \li "arm64"
2564         \li "i386"
2565         \li "ia64"
2566         \li "mips"
2567         \li "mips64"
2568         \li "power"
2569         \li "power64"
2570         \li "sparc"
2571         \li "sparcv9"
2572         \li "x86_64"
2573     \endlist
2574 
2575     \sa QSysInfo::buildAbi(), QSysInfo::buildCpuArchitecture()
2576  */
2577 QString QSysInfo::currentCpuArchitecture()
2578 {
2579 #if defined(Q_OS_WIN)
2580     // We don't need to catch all the CPU architectures in this function;
2581     // only those where the host CPU might be different than the build target
2582     // (usually, 64-bit platforms).
2583     SYSTEM_INFO info;
2584     GetNativeSystemInfo(&info);
2585     switch (info.wProcessorArchitecture) {
2586 #  ifdef PROCESSOR_ARCHITECTURE_AMD64
2587     case PROCESSOR_ARCHITECTURE_AMD64:
2588         return QStringLiteral("x86_64");
2589 #  endif
2590 #  ifdef PROCESSOR_ARCHITECTURE_IA32_ON_WIN64
2591     case PROCESSOR_ARCHITECTURE_IA32_ON_WIN64:
2592 #  endif
2593     case PROCESSOR_ARCHITECTURE_IA64:
2594         return QStringLiteral("ia64");
2595     }
2596 #elif defined(Q_OS_DARWIN) && !defined(Q_OS_MACOS)
2597     // iOS-based OSes do not return the architecture on uname(2)'s result.
2598     return buildCpuArchitecture();
2599 #elif defined(Q_OS_UNIX)
2600     long ret = -1;
2601     struct utsname u;
2602 
2603 #  if defined(Q_OS_SOLARIS)
2604     // We need a special call for Solaris because uname(2) on x86 returns "i86pc" for
2605     // both 32- and 64-bit CPUs. Reference:
2606     // http://docs.oracle.com/cd/E18752_01/html/816-5167/sysinfo-2.html#REFMAN2sysinfo-2
2607     // http://fxr.watson.org/fxr/source/common/syscall/systeminfo.c?v=OPENSOLARIS
2608     // http://fxr.watson.org/fxr/source/common/conf/param.c?v=OPENSOLARIS;im=10#L530
2609     if (ret == -1)
2610         ret = sysinfo(SI_ARCHITECTURE_64, u.machine, sizeof u.machine);
2611 #  endif
2612 
2613     if (ret == -1)
2614         ret = uname(&u);
2615 
2616     // we could use detectUnixVersion() above, but we only need a field no other function does
2617     if (ret != -1) {
2618         // the use of QT_BUILD_INTERNAL here is simply to ensure all branches build
2619         // as we don't often build on some of the less common platforms
2620 #  if defined(Q_PROCESSOR_ARM) || defined(QT_BUILD_INTERNAL)
2621         if (strcmp(u.machine, "aarch64") == 0)
2622             return QStringLiteral("arm64");
2623         if (strncmp(u.machine, "armv", 4) == 0)
2624             return QStringLiteral("arm");
2625 #  endif
2626 #  if defined(Q_PROCESSOR_POWER) || defined(QT_BUILD_INTERNAL)
2627         // harmonize "powerpc" and "ppc" to "power"
2628         if (strncmp(u.machine, "ppc", 3) == 0)
2629             return QLatin1String("power") + QLatin1String(u.machine + 3);
2630         if (strncmp(u.machine, "powerpc", 7) == 0)
2631             return QLatin1String("power") + QLatin1String(u.machine + 7);
2632         if (strcmp(u.machine, "Power Macintosh") == 0)
2633             return QLatin1String("power");
2634 #  endif
2635 #  if defined(Q_PROCESSOR_SPARC) || defined(QT_BUILD_INTERNAL)
2636         // Solaris sysinfo(2) (above) uses "sparcv9", but uname -m says "sun4u";
2637         // Linux says "sparc64"
2638         if (strcmp(u.machine, "sun4u") == 0 || strcmp(u.machine, "sparc64") == 0)
2639             return QStringLiteral("sparcv9");
2640         if (strcmp(u.machine, "sparc32") == 0)
2641             return QStringLiteral("sparc");
2642 #  endif
2643 #  if defined(Q_PROCESSOR_X86) || defined(QT_BUILD_INTERNAL)
2644         // harmonize all "i?86" to "i386"
2645         if (strlen(u.machine) == 4 && u.machine[0] == 'i'
2646                 && u.machine[2] == '8' && u.machine[3] == '6')
2647             return QStringLiteral("i386");
2648         if (strcmp(u.machine, "amd64") == 0) // Solaris
2649             return QStringLiteral("x86_64");
2650 #  endif
2651         return QString::fromLatin1(u.machine);
2652     }
2653 #endif
2654     return buildCpuArchitecture();
2655 }
2656 
2657 /*!
2658     \since 5.4
2659 
2660     Returns the full architecture string that Qt was compiled for. This string
2661     is useful for identifying different, incompatible builds. For example, it
2662     can be used as an identifier to request an upgrade package from a server.
2663 
2664     The values returned from this function are kept stable as follows: the
2665     mandatory components of the result will not change in future versions of
2666     Qt, but optional suffixes may be added.
2667 
2668     The returned value is composed of three or more parts, separated by dashes
2669     ("-"). They are:
2670 
2671     \table
2672     \header \li Component           \li Value
2673     \row    \li CPU Architecture    \li The same as QSysInfo::buildCpuArchitecture(), such as "arm", "i386", "mips" or "x86_64"
2674     \row    \li Endianness          \li "little_endian" or "big_endian"
2675     \row    \li Word size           \li Whether it's a 32- or 64-bit application. Possible values are:
2676                                         "llp64" (Windows 64-bit), "lp64" (Unix 64-bit), "ilp32" (32-bit)
2677     \row    \li (Optional) ABI      \li Zero or more components identifying different ABIs possible in this architecture.
2678                                         Currently, Qt has optional ABI components for ARM and MIPS processors: one
2679                                         component is the main ABI (such as "eabi", "o32", "n32", "o64"); another is
2680                                         whether the calling convention is using hardware floating point registers ("hardfloat"
2681                                         is present).
2682 
2683                                         Additionally, if Qt was configured with \c{-qreal float}, the ABI option tag "qreal_float"
2684                                         will be present. If Qt was configured with another type as qreal, that type is present after
2685                                         "qreal_", with all characters other than letters and digits escaped by an underscore, followed
2686                                         by two hex digits. For example, \c{-qreal long double} becomes "qreal_long_20double".
2687     \endtable
2688 
2689     \sa QSysInfo::buildCpuArchitecture()
2690 */
2691 QString QSysInfo::buildAbi()
2692 {
2693 #ifdef Q_COMPILER_UNICODE_STRINGS
2694     // ARCH_FULL is a concatenation of strings (incl. ARCH_PROCESSOR), which breaks
2695     // QStringLiteral on MSVC. Since the concatenation behavior we want is specified
2696     // the same C++11 paper as the Unicode strings, we'll use that macro and hope
2697     // that Microsoft implements the new behavior when they add support for Unicode strings.
2698     return QStringLiteral(ARCH_FULL);
2699 #else
2700     return QLatin1String(ARCH_FULL);
2701 #endif
2702 }
2703 
2704 static QString unknownText()
2705 {
2706     return QStringLiteral("unknown");
2707 }
2708 
2709 /*!
2710     \since 5.4
2711 
2712     Returns the type of the operating system kernel Qt was compiled for. It's
2713     also the kernel the application is running on, unless the host operating
2714     system is running a form of compatibility or virtualization layer.
2715 
2716     Values returned by this function are stable and will not change over time,
2717     so applications can rely on the returned value as an identifier, except
2718     that new OS kernel types may be added over time.
2719 
2720     On Windows, this function returns the type of Windows kernel, like "winnt".
2721     On Unix systems, it returns the same as the output of \c{uname
2722     -s} (lowercased).
2723 
2724     \note This function may return surprising values: it returns "linux"
2725     for all operating systems running Linux (including Android), "qnx" for all
2726     operating systems running QNX, "freebsd" for
2727     Debian/kFreeBSD, and "darwin" for \macos and iOS. For information on the type
2728     of product the application is running on, see productType().
2729 
2730     \sa QFileSelector, kernelVersion(), productType(), productVersion(), prettyProductName()
2731 */
2732 QString QSysInfo::kernelType()
2733 {
2734 #if defined(Q_OS_WIN)
2735     return QStringLiteral("winnt");
2736 #elif defined(Q_OS_UNIX)
2737     struct utsname u;
2738     if (uname(&u) == 0)
2739         return QString::fromLatin1(u.sysname).toLower();
2740 #endif
2741     return unknownText();
2742 }
2743 
2744 /*!
2745     \since 5.4
2746 
2747     Returns the release version of the operating system kernel. On Windows, it
2748     returns the version of the NT kernel. On Unix systems, including
2749     Android and \macos, it returns the same as the \c{uname -r}
2750     command would return.
2751 
2752     If the version could not be determined, this function may return an empty
2753     string.
2754 
2755     \sa kernelType(), productType(), productVersion(), prettyProductName()
2756 */
2757 QString QSysInfo::kernelVersion()
2758 {
2759 #ifdef Q_OS_WIN
2760     const auto osver = QOperatingSystemVersion::current();
2761     return QString::number(osver.majorVersion()) + QLatin1Char('.') + QString::number(osver.minorVersion())
2762             + QLatin1Char('.') + QString::number(osver.microVersion());
2763 #else
2764     struct utsname u;
2765     if (uname(&u) == 0)
2766         return QString::fromLatin1(u.release);
2767     return QString();
2768 #endif
2769 }
2770 
2771 
2772 /*!
2773     \since 5.4
2774 
2775     Returns the product name of the operating system this application is
2776     running in. If the application is running on some sort of emulation or
2777     virtualization layer (such as WINE on a Unix system), this function will
2778     inspect the emulation / virtualization layer.
2779 
2780     Values returned by this function are stable and will not change over time,
2781     so applications can rely on the returned value as an identifier, except
2782     that new OS types may be added over time.
2783 
2784     \b{Linux and Android note}: this function returns "android" for Linux
2785     systems running Android userspace, notably when using the Bionic library.
2786     For all other Linux systems, regardless of C library being used, it tries
2787     to determine the distribution name and returns that. If determining the
2788     distribution name failed, it returns "unknown".
2789 
2790     \b{\macos note}: this function returns "osx" for all \macos systems,
2791     regardless of Apple naming convention. The returned string will be updated
2792     for Qt 6. Note that this function erroneously returned "macos" for \macos
2793     10.12 in Qt versions 5.6.2, 5.7.1, and 5.8.0.
2794 
2795     \b{Darwin, iOS, tvOS, and watchOS note}: this function returns "ios" for
2796     iOS systems, "tvos" for tvOS systems, "watchos" for watchOS systems, and
2797     "darwin" in case the system could not be determined.
2798 
2799     \b{FreeBSD note}: this function returns "debian" for Debian/kFreeBSD and
2800     "unknown" otherwise.
2801 
2802     \b{Windows note}: this function "winrt" for WinRT builds, and "windows"
2803     for normal desktop builds.
2804 
2805     For other Unix-type systems, this function usually returns "unknown".
2806 
2807     \sa QFileSelector, kernelType(), kernelVersion(), productVersion(), prettyProductName()
2808 */
2809 QString QSysInfo::productType()
2810 {
2811     // similar, but not identical to QFileSelectorPrivate::platformSelectors
2812 #if defined(Q_OS_WINRT)
2813     return QStringLiteral("winrt");
2814 #elif defined(Q_OS_WIN)
2815     return QStringLiteral("windows");
2816 
2817 #elif defined(Q_OS_QNX)
2818     return QStringLiteral("qnx");
2819 
2820 #elif defined(Q_OS_ANDROID)
2821     return QStringLiteral("android");
2822 
2823 #elif defined(Q_OS_IOS)
2824     return QStringLiteral("ios");
2825 #elif defined(Q_OS_TVOS)
2826     return QStringLiteral("tvos");
2827 #elif defined(Q_OS_WATCHOS)
2828     return QStringLiteral("watchos");
2829 #elif defined(Q_OS_MACOS)
2830     // ### Qt6: remove fallback
2831 #  if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
2832     return QStringLiteral("macos");
2833 #  else
2834     return QStringLiteral("osx");
2835 #  endif
2836 #elif defined(Q_OS_DARWIN)
2837     return QStringLiteral("darwin");
2838 
2839 #elif defined(USE_ETC_OS_RELEASE) // Q_OS_UNIX
2840     QUnixOSVersion unixOsVersion;
2841     findUnixOsVersion(unixOsVersion);
2842     if (!unixOsVersion.productType.isEmpty())
2843         return unixOsVersion.productType;
2844 #endif
2845     return unknownText();
2846 }
2847 
2848 /*!
2849     \since 5.4
2850 
2851     Returns the product version of the operating system in string form. If the
2852     version could not be determined, this function returns "unknown".
2853 
2854     It will return the Android, iOS, \macos, Windows full-product
2855     versions on those systems.
2856 
2857     Typical returned values are (note: list not exhaustive):
2858     \list
2859         \li "2016.09" (Amazon Linux AMI 2016.09)
2860         \li "7.1" (Android Nougat)
2861         \li "25" (Fedora 25)
2862         \li "10.1" (iOS 10.1)
2863         \li "10.12" (macOS Sierra)
2864         \li "10.0" (tvOS 10)
2865         \li "16.10" (Ubuntu 16.10)
2866         \li "3.1" (watchOS 3.1)
2867         \li "7 SP 1" (Windows 7 Service Pack 1)
2868         \li "8.1" (Windows 8.1)
2869         \li "10" (Windows 10)
2870         \li "Server 2016" (Windows Server 2016)
2871     \endlist
2872 
2873     On Linux systems, it will try to determine the distribution version and will
2874     return that. This is also done on Debian/kFreeBSD, so this function will
2875     return Debian version in that case.
2876 
2877     In all other Unix-type systems, this function always returns "unknown".
2878 
2879     \note The version string returned from this function is not guaranteed to
2880     be orderable. On Linux, the version of
2881     the distribution may jump unexpectedly, please refer to the distribution's
2882     documentation for versioning practices.
2883 
2884     \sa kernelType(), kernelVersion(), productType(), prettyProductName()
2885 */
2886 QString QSysInfo::productVersion()
2887 {
2888 #if defined(Q_OS_ANDROID) || defined(Q_OS_DARWIN)
2889     const auto version = QOperatingSystemVersion::current();
2890     return QString::number(version.majorVersion()) + QLatin1Char('.') + QString::number(version.minorVersion());
2891 #elif defined(Q_OS_WIN)
2892     const char *version = osVer_helper();
2893     if (version) {
2894         const QLatin1Char spaceChar(' ');
2895         return QString::fromLatin1(version).remove(spaceChar).toLower() + winSp_helper().remove(spaceChar).toLower();
2896     }
2897     // fall through
2898 
2899 #elif defined(USE_ETC_OS_RELEASE) // Q_OS_UNIX
2900     QUnixOSVersion unixOsVersion;
2901     findUnixOsVersion(unixOsVersion);
2902     if (!unixOsVersion.productVersion.isEmpty())
2903         return unixOsVersion.productVersion;
2904 #endif
2905 
2906     // fallback
2907     return unknownText();
2908 }
2909 
2910 /*!
2911     \since 5.4
2912 
2913     Returns a prettier form of productType() and productVersion(), containing
2914     other tokens like the operating system type, codenames and other
2915     information. The result of this function is suitable for displaying to the
2916     user, but not for long-term storage, as the string may change with updates
2917     to Qt.
2918 
2919     If productType() is "unknown", this function will instead use the
2920     kernelType() and kernelVersion() functions.
2921 
2922     \sa kernelType(), kernelVersion(), productType(), productVersion()
2923 */
2924 QString QSysInfo::prettyProductName()
2925 {
2926 #if (defined(Q_OS_ANDROID) && !defined(Q_OS_ANDROID_EMBEDDED)) || defined(Q_OS_DARWIN) || defined(Q_OS_WIN)
2927     const auto version = QOperatingSystemVersion::current();
2928     const int majorVersion = version.majorVersion();
2929     const QString versionString = QString::number(majorVersion) + QLatin1Char('.')
2930         + QString::number(version.minorVersion());
2931     QString result = version.name() + QLatin1Char(' ');
2932     const char *name = osVer_helper(version);
2933     if (!name)
2934         return result + versionString;
2935     result += QLatin1String(name);
2936 #    if !defined(Q_OS_WIN)
2937         return result + QLatin1String(" (") + versionString + QLatin1Char(')');
2938 #    else
2939     // (resembling winver.exe): Windows 10 "Windows 10 Version 1809"
2940     result += QLatin1String(" Version ");
2941     if (majorVersion >= 10) {
2942         const auto releaseId = windows10ReleaseId();
2943         if (!releaseId.isEmpty())
2944             result += QLatin1String(" Version ") + releaseId;
2945         return result;
2946     }
2947     // Windows 7: "Windows 7 Version 6.1 (Build 7601: Service Pack 1)"
2948     result += versionString + QLatin1String(" (");
2949     const auto build = windows7Build();
2950     if (!build.isEmpty())
2951         result += QLatin1String("Build ") + build;
2952     const auto servicePack = winSp_helper();
2953     if (!servicePack.isEmpty())
2954         result += QLatin1String(": ") + servicePack;
2955     return result + QLatin1Char(')');
2956 #    endif // Windows
2957 #elif defined(Q_OS_HAIKU)
2958     return QLatin1String("Haiku ") + productVersion();
2959 #elif defined(Q_OS_UNIX)
2960 #  ifdef USE_ETC_OS_RELEASE
2961     QUnixOSVersion unixOsVersion;
2962     findUnixOsVersion(unixOsVersion);
2963     if (!unixOsVersion.prettyName.isEmpty())
2964         return unixOsVersion.prettyName;
2965 #  endif
2966     struct utsname u;
2967     if (uname(&u) == 0)
2968         return QString::fromLatin1(u.sysname) + QLatin1Char(' ') + QString::fromLatin1(u.release);
2969 #endif
2970     return unknownText();
2971 }
2972 
2973 #ifndef QT_BOOTSTRAPPED
2974 /*!
2975     \since 5.6
2976 
2977     Returns this machine's host name, if one is configured. Note that hostnames
2978     are not guaranteed to be globally unique, especially if they were
2979     configured automatically.
2980 
2981     This function does not guarantee the returned host name is a Fully
2982     Qualified Domain Name (FQDN). For that, use QHostInfo to resolve the
2983     returned name to an FQDN.
2984 
2985     This function returns the same as QHostInfo::localHostName().
2986 
2987     \sa QHostInfo::localDomainName, machineUniqueId()
2988  */
2989 QString QSysInfo::machineHostName()
2990 {
2991     // the hostname can change, so we can't cache it
2992 #if defined(Q_OS_LINUX)
2993     // gethostname(3) on Linux just calls uname(2), so do it ourselves
2994     // and avoid a memcpy
2995     struct utsname u;
2996     if (uname(&u) == 0)
2997         return QString::fromLocal8Bit(u.nodename);
2998     return QString();
2999 #else
3000 #  ifdef Q_OS_WIN
3001     // Important: QtNetwork depends on machineHostName() initializing ws2_32.dll
3002     winsockInit();
3003 #  endif
3004 
3005     char hostName[512];
3006     if (gethostname(hostName, sizeof(hostName)) == -1)
3007         return QString();
3008     hostName[sizeof(hostName) - 1] = '\0';
3009     return QString::fromLocal8Bit(hostName);
3010 #endif
3011 }
3012 #endif // QT_BOOTSTRAPPED
3013 
3014 enum {
3015     UuidStringLen = sizeof("00000000-0000-0000-0000-000000000000") - 1
3016 };
3017 
3018 /*!
3019     \since 5.11
3020 
3021     Returns a unique ID for this machine, if one can be determined. If no
3022     unique ID could be determined, this function returns an empty byte array.
3023     Unlike machineHostName(), the value returned by this function is likely
3024     globally unique.
3025 
3026     A unique ID is useful in network operations to identify this machine for an
3027     extended period of time, when the IP address could change or if this
3028     machine could have more than one IP address. For example, the ID could be
3029     used when communicating with a server or when storing device-specific data
3030     in shared network storage.
3031 
3032     Note that on some systems, this value will persist across reboots and on
3033     some it will not. Applications should not blindly depend on this fact
3034     without verifying the OS capabilities. In particular, on Linux systems,
3035     this ID is usually permanent and it matches the D-Bus machine ID, except
3036     for nodes without their own storage (replicated nodes).
3037 
3038     \sa machineHostName(), bootUniqueId()
3039 */
3040 QByteArray QSysInfo::machineUniqueId()
3041 {
3042 #if defined(Q_OS_DARWIN) && QT_HAS_INCLUDE(<IOKit/IOKitLib.h>)
3043     char uuid[UuidStringLen + 1];
3044     io_service_t service = IOServiceGetMatchingService(kIOMasterPortDefault, IOServiceMatching("IOPlatformExpertDevice"));
3045     QCFString stringRef = (CFStringRef)IORegistryEntryCreateCFProperty(service, CFSTR(kIOPlatformUUIDKey), kCFAllocatorDefault, 0);
3046     CFStringGetCString(stringRef, uuid, sizeof(uuid), kCFStringEncodingMacRoman);
3047     return QByteArray(uuid);
3048 #elif defined(Q_OS_BSD4) && defined(KERN_HOSTUUID)
3049     char uuid[UuidStringLen + 1];
3050     size_t uuidlen = sizeof(uuid);
3051     int name[] = { CTL_KERN, KERN_HOSTUUID };
3052     if (sysctl(name, sizeof name / sizeof name[0], &uuid, &uuidlen, nullptr, 0) == 0
3053             && uuidlen == sizeof(uuid))
3054         return QByteArray(uuid, uuidlen - 1);
3055 #elif defined(Q_OS_UNIX)
3056     // The modern name on Linux is /etc/machine-id, but that path is
3057     // unlikely to exist on non-Linux (non-systemd) systems. The old
3058     // path is more than enough.
3059     static const char fullfilename[] = "/usr/local/var/lib/dbus/machine-id";
3060     const char *firstfilename = fullfilename + sizeof("/usr/local") - 1;
3061     int fd = qt_safe_open(firstfilename, O_RDONLY);
3062     if (fd == -1 && errno == ENOENT)
3063         fd = qt_safe_open(fullfilename, O_RDONLY);
3064 
3065     if (fd != -1) {
3066         char buffer[32];    // 128 bits, hex-encoded
3067         qint64 len = qt_safe_read(fd, buffer, sizeof(buffer));
3068         qt_safe_close(fd);
3069 
3070         if (len != -1)
3071             return QByteArray(buffer, len);
3072     }
3073 #elif defined(Q_OS_WIN) && !defined(Q_OS_WINRT)
3074     // Let's poke at the registry
3075     HKEY key = NULL;
3076     if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, L"SOFTWARE\\Microsoft\\Cryptography", 0, KEY_READ | KEY_WOW64_64KEY, &key)
3077             == ERROR_SUCCESS) {
3078         wchar_t buffer[UuidStringLen + 1];
3079         DWORD size = sizeof(buffer);
3080         bool ok = (RegQueryValueEx(key, L"MachineGuid", NULL, NULL, (LPBYTE)buffer, &size) ==
3081                    ERROR_SUCCESS);
3082         RegCloseKey(key);
3083         if (ok)
3084             return QStringView(buffer, (size - 1) / 2).toLatin1();
3085     }
3086 #endif
3087     return QByteArray();
3088 }
3089 
3090 /*!
3091     \since 5.11
3092 
3093     Returns a unique ID for this machine's boot, if one can be determined. If
3094     no unique ID could be determined, this function returns an empty byte
3095     array. This value is expected to change after every boot and can be
3096     considered globally unique.
3097 
3098     This function is currently only implemented for Linux and Apple operating
3099     systems.
3100 
3101     \sa machineUniqueId()
3102 */
3103 QByteArray QSysInfo::bootUniqueId()
3104 {
3105 #ifdef Q_OS_LINUX
3106     // use low-level API here for simplicity
3107     int fd = qt_safe_open("/proc/sys/kernel/random/boot_id", O_RDONLY);
3108     if (fd != -1) {
3109         char uuid[UuidStringLen];
3110         qint64 len = qt_safe_read(fd, uuid, sizeof(uuid));
3111         qt_safe_close(fd);
3112         if (len == UuidStringLen)
3113             return QByteArray(uuid, UuidStringLen);
3114     }
3115 #elif defined(Q_OS_DARWIN)
3116     // "kern.bootsessionuuid" is only available by name
3117     char uuid[UuidStringLen + 1];
3118     size_t uuidlen = sizeof(uuid);
3119     if (sysctlbyname("kern.bootsessionuuid", uuid, &uuidlen, nullptr, 0) == 0
3120             && uuidlen == sizeof(uuid))
3121         return QByteArray(uuid, uuidlen - 1);
3122 #endif
3123     return QByteArray();
3124 };
3125 
3126 /*!
3127     \macro void Q_ASSERT(bool test)
3128     \relates <QtGlobal>
3129 
3130     Prints a warning message containing the source code file name and
3131     line number if \a test is \c false.
3132 
3133     Q_ASSERT() is useful for testing pre- and post-conditions
3134     during development. It does nothing if \c QT_NO_DEBUG was defined
3135     during compilation.
3136 
3137     Example:
3138 
3139     \snippet code/src_corelib_global_qglobal.cpp 17
3140 
3141     If \c b is zero, the Q_ASSERT statement will output the following
3142     message using the qFatal() function:
3143 
3144     \snippet code/src_corelib_global_qglobal.cpp 18
3145 
3146     \sa Q_ASSERT_X(), qFatal(), {Debugging Techniques}
3147 */
3148 
3149 /*!
3150     \macro void Q_ASSERT_X(bool test, const char *where, const char *what)
3151     \relates <QtGlobal>
3152 
3153     Prints the message \a what together with the location \a where,
3154     the source file name and line number if \a test is \c false.
3155 
3156     Q_ASSERT_X is useful for testing pre- and post-conditions during
3157     development. It does nothing if \c QT_NO_DEBUG was defined during
3158     compilation.
3159 
3160     Example:
3161 
3162     \snippet code/src_corelib_global_qglobal.cpp 19
3163 
3164     If \c b is zero, the Q_ASSERT_X statement will output the following
3165     message using the qFatal() function:
3166 
3167     \snippet code/src_corelib_global_qglobal.cpp 20
3168 
3169     \sa Q_ASSERT(), qFatal(), {Debugging Techniques}
3170 */
3171 
3172 /*!
3173     \macro void Q_ASSUME(bool expr)
3174     \relates <QtGlobal>
3175     \since 5.0
3176 
3177     Causes the compiler to assume that \a expr is \c true. This macro is useful
3178     for improving code generation, by providing the compiler with hints about
3179     conditions that it would not otherwise know about. However, there is no
3180     guarantee that the compiler will actually use those hints.
3181 
3182     This macro could be considered a "lighter" version of \l{Q_ASSERT()}. While
3183     Q_ASSERT will abort the program's execution if the condition is \c false,
3184     Q_ASSUME will tell the compiler not to generate code for those conditions.
3185     Therefore, it is important that the assumptions always hold, otherwise
3186     undefined behaviour may occur.
3187 
3188     If \a expr is a constantly \c false condition, Q_ASSUME will tell the compiler
3189     that the current code execution cannot be reached. That is, Q_ASSUME(false)
3190     is equivalent to Q_UNREACHABLE().
3191 
3192     In debug builds the condition is enforced by an assert to facilitate debugging.
3193 
3194     \note Q_LIKELY() tells the compiler that the expression is likely, but not
3195     the only possibility. Q_ASSUME tells the compiler that it is the only
3196     possibility.
3197 
3198     \sa Q_ASSERT(), Q_UNREACHABLE(), Q_LIKELY()
3199 */
3200 
3201 /*!
3202     \macro void Q_UNREACHABLE()
3203     \relates <QtGlobal>
3204     \since 5.0
3205 
3206     Tells the compiler that the current point cannot be reached by any
3207     execution, so it may optimize any code paths leading here as dead code, as
3208     well as code continuing from here.
3209 
3210     This macro is useful to mark impossible conditions. For example, given the
3211     following enum:
3212 
3213     \snippet code/src_corelib_global_qglobal.cpp qunreachable-enum
3214 
3215     One can write a switch table like so:
3216 
3217     \snippet code/src_corelib_global_qglobal.cpp qunreachable-switch
3218 
3219     The advantage of inserting Q_UNREACHABLE() at that point is that the
3220     compiler is told not to generate code for a shape variable containing that
3221     value. If the macro is missing, the compiler will still generate the
3222     necessary comparisons for that value. If the case label were removed, some
3223     compilers could produce a warning that some enum values were not checked.
3224 
3225     By using this macro in impossible conditions, code coverage may be improved
3226     as dead code paths may be eliminated.
3227 
3228     In debug builds the condition is enforced by an assert to facilitate debugging.
3229 
3230     \sa Q_ASSERT(), Q_ASSUME(), qFatal()
3231 */
3232 
3233 /*!
3234     \macro void Q_FALLTHROUGH()
3235     \relates <QtGlobal>
3236     \since 5.8
3237 
3238     Can be used in switch statements at the end of case block to tell the compiler
3239     and other developers that that the lack of a break statement is intentional.
3240 
3241     This is useful since a missing break statement is often a bug, and some
3242     compilers can be configured to emit warnings when one is not found.
3243 
3244     \sa Q_UNREACHABLE()
3245 */
3246 
3247 /*!
3248     \macro void Q_CHECK_PTR(void *pointer)
3249     \relates <QtGlobal>
3250 
3251     If \a pointer is 0, prints a message containing the source
3252     code's file name and line number, saying that the program ran out
3253     of memory and aborts program execution. It throws \c std::bad_alloc instead
3254     if exceptions are enabled.
3255 
3256     Q_CHECK_PTR does nothing if \c QT_NO_DEBUG and \c QT_NO_EXCEPTIONS were
3257     defined during compilation. Therefore you must not use Q_CHECK_PTR to check
3258     for successful memory allocations because the check will be disabled in
3259     some cases.
3260 
3261     Example:
3262 
3263     \snippet code/src_corelib_global_qglobal.cpp 21
3264 
3265     \sa qWarning(), {Debugging Techniques}
3266 */
3267 
3268 /*!
3269     \fn template <typename T> T *q_check_ptr(T *p)
3270     \relates <QtGlobal>
3271 
3272     Uses Q_CHECK_PTR on \a p, then returns \a p.
3273 
3274     This can be used as an inline version of Q_CHECK_PTR.
3275 */
3276 
3277 /*!
3278     \macro const char* Q_FUNC_INFO()
3279     \relates <QtGlobal>
3280 
3281     Expands to a string that describe the function the macro resides in. How this string looks
3282     more specifically is compiler dependent. With GNU GCC it is typically the function signature,
3283     while with other compilers it might be the line and column number.
3284 
3285     Q_FUNC_INFO can be conveniently used with qDebug(). For example, this function:
3286 
3287     \snippet code/src_corelib_global_qglobal.cpp 22
3288 
3289     when instantiated with the integer type, will with the GCC compiler produce:
3290 
3291     \tt{const TInputType& myMin(const TInputType&, const TInputType&) [with TInputType = int] was called with value1: 3 value2: 4}
3292 
3293     If this macro is used outside a function, the behavior is undefined.
3294  */
3295 
3296 /*!
3297     \internal
3298     The Q_CHECK_PTR macro calls this function if an allocation check
3299     fails.
3300 */
3301 void qt_check_pointer(const char *n, int l) noexcept
3302 {
3303     // make separate printing calls so that the first one may flush;
3304     // the second one could want to allocate memory (fputs prints a
3305     // newline and stderr auto-flushes).
3306     fputs("Out of memory", stderr);
3307     fprintf(stderr, "  in %s, line %d\n", n, l);
3308 
3309     std::terminate();
3310 }
3311 
3312 /*
3313    \internal
3314    Allows you to throw an exception without including <new>
3315    Called internally from Q_CHECK_PTR on certain OS combinations
3316 */
3317 void qBadAlloc()
3318 {
3319     QT_THROW(std::bad_alloc());
3320 }
3321 
3322 #ifndef QT_NO_EXCEPTIONS
3323 /*
3324    \internal
3325    Allows you to call std::terminate() without including <exception>.
3326    Called internally from QT_TERMINATE_ON_EXCEPTION
3327 */
3328 Q_NORETURN void qTerminate() noexcept
3329 {
3330     std::terminate();
3331 }
3332 #endif
3333 
3334 /*
3335   The Q_ASSERT macro calls this function when the test fails.
3336 */
3337 void qt_assert(const char *assertion, const char *file, int line) noexcept
3338 {
3339     QMessageLogger(file, line, nullptr).fatal("ASSERT: \"%s\" in file %s, line %d", assertion, file, line);
3340 }
3341 
3342 /*
3343   The Q_ASSERT_X macro calls this function when the test fails.
3344 */
3345 void qt_assert_x(const char *where, const char *what, const char *file, int line) noexcept
3346 {
3347     QMessageLogger(file, line, nullptr).fatal("ASSERT failure in %s: \"%s\", file %s, line %d", where, what, file, line);
3348 }
3349 
3350 
3351 /*
3352     Dijkstra's bisection algorithm to find the square root of an integer.
3353     Deliberately not exported as part of the Qt API, but used in both
3354     qsimplerichtext.cpp and qgfxraster_qws.cpp
3355 */
3356 Q_CORE_EXPORT Q_DECL_CONST_FUNCTION unsigned int qt_int_sqrt(unsigned int n)
3357 {
3358     // n must be in the range 0...UINT_MAX/2-1
3359     if (n >= (UINT_MAX>>2)) {
3360         unsigned int r = 2 * qt_int_sqrt(n / 4);
3361         unsigned int r2 = r + 1;
3362         return (n >= r2 * r2) ? r2 : r;
3363     }
3364     uint h, p= 0, q= 1, r= n;
3365     while (q <= n)
3366         q <<= 2;
3367     while (q != 1) {
3368         q >>= 2;
3369         h= p + q;
3370         p >>= 1;
3371         if (r >= h) {
3372             p += q;
3373             r -= h;
3374         }
3375     }
3376     return p;
3377 }
3378 
3379 void *qMemCopy(void *dest, const void *src, size_t n) { return memcpy(dest, src, n); }
3380 void *qMemSet(void *dest, int c, size_t n) { return memset(dest, c, n); }
3381 
3382 // In the C runtime on all platforms access to the environment is not thread-safe. We
3383 // add thread-safety for the Qt wrappers.
3384 static QBasicMutex environmentMutex;
3385 
3386 /*
3387   Wraps tzset(), which accesses the environment, so should only be called while
3388   we hold the lock on the environment mutex.
3389 */
3390 void qTzSet()
3391 {
3392     const auto locker = qt_scoped_lock(environmentMutex);
3393 #if defined(Q_OS_WIN)
3394     _tzset();
3395 #else
3396     tzset();
3397 #endif // Q_OS_WIN
3398 }
3399 
3400 /*
3401   Wrap mktime(), which is specified to behave as if it called tzset(), hence
3402   shares its implicit environment-dependence.
3403 */
3404 time_t qMkTime(struct tm *when)
3405 {
3406     const auto locker = qt_scoped_lock(environmentMutex);
3407     return mktime(when);
3408 }
3409 
3410 // Also specified to behave as if they call tzset():
3411 // localtime() -- but not localtime_r(), which we use when threaded
3412 // strftime() -- not used (except in tests)
3413 
3414 /*!
3415     \relates <QtGlobal>
3416     \threadsafe
3417 
3418     Returns the value of the environment variable with name \a varName as a
3419     QByteArray. If no variable by that name is found in the environment, this
3420     function returns a default-constructed QByteArray.
3421 
3422     The Qt environment manipulation functions are thread-safe, but this
3423     requires that the C library equivalent functions like getenv and putenv are
3424     not directly called.
3425 
3426     To convert the data to a QString use QString::fromLocal8Bit().
3427 
3428     \note on desktop Windows, qgetenv() may produce data loss if the
3429     original string contains Unicode characters not representable in the
3430     ANSI encoding. Use qEnvironmentVariable() instead.
3431     On Unix systems, this function is lossless.
3432 
3433     \sa qputenv(), qEnvironmentVariable(), qEnvironmentVariableIsSet(),
3434     qEnvironmentVariableIsEmpty()
3435 */
3436 QByteArray qgetenv(const char *varName)
3437 {
3438     const auto locker = qt_scoped_lock(environmentMutex);
3439 #ifdef Q_CC_MSVC
3440     size_t requiredSize = 0;
3441     QByteArray buffer;
3442     getenv_s(&requiredSize, 0, 0, varName);
3443     if (requiredSize == 0)
3444         return buffer;
3445     buffer.resize(int(requiredSize));
3446     getenv_s(&requiredSize, buffer.data(), requiredSize, varName);
3447     // requiredSize includes the terminating null, which we don't want.
3448     Q_ASSERT(buffer.endsWith('\0'));
3449     buffer.chop(1);
3450     return buffer;
3451 #else
3452     return QByteArray(::getenv(varName));
3453 #endif
3454 }
3455 
3456 
3457 /*!
3458     \fn QString qEnvironmentVariable(const char *varName, const QString &defaultValue)
3459     \fn QString qEnvironmentVariable(const char *varName)
3460 
3461     \relates <QtGlobal>
3462     \since 5.10
3463 
3464     These functions return the value of the environment variable, \a varName, as a
3465     QString. If no variable \a varName is found in the environment and \a defaultValue
3466     is provided, \a defaultValue is returned. Otherwise QString() is returned.
3467 
3468     The Qt environment manipulation functions are thread-safe, but this
3469     requires that the C library equivalent functions like getenv and putenv are
3470     not directly called.
3471 
3472     The following table describes how to choose between qgetenv() and
3473     qEnvironmentVariable():
3474     \table
3475       \header \li Condition         \li Recommendation
3476       \row
3477         \li Variable contains file paths or user text
3478         \li qEnvironmentVariable()
3479       \row
3480         \li Windows-specific code
3481         \li qEnvironmentVariable()
3482       \row
3483         \li Unix-specific code, destination variable is not QString and/or is
3484             used to interface with non-Qt APIs
3485         \li qgetenv()
3486       \row
3487         \li Destination variable is a QString
3488         \li qEnvironmentVariable()
3489       \row
3490         \li Destination variable is a QByteArray or std::string
3491         \li qgetenv()
3492     \endtable
3493 
3494     \note on Unix systems, this function may produce data loss if the original
3495     string contains arbitrary binary data that cannot be decoded by the locale
3496     codec. Use qgetenv() instead for that case. On Windows, this function is
3497     lossless.
3498 
3499     \note the variable name \a varName must contain only US-ASCII characters.
3500 
3501     \sa qputenv(), qgetenv(), qEnvironmentVariableIsSet(), qEnvironmentVariableIsEmpty()
3502 */
3503 QString qEnvironmentVariable(const char *varName, const QString &defaultValue)
3504 {
3505 #if defined(Q_OS_WIN) && !defined(Q_OS_WINRT)
3506     const auto locker = qt_scoped_lock(environmentMutex);
3507     QVarLengthArray<wchar_t, 32> wname(int(strlen(varName)) + 1);
3508     for (int i = 0; i < wname.size(); ++i) // wname.size() is correct: will copy terminating null
3509         wname[i] = uchar(varName[i]);
3510     size_t requiredSize = 0;
3511     QString buffer;
3512     _wgetenv_s(&requiredSize, 0, 0, wname.data());
3513     if (requiredSize == 0)
3514         return defaultValue;
3515     buffer.resize(int(requiredSize));
3516     _wgetenv_s(&requiredSize, reinterpret_cast<wchar_t *>(buffer.data()), requiredSize,
3517                wname.data());
3518     // requiredSize includes the terminating null, which we don't want.
3519     Q_ASSERT(buffer.endsWith(QLatin1Char('\0')));
3520     buffer.chop(1);
3521     return buffer;
3522 #else
3523     QByteArray value = qgetenv(varName);
3524     if (value.isNull())
3525         return defaultValue;
3526 // duplicated in qfile.h (QFile::decodeName)
3527 #if defined(Q_OS_DARWIN)
3528     return QString::fromUtf8(value).normalized(QString::NormalizationForm_C);
3529 #else // other Unix
3530     return QString::fromLocal8Bit(value);
3531 #endif
3532 #endif
3533 }
3534 
3535 QString qEnvironmentVariable(const char *varName)
3536 {
3537     return qEnvironmentVariable(varName, QString());
3538 }
3539 
3540 /*!
3541     \relates <QtGlobal>
3542     \since 5.1
3543 
3544     Returns whether the environment variable \a varName is empty.
3545 
3546     Equivalent to
3547     \snippet code/src_corelib_global_qglobal.cpp is-empty
3548     except that it's potentially much faster, and can't throw exceptions.
3549 
3550     \sa qgetenv(), qEnvironmentVariable(), qEnvironmentVariableIsSet()
3551 */
3552 bool qEnvironmentVariableIsEmpty(const char *varName) noexcept
3553 {
3554     const auto locker = qt_scoped_lock(environmentMutex);
3555 #ifdef Q_CC_MSVC
3556     // we provide a buffer that can only hold the empty string, so
3557     // when the env.var isn't empty, we'll get an ERANGE error (buffer
3558     // too small):
3559     size_t dummy;
3560     char buffer = '\0';
3561     return getenv_s(&dummy, &buffer, 1, varName) != ERANGE;
3562 #else
3563     const char * const value = ::getenv(varName);
3564     return !value || !*value;
3565 #endif
3566 }
3567 
3568 /*!
3569     \relates <QtGlobal>
3570     \since 5.5
3571 
3572     Returns the numerical value of the environment variable \a varName.
3573     If \a ok is not null, sets \c{*ok} to \c true or \c false depending
3574     on the success of the conversion.
3575 
3576     Equivalent to
3577     \snippet code/src_corelib_global_qglobal.cpp to-int
3578     except that it's much faster, and can't throw exceptions.
3579 
3580     \note there's a limit on the length of the value, which is sufficient for
3581     all valid values of int, not counting leading zeroes or spaces. Values that
3582     are too long will either be truncated or this function will set \a ok to \c
3583     false.
3584 
3585     \sa qgetenv(), qEnvironmentVariable(), qEnvironmentVariableIsSet()
3586 */
3587 int qEnvironmentVariableIntValue(const char *varName, bool *ok) noexcept
3588 {
3589     static const int NumBinaryDigitsPerOctalDigit = 3;
3590     static const int MaxDigitsForOctalInt =
3591         (std::numeric_limits<uint>::digits + NumBinaryDigitsPerOctalDigit - 1) / NumBinaryDigitsPerOctalDigit;
3592 
3593     const auto locker = qt_scoped_lock(environmentMutex);
3594 #ifdef Q_CC_MSVC
3595     // we provide a buffer that can hold any int value:
3596     char buffer[MaxDigitsForOctalInt + 2]; // +1 for NUL +1 for optional '-'
3597     size_t dummy;
3598     if (getenv_s(&dummy, buffer, sizeof buffer, varName) != 0) {
3599         if (ok)
3600             *ok = false;
3601         return 0;
3602     }
3603 #else
3604     const char * const buffer = ::getenv(varName);
3605     if (!buffer || strlen(buffer) > MaxDigitsForOctalInt + 2) {
3606         if (ok)
3607             *ok = false;
3608         return 0;
3609     }
3610 #endif
3611     bool ok_ = true;
3612     const char *endptr;
3613     const qlonglong value = qstrtoll(buffer, &endptr, 0, &ok_);
3614 
3615     // Keep the following checks in sync with QByteArray::toInt()
3616     if (!ok_) {
3617         if (ok)
3618             *ok = false;
3619         return 0;
3620     }
3621 
3622     if (*endptr != '\0') {
3623         while (ascii_isspace(*endptr))
3624             ++endptr;
3625     }
3626 
3627     if (*endptr != '\0') {
3628         // we stopped at a non-digit character after converting some digits
3629         if (ok)
3630             *ok = false;
3631         return 0;
3632     }
3633 
3634     if (int(value) != value) {
3635         if (ok)
3636             *ok = false;
3637         return 0;
3638     } else if (ok) {
3639         *ok = ok_;
3640     }
3641     return int(value);
3642 }
3643 
3644 /*!
3645     \relates <QtGlobal>
3646     \since 5.1
3647 
3648     Returns whether the environment variable \a varName is set.
3649 
3650     Equivalent to
3651     \snippet code/src_corelib_global_qglobal.cpp is-null
3652     except that it's potentially much faster, and can't throw exceptions.
3653 
3654     \sa qgetenv(), qEnvironmentVariable(), qEnvironmentVariableIsEmpty()
3655 */
3656 bool qEnvironmentVariableIsSet(const char *varName) noexcept
3657 {
3658     const auto locker = qt_scoped_lock(environmentMutex);
3659 #ifdef Q_CC_MSVC
3660     size_t requiredSize = 0;
3661     (void)getenv_s(&requiredSize, 0, 0, varName);
3662     return requiredSize != 0;
3663 #else
3664     return ::getenv(varName) != nullptr;
3665 #endif
3666 }
3667 
3668 /*!
3669     \relates <QtGlobal>
3670 
3671     This function sets the \a value of the environment variable named
3672     \a varName. It will create the variable if it does not exist. It
3673     returns 0 if the variable could not be set.
3674 
3675     Calling qputenv with an empty value removes the environment variable on
3676     Windows, and makes it set (but empty) on Unix. Prefer using qunsetenv()
3677     for fully portable behavior.
3678 
3679     \note qputenv() was introduced because putenv() from the standard
3680     C library was deprecated in VC2005 (and later versions). qputenv()
3681     uses the replacement function in VC, and calls the standard C
3682     library's implementation on all other platforms.
3683 
3684     \sa qgetenv(), qEnvironmentVariable()
3685 */
3686 bool qputenv(const char *varName, const QByteArray& value)
3687 {
3688     const auto locker = qt_scoped_lock(environmentMutex);
3689 #if defined(Q_CC_MSVC)
3690     return _putenv_s(varName, value.constData()) == 0;
3691 #elif (defined(_POSIX_VERSION) && (_POSIX_VERSION-0) >= 200112L) || defined(Q_OS_HAIKU)
3692     // POSIX.1-2001 has setenv
3693     return setenv(varName, value.constData(), true) == 0;
3694 #else
3695     QByteArray buffer(varName);
3696     buffer += '=';
3697     buffer += value;
3698     char* envVar = qstrdup(buffer.constData());
3699     int result = putenv(envVar);
3700     if (result != 0) // error. we have to delete the string.
3701         delete[] envVar;
3702     return result == 0;
3703 #endif
3704 }
3705 
3706 /*!
3707     \relates <QtGlobal>
3708 
3709     This function deletes the variable \a varName from the environment.
3710 
3711     Returns \c true on success.
3712 
3713     \since 5.1
3714 
3715     \sa qputenv(), qgetenv(), qEnvironmentVariable()
3716 */
3717 bool qunsetenv(const char *varName)
3718 {
3719     const auto locker = qt_scoped_lock(environmentMutex);
3720 #if defined(Q_CC_MSVC)
3721     return _putenv_s(varName, "") == 0;
3722 #elif (defined(_POSIX_VERSION) && (_POSIX_VERSION-0) >= 200112L) || defined(Q_OS_BSD4) || defined(Q_OS_HAIKU)
3723     // POSIX.1-2001, BSD and Haiku have unsetenv
3724     return unsetenv(varName) == 0;
3725 #elif defined(Q_CC_MINGW)
3726     // On mingw, putenv("var=") removes "var" from the environment
3727     QByteArray buffer(varName);
3728     buffer += '=';
3729     return putenv(buffer.constData()) == 0;
3730 #else
3731     // Fallback to putenv("var=") which will insert an empty var into the
3732     // environment and leak it
3733     QByteArray buffer(varName);
3734     buffer += '=';
3735     char *envVar = qstrdup(buffer.constData());
3736     return putenv(envVar) == 0;
3737 #endif
3738 }
3739 
3740 /*!
3741     \macro forever
3742     \relates <QtGlobal>
3743 
3744     This macro is provided for convenience for writing infinite
3745     loops.
3746 
3747     Example:
3748 
3749     \snippet code/src_corelib_global_qglobal.cpp 31
3750 
3751     It is equivalent to \c{for (;;)}.
3752 
3753     If you're worried about namespace pollution, you can disable this
3754     macro by adding the following line to your \c .pro file:
3755 
3756     \snippet code/src_corelib_global_qglobal.cpp 32
3757 
3758     \sa Q_FOREVER
3759 */
3760 
3761 /*!
3762     \macro Q_FOREVER
3763     \relates <QtGlobal>
3764 
3765     Same as \l{forever}.
3766 
3767     This macro is available even when \c no_keywords is specified
3768     using the \c .pro file's \c CONFIG variable.
3769 
3770     \sa foreach()
3771 */
3772 
3773 /*!
3774     \macro foreach(variable, container)
3775     \relates <QtGlobal>
3776 
3777     This macro is used to implement Qt's \c foreach loop. The \a
3778     variable parameter is a variable name or variable definition; the
3779     \a container parameter is a Qt container whose value type
3780     corresponds to the type of the variable. See \l{The foreach
3781     Keyword} for details.
3782 
3783     If you're worried about namespace pollution, you can disable this
3784     macro by adding the following line to your \c .pro file:
3785 
3786     \snippet code/src_corelib_global_qglobal.cpp 33
3787 
3788     \note Since Qt 5.7, the use of this macro is discouraged. It will
3789     be removed in a future version of Qt. Please use C++11 range-for,
3790     possibly with qAsConst(), as needed.
3791 
3792     \sa qAsConst()
3793 */
3794 
3795 /*!
3796     \macro Q_FOREACH(variable, container)
3797     \relates <QtGlobal>
3798 
3799     Same as foreach(\a variable, \a container).
3800 
3801     This macro is available even when \c no_keywords is specified
3802     using the \c .pro file's \c CONFIG variable.
3803 
3804     \note Since Qt 5.7, the use of this macro is discouraged. It will
3805     be removed in a future version of Qt. Please use C++11 range-for,
3806     possibly with qAsConst(), as needed.
3807 
3808     \sa qAsConst()
3809 */
3810 
3811 /*!
3812     \fn template <typename T> typename std::add_const<T>::type &qAsConst(T &t)
3813     \relates <QtGlobal>
3814     \since 5.7
3815 
3816     Returns \a t cast to \c{const T}.
3817 
3818     This function is a Qt implementation of C++17's std::as_const(),
3819     a cast function like std::move(). But while std::move() turns
3820     lvalues into rvalues, this function turns non-const lvalues into
3821     const lvalues. Like std::as_const(), it doesn't work on rvalues,
3822     because it cannot be efficiently implemented for rvalues without
3823     leaving dangling references.
3824 
3825     Its main use in Qt is to prevent implicitly-shared Qt containers
3826     from detaching:
3827     \snippet code/src_corelib_global_qglobal.cpp as-const-0
3828 
3829     Of course, in this case, you could (and probably should) have declared
3830     \c s as \c const in the first place:
3831     \snippet code/src_corelib_global_qglobal.cpp as-const-1
3832     but often that is not easily possible.
3833 
3834     It is important to note that qAsConst() does not copy its argument,
3835     it just performs a \c{const_cast<const T&>(t)}. This is also the reason
3836     why it is designed to fail for rvalues: The returned reference would go
3837     stale too soon. So while this works (but detaches the returned object):
3838     \snippet code/src_corelib_global_qglobal.cpp as-const-2
3839 
3840     this would not:
3841     \snippet code/src_corelib_global_qglobal.cpp as-const-3
3842 
3843     To prevent this construct from compiling (and failing at runtime), qAsConst() has
3844     a second, deleted, overload which binds to rvalues.
3845 */
3846 
3847 /*!
3848     \fn template <typename T> void qAsConst(const T &&t)
3849     \relates <QtGlobal>
3850     \since 5.7
3851     \overload
3852 
3853     This overload is deleted to prevent a dangling reference in code like
3854     \snippet code/src_corelib_global_qglobal.cpp as-const-4
3855 */
3856 
3857 /*!
3858     \fn template <typename T, typename U = T> T qExchange(T &obj, U &&newValue)
3859     \relates <QtGlobal>
3860     \since 5.14
3861 
3862     Replaces the value of \a obj with \a newValue and returns the old value of \a obj.
3863 
3864     This is Qt's implementation of std::exchange(). It differs from std::exchange()
3865     only in that it is \c constexpr already in C++14, and available on all supported
3866     compilers.
3867 
3868     Here is how to use qExchange() to implement move constructors:
3869     \code
3870     MyClass(MyClass &&other)
3871       : m_pointer{qExchange(other.m_pointer, nullptr)},
3872         m_int{qExchange(other.m_int, 0)},
3873         m_vector{std::move(other.m_vector)},
3874         ...
3875     \endcode
3876 
3877     For members of class type, we can use std::move(), as their move-constructor will
3878     do the right thing. But for scalar types such as raw pointers or integer type, move
3879     is the same as copy, which, particularly for pointers, is not what we expect. So, we
3880     cannot use std::move() for such types, but we can use std::exchange()/qExchange() to
3881     make sure the source object's member is already reset by the time we get to the
3882     initialization of our next data member, which might come in handy if the constructor
3883     exits with an exception.
3884 
3885     Here is how to use qExchange() to write a loop that consumes the collection it
3886     iterates over:
3887     \code
3888     for (auto &e : qExchange(collection, {})
3889         doSomethingWith(e);
3890     \endcode
3891 
3892     Which is equivalent to the following, much more verbose code:
3893     \code
3894     {
3895         auto tmp = std::move(collection);
3896         collection = {};                    // or collection.clear()
3897         for (auto &e : tmp)
3898             doSomethingWith(e);
3899     }                                       // destroys 'tmp'
3900     \endcode
3901 
3902     This is perfectly safe, as the for-loop keeps the result of qExchange() alive for as
3903     long as the loop runs, saving the declaration of a temporary variable. Be aware, though,
3904     that qExchange() returns a non-const object, so Qt containers may detach.
3905 */
3906 
3907 /*!
3908     \macro QT_TR_NOOP(sourceText)
3909     \relates <QtGlobal>
3910 
3911     Marks the UTF-8 encoded string literal \a sourceText for delayed
3912     translation in the current context (class).
3913 
3914     The macro tells lupdate to collect the string, and expands to
3915     \a sourceText itself.
3916 
3917     Example:
3918 
3919     \snippet code/src_corelib_global_qglobal.cpp 34
3920 
3921     The macro QT_TR_NOOP_UTF8() is identical and obsolete; this applies
3922     to all other _UTF8 macros as well.
3923 
3924     \sa QT_TRANSLATE_NOOP(), {Internationalization with Qt}
3925 */
3926 
3927 /*!
3928     \macro QT_TRANSLATE_NOOP(context, sourceText)
3929     \relates <QtGlobal>
3930 
3931     Marks the UTF-8 encoded string literal \a sourceText for delayed
3932     translation in the given \a context. The \a context is typically
3933     a class name and also needs to be specified as a string literal.
3934 
3935     The macro tells lupdate to collect the string, and expands to
3936     \a sourceText itself.
3937 
3938     Example:
3939 
3940     \snippet code/src_corelib_global_qglobal.cpp 35
3941 
3942     \sa QT_TR_NOOP(), QT_TRANSLATE_NOOP3(), {Internationalization with Qt}
3943 */
3944 
3945 /*!
3946     \macro QT_TRANSLATE_NOOP3(context, sourceText, disambiguation)
3947     \relates <QtGlobal>
3948     \since 4.4
3949 
3950     Marks the UTF-8 encoded string literal \a sourceText for delayed
3951     translation in the given \a context with the given \a disambiguation.
3952     The \a context is typically a class and also needs to be specified
3953     as a string literal. The string literal \a disambiguation should be
3954     a short semantic tag to tell apart otherwise identical strings.
3955 
3956     The macro tells lupdate to collect the string, and expands to an
3957     anonymous struct of the two string literals passed as \a sourceText
3958     and \a disambiguation.
3959 
3960     Example:
3961 
3962     \snippet code/src_corelib_global_qglobal.cpp 36
3963 
3964     \sa QT_TR_NOOP(), QT_TRANSLATE_NOOP(), {Internationalization with Qt}
3965 */
3966 
3967 /*!
3968     \macro QT_TR_N_NOOP(sourceText)
3969     \relates <QtGlobal>
3970     \since 5.12
3971 
3972     Marks the UTF-8 encoded string literal \a sourceText for numerator
3973     dependent delayed translation in the current context (class).
3974 
3975     The macro tells lupdate to collect the string, and expands to
3976     \a sourceText itself.
3977 
3978     The macro expands to \a sourceText.
3979 
3980     Example:
3981 
3982     \snippet code/src_corelib_global_qglobal.cpp qttrnnoop
3983 
3984     \sa QT_TR_NOOP, {Internationalization with Qt}
3985 */
3986 
3987 /*!
3988     \macro QT_TRANSLATE_N_NOOP(context, sourceText)
3989     \relates <QtGlobal>
3990     \since 5.12
3991 
3992     Marks the UTF-8 encoded string literal \a sourceText for numerator
3993     dependent delayed translation in the given \a context.
3994     The \a context is typically a class name and also needs to be
3995     specified as a string literal.
3996 
3997     The macro tells lupdate to collect the string, and expands to
3998     \a sourceText itself.
3999 
4000     Example:
4001 
4002     \snippet code/src_corelib_global_qglobal.cpp qttranslatennoop
4003 
4004     \sa QT_TRANSLATE_NOOP(), QT_TRANSLATE_N_NOOP3(),
4005     {Internationalization with Qt}
4006 */
4007 
4008 /*!
4009     \macro QT_TRANSLATE_N_NOOP3(context, sourceText, comment)
4010     \relates <QtGlobal>
4011     \since 5.12
4012 
4013     Marks the UTF-8 encoded string literal \a sourceText for numerator
4014     dependent delayed translation in the given \a context with the given
4015     \a comment.
4016     The \a context is typically a class and also needs to be specified
4017     as a string literal. The string literal \a comment should be
4018     a short semantic tag to tell apart otherwise identical strings.
4019 
4020     The macro tells lupdate to collect the string, and expands to an
4021     anonymous struct of the two string literals passed as \a sourceText
4022     and \a comment.
4023 
4024     Example:
4025 
4026     \snippet code/src_corelib_global_qglobal.cpp qttranslatennoop3
4027 
4028     \sa QT_TR_NOOP(), QT_TRANSLATE_NOOP(), QT_TRANSLATE_NOOP3(),
4029     {Internationalization with Qt}
4030 */
4031 
4032 /*!
4033     \fn QString qtTrId(const char *id, int n = -1)
4034     \relates <QtGlobal>
4035     \reentrant
4036     \since 4.6
4037 
4038     \brief The qtTrId function finds and returns a translated string.
4039 
4040     Returns a translated string identified by \a id.
4041     If no matching string is found, the id itself is returned. This
4042     should not happen under normal conditions.
4043 
4044     If \a n >= 0, all occurrences of \c %n in the resulting string
4045     are replaced with a decimal representation of \a n. In addition,
4046     depending on \a n's value, the translation text may vary.
4047 
4048     Meta data and comments can be passed as documented for QObject::tr().
4049     In addition, it is possible to supply a source string template like that:
4050 
4051     \tt{//% <C string>}
4052 
4053     or
4054 
4055     \tt{\\begincomment% <C string> \\endcomment}
4056 
4057     Example:
4058 
4059     \snippet code/src_corelib_global_qglobal.cpp qttrid
4060 
4061     Creating QM files suitable for use with this function requires passing
4062     the \c -idbased option to the \c lrelease tool.
4063 
4064     \warning This method is reentrant only if all translators are
4065     installed \e before calling this method. Installing or removing
4066     translators while performing translations is not supported. Doing
4067     so will probably result in crashes or other undesirable behavior.
4068 
4069     \sa QObject::tr(), QCoreApplication::translate(), {Internationalization with Qt}
4070 */
4071 
4072 /*!
4073     \macro QT_TRID_NOOP(id)
4074     \relates <QtGlobal>
4075     \since 4.6
4076 
4077     \brief The QT_TRID_NOOP macro marks an id for dynamic translation.
4078 
4079     The only purpose of this macro is to provide an anchor for attaching
4080     meta data like to qtTrId().
4081 
4082     The macro expands to \a id.
4083 
4084     Example:
4085 
4086     \snippet code/src_corelib_global_qglobal.cpp qttrid_noop
4087 
4088     \sa qtTrId(), {Internationalization with Qt}
4089 */
4090 
4091 /*!
4092     \macro Q_LIKELY(expr)
4093     \relates <QtGlobal>
4094     \since 4.8
4095 
4096     \brief Hints to the compiler that the enclosed condition, \a expr, is
4097     likely to evaluate to \c true.
4098 
4099     Use of this macro can help the compiler to optimize the code.
4100 
4101     Example:
4102 
4103     \snippet code/src_corelib_global_qglobal.cpp qlikely
4104 
4105     \sa Q_UNLIKELY()
4106 */
4107 
4108 /*!
4109     \macro Q_UNLIKELY(expr)
4110     \relates <QtGlobal>
4111     \since 4.8
4112 
4113     \brief Hints to the compiler that the enclosed condition, \a expr, is
4114     likely to evaluate to \c false.
4115 
4116     Use of this macro can help the compiler to optimize the code.
4117 
4118     Example:
4119 
4120     \snippet code/src_corelib_global_qglobal.cpp qunlikely
4121 
4122     \sa Q_LIKELY()
4123 */
4124 
4125 /*!
4126     \macro QT_POINTER_SIZE
4127     \relates <QtGlobal>
4128 
4129     Expands to the size of a pointer in bytes (4 or 8). This is
4130     equivalent to \c sizeof(void *) but can be used in a preprocessor
4131     directive.
4132 */
4133 
4134 /*!
4135     \macro QABS(n)
4136     \relates <QtGlobal>
4137     \obsolete
4138 
4139     Use qAbs(\a n) instead.
4140 
4141     \sa QMIN(), QMAX()
4142 */
4143 
4144 /*!
4145     \macro QMIN(x, y)
4146     \relates <QtGlobal>
4147     \obsolete
4148 
4149     Use qMin(\a x, \a y) instead.
4150 
4151     \sa QMAX(), QABS()
4152 */
4153 
4154 /*!
4155     \macro QMAX(x, y)
4156     \relates <QtGlobal>
4157     \obsolete
4158 
4159     Use qMax(\a x, \a y) instead.
4160 
4161     \sa QMIN(), QABS()
4162 */
4163 
4164 /*!
4165     \macro const char *qPrintable(const QString &str)
4166     \relates <QtGlobal>
4167 
4168     Returns \a str as a \c{const char *}. This is equivalent to
4169     \a{str}.toLocal8Bit().constData().
4170 
4171     The char pointer will be invalid after the statement in which
4172     qPrintable() is used. This is because the array returned by
4173     QString::toLocal8Bit() will fall out of scope.
4174 
4175     \note qDebug(), qInfo(), qWarning(), qCritical(), qFatal() expect
4176     %s arguments to be UTF-8 encoded, while qPrintable() converts to
4177     local 8-bit encoding. Therefore qUtf8Printable() should be used
4178     for logging strings instead of qPrintable().
4179 
4180     \sa qUtf8Printable()
4181 */
4182 
4183 /*!
4184     \macro const char *qUtf8Printable(const QString &str)
4185     \relates <QtGlobal>
4186     \since 5.4
4187 
4188     Returns \a str as a \c{const char *}. This is equivalent to
4189     \a{str}.toUtf8().constData().
4190 
4191     The char pointer will be invalid after the statement in which
4192     qUtf8Printable() is used. This is because the array returned by
4193     QString::toUtf8() will fall out of scope.
4194 
4195     Example:
4196 
4197     \snippet code/src_corelib_global_qglobal.cpp 37
4198 
4199     \sa qPrintable(), qDebug(), qInfo(), qWarning(), qCritical(), qFatal()
4200 */
4201 
4202 /*!
4203     \macro const wchar_t *qUtf16Printable(const QString &str)
4204     \relates <QtGlobal>
4205     \since 5.7
4206 
4207     Returns \a str as a \c{const ushort *}, but cast to a \c{const wchar_t *}
4208     to avoid warnings. This is equivalent to \a{str}.utf16() plus some casting.
4209 
4210     The only useful thing you can do with the return value of this macro is to
4211     pass it to QString::asprintf() for use in a \c{%ls} conversion. In particular,
4212     the return value is \e{not} a valid \c{const wchar_t*}!
4213 
4214     In general, the pointer will be invalid after the statement in which
4215     qUtf16Printable() is used. This is because the pointer may have been
4216     obtained from a temporary expression, which will fall out of scope.
4217 
4218     Example:
4219 
4220     \snippet code/src_corelib_global_qglobal.cpp qUtf16Printable
4221 
4222     \sa qPrintable(), qDebug(), qInfo(), qWarning(), qCritical(), qFatal()
4223 */
4224 
4225 /*!
4226     \macro Q_DECLARE_TYPEINFO(Type, Flags)
4227     \relates <QtGlobal>
4228 
4229     You can use this macro to specify information about a custom type
4230     \a Type. With accurate type information, Qt's \l{Container Classes}
4231     {generic containers} can choose appropriate storage methods and
4232     algorithms.
4233 
4234     \a Flags can be one of the following:
4235 
4236     \list
4237     \li \c Q_PRIMITIVE_TYPE specifies that \a Type is a POD (plain old
4238        data) type with no constructor or destructor, or else a type where
4239        every bit pattern is a valid object and memcpy() creates a valid
4240        independent copy of the object.
4241     \li \c Q_MOVABLE_TYPE specifies that \a Type has a constructor
4242        and/or a destructor but can be moved in memory using \c
4243        memcpy(). Note: despite the name, this has nothing to do with move
4244        constructors or C++ move semantics.
4245     \li \c Q_COMPLEX_TYPE (the default) specifies that \a Type has
4246        constructors and/or a destructor and that it may not be moved
4247        in memory.
4248     \endlist
4249 
4250     Example of a "primitive" type:
4251 
4252     \snippet code/src_corelib_global_qglobal.cpp 38
4253 
4254     An example of a non-POD "primitive" type is QUuid: Even though
4255     QUuid has constructors (and therefore isn't POD), every bit
4256     pattern still represents a valid object, and memcpy() can be used
4257     to create a valid independent copy of a QUuid object.
4258 
4259     Example of a movable type:
4260 
4261     \snippet code/src_corelib_global_qglobal.cpp 39
4262 
4263     Qt will try to detect the class of a type using std::is_trivial or
4264     std::is_trivially_copyable. Use this macro to tune the behavior.
4265     For instance many types would be candidates for Q_MOVABLE_TYPE despite
4266     not being trivially-copyable. For binary compatibility reasons, QList
4267     optimizations are only enabled if there is an explicit
4268     Q_DECLARE_TYPEINFO even for trivially-copyable types.
4269 */
4270 
4271 /*!
4272     \macro Q_UNUSED(name)
4273     \relates <QtGlobal>
4274 
4275     Indicates to the compiler that the parameter with the specified
4276     \a name is not used in the body of a function. This can be used to
4277     suppress compiler warnings while allowing functions to be defined
4278     with meaningful parameter names in their signatures.
4279 */
4280 
4281 struct QInternal_CallBackTable {
4282     QVector<QList<qInternalCallback> > callbacks;
4283 };
4284 
4285 Q_GLOBAL_STATIC(QInternal_CallBackTable, global_callback_table)
4286 
4287 bool QInternal::registerCallback(Callback cb, qInternalCallback callback)
4288 {
4289     if (unsigned(cb) < unsigned(QInternal::LastCallback)) {
4290         QInternal_CallBackTable *cbt = global_callback_table();
4291         cbt->callbacks.resize(cb + 1);
4292         cbt->callbacks[cb].append(callback);
4293         return true;
4294     }
4295     return false;
4296 }
4297 
4298 bool QInternal::unregisterCallback(Callback cb, qInternalCallback callback)
4299 {
4300     if (unsigned(cb) < unsigned(QInternal::LastCallback)) {
4301         if (global_callback_table.exists()) {
4302             QInternal_CallBackTable *cbt = global_callback_table();
4303             return (bool) cbt->callbacks[cb].removeAll(callback);
4304         }
4305     }
4306     return false;
4307 }
4308 
4309 bool QInternal::activateCallbacks(Callback cb, void **parameters)
4310 {
4311     Q_ASSERT_X(cb >= 0, "QInternal::activateCallback()", "Callback id must be a valid id");
4312 
4313     if (!global_callback_table.exists())
4314         return false;
4315 
4316     QInternal_CallBackTable *cbt = &(*global_callback_table);
4317     if (cbt && cb < cbt->callbacks.size()) {
4318         QList<qInternalCallback> callbacks = cbt->callbacks[cb];
4319         bool ret = false;
4320         for (int i=0; i<callbacks.size(); ++i)
4321             ret |= (callbacks.at(i))(parameters);
4322         return ret;
4323     }
4324     return false;
4325 }
4326 
4327 /*!
4328     \macro Q_BYTE_ORDER
4329     \relates <QtGlobal>
4330 
4331     This macro can be used to determine the byte order your system
4332     uses for storing data in memory. i.e., whether your system is
4333     little-endian or big-endian. It is set by Qt to one of the macros
4334     Q_LITTLE_ENDIAN or Q_BIG_ENDIAN. You normally won't need to worry
4335     about endian-ness, but you might, for example if you need to know
4336     which byte of an integer or UTF-16 character is stored in the
4337     lowest address. Endian-ness is important in networking, where
4338     computers with different values for Q_BYTE_ORDER must pass data
4339     back and forth.
4340 
4341     Use this macro as in the following examples.
4342 
4343     \snippet code/src_corelib_global_qglobal.cpp 40
4344 
4345     \sa Q_BIG_ENDIAN, Q_LITTLE_ENDIAN
4346 */
4347 
4348 /*!
4349     \macro Q_LITTLE_ENDIAN
4350     \relates <QtGlobal>
4351 
4352     This macro represents a value you can compare to the macro
4353     Q_BYTE_ORDER to determine the endian-ness of your system.  In a
4354     little-endian system, the least significant byte is stored at the
4355     lowest address. The other bytes follow in increasing order of
4356     significance.
4357 
4358     \snippet code/src_corelib_global_qglobal.cpp 41
4359 
4360     \sa Q_BYTE_ORDER, Q_BIG_ENDIAN
4361 */
4362 
4363 /*!
4364     \macro Q_BIG_ENDIAN
4365     \relates <QtGlobal>
4366 
4367     This macro represents a value you can compare to the macro
4368     Q_BYTE_ORDER to determine the endian-ness of your system.  In a
4369     big-endian system, the most significant byte is stored at the
4370     lowest address. The other bytes follow in decreasing order of
4371     significance.
4372 
4373     \snippet code/src_corelib_global_qglobal.cpp 42
4374 
4375     \sa Q_BYTE_ORDER, Q_LITTLE_ENDIAN
4376 */
4377 
4378 /*!
4379     \macro QT_NAMESPACE
4380     \internal
4381 
4382     If this macro is defined to \c ns all Qt classes are put in a namespace
4383     called \c ns. Also, moc will output code putting metaobjects etc.
4384     into namespace \c ns.
4385 
4386     \sa QT_BEGIN_NAMESPACE, QT_END_NAMESPACE,
4387     QT_PREPEND_NAMESPACE, QT_USE_NAMESPACE,
4388     QT_BEGIN_INCLUDE_NAMESPACE, QT_END_INCLUDE_NAMESPACE,
4389     QT_BEGIN_MOC_NAMESPACE, QT_END_MOC_NAMESPACE,
4390 */
4391 
4392 /*!
4393     \macro QT_PREPEND_NAMESPACE(identifier)
4394     \internal
4395 
4396     This macro qualifies \a identifier with the full namespace.
4397     It expands to \c{::QT_NAMESPACE::identifier} if \c QT_NAMESPACE is defined
4398     and only \a identifier otherwise.
4399 
4400     \sa QT_NAMESPACE
4401 */
4402 
4403 /*!
4404     \macro QT_USE_NAMESPACE
4405     \internal
4406 
4407     This macro expands to using QT_NAMESPACE if QT_NAMESPACE is defined
4408     and nothing otherwise.
4409 
4410     \sa QT_NAMESPACE
4411 */
4412 
4413 /*!
4414     \macro QT_BEGIN_NAMESPACE
4415     \internal
4416 
4417     This macro expands to
4418 
4419     \snippet code/src_corelib_global_qglobal.cpp begin namespace macro
4420 
4421     if \c QT_NAMESPACE is defined and nothing otherwise. If should always
4422     appear in the file-level scope and be followed by \c QT_END_NAMESPACE
4423     at the same logical level with respect to preprocessor conditionals
4424     in the same file.
4425 
4426     As a rule of thumb, \c QT_BEGIN_NAMESPACE should appear in all Qt header
4427     and Qt source files after the last \c{#include} line and before the first
4428     declaration.
4429 
4430     If that rule can't be followed because, e.g., \c{#include} lines and
4431     declarations are wildly mixed, place \c QT_BEGIN_NAMESPACE before
4432     the first declaration and wrap the \c{#include} lines in
4433     \c QT_BEGIN_INCLUDE_NAMESPACE and \c QT_END_INCLUDE_NAMESPACE.
4434 
4435     When using the \c QT_NAMESPACE feature in user code
4436     (e.g., when building plugins statically linked to Qt) where
4437     the user code is not intended to go into the \c QT_NAMESPACE
4438     namespace, all forward declarations of Qt classes need to
4439     be wrapped in \c QT_BEGIN_NAMESPACE and \c QT_END_NAMESPACE.
4440     After that, a \c QT_USE_NAMESPACE should follow.
4441     No further changes should be needed.
4442 
4443     \sa QT_NAMESPACE
4444 */
4445 
4446 /*!
4447     \macro QT_END_NAMESPACE
4448     \internal
4449 
4450     This macro expands to
4451 
4452     \snippet code/src_corelib_global_qglobal.cpp end namespace macro
4453 
4454     if \c QT_NAMESPACE is defined and nothing otherwise. It is used to cancel
4455     the effect of \c QT_BEGIN_NAMESPACE.
4456 
4457     If a source file ends with a \c{#include} directive that includes a moc file,
4458     \c QT_END_NAMESPACE should be placed before that \c{#include}.
4459 
4460     \sa QT_NAMESPACE
4461 */
4462 
4463 /*!
4464     \macro QT_BEGIN_INCLUDE_NAMESPACE
4465     \internal
4466 
4467     This macro is equivalent to \c QT_END_NAMESPACE.
4468     It only serves as syntactic sugar and is intended
4469     to be used before #include lines within a
4470     \c QT_BEGIN_NAMESPACE ... \c QT_END_NAMESPACE block.
4471 
4472     \sa QT_NAMESPACE
4473 */
4474 
4475 /*!
4476     \macro QT_END_INCLUDE_NAMESPACE
4477     \internal
4478 
4479     This macro is equivalent to \c QT_BEGIN_NAMESPACE.
4480     It only serves as syntactic sugar and is intended
4481     to be used after #include lines within a
4482     \c QT_BEGIN_NAMESPACE ... \c QT_END_NAMESPACE block.
4483 
4484     \sa QT_NAMESPACE
4485 */
4486 
4487 /*!
4488     \macro QT_BEGIN_MOC_NAMESPACE
4489     \internal
4490 
4491     This macro is output by moc at the beginning of
4492     moc files. It is equivalent to \c QT_USE_NAMESPACE.
4493 
4494     \sa QT_NAMESPACE
4495 */
4496 
4497 /*!
4498     \macro QT_END_MOC_NAMESPACE
4499     \internal
4500 
4501     This macro is output by moc at the beginning of
4502     moc files. It expands to nothing.
4503 
4504     \sa QT_NAMESPACE
4505 */
4506 
4507 /*!
4508  \fn bool qFuzzyCompare(double p1, double p2)
4509  \relates <QtGlobal>
4510  \since 4.4
4511  \threadsafe
4512 
4513  Compares the floating point value \a p1 and \a p2 and
4514  returns \c true if they are considered equal, otherwise \c false.
4515 
4516  Note that comparing values where either \a p1 or \a p2 is 0.0 will not work,
4517  nor does comparing values where one of the values is NaN or infinity.
4518  If one of the values is always 0.0, use qFuzzyIsNull instead. If one of the
4519  values is likely to be 0.0, one solution is to add 1.0 to both values.
4520 
4521  \snippet code/src_corelib_global_qglobal.cpp 46
4522 
4523  The two numbers are compared in a relative way, where the
4524  exactness is stronger the smaller the numbers are.
4525  */
4526 
4527 /*!
4528  \fn bool qFuzzyCompare(float p1, float p2)
4529  \relates <QtGlobal>
4530  \since 4.4
4531  \threadsafe
4532 
4533  Compares the floating point value \a p1 and \a p2 and
4534  returns \c true if they are considered equal, otherwise \c false.
4535 
4536  The two numbers are compared in a relative way, where the
4537  exactness is stronger the smaller the numbers are.
4538  */
4539 
4540 /*!
4541  \fn bool qFuzzyIsNull(double d)
4542  \relates <QtGlobal>
4543  \since 4.4
4544  \threadsafe
4545 
4546  Returns true if the absolute value of \a d is within 0.000000000001 of 0.0.
4547 */
4548 
4549 /*!
4550  \fn bool qFuzzyIsNull(float f)
4551  \relates <QtGlobal>
4552  \since 4.4
4553  \threadsafe
4554 
4555  Returns true if the absolute value of \a f is within 0.00001f of 0.0.
4556 */
4557 
4558 /*!
4559     \macro QT_REQUIRE_VERSION(int argc, char **argv, const char *version)
4560     \relates <QtGlobal>
4561 
4562     This macro can be used to ensure that the application is run
4563     against a recent enough version of Qt. This is especially useful
4564     if your application depends on a specific bug fix introduced in a
4565     bug-fix release (e.g., 4.0.2).
4566 
4567     The \a argc and \a argv parameters are the \c main() function's
4568     \c argc and \c argv parameters. The \a version parameter is a
4569     string literal that specifies which version of Qt the application
4570     requires (e.g., "4.0.2").
4571 
4572     Example:
4573 
4574     \snippet code/src_gui_dialogs_qmessagebox.cpp 4
4575 */
4576 
4577 /*!
4578     \macro Q_DECL_EXPORT
4579     \relates <QtGlobal>
4580 
4581     This macro marks a symbol for shared library export (see
4582      \l{sharedlibrary.html}{Creating Shared Libraries}).
4583 
4584     \sa Q_DECL_IMPORT
4585 */
4586 
4587 /*!
4588     \macro Q_DECL_IMPORT
4589     \relates <QtGlobal>
4590 
4591     This macro declares a symbol to be an import from a shared library (see
4592     \l{sharedlibrary.html}{Creating Shared Libraries}).
4593 
4594     \sa Q_DECL_EXPORT
4595 */
4596 
4597 /*!
4598     \macro Q_DECL_CONSTEXPR
4599     \relates <QtGlobal>
4600 
4601     This macro can be used to declare variable that should be constructed at compile-time,
4602     or an inline function that can be computed at compile-time.
4603 
4604     It expands to "constexpr" if your compiler supports that C++11 keyword, or to nothing
4605     otherwise.
4606 
4607     \sa Q_DECL_RELAXED_CONSTEXPR
4608 */
4609 
4610 /*!
4611     \macro Q_DECL_RELAXED_CONSTEXPR
4612     \relates <QtGlobal>
4613 
4614     This macro can be used to declare an inline function that can be computed
4615     at compile-time according to the relaxed rules from C++14.
4616 
4617     It expands to "constexpr" if your compiler supports C++14 relaxed constant
4618     expressions, or to nothing otherwise.
4619 
4620     \sa Q_DECL_CONSTEXPR
4621 */
4622 
4623 /*!
4624     \macro qDebug(const char *message, ...)
4625     \relates <QtGlobal>
4626     \threadsafe
4627 
4628     Calls the message handler with the debug message \a message. If no
4629     message handler has been installed, the message is printed to
4630     stderr. Under Windows the message is sent to the console, if it is a
4631     console application; otherwise, it is sent to the debugger. On QNX, the
4632     message is sent to slogger2. This function does nothing if \c QT_NO_DEBUG_OUTPUT
4633     was defined during compilation.
4634 
4635     If you pass the function a format string and a list of arguments,
4636     it works in similar way to the C printf() function. The format
4637     should be a Latin-1 string.
4638 
4639     Example:
4640 
4641     \snippet code/src_corelib_global_qglobal.cpp 24
4642 
4643     If you include \c <QtDebug>, a more convenient syntax is also
4644     available:
4645 
4646     \snippet code/src_corelib_global_qglobal.cpp 25
4647 
4648     With this syntax, the function returns a QDebug object that is
4649     configured to use the QtDebugMsg message type. It automatically
4650     puts a single space between each item, and outputs a newline at
4651     the end. It supports many C++ and Qt types.
4652 
4653     To suppress the output at run-time, install your own message handler
4654     with qInstallMessageHandler().
4655 
4656     \sa qInfo(), qWarning(), qCritical(), qFatal(), qInstallMessageHandler(),
4657         {Debugging Techniques}
4658 */
4659 
4660 /*!
4661     \macro qInfo(const char *message, ...)
4662     \relates <QtGlobal>
4663     \threadsafe
4664     \since 5.5
4665 
4666     Calls the message handler with the informational message \a message. If no
4667     message handler has been installed, the message is printed to
4668     stderr. Under Windows, the message is sent to the console, if it is a
4669     console application; otherwise, it is sent to the debugger. On QNX the
4670     message is sent to slogger2. This function does nothing if \c QT_NO_INFO_OUTPUT
4671     was defined during compilation.
4672 
4673     If you pass the function a format string and a list of arguments,
4674     it works in similar way to the C printf() function. The format
4675     should be a Latin-1 string.
4676 
4677     Example:
4678 
4679     \snippet code/src_corelib_global_qglobal.cpp qInfo_printf
4680 
4681     If you include \c <QtDebug>, a more convenient syntax is also
4682     available:
4683 
4684     \snippet code/src_corelib_global_qglobal.cpp qInfo_stream
4685 
4686     With this syntax, the function returns a QDebug object that is
4687     configured to use the QtInfoMsg message type. It automatically
4688     puts a single space between each item, and outputs a newline at
4689     the end. It supports many C++ and Qt types.
4690 
4691     To suppress the output at run-time, install your own message handler
4692     with qInstallMessageHandler().
4693 
4694     \sa qDebug(), qWarning(), qCritical(), qFatal(), qInstallMessageHandler(),
4695         {Debugging Techniques}
4696 */
4697 
4698 /*!
4699     \macro qWarning(const char *message, ...)
4700     \relates <QtGlobal>
4701     \threadsafe
4702 
4703     Calls the message handler with the warning message \a message. If no
4704     message handler has been installed, the message is printed to
4705     stderr. Under Windows, the message is sent to the debugger.
4706     On QNX the message is sent to slogger2. This
4707     function does nothing if \c QT_NO_WARNING_OUTPUT was defined
4708     during compilation; it exits if at the nth warning corresponding to the
4709     counter in environment variable \c QT_FATAL_WARNINGS. That is, if the
4710     environment variable contains the value 1, it will exit on the 1st message;
4711     if it contains the value 10, it will exit on the 10th message. Any
4712     non-numeric value is equivalent to 1.
4713 
4714     This function takes a format string and a list of arguments,
4715     similar to the C printf() function. The format should be a Latin-1
4716     string.
4717 
4718     Example:
4719     \snippet code/src_corelib_global_qglobal.cpp 26
4720 
4721     If you include <QtDebug>, a more convenient syntax is
4722     also available:
4723 
4724     \snippet code/src_corelib_global_qglobal.cpp 27
4725 
4726     This syntax inserts a space between each item, and
4727     appends a newline at the end.
4728 
4729     To suppress the output at runtime, install your own message handler
4730     with qInstallMessageHandler().
4731 
4732     \sa qDebug(), qInfo(), qCritical(), qFatal(), qInstallMessageHandler(),
4733         {Debugging Techniques}
4734 */
4735 
4736 /*!
4737     \macro qCritical(const char *message, ...)
4738     \relates <QtGlobal>
4739     \threadsafe
4740 
4741     Calls the message handler with the critical message \a message. If no
4742     message handler has been installed, the message is printed to
4743     stderr. Under Windows, the message is sent to the debugger.
4744     On QNX the message is sent to slogger2.
4745 
4746     It exits if the environment variable QT_FATAL_CRITICALS is not empty.
4747 
4748     This function takes a format string and a list of arguments,
4749     similar to the C printf() function. The format should be a Latin-1
4750     string.
4751 
4752     Example:
4753     \snippet code/src_corelib_global_qglobal.cpp 28
4754 
4755     If you include <QtDebug>, a more convenient syntax is
4756     also available:
4757 
4758     \snippet code/src_corelib_global_qglobal.cpp 29
4759 
4760     A space is inserted between the items, and a newline is
4761     appended at the end.
4762 
4763     To suppress the output at runtime, install your own message handler
4764     with qInstallMessageHandler().
4765 
4766     \sa qDebug(), qInfo(), qWarning(), qFatal(), qInstallMessageHandler(),
4767         {Debugging Techniques}
4768 */
4769 
4770 /*!
4771     \macro qFatal(const char *message, ...)
4772     \relates <QtGlobal>
4773 
4774     Calls the message handler with the fatal message \a message. If no
4775     message handler has been installed, the message is printed to
4776     stderr. Under Windows, the message is sent to the debugger.
4777     On QNX the message is sent to slogger2.
4778 
4779     If you are using the \b{default message handler} this function will
4780     abort to create a core dump. On Windows, for debug builds,
4781     this function will report a _CRT_ERROR enabling you to connect a debugger
4782     to the application.
4783 
4784     This function takes a format string and a list of arguments,
4785     similar to the C printf() function.
4786 
4787     Example:
4788     \snippet code/src_corelib_global_qglobal.cpp 30
4789 
4790     To suppress the output at runtime, install your own message handler
4791     with qInstallMessageHandler().
4792 
4793     \sa qDebug(), qInfo(), qWarning(), qCritical(), qInstallMessageHandler(),
4794         {Debugging Techniques}
4795 */
4796 
4797 /*!
4798     \macro qMove(x)
4799     \relates <QtGlobal>
4800 
4801     It expands to "std::move" if your compiler supports that C++11 function, or to nothing
4802     otherwise.
4803 
4804     qMove takes an rvalue reference to its parameter \a x, and converts it to an xvalue.
4805 */
4806 
4807 /*!
4808     \macro Q_DECL_NOTHROW
4809     \relates <QtGlobal>
4810     \since 5.0
4811 
4812     This macro marks a function as never throwing, under no
4813     circumstances. If the function does nevertheless throw, the
4814     behaviour is undefined.
4815 
4816     The macro expands to either "throw()", if that has some benefit on
4817     the compiler, or to C++11 noexcept, if available, or to nothing
4818     otherwise.
4819 
4820     If you need C++11 noexcept semantics, don't use this macro, use
4821     Q_DECL_NOEXCEPT/Q_DECL_NOEXCEPT_EXPR instead.
4822 
4823     \sa Q_DECL_NOEXCEPT, Q_DECL_NOEXCEPT_EXPR()
4824 */
4825 
4826 /*!
4827     \macro QT_TERMINATE_ON_EXCEPTION(expr)
4828     \relates <QtGlobal>
4829     \internal
4830 
4831     In general, use of the Q_DECL_NOEXCEPT macro is preferred over
4832     Q_DECL_NOTHROW, because it exhibits well-defined behavior and
4833     supports the more powerful Q_DECL_NOEXCEPT_EXPR variant. However,
4834     use of Q_DECL_NOTHROW has the advantage that Windows builds
4835     benefit on a wide range or compiler versions that do not yet
4836     support the C++11 noexcept feature.
4837 
4838     It may therefore be beneficial to use Q_DECL_NOTHROW and emulate
4839     the C++11 behavior manually with an embedded try/catch.
4840 
4841     Qt provides the QT_TERMINATE_ON_EXCEPTION(expr) macro for this
4842     purpose. It either expands to \c expr (if Qt is compiled without
4843     exception support or the compiler supports C++11 noexcept
4844     semantics) or to
4845     \snippet code/src_corelib_global_qglobal.cpp qterminate
4846     otherwise.
4847 
4848     Since this macro expands to just \c expr if the compiler supports
4849     C++11 noexcept, expecting the compiler to take over responsibility
4850     of calling std::terminate() in that case, it should not be used
4851     outside Q_DECL_NOTHROW functions.
4852 
4853     \sa Q_DECL_NOEXCEPT, Q_DECL_NOTHROW, qTerminate()
4854 */
4855 
4856 /*!
4857     \macro Q_DECL_NOEXCEPT
4858     \relates <QtGlobal>
4859     \since 5.0
4860 
4861     This macro marks a function as never throwing. If the function
4862     does nevertheless throw, the behaviour is defined:
4863     std::terminate() is called.
4864 
4865     The macro expands to C++11 noexcept, if available, or to nothing
4866     otherwise.
4867 
4868     If you need the operator version of C++11 noexcept, use
4869     Q_DECL_NOEXCEPT_EXPR(x).
4870 
4871     If you don't need C++11 noexcept semantics, e.g. because your
4872     function can't possibly throw, don't use this macro, use
4873     Q_DECL_NOTHROW instead.
4874 
4875     \sa Q_DECL_NOTHROW, Q_DECL_NOEXCEPT_EXPR()
4876 */
4877 
4878 /*!
4879     \macro Q_DECL_NOEXCEPT_EXPR(x)
4880     \relates <QtGlobal>
4881     \since 5.0
4882 
4883     This macro marks a function as non-throwing if \a x is \c true. If
4884     the function does nevertheless throw, the behaviour is defined:
4885     std::terminate() is called.
4886 
4887     The macro expands to C++11 noexcept(x), if available, or to
4888     nothing otherwise.
4889 
4890     If you need the always-true version of C++11 noexcept, use
4891     Q_DECL_NOEXCEPT.
4892 
4893     If you don't need C++11 noexcept semantics, e.g. because your
4894     function can't possibly throw, don't use this macro, use
4895     Q_DECL_NOTHROW instead.
4896 
4897     \sa Q_DECL_NOTHROW, Q_DECL_NOEXCEPT
4898 */
4899 
4900 /*!
4901     \macro Q_DECL_OVERRIDE
4902     \since 5.0
4903     \relates <QtGlobal>
4904 
4905     This macro can be used to declare an overriding virtual
4906     function. Use of this markup will allow the compiler to generate
4907     an error if the overriding virtual function does not in fact
4908     override anything.
4909 
4910     It expands to "override" if your compiler supports that C++11
4911     contextual keyword, or to nothing otherwise.
4912 
4913     The macro goes at the end of the function, usually after the
4914     \c{const}, if any:
4915     \snippet code/src_corelib_global_qglobal.cpp qdecloverride
4916 
4917     \sa Q_DECL_FINAL
4918 */
4919 
4920 /*!
4921     \macro Q_DECL_FINAL
4922     \since 5.0
4923     \relates <QtGlobal>
4924 
4925     This macro can be used to declare an overriding virtual or a class
4926     as "final", with Java semantics. Further-derived classes can then
4927     no longer override this virtual function, or inherit from this
4928     class, respectively.
4929 
4930     It expands to "final" if your compiler supports that C++11
4931     contextual keyword, or something non-standard if your compiler
4932     supports something close enough to the C++11 semantics, or to
4933     nothing otherwise.
4934 
4935     The macro goes at the end of the function, usually after the
4936     \c{const}, if any:
4937     \snippet code/src_corelib_global_qglobal.cpp qdeclfinal-1
4938 
4939     For classes, it goes in front of the \c{:} in the class
4940     definition, if any:
4941     \snippet code/src_corelib_global_qglobal.cpp qdeclfinal-2
4942 
4943     \sa Q_DECL_OVERRIDE
4944 */
4945 
4946 /*!
4947     \macro Q_FORWARD_DECLARE_OBJC_CLASS(classname)
4948     \since 5.2
4949     \relates <QtGlobal>
4950 
4951     Forward-declares an Objective-C \a classname in a manner such that it can be
4952     compiled as either Objective-C or C++.
4953 
4954     This is primarily intended for use in header files that may be included by
4955     both Objective-C and C++ source files.
4956 */
4957 
4958 /*!
4959     \macro Q_FORWARD_DECLARE_CF_TYPE(type)
4960     \since 5.2
4961     \relates <QtGlobal>
4962 
4963     Forward-declares a Core Foundation \a type. This includes the actual
4964     type and the ref type. For example, Q_FORWARD_DECLARE_CF_TYPE(CFString)
4965     declares __CFString and CFStringRef.
4966 */
4967 
4968 /*!
4969     \macro Q_FORWARD_DECLARE_MUTABLE_CF_TYPE(type)
4970     \since 5.2
4971     \relates <QtGlobal>
4972 
4973     Forward-declares a mutable Core Foundation \a type. This includes the actual
4974     type and the ref type. For example, Q_FORWARD_DECLARE_MUTABLE_CF_TYPE(CFMutableString)
4975     declares __CFMutableString and CFMutableStringRef.
4976 */
4977 
4978 QT_END_NAMESPACE
