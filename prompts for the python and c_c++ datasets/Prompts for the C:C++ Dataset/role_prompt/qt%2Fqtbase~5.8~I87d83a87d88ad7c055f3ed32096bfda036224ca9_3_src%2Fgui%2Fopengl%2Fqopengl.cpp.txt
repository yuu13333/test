I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2015 The Qt Company Ltd.
4 ** Contact: http://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL21$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see http://www.qt.io/terms-conditions. For further
15 ** information use the contact form at http://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 2.1 or version 3 as published by the Free
20 ** Software Foundation and appearing in the file LICENSE.LGPLv21 and
21 ** LICENSE.LGPLv3 included in the packaging of this file. Please review the
22 ** following information to ensure the GNU Lesser General Public License
23 ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
24 ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
25 **
26 ** As a special exception, The Qt Company gives you certain additional
27 ** rights. These rights are described in The Qt Company LGPL Exception
28 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
29 **
30 ** $QT_END_LICENSE$
31 **
32 ****************************************************************************/
33 
34 #include "qopengl.h"
35 #include "qopengl_p.h"
36 
37 #include "qopenglcontext.h"
38 #include "qopenglfunctions.h"
39 #include "qoffscreensurface.h"
40 
41 #include <QtCore/QDebug>
42 #include <QtCore/QJsonDocument>
43 #include <QtCore/QJsonValue>
44 #include <QtCore/QJsonObject>
45 #include <QtCore/QJsonArray>
46 #include <QtCore/QTextStream>
47 #include <QtCore/QFile>
48 #include <QtCore/QDir>
49 
50 #include <set>
51 
52 QT_BEGIN_NAMESPACE
53 
54 #if defined(QT_OPENGL_3)
55 typedef const GLubyte * (QOPENGLF_APIENTRYP qt_glGetStringi)(GLenum, GLuint);
56 #endif
57 
58 QOpenGLExtensionMatcher::QOpenGLExtensionMatcher()
59 {
60     QOpenGLContext *ctx = QOpenGLContext::currentContext();
61     QOpenGLFunctions *funcs = ctx->functions();
62     const char *extensionStr = 0;
63 
64     if (ctx && (ctx->isOpenGLES() || ctx->format().majorVersion() < 3))
65         extensionStr = reinterpret_cast<const char *>(funcs->glGetString(GL_EXTENSIONS));
66 
67     if (extensionStr) {
68         QByteArray ba(extensionStr);
69         QList<QByteArray> extensions = ba.split(' ');
70         m_extensions = extensions.toSet();
71     } else {
72 #ifdef QT_OPENGL_3
73         // clear error state
74         while (funcs->glGetError()) {}
75 
76         if (ctx) {
77             qt_glGetStringi glGetStringi = (qt_glGetStringi)ctx->getProcAddress("glGetStringi");
78 
79             if (!glGetStringi)
80                 return;
81 
82             GLint numExtensions = 0;
83             funcs->glGetIntegerv(GL_NUM_EXTENSIONS, &numExtensions);
84 
85             for (int i = 0; i < numExtensions; ++i) {
86                 const char *str = reinterpret_cast<const char *>(glGetStringi(GL_EXTENSIONS, i));
87                 m_extensions.insert(str);
88             }
89         }
90 #endif // QT_OPENGL_3
91     }
92 }
93 
94 /* Helpers to read out the list of features matching a device from
95  * a Chromium driver bug list. Note that not all keys are supported and
96  * some may behave differently: gl_vendor is a substring match instead of regex.
97  {
98   "entries": [
99  {
100       "id": 20,
101       "description": "Disable EXT_draw_buffers on GeForce GT 650M on Linux due to driver bugs",
102       "os": {
103         "type": "linux"
104       },
105       // Optional: "exceptions" list
106       "vendor_id": "0x10de",
107       "device_id": ["0x0fd5"],
108       "multi_gpu_category": "any",
109       "features": [
110         "disable_ext_draw_buffers"
111       ]
112     },
113    ....
114    }
115 */
116 
117 QDebug operator<<(QDebug d, const QOpenGLConfig::Gpu &g)
118 {
119     QDebugStateSaver s(d);
120     d.nospace();
121     d << "Gpu(";
122     if (g.isValid()) {
123         d << "vendor=" << hex << showbase <<g.vendorId << ", device=" << g.deviceId
124           << "version=" << g.driverVersion;
125     } else {
126         d << 0;
127     }
128     d << ')';
129     return d;
130 }
131 
132 enum Operator { NotEqual, LessThan, LessEqualThan, Equals, GreaterThan, GreaterEqualThan };
133 static const char operators[][3] = {"!=", "<", "<=", "=", ">", ">="};
134 
135 static inline QString valueKey()         { return QStringLiteral("value"); }
136 static inline QString opKey()            { return QStringLiteral("op"); }
137 static inline QString versionKey()       { return QStringLiteral("version"); }
138 static inline QString releaseKey()       { return QStringLiteral("release"); }
139 static inline QString typeKey()          { return QStringLiteral("type"); }
140 static inline QString osKey()            { return QStringLiteral("os"); }
141 static inline QString vendorIdKey()      { return QStringLiteral("vendor_id"); }
142 static inline QString glVendorKey()      { return QStringLiteral("gl_vendor"); }
143 static inline QString deviceIdKey()      { return QStringLiteral("device_id"); }
144 static inline QString driverVersionKey() { return QStringLiteral("driver_version"); }
145 static inline QString driverDescriptionKey() { return QStringLiteral("driver_description"); }
146 static inline QString featuresKey()      { return QStringLiteral("features"); }
147 static inline QString idKey()            { return QStringLiteral("id"); }
148 static inline QString descriptionKey()   { return QStringLiteral("description"); }
149 static inline QString exceptionsKey()    { return QStringLiteral("exceptions"); }
150 
151 typedef QJsonArray::ConstIterator JsonArrayConstIt;
152 
153 static inline bool contains(const QJsonArray &haystack, unsigned needle)
154 {
155     for (JsonArrayConstIt it = haystack.constBegin(), cend = haystack.constEnd(); it != cend; ++it) {
156         if (needle == it->toString().toUInt(Q_NULLPTR, /* base */ 0))
157             return true;
158     }
159     return false;
160 }
161 
162 static inline bool contains(const QJsonArray &haystack, const QString &needle)
163 {
164     for (JsonArrayConstIt it = haystack.constBegin(), cend = haystack.constEnd(); it != cend; ++it) {
165         if (needle == it->toString())
166             return true;
167     }
168     return false;
169 }
170 
171 namespace {
172 // VersionTerm describing a version term consisting of number and operator
173 // found in os.version and driver_version.
174 struct VersionTerm {
175     VersionTerm() : op(NotEqual) {}
176     static VersionTerm fromJson(const QJsonValue &v);
177     bool isNull() const { return number.isNull(); }
178     bool matches(const QVersionNumber &other) const;
179 
180     QVersionNumber number;
181     Operator op;
182 };
183 
184 bool VersionTerm::matches(const QVersionNumber &other) const
185 {
186     if (isNull() || other.isNull()) {
187         qWarning("called with invalid parameters");
188         return false;
189     }
190     switch (op) {
191     case NotEqual:
192         return other != number;
193     case LessThan:
194         return other < number;
195     case LessEqualThan:
196         return other <= number;
197     case Equals:
198         return other == number;
199     case GreaterThan:
200         return other > number;
201     case GreaterEqualThan:
202         return other >= number;
203     }
204     return false;
205 }
206 
207 VersionTerm VersionTerm::fromJson(const QJsonValue &v)
208 {
209     VersionTerm result;
210     if (!v.isObject())
211         return result;
212     const QJsonObject o = v.toObject();
213     result.number = QVersionNumber::fromString(o.value(valueKey()).toString());
214     const QString opS = o.value(opKey()).toString();
215     for (size_t i = 0; i < sizeof(operators) / sizeof(operators[0]); ++i) {
216         if (opS == QLatin1String(operators[i])) {
217             result.op = static_cast<Operator>(i);
218             break;
219         }
220     }
221     return result;
222 }
223 
224 // OS term consisting of name and optional version found in
225 // under "os" in main array and in "exceptions" lists.
226 struct OsTypeTerm
227 {
228     static OsTypeTerm fromJson(const QJsonValue &v);
229     static QString hostOs();
230     static QVersionNumber hostKernelVersion() { return QVersionNumber::fromString(QSysInfo::kernelVersion()); }
231     static QString hostOsRelease() {
232         QString ver;
233 #ifdef Q_OS_WIN
234         switch (QSysInfo::windowsVersion()) {
235         case QSysInfo::WV_XP:
236         case QSysInfo::WV_2003:
237             ver = QStringLiteral("xp");
238             break;
239         case QSysInfo::WV_VISTA:
240             ver = QStringLiteral("vista");
241             break;
242         case QSysInfo::WV_WINDOWS7:
243             ver = QStringLiteral("7");
244             break;
245         case QSysInfo::WV_WINDOWS8:
246             ver = QStringLiteral("8");
247             break;
248         case QSysInfo::WV_WINDOWS8_1:
249             ver = QStringLiteral("8.1");
250             break;
251         case QSysInfo::WV_WINDOWS10:
252             ver = QStringLiteral("10");
253             break;
254         default:
255             break;
256         }
257 #endif
258         return ver;
259     }
260 
261     bool isNull() const { return type.isEmpty(); }
262     bool matches(const QString &osName, const QVersionNumber &kernelVersion, const QString &osRelease) const
263     {
264         if (isNull() || osName.isEmpty() || kernelVersion.isNull()) {
265             qWarning("called with invalid parameters");
266             return false;
267         }
268         if (type != osName)
269             return false;
270         if (!versionTerm.isNull() && !versionTerm.matches(kernelVersion))
271             return false;
272         // release is a list of Windows versions where the rule should match
273         if (!release.isEmpty() && !contains(release, osRelease))
274             return false;
275         return true;
276     }
277 
278     QString type;
279     VersionTerm versionTerm;
280     QJsonArray release;
281 };
282 
283 OsTypeTerm OsTypeTerm::fromJson(const QJsonValue &v)
284 {
285     OsTypeTerm result;
286     if (!v.isObject())
287         return result;
288     const QJsonObject o = v.toObject();
289     result.type = o.value(typeKey()).toString();
290     result.versionTerm = VersionTerm::fromJson(o.value(versionKey()));
291     result.release = o.value(releaseKey()).toArray();
292     return result;
293 }
294 
295 QString OsTypeTerm::hostOs()
296 {
297     // Determine Host OS.
298 #if defined(Q_OS_WIN)
299     return  QStringLiteral("win");
300 #elif defined(Q_OS_LINUX)
301     return QStringLiteral("linux");
302 #elif defined(Q_OS_OSX)
303     return  QStringLiteral("macosx");
304 #elif defined(Q_OS_ANDROID)
305     return  QStringLiteral("android");
306 #else
307     return QString();
308 #endif
309 }
310 } // anonymous namespace
311 
312 static QString msgSyntaxWarning(const QJsonObject &object, const QString &what)
313 {
314     QString result;
315     QTextStream(&result) << "Id " << object.value(idKey()).toInt()
316         << " (\"" << object.value(descriptionKey()).toString()
317         << "\"): " << what;
318     return result;
319 }
320 
321 // Check whether an entry matches. Called recursively for
322 // "exceptions" list.
323 
324 static bool matches(const QJsonObject &object,
325                     const QString &osName,
326                     const QVersionNumber &kernelVersion,
327                     const QString &osRelease,
328                     const QOpenGLConfig::Gpu &gpu)
329 {
330     const OsTypeTerm os = OsTypeTerm::fromJson(object.value(osKey()));
331     if (!os.isNull() && !os.matches(osName, kernelVersion, osRelease))
332         return false;
333 
334     const QJsonValue exceptionsV = object.value(exceptionsKey());
335     if (exceptionsV.isArray()) {
336         const QJsonArray exceptionsA = exceptionsV.toArray();
337         for (JsonArrayConstIt it = exceptionsA.constBegin(), cend = exceptionsA.constEnd(); it != cend; ++it) {
338             if (matches(it->toObject(), osName, kernelVersion, osRelease, gpu))
339                 return false;
340         }
341     }
342 
343     const QJsonValue vendorV = object.value(vendorIdKey());
344     if (vendorV.isString()) {
345         if (gpu.vendorId != vendorV.toString().toUInt(Q_NULLPTR, /* base */ 0))
346             return false;
347     } else {
348         if (object.contains(glVendorKey())) {
349             const QByteArray glVendorV = object.value(glVendorKey()).toString().toUtf8();
350             if (!gpu.glVendor.contains(glVendorV))
351                 return false;
352         }
353     }
354 
355     if (gpu.deviceId) {
356         const QJsonValue deviceIdV = object.value(deviceIdKey());
357         switch (deviceIdV.type()) {
358         case QJsonValue::Array:
359             if (!contains(deviceIdV.toArray(), gpu.deviceId))
360                 return false;
361             break;
362         case QJsonValue::Undefined:
363         case QJsonValue::Null:
364             break;
365         default:
366             qWarning().noquote()
367                 << msgSyntaxWarning(object,
368                                     QLatin1String("Device ID must be of type array."));
369         }
370     }
371     if (!gpu.driverVersion.isNull()) {
372         const QJsonValue driverVersionV = object.value(driverVersionKey());
373         switch (driverVersionV.type()) {
374         case QJsonValue::Object:
375             if (!VersionTerm::fromJson(driverVersionV).matches(gpu.driverVersion))
376                 return false;
377             break;
378         case QJsonValue::Undefined:
379         case QJsonValue::Null:
380             break;
381         default:
382             qWarning().noquote()
383                 << msgSyntaxWarning(object,
384                                     QLatin1String("Driver version must be of type object."));
385         }
386     }
387 
388     if (!gpu.driverDescription.isEmpty()) {
389         const QJsonValue driverDescriptionV = object.value(driverDescriptionKey());
390         if (driverDescriptionV.isString()) {
391             if (!gpu.driverDescription.contains(driverDescriptionV.toString().toUtf8()))
392                 return false;
393         }
394     }
395 
396     return true;
397 }
398 
399 static bool readGpuFeatures(const QOpenGLConfig::Gpu &gpu,
400                             const QString &osName,
401                             const QVersionNumber &kernelVersion,
402                             const QString &osRelease,
403                             const QJsonDocument &doc,
404                             QSet<QString> *result,
405                             QString *errorMessage)
406 {
407     result->clear();
408     errorMessage->clear();
409     const QJsonValue entriesV = doc.object().value(QStringLiteral("entries"));
410     if (!entriesV.isArray()) {
411         *errorMessage = QLatin1String("No entries read.");
412         return false;
413     }
414 
415     const QJsonArray entriesA = entriesV.toArray();
416     for (JsonArrayConstIt eit = entriesA.constBegin(), ecend = entriesA.constEnd(); eit != ecend; ++eit) {
417         if (eit->isObject()) {
418             const QJsonObject object = eit->toObject();
419             if (matches(object, osName, kernelVersion, osRelease, gpu)) {
420                 const QJsonValue featuresListV = object.value(featuresKey());
421                 if (featuresListV.isArray()) {
422                     const QJsonArray featuresListA = featuresListV.toArray();
423                     for (JsonArrayConstIt fit = featuresListA.constBegin(), fcend = featuresListA.constEnd(); fit != fcend; ++fit)
424                         result->insert(fit->toString());
425                 }
426             }
427         }
428     }
429     return true;
430 }
431 
432 static bool readGpuFeatures(const QOpenGLConfig::Gpu &gpu,
433                             const QString &osName,
434                             const QVersionNumber &kernelVersion,
435                             const QString &osRelease,
436                             const QByteArray &jsonAsciiData,
437                             QSet<QString> *result, QString *errorMessage)
438 {
439     result->clear();
440     errorMessage->clear();
441     QJsonParseError error;
442     const QJsonDocument document = QJsonDocument::fromJson(jsonAsciiData, &error);
443     if (document.isNull()) {
444         const int lineNumber = 1 + jsonAsciiData.left(error.offset).count('\n');
445         QTextStream str(errorMessage);
446         str << "Failed to parse data: \"" << error.errorString()
447             << "\" at line " << lineNumber << " (offset: "
448             << error.offset << ").";
449         return false;
450     }
451     return readGpuFeatures(gpu, osName, kernelVersion, osRelease, document, result, errorMessage);
452 }
453 
454 static bool readGpuFeatures(const QOpenGLConfig::Gpu &gpu,
455                             const QString &osName,
456                             const QVersionNumber &kernelVersion,
457                             const QString &osRelease,
458                             const QString &fileName,
459                             QSet<QString> *result, QString *errorMessage)
460 {
461     result->clear();
462     errorMessage->clear();
463     QFile file(fileName);
464     if (!file.open(QIODevice::ReadOnly)) {
465         QTextStream str(errorMessage);
466         str << "Cannot open \"" << QDir::toNativeSeparators(fileName) << "\": "
467             << file.errorString();
468         return false;
469     }
470     const bool success = readGpuFeatures(gpu, osName, kernelVersion, osRelease, file.readAll(), result, errorMessage);
471     if (!success) {
472         errorMessage->prepend(QLatin1String("Error reading \"")
473                               + QDir::toNativeSeparators(fileName)
474                               + QLatin1String("\": "));
475     }
476     return success;
477 }
478 
479 QSet<QString> QOpenGLConfig::gpuFeatures(const QOpenGLConfig::Gpu &gpu,
480                                          const QString &osName,
481                                          const QVersionNumber &kernelVersion,
482                                          const QString &osRelease,
483                                          const QJsonDocument &doc)
484 {
485     QSet<QString> result;
486     QString errorMessage;
487     if (!readGpuFeatures(gpu, osName, kernelVersion, osRelease, doc, &result, &errorMessage))
488         qWarning().noquote() << errorMessage;
489     return result;
490 }
491 
492 QSet<QString> QOpenGLConfig::gpuFeatures(const QOpenGLConfig::Gpu &gpu,
493                                          const QString &osName,
494                                          const QVersionNumber &kernelVersion,
495                                          const QString &osRelease,
496                                          const QString &fileName)
497 {
498     QSet<QString> result;
499     QString errorMessage;
500     if (!readGpuFeatures(gpu, osName, kernelVersion, osRelease, fileName, &result, &errorMessage))
501         qWarning().noquote() << errorMessage;
502     return result;
503 }
504 
505 QSet<QString> QOpenGLConfig::gpuFeatures(const Gpu &gpu, const QJsonDocument &doc)
506 {
507     return gpuFeatures(gpu, OsTypeTerm::hostOs(), OsTypeTerm::hostKernelVersion(), OsTypeTerm::hostOsRelease(), doc);
508 }
509 
510 QSet<QString> QOpenGLConfig::gpuFeatures(const Gpu &gpu, const QString &fileName)
511 {
512     return gpuFeatures(gpu, OsTypeTerm::hostOs(), OsTypeTerm::hostKernelVersion(), OsTypeTerm::hostOsRelease(), fileName);
513 }
514 
515 QOpenGLConfig::Gpu QOpenGLConfig::Gpu::fromContext()
516 {
517     QOpenGLContext *ctx = QOpenGLContext::currentContext();
518     QScopedPointer<QOpenGLContext> tmpContext;
519     QScopedPointer<QOffscreenSurface> tmpSurface;
520     if (!ctx) {
521         tmpContext.reset(new QOpenGLContext);
522         if (!tmpContext->create()) {
523             qWarning("QOpenGLConfig::Gpu::fromContext: Failed to create temporary context");
524             return QOpenGLConfig::Gpu();
525         }
526         tmpSurface.reset(new QOffscreenSurface);
527         tmpSurface->setFormat(tmpContext->format());
528         tmpSurface->create();
529         tmpContext->makeCurrent(tmpSurface.data());
530     }
531 
532     QOpenGLConfig::Gpu gpu;
533     ctx = QOpenGLContext::currentContext();
534     const GLubyte *p = ctx->functions()->glGetString(GL_VENDOR);
535     if (p)
536         gpu.glVendor = QByteArray(reinterpret_cast<const char *>(p));
537 
538     return gpu;
539 }
540 
541 Q_GUI_EXPORT std::set<QByteArray> *qgpu_features(const QString &filename)
542 {
543     const QSet<QString> features = QOpenGLConfig::gpuFeatures(QOpenGLConfig::Gpu::fromContext(), filename);
544     std::set<QByteArray> *result = new std::set<QByteArray>;
545     foreach (const QString &feature, features)
546         result->insert(feature.toUtf8());
547     return result;
548 }
549 
550 QT_END_NAMESPACE
