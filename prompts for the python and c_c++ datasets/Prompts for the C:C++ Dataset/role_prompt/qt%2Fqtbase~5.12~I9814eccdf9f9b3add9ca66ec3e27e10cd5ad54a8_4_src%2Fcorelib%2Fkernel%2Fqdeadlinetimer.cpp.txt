I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 Intel Corporation.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qdeadlinetimer.h"
41 #include "qdeadlinetimer_p.h"
42 #include "qnumeric_p.h"
43 
44 QT_BEGIN_NAMESPACE
45 
46 Q_DECL_CONST_FUNCTION static inline QPair<qint64, qint64> toSecsAndNSecs(qint64 nsecs)
47 {
48     qint64 secs = nsecs / (1000*1000*1000);
49     if (nsecs < 0)
50         --secs;
51     nsecs -= secs * 1000*1000*1000;
52     return qMakePair(secs, nsecs);
53 }
54 
55 Q_DECL_CONST_FUNCTION static inline bool msecsFromSecsAndNSecs(qint64 secs, qint64 nsecs, qint64 & result)
56 {
57     // Saturate the result if we are overflowing
58     return !(mul_overflow<qint64>(secs, 1000, &result) || add_overflow<qint64>(result, nsecs / (1000 * 1000), &result));
59 }
60 
61 /*!
62     \class QDeadlineTimer
63     \inmodule QtCore
64     \brief The QDeadlineTimer class marks a deadline in the future.
65     \since 5.8
66 
67     \reentrant
68     \ingroup tools
69 
70     The QDeadlineTimer class is usually used to calculate future deadlines and
71     verify whether the deadline has expired. QDeadlineTimer can also be used
72     for deadlines without expiration ("forever"). It forms a counterpart to
73     QElapsedTimer, which calculates how much time has elapsed since
74     QElapsedTimer::start() was called.
75 
76     QDeadlineTimer provides a more convenient API compared to
77     QElapsedTimer::hasExpired().
78 
79     The typical use-case for the class is to create a QDeadlineTimer before the
80     operation in question is started, and then use remainingTime() or
81     hasExpired() to determine whether to continue trying the operation.
82     QDeadlineTimer objects can be passed to functions being called to execute
83     this operation so they know how long to still operate.
84 
85     \code
86     void executeOperation(int msecs)
87     {
88         QDeadlineTimer deadline(msecs);
89         do {
90             if (readFromDevice(deadline.remainingTime())
91                 break;
92             waitForReadyRead(deadline);
93         } while (!deadline.hasExpired());
94     }
95     \endcode
96 
97     Many QDeadlineTimer functions deal with time out values, which all are
98     measured in milliseconds. There are two special values, the same as many
99     other Qt functions named \c{waitFor} or similar:
100 
101     \list
102       \li 0: no time left, expired
103       \li -1: infinite time left, timer never expires
104     \endlist
105 
106     \section1 Reference Clocks
107 
108     QDeadlineTimer will use the same clock as QElapsedTimer (see
109     QElapsedTimer::clockType() and QElapsedTimer::isMonotonic()).
110 
111     \section1 Timer types
112 
113     Like QTimer, QDeadlineTimer can select among different levels of coarseness
114     on the timers. You can select precise timing by passing Qt::PreciseTimer to
115     the functions that set of change the timer, or you can select coarse timing
116     by passing Qt::CoarseTimer. Qt::VeryCoarseTimer is currently interpreted
117     the same way as Qt::CoarseTimer.
118 
119     This feature is dependent on support from the operating system: if the OS
120     does not support a coarse timer functionality, then QDeadlineTimer will
121     behave like Qt::PreciseTimer was passed.
122 
123     QDeadlineTimer defaults to Qt::CoarseTimer because on operating systems
124     that do support coarse timing, making timing calls to that clock source is
125     often much more efficient. The level of coarseness depends on the
126     operating system, but should be in the order of a couple of milliseconds.
127 
128     \section1 \c{std::chrono} Compatibility
129 
130     QDeadlineTimer is compatible with the \c{std::chrono} API from C++11 and
131     can be constructed from or compared to both \c{std::chrono::duration} and
132     \c{std::chrono::time_point} objects. In addition, it is fully compatible
133     with the time literals from C++14, which allow one to write code as:
134 
135     \code
136         using namespace std::chrono;
137         using namespace std::chrono_literals;
138 
139         QDeadlineTimer deadline(30s);
140         device->waitForReadyRead(deadline);
141         if (deadline.remainingTime<nanoseconds>() > 300ms)
142             cleanup();
143     \endcode
144 
145     As can be seen in the example above, QDeadlineTimer offers a templated
146     version of remainingTime() and deadline() that can be used to return
147     \c{std::chrono} objects.
148 
149     Note that comparing to \c{time_point} is not as efficient as comparing to
150     \c{duration}, since QDeadlineTimer may need to convert from its own
151     internal clock source to the clock source used by the \c{time_point} object.
152     Also note that, due to this conversion, the deadlines will not be precise,
153     so the following code is not expected to compare equally:
154 
155     \code
156         using namespace std::chrono;
157         using namespace std::chrono_literals;
158         auto now = steady_clock::now();
159         QDeadlineTimer deadline(now + 1s);
160         Q_ASSERT(deadline == now + 1s);
161     \endcode
162 
163     \sa QTime, QTimer, QDeadlineTimer, Qt::TimerType
164 */
165 
166 /*!
167     \enum QDeadlineTimer::ForeverConstant
168 
169     \value Forever      Used when creating a QDeadlineTimer to indicate the
170                         deadline should not expire
171 */
172 
173 /*!
174     \fn QDeadlineTimer::QDeadlineTimer(Qt::TimerType timerType)
175 
176     Constructs an expired QDeadlineTimer object. For this object,
177     remainingTime() will return 0.
178 
179     The timer type \a timerType may be ignored, since the timer is already
180     expired. Similarly, for optimization purposes, this function will not
181     attempt to obtain the current time and will use a value known to be in the
182     past. Therefore, deadline() may return an unexpected value and this object
183     cannot be used in calculation of how long it is overdue. If that
184     functionality is required, use QDeadlineTimer::current().
185 
186     \sa hasExpired(), remainingTime(), Qt::TimerType, current()
187 */
188 
189 /*!
190     \fn QDeadlineTimer::QDeadlineTimer(ForeverConstant, Qt::TimerType timerType)
191 
192     QDeadlineTimer objects created with ForeverConstant never expire.
193     For such objects, remainingTime() will return -1, deadline() will return the
194     maximum value, and isForever() will return true.
195 
196     The timer type \a timerType may be ignored, since the timer is already
197     expired.
198 
199     \sa ForeverConstant, hasExpired(), isForever(), remainingTime(), timerType()
200 */
201 
202 /*!
203     Constructs a QDeadlineTimer object with an expiry time of \a msecs msecs
204     from the moment of the creation of this object, if msecs is positive. If \a
205     msecs is zero, this QDeadlineTimer will be marked as expired, causing
206     remainingTime() to return zero and deadline() to return an indeterminate
207     time point in the past. If \a msecs is -1, the timer will be set it to
208     never expire, causing remainingTime() to return -1 and deadline() to return
209     the maximum value.
210 
211     The QDeadlineTimer object will be constructed with the specified timer \a type.
212 
213     For optimization purposes, if \a msecs is zero, this function may skip
214     obtaining the current time and may instead use a value known to be in the
215     past. If that happens, deadline() may return an unexpected value and this
216     object cannot be used in calculation of how long it is overdue. If that
217     functionality is required, use QDeadlineTimer::current() and add time to
218     it.
219 
220     \sa hasExpired(), isForever(), remainingTime(), setRemainingTime()
221 */
222 QDeadlineTimer::QDeadlineTimer(qint64 msecs, Qt::TimerType type) Q_DECL_NOTHROW
223     : t2(0)
224 {
225     setRemainingTime(msecs, type);
226 }
227 
228 /*!
229     \fn template <class Clock, class Duration> QDeadlineTimer::QDeadlineTimer(std::chrono::time_point<Clock, Duration> deadline, Qt::TimerType type)
230 
231     Constructs a QDeadlineTimer object with a deadline at \a deadline time
232     point, converting from the clock source \c{Clock} to Qt's internal clock
233     source (see QElapsedTimer::clcokType()).
234 
235     If \a deadline is in the past, this QDeadlineTimer object is set to
236     expired, whereas if \a deadline is equal to \c{Duration::max()}, then this
237     object is set to never expire.
238 
239     The QDeadlineTimer object will be constructed with the specified timer \a type.
240 
241     \sa hasExpired(), isForever(), remainingTime(), setDeadline()
242 */
243 
244 /*!
245     \fn template <class Rep, class Period> QDeadlineTimer::QDeadlineTimer(std::chrono::duration<Rep, Period> remaining, Qt::TimerType type)
246 
247     Constructs a QDeadlineTimer object with a remaining time of \a remaining.
248     If \a remaining is zero or negative, this QDeadlineTimer object will be
249     mark as expired, whereas if \a remaining is equal to \c{duration::max()},
250     the object will be set to never expire.
251 
252     The QDeadlineTimer object will be constructed with the specified timer \a type.
253 
254     This constructor can be used with C++14's user-defined literals for time, such as in:
255 
256     \code
257         using namespace std::chrono_literals;
258         QDeadlineTimer deadline(250ms);
259     \endcode
260 
261     For optimization purposes, if \a remaining is zero or negative, this
262     function may skip obtaining the current time and may instead use a value
263     known to be in the past. If that happens, deadline() may return an
264     unexpected value and this object cannot be used in calculation of how long
265     it is overdue. If that functionality is required, use
266     QDeadlineTimer::current() and add time to it.
267 
268     \sa hasExpired(), isForever(), remainingTime(), setRemainingTime()
269 */
270 
271 /*!
272     \fn template <class Clock, class Duration> void QDeadlineTimer::setDeadline(std::chrono::time_point<Clock, Duration> deadline, Qt::TimerType type)
273 
274     Sets this QDeadlineTimer to the deadline marked by \a deadline time
275     point, converting from the clock source \c{Clock} to Qt's internal clock
276     source (see QElapsedTimer::clcokType()).
277 
278     If \a deadline is in the past, this QDeadlineTimer object is set to
279     expired, whereas if \a deadline is equal to \c{Duration::max()}, then this
280     object is set to never expire.
281 
282     The timer type for this QDeadlineTimer object will be set to the specified \a type.
283 
284     \sa hasExpired(), isForever(), remainingTime(),
285 */
286 
287 /*!
288     Sets the remaining time for this QDeadlineTimer object to \a msecs
289     milliseconds from now, if \a msecs has a positive value. If \a msecs is
290     zero, this QDeadlineTimer object will be marked as expired, whereas a value
291     of -1 will set it to never expire.
292 
293     The timer type for this QDeadlineTimer object will be set to the specified \a timerType.
294 
295     \sa setPreciseRemainingTime(), hasExpired(), isForever(), remainingTime()
296 */
297 void QDeadlineTimer::setRemainingTime(qint64 msecs, Qt::TimerType timerType) Q_DECL_NOTHROW
298 {
299     if (msecs == -1)
300         *this = QDeadlineTimer(Forever, timerType);
301     else
302         setPreciseRemainingTime(msecs / 1000, (msecs % 1000) * 1000 * 1000, timerType);
303 }
304 
305 /*!
306     Sets the remaining time for this QDeadlineTimer object to \a secs seconds
307     plus \a nsecs nanoseconds from now, if \a secs has a positive value. If \a
308     secs is -1, this QDeadlineTimer will be set it to never expire. If both
309     parameters are zero, this QDeadlineTimer will be marked as expired.
310 
311     The timer type for this QDeadlineTimer object will be set to the specified
312     \a timerType.
313 
314     \sa setRemainingTime(), hasExpired(), isForever(), remainingTime()
315 */
316 void QDeadlineTimer::setPreciseRemainingTime(qint64 secs, qint64 nsecs, Qt::TimerType timerType) Q_DECL_NOTHROW
317 {
318     if (secs == -1) {
319         *this = QDeadlineTimer(Forever, timerType);
320         return;
321     }
322 
323     *this = current(timerType);
324     if (QDeadlineTimerNanosecondsInT2) {
325         if (add_overflow<qint64>(t1, secs, &t1) || add_overflow<qint64>(t1, toSecsAndNSecs(nsecs).first, &t1))  {
326             *this = QDeadlineTimer(Forever, timerType);
327             return;
328         }
329         t2 += toSecsAndNSecs(nsecs).second;
330         if (t2 > 1000*1000*1000) {
331             t2 -= 1000*1000*1000;
332             if (add_overflow<qint64>(t1, 1, &t1))  {
333                 *this = QDeadlineTimer(Forever, timerType);
334                 return;
335             }
336         }
337     } else {
338         t1 += secs * 1000 * 1000 * 1000 + nsecs;
339     }
340 }
341 
342 /*!
343     \overload
344     \fn template <class Rep, class Period> void QDeadlineTimer::setRemainingTime(std::chrono::duration<Rep, Period> remaining, Qt::TimerType type)
345 
346     Sets the remaining time for this QDeadlineTimer object to \a remaining. If
347     \a remaining is zero or negative, this QDeadlineTimer object will be mark
348     as expired, whereas if \a remaining is equal to \c{duration::max()}, the
349     object will be set to never expire.
350 
351     The timer type for this QDeadlineTimer object will be set to the specified \a type.
352 
353     This function can be used with C++14's user-defined literals for time, such as in:
354 
355     \code
356         using namespace std::chrono_literals;
357         deadline.setRemainingTime(250ms);
358     \endcode
359 
360     \note Qt detects the necessary C++14 compiler support by way of the feature
361     test recommendations from
362     \l{https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations}
363     {C++ Committee's Standing Document 6}.
364 
365     \sa setDeadline(), remainingTime(), hasExpired(), isForever()
366 */
367 
368 /*!
369     \fn bool QDeadlineTimer::isForever() const
370 
371     Returns true if this QDeadlineTimer object never expires, false otherwise.
372     For timers that never expire, remainingTime() always returns -1 and
373     deadline() returns the maximum value.
374 
375     \sa ForeverConstant, hasExpired(), remainingTime()
376 */
377 
378 /*!
379     Returns true if this QDeadlineTimer object has expired, false if there
380     remains time left. For objects that have expired, remainingTime() will
381     return zero and deadline() will return a time point in the past.
382 
383     QDeadlineTimer objects created with the \l {ForeverConstant} never expire
384     and this function always returns false for them.
385 
386     \sa isForever(), remainingTime()
387 */
388 bool QDeadlineTimer::hasExpired() const Q_DECL_NOTHROW
389 {
390     if (isForever())
391         return false;
392     return *this <= current(timerType());
393 }
394 
395 /*!
396     \fn Qt::TimerType QDeadlineTimer::timerType() const
397 
398     Returns the timer type is active for this object.
399 
400     \sa setTimerType()
401 */
402 
403 /*!
404     Changes the timer type for this object to \a timerType.
405 
406     The behavior for each possible value of \a timerType is operating-system
407     dependent. Qt::PreciseTimer will use the most precise timer that Qt can
408     find, with resolution of 1 millisecond or better, whereas QDeadlineTimer
409     will try to use a more coarse timer for Qt::CoarseTimer and
410     Qt::VeryCoarseTimer.
411 
412     \sa Qt::TimerType
413  */
414 void QDeadlineTimer::setTimerType(Qt::TimerType timerType)
415 {
416     type = timerType;
417 }
418 
419 /*!
420     Returns the remaining time in this QDeadlineTimer object in milliseconds.
421     If the timer has already expired, this function will return zero and it is
422     not possible to obtain the amount of time overdue with this function (to do
423     that, see deadline()). If the timer was set to never expire, this function
424     returns -1.
425 
426     This function is suitable for use in Qt APIs that take a millisecond
427     timeout, such as the many \l QIODevice \c waitFor functions or the timed
428     lock functions in \l QMutex, \l QWaitCondition, \l QSemaphore, or
429     \l QReadWriteLock. For example:
430 
431     \code
432         mutex.tryLock(deadline.remainingTime());
433     \endcode
434 
435     \sa remainingTimeNSecs(), isForever(), hasExpired()
436 */
437 qint64 QDeadlineTimer::remainingTime() const Q_DECL_NOTHROW
438 {
439     if (isForever())
440         return -1;
441 
442     if (QDeadlineTimerNanosecondsInT2)  {
443         QDeadlineTimer now = current(timerType());
444         qint64 secs = t1 - now.t1, nsecs = static_cast<qint64>(t2) - static_cast<qint64>(now.t2);
445         qint64 zzz = now.t2;
446         zzz += 0;
447         if (nsecs < 0)  {
448             --secs;
449             nsecs += 1000 * 1000 * 1000;
450         }
451         Q_ASSERT(nsecs >= 0);
452 
453         if (secs < 0)
454             return 0;
455 
456         qint64 result = 0;      // In principle we should never reach this
457         return msecsFromSecsAndNSecs(secs, nsecs, result) ? result : -1;
458     }
459 
460     qint64 ns = remainingTimeNSecs();
461     return ns <= 0 ? ns : (ns + 999999) / (1000 * 1000);
462 }
463 
464 /*!
465     Returns the remaining time in this QDeadlineTimer object in nanoseconds. If
466     the timer has already expired, this function will return zero and it is not
467     possible to obtain the amount of time overdue with this function. If the
468     timer was set to never expire, this function returns -1.
469 
470     \sa remainingTime(), isForever(), hasExpired()
471 */
472 qint64 QDeadlineTimer::remainingTimeNSecs() const Q_DECL_NOTHROW
473 {
474     if (isForever())
475         return -1;
476     qint64 raw = rawRemainingTimeNSecs();
477     return raw < 0 ? 0 : raw;
478 }
479 
480 /*!
481     \internal
482     Same as remainingTimeNSecs, but may return negative remaining times. Does
483     not deal with Forever.
484 */
485 qint64 QDeadlineTimer::rawRemainingTimeNSecs() const Q_DECL_NOTHROW
486 {
487     QDeadlineTimer now = current(timerType());
488     if (QDeadlineTimerNanosecondsInT2)
489         return (t1 - now.t1) * (1000*1000*1000) + t2 - now.t2;
490     return t1 - now.t1;
491 }
492 
493 /*!
494     Returns the absolute time point for the deadline stored in QDeadlineTimer
495     object, calculated in milliseconds relative to the reference clock, the
496     same as QElapsedTimer::msecsSinceReference(). The value will be in the past
497     if this QDeadlineTimer has expired.
498 
499     If this QDeadlineTimer never expires, this function returns
500     \c{std::numeric_limits<qint64>::max()}.
501 
502     This function can be used to calculate the amount of time a timer is
503     overdue, by subtracting QDeadlineTimer::current() or
504     QElapsedTimer::msecsSinceReference(), as in the following example:
505 
506     \code
507         qint64 realTimeLeft = deadline.deadline();
508         if (realTimeLeft != (std::numeric_limits<qint64>::max)()) {
509             realTimeLeft -= QDeadlineTimer::current().deadline();
510             // or:
511             //QElapsedTimer timer;
512             //timer.start();
513             //realTimeLeft -= timer.msecsSinceReference();
514         }
515     \endcode
516 
517     \note Timers that were created as expired have an indetermine time point in
518     the past as their deadline, so the above calculation may not work.
519 
520     \sa remainingTime(), deadlineNSecs(), setDeadline()
521 */
522 qint64 QDeadlineTimer::deadline() const Q_DECL_NOTHROW
523 {
524     if (isForever())
525         return t1;
526 
527     if (QDeadlineTimerNanosecondsInT2)  {
528         qint64 result = 0;
529         return msecsFromSecsAndNSecs(t1, t2, result) ? result : std::numeric_limits<qint64>::max();
530     }
531 
532     return deadlineNSecs() / (1000 * 1000);
533 }
534 
535 /*!
536     Returns the absolute time point for the deadline stored in QDeadlineTimer
537     object, calculated in nanoseconds relative to the reference clock, the
538     same as QElapsedTimer::msecsSinceReference(). The value will be in the past
539     if this QDeadlineTimer has expired.
540 
541     If this QDeadlineTimer never expires, this function returns
542     \c{std::numeric_limits<qint64>::max()}.
543 
544     This function can be used to calculate the amount of time a timer is
545     overdue, by subtracting QDeadlineTimer::current(), as in the following
546     example:
547 
548     \code
549         qint64 realTimeLeft = deadline.deadlineNSecs();
550         if (realTimeLeft != std::numeric_limits<qint64>::max())
551             realTimeLeft -= QDeadlineTimer::current().deadlineNSecs();
552     \endcode
553 
554     \note Timers that were created as expired have an indetermine time point in
555     the past as their deadline, so the above calculation may not work.
556 
557     \sa remainingTime(), deadlineNSecs()
558 */
559 qint64 QDeadlineTimer::deadlineNSecs() const Q_DECL_NOTHROW
560 {
561     if (isForever())
562         return t1;
563     if (QDeadlineTimerNanosecondsInT2)
564         return t1 * 1000 * 1000 * 1000 + t2;
565     return t1;
566 }
567 
568 /*!
569     Sets the deadline for this QDeadlineTimer object to be the \a msecs
570     absolute time point, counted in milliseconds since the reference clock (the
571     same as QElapsedTimer::msecsSinceReference()), and the timer type to \a
572     timerType. If the value is in the past, this QDeadlineTimer will be marked
573     as expired.
574 
575     If \a msecs is \c{std::numeric_limits<qint64>::max()}, this QDeadlineTimer
576     will be set to never expire.
577 
578     \sa setPreciseDeadline(), deadline(), deadlineNSecs(), setRemainingTime()
579 */
580 void QDeadlineTimer::setDeadline(qint64 msecs, Qt::TimerType timerType) Q_DECL_NOTHROW
581 {
582     if (msecs == (std::numeric_limits<qint64>::max)()) {
583         setPreciseDeadline(msecs, 0, timerType);    // msecs == MAX implies Forever
584     } else {
585         setPreciseDeadline(msecs / 1000, (msecs % 1000) * 1000 * 1000, timerType);
586     }
587 }
588 
589 /*!
590     Sets the deadline for this QDeadlineTimer object to be \a secs seconds and
591     \a nsecs nanoseconds since the reference clock epoch (the same as
592     QElapsedTimer::msecsSinceReference()), and the timer type to \a timerType.
593     If the value is in the past, this QDeadlineTimer will be marked as expired.
594 
595     If \a secs or \a nsecs is \c{std::numeric_limits<qint64>::max()}, this
596     QDeadlineTimer will be set to never expire. If \a nsecs is more than 1
597     billion nanoseconds (1 second), then \a secs will be adjusted accordingly.
598 
599     \sa setDeadline(), deadline(), deadlineNSecs(), setRemainingTime()
600 */
601 void QDeadlineTimer::setPreciseDeadline(qint64 secs, qint64 nsecs, Qt::TimerType timerType) Q_DECL_NOTHROW
602 {
603     type = timerType;
604     if (secs == (std::numeric_limits<qint64>::max)() || nsecs == (std::numeric_limits<qint64>::max)()) {
605         *this = QDeadlineTimer(Forever, timerType);
606     } else if (QDeadlineTimerNanosecondsInT2) {
607         if (add_overflow<qint64>(secs, toSecsAndNSecs(nsecs).first, &t1))  {
608             *this = QDeadlineTimer(Forever, timerType);
609             return;
610         }
611         t2 = toSecsAndNSecs(nsecs).second;
612     } else {
613         t1 = secs * (1000*1000*1000) + nsecs;
614     }
615 }
616 
617 /*!
618     Returns a QDeadlineTimer object whose deadline is extended from \a dt's
619     deadline by \a nsecs nanoseconds. If \a dt was set to never expire, this
620     function returns a QDeadlineTimer that will not expire either.
621 
622     \note if \a dt was created as expired, its deadline is indeterminate and
623     adding an amount of time may or may not cause it to become unexpired.
624 */
625 QDeadlineTimer QDeadlineTimer::addNSecs(QDeadlineTimer dt, qint64 nsecs) Q_DECL_NOTHROW
626 {
627     if (dt.isForever() || nsecs == (std::numeric_limits<qint64>::max)()) {
628         dt = QDeadlineTimer(Forever, dt.timerType());
629     } else if (QDeadlineTimerNanosecondsInT2) {
630         dt.t1 += toSecsAndNSecs(nsecs).first;
631         dt.t2 += toSecsAndNSecs(nsecs).second;
632         if (dt.t2 > 1000*1000*1000) {
633             dt.t2 -= 1000*1000*1000;
634             ++dt.t1;
635         }
636     } else {
637         dt.t1 += nsecs;
638     }
639     return dt;
640 }
641 
642 /*!
643     \fn QDeadlineTimer QDeadlineTimer::current(Qt::TimerType timerType)
644 
645     Returns a QDeadlineTimer that is expired but is guaranteed to contain the
646     current time. Objects created by this function can participate in the
647     calculation of how long a timer is overdue, using the deadline() function.
648 
649     The QDeadlineTimer object will be constructed with the specified \a timerType.
650 */
651 
652 /*!
653     \fn bool operator==(QDeadlineTimer d1, QDeadlineTimer d2)
654     \relates QDeadlineTimer
655 
656     Returns true if the deadline on \a d1 and the deadline in \a d2 are the
657     same, false otherwise. The timer type used to create the two deadlines is
658     ignored. This function is equivalent to:
659 
660     \code
661         return d1.deadlineNSecs() == d2.deadlineNSecs();
662     \endcode
663 
664     \note comparing QDeadlineTimer objects with different timer types is
665     not supported and may result in unpredictable behavior.
666 */
667 
668 /*!
669     \fn bool operator!=(QDeadlineTimer d1, QDeadlineTimer d2)
670     \relates QDeadlineTimer
671 
672     Returns true if the deadline on \a d1 and the deadline in \a d2 are
673     diferent, false otherwise. The timer type used to create the two deadlines
674     is ignored. This function is equivalent to:
675 
676     \code
677         return d1.deadlineNSecs() != d2.deadlineNSecs();
678     \endcode
679 
680     \note comparing QDeadlineTimer objects with different timer types is
681     not supported and may result in unpredictable behavior.
682 */
683 
684 /*!
685     \fn bool operator<(QDeadlineTimer d1, QDeadlineTimer d2)
686     \relates QDeadlineTimer
687 
688     Returns true if the deadline on \a d1 is earlier than the deadline in \a
689     d2, false otherwise. The timer type used to create the two deadlines is
690     ignored. This function is equivalent to:
691 
692     \code
693         return d1.deadlineNSecs() < d2.deadlineNSecs();
694     \endcode
695 
696     \note comparing QDeadlineTimer objects with different timer types is
697     not supported and may result in unpredictable behavior.
698 */
699 
700 /*!
701     \fn bool operator<=(QDeadlineTimer d1, QDeadlineTimer d2)
702     \relates QDeadlineTimer
703 
704     Returns true if the deadline on \a d1 is earlier than or the same as the
705     deadline in \a d2, false otherwise. The timer type used to create the two
706     deadlines is ignored. This function is equivalent to:
707 
708     \code
709         return d1.deadlineNSecs() <= d2.deadlineNSecs();
710     \endcode
711 
712     \note comparing QDeadlineTimer objects with different timer types is
713     not supported and may result in unpredictable behavior.
714 */
715 
716 /*!
717     \fn bool operator>(QDeadlineTimer d1, QDeadlineTimer d2)
718     \relates QDeadlineTimer
719 
720     Returns true if the deadline on \a d1 is later than the deadline in \a
721     d2, false otherwise. The timer type used to create the two deadlines is
722     ignored. This function is equivalent to:
723 
724     \code
725         return d1.deadlineNSecs() > d2.deadlineNSecs();
726     \endcode
727 
728     \note comparing QDeadlineTimer objects with different timer types is
729     not supported and may result in unpredictable behavior.
730 */
731 
732 /*!
733     \fn bool operator>=(QDeadlineTimer d1, QDeadlineTimer d2)
734     \relates QDeadlineTimer
735 
736     Returns true if the deadline on \a d1 is later than or the same as the
737     deadline in \a d2, false otherwise. The timer type used to create the two
738     deadlines is ignored. This function is equivalent to:
739 
740     \code
741         return d1.deadlineNSecs() >= d2.deadlineNSecs();
742     \endcode
743 
744     \note comparing QDeadlineTimer objects with different timer types is
745     not supported and may result in unpredictable behavior.
746 */
747 
748 /*!
749     \fn QDeadlineTimer operator+(QDeadlineTimer dt, qint64 msecs)
750     \relates QDeadlineTimer
751 
752     Returns a QDeadlineTimer object whose deadline is \a msecs later than the
753     deadline stored in \a dt. If \a dt is set to never expire, this function
754     returns a QDeadlineTimer that does not expire either.
755 
756     To add times of precision greater than 1 millisecond, use addNSecs().
757 */
758 
759 /*!
760     \fn QDeadlineTimer operator+(qint64 msecs, QDeadlineTimer dt)
761     \relates QDeadlineTimer
762 
763     Returns a QDeadlineTimer object whose deadline is \a msecs later than the
764     deadline stored in \a dt. If \a dt is set to never expire, this function
765     returns a QDeadlineTimer that does not expire either.
766 
767     To add times of precision greater than 1 millisecond, use addNSecs().
768 */
769 
770 /*!
771     \fn QDeadlineTimer operator-(QDeadlineTimer dt, qint64 msecs)
772     \relates QDeadlineTimer
773 
774     Returns a QDeadlineTimer object whose deadline is \a msecs before the
775     deadline stored in \a dt. If \a dt is set to never expire, this function
776     returns a QDeadlineTimer that does not expire either.
777 
778     To subtract times of precision greater than 1 millisecond, use addNSecs().
779 */
780 
781 /*!
782     \fn QDeadlineTimer &QDeadlineTimer::operator+=(qint64 msecs)
783 
784     Extends this QDeadlineTimer object by \a msecs milliseconds and returns
785     itself. If this object is set to never expire, this function does nothing.
786 
787     To add times of precision greater than 1 millisecond, use addNSecs().
788 */
789 
790 /*!
791     \fn QDeadlineTimer &QDeadlineTimer::operator-=(qint64 msecs)
792 
793     Shortens this QDeadlineTimer object by \a msecs milliseconds and returns
794     itself. If this object is set to never expire, this function does nothing.
795 
796     To subtract times of precision greater than 1 millisecond, use addNSecs().
797 */
798 
799 /*!
800   \fn void QDeadlineTimer::swap(QDeadlineTimer &other)
801 
802   Swaps this deadline timer with the \a other deadline timer.
803  */
804 
805 /*!
806   \fn template <class Clock, class Duration> QDeadlineTimer & QDeadlineTimer::operator=(std::chrono::time_point<Clock, Duration> deadline_)
807 
808   Assigns \a deadline_ to this deadline timer.
809  */
810 
811 /*!
812   \fn template <class Rep, class Period> QDeadlineTimer & QDeadlineTimer::operator=(std::chrono::duration<Rep, Period> remaining)
813 
814   Sets this deadline timer to the \a remaining time.
815  */
816 
817 /*!
818   \fn std::chrono::nanoseconds QDeadlineTimer::remainingTimeAsDuration() const
819 
820   Returns the time remaining before the deadline.
821  */
822 
823 // the rest of the functions are in qelapsedtimer_xxx.cpp
824 
825 QT_END_NAMESPACE
