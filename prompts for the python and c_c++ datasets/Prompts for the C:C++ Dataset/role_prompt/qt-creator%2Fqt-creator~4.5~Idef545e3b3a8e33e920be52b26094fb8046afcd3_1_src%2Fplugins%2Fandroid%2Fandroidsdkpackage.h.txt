I want you to act as a code reviewer of Qt Creator in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2017 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 #include "utils/fileutils.h"
26 
27 #include <QList>
28 #include <QObject>
29 #include <QPointer>
30 #include <QVersionNumber>
31 
32 #pragma once
33 
34 namespace Android {
35 
36 namespace Internal {
37     class SdkManagerOutputParser;
38     class AndroidToolOutputParser;
39 }
40 class SdkPlatform;
41 class SystemImage;
42 
43 class AndroidSdkPackage : public QObject
44 {
45     Q_OBJECT
46 public:
47     enum PackageType {
48         UnknownPackage          = 1 << 0,
49         SdkToolsPackage         = 1 << 1,
50         BuildToolsPackage       = 1 << 2,
51         PlatformToolsPackage    = 1 << 3,
52         SdkPlatformPackage      = 1 << 4,
53         SystemImagePackage      = 1 << 5,
54         AnyValidType = SdkToolsPackage | BuildToolsPackage | PlatformToolsPackage |
55         SdkPlatformPackage | SystemImagePackage
56     };
57 
58     enum PackageState {
59         Unknown     = 1 << 0,
60         Installed   = 1 << 1,
61         Available   = 1 << 2,
62         AnyValidState = Installed | Available
63     };
64 
65 public:
66     AndroidSdkPackage(QVersionNumber revision, QString sdkStylePathStr, QObject *parent = nullptr);
67     virtual ~AndroidSdkPackage() { }
68 
69 public:
70     virtual bool isValid() const = 0;
71     virtual PackageType type() const = 0;
72     virtual bool operator <(const AndroidSdkPackage &other) const;
73 
74     QString displayText() const;
75     QString descriptionText() const;
76     const QVersionNumber &revision() const;
77     PackageState state() const;
78     const QString &sdkStylePath() const;
79     const Utils::FileName &installedLocation() const;
80 
81 protected:
82     void setDisplayText(const QString &str);
83     void setDescriptionText(const QString &str);
84     void setState(PackageState state);
85     void setInstalledLocation(const Utils::FileName &path);
86 
87     virtual void updatePackageDetails();
88 
89 private:
90     QString m_displayText;
91     QString m_descriptionText;
92     QVersionNumber m_revision;
93     PackageState m_state = PackageState::Unknown;
94     QString m_sdkStylePath;
95     Utils::FileName m_installedLocation;
96 
97     friend class Internal::SdkManagerOutputParser;
98     friend class Internal::AndroidToolOutputParser;
99 };
100 using AndroidSdkPackageList = QList<AndroidSdkPackage*>;
101 
102 class SystemImage : public AndroidSdkPackage
103 {
104     Q_OBJECT
105 public:
106     SystemImage(QVersionNumber revision, QString sdkStylePathStr, QString abi,
107                 SdkPlatform *platform = nullptr);
108 
109 // AndroidSdkPackage Overrides
110 public:
111     bool isValid() const override;
112     PackageType type() const override;
113 
114 public:
115     const QString &abiName() const;
116     const SdkPlatform *platform() const;
117     void setPlatform(SdkPlatform *platform);
118 
119 private:
120     QPointer<SdkPlatform> m_platform;
121     QString m_abiName;
122 };
123 using SystemImageList = QList<SystemImage*>;
124 
125 
126 class SdkPlatform : public AndroidSdkPackage
127 {
128     Q_OBJECT
129 public:
130     SdkPlatform(QVersionNumber revision, QString sdkStylePathStr, int api,
131                 QObject *parent = nullptr);
132 
133 // AndroidSdkPackage Overrides
134 public:
135     bool isValid() const override;
136     PackageType type() const override;
137     bool operator <(const AndroidSdkPackage &other) const override;
138 
139 public:
140     int apiLevel() const;
141     QVersionNumber version() const;
142     void addSystemImage(SystemImage *image);
143     const SystemImageList &systemImages() const;
144 
145 private:
146     SystemImageList m_systemImages;
147     int m_apiLevel = -1;
148     QVersionNumber m_version;
149 };
150 using SdkPlatformList = QList<SdkPlatform*>;
151 } // namespace Android
152 
153 
