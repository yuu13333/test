I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Copyright (C) 2016 Intel Corporation.
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the test suite of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:GPL-EXCEPT$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
22 ** included in the packaging of this file. Please review the following
23 ** information to ensure the GNU General Public License requirements will
24 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
25 **
26 ** $QT_END_LICENSE$
27 **
28 ****************************************************************************/
29 
30 
31 #include <QtTest/QtTest>
32 #include <QtGlobal>
33 #include "private/qnumeric_p.h"
34 
35 #include <math.h>
36 #include <float.h>
37 
38 class tst_QNumeric: public QObject
39 {
40     Q_OBJECT
41 
42 private slots:
43     void fuzzyCompare_data();
44     void fuzzyCompare();
45     void qNan();
46     void floatDistance_data();
47     void floatDistance();
48     void floatDistance_double_data();
49     void floatDistance_double();
50     void addOverflow_data();
51     void addOverflow();
52     void mulOverflow_data();
53     void mulOverflow();
54     void signedOverflow();
55 };
56 
57 void tst_QNumeric::fuzzyCompare_data()
58 {
59     QTest::addColumn<double>("val1");
60     QTest::addColumn<double>("val2");
61     QTest::addColumn<bool>("isEqual");
62 
63     QTest::newRow("zero") << 0.0 << 0.0 << true;
64     QTest::newRow("ten") << 10.0 << 10.0 << true;
65     QTest::newRow("large") << 1000000000.0 << 1000000000.0 << true;
66     QTest::newRow("small") << 0.00000000001 << 0.00000000001 << true;
67     QTest::newRow("eps") << 10.000000000000001 << 10.00000000000002 << true;
68     QTest::newRow("eps2") << 10.000000000000001 << 10.000000000000009 << true;
69 
70     QTest::newRow("mis1") << 0.0 << 1.0 << false;
71     QTest::newRow("mis2") << 0.0 << 10000000.0 << false;
72     QTest::newRow("mis3") << 0.0 << 0.000000001 << false;
73     QTest::newRow("mis4") << 100000000.0 << 0.000000001 << false;
74     QTest::newRow("mis5") << 0.0000000001 << 0.000000001 << false;
75 }
76 
77 void tst_QNumeric::fuzzyCompare()
78 {
79     QFETCH(double, val1);
80     QFETCH(double, val2);
81     QFETCH(bool, isEqual);
82 
83     QCOMPARE(::qFuzzyCompare(val1, val2), isEqual);
84     QCOMPARE(::qFuzzyCompare(val2, val1), isEqual);
85     QCOMPARE(::qFuzzyCompare(-val1, -val2), isEqual);
86     QCOMPARE(::qFuzzyCompare(-val2, -val1), isEqual);
87 }
88 
89 #if defined __FAST_MATH__ && (__GNUC__ * 100 + __GNUC_MINOR__ >= 404)
90    // turn -ffast-math off
91 #  pragma GCC optimize "no-fast-math"
92 #endif
93 
94 void tst_QNumeric::qNan()
95 {
96 #if defined __FAST_MATH__ && (__GNUC__ * 100 + __GNUC_MINOR__ < 404)
97     QSKIP("Non-conformant fast math mode is enabled, cannot run test");
98 #endif
99     double nan = qQNaN();
100     QVERIFY(!(0 > nan));
101     QVERIFY(!(0 < nan));
102     QVERIFY(qIsNaN(nan));
103     QVERIFY(qIsNaN(nan + 1));
104     QVERIFY(qIsNaN(-nan));
105 
106     Q_STATIC_ASSERT(sizeof(double) == 8);
107 #ifdef Q_LITTLE_ENDIAN
108     const uchar bytes[] = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f };
109 #else
110     const uchar bytes[] = { 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 };
111 #endif
112     memcpy(&nan, bytes, 8);
113     QVERIFY(!qIsFinite(nan));
114     QVERIFY(!qIsInf(nan));
115     QVERIFY(qIsNaN(nan));
116 
117     double inf = qInf();
118     QVERIFY(inf > 0);
119     QVERIFY(-inf < 0);
120     QVERIFY(qIsInf(inf));
121     QVERIFY(qIsInf(-inf));
122     QVERIFY(qIsInf(2*inf));
123     QCOMPARE(1/inf, 0.0);
124     QVERIFY(qIsNaN(0*nan));
125     QVERIFY(qIsNaN(0*inf));
126     QVERIFY(qFuzzyCompare(1/inf, 0.0));
127 }
128 
129 void tst_QNumeric::floatDistance_data()
130 {
131     QTest::addColumn<float>("val1");
132     QTest::addColumn<float>("val2");
133     QTest::addColumn<quint32>("expectedDistance");
134 
135     // exponent: 8 bits
136     // mantissa: 23 bits
137     const quint32 number_of_denormals = (1 << 23) - 1;  // Set to 0 if denormals are not included
138 
139     quint32 _0_to_1 = quint32((1 << 23) * 126 + 1 + number_of_denormals); // We need +1 to include the 0
140     quint32 _1_to_2 = quint32(1 << 23);
141 
142     // We don't need +1 because FLT_MAX has all bits set in the mantissa. (Thus mantissa
143     // have not wrapped back to 0, which would be the case for 1 in _0_to_1
144     quint32 _0_to_FLT_MAX = quint32((1 << 23) * 254) + number_of_denormals;
145 
146     quint32 _0_to_FLT_MIN = 1 + number_of_denormals;
147     QTest::newRow("[0,FLT_MIN]") << 0.F << FLT_MIN << _0_to_FLT_MIN;
148     QTest::newRow("[0,FLT_MAX]") << 0.F << FLT_MAX << _0_to_FLT_MAX;
149     QTest::newRow("[1,1.5]") << 1.0F << 1.5F << quint32(1 << 22);
150     QTest::newRow("[0,1]") << 0.F << 1.0F << _0_to_1;
151     QTest::newRow("[0.5,1]") << 0.5F << 1.0F << quint32(1 << 23);
152     QTest::newRow("[1,2]") << 1.F << 2.0F << _1_to_2;
153     QTest::newRow("[-1,+1]") << -1.F << +1.0F << 2 * _0_to_1;
154     QTest::newRow("[-1,0]") << -1.F << 0.0F << _0_to_1;
155     QTest::newRow("[-1,FLT_MAX]") << -1.F << FLT_MAX << _0_to_1 + _0_to_FLT_MAX;
156     QTest::newRow("[-2,-1") << -2.F << -1.F << _1_to_2;
157     QTest::newRow("[-1,-2") << -1.F << -2.F << _1_to_2;
158     QTest::newRow("[FLT_MIN,FLT_MAX]") << FLT_MIN << FLT_MAX << _0_to_FLT_MAX - _0_to_FLT_MIN;
159     QTest::newRow("[-FLT_MAX,FLT_MAX]") << -FLT_MAX << FLT_MAX << (2*_0_to_FLT_MAX);
160     float denormal = FLT_MIN;
161     denormal/=2.0F;
162     QTest::newRow("denormal") << 0.F << denormal << _0_to_FLT_MIN/2;
163 }
164 
165 void tst_QNumeric::floatDistance()
166 {
167     QFETCH(float, val1);
168     QFETCH(float, val2);
169     QFETCH(quint32, expectedDistance);
170 #ifdef Q_OS_QNX
171     QEXPECT_FAIL("denormal", "See QTBUG-37094", Continue);
172 #endif
173     QCOMPARE(qFloatDistance(val1, val2), expectedDistance);
174 }
175 
176 void tst_QNumeric::floatDistance_double_data()
177 {
178     QTest::addColumn<double>("val1");
179     QTest::addColumn<double>("val2");
180     QTest::addColumn<quint64>("expectedDistance");
181 
182     // exponent: 11 bits
183     // mantissa: 52 bits
184     const quint64 number_of_denormals = (Q_UINT64_C(1) << 52) - 1;  // Set to 0 if denormals are not included
185 
186     quint64 _0_to_1 = (Q_UINT64_C(1) << 52) * ((1 << (11-1)) - 2) + 1 + number_of_denormals; // We need +1 to include the 0
187     quint64 _1_to_2 = Q_UINT64_C(1) << 52;
188 
189     // We don't need +1 because DBL_MAX has all bits set in the mantissa. (Thus mantissa
190     // have not wrapped back to 0, which would be the case for 1 in _0_to_1
191     quint64 _0_to_DBL_MAX = quint64((Q_UINT64_C(1) << 52) * ((1 << 11) - 2)) + number_of_denormals;
192 
193     quint64 _0_to_DBL_MIN = 1 + number_of_denormals;
194     QTest::newRow("[0,DBL_MIN]") << 0.0 << DBL_MIN << _0_to_DBL_MIN;
195     QTest::newRow("[0,DBL_MAX]") << 0.0 << DBL_MAX << _0_to_DBL_MAX;
196     QTest::newRow("[1,1.5]") << 1.0 << 1.5 << (Q_UINT64_C(1) << 51);
197     QTest::newRow("[0,1]") << 0.0 << 1.0 << _0_to_1;
198     QTest::newRow("[0.5,1]") << 0.5 << 1.0 << (Q_UINT64_C(1) << 52);
199     QTest::newRow("[1,2]") << 1.0 << 2.0 << _1_to_2;
200     QTest::newRow("[-1,+1]") << -1.0 << +1.0 << 2 * _0_to_1;
201     QTest::newRow("[-1,0]") << -1.0 << 0.0 << _0_to_1;
202     QTest::newRow("[-1,DBL_MAX]") << -1.0 << DBL_MAX << _0_to_1 + _0_to_DBL_MAX;
203     QTest::newRow("[-2,-1") << -2.0 << -1.0 << _1_to_2;
204     QTest::newRow("[-1,-2") << -1.0 << -2.0 << _1_to_2;
205     QTest::newRow("[DBL_MIN,DBL_MAX]") << DBL_MIN << DBL_MAX << _0_to_DBL_MAX - _0_to_DBL_MIN;
206     QTest::newRow("[-DBL_MAX,DBL_MAX]") << -DBL_MAX << DBL_MAX << (2*_0_to_DBL_MAX);
207     double denormal = DBL_MIN;
208     denormal/=2.0;
209     QTest::newRow("denormal") << 0.0 << denormal << _0_to_DBL_MIN/2;
210 }
211 
212 void tst_QNumeric::floatDistance_double()
213 {
214     QFETCH(double, val1);
215     QFETCH(double, val2);
216     QFETCH(quint64, expectedDistance);
217 #ifdef Q_OS_QNX
218     QEXPECT_FAIL("denormal", "See QTBUG-37094", Continue);
219 #endif
220     QCOMPARE(qFloatDistance(val1, val2), expectedDistance);
221 }
222 
223 void tst_QNumeric::addOverflow_data()
224 {
225     QTest::addColumn<int>("size");
226 
227     // for unsigned, all sizes are supported
228     QTest::newRow("quint8") << 8;
229     QTest::newRow("quint16") << 16;
230     QTest::newRow("quint32") << 32;
231     QTest::newRow("quint64") << 64;
232     QTest::newRow("ulong") << 48;   // it's either 32- or 64-bit, so on average it's 48 :-)
233 
234     // for signed, we can't guarantee 64-bit
235     QTest::newRow("qint8") << -8;
236     QTest::newRow("qint16") << -16;
237     QTest::newRow("qint32") << -32;
238     if (sizeof(void *) == sizeof(qint64))
239         QTest::newRow("qint64") << -64;
240 }
241 
242 // Note: in release mode, all the tests may be statically determined and only the calls
243 // to QTest::toString and QTest::qCompare will remain.
244 template <typename Int> static void addOverflow_template()
245 {
246 #if defined(Q_CC_MSVC) && Q_CC_MSVC < 2000
247     QSKIP("Test disabled, this test generates an Internal Compiler Error compiling in release mode");
248 #else
249     const Int max = std::numeric_limits<Int>::max();
250     const Int min = std::numeric_limits<Int>::min();
251     Int r;
252 
253     // basic values
254     QCOMPARE(add_overflow(Int(0), Int(0), &r), false);
255     QCOMPARE(r, Int(0));
256     QCOMPARE(add_overflow(Int(1), Int(0), &r), false);
257     QCOMPARE(r, Int(1));
258     QCOMPARE(add_overflow(Int(0), Int(1), &r), false);
259     QCOMPARE(r, Int(1));
260 
261     QCOMPARE(sub_overflow(Int(0), Int(0), &r), false);
262     QCOMPARE(r, Int(0));
263     QCOMPARE(sub_overflow(Int(1), Int(0), &r), false);
264     QCOMPARE(r, Int(1));
265     QCOMPARE(sub_overflow(Int(1), Int(1), &r), false);
266     QCOMPARE(r, Int(0));
267     QCOMPARE(sub_overflow(Int(0), Int(1), &r), !min);
268     if (min)
269         QCOMPARE(r, Int(-1));
270 
271     // half-way through max
272     QCOMPARE(add_overflow(Int(max/2), Int(max/2), &r), false);
273     QCOMPARE(r, Int(max / 2 * 2));
274     QCOMPARE(sub_overflow(Int(max/2), Int(max/2), &r), false);
275     QCOMPARE(r, Int(0));
276     QCOMPARE(add_overflow(Int(max/2 - 1), Int(max/2 + 1), &r), false);
277     QCOMPARE(r, Int(max / 2 * 2));
278     QCOMPARE(sub_overflow(Int(max/2 - 1), Int(max/2 + 1), &r), !min);
279     if (min)
280         QCOMPARE(r, Int(-2));
281     QCOMPARE(add_overflow(Int(max/2 + 1), Int(max/2), &r), false);
282     QCOMPARE(r, max);
283     QCOMPARE(sub_overflow(Int(max/2 + 1), Int(max/2), &r), false);
284     QCOMPARE(r, Int(1));
285     QCOMPARE(add_overflow(Int(max/2), Int(max/2 + 1), &r), false);
286     QCOMPARE(r, max);
287     QCOMPARE(sub_overflow(Int(max/2), Int(max/2 + 1), &r), !min);
288     if (min)
289         QCOMPARE(r, Int(-1));
290 
291     QCOMPARE(add_overflow(Int(min/2), Int(min/2), &r), false);
292     QCOMPARE(r, Int(min / 2 * 2));
293     QCOMPARE(sub_overflow(Int(min/2), Int(min/2), &r), false);
294     QCOMPARE(r, Int(0));
295     QCOMPARE(add_overflow(Int(min/2 - 1), Int(min/2 + 1), &r), !min);
296     if (min)
297         QCOMPARE(r, Int(min / 2 * 2));
298     QCOMPARE(sub_overflow(Int(min/2 - 1), Int(min/2 + 1), &r), false);
299     QCOMPARE(r, Int(-2));
300     QCOMPARE(sub_overflow(Int(min/2 + 1), Int(min/2), &r), false);
301     QCOMPARE(r, Int(1));
302     QCOMPARE(sub_overflow(Int(min/2), Int(min/2 + 1), &r), !min);
303     if (min)
304         QCOMPARE(r, Int(-1));
305 
306     // more than half
307     QCOMPARE(add_overflow(Int(max/4 * 3), Int(max/4), &r), false);
308     QCOMPARE(r, Int(max / 4 * 4));
309 
310     // max
311     QCOMPARE(add_overflow(max, Int(0), &r), false);
312     QCOMPARE(r, max);
313     QCOMPARE(sub_overflow(max, Int(0), &r), false);
314     QCOMPARE(r, max);
315     QCOMPARE(add_overflow(Int(0), max, &r), false);
316     QCOMPARE(r, max);
317     QCOMPARE(sub_overflow(Int(0), max, &r), !min);
318     if (min)
319         QCOMPARE(r, Int(-max));
320 
321     QCOMPARE(add_overflow(min, Int(0), &r), false);
322     QCOMPARE(r, min);
323     QCOMPARE(sub_overflow(min, Int(0), &r), false);
324     QCOMPARE(r, min);
325     QCOMPARE(add_overflow(Int(0), min, &r), false);
326     QCOMPARE(r, min);
327     QCOMPARE(sub_overflow(Int(0), Int(min+1), &r), !min);
328     if (min)
329         QCOMPARE(r, Int(-(min+1)));
330 
331     // 64-bit issues
332     if (max > std::numeric_limits<uint>::max()) {
333         QCOMPARE(add_overflow(Int(std::numeric_limits<uint>::max()), Int(std::numeric_limits<uint>::max()), &r), false);
334         QCOMPARE(r, Int(2 * Int(std::numeric_limits<uint>::max())));
335         QCOMPARE(sub_overflow(Int(std::numeric_limits<uint>::max()), Int(std::numeric_limits<uint>::max()), &r), false);
336         QCOMPARE(r, Int(0));
337     }
338     if (min && min < -Int(std::numeric_limits<uint>::max())) {
339         QCOMPARE(add_overflow(Int(-Int(std::numeric_limits<uint>::max())), Int(-Int(std::numeric_limits<uint>::max())), &r), false);
340         QCOMPARE(r, Int(-2 * Int(std::numeric_limits<uint>::max())));
341         QCOMPARE(sub_overflow(Int(-Int(std::numeric_limits<uint>::max())), Int(-Int(std::numeric_limits<uint>::max())), &r), false);
342         QCOMPARE(r, Int(0));
343     }
344 
345     // overflows past max
346     QCOMPARE(add_overflow(max, Int(1), &r), true);
347     QCOMPARE(add_overflow(Int(1), max, &r), true);
348     QCOMPARE(add_overflow(Int(max/2 + 1), Int(max/2 + 1), &r), true);
349     if (!min) {
350         QCOMPARE(sub_overflow(Int(-max), Int(-2), &r), true);
351         QCOMPARE(sub_overflow(Int(max/2 - 1), Int(max/2 + 1), &r), true);
352     }
353 
354     // overflows past min (in case of min == 0, repeats some tests above)
355     if (min) {
356         QCOMPARE(sub_overflow(min, Int(1), &r), true);
357         QCOMPARE(sub_overflow(Int(1), min, &r), true);
358         QCOMPARE(sub_overflow(Int(min/2 - 1), Int(-Int(min/2)), &r), true);
359         QCOMPARE(add_overflow(min, Int(-1), &r), true);
360         QCOMPARE(add_overflow(Int(-1), min, &r), true);
361     }
362 #endif
363 }
364 
365 void tst_QNumeric::addOverflow()
366 {
367     QFETCH(int, size);
368     if (size == 8)
369         addOverflow_template<quint8>();
370     if (size == 16)
371         addOverflow_template<quint16>();
372     if (size == 32)
373         addOverflow_template<quint32>();
374     if (size == 48)
375         addOverflow_template<ulong>();  // not really 48-bit
376     if (size == 64)
377         addOverflow_template<quint64>();
378 
379     if (size == -8)
380         addOverflow_template<qint8>();
381     if (size == -16)
382         addOverflow_template<qint16>();
383     if (size == -32)
384         addOverflow_template<qint32>();
385     if (size == -64)
386         addOverflow_template<qint64>();
387 }
388 
389 void tst_QNumeric::mulOverflow_data()
390 {
391     addOverflow_data();
392 }
393 
394 // Note: in release mode, all the tests may be statically determined and only the calls
395 // to QTest::toString and QTest::qCompare will remain.
396 template <typename Int> static void mulOverflow_template()
397 {
398 #if defined(Q_CC_MSVC) && Q_CC_MSVC < 1900
399     QSKIP("Test disabled, this test generates an Internal Compiler Error compiling");
400 #else
401     const Int max = std::numeric_limits<Int>::max();
402     const Int min = std::numeric_limits<Int>::min();
403 
404     //  for unsigned (even number of significant bits):  mid2 = mid1 - 1
405     //  for signed (odd number of significant bits):     mid2 = mid1 / 2 - 1
406     const Int mid1 = Int(Int(1) << sizeof(Int) * CHAR_BIT / 2);
407     const Int mid2 = (std::numeric_limits<Int>::digits % 2 ? mid1 / 2 : mid1) - 1;
408 
409     Int r;
410 
411     // basic multiplications
412     QCOMPARE(mul_overflow(Int(0), Int(0), &r), false);
413     QCOMPARE(r, Int(0));
414     QCOMPARE(mul_overflow(Int(1), Int(0), &r), false);
415     QCOMPARE(r, Int(0));
416     QCOMPARE(mul_overflow(Int(0), Int(1), &r), false);
417     QCOMPARE(r, Int(0));
418     QCOMPARE(mul_overflow(max, Int(0), &r), false);
419     QCOMPARE(r, Int(0));
420     QCOMPARE(mul_overflow(Int(0), max, &r), false);
421     QCOMPARE(r, Int(0));
422     QCOMPARE(mul_overflow(min, Int(0), &r), false);
423     QCOMPARE(r, Int(0));
424     QCOMPARE(mul_overflow(Int(0), min, &r), false);
425     QCOMPARE(r, Int(0));
426 
427     QCOMPARE(mul_overflow(Int(1), Int(1), &r), false);
428     QCOMPARE(r, Int(1));
429     QCOMPARE(mul_overflow(Int(1), max, &r), false);
430     QCOMPARE(r, max);
431     QCOMPARE(mul_overflow(max, Int(1), &r), false);
432     QCOMPARE(r, max);
433     QCOMPARE(mul_overflow(Int(1), min, &r), false);
434     QCOMPARE(r, min);
435     QCOMPARE(mul_overflow(min, Int(1), &r), false);
436     QCOMPARE(r, min);
437 
438     // almost max
439     QCOMPARE(mul_overflow(mid1, mid2, &r), false);
440     QCOMPARE(r, Int(max - mid1 + 1));
441     QCOMPARE(mul_overflow(Int(max / 2), Int(2), &r), false);
442     QCOMPARE(r, Int(max & ~Int(1)));
443     QCOMPARE(mul_overflow(Int(max / 4), Int(4), &r), false);
444     QCOMPARE(r, Int(max & ~Int(3)));
445     if (min) {
446         QCOMPARE(mul_overflow(Int(-mid1), mid2, &r), false);
447         QCOMPARE(r, Int(-max + mid1 - 1));
448         QCOMPARE(mul_overflow(Int(-max / 2), Int(2), &r), false);
449         QCOMPARE(r, Int(-max + 1));
450         QCOMPARE(mul_overflow(Int(-max / 4), Int(4), &r), false);
451         QCOMPARE(r, Int(-max + 3));
452 
453         QCOMPARE(mul_overflow(Int(-mid1), Int(mid2 + 1), &r), false);
454         QCOMPARE(r, min);
455         QCOMPARE(mul_overflow(mid1, Int(-mid2 - 1), &r), false);
456         QCOMPARE(r, min);
457     }
458 
459     // overflows
460     QCOMPARE(mul_overflow(max, Int(2), &r), true);
461     QCOMPARE(mul_overflow(Int(max / 2), Int(3), &r), true);
462     QCOMPARE(mul_overflow(mid1, Int(mid2 + 1), &r), true);
463     QCOMPARE(mul_overflow(Int(max / 2 + 2), Int(2), &r), true);
464     QCOMPARE(mul_overflow(Int(1ULL << (std::numeric_limits<Int>::digits - 1)), Int(2), &r), true);
465 
466     if (min) {
467         QCOMPARE(mul_overflow(min, Int(2), &r), true);
468         QCOMPARE(mul_overflow(Int(min / 2), Int(3), &r), true);
469         QCOMPARE(mul_overflow(Int(min / 2 - 1), Int(2), &r), true);
470 QT_WARNING_PUSH QT_WARNING_DISABLE_GCC("-Woverflow") // it's deliberate !
471         QCOMPARE(mul_overflow(Int(min + min/2), Int(2), &r), true);
472 QT_WARNING_POP
473     }
474 #endif
475 }
476 
477 template <typename Int, bool enabled = sizeof(Int) <= sizeof(void*)> struct MulOverflowDispatch;
478 template <typename Int> struct MulOverflowDispatch<Int, true>
479 {
480     void operator()() { mulOverflow_template<Int>(); }
481 };
482 template <typename Int> struct MulOverflowDispatch<Int, false>
483 {
484     void operator()() { QSKIP("This type is too big for this architecture"); }
485 };
486 
487 void tst_QNumeric::mulOverflow()
488 {
489     QFETCH(int, size);
490     if (size == 8)
491         MulOverflowDispatch<quint8>()();
492     if (size == 16)
493         MulOverflowDispatch<quint16>()();
494     if (size == 32)
495         MulOverflowDispatch<quint32>()();
496     if (size == 48)
497         MulOverflowDispatch<ulong>()();     // not really 48-bit
498     if (size == 64)
499         MulOverflowDispatch<quint64>()();
500 
501     if (size == -8)
502         MulOverflowDispatch<qint8>()();
503     if (size == -16)
504         MulOverflowDispatch<qint16>()();
505     if (size == -32)
506         MulOverflowDispatch<qint32>()();
507     if (size == -64) {
508 #if QT_POINTER_SIZE == 8
509         MulOverflowDispatch<qint64>()();
510 #else
511         QFAIL("128-bit multiplication not supported on this platform");
512 #endif
513     }
514 }
515 
516 void tst_QNumeric::signedOverflow()
517 {
518     const int minInt = std::numeric_limits<int>::min();
519     const int maxInt = std::numeric_limits<int>::max();
520     int r;
521 
522     QCOMPARE(add_overflow(minInt + 1, int(-1), &r), false);
523     QCOMPARE(add_overflow(minInt, int(-1), &r), true);
524     QCOMPARE(add_overflow(minInt, minInt, &r), true);
525     QCOMPARE(add_overflow(maxInt - 1, int(1), &r), false);
526     QCOMPARE(add_overflow(maxInt, int(1), &r), true);
527     QCOMPARE(add_overflow(maxInt, maxInt, &r), true);
528 
529     QCOMPARE(sub_overflow(minInt + 1, int(1), &r), false);
530     QCOMPARE(sub_overflow(minInt, int(1), &r), true);
531     QCOMPARE(sub_overflow(minInt, maxInt, &r), true);
532     QCOMPARE(sub_overflow(maxInt - 1, int(-1), &r), false);
533     QCOMPARE(sub_overflow(maxInt, int(-1), &r), true);
534     QCOMPARE(sub_overflow(maxInt, minInt, &r), true);
535 
536     QCOMPARE(mul_overflow(minInt, int(1), &r), false);
537     QCOMPARE(mul_overflow(minInt, int(-1), &r), true);
538     QCOMPARE(mul_overflow(minInt, int(2), &r), true);
539     QCOMPARE(mul_overflow(minInt, minInt, &r), true);
540     QCOMPARE(mul_overflow(maxInt, int(1), &r), false);
541     QCOMPARE(mul_overflow(maxInt, int(-1), &r), false);
542     QCOMPARE(mul_overflow(maxInt, int(2), &r), true);
543     QCOMPARE(mul_overflow(maxInt, maxInt, &r), true);
544 }
545 
546 QTEST_APPLESS_MAIN(tst_QNumeric)
547 #include "tst_qnumeric.moc"
