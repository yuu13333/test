I want you to act as a code reviewer of Qt Creator in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2019 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "webassemblyrunconfigurationaspects.h"
27 #include "webassemblyrunconfiguration.h"
28 #include "webassemblyconstants.h"
29 
30 #include <projectexplorer/buildconfiguration.h>
31 #include <projectexplorer/devicesupport/devicemanager.h>
32 #include <projectexplorer/devicesupport/deviceusedportsgatherer.h>
33 #include <projectexplorer/project.h>
34 #include <projectexplorer/runcontrol.h>
35 #include <projectexplorer/target.h>
36 
37 using namespace ProjectExplorer;
38 using namespace Utils;
39 
40 namespace WebAssembly {
41 namespace Internal {
42 
43 static CommandLine emrunCommand(Target *target, const QString &browser, const QString &port)
44 {
45     BuildConfiguration *bc = target->activeBuildConfiguration();
46     const QFileInfo emrunScript = bc->environment().searchInPath("emrun").toFileInfo();
47     auto html = bc->buildDirectory().pathAppended(target->project()->displayName() + ".html");
48 
49     return CommandLine(bc->environment().searchInPath("python"), {
50             emrunScript.absolutePath() + "/" + emrunScript.baseName() + ".py",
51             "--browser", browser,
52             "--port", port,
53             "--no_emrun_detect",
54             html.toString()
55         });
56 }
57 
58 // Runs a webassembly application via emscripten's "emrun" tool
59 // https://emscripten.org/docs/compiling/Running-html-files-with-emrun.html
60 class EmrunRunConfiguration : public ProjectExplorer::RunConfiguration
61 {
62 public:
63     EmrunRunConfiguration(Target *target, Core::Id id)
64             : RunConfiguration(target, id)
65     {
66         auto webBrowserAspect = addAspect<WebBrowserSelectionAspect>(target);
67 
68         auto effectiveEmrunCall = addAspect<BaseStringAspect>();
69         effectiveEmrunCall->setLabelText(tr("Effective emrun call:"));
70         effectiveEmrunCall->setDisplayStyle(BaseStringAspect::TextEditDisplay);
71         effectiveEmrunCall->setReadOnly(true);
72 
73         auto updateConfiguration = [target, effectiveEmrunCall, webBrowserAspect] {
74             effectiveEmrunCall->setValue(emrunCommand(target,
75                                                       webBrowserAspect->currentBrowser(),
76                                                       "<port>").toUserOutput());
77         };
78 
79         updateConfiguration();
80 
81         connect(webBrowserAspect, &WebBrowserSelectionAspect::changed,
82                 this, updateConfiguration);
83         connect(target->activeBuildConfiguration(), &BuildConfiguration::buildDirectoryChanged,
84                 this, updateConfiguration);
85     }
86 };
87 
88 class EmrunRunWorker : public SimpleTargetRunner
89 {
90 public:
91     EmrunRunWorker(RunControl *runControl)
92         : SimpleTargetRunner(runControl)
93     {
94         m_portsGatherer = new PortsGatherer(runControl);
95         addStartDependency(m_portsGatherer);
96     }
97 
98     void start() final
99     {
100         CommandLine cmd = emrunCommand(runControl()->target(),
101                                        runControl()->aspect<WebBrowserSelectionAspect>()->currentBrowser(),
102                                        m_portsGatherer->findPort().toString());
103         Runnable r;
104         r.setCommandLine(cmd);
105         setRunnable(r);
106 
107         SimpleTargetRunner::start();
108     }
109 
110     PortsGatherer *m_portsGatherer;
111 };
112 
113 
114 // Factories
115 
116 EmrunRunConfigurationFactory::EmrunRunConfigurationFactory()
117     : FixedRunConfigurationFactory(EmrunRunConfiguration::tr("Launch with emrun"))
118 {
119     registerRunConfiguration<EmrunRunConfiguration>(Constants::WEBASSEMBLY_RUNCONFIGURATION_EMRUN);
120     addSupportedTargetDeviceType(Constants::WEBASSEMBLY_DEVICE_TYPE);
121 }
122 
123 EmrunRunWorkerFactory::EmrunRunWorkerFactory()
124 {
125     setProducer([](RunControl *rc) { return new EmrunRunWorker(rc); });
126     addSupportedRunMode(ProjectExplorer::Constants::NORMAL_RUN_MODE);
127     addSupportedRunConfiguration(Constants::WEBASSEMBLY_RUNCONFIGURATION_EMRUN);
128 }
129 
130 } // namespace Internal
131 } // namespace Webassembly
