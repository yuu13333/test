I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Copyright (C) 2019 Intel Corporation.
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the QtCore module of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:LGPL$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU Lesser General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU Lesser
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
22 ** packaging of this file. Please review the following information to
23 ** ensure the GNU Lesser General Public License version 3 requirements
24 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
25 **
26 ** GNU General Public License Usage
27 ** Alternatively, this file may be used under the terms of the GNU
28 ** General Public License version 2.0 or (at your option) the GNU General
29 ** Public license version 3 or any later version approved by the KDE Free
30 ** Qt Foundation. The licenses are as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
32 ** included in the packaging of this file. Please review the following
33 ** information to ensure the GNU General Public License requirements will
34 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
35 ** https://www.gnu.org/licenses/gpl-3.0.html.
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 #include "qbitarray.h"
42 #include <qalgorithms.h>
43 #include <qdatastream.h>
44 #include <qdebug.h>
45 #include <qendian.h>
46 #include <string.h>
47 
48 QT_BEGIN_NAMESPACE
49 
50 /*!
51     \class QBitArray
52     \inmodule QtCore
53     \brief The QBitArray class provides an array of bits.
54 
55     \ingroup tools
56     \ingroup shared
57     \reentrant
58 
59     A QBitArray is an array that gives access to individual bits and
60     provides operators (\l{operator&()}{AND}, \l{operator|()}{OR},
61     \l{operator^()}{XOR}, and \l{operator~()}{NOT}) that work on
62     entire arrays of bits. It uses \l{implicit sharing} (copy-on-write)
63     to reduce memory usage and to avoid the needless copying of data.
64 
65     The following code constructs a QBitArray containing 200 bits
66     initialized to false (0):
67 
68     \snippet code/src_corelib_tools_qbitarray.cpp 0
69 
70     To initialize the bits to true, either pass \c true as second
71     argument to the constructor, or call fill() later on.
72 
73     QBitArray uses 0-based indexes, just like C++ arrays. To access
74     the bit at a particular index position, you can use operator[]().
75     On non-const bit arrays, operator[]() returns a reference to a
76     bit that can be used on the left side of an assignment. For
77     example:
78 
79     \snippet code/src_corelib_tools_qbitarray.cpp 1
80 
81     For technical reasons, it is more efficient to use testBit() and
82     setBit() to access bits in the array than operator[](). For
83     example:
84 
85     \snippet code/src_corelib_tools_qbitarray.cpp 2
86 
87     QBitArray supports \c{&} (\l{operator&()}{AND}), \c{|}
88     (\l{operator|()}{OR}), \c{^} (\l{operator^()}{XOR}),
89     \c{~} (\l{operator~()}{NOT}), as well as
90     \c{&=}, \c{|=}, and \c{^=}. These operators work in the same way
91     as the built-in C++ bitwise operators of the same name. For
92     example:
93 
94     \snippet code/src_corelib_tools_qbitarray.cpp 3
95 
96     For historical reasons, QBitArray distinguishes between a null
97     bit array and an empty bit array. A \e null bit array is a bit
98     array that is initialized using QBitArray's default constructor.
99     An \e empty bit array is any bit array with size 0. A null bit
100     array is always empty, but an empty bit array isn't necessarily
101     null:
102 
103     \snippet code/src_corelib_tools_qbitarray.cpp 4
104 
105     All functions except isNull() treat null bit arrays the same as
106     empty bit arrays; for example, QBitArray() compares equal to
107     QBitArray(0). We recommend that you always use isEmpty() and
108     avoid isNull().
109 
110     \sa QByteArray, QVector
111 */
112 
113 /*!
114     \fn QBitArray::QBitArray(QBitArray &&other)
115 
116     Move-constructs a QBitArray instance, making it point at the same
117     object that \a other was pointing to.
118 
119     \since 5.2
120 */
121 
122 /*! \fn QBitArray::QBitArray()
123 
124     Constructs an empty bit array.
125 
126     \sa isEmpty()
127 */
128 
129 /*
130  * QBitArray construction note:
131  *
132  * We overallocate the byte array by 1 byte. The first user bit is at
133  * d.data()[1]. On the extra first byte, we store the difference between the
134  * number of bits in the byte array (including this byte) and the number of
135  * bits in the bit array. Therefore, for a non-empty QBitArray, it's always a
136  * number between 8 and 15. For the empty one, d is the an empty QByteArray and
137  * *d.constData() is the QByteArray's terminating NUL (0) byte.
138  *
139  * This allows for fast calculation of the bit array size:
140  *    inline int size() const { return (d.size() << 3) - *d.constData(); }
141  */
142 
143 /*!
144     Constructs a bit array containing \a size bits. The bits are
145     initialized with \a value, which defaults to false (0).
146 */
147 QBitArray::QBitArray(int size, bool value)
148     : d(size <= 0 ? 0 : 1 + (size + 7)/8, Qt::Uninitialized)
149 {
150     Q_ASSERT_X(size >= 0, "QBitArray::QBitArray", "Size must be greater than or equal to 0.");
151     if (size <= 0)
152         return;
153 
154     uchar* c = reinterpret_cast<uchar*>(d.data());
155     memset(c + 1, value ? 0xff : 0, d.size() - 1);
156     *c = d.size()*8 - size;
157     if (value && size && size & 7)
158         *(c+1+size/8) &= (1 << (size & 7)) - 1;
159 }
160 
161 /*! \fn int QBitArray::size() const
162 
163     Returns the number of bits stored in the bit array.
164 
165     \sa resize()
166 */
167 
168 /*! \fn int QBitArray::count() const
169 
170     Same as size().
171 */
172 
173 /*!
174     If \a on is true, this function returns the number of
175     1-bits stored in the bit array; otherwise the number
176     of 0-bits is returned.
177 */
178 int QBitArray::count(bool on) const
179 {
180     int numBits = 0;
181     const quint8 *bits = reinterpret_cast<const quint8 *>(d.data()) + 1;
182 
183     // the loops below will try to read from *end
184     // it's the QByteArray implicit NUL, so it will not change the bit count
185     const quint8 *const end = reinterpret_cast<const quint8 *>(d.end());
186 
187     while (bits + 7 <= end) {
188         quint64 v = qFromUnaligned<quint64>(bits);
189         bits += 8;
190         numBits += int(qPopulationCount(v));
191     }
192     if (bits + 3 <= end) {
193         quint32 v = qFromUnaligned<quint32>(bits);
194         bits += 4;
195         numBits += int(qPopulationCount(v));
196     }
197     if (bits + 1 < end) {
198         quint16 v = qFromUnaligned<quint16>(bits);
199         bits += 2;
200         numBits += int(qPopulationCount(v));
201     }
202     if (bits < end)
203         numBits += int(qPopulationCount(bits[0]));
204 
205     return on ? numBits : size() - numBits;
206 }
207 
208 /*!
209     Resizes the bit array to \a size bits.
210 
211     If \a size is greater than the current size, the bit array is
212     extended to make it \a size bits with the extra bits added to the
213     end. The new bits are initialized to false (0).
214 
215     If \a size is less than the current size, bits are removed from
216     the end.
217 
218     \sa size()
219 */
220 void QBitArray::resize(int size)
221 {
222     if (!size) {
223         d.resize(0);
224     } else {
225         int s = d.size();
226         d.resize(1 + (size+7)/8);
227         uchar* c = reinterpret_cast<uchar*>(d.data());
228         if (size > (s << 3))
229             memset(c + s, 0, d.size() - s);
230         else if (size & 7)
231             *(c+1+size/8) &= (1 << (size & 7)) - 1;
232         *c = d.size()*8 - size;
233     }
234 }
235 
236 /*! \fn bool QBitArray::isEmpty() const
237 
238     Returns \c true if this bit array has size 0; otherwise returns
239     false.
240 
241     \sa size()
242 */
243 
244 /*! \fn bool QBitArray::isNull() const
245 
246     Returns \c true if this bit array is null; otherwise returns \c false.
247 
248     Example:
249     \snippet code/src_corelib_tools_qbitarray.cpp 5
250 
251     Qt makes a distinction between null bit arrays and empty bit
252     arrays for historical reasons. For most applications, what
253     matters is whether or not a bit array contains any data,
254     and this can be determined using isEmpty().
255 
256     \sa isEmpty()
257 */
258 
259 /*! \fn bool QBitArray::fill(bool value, int size = -1)
260 
261     Sets every bit in the bit array to \a value, returning true if successful;
262     otherwise returns \c false. If \a size is different from -1 (the default),
263     the bit array is resized to \a size beforehand.
264 
265     Example:
266     \snippet code/src_corelib_tools_qbitarray.cpp 6
267 
268     \sa resize()
269 */
270 
271 /*!
272     \overload
273 
274     Sets bits at index positions \a begin up to (but not including) \a end
275     to \a value.
276 
277     \a begin must be a valid index position in the bit array
278     (0 <= \a begin < size()).
279 
280     \a end must be either a valid index position or equal to size(), in
281     which case the fill operation runs until the end of the array
282     (0 <= \a end <= size()).
283 
284     Example:
285     \snippet code/src_corelib_tools_qbitarray.cpp 15
286 */
287 
288 void QBitArray::fill(bool value, int begin, int end)
289 {
290     while (begin < end && begin & 0x7)
291         setBit(begin++, value);
292     int len = end - begin;
293     if (len <= 0)
294         return;
295     int s = len & ~0x7;
296     uchar *c = reinterpret_cast<uchar*>(d.data());
297     memset(c + (begin >> 3) + 1, value ? 0xff : 0, s >> 3);
298     begin += s;
299     while (begin < end)
300         setBit(begin++, value);
301 }
302 
303 /*!
304     \fn const char *QBitArray::bits() const
305     \since 5.11
306 
307     Returns a pointer to a dense bit array for this QBitArray. Bits are counted
308     upwards from the least significant bit in each byte. The the number of bits
309     relevant in the last byte is given by \c{size() % 8}.
310 
311     \sa fromBits(), size()
312  */
313 
314 /*!
315     \since 5.11
316 
317     Creates a QBitArray with the dense bit array located at \a data, with \a
318     size bits. The byte array at \a data must be at least \a size / 8 (rounded up)
319     bytes long.
320 
321     If \a size is not a multiple of 8, this function will include the lowest
322     \a size % 8 bits from the last byte in \a data.
323 
324     \sa bits()
325  */
326 QBitArray QBitArray::fromBits(const char *data, qsizetype size)
327 {
328     QBitArray result;
329     if (size == 0)
330         return result;
331     qsizetype nbytes = (size + 7) / 8;
332 
333     result.d = QByteArray(nbytes + 1, Qt::Uninitialized);
334     char *bits = result.d.data();
335     memcpy(bits + 1, data, nbytes);
336 
337     // clear any unused bits from the last byte
338     if (size & 7)
339         bits[nbytes] &= 0xffU >> (8 - (size & 7));
340 
341     *bits = result.d.size() * 8 - size;
342     return result;
343 }
344 
345 /*!
346     \since 5.13
347 
348     Returns the array of bit converted to an int. The conversion is based of endianness value.
349     Converts up to the first 32 bits of the array to \c uint32_t and returns it,
350     obeying \a endianness. If the array has more than 32 bits, \a ok is set to false
351     and this function returns zero; otherwise, it's set to true.
352 */
353 quint32 QBitArray::toUInt32(QSysInfo::Endian endianness, bool *ok) const noexcept
354 {
355     if (size() > 32) {
356         if (ok != nullptr) {
357             *ok = false;
358         }
359 
360         return 0;
361     }
362 
363     if (ok != nullptr) {
364         *ok = true;
365     }
366 
367     auto factor = 1;
368     quint32 total = 0;
369     for (auto i = 0; i < size(); ++i, factor *= 2) {
370         const auto index = endianness == QSysInfo::Endian::LittleEndian ? i : (size() - i - 1);
371         if (testBit(index)) {
372             total += factor;
373         }
374     }
375 
376     return total;
377 }
378 
379 /*! \fn bool QBitArray::isDetached() const
380 
381     \internal
382 */
383 
384 /*! \fn void QBitArray::detach()
385 
386     \internal
387 */
388 
389 /*! \fn void QBitArray::clear()
390 
391     Clears the contents of the bit array and makes it empty.
392 
393     \sa resize(), isEmpty()
394 */
395 
396 /*! \fn void QBitArray::truncate(int pos)
397 
398     Truncates the bit array at index position \a pos.
399 
400     If \a pos is beyond the end of the array, nothing happens.
401 
402     \sa resize()
403 */
404 
405 /*! \fn bool QBitArray::toggleBit(int i)
406 
407     Inverts the value of the bit at index position \a i, returning the
408     previous value of that bit as either true (if it was set) or false (if
409     it was unset).
410 
411     If the previous value was 0, the new value will be 1. If the
412     previous value was 1, the new value will be 0.
413 
414     \a i must be a valid index position in the bit array (i.e., 0 <=
415     \a i < size()).
416 
417     \sa setBit(), clearBit()
418 */
419 
420 /*! \fn bool QBitArray::testBit(int i) const
421 
422     Returns \c true if the bit at index position \a i is 1; otherwise
423     returns \c false.
424 
425     \a i must be a valid index position in the bit array (i.e., 0 <=
426     \a i < size()).
427 
428     \sa setBit(), clearBit()
429 */
430 
431 /*! \fn bool QBitArray::setBit(int i)
432 
433     Sets the bit at index position \a i to 1.
434 
435     \a i must be a valid index position in the bit array (i.e., 0 <=
436     \a i < size()).
437 
438     \sa clearBit(), toggleBit()
439 */
440 
441 /*! \fn void QBitArray::setBit(int i, bool value)
442 
443     \overload
444 
445     Sets the bit at index position \a i to \a value.
446 */
447 
448 /*! \fn void QBitArray::clearBit(int i)
449 
450     Sets the bit at index position \a i to 0.
451 
452     \a i must be a valid index position in the bit array (i.e., 0 <=
453     \a i < size()).
454 
455     \sa setBit(), toggleBit()
456 */
457 
458 /*! \fn bool QBitArray::at(int i) const
459 
460     Returns the value of the bit at index position \a i.
461 
462     \a i must be a valid index position in the bit array (i.e., 0 <=
463     \a i < size()).
464 
465     \sa operator[]()
466 */
467 
468 /*! \fn QBitRef QBitArray::operator[](int i)
469 
470     Returns the bit at index position \a i as a modifiable reference.
471 
472     \a i must be a valid index position in the bit array (i.e., 0 <=
473     \a i < size()).
474 
475     Example:
476     \snippet code/src_corelib_tools_qbitarray.cpp 7
477 
478     The return value is of type QBitRef, a helper class for QBitArray.
479     When you get an object of type QBitRef, you can assign to
480     it, and the assignment will apply to the bit in the QBitArray
481     from which you got the reference.
482 
483     The functions testBit(), setBit(), and clearBit() are slightly
484     faster.
485 
486     \sa at(), testBit(), setBit(), clearBit()
487 */
488 
489 /*! \fn bool QBitArray::operator[](int i) const
490 
491     \overload
492 */
493 
494 /*! \fn QBitRef QBitArray::operator[](uint i)
495 
496     \overload
497 */
498 
499 /*! \fn bool QBitArray::operator[](uint i) const
500 
501     \overload
502 */
503 
504 /*! \fn QBitArray::QBitArray(const QBitArray &other)
505 
506     Constructs a copy of \a other.
507 
508     This operation takes \l{constant time}, because QBitArray is
509     \l{implicitly shared}. This makes returning a QBitArray from a
510     function very fast. If a shared instance is modified, it will be
511     copied (copy-on-write), and that takes \l{linear time}.
512 
513     \sa operator=()
514 */
515 
516 /*! \fn QBitArray &QBitArray::operator=(const QBitArray &other)
517 
518     Assigns \a other to this bit array and returns a reference to
519     this bit array.
520 */
521 
522 /*! \fn QBitArray &QBitArray::operator=(QBitArray &&other)
523     \since 5.2
524 
525     Moves \a other to this bit array and returns a reference to
526     this bit array.
527 */
528 
529 /*! \fn void QBitArray::swap(QBitArray &other)
530     \since 4.8
531 
532     Swaps bit array \a other with this bit array. This operation is very
533     fast and never fails.
534 */
535 
536 /*! \fn bool QBitArray::operator==(const QBitArray &other) const
537 
538     Returns \c true if \a other is equal to this bit array; otherwise
539     returns \c false.
540 
541     \sa operator!=()
542 */
543 
544 /*! \fn bool QBitArray::operator!=(const QBitArray &other) const
545 
546     Returns \c true if \a other is not equal to this bit array;
547     otherwise returns \c false.
548 
549     \sa operator==()
550 */
551 
552 /*!
553     Performs the AND operation between all bits in this bit array and
554     \a other. Assigns the result to this bit array, and returns a
555     reference to it.
556 
557     The result has the length of the longest of the two bit arrays,
558     with any missing bits (if one array is shorter than the other)
559     taken to be 0.
560 
561     Example:
562     \snippet code/src_corelib_tools_qbitarray.cpp 8
563 
564     \sa operator&(), operator|=(), operator^=(), operator~()
565 */
566 
567 QBitArray &QBitArray::operator&=(const QBitArray &other)
568 {
569     resize(qMax(size(), other.size()));
570     uchar *a1 = reinterpret_cast<uchar*>(d.data()) + 1;
571     const uchar *a2 = reinterpret_cast<const uchar*>(other.d.constData()) + 1;
572     int n = other.d.size() -1 ;
573     int p = d.size() - 1 - n;
574     while (n-- > 0)
575         *a1++ &= *a2++;
576     while (p-- > 0)
577         *a1++ = 0;
578     return *this;
579 }
580 
581 /*!
582     Performs the OR operation between all bits in this bit array and
583     \a other. Assigns the result to this bit array, and returns a
584     reference to it.
585 
586     The result has the length of the longest of the two bit arrays,
587     with any missing bits (if one array is shorter than the other)
588     taken to be 0.
589 
590     Example:
591     \snippet code/src_corelib_tools_qbitarray.cpp 9
592 
593     \sa operator|(), operator&=(), operator^=(), operator~()
594 */
595 
596 QBitArray &QBitArray::operator|=(const QBitArray &other)
597 {
598     resize(qMax(size(), other.size()));
599     uchar *a1 = reinterpret_cast<uchar*>(d.data()) + 1;
600     const uchar *a2 = reinterpret_cast<const uchar *>(other.d.constData()) + 1;
601     int n = other.d.size() - 1;
602     while (n-- > 0)
603         *a1++ |= *a2++;
604     return *this;
605 }
606 
607 /*!
608     Performs the XOR operation between all bits in this bit array and
609     \a other. Assigns the result to this bit array, and returns a
610     reference to it.
611 
612     The result has the length of the longest of the two bit arrays,
613     with any missing bits (if one array is shorter than the other)
614     taken to be 0.
615 
616     Example:
617     \snippet code/src_corelib_tools_qbitarray.cpp 10
618 
619     \sa operator^(), operator&=(), operator|=(), operator~()
620 */
621 
622 QBitArray &QBitArray::operator^=(const QBitArray &other)
623 {
624     resize(qMax(size(), other.size()));
625     uchar *a1 = reinterpret_cast<uchar*>(d.data()) + 1;
626     const uchar *a2 = reinterpret_cast<const uchar *>(other.d.constData()) + 1;
627     int n = other.d.size() - 1;
628     while (n-- > 0)
629         *a1++ ^= *a2++;
630     return *this;
631 }
632 
633 /*!
634     Returns a bit array that contains the inverted bits of this bit
635     array.
636 
637     Example:
638     \snippet code/src_corelib_tools_qbitarray.cpp 11
639 
640     \sa operator&(), operator|(), operator^()
641 */
642 
643 QBitArray QBitArray::operator~() const
644 {
645     int sz = size();
646     QBitArray a(sz);
647     const uchar *a1 = reinterpret_cast<const uchar *>(d.constData()) + 1;
648     uchar *a2 = reinterpret_cast<uchar*>(a.d.data()) + 1;
649     int n = d.size() - 1;
650 
651     while (n-- > 0)
652         *a2++ = ~*a1++;
653 
654     if (sz && sz%8)
655         *(a2-1) &= (1 << (sz%8)) - 1;
656     return a;
657 }
658 
659 /*!
660     \relates QBitArray
661 
662     Returns a bit array that is the AND of the bit arrays \a a1 and \a
663     a2.
664 
665     The result has the length of the longest of the two bit arrays,
666     with any missing bits (if one array is shorter than the other)
667     taken to be 0.
668 
669     Example:
670     \snippet code/src_corelib_tools_qbitarray.cpp 12
671 
672     \sa {QBitArray::}{operator&=()}, {QBitArray::}{operator|()}, {QBitArray::}{operator^()}
673 */
674 
675 QBitArray operator&(const QBitArray &a1, const QBitArray &a2)
676 {
677     QBitArray tmp = a1;
678     tmp &= a2;
679     return tmp;
680 }
681 
682 /*!
683     \relates QBitArray
684 
685     Returns a bit array that is the OR of the bit arrays \a a1 and \a
686     a2.
687 
688     The result has the length of the longest of the two bit arrays,
689     with any missing bits (if one array is shorter than the other)
690     taken to be 0.
691 
692     Example:
693     \snippet code/src_corelib_tools_qbitarray.cpp 13
694 
695     \sa QBitArray::operator|=(), operator&(), operator^()
696 */
697 
698 QBitArray operator|(const QBitArray &a1, const QBitArray &a2)
699 {
700     QBitArray tmp = a1;
701     tmp |= a2;
702     return tmp;
703 }
704 
705 /*!
706     \relates QBitArray
707 
708     Returns a bit array that is the XOR of the bit arrays \a a1 and \a
709     a2.
710 
711     The result has the length of the longest of the two bit arrays,
712     with any missing bits (if one array is shorter than the other)
713     taken to be 0.
714 
715     Example:
716     \snippet code/src_corelib_tools_qbitarray.cpp 14
717 
718     \sa {QBitArray}{operator^=()}, {QBitArray}{operator&()}, {QBitArray}{operator|()}
719 */
720 
721 QBitArray operator^(const QBitArray &a1, const QBitArray &a2)
722 {
723     QBitArray tmp = a1;
724     tmp ^= a2;
725     return tmp;
726 }
727 
728 /*!
729     \class QBitRef
730     \inmodule QtCore
731     \reentrant
732     \brief The QBitRef class is an internal class, used with QBitArray.
733 
734     \internal
735 
736     The QBitRef is required by the indexing [] operator on bit arrays.
737     It is not for use in any other context.
738 */
739 
740 /*! \fn QBitRef::QBitRef (QBitArray& a, int i)
741 
742     Constructs a reference to element \a i in the QBitArray \a a.
743     This is what QBitArray::operator[] constructs its return value
744     with.
745 */
746 
747 /*! \fn QBitRef::operator bool() const
748 
749     Returns the value referenced by the QBitRef.
750 */
751 
752 /*! \fn bool QBitRef::operator!() const
753 
754     \internal
755 */
756 
757 /*! \fn QBitRef& QBitRef::operator= (const QBitRef& v)
758 
759     Sets the value referenced by the QBitRef to that referenced by
760     QBitRef \a v.
761 */
762 
763 /*! \fn QBitRef& QBitRef::operator= (bool v)
764     \overload
765 
766     Sets the value referenced by the QBitRef to \a v.
767 */
768 
769 
770 /*****************************************************************************
771   QBitArray stream functions
772  *****************************************************************************/
773 
774 #ifndef QT_NO_DATASTREAM
775 /*!
776     \relates QBitArray
777 
778     Writes bit array \a ba to stream \a out.
779 
780     \sa {Serializing Qt Data Types}{Format of the QDataStream operators}
781 */
782 
783 QDataStream &operator<<(QDataStream &out, const QBitArray &ba)
784 {
785     quint32 len = ba.size();
786     out << len;
787     if (len > 0)
788         out.writeRawData(ba.d.constData() + 1, ba.d.size() - 1);
789     return out;
790 }
791 
792 /*!
793     \relates QBitArray
794 
795     Reads a bit array into \a ba from stream \a in.
796 
797     \sa {Serializing Qt Data Types}{Format of the QDataStream operators}
798 */
799 
800 QDataStream &operator>>(QDataStream &in, QBitArray &ba)
801 {
802     ba.clear();
803     quint32 len;
804     in >> len;
805     if (len == 0) {
806         ba.clear();
807         return in;
808     }
809 
810     const quint32 Step = 8 * 1024 * 1024;
811     quint32 totalBytes = (len + 7) / 8;
812     quint32 allocated = 0;
813 
814     while (allocated < totalBytes) {
815         int blockSize = qMin(Step, totalBytes - allocated);
816         ba.d.resize(allocated + blockSize + 1);
817         if (in.readRawData(ba.d.data() + 1 + allocated, blockSize) != blockSize) {
818             ba.clear();
819             in.setStatus(QDataStream::ReadPastEnd);
820             return in;
821         }
822         allocated += blockSize;
823     }
824 
825     int paddingMask = ~((0x1 << (len & 0x7)) - 1);
826     if (paddingMask != ~0x0 && (ba.d.constData()[ba.d.size() - 1] & paddingMask)) {
827         ba.clear();
828         in.setStatus(QDataStream::ReadCorruptData);
829         return in;
830     }
831 
832     *ba.d.data() = ba.d.size() * 8 - len;
833     return in;
834 }
835 #endif // QT_NO_DATASTREAM
836 
837 #ifndef QT_NO_DEBUG_STREAM
838 QDebug operator<<(QDebug dbg, const QBitArray &array)
839 {
840     QDebugStateSaver saver(dbg);
841     dbg.nospace() << "QBitArray(";
842     for (int i = 0; i < array.size();) {
843         if (array.testBit(i))
844             dbg << '1';
845         else
846             dbg << '0';
847         i += 1;
848         if (!(i % 4) && (i < array.size()))
849             dbg << ' ';
850     }
851     dbg << ')';
852     return dbg;
853 }
854 #endif
855 
856 /*!
857     \fn DataPtr &QBitArray::data_ptr()
858     \internal
859 */
860 
861 /*!
862     \typedef QBitArray::DataPtr
863     \internal
864 */
865 
866 QT_END_NAMESPACE
