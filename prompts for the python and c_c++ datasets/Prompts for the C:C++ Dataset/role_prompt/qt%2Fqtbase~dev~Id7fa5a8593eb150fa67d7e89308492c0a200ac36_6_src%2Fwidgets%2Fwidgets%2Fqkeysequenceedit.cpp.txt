I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 // Copyright (C) 2016 The Qt Company Ltd.
2 // Copyright (C) 2013 Ivan Komissarov.
3 // SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
4 
5 #include "qkeysequenceedit.h"
6 #include "qkeysequenceedit_p.h"
7 
8 #include "qboxlayout.h"
9 #include "qlineedit.h"
10 #include <private/qkeymapper_p.h>
11 
12 QT_BEGIN_NAMESPACE
13 
14 void QKeySequenceEditPrivate::init()
15 {
16     Q_Q(QKeySequenceEdit);
17 
18     lineEdit = new QLineEdit(q);
19     lineEdit->setObjectName(QStringLiteral("qt_keysequenceedit_lineedit"));
20     lineEdit->setClearButtonEnabled(false);
21     q->connect(lineEdit, &QLineEdit::textChanged, [q](const QString& text) {
22         // Clear the shortcut if the user clicked on the clear icon
23         if (text.isEmpty())
24             q->clear();
25     });
26 
27     keyNum = 0;
28     prevKey = -1;
29     releaseTimer = 0;
30     maxKeyCount = 4;
31     key = std::vector(maxKeyCount, QKeyCombination::fromCombined(0));
32 
33     QVBoxLayout *layout = new QVBoxLayout(q);
34     layout->setContentsMargins(0, 0, 0, 0);
35     layout->addWidget(lineEdit);
36 
37     lineEdit->setFocusProxy(q);
38     lineEdit->installEventFilter(q);
39     resetState();
40 
41     q->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Fixed);
42     q->setFocusPolicy(Qt::StrongFocus);
43     q->setAttribute(Qt::WA_MacShowFocusRect, true);
44     q->setAttribute(Qt::WA_InputMethodEnabled, false);
45 }
46 
47 int QKeySequenceEditPrivate::translateModifiers(Qt::KeyboardModifiers state, const QString &text)
48 {
49     Q_UNUSED(text);
50     int result = 0;
51     if (state & Qt::ControlModifier)
52         result |= Qt::CTRL;
53     if (state & Qt::MetaModifier)
54         result |= Qt::META;
55     if (state & Qt::AltModifier)
56         result |= Qt::ALT;
57     return result;
58 }
59 
60 void QKeySequenceEditPrivate::resetState()
61 {
62     Q_Q(QKeySequenceEdit);
63 
64     if (releaseTimer) {
65         q->killTimer(releaseTimer);
66         releaseTimer = 0;
67     }
68     prevKey = -1;
69     lineEdit->setText(keySequence.toString(QKeySequence::NativeText));
70     lineEdit->setPlaceholderText(QKeySequenceEdit::tr("Press shortcut"));
71 }
72 
73 void QKeySequenceEditPrivate::finishEditing()
74 {
75     Q_Q(QKeySequenceEdit);
76 
77     resetState();
78     emit q->keySequenceChanged(keySequence);
79     emit q->editingFinished();
80 }
81 
82 /*!
83     \class QKeySequenceEdit
84     \brief The QKeySequenceEdit widget allows to input a QKeySequence.
85 
86     \inmodule QtWidgets
87 
88     \since 5.2
89 
90     This widget lets the user choose a QKeySequence, which is usually used as
91     a shortcut. The recording is initiated when the widget receives the focus
92     and ends one second after the user releases the last key.
93 
94     \sa QKeySequenceEdit::keySequence
95 */
96 
97 /*!
98     Constructs a QKeySequenceEdit widget with the given \a parent.
99 */
100 QKeySequenceEdit::QKeySequenceEdit(QWidget *parent)
101     : QKeySequenceEdit(*new QKeySequenceEditPrivate, parent, { })
102 {
103 }
104 
105 /*!
106     Constructs a QKeySequenceEdit widget with the given \a keySequence and \a parent.
107 */
108 QKeySequenceEdit::QKeySequenceEdit(const QKeySequence &keySequence, QWidget *parent)
109     : QKeySequenceEdit(parent)
110 {
111     setKeySequence(keySequence);
112 }
113 
114 /*!
115     \internal
116 */
117 QKeySequenceEdit::QKeySequenceEdit(QKeySequenceEditPrivate &dd, QWidget *parent, Qt::WindowFlags f) :
118     QWidget(dd, parent, f)
119 {
120     Q_D(QKeySequenceEdit);
121     d->init();
122 }
123 
124 /*!
125     Destroys the QKeySequenceEdit object.
126 */
127 QKeySequenceEdit::~QKeySequenceEdit()
128 {
129 }
130 
131 /*!
132     \property QKeySequenceEdit::keySequence
133 
134     \brief This property contains the currently chosen key sequence.
135 
136     The shortcut can be changed by the user or via setter function.
137 */
138 QKeySequence QKeySequenceEdit::keySequence() const
139 {
140     Q_D(const QKeySequenceEdit);
141 
142     return d->keySequence;
143 }
144 
145 /*!
146     \property QKeySequenceEdit::clearButtonEnabled
147     \brief Whether the key sequence edit displays a clear button when it is not
148     empty.
149 
150     If enabled, the key sequence edit displays a trailing \e clear button when
151     it contains some text, otherwise the line edit does not show a clear button
152     (the default).
153 
154     \since 6.4
155 */
156 void QKeySequenceEdit::setClearButtonEnabled(bool enable)
157 {
158     Q_D(QKeySequenceEdit);
159 
160     d->lineEdit->setClearButtonEnabled(enable);
161 }
162 
163 bool QKeySequenceEdit::isClearButtonEnabled() const
164 {
165     Q_D(const QKeySequenceEdit);
166 
167     return d->lineEdit->isClearButtonEnabled();
168 }
169 
170 /*!
171 +    \property QKeySequenceEDIT::maxKeyCount
172 +    \brief The maximum key count for the key sequence edit.
173 +
174 +    It defaults to 4.
175 +
176 +    \since 6.4
177 +*/
178 
179 void QKeySequenceEdit::setMaxKeyCount(int maxKeyCount)
180 {
181     Q_D(QKeySequenceEdit);
182 
183     d->maxKeyCount = maxKeyCount;
184     d->key.resize(d->maxKeyCount, QKeyCombination::fromCombined(0));
185 }
186 
187 int QKeySequenceEdit::maxKeyCount() const
188 {
189     Q_D(const QKeySequenceEdit);
190 
191     return d->maxKeyCount;
192 }
193 
194 void QKeySequenceEdit::setKeySequence(const QKeySequence &keySequence)
195 {
196     Q_D(QKeySequenceEdit);
197 
198     d->resetState();
199 
200     if (d->keySequence == keySequence)
201         return;
202 
203     d->keySequence = keySequence;
204 
205     d->key = std::vector(d->maxKeyCount, QKeyCombination::fromCombined(0));
206     d->keyNum = keySequence.count();
207     for (int i = 0; i < d->keyNum; ++i)
208         d->key[i] = keySequence[i];
209 
210     d->lineEdit->setText(keySequence.toString(QKeySequence::NativeText));
211 
212     emit keySequenceChanged(keySequence);
213 }
214 
215 /*!
216     \fn void QKeySequenceEdit::editingFinished()
217 
218     This signal is emitted when the user finishes entering the shortcut.
219 
220     \note there is a one second delay before releasing the last key and
221     emitting this signal.
222 */
223 
224 /*!
225     \brief Clears the current key sequence.
226 */
227 void QKeySequenceEdit::clear()
228 {
229     setKeySequence(QKeySequence());
230 }
231 
232 /*!
233     \reimp
234 */
235 bool QKeySequenceEdit::event(QEvent *e)
236 {
237     switch (e->type()) {
238     case QEvent::Shortcut:
239         return true;
240     case QEvent::ShortcutOverride:
241         e->accept();
242         return true;
243     default :
244         break;
245     }
246 
247     return QWidget::event(e);
248 }
249 
250 /*!
251     \reimp
252 */
253 void QKeySequenceEdit::keyPressEvent(QKeyEvent *e)
254 {
255     Q_D(QKeySequenceEdit);
256 
257     int nextKey = e->key();
258 
259     if (d->prevKey == -1) {
260         clear();
261         d->prevKey = nextKey;
262     }
263 
264     d->lineEdit->setPlaceholderText(QString());
265     if (nextKey == Qt::Key_Control
266             || nextKey == Qt::Key_Shift
267             || nextKey == Qt::Key_Meta
268             || nextKey == Qt::Key_Alt
269             || nextKey == Qt::Key_unknown) {
270         return;
271     }
272 
273     QString selectedText = d->lineEdit->selectedText();
274     if (!selectedText.isEmpty() && selectedText == d->lineEdit->text()) {
275         clear();
276         if (nextKey == Qt::Key_Backspace)
277             return;
278     }
279 
280     if (d->keyNum >= d->maxKeyCount)
281         return;
282 
283     if (e->modifiers() & Qt::ShiftModifier) {
284         QList<int> possibleKeys = QKeyMapper::possibleKeys(e);
285         int pkTotal = possibleKeys.count();
286         if (!pkTotal)
287             return;
288         bool found = false;
289         for (int i = 0; i < possibleKeys.size(); ++i) {
290             if (possibleKeys.at(i) - nextKey == int(e->modifiers())
291                 || (possibleKeys.at(i) == nextKey && e->modifiers() == Qt::ShiftModifier)) {
292                 nextKey = possibleKeys.at(i);
293                 found = true;
294                 break;
295             }
296         }
297         // Use as fallback
298         if (!found)
299             nextKey = possibleKeys.first();
300     } else {
301         nextKey |= d->translateModifiers(e->modifiers(), e->text());
302     }
303 
304 
305     d->key[d->keyNum] = QKeyCombination::fromCombined(nextKey);
306     d->keyNum++;
307 
308     int key[4] = {0};
309     for (int i = 0; i < d->maxKeyCount; ++i)
310       key[i] = d->key[i];
311     QKeySequence keySequence(key[0], key[1], key[2], key[3]);
312     d->keySequence = keySequence;
313     QString text = keySequence.toString(QKeySequence::NativeText);
314     if (d->keyNum < d->maxKeyCount) {
315         //: This text is an "unfinished" shortcut, expands like "Ctrl+A, ..."
316         text = tr("%1, ...").arg(text);
317     }
318     d->lineEdit->setText(text);
319     e->accept();
320 }
321 
322 /*!
323     \reimp
324 */
325 void QKeySequenceEdit::keyReleaseEvent(QKeyEvent *e)
326 {
327     Q_D(QKeySequenceEdit);
328 
329     if (d->prevKey == e->key()) {
330         if (d->keyNum < d->maxKeyCount)
331             d->releaseTimer = startTimer(1000);
332         else
333             d->finishEditing();
334     }
335     e->accept();
336 }
337 
338 /*!
339     \reimp
340 */
341 void QKeySequenceEdit::timerEvent(QTimerEvent *e)
342 {
343     Q_D(QKeySequenceEdit);
344     if (e->timerId() == d->releaseTimer) {
345         d->finishEditing();
346         return;
347     }
348 
349     QWidget::timerEvent(e);
350 }
351 
352 QT_END_NAMESPACE
353 
354 #include "moc_qkeysequenceedit.cpp"
