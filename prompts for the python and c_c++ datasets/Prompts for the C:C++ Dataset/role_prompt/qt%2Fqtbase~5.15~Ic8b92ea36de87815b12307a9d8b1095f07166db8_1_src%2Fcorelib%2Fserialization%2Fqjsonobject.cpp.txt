I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include <qjsonobject.h>
41 #include <qjsonvalue.h>
42 #include <qjsonarray.h>
43 #include <qjsondocument.h>
44 #include <qstringlist.h>
45 #include <qdebug.h>
46 #include <qvariant.h>
47 #include <qcbormap.h>
48 
49 #include <private/qcborvalue_p.h>
50 #include "qjsonwriter_p.h"
51 
52 QT_BEGIN_NAMESPACE
53 
54 /*!
55     \class QJsonObject
56     \inmodule QtCore
57     \ingroup json
58     \ingroup shared
59     \reentrant
60     \since 5.0
61 
62     \brief The QJsonObject class encapsulates a JSON object.
63 
64     A JSON object is a list of key value pairs, where the keys are unique strings
65     and the values are represented by a QJsonValue.
66 
67     A QJsonObject can be converted to and from a QVariantMap. You can query the
68     number of (key, value) pairs with size(), insert(), and remove() entries from it
69     and iterate over its content using the standard C++ iterator pattern.
70 
71     QJsonObject is an implicitly shared class, and shares the data with the document
72     it has been created from as long as it is not being modified.
73 
74     You can convert the object to and from text based JSON through QJsonDocument.
75 
76     \sa {JSON Support in Qt}, {JSON Save Game Example}
77 */
78 
79 /*!
80     \typedef QJsonObject::Iterator
81 
82     Qt-style synonym for QJsonObject::iterator.
83 */
84 
85 /*!
86     \typedef QJsonObject::ConstIterator
87 
88     Qt-style synonym for QJsonObject::const_iterator.
89 */
90 
91 /*!
92     \typedef QJsonObject::key_type
93 
94     Typedef for QString. Provided for STL compatibility.
95 */
96 
97 /*!
98     \typedef QJsonObject::mapped_type
99 
100     Typedef for QJsonValue. Provided for STL compatibility.
101 */
102 
103 /*!
104     \typedef QJsonObject::size_type
105 
106     Typedef for int. Provided for STL compatibility.
107 */
108 
109 
110 /*!
111     Constructs an empty JSON object.
112 
113     \sa isEmpty()
114  */
115 QJsonObject::QJsonObject() = default;
116 
117 /*!
118     \fn QJsonObject::QJsonObject(std::initializer_list<QPair<QString, QJsonValue> > args)
119     \since 5.4
120     Constructs a QJsonObject instance initialized from \a args initialization list.
121     For example:
122     \code
123     QJsonObject object
124     {
125         {"property1", 1},
126         {"property2", 2}
127     };
128     \endcode
129 */
130 
131 /*!
132     \internal
133  */
134 QJsonObject::QJsonObject(QCborContainerPrivate *object)
135     : o(object)
136 {
137     Q_ASSERT(o);
138 }
139 
140 /*!
141     This method replaces part of the QJsonObject(std::initializer_list<QPair<QString, QJsonValue>> args) body.
142     The constructor needs to be inline, but we do not want to leak implementation details
143     of this class.
144     \note this method is called for an uninitialized object
145     \internal
146  */
147 
148 void QJsonObject::initialize()
149 {
150     o = nullptr;
151 }
152 
153 /*!
154     Destroys the object.
155  */
156 QJsonObject::~QJsonObject() = default;
157 
158 /*!
159     Creates a copy of \a other.
160 
161     Since QJsonObject is implicitly shared, the copy is shallow
162     as long as the object does not get modified.
163  */
164 QJsonObject::QJsonObject(const QJsonObject &other)
165 {
166     o = other.o;
167 }
168 
169 /*!
170     Assigns \a other to this object.
171  */
172 QJsonObject &QJsonObject::operator =(const QJsonObject &other)
173 {
174     o = other.o;
175     return *this;
176 }
177 
178 /*!
179     \fn QJsonObject::QJsonObject(QJsonObject &&other)
180     \since 5.10
181 
182     Move-constructs a QJsonObject from \a other.
183 */
184 
185 /*!
186     \fn QJsonObject &QJsonObject::operator =(QJsonObject &&other)
187     \since 5.10
188 
189     Move-assigns \a other to this object.
190 */
191 
192 /*!
193     \fn void QJsonObject::swap(QJsonObject &other)
194     \since 5.10
195 
196     Swaps the object \a other with this. This operation is very fast and never fails.
197 */
198 
199 
200 /*!
201     Converts the variant map \a map to a QJsonObject.
202 
203     The keys in \a map will be used as the keys in the JSON object,
204     and the QVariant values will be converted to JSON values.
205 
206     \sa fromVariantHash(), toVariantMap(), QJsonValue::fromVariant()
207  */
208 QJsonObject QJsonObject::fromVariantMap(const QVariantMap &map)
209 {
210     return QCborMap::fromVariantMap(map).toJsonObject();
211 }
212 
213 /*!
214     Converts this object to a QVariantMap.
215 
216     Returns the created map.
217 
218     \sa toVariantHash()
219  */
220 QVariantMap QJsonObject::toVariantMap() const
221 {
222     return QCborMap::fromJsonObject(*this).toVariantMap();
223 }
224 
225 /*!
226     Converts the variant hash \a hash to a QJsonObject.
227     \since 5.5
228 
229     The keys in \a hash will be used as the keys in the JSON object,
230     and the QVariant values will be converted to JSON values.
231 
232     \sa fromVariantMap(), toVariantHash(), QJsonValue::fromVariant()
233  */
234 QJsonObject QJsonObject::fromVariantHash(const QVariantHash &hash)
235 {
236     // ### this is implemented the trivial way, not the most efficient way
237 
238     QJsonObject object;
239     for (QVariantHash::const_iterator it = hash.constBegin(); it != hash.constEnd(); ++it)
240         object.insert(it.key(), QJsonValue::fromVariant(it.value()));
241     return object;
242 }
243 
244 /*!
245     Converts this object to a QVariantHash.
246     \since 5.5
247 
248     Returns the created hash.
249 
250     \sa toVariantMap()
251  */
252 QVariantHash QJsonObject::toVariantHash() const
253 {
254     return QCborMap::fromJsonObject(*this).toVariantHash();
255 }
256 
257 /*!
258     Returns a list of all keys in this object.
259 
260     The list is sorted lexographically.
261  */
262 QStringList QJsonObject::keys() const
263 {
264     QStringList keys;
265     if (o) {
266         keys.reserve(o->elements.length() / 2);
267         for (int i = 0, end = o->elements.length(); i < end; i += 2)
268             keys.append(o->stringAt(i));
269     }
270     return keys;
271 }
272 
273 /*!
274     Returns the number of (key, value) pairs stored in the object.
275  */
276 int QJsonObject::size() const
277 {
278     return o ? o->elements.length() : 0;
279 }
280 
281 /*!
282     Returns \c true if the object is empty. This is the same as size() == 0.
283 
284     \sa size()
285  */
286 bool QJsonObject::isEmpty() const
287 {
288     return !o || o->elements.isEmpty();
289 }
290 
291 static int indexOf(const QExplicitlySharedDataPointer<QCborContainerPrivate> &o,
292                    const QString &key, bool *keyExists)
293 {
294     for (int i = 0, end = o->elements.length(); i != end; i += 2) {
295         if (o->stringAt(i) == key) {
296             *keyExists = true;
297             return i;
298         }
299     }
300     *keyExists = false;
301     return -1;
302 }
303 
304 /*!
305     Returns a QJsonValue representing the value for the key \a key.
306 
307     The returned QJsonValue is QJsonValue::Undefined if the key does not exist.
308 
309     \sa QJsonValue, QJsonValue::isUndefined()
310  */
311 QJsonValue QJsonObject::value(const QString &key) const
312 {
313     if (!o)
314         return QJsonValue(QJsonValue::Undefined);
315 
316     bool keyExists;
317     int i = indexOf(o, key, &keyExists);
318     if (!keyExists)
319         return QJsonValue(QJsonValue::Undefined);
320     return o->valueAt(i + 1).toJsonValue();
321 }
322 
323 /*!
324     \overload
325     \since 5.7
326 */
327 QJsonValue QJsonObject::value(QLatin1String key) const
328 {
329     if (!o)
330         return QJsonValue(QJsonValue::Undefined);
331 
332     bool keyExists;
333     int i = indexOf(o, key, &keyExists);
334     if (!keyExists)
335         return QJsonValue(QJsonValue::Undefined);
336     return o->valueAt(i + 1).toJsonValue();
337 }
338 
339 /*!
340     Returns a QJsonValue representing the value for the key \a key.
341 
342     This does the same as value().
343 
344     The returned QJsonValue is QJsonValue::Undefined if the key does not exist.
345 
346     \sa value(), QJsonValue, QJsonValue::isUndefined()
347  */
348 QJsonValue QJsonObject::operator [](const QString &key) const
349 {
350     return value(key);
351 }
352 
353 /*!
354     \fn QJsonValue QJsonObject::operator [](QLatin1String key) const
355 
356     \overload
357     \since 5.7
358 */
359 
360 /*!
361     Returns a reference to the value for \a key.
362 
363     The return value is of type QJsonValueRef, a helper class for QJsonArray
364     and QJsonObject. When you get an object of type QJsonValueRef, you can
365     use it as if it were a reference to a QJsonValue. If you assign to it,
366     the assignment will apply to the element in the QJsonArray or QJsonObject
367     from which you got the reference.
368 
369     \sa value()
370  */
371 QJsonValueRef QJsonObject::operator [](const QString &key)
372 {
373     // ### somewhat inefficient, as we lookup the key twice if it doesn't yet exist
374     bool keyExists = false;
375     int index = o ? indexOf(o, key, &keyExists) : -1;
376     if (!keyExists) {
377         iterator i = insert(key, QJsonValue());
378         index = i.i;
379     }
380     return QJsonValueRef(this, index);
381 }
382 
383 /*!
384     \overload
385     \since 5.7
386 */
387 QJsonValueRef QJsonObject::operator [](QLatin1String key)
388 {
389     // ### optimize me
390     return operator[](QString(key));
391 }
392 
393 /*!
394     Inserts a new item with the key \a key and a value of \a value.
395 
396     If there is already an item with the key \a key, then that item's value
397     is replaced with \a value.
398 
399     Returns an iterator pointing to the inserted item.
400 
401     If the value is QJsonValue::Undefined, it will cause the key to get removed
402     from the object. The returned iterator will then point to end().
403 
404     \sa remove(), take(), QJsonObject::iterator, end()
405  */
406 QJsonObject::iterator QJsonObject::insert(const QString &key, const QJsonValue &value)
407 {
408     if (value.t == QJsonValue::Undefined) {
409         remove(key);
410         return end();
411     }
412 
413     bool keyExists = false;
414     int index = o ? indexOf(o, key, &keyExists) : -1;
415     if (!keyExists) {
416         index = o->elements.length();
417         o->append(key);
418         o->append(QCborValue::fromJsonValue(value));
419     } else {
420         o->replaceAt(index + 1, QCborValue::fromJsonValue(value),
421                      QCborContainerPrivate::MoveContainer);
422     }
423     return {this, index};
424 }
425 
426 /*!
427     Removes \a key from the object.
428 
429     \sa insert(), take()
430  */
431 void QJsonObject::remove(const QString &key)
432 {
433     if (!o)
434         return;
435 
436     bool keyExists;
437     int index = indexOf(o, key, &keyExists);
438     if (!keyExists)
439         return;
440 
441     detach2();
442     o->removeAt(index + 1);
443     o->removeAt(index);
444 }
445 
446 /*!
447     Removes \a key from the object.
448 
449     Returns a QJsonValue containing the value referenced by \a key.
450     If \a key was not contained in the object, the returned QJsonValue
451     is QJsonValue::Undefined.
452 
453     \sa insert(), remove(), QJsonValue
454  */
455 QJsonValue QJsonObject::take(const QString &key)
456 {
457     if (!o)
458         return QJsonValue(QJsonValue::Undefined);
459 
460     bool keyExists;
461     int index = indexOf(o, key, &keyExists);
462     if (!keyExists)
463         return QJsonValue(QJsonValue::Undefined);
464 
465     const QCborValue v = o->extractAt(index + 1);
466     detach2();
467     o->removeAt(index + 1);
468     o->removeAt(index);
469     return v.toJsonValue();
470 }
471 
472 /*!
473     Returns \c true if the object contains key \a key.
474 
475     \sa insert(), remove(), take()
476  */
477 bool QJsonObject::contains(const QString &key) const
478 {
479     if (!o)
480         return false;
481 
482     bool keyExists;
483     indexOf(o, key, &keyExists);
484     return keyExists;
485 }
486 
487 /*!
488     \overload
489     \since 5.7
490 */
491 bool QJsonObject::contains(QLatin1String key) const
492 {
493     if (!o)
494         return false;
495 
496     bool keyExists;
497     indexOf(o, key, &keyExists);
498     return keyExists;
499 }
500 
501 /*!
502     Returns \c true if \a other is equal to this object.
503  */
504 bool QJsonObject::operator==(const QJsonObject &other) const
505 {
506     if (o == other.o)
507         return true;
508 
509     if (!o)
510         return !other.o->elements.length();
511     if (!other.o)
512         return !o->elements.length();
513     if (o->elements.length() != other.o->elements.length())
514         return false;
515 
516     for (int i = 0, end = o->elements.length(); i < end; ++i) {
517         if (o->valueAt(i) != other.o->valueAt(i))
518             return false;
519     }
520 
521     return true;
522 }
523 
524 /*!
525     Returns \c true if \a other is not equal to this object.
526  */
527 bool QJsonObject::operator!=(const QJsonObject &other) const
528 {
529     return !(*this == other);
530 }
531 
532 /*!
533     Removes the (key, value) pair pointed to by the iterator \a it
534     from the map, and returns an iterator to the next item in the
535     map.
536 
537     \sa remove()
538  */
539 QJsonObject::iterator QJsonObject::erase(QJsonObject::iterator it)
540 {
541     if (it.o != this || it.i < 0 || it.i >= o->elements.length())
542         return {this, o->elements.length()};
543 
544     int index = it.i;
545 
546     o->removeAt(index + 1);
547     o->removeAt(index);
548     // iterator hasn't changed
549     return it;
550 }
551 
552 /*!
553     Returns an iterator pointing to the item with key \a key in the
554     map.
555 
556     If the map contains no item with key \a key, the function
557     returns end().
558  */
559 QJsonObject::iterator QJsonObject::find(const QString &key)
560 {
561     bool keyExists = false;
562     int index = o ? indexOf(o, key, &keyExists) : 0;
563     if (!keyExists)
564         return end();
565     detach2();
566     return {this, index};
567 }
568 
569 /*!
570     \overload
571     \since 5.7
572 */
573 QJsonObject::iterator QJsonObject::find(QLatin1String key)
574 {
575     bool keyExists = false;
576     int index = o ? indexOf(o, key, &keyExists) : 0;
577     if (!keyExists)
578         return end();
579     detach2();
580     return {this, index};
581 }
582 
583 /*! \fn QJsonObject::const_iterator QJsonObject::find(const QString &key) const
584 
585     \overload
586 */
587 
588 /*! \fn QJsonObject::const_iterator QJsonObject::find(QLatin1String key) const
589 
590     \overload
591     \since 5.7
592 */
593 
594 /*!
595     Returns a const iterator pointing to the item with key \a key in the
596     map.
597 
598     If the map contains no item with key \a key, the function
599     returns constEnd().
600  */
601 QJsonObject::const_iterator QJsonObject::constFind(const QString &key) const
602 {
603     bool keyExists = false;
604     int index = o ? indexOf(o, key, &keyExists) : 0;
605     if (!keyExists)
606         return end();
607     return {this, index};
608 }
609 
610 /*!
611     \overload
612     \since 5.7
613 */
614 QJsonObject::const_iterator QJsonObject::constFind(QLatin1String key) const
615 {
616     bool keyExists = false;
617     int index = o ? indexOf(o, key, &keyExists) : 0;
618     if (!keyExists)
619         return end();
620     return {this, index};
621 }
622 
623 /*! \fn int QJsonObject::count() const
624 
625     \overload
626 
627     Same as size().
628 */
629 
630 /*! \fn int QJsonObject::length() const
631 
632     \overload
633 
634     Same as size().
635 */
636 
637 /*! \fn QJsonObject::iterator QJsonObject::begin()
638 
639     Returns an \l{STL-style iterators}{STL-style iterator} pointing to the first item in
640     the object.
641 
642     \sa constBegin(), end()
643 */
644 
645 /*! \fn QJsonObject::const_iterator QJsonObject::begin() const
646 
647     \overload
648 */
649 
650 /*! \fn QJsonObject::const_iterator QJsonObject::constBegin() const
651 
652     Returns a const \l{STL-style iterators}{STL-style iterator} pointing to the first item
653     in the object.
654 
655     \sa begin(), constEnd()
656 */
657 
658 /*! \fn QJsonObject::iterator QJsonObject::end()
659 
660     Returns an \l{STL-style iterators}{STL-style iterator} pointing to the imaginary item
661     after the last item in the object.
662 
663     \sa begin(), constEnd()
664 */
665 
666 /*! \fn QJsonObject::const_iterator QJsonObject::end() const
667 
668     \overload
669 */
670 
671 /*! \fn QJsonObject::const_iterator QJsonObject::constEnd() const
672 
673     Returns a const \l{STL-style iterators}{STL-style iterator} pointing to the imaginary
674     item after the last item in the object.
675 
676     \sa constBegin(), end()
677 */
678 
679 /*!
680     \fn bool QJsonObject::empty() const
681 
682     This function is provided for STL compatibility. It is equivalent
683     to isEmpty(), returning \c true if the object is empty; otherwise
684     returning \c false.
685 */
686 
687 /*! \class QJsonObject::iterator
688     \inmodule QtCore
689     \ingroup json
690     \reentrant
691     \since 5.0
692 
693     \brief The QJsonObject::iterator class provides an STL-style non-const iterator for QJsonObject.
694 
695     QJsonObject::iterator allows you to iterate over a QJsonObject
696     and to modify the value (but not the key) stored under
697     a particular key. If you want to iterate over a const QJsonObject, you
698     should use QJsonObject::const_iterator. It is generally good practice to
699     use QJsonObject::const_iterator on a non-const QJsonObject as well, unless you
700     need to change the QJsonObject through the iterator. Const iterators are
701     slightly faster, and improve code readability.
702 
703     The default QJsonObject::iterator constructor creates an uninitialized
704     iterator. You must initialize it using a QJsonObject function like
705     QJsonObject::begin(), QJsonObject::end(), or QJsonObject::find() before you can
706     start iterating.
707 
708     Multiple iterators can be used on the same object. Existing iterators will however
709     become dangling once the object gets modified.
710 
711     \sa QJsonObject::const_iterator, {JSON Support in Qt}, {JSON Save Game Example}
712 */
713 
714 /*! \typedef QJsonObject::iterator::difference_type
715 
716     \internal
717 */
718 
719 /*! \typedef QJsonObject::iterator::iterator_category
720 
721     A synonym for \e {std::random_access_iterator_tag} indicating
722     this iterator is a random-access iterator.
723 
724     \note In Qt versions before 5.6, this was set by mistake to
725     \e {std::bidirectional_iterator_tag}.
726 */
727 
728 /*! \typedef QJsonObject::iterator::reference
729 
730     \internal
731 */
732 
733 /*! \typedef QJsonObject::iterator::value_type
734 
735     \internal
736 */
737 
738 /*! \typedef QJsonObject::iterator::pointer
739 
740     \internal
741 */
742 
743 /*! \fn QJsonObject::iterator::iterator()
744 
745     Constructs an uninitialized iterator.
746 
747     Functions like key(), value(), and operator++() must not be
748     called on an uninitialized iterator. Use operator=() to assign a
749     value to it before using it.
750 
751     \sa QJsonObject::begin(), QJsonObject::end()
752 */
753 
754 /*! \fn QJsonObject::iterator::iterator(QJsonObject *obj, int index)
755     \internal
756 */
757 
758 /*! \fn QString QJsonObject::iterator::key() const
759 
760     Returns the current item's key.
761 
762     There is no direct way of changing an item's key through an
763     iterator, although it can be done by calling QJsonObject::erase()
764     followed by QJsonObject::insert().
765 
766     \sa value()
767 */
768 
769 /*! \fn QJsonValueRef QJsonObject::iterator::value() const
770 
771     Returns a modifiable reference to the current item's value.
772 
773     You can change the value of an item by using value() on
774     the left side of an assignment.
775 
776     The return value is of type QJsonValueRef, a helper class for QJsonArray
777     and QJsonObject. When you get an object of type QJsonValueRef, you can
778     use it as if it were a reference to a QJsonValue. If you assign to it,
779     the assignment will apply to the element in the QJsonArray or QJsonObject
780     from which you got the reference.
781 
782     \sa key(), operator*()
783 */
784 
785 /*! \fn QJsonValueRef QJsonObject::iterator::operator*() const
786 
787     Returns a modifiable reference to the current item's value.
788 
789     Same as value().
790 
791     The return value is of type QJsonValueRef, a helper class for QJsonArray
792     and QJsonObject. When you get an object of type QJsonValueRef, you can
793     use it as if it were a reference to a QJsonValue. If you assign to it,
794     the assignment will apply to the element in the QJsonArray or QJsonObject
795     from which you got the reference.
796 
797     \sa key()
798 */
799 
800 /*! \fn QJsonValueRef *QJsonObject::iterator::operator->() const
801 
802     Returns a pointer to a modifiable reference to the current item.
803 */
804 
805 /*!
806     \fn bool QJsonObject::iterator::operator==(const iterator &other) const
807     \fn bool QJsonObject::iterator::operator==(const const_iterator &other) const
808 
809     Returns \c true if \a other points to the same item as this
810     iterator; otherwise returns \c false.
811 
812     \sa operator!=()
813 */
814 
815 /*!
816     \fn bool QJsonObject::iterator::operator!=(const iterator &other) const
817     \fn bool QJsonObject::iterator::operator!=(const const_iterator &other) const
818 
819     Returns \c true if \a other points to a different item than this
820     iterator; otherwise returns \c false.
821 
822     \sa operator==()
823 */
824 
825 /*! \fn QJsonObject::iterator QJsonObject::iterator::operator++()
826 
827     The prefix ++ operator, \c{++i}, advances the iterator to the
828     next item in the object and returns an iterator to the new current
829     item.
830 
831     Calling this function on QJsonObject::end() leads to undefined results.
832 
833     \sa operator--()
834 */
835 
836 /*! \fn QJsonObject::iterator QJsonObject::iterator::operator++(int)
837 
838     \overload
839 
840     The postfix ++ operator, \c{i++}, advances the iterator to the
841     next item in the object and returns an iterator to the previously
842     current item.
843 */
844 
845 /*! \fn QJsonObject::iterator QJsonObject::iterator::operator--()
846 
847     The prefix -- operator, \c{--i}, makes the preceding item
848     current and returns an iterator pointing to the new current item.
849 
850     Calling this function on QJsonObject::begin() leads to undefined
851     results.
852 
853     \sa operator++()
854 */
855 
856 /*! \fn QJsonObject::iterator QJsonObject::iterator::operator--(int)
857 
858     \overload
859 
860     The postfix -- operator, \c{i--}, makes the preceding item
861     current and returns an iterator pointing to the previously
862     current item.
863 */
864 
865 /*! \fn QJsonObject::iterator QJsonObject::iterator::operator+(int j) const
866 
867     Returns an iterator to the item at \a j positions forward from
868     this iterator. If \a j is negative, the iterator goes backward.
869 
870     \sa operator-()
871 
872 */
873 
874 /*! \fn QJsonObject::iterator QJsonObject::iterator::operator-(int j) const
875 
876     Returns an iterator to the item at \a j positions backward from
877     this iterator. If \a j is negative, the iterator goes forward.
878 
879     \sa operator+()
880 */
881 
882 /*! \fn QJsonObject::iterator &QJsonObject::iterator::operator+=(int j)
883 
884     Advances the iterator by \a j items. If \a j is negative, the
885     iterator goes backward.
886 
887     \sa operator-=(), operator+()
888 */
889 
890 /*! \fn QJsonObject::iterator &QJsonObject::iterator::operator-=(int j)
891 
892     Makes the iterator go back by \a j items. If \a j is negative,
893     the iterator goes forward.
894 
895     \sa operator+=(), operator-()
896 */
897 
898 /*!
899     \class QJsonObject::const_iterator
900     \inmodule QtCore
901     \ingroup json
902     \since 5.0
903     \brief The QJsonObject::const_iterator class provides an STL-style const iterator for QJsonObject.
904 
905     QJsonObject::const_iterator allows you to iterate over a QJsonObject.
906     If you want to modify the QJsonObject as you iterate
907     over it, you must use QJsonObject::iterator instead. It is generally
908     good practice to use QJsonObject::const_iterator on a non-const QJsonObject as
909     well, unless you need to change the QJsonObject through the iterator.
910     Const iterators are slightly faster and improve code
911     readability.
912 
913     The default QJsonObject::const_iterator constructor creates an
914     uninitialized iterator. You must initialize it using a QJsonObject
915     function like QJsonObject::constBegin(), QJsonObject::constEnd(), or
916     QJsonObject::find() before you can start iterating.
917 
918     Multiple iterators can be used on the same object. Existing iterators
919     will however become dangling if the object gets modified.
920 
921     \sa QJsonObject::iterator, {JSON Support in Qt}, {JSON Save Game Example}
922 */
923 
924 /*! \typedef QJsonObject::const_iterator::difference_type
925 
926     \internal
927 */
928 
929 /*! \typedef QJsonObject::const_iterator::iterator_category
930 
931     A synonym for \e {std::random_access_iterator_tag} indicating
932     this iterator is a random-access iterator.
933 
934     \note In Qt versions before 5.6, this was set by mistake to
935     \e {std::bidirectional_iterator_tag}.
936 */
937 
938 /*! \typedef QJsonObject::const_iterator::reference
939 
940     \internal
941 */
942 
943 /*! \typedef QJsonObject::const_iterator::value_type
944 
945     \internal
946 */
947 
948 /*! \typedef QJsonObject::const_iterator::pointer
949 
950     \internal
951 */
952 
953 /*! \fn QJsonObject::const_iterator::const_iterator()
954 
955     Constructs an uninitialized iterator.
956 
957     Functions like key(), value(), and operator++() must not be
958     called on an uninitialized iterator. Use operator=() to assign a
959     value to it before using it.
960 
961     \sa QJsonObject::constBegin(), QJsonObject::constEnd()
962 */
963 
964 /*! \fn QJsonObject::const_iterator::const_iterator(const QJsonObject *obj, int index)
965     \internal
966 */
967 
968 /*! \fn QJsonObject::const_iterator::const_iterator(const iterator &other)
969 
970     Constructs a copy of \a other.
971 */
972 
973 /*! \fn QString QJsonObject::const_iterator::key() const
974 
975     Returns the current item's key.
976 
977     \sa value()
978 */
979 
980 /*! \fn QJsonValue QJsonObject::const_iterator::value() const
981 
982     Returns the current item's value.
983 
984     \sa key(), operator*()
985 */
986 
987 /*! \fn QJsonValue QJsonObject::const_iterator::operator*() const
988 
989     Returns the current item's value.
990 
991     Same as value().
992 
993     \sa key()
994 */
995 
996 /*! \fn QJsonValue *QJsonObject::const_iterator::operator->() const
997 
998     Returns a pointer to the current item.
999 */
1000 
1001 /*! \fn bool QJsonObject::const_iterator::operator==(const const_iterator &other) const
1002     \fn bool QJsonObject::const_iterator::operator==(const iterator &other) const
1003 
1004     Returns \c true if \a other points to the same item as this
1005     iterator; otherwise returns \c false.
1006 
1007     \sa operator!=()
1008 */
1009 
1010 /*! \fn bool QJsonObject::const_iterator::operator!=(const const_iterator &other) const
1011     \fn bool QJsonObject::const_iterator::operator!=(const iterator &other) const
1012 
1013     Returns \c true if \a other points to a different item than this
1014     iterator; otherwise returns \c false.
1015 
1016     \sa operator==()
1017 */
1018 
1019 /*! \fn QJsonObject::const_iterator QJsonObject::const_iterator::operator++()
1020 
1021     The prefix ++ operator, \c{++i}, advances the iterator to the
1022     next item in the object and returns an iterator to the new current
1023     item.
1024 
1025     Calling this function on QJsonObject::end() leads to undefined results.
1026 
1027     \sa operator--()
1028 */
1029 
1030 /*! \fn QJsonObject::const_iterator QJsonObject::const_iterator::operator++(int)
1031 
1032     \overload
1033 
1034     The postfix ++ operator, \c{i++}, advances the iterator to the
1035     next item in the object and returns an iterator to the previously
1036     current item.
1037 */
1038 
1039 /*! \fn QJsonObject::const_iterator &QJsonObject::const_iterator::operator--()
1040 
1041     The prefix -- operator, \c{--i}, makes the preceding item
1042     current and returns an iterator pointing to the new current item.
1043 
1044     Calling this function on QJsonObject::begin() leads to undefined
1045     results.
1046 
1047     \sa operator++()
1048 */
1049 
1050 /*! \fn QJsonObject::const_iterator QJsonObject::const_iterator::operator--(int)
1051 
1052     \overload
1053 
1054     The postfix -- operator, \c{i--}, makes the preceding item
1055     current and returns an iterator pointing to the previously
1056     current item.
1057 */
1058 
1059 /*! \fn QJsonObject::const_iterator QJsonObject::const_iterator::operator+(int j) const
1060 
1061     Returns an iterator to the item at \a j positions forward from
1062     this iterator. If \a j is negative, the iterator goes backward.
1063 
1064     This operation can be slow for large \a j values.
1065 
1066     \sa operator-()
1067 */
1068 
1069 /*! \fn QJsonObject::const_iterator QJsonObject::const_iterator::operator-(int j) const
1070 
1071     Returns an iterator to the item at \a j positions backward from
1072     this iterator. If \a j is negative, the iterator goes forward.
1073 
1074     This operation can be slow for large \a j values.
1075 
1076     \sa operator+()
1077 */
1078 
1079 /*! \fn QJsonObject::const_iterator &QJsonObject::const_iterator::operator+=(int j)
1080 
1081     Advances the iterator by \a j items. If \a j is negative, the
1082     iterator goes backward.
1083 
1084     This operation can be slow for large \a j values.
1085 
1086     \sa operator-=(), operator+()
1087 */
1088 
1089 /*! \fn QJsonObject::const_iterator &QJsonObject::const_iterator::operator-=(int j)
1090 
1091     Makes the iterator go back by \a j items. If \a j is negative,
1092     the iterator goes forward.
1093 
1094     This operation can be slow for large \a j values.
1095 
1096     \sa operator+=(), operator-()
1097 */
1098 
1099 
1100 /*!
1101     \internal
1102  */
1103 void QJsonObject::detach(uint reserve)
1104 {
1105     Q_UNUSED(reserve)
1106     Q_ASSERT(!reserve);
1107     detach2(reserve);
1108 }
1109 
1110 bool QJsonObject::detach2(uint reserve)
1111 {
1112     if (!o)
1113         return true;
1114     o = QCborContainerPrivate::detach(o.data(), reserve ? reserve * 2 : o->elements.length());
1115     return o;
1116 }
1117 
1118 /*!
1119     \internal
1120  */
1121 void QJsonObject::compact()
1122 {
1123     if (!o)
1124         return;
1125 
1126     detach2();
1127     o->compact(o->elements.length());
1128 }
1129 
1130 /*!
1131     \internal
1132  */
1133 QString QJsonObject::keyAt(int i) const
1134 {
1135     Q_ASSERT(o && i >= 0 && i * 2 < o->elements.length());
1136     return o->stringAt(i * 2);
1137 }
1138 
1139 /*!
1140     \internal
1141  */
1142 QJsonValue QJsonObject::valueAt(int i) const
1143 {
1144     if (!o || i < 0 || 2 * i + 1 >= o->elements.length())
1145         return QJsonValue(QJsonValue::Undefined);
1146 
1147     return o->valueAt(2 * i + 1).toJsonValue();
1148 }
1149 
1150 /*!
1151     \internal
1152  */
1153 void QJsonObject::setValueAt(int i, const QJsonValue &val)
1154 {
1155     Q_ASSERT(o && i >= 0 && 2 * i + 1 < o->elements.length());
1156     o->insertAt(2 * i + 1, QCborValue::fromJsonValue(val), QCborContainerPrivate::MoveContainer);
1157 }
1158 
1159 uint qHash(const QJsonObject &object, uint seed)
1160 {
1161     QtPrivate::QHashCombine hash;
1162     for (auto it = object.begin(), end = object.end(); it != end; ++it) {
1163         const QString key = it.key();
1164         const QJsonValue value = it.value();
1165         seed = hash(seed, std::pair<const QString&, const QJsonValue&>(key, value));
1166     }
1167     return seed;
1168 }
1169 
1170 #if !defined(QT_NO_DEBUG_STREAM) && !defined(QT_JSON_READONLY)
1171 QDebug operator<<(QDebug dbg, const QJsonObject &o)
1172 {
1173     QDebugStateSaver saver(dbg);
1174     if (!o.o) {
1175         dbg << "QJsonObject()";
1176         return dbg;
1177     }
1178     QByteArray json;
1179     QJsonPrivate::Writer::objectToJson(o.o.data(), json, 0, true);
1180     dbg.nospace() << "QJsonObject("
1181                   << json.constData() // print as utf-8 string without extra quotation marks
1182                   << ")";
1183     return dbg;
1184 }
1185 #endif
1186 
1187 #ifndef QT_NO_DATASTREAM
1188 QDataStream &operator<<(QDataStream &stream, const QJsonObject &object)
1189 {
1190     QJsonDocument doc{object};
1191     stream << doc.toJson(QJsonDocument::Compact);
1192     return stream;
1193 }
1194 
1195 QDataStream &operator>>(QDataStream &stream, QJsonObject &object)
1196 {
1197     QJsonDocument doc;
1198     stream >> doc;
1199     object = doc.object();
1200     return stream;
1201 }
1202 #endif
1203 
1204 QT_END_NAMESPACE
