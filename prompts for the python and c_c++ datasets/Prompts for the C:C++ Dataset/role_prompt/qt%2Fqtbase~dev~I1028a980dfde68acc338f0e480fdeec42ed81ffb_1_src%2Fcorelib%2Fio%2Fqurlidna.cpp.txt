I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Copyright (C) 2016 Intel Corporation.
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the QtCore module of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:LGPL$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU Lesser General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU Lesser
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
22 ** packaging of this file. Please review the following information to
23 ** ensure the GNU Lesser General Public License version 3 requirements
24 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
25 **
26 ** GNU General Public License Usage
27 ** Alternatively, this file may be used under the terms of the GNU
28 ** General Public License version 2.0 or (at your option) the GNU General
29 ** Public license version 3 or any later version approved by the KDE Free
30 ** Qt Foundation. The licenses are as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
32 ** included in the packaging of this file. Please review the following
33 ** information to ensure the GNU General Public License requirements will
34 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
35 ** https://www.gnu.org/licenses/gpl-3.0.html.
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 #include "qurl_p.h"
42 
43 #include <QtCore/qstringlist.h>
44 #include <QtCore/private/qnumeric_p.h>
45 #include <QtCore/private/qstringiterator_p.h>
46 #include <QtCore/private/qunicodetables_p.h>
47 
48 #include <algorithm>
49 
50 QT_BEGIN_NAMESPACE
51 
52 // needed by the punycode encoder/decoder
53 static const uint base = 36;
54 static const uint tmin = 1;
55 static const uint tmax = 26;
56 static const uint skew = 38;
57 static const uint damp = 700;
58 static const uint initial_bias = 72;
59 static const uint initial_n = 128;
60 
61 static constexpr uint MaxDomainLabelLength = 63;
62 
63 static inline uint encodeDigit(uint digit)
64 {
65   return digit + 22 + 75 * (digit < 26);
66 }
67 
68 static inline uint adapt(uint delta, uint numpoints, bool firsttime)
69 {
70     delta /= (firsttime ? damp : 2);
71     delta += (delta / numpoints);
72 
73     uint k = 0;
74     for (; delta > ((base - tmin) * tmax) / 2; k += base)
75         delta /= (base - tmin);
76 
77     return k + (((base - tmin + 1) * delta) / (delta + skew));
78 }
79 
80 static inline void appendEncode(QString *output, uint delta, uint bias)
81 {
82     uint qq;
83     uint k;
84     uint t;
85 
86     // insert the variable length delta integer.
87     for (qq = delta, k = base;; k += base) {
88         // stop generating digits when the threshold is
89         // detected.
90         t = (k <= bias) ? tmin : (k >= bias + tmax) ? tmax : k - bias;
91         if (qq < t) break;
92 
93         *output += QChar(encodeDigit(t + (qq - t) % (base - t)));
94         qq = (qq - t) / (base - t);
95     }
96 
97     *output += QChar(encodeDigit(qq));
98 }
99 
100 Q_AUTOTEST_EXPORT void qt_punycodeEncoder(QStringView in, QString *output)
101 {
102     uint n = initial_n;
103     uint delta = 0;
104     uint bias = initial_bias;
105 
106     // Do not try to encode strings that certainly will result in output
107     // that is longer than allowable domain name label length. Note that
108     // non-BMP codepoints are encoded as two QChars.
109     if (uint(in.length()) > MaxDomainLabelLength * 2)
110         return;
111 
112     int outLen = output->length();
113     output->resize(outLen + in.length());
114 
115     QChar *d = output->data() + outLen;
116     bool skipped = false;
117     // copy all basic code points verbatim to output.
118     for (QChar c : in) {
119         if (c.unicode() < 0x80)
120             *d++ = c;
121         else
122             skipped = true;
123     }
124 
125     // if there were only basic code points, just return them
126     // directly; don't do any encoding.
127     if (!skipped)
128         return;
129 
130     output->truncate(d - output->constData());
131     int copied = output->size() - outLen;
132 
133     // h and b now contain the number of basic code points in input.
134     uint b = copied;
135     uint h = copied;
136 
137     // if basic code points were copied, add the delimiter character.
138     if (h > 0)
139         *output += QLatin1Char{'-'};
140 
141     // compute the input length in Unicode code points.
142     uint inputLength = 0;
143     for (QStringIterator iter(in); iter.hasNext();) {
144         inputLength++;
145 
146         if (iter.next(char32_t(-1)) == char32_t(-1)) {
147             output->truncate(outLen);
148             return; // invalid surrogate pair
149         }
150     }
151 
152     // while there are still unprocessed non-basic code points left in
153     // the input string...
154     while (h < inputLength) {
155         // find the character in the input string with the lowest unprocessed value.
156         uint m = std::numeric_limits<uint>::max();
157         for (QStringIterator iter(in); iter.hasNext();) {
158             auto c = iter.nextUnchecked();
159             static_assert(std::numeric_limits<decltype(m)>::max()
160                                   >= std::numeric_limits<decltype(c)>::max(),
161                           "Punycode uint should be able to cover all codepoints");
162             if (c >= n && c < m)
163                 m = c;
164         }
165 
166         // delta = delta + (m - n) * (h + 1), fail on overflow
167         uint tmp;
168         if (mul_overflow<uint>(m - n, h + 1, &tmp) || add_overflow<uint>(delta, tmp, &delta)) {
169             output->truncate(outLen);
170             return; // punycode_overflow
171         }
172         n = m;
173 
174         for (QStringIterator iter(in); iter.hasNext();) {
175             auto c = iter.nextUnchecked();
176 
177             // increase delta until we reach the character processed in this iteration;
178             // fail if delta overflows.
179             if (c < n) {
180                 if (add_overflow<uint>(delta, 1, &delta)) {
181                     output->truncate(outLen);
182                     return; // punycode_overflow
183                 }
184             }
185 
186             if (c == n) {
187                 appendEncode(output, delta, bias);
188 
189                 bias = adapt(delta, h + 1, h == b);
190                 delta = 0;
191                 ++h;
192             }
193         }
194 
195         ++delta;
196         ++n;
197     }
198 
199     // prepend ACE prefix
200     output->insert(outLen, QLatin1String("xn--"));
201     return;
202 }
203 
204 Q_AUTOTEST_EXPORT QString qt_punycodeDecoder(const QString &pc)
205 {
206     uint n = initial_n;
207     uint i = 0;
208     uint bias = initial_bias;
209 
210     // Do not try to decode strings longer than allowable for a domain label.
211     // Non-ASCII strings are not allowed here anyway, so there is no need
212     // to account for surrogates.
213     if (uint(pc.length()) > MaxDomainLabelLength)
214         return QString();
215 
216     // strip any ACE prefix
217     int start = pc.startsWith(QLatin1String("xn--")) ? 4 : 0;
218     if (!start)
219         return pc;
220 
221     // find the last delimiter character '-' in the input array. copy
222     // all data before this delimiter directly to the output array.
223     int delimiterPos = pc.lastIndexOf(QLatin1Char{'-'});
224     auto output = delimiterPos < 4 ? std::u32string()
225                                    : pc.mid(start, delimiterPos - start).toStdU32String();
226 
227     // if a delimiter was found, skip to the position after it;
228     // otherwise start at the front of the input string. everything
229     // before the delimiter is assumed to be basic code points.
230     uint cnt = delimiterPos + 1;
231 
232     // loop through the rest of the input string, inserting non-basic
233     // characters into output as we go.
234     while (cnt < (uint) pc.size()) {
235         uint oldi = i;
236         uint w = 1;
237 
238         // find the next index for inserting a non-basic character.
239         for (uint k = base; cnt < (uint) pc.size(); k += base) {
240             // grab a character from the punycode input and find its
241             // delta digit (each digit code is part of the
242             // variable-length integer delta)
243             uint digit = pc.at(cnt++).unicode();
244             if (digit - 48 < 10) digit -= 22;
245             else if (digit - 65 < 26) digit -= 65;
246             else if (digit - 97 < 26) digit -= 97;
247             else digit = base;
248 
249             // Fail if the code point has no digit value
250             if (digit >= base)
251                 return QString();
252 
253             // i = i + digit * w, fail on overflow
254             uint tmp;
255             if (mul_overflow<uint>(digit, w, &tmp) || add_overflow<uint>(i, tmp, &i))
256                 return QString();
257 
258             // detect threshold to stop reading delta digits
259             uint t;
260             if (k <= bias) t = tmin;
261             else if (k >= bias + tmax) t = tmax;
262             else t = k - bias;
263 
264             if (digit < t) break;
265 
266             // w = w * (base - t), fail on overflow
267             if (mul_overflow<uint>(w, base - t, &w))
268                 return QString();
269         }
270 
271         // find new bias and calculate the next non-basic code
272         // character.
273         uint outputLength = static_cast<uint>(output.length());
274         bias = adapt(i - oldi, outputLength + 1, oldi == 0);
275 
276         // n = n + i div (length(output) + 1), fail on overflow
277         if (add_overflow<uint>(n, i / (outputLength + 1), &n))
278             return QString();
279 
280         // allow the deltas to wrap around
281         i %= (outputLength + 1);
282 
283         // if n is a basic code point then fail; this should not happen with
284         // correct implementation of Punycode, but check just n case.
285         if (n < initial_n) {
286             // Don't use Q_ASSERT() to avoid possibility of DoS
287             qWarning("Attempt to insert a basic codepoint. Unhandled overflow?");
288             return QString();
289         }
290 
291         // Surrogates should normally be rejected later by other IDNA code.
292         // But because of Qt's use of UTF-16 to represent strings the
293         // IDNA code is not able to distinguish characters represented as pairs
294         // of surrogates from normal code points. This is why surrogates are
295         // not allowed here.
296         //
297         // Allowing surrogates would lead to non-unique (after normalization)
298         // encoding of strings with non-BMP characters.
299         //
300         // Punycode that encodes characters outside the Unicode range is also
301         // invalid and is rejected here.
302         if (QChar::isSurrogate(n) || n > QChar::LastValidCodePoint)
303             return QString();
304 
305         // insert the character n at position i
306         output.insert(i, 1, static_cast<char32_t>(n));
307         ++i;
308     }
309 
310     return QString::fromStdU32String(output);
311 }
312 
313 static const char * const idn_whitelist[] = {
314     "ac", "ar", "asia", "at",
315     "biz", "br",
316     "cat", "ch", "cl", "cn", "com",
317     "de", "dk",
318     "es",
319     "fi",
320     "gr",
321     "hu",
322     "il", "info", "io", "is", "ir",
323     "jp",
324     "kr",
325     "li", "lt", "lu", "lv",
326     "museum",
327     "name", "net", "no", "nu", "nz",
328     "org",
329     "pl", "pr",
330     "se", "sh",
331     "tel", "th", "tm", "tw",
332     "ua",
333     "vn",
334     "xn--fiqs8s",               // China
335     "xn--fiqz9s",               // China
336     "xn--fzc2c9e2c",            // Sri Lanka
337     "xn--j6w193g",              // Hong Kong
338     "xn--kprw13d",              // Taiwan
339     "xn--kpry57d",              // Taiwan
340     "xn--mgba3a4f16a",          // Iran
341     "xn--mgba3a4fra",           // Iran
342     "xn--mgbaam7a8h",           // UAE
343     "xn--mgbayh7gpa",           // Jordan
344     "xn--mgberp4a5d4ar",        // Saudi Arabia
345     "xn--ogbpf8fl",             // Syria
346     "xn--p1ai",                 // Russian Federation
347     "xn--wgbh1c",               // Egypt
348     "xn--wgbl6a",               // Qatar
349     "xn--xkc2al3hye2a"          // Sri Lanka
350 };
351 static const size_t idn_whitelist_size = sizeof idn_whitelist / sizeof *idn_whitelist;
352 
353 static QStringList *user_idn_whitelist = nullptr;
354 
355 static bool lessThan(const QChar *a, int l, const char *c)
356 {
357     const ushort *uc = (const ushort *)a;
358     const ushort *e = uc + l;
359 
360     if (!c || *c == 0)
361         return false;
362 
363     while (*c) {
364         if (uc == e || *uc != *c)
365             break;
366         ++uc;
367         ++c;
368     }
369     return (uc == e ? *c : *uc < *c);
370 }
371 
372 static bool equal(const QChar *a, int l, const char *b)
373 {
374     while (l && a->unicode() && *b) {
375         if (*a != QLatin1Char(*b))
376             return false;
377         ++a;
378         ++b;
379         --l;
380     }
381     return l == 0;
382 }
383 
384 static bool qt_is_idn_enabled(QStringView aceDomain)
385 {
386     auto idx = aceDomain.lastIndexOf(QLatin1Char('.'));
387     if (idx == -1)
388         return false;
389 
390     auto tldString = aceDomain.mid(idx + 1);
391     const auto len = tldString.size();
392 
393     const QChar *tld = tldString.constData();
394 
395     if (user_idn_whitelist)
396         return user_idn_whitelist->contains(tldString);
397 
398     int l = 0;
399     int r = idn_whitelist_size - 1;
400     int i = (l + r + 1) / 2;
401 
402     while (r != l) {
403         if (lessThan(tld, len, idn_whitelist[i]))
404             r = i - 1;
405         else
406             l = i;
407         i = (l + r + 1) / 2;
408     }
409     return equal(tld, len, idn_whitelist[i]);
410 }
411 
412 template<typename C>
413 static inline bool isValidInNormalizedAsciiLabel(C c)
414 {
415     return c == u'-' || c == u'_' || (c >= u'0' && c <= u'9') || (c >= u'a' && c <= u'z');
416 }
417 
418 template<typename C>
419 static inline bool isValidInNormalizedAsciiName(C c)
420 {
421     return isValidInNormalizedAsciiLabel(c) || c == u'.';
422 }
423 
424 /*
425     Map domain name according to algorithm in UTS #46, 4.1
426 
427     Returns empty string if there are disallowed characters in the input.
428 
429     Sets resultIsAscii if the result is known for sure to be all ASCII.
430 */
431 static QString mapDomainName(const QString &in, QUrl::AceProcessingOptions options,
432                              bool *resultIsAscii)
433 {
434     *resultIsAscii = true;
435 
436     // Check if the input is already normalized ASCII first and can be returned as is.
437     int i = 0;
438     for (auto c : in) {
439         if (c.unicode() >= 0x80 || !isValidInNormalizedAsciiName(c))
440             break;
441         i++;
442     }
443 
444     if (i == in.size())
445         return in;
446 
447     QString result;
448     result.reserve(in.size());
449     result.append(in.constData(), i);
450     bool allAscii = true;
451 
452     for (QStringIterator iter(QStringView(in).sliced(i)); iter.hasNext();) {
453         char32_t uc = iter.next();
454 
455         // Fast path for ASCII-only inputs
456         if (Q_LIKELY(uc < 0x80)) {
457             if (uc >= U'A' && uc <= U'Z')
458                 uc |= 0x20; // lower-case it
459 
460             if (!isValidInNormalizedAsciiName(uc))
461                 return {};
462 
463             result.append(static_cast<char16_t>(uc));
464             continue;
465         }
466         allAscii = false;
467 
468         QUnicodeTables::IdnaStatus status = QUnicodeTables::idnaStatus(uc);
469 
470         if (status == QUnicodeTables::IdnaStatus::Deviation)
471             status = options.testFlag(QUrl::AceTransitionalProcessing)
472                     ? QUnicodeTables::IdnaStatus::Mapped
473                     : QUnicodeTables::IdnaStatus::Valid;
474 
475         switch (status) {
476         case QUnicodeTables::IdnaStatus::Ignored:
477             continue;
478         case QUnicodeTables::IdnaStatus::Valid:
479             for (auto c : QChar::fromUcs4(uc))
480                 result.append(c);
481             break;
482         case QUnicodeTables::IdnaStatus::Mapped:
483             result.append(QUnicodeTables::idnaMapping(uc));
484             break;
485         case QUnicodeTables::IdnaStatus::Disallowed:
486             return {};
487         default:
488             Q_UNREACHABLE();
489         }
490     }
491 
492     *resultIsAscii = allAscii;
493     return result;
494 }
495 
496 /*
497     Check the rules for an ASCII label.
498 
499     Check the size restriction and that the label does not start or end with dashes.
500 
501     The label should be nonempty.
502 */
503 static bool validateAsciiLabel(QStringView label)
504 {
505     if (uint(label.length()) > MaxDomainLabelLength)
506         return false;
507 
508     if (label.first() == u'-' || label.last() == u'-')
509         return false;
510 
511     return std::all_of(label.begin(), label.end(), isValidInNormalizedAsciiLabel<QChar>);
512 }
513 
514 namespace {
515 
516 class DomainValidityChecker
517 {
518     bool domainNameIsBidi = false;
519     bool hadBidiErrors = false;
520 
521     static constexpr char32_t ZWNJ = U'\u200C';
522     static constexpr char32_t ZWJ = U'\u200D';
523 
524 public:
525     DomainValidityChecker() { }
526     bool checkLabel(const QString &label, QUrl::AceProcessingOptions options);
527 
528 private:
529     static bool checkContextJRules(QStringView label);
530     static bool checkBidiRules(QStringView label);
531 };
532 
533 } // anonymous namespace
534 
535 /*
536     Check CONTEXTJ rules accroding to RFC 5892, appendix A.1 & A.2.
537 
538     Rule Set for U+200C (ZWNJ):
539 
540       False;
541 
542       If Canonical_Combining_Class(Before(cp)) .eq.  Virama Then True;
543 
544       If RegExpMatch((Joining_Type:{L,D})(Joining_Type:T)*\u200C
545 
546          (Joining_Type:T)*(Joining_Type:{R,D})) Then True;
547 
548     Rule Set for U+200D (ZWJ):
549 
550       False;
551 
552       If Canonical_Combining_Class(Before(cp)) .eq.  Virama Then True;
553 
554 */
555 bool DomainValidityChecker::checkContextJRules(QStringView label)
556 {
557     constexpr unsigned char CombiningClassVirama = 9;
558 
559     enum class State {
560         Initial,
561         LD_T, // L,D with possible following T*
562         ZWNJ_T, // ZWNJ with possible following T*
563     };
564     State regexpState = State::Initial;
565     bool previousIsVirama = false;
566 
567     for (QStringIterator iter(label); iter.hasNext();) {
568         auto ch = iter.next();
569 
570         if (ch == ZWJ) {
571             if (!previousIsVirama)
572                 return false;
573             regexpState = State::Initial;
574         } else if (ch == ZWNJ) {
575             if (!previousIsVirama && regexpState != State::LD_T)
576                 return false;
577             regexpState = previousIsVirama ? State::Initial : State::ZWNJ_T;
578         } else {
579             switch (QChar::joiningType(ch)) {
580             case QChar::Joining_Left:
581                 if (regexpState == State::ZWNJ_T)
582                     return false;
583                 regexpState = State::LD_T;
584                 break;
585             case QChar::Joining_Right:
586                 regexpState = State::Initial;
587                 break;
588             case QChar::Joining_Dual:
589                 regexpState = State::LD_T;
590                 break;
591             case QChar::Joining_Transparent:
592                 break;
593             default:
594                 regexpState = State::Initial;
595                 break;
596             }
597         }
598 
599         previousIsVirama = QChar::combiningClass(ch) == CombiningClassVirama;
600     }
601 
602     return regexpState != State::ZWNJ_T;
603 }
604 
605 /*
606     Check if the label conforms to BiDi rule of RFC 5893.
607 
608     1.  The first character must be a character with Bidi property L, R,
609         or AL.  If it has the R or AL property, it is an RTL label; if it
610         has the L property, it is an LTR label.
611 
612     2.  In an RTL label, only characters with the Bidi properties R, AL,
613         AN, EN, ES, CS, ET, ON, BN, or NSM are allowed.
614 
615     3.  In an RTL label, the end of the label must be a character with
616         Bidi property R, AL, EN, or AN, followed by zero or more
617         characters with Bidi property NSM.
618 
619     4.  In an RTL label, if an EN is present, no AN may be present, and
620         vice versa.
621 
622     5.  In an LTR label, only characters with the Bidi properties L, EN,
623         ES, CS, ET, ON, BN, or NSM are allowed.
624 
625     6.  In an LTR label, the end of the label must be a character with
626         Bidi property L or EN, followed by zero or more characters with
627         Bidi property NSM.
628 */
629 bool DomainValidityChecker::checkBidiRules(QStringView label)
630 {
631     if (label.isEmpty())
632         return true;
633 
634     QStringIterator iter(label);
635     Q_ASSERT(iter.hasNext());
636 
637     char32_t ch = iter.next();
638     bool labelIsRTL = false;
639 
640     switch (QChar::direction(ch)) {
641     case QChar::DirL:
642         break;
643     case QChar::DirR:
644     case QChar::DirAL:
645         labelIsRTL = true;
646         break;
647     default:
648         return false;
649     }
650 
651     bool tailOk = true;
652     bool labelHasEN = false;
653     bool labelHasAN = false;
654 
655     while (iter.hasNext()) {
656         ch = iter.next();
657 
658         switch (QChar::direction(ch)) {
659         case QChar::DirR:
660         case QChar::DirAL:
661             if (!labelIsRTL)
662                 return false;
663             tailOk = true;
664             break;
665 
666         case QChar::DirL:
667             if (labelIsRTL)
668                 return false;
669             tailOk = true;
670             break;
671 
672         case QChar::DirES:
673         case QChar::DirCS:
674         case QChar::DirET:
675         case QChar::DirON:
676         case QChar::DirBN:
677             tailOk = false;
678             break;
679 
680         case QChar::DirNSM:
681             break;
682 
683         case QChar::DirAN:
684             if (labelIsRTL) {
685                 if (labelHasEN)
686                     return false;
687                 labelHasAN = true;
688                 tailOk = true;
689             } else {
690                 return false;
691             }
692             break;
693 
694         case QChar::DirEN:
695             if (labelIsRTL) {
696                 if (labelHasAN)
697                     return false;
698                 labelHasEN = true;
699             }
700             tailOk = true;
701             break;
702 
703         default:
704             return false;
705         }
706     }
707 
708     return tailOk;
709 }
710 
711 /*
712     Check if the given label is valid according to UTS #46 validity criteria.
713 
714     NFC check can be skipped if the label was transformed to NFC before calling
715     this function (as optimization).
716 
717     The domain name is considered invalid if this function returns false at least
718     once.
719 
720     1. The label must be in Unicode Normalization Form NFC.
721     2. If CheckHyphens, the label must not contain a U+002D HYPHEN-MINUS character
722        in both the third and fourth positions.
723     3. If CheckHyphens, the label must neither begin nor end with a U+002D HYPHEN-MINUS character.
724     4. The label must not contain a U+002E ( . ) FULL STOP.
725     5. The label must not begin with a combining mark, that is: General_Category=Mark.
726     6. Each code point in the label must only have certain status values according to Section 5,
727        IDNA Mapping Table:
728         1. For Transitional Processing, each value must be valid.
729         2. For Nontransitional Processing, each value must be either valid or deviation.
730     7. If CheckJoiners, the label must satisfy the ContextJ rules from Appendix A, in The Unicode
731        Code Points and Internationalized Domain Names for Applications (IDNA).
732     8. If CheckBidi, and if the domain name is a  Bidi domain name, then the label must satisfy
733        all six of the numbered conditions in RFC 5893, Section 2.
734 
735     NOTE: Don't use QStringView for label, so that call to QString::normalized() can avoid
736           memory allocation when there is nothing to normalize.
737 */
738 bool DomainValidityChecker::checkLabel(const QString &label, QUrl::AceProcessingOptions options)
739 {
740     if (label.isEmpty())
741         return true;
742 
743     if (label != label.normalized(QString::NormalizationForm_C))
744         return false;
745 
746     if (label.length() >= 4) {
747         // This assumes that the first two characters are in BMP, but that's ok
748         // because non-BMP characters are unlikely to be used for specifying
749         // future extensions.
750         if (label[2] == QLatin1Char('-') && label[3] == QLatin1Char('-'))
751             return false;
752     }
753 
754     if (label.startsWith(QLatin1Char('-')) || label.endsWith(QLatin1Char('-')))
755         return false;
756 
757     if (label.contains(QLatin1Char('.')))
758         return false;
759 
760     QStringIterator iter(label);
761     auto c = iter.next();
762 
763     if (QChar::isMark(c))
764         return false;
765 
766     // As optimization, CONTEXTJ rules check can be skipped if no
767     // ZWJ/ZWNJ characters were found during the first pass.
768     bool hasJoiners = false;
769 
770     for (;;) {
771         hasJoiners = hasJoiners || c == ZWNJ || c == ZWJ;
772 
773         if (!domainNameIsBidi) {
774             switch (QChar::direction(c)) {
775             case QChar::DirR:
776             case QChar::DirAL:
777             case QChar::DirAN:
778                 domainNameIsBidi = true;
779                 if (hadBidiErrors)
780                     return false;
781                 break;
782             default:
783                 break;
784             }
785         }
786 
787         switch (QUnicodeTables::idnaStatus(c)) {
788         case QUnicodeTables::IdnaStatus::Valid:
789             break;
790         case QUnicodeTables::IdnaStatus::Deviation:
791             if (options.testFlag(QUrl::AceTransitionalProcessing))
792                 return false;
793             break;
794         default:
795             return false;
796         }
797 
798         if (!iter.hasNext())
799             break;
800         c = iter.next();
801     }
802 
803     if (hasJoiners && !checkContextJRules(label))
804         return false;
805 
806     hadBidiErrors = hadBidiErrors || !checkBidiRules(label);
807 
808     if (domainNameIsBidi && hadBidiErrors)
809         return false;
810 
811     return true;
812 }
813 
814 static QString convertToAscii(const QString &normalizedDomain, AceLeadingDot dot)
815 {
816     qsizetype lastIdx = 0;
817     QString aceForm; // this variable is here for caching
818     QString aceResult;
819 
820     while (true) {
821         auto idx = normalizedDomain.indexOf(u'.', lastIdx);
822         if (idx == -1)
823             idx = normalizedDomain.size();
824 
825         const auto labelLength = idx - lastIdx;
826         if (labelLength == 0) {
827             if (idx == normalizedDomain.size())
828                 break;
829             if (dot == ForbidLeadingDot || idx > 0)
830                 return {}; // two delimiters in a row -- empty label not allowed
831         } else {
832             const auto label = QStringView(normalizedDomain).sliced(lastIdx, labelLength);
833             aceForm.clear();
834             qt_punycodeEncoder(label, &aceForm);
835             if (aceForm.isEmpty())
836                 return {};
837 
838             aceResult.append(aceForm);
839         }
840 
841         if (idx == normalizedDomain.size())
842             break;
843 
844         lastIdx = idx + 1;
845         aceResult += u'.';
846     }
847 
848     return aceResult;
849 }
850 
851 static bool checkAsciiDomainName(const QString &normalizedDomain, AceLeadingDot dot,
852                                  bool *usesPunycode)
853 {
854     qsizetype lastIdx = 0;
855     bool hasPunycode = false;
856     *usesPunycode = false;
857 
858     while (lastIdx < normalizedDomain.size()) {
859         auto idx = normalizedDomain.indexOf(u'.', lastIdx);
860         if (idx == -1)
861             idx = normalizedDomain.size();
862 
863         const auto labelLength = idx - lastIdx;
864         if (labelLength == 0) {
865             if (idx == normalizedDomain.size())
866                 break;
867             if (dot == ForbidLeadingDot || idx > 0)
868                 return false; // two delimiters in a row -- empty label not allowed
869         } else {
870             const auto label = QStringView(normalizedDomain).sliced(lastIdx, labelLength);
871             if (!validateAsciiLabel(label))
872                 return false;
873 
874             hasPunycode = hasPunycode || label.startsWith(QLatin1String("xn--"));
875         }
876 
877         lastIdx = idx + 1;
878     }
879 
880     *usesPunycode = hasPunycode;
881     return true;
882 }
883 
884 static QString convertToUnicode(const QString &asciiDomain, QUrl::AceProcessingOptions options)
885 {
886     QString result;
887     result.reserve(asciiDomain.size());
888     qsizetype lastIdx = 0;
889 
890     DomainValidityChecker checker;
891 
892     while (true) {
893         auto idx = asciiDomain.indexOf(u'.', lastIdx);
894         if (idx == -1)
895             idx = asciiDomain.size();
896 
897         const auto labelLength = idx - lastIdx;
898         if (labelLength == 0) {
899             if (idx == asciiDomain.size())
900                 break;
901         } else {
902             const auto label = asciiDomain.sliced(lastIdx, labelLength);
903             const auto unicodeLabel = qt_punycodeDecoder(label);
904 
905             if (unicodeLabel.isEmpty())
906                 return asciiDomain;
907 
908             if (!checker.checkLabel(unicodeLabel, options))
909                 return asciiDomain;
910 
911             result.append(unicodeLabel);
912         }
913 
914         if (idx == asciiDomain.size())
915             break;
916 
917         lastIdx = idx + 1;
918         result += u'.';
919     }
920     return result;
921 }
922 
923 QString qt_ACE_do(const QString &domain, AceOperation op, AceLeadingDot dot,
924                   QUrl::AceProcessingOptions options)
925 {
926     if (domain.isEmpty())
927         return {};
928 
929     bool mappedToAscii;
930     const QString mapped = mapDomainName(domain, options, &mappedToAscii);
931     const QString normalized =
932             mappedToAscii ? mapped : mapped.normalized(QString::NormalizationForm_C);
933 
934     if (normalized.isEmpty())
935         return {};
936 
937     bool needsCoversionToUnicode;
938     const QString aceResult = mappedToAscii ? normalized : convertToAscii(normalized, dot);
939     if (aceResult.isEmpty() || !checkAsciiDomainName(aceResult, dot, &needsCoversionToUnicode))
940         return {};
941 
942     if (op == ToAceOnly || !needsCoversionToUnicode
943         || (!options.testFlag(QUrl::IgnoreIDNWhitelist) && !qt_is_idn_enabled(aceResult))) {
944         return aceResult;
945     }
946 
947     return convertToUnicode(aceResult, options);
948 }
949 
950 /*!
951     \since 4.2
952 
953     Returns the current whitelist of top-level domains that are allowed
954     to have non-ASCII characters in their compositions.
955 
956     See setIdnWhitelist() for the rationale of this list.
957 
958     \sa AceProcessingOption
959 */
960 QStringList QUrl::idnWhitelist()
961 {
962     if (user_idn_whitelist)
963         return *user_idn_whitelist;
964     static const QStringList list = [] {
965         QStringList list;
966         list.reserve(idn_whitelist_size);
967         unsigned int i = 0;
968         while (i < idn_whitelist_size) {
969             list << QLatin1String(idn_whitelist[i]);
970             ++i;
971         }
972         return list;
973     }();
974     return list;
975 }
976 
977 /*!
978     \since 4.2
979 
980     Sets the whitelist of Top-Level Domains (TLDs) that are allowed to have
981     non-ASCII characters in domains to the value of \a list.
982 
983     Note that if you call this function, you need to do so \e before
984     you start any threads that might access idnWhitelist().
985 
986     Qt comes with a default list that contains the Internet top-level domains
987     that have published support for Internationalized Domain Names (IDNs)
988     and rules to guarantee that no deception can happen between similarly-looking
989     characters (such as the Latin lowercase letter \c 'a' and the Cyrillic
990     equivalent, which in most fonts are visually identical).
991 
992     This list is periodically maintained, as registrars publish new rules.
993 
994     This function is provided for those who need to manipulate the list, in
995     order to add or remove a TLD. It is not recommended to change its value
996     for purposes other than testing, as it may expose users to security risks.
997 */
998 void QUrl::setIdnWhitelist(const QStringList &list)
999 {
1000     if (!user_idn_whitelist)
1001         user_idn_whitelist = new QStringList;
1002     *user_idn_whitelist = list;
1003 }
1004 
1005 QT_END_NAMESPACE
