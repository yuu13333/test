I want you to act as a code reviewer of Qt Creator in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2021 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "androidavdmanager.h"
27 #include "androiddevice.h"
28 #include "androiddeviceinfo.h"
29 #include "androidglobal.h"
30 #include "androidmanager.h"
31 #include "androidqmlpreviewworker.h"
32 
33 #include <coreplugin/icore.h>
34 #include <projectexplorer/buildsystem.h>
35 #include <projectexplorer/kit.h>
36 #include <projectexplorer/project.h>
37 #include <projectexplorer/target.h>
38 #include <qmlprojectmanager/qmlprojectconstants.h>
39 #include <qmlprojectmanager/qmlprojectmanagerconstants.h>
40 #include <qtsupport/baseqtversion.h>
41 #include <qtsupport/qtkitinformation.h>
42 
43 #include <QThread>
44 #include <QTemporaryDir>
45 #include <QImageReader>
46 #include <QtConcurrent>
47 
48 namespace Android {
49 namespace Internal {
50 
51 using namespace Utils;
52 
53 #define APP_ID "io.qt.designviewer"
54 
55 class ApkInfo {
56 public:
57     ApkInfo();
58     const QStringList abis;
59     const QString appId;
60     const QString uploadDir;
61     const QString activityId;
62     const QString name;
63 };
64 
65 ApkInfo::ApkInfo() :
66     abis({ProjectExplorer::Constants::ANDROID_ABI_X86,
67             ProjectExplorer::Constants::ANDROID_ABI_X86_64,
68             ProjectExplorer::Constants::ANDROID_ABI_ARM64_V8A,
69             ProjectExplorer::Constants::ANDROID_ABI_ARMEABI_V7A}),
70     appId(APP_ID),
71     uploadDir("/data/local/tmp/" APP_ID "/"),
72     activityId(APP_ID "/org.qtproject.qt5.android.bindings.QtActivity"),
73     name("Qt Design Viewer")
74 {
75 }
76 
77 Q_GLOBAL_STATIC(ApkInfo, apkInfo)
78 
79 const char packageSuffix[] = ".qmlrc";
80 
81 static inline bool isMainThread()
82 {
83     return QCoreApplication::instance()->thread() == QThread::currentThread();
84 }
85 
86 static FilePath viewerApkPath(const QString &avdAbi)
87 {
88     if (avdAbi.isEmpty())
89         return {};
90 
91     if (apkInfo()->abis.contains(avdAbi))
92         return Core::ICore::resourcePath(QString("android/qtdesignviewer/designviewer_%1.apk").
93                                          arg(avdAbi));
94     return {};
95 }
96 
97 static SdkToolResult runAdbCommandAsyncAndWait(const QString &dev, const QStringList &arguments)
98 {
99     QStringList args;
100     if (!dev.isEmpty())
101         args << AndroidDeviceInfo::adbSelector(dev);
102     args << arguments;
103     QFuture<SdkToolResult> asyncResult = QtConcurrent::run([args] {
104         return AndroidManager::runAdbCommand(args);});
105 
106     while (asyncResult.isRunning()) {
107         QCoreApplication::instance()->processEvents(QEventLoop::AllEvents, 100);
108     }
109     return asyncResult.result();
110 }
111 
112 static SdkToolResult runAdbCommand(const QString &dev, const QStringList &arguments)
113 {
114     if (isMainThread())
115         return runAdbCommandAsyncAndWait(dev, arguments);
116     QStringList args;
117     if (!dev.isEmpty())
118         args << AndroidDeviceInfo::adbSelector(dev);
119     args << arguments;
120     return AndroidManager::runAdbCommand(args);
121 }
122 
123 static SdkToolResult runAdbShellCommand(const QString &dev, const QStringList &arguments)
124 {
125     const QStringList shellCmd{"shell"};
126     return runAdbCommand(dev, shellCmd + arguments);
127 }
128 
129 static QString startAvd(const AndroidAvdManager &avd, const QString &name)
130 {
131     QFuture<QString> asyncRes = QtConcurrent::run([avd, name] {
132         return avd.startAvd(name);
133     });
134     while (asyncRes.isRunning())
135         QCoreApplication::instance()->processEvents(QEventLoop::AllEvents, 100);
136     return asyncRes.result();
137 }
138 
139 static int pidofPreview(const QString &dev)
140 {
141     const QStringList command{"pidof", apkInfo()->appId};
142     const SdkToolResult res = runAdbShellCommand(dev, command);
143     return res.success() ? res.stdOut().toInt() : -1;
144 }
145 
146 static bool isPreviewRunning(const QString &dev, int lastKnownPid = -1)
147 {
148     const int pid = pidofPreview(dev);
149     return (lastKnownPid > 1) ? lastKnownPid == pid : pid > 1;
150 }
151 
152 AndroidQmlPreviewWorker::AndroidQmlPreviewWorker(ProjectExplorer::RunControl *runControl)
153     : ProjectExplorer::RunWorker(runControl)
154     , m_rc(runControl)
155     , m_config(AndroidConfigurations::currentConfig())
156 {
157 }
158 
159 QStringList filterAppLog(const QStringList& oldList, const QStringList& newList)
160 {
161     QStringList list = Utils::filtered(newList,
162                                        [](const auto & arg){return arg.contains(apkInfo()->name);});
163     for (const auto &oldEntry : oldList) {
164         list.removeAll(oldEntry);
165     }
166     return list;
167 }
168 
169 void AndroidQmlPreviewWorker::start()
170 {
171     UploadInfo transfer;
172     const bool res = ensureAvdIsRunning()
173                      && checkAndInstallPreviewApp()
174                      && prepareUpload(transfer)
175                      && uploadFiles(transfer)
176                      && runPreviewApp(transfer);
177 
178     if (!res) {
179         reportFailure();
180         return;
181     }
182     reportStarted();
183     //Thread to monitor preview life
184     QtConcurrent::run([this]() {
185         QElapsedTimer timer;
186         timer.start();
187         while (runControl() && runControl()->isRunning()) {
188             if (m_viewerPid == -1) {
189                 m_viewerPid = pidofPreview(m_devInfo.serialNumber);
190                 if (m_viewerPid > 0)
191                     QMetaObject::invokeMethod(this, &AndroidQmlPreviewWorker::startLogcat);
192             } else if (timer.elapsed() > 2000) {
193                 //Get the application output
194                 if (!isPreviewRunning(m_devInfo.serialNumber, m_viewerPid))
195                     QMetaObject::invokeMethod(this, &AndroidQmlPreviewWorker::stop);
196 
197                 timer.restart();
198             }
199             QThread::msleep(100);
200         }
201     });
202 }
203 
204 void AndroidQmlPreviewWorker::startLogcat()
205 {
206     QtConcurrent::run([this]() {
207         QElapsedTimer timer;
208         timer.start();
209         int initialPid = m_viewerPid; // to check if our initial process is still alive
210         QStringList logLines;
211         auto appendLogLinesCall = [&logLines, this](){ appendLogLines(logLines); };
212         auto runCondition = [this, initialPid](){ return (runControl() && runControl()->isRunning())
213                                                           && initialPid == m_viewerPid;};
214         QString timeFilter;
215         while (runCondition()) {
216             if (timer.elapsed() > 2000) {
217                 //Get the application output
218                 QStringList logcatCmd = {"logcat", QString("--pid=%1").arg(initialPid), "-t"};
219                 if (!timeFilter.isEmpty())
220                     logcatCmd.append(QString("%1").arg(timeFilter));
221                 else
222                     logcatCmd.append(QString("1000")); //show last 1000 lines (but for the 1st time)
223 
224                 const SdkToolResult logcatResult = runAdbCommand(m_devInfo.serialNumber, logcatCmd);
225                 if (runCondition()) {
226                     const QStringList output = logcatResult.stdOut().split('\n');
227                     const QStringList filtered = filterAppLog(logLines, output);
228 
229                     if (!filtered.isEmpty()){
230                         const QString lastLine = filtered.last();
231                         timeFilter = lastLine.left(lastLine.indexOf(" ", lastLine.indexOf(" ") + 1));
232                         QMetaObject::invokeMethod(this, appendLogLinesCall);
233                         logLines = filtered;
234                     }
235                 }
236                 timer.restart();
237             }
238             QThread::msleep(100);
239         }
240     });
241 }
242 
243 void AndroidQmlPreviewWorker::stop()
244 {
245     if (!isPreviewRunning(m_devInfo.serialNumber, m_viewerPid) || stopPreviewApp())
246         appendMessage(tr("%1 has been stopped.").arg(apkInfo()->name), NormalMessageFormat);
247     m_viewerPid = -1;
248     reportStopped();
249 }
250 
251 bool AndroidQmlPreviewWorker::ensureAvdIsRunning()
252 {
253     AndroidAvdManager avdMan(m_config);
254     QString devSN = AndroidManager::deviceSerialNumber(m_rc->target());
255 
256     if (devSN.isEmpty())
257         devSN = m_devInfo.serialNumber;
258 
259     if (!avdMan.isAvdBooted(devSN)) {
260         m_devInfo = {};
261         int minTargetApi = AndroidManager::minimumSDK(m_rc->target());
262         AndroidDeviceInfo devInfoLocal = AndroidConfigurations::showDeviceDialog(m_rc->project(),
263                                                                                  minTargetApi,
264                                                                                  apkInfo()->abis);
265         if (devInfoLocal.isValid()) {
266             if (devInfoLocal.type == AndroidDeviceInfo::Emulator) {
267                 appendMessage(tr("Launching AVD."), NormalMessageFormat);
268                 devInfoLocal.serialNumber = startAvd(avdMan, devInfoLocal.avdname);
269             }
270             if (devInfoLocal.serialNumber.isEmpty()) {
271                 appendMessage(tr("Could not run AVD."), ErrorMessageFormat);
272             } else {
273                 m_devInfo = devInfoLocal;
274                 m_avdAbis = m_config.getAbis(m_config.adbToolPath(), m_devInfo.serialNumber);
275             }
276             return !devInfoLocal.serialNumber.isEmpty();
277         } else {
278             appendMessage(tr("No valid AVD has been selected."), ErrorMessageFormat);
279         }
280         return false;
281     }
282     m_avdAbis = m_config.getAbis(m_config.adbToolPath(), m_devInfo.serialNumber);
283     return true;
284 }
285 
286 bool AndroidQmlPreviewWorker::checkAndInstallPreviewApp()
287 {
288     const QStringList command {"pm", "list", "packages", apkInfo()->appId};
289     appendMessage(tr("Checking if %1 app is installed.").arg(apkInfo()->name), NormalMessageFormat);
290     const SdkToolResult res = runAdbShellCommand(m_devInfo.serialNumber, command);
291     if (!res.success()) {
292         appendMessage(res.stdErr(), ErrorMessageFormat);
293         return false;
294     }
295 
296     if (res.stdOut().isEmpty()) {
297         if (m_avdAbis.isEmpty()) {
298             appendMessage(tr("ABI of the selected device is unknown. Cannot install APK."),
299                           ErrorMessageFormat);
300             return false;
301         }
302         const FilePath apkPath = viewerApkPath(m_avdAbis.first());
303         if (!apkPath.exists()) {
304             appendMessage(tr("Cannot install %1 app for %2 architecture. "
305                              "The appropriate APK was not found in resources folders.").
306                           arg(apkInfo()->name, m_avdAbis.first()), ErrorMessageFormat);
307             return false;
308         }
309 
310         appendMessage(tr("Installing %1 APK.").arg(apkInfo()->name), NormalMessageFormat);
311 
312 
313         const SdkToolResult res = runAdbCommand(m_devInfo.serialNumber, {"install",
314                                                                          apkPath.toString()});
315         if (!res.success()) {
316             appendMessage(res.stdErr(), StdErrFormat);
317 
318             return false;
319         }
320     }
321     return true;
322 }
323 
324 bool AndroidQmlPreviewWorker::prepareUpload(UploadInfo &transfer)
325 {
326     if (m_rc->project()->id() == QmlProjectManager::Constants::QML_PROJECT_ID) {
327         const auto bs = m_rc->target()->buildSystem();
328         if (bs) {
329             transfer.uploadPackage = FilePath::fromString(
330                 bs->additionalData(QmlProjectManager::Constants::mainFilePath).toString());
331             transfer.projectFolder = bs->projectDirectory();
332             return true;
333         }
334     } else {
335         const FilePaths allFiles = m_rc->project()->files(m_rc->project()->SourceFiles);
336         const FilePaths filesToExport = Utils::filtered(allFiles,[](const FilePath &path) {
337             return path.suffix() == "qmlproject";});
338 
339         if (filesToExport.size() > 1) {
340             appendMessage(tr("Too many .qmlproject files in your project. Open directly the "
341                              ".qmlproject file you want to work with and then run the preview."),
342                           ErrorMessageFormat);
343         } else if (filesToExport.size() < 1) {
344             appendMessage(tr("No .qmlproject file found among project files."), ErrorMessageFormat);
345         } else {
346             const FilePath qmlprojectFile = filesToExport.first();
347             transfer.uploadPackage = transfer.
348                                    projectFolder.
349                                    resolvePath(qmlprojectFile.fileName());
350             transfer.projectFolder = qmlprojectFile.parentDir();
351             return true;
352         }
353     }
354     appendMessage(tr("Could not gather information on project files."), ErrorMessageFormat);
355     return false;
356 }
357 
358 FilePath AndroidQmlPreviewWorker::createQmlrcFile(const FilePath &workFolder,
359                                                   const QString &basename)
360 {
361     const QtSupport::BaseQtVersion *qtVersion = QtSupport::QtKitAspect::qtVersion(m_rc->kit());
362     const FilePath rccBinary = qtVersion->rccFilePath();
363     QtcProcess rccProcess;
364     FilePath qrcPath = FilePath::fromString(basename) + ".qrc4viewer";
365     const FilePath qmlrcPath = FilePath::fromString(QDir::tempPath() + "/" + basename +
366                                                     packageSuffix);
367 
368     rccProcess.setWorkingDirectory(workFolder);
369 
370     const QStringList arguments[2] = {{"--project", "--output", qrcPath.fileName()},
371                                       {"--binary", "--output", qmlrcPath.path(),
372                                        qrcPath.fileName()}};
373     for (const auto &arguments : arguments) {
374         rccProcess.setCommand({rccBinary, arguments});
375         rccProcess.start();
376         if (!rccProcess.waitForStarted()) {
377             appendMessage(tr("Could not create file for %1 \"%2\"").
378                           arg(apkInfo()->name, rccProcess.commandLine().toUserOutput()),
379                           StdErrFormat);
380             qrcPath.removeFile();
381             return {};
382         }
383         QByteArray stdOut;
384         QByteArray stdErr;
385         if (!rccProcess.readDataFromProcess(30, &stdOut, &stdErr, true)) {
386             rccProcess.stopProcess();
387             appendMessage(tr("A timeout occurred running \"%1\"").
388                           arg(rccProcess.commandLine().toUserOutput()), StdErrFormat);
389             qrcPath.removeFile();
390             return {};
391         }
392         if (!stdOut.trimmed().isEmpty())
393             appendMessage(QString::fromLocal8Bit(stdOut), StdErrFormat);
394 
395         if (!stdErr.trimmed().isEmpty())
396             appendMessage(QString::fromLocal8Bit(stdErr), StdErrFormat);
397 
398         if (rccProcess.exitStatus() != QProcess::NormalExit) {
399             appendMessage(tr("Crash while creating file for %1 \"%2\"").
400                           arg(apkInfo()->name, rccProcess.commandLine().toUserOutput()),
401                           StdErrFormat);
402             qrcPath.removeFile();
403             return {};
404         }
405         if (rccProcess.exitCode() != 0) {
406             appendMessage(tr("Creating file for %1 failed. \"%2\" (exit code %3).").
407                           arg(apkInfo()->name).
408                           arg(rccProcess.commandLine().toUserOutput()).
409                           arg(rccProcess.exitCode()),
410 
411                           StdErrFormat);
412             qrcPath.removeFile();
413             return {};
414         }
415     }
416     return qmlrcPath;
417 }
418 
419 bool AndroidQmlPreviewWorker::uploadFiles(const UploadInfo &transfer)
420 {
421     appendMessage(tr("Uploading files."), NormalMessageFormat);
422 
423     const FilePath qresPath = createQmlrcFile(FilePath::fromString(transfer.projectFolder.path()),
424                                               transfer.uploadPackage.baseName());
425     if (!qresPath.exists())
426         return false;
427 
428     runAdbShellCommand(m_devInfo.serialNumber, {"mkdir", "-p", apkInfo()->uploadDir});
429 
430     const SdkToolResult res = runAdbCommand(m_devInfo.serialNumber,
431                                       {"push", qresPath.resolvePath(QString()).toString(),
432                                        apkInfo()->uploadDir});
433     if (!res.success()) {
434         appendMessage(res.stdOut(), ErrorMessageFormat);
435         if (res.stdOut().contains("Permission denied"))
436             appendMessage("'Permission denied' error detected. Try restarting your device "
437                           "and then running the preview.", NormalMessageFormat);
438     }
439     qresPath.removeFile();
440     return res.success();
441 }
442 
443 bool AndroidQmlPreviewWorker::runPreviewApp(const UploadInfo &transfer)
444 {
445     stopPreviewApp();
446     appendMessage(tr("Starting %1.").arg(apkInfo()->name), NormalMessageFormat);
447     const QDir destDir(apkInfo()->uploadDir);
448     const QStringList command{"am", "start",
449                               "-n", apkInfo()->activityId,
450                               "-e", "extraappparams",
451                               QString::fromLatin1(
452                                   destDir.filePath(transfer.uploadPackage.baseName() + packageSuffix).
453                                   toUtf8().
454                                   toBase64())};
455     const SdkToolResult res = runAdbShellCommand(m_devInfo.serialNumber, command);
456     if (!res.success()) {
457         appendMessage(res.stdErr(), ErrorMessageFormat);
458         return res.success();
459     }
460     appendMessage(tr("%1 is running.").arg(apkInfo()->name), NormalMessageFormat);
461     m_viewerPid = pidofPreview(m_devInfo.serialNumber);
462     return true;
463 }
464 
465 bool AndroidQmlPreviewWorker::stopPreviewApp()
466 {
467     const QStringList command{"am", "force-stop", apkInfo()->appId};
468     const SdkToolResult res = runAdbShellCommand(m_devInfo.serialNumber, command);
469     if (!res.success()) {
470         appendMessage(res.stdErr(), ErrorMessageFormat);
471         return res.success();
472     }
473     return true;
474 }
475 
476 void AndroidQmlPreviewWorker::appendLogLines(const QStringList & lines)
477 {
478     for (const QString& line : lines) {
479         const int charsToSkip = apkInfo()->name.length() + 2; // strlen(": ") == 2
480         const QString formatted = line.mid(line.indexOf(apkInfo()->name) + charsToSkip);
481         // TODO: See AndroidRunnerWorker::logcatProcess() - filtering for logs to decide format.
482         appendMessage(formatted, StdOutFormat);
483     }
484 }
485 
486 } // namespace Internal
487 } // namespace Android
