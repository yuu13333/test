I want you to act as a code reviewer of Qt Base in Qt. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "quuid.h"
41 
42 #include "qdatastream.h"
43 #include "qendian.h"
44 #include "qdebug.h"
45 #include "private/qtools_p.h"
46 
47 #ifndef QT_BOOTSTRAPPED
48 #include "qcryptographichash.h"
49 #endif
50 QT_BEGIN_NAMESPACE
51 
52 enum { MaxUuidLengthAsString = 38 };
53 
54 template <class Integral>
55 void _q_toHex(char *&dst, Integral value)
56 {
57     value = qToBigEndian(value);
58 
59     const char* p = reinterpret_cast<const char*>(&value);
60 
61     for (uint i = 0; i < sizeof(Integral); ++i, dst += 2) {
62         dst[0] = QtMiscUtils::toHexLower((p[i] >> 4) & 0xf);
63         dst[1] = QtMiscUtils::toHexLower(p[i] & 0xf);
64     }
65 }
66 
67 template <class Integral>
68 bool _q_fromHex(const char *&src, Integral &value)
69 {
70     value = 0;
71 
72     for (uint i = 0; i < sizeof(Integral) * 2; ++i) {
73         uint ch = *src++;
74         int tmp = QtMiscUtils::fromHex(ch);
75         if (tmp == -1)
76             return false;
77 
78         value = value * 16 + tmp;
79     }
80 
81     return true;
82 }
83 
84 static char *_q_uuidToHex(const QUuid &uuid, char *dst)
85 {
86     *dst++ = '{';
87     _q_toHex(dst, uuid.data1);
88     *dst++ = '-';
89     _q_toHex(dst, uuid.data2);
90     *dst++ = '-';
91     _q_toHex(dst, uuid.data3);
92     *dst++ = '-';
93     for (int i = 0; i < 2; i++)
94         _q_toHex(dst, uuid.data4[i]);
95     *dst++ = '-';
96     for (int i = 2; i < 8; i++)
97         _q_toHex(dst, uuid.data4[i]);
98     *dst++ = '}';
99     return dst;
100 }
101 
102 Q_NEVER_INLINE
103 static QUuid _q_uuidFromHex(const char *src)
104 {
105     uint d1;
106     ushort d2, d3;
107     uchar d4[8];
108 
109     if (*src == '{')
110         src++;
111     if (!_q_fromHex(src, d1)
112             || *src++ != '-'
113             || !_q_fromHex(src, d2)
114             || *src++ != '-'
115             || !_q_fromHex(src, d3)
116             || *src++ != '-'
117             || !_q_fromHex(src, d4[0])
118             || !_q_fromHex(src, d4[1])
119             || *src++ != '-'
120             || !_q_fromHex(src, d4[2])
121             || !_q_fromHex(src, d4[3])
122             || !_q_fromHex(src, d4[4])
123             || !_q_fromHex(src, d4[5])
124             || !_q_fromHex(src, d4[6])
125             || !_q_fromHex(src, d4[7])) {
126         return QUuid();
127     }
128 
129     return QUuid(d1, d2, d3, d4[0], d4[1], d4[2], d4[3], d4[4], d4[5], d4[6], d4[7]);
130 }
131 
132 #ifndef QT_BOOTSTRAPPED
133 static QUuid createFromName(const QUuid &ns, const QByteArray &baseData, QCryptographicHash::Algorithm algorithm, int version)
134 {
135     QByteArray hashResult;
136 
137     // create a scope so later resize won't reallocate
138     {
139         QCryptographicHash hash(algorithm);
140         hash.addData(ns.toRfc4122());
141         hash.addData(baseData);
142         hashResult = hash.result();
143     }
144     hashResult.resize(16); // Sha1 will be too long
145 
146     QUuid result = QUuid::fromRfc4122(hashResult);
147 
148     result.data3 &= 0x0FFF;
149     result.data3 |= (version << 12);
150     result.data4[0] &= 0x3F;
151     result.data4[0] |= 0x80;
152 
153     return result;
154 }
155 #endif
156 
157 /*!
158     \class QUuid
159     \inmodule QtCore
160     \brief The QUuid class stores a Universally Unique Identifier (UUID).
161 
162     \reentrant
163 
164     Using \e{U}niversally \e{U}nique \e{ID}entifiers (UUID) is a
165     standard way to uniquely identify entities in a distributed
166     computing environment. A UUID is a 16-byte (128-bit) number
167     generated by some algorithm that is meant to guarantee that the
168     UUID will be unique in the distributed computing environment where
169     it is used. The acronym GUID is often used instead, \e{G}lobally
170     \e{U}nique \e{ID}entifiers, but it refers to the same thing.
171 
172     \target Variant field
173     Actually, the GUID is one \e{variant} of UUID. Multiple variants
174     are in use. Each UUID contains a bit field that specifies which
175     type (variant) of UUID it is. Call variant() to discover which
176     type of UUID an instance of QUuid contains. It extracts the three
177     most significant bits of byte 8 of the 16 bytes. In QUuid, byte 8
178     is \c{QUuid::data4[0]}. If you create instances of QUuid using the
179     constructor that accepts all the numeric values as parameters, use
180     the following table to set the three most significant bits of
181     parameter \c{b1}, which becomes \c{QUuid::data4[0]} and contains
182     the variant field in its three most significant bits. In the
183     table, 'x' means \e {don't care}.
184 
185     \table
186     \header
187     \li msb0
188     \li msb1
189     \li msb2
190     \li Variant
191 
192     \row
193     \li 0
194     \li x
195     \li x
196     \li NCS (Network Computing System)
197 
198     \row
199     \li 1
200     \li 0
201     \li x
202     \li DCE (Distributed Computing Environment)
203 
204     \row
205     \li 1
206     \li 1
207     \li 0
208     \li Microsoft (GUID)
209 
210     \row
211     \li 1
212     \li 1
213     \li 1
214     \li Reserved for future expansion
215 
216     \endtable
217 
218     \target Version field
219     If variant() returns QUuid::DCE, the UUID also contains a
220     \e{version} field in the four most significant bits of
221     \c{QUuid::data3}, and you can call version() to discover which
222     version your QUuid contains. If you create instances of QUuid
223     using the constructor that accepts all the numeric values as
224     parameters, use the following table to set the four most
225     significant bits of parameter \c{w2}, which becomes
226     \c{QUuid::data3} and contains the version field in its four most
227     significant bits.
228 
229     \table
230     \header
231     \li msb0
232     \li msb1
233     \li msb2
234     \li msb3
235     \li Version
236 
237     \row
238     \li 0
239     \li 0
240     \li 0
241     \li 1
242     \li Time
243 
244     \row
245     \li 0
246     \li 0
247     \li 1
248     \li 0
249     \li Embedded POSIX
250 
251     \row
252     \li 0
253     \li 0
254     \li 1
255     \li 1
256     \li Md5(Name)
257 
258     \row
259     \li 0
260     \li 1
261     \li 0
262     \li 0
263     \li Random
264 
265     \row
266     \li 0
267     \li 1
268     \li 0
269     \li 1
270     \li Sha1
271 
272     \endtable
273 
274     The field layouts for the DCE versions listed in the table above
275     are specified in the \l{http://www.ietf.org/rfc/rfc4122.txt}
276     {Network Working Group UUID Specification}.
277 
278     Most platforms provide a tool for generating new UUIDs, e.g. \c
279     uuidgen and \c guidgen. You can also use createUuid().  UUIDs
280     generated by createUuid() are of the random type.  Their
281     QUuid::Version bits are set to QUuid::Random, and their
282     QUuid::Variant bits are set to QUuid::DCE. The rest of the UUID is
283     composed of random numbers. Theoretically, this means there is a
284     small chance that a UUID generated by createUuid() will not be
285     unique. But it is
286     \l{http://en.wikipedia.org/wiki/Universally_Unique_Identifier#Random_UUID_probability_of_duplicates}
287     {a \e{very} small chance}.
288 
289     UUIDs can be constructed from numeric values or from strings, or
290     using the static createUuid() function. They can be converted to a
291     string with toString(). UUIDs have a variant() and a version(),
292     and null UUIDs return true from isNull().
293 */
294 
295 /*!
296     \fn QUuid::QUuid(const GUID &guid)
297 
298     Casts a Windows \a guid to a Qt QUuid.
299 
300     \warning This function is only for Windows platforms.
301 */
302 
303 /*!
304     \fn QUuid &QUuid::operator=(const GUID &guid)
305 
306     Assigns a Windows \a guid to a Qt QUuid.
307 
308     \warning This function is only for Windows platforms.
309 */
310 
311 /*!
312     \fn QUuid::operator GUID() const
313 
314     Returns a Windows GUID from a QUuid.
315 
316     \warning This function is only for Windows platforms.
317 */
318 
319 /*!
320     \fn QUuid::QUuid()
321 
322     Creates the null UUID. toString() will output the null UUID
323     as "{00000000-0000-0000-0000-000000000000}".
324 */
325 
326 /*!
327     \fn QUuid::QUuid(uint l, ushort w1, ushort w2, uchar b1, uchar b2, uchar b3, uchar b4, uchar b5, uchar b6, uchar b7, uchar b8)
328 
329     Creates a UUID with the value specified by the parameters, \a l,
330     \a w1, \a w2, \a b1, \a b2, \a b3, \a b4, \a b5, \a b6, \a b7, \a
331     b8.
332 
333     Example:
334     \snippet code/src_corelib_plugin_quuid.cpp 0
335 */
336 
337 /*!
338   Creates a QUuid object from the string \a text, which must be
339   formatted as five hex fields separated by '-', e.g.,
340   "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}" where 'x' is a hex
341   digit. The curly braces shown here are optional, but it is normal to
342   include them. If the conversion fails, a null UUID is created.  See
343   toString() for an explanation of how the five hex fields map to the
344   public data members in QUuid.
345 
346     \sa toString(), QUuid()
347 */
348 QUuid::QUuid(const QString &text)
349     : QUuid(fromString(text))
350 {
351 }
352 
353 /*!
354     \since 5.10
355 
356     Creates a QUuid object from the string \a text, which must be
357     formatted as five hex fields separated by '-', e.g.,
358     "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}" where 'x' is a hex
359     digit. The curly braces shown here are optional, but it is normal to
360     include them. If the conversion fails, a null UUID is created.  See
361     toString() for an explanation of how the five hex fields map to the
362     public data members in QUuid.
363 
364     \sa toString(), QUuid()
365 */
366 QUuid QUuid::fromString(QStringView text) Q_DECL_NOTHROW
367 {
368     if (text.size() < 36 || (text.front() == QLatin1Char('{') && text.size() < 37))
369         return QUuid();
370 
371     char latin1[38];
372     char *dst = latin1;
373 
374     for (QChar ch : text)
375         *dst++ = ch.toLatin1();
376 
377     return _q_uuidFromHex(latin1);
378     return fromString(QLatin1String(latin1, dst - latin1));
379 }
380 
381 /*!
382     \since 5.10
383     \overload
384 
385     Creates a QUuid object from the string \a text, which must be
386     formatted as five hex fields separated by '-', e.g.,
387     "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}" where 'x' is a hex
388     digit. The curly braces shown here are optional, but it is normal to
389     include them. If the conversion fails, a null UUID is created.  See
390     toString() for an explanation of how the five hex fields map to the
391     public data members in QUuid.
392 
393     \sa toString(), QUuid()
394 */
395 QUuid QUuid::fromString(QLatin1String text) Q_DECL_NOTHROW
396 {
397     if (text.size() < 36 || (text.front() == QLatin1Char('{') && text.size() < 37))
398         return QUuid();
399     else
400         return _q_uuidFromHex(text.data());
401 }
402 
403 /*!
404     \internal
405 */
406 QUuid::QUuid(const char *text)
407     : QUuid(text ? _q_uuidFromHex(text) : QUuid())
408 {
409 }
410 
411 /*!
412   Creates a QUuid object from the QByteArray \a text, which must be
413   formatted as five hex fields separated by '-', e.g.,
414   "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}" where 'x' is a hex
415   digit. The curly braces shown here are optional, but it is normal to
416   include them. If the conversion fails, a null UUID is created.  See
417   toByteArray() for an explanation of how the five hex fields map to the
418   public data members in QUuid.
419 
420     \since 4.8
421 
422     \sa toByteArray(), QUuid()
423 */
424 QUuid::QUuid(const QByteArray &text)
425     : QUuid(fromString(QLatin1String(text.data(), text.size())))
426 {
427 }
428 
429 /*!
430   \since 5.0
431   \fn QUuid QUuid::createUuidV3(const QUuid &ns, const QByteArray &baseData);
432 
433   This function returns a new UUID with variant QUuid::DCE and version QUuid::Md5.
434   \a ns is the namespace and \a baseData is the basic data as described by RFC 4122.
435 
436   \sa variant(), version(), createUuidV5()
437 */
438 
439 /*!
440   \since 5.0
441   \fn QUuid QUuid::createUuidV3(const QUuid &ns, const QString &baseData);
442 
443   This function returns a new UUID with variant QUuid::DCE and version QUuid::Md5.
444   \a ns is the namespace and \a baseData is the basic data as described by RFC 4122.
445 
446   \sa variant(), version(), createUuidV5()
447 */
448 
449 /*!
450   \since 5.0
451   \fn QUuid QUuid::createUuidV5(const QUuid &ns, const QByteArray &baseData);
452 
453   This function returns a new UUID with variant QUuid::DCE and version QUuid::Sha1.
454   \a ns is the namespace and \a baseData is the basic data as described by RFC 4122.
455 
456   \sa variant(), version(), createUuidV3()
457 */
458 
459 /*!
460   \since 5.0
461   \fn QUuid QUuid::createUuidV5(const QUuid &ns, const QString &baseData);
462 
463   This function returns a new UUID with variant QUuid::DCE and version QUuid::Sha1.
464   \a ns is the namespace and \a baseData is the basic data as described by RFC 4122.
465 
466   \sa variant(), version(), createUuidV3()
467 */
468 #ifndef QT_BOOTSTRAPPED
469 QUuid QUuid::createUuidV3(const QUuid &ns, const QByteArray &baseData)
470 {
471     return createFromName(ns, baseData, QCryptographicHash::Md5, 3);
472 }
473 
474 QUuid QUuid::createUuidV5(const QUuid &ns, const QByteArray &baseData)
475 {
476     return createFromName(ns, baseData, QCryptographicHash::Sha1, 5);
477 }
478 #endif
479 
480 /*!
481   Creates a QUuid object from the binary representation of the UUID, as
482   specified by RFC 4122 section 4.1.2. See toRfc4122() for a further
483   explanation of the order of \a bytes required.
484 
485   The byte array accepted is NOT a human readable format.
486 
487   If the conversion fails, a null UUID is created.
488 
489     \since 4.8
490 
491     \sa toRfc4122(), QUuid()
492 */
493 QUuid QUuid::fromRfc4122(const QByteArray &bytes)
494 {
495     if (bytes.isEmpty() || bytes.length() != 16)
496         return QUuid();
497 
498     uint d1;
499     ushort d2, d3;
500     uchar d4[8];
501 
502     const uchar *data = reinterpret_cast<const uchar *>(bytes.constData());
503 
504     d1 = qFromBigEndian<quint32>(data);
505     data += sizeof(quint32);
506     d2 = qFromBigEndian<quint16>(data);
507     data += sizeof(quint16);
508     d3 = qFromBigEndian<quint16>(data);
509     data += sizeof(quint16);
510 
511     for (int i = 0; i < 8; ++i) {
512         d4[i] = *(data);
513         data++;
514     }
515 
516     return QUuid(d1, d2, d3, d4[0], d4[1], d4[2], d4[3], d4[4], d4[5], d4[6], d4[7]);
517 }
518 
519 /*!
520     \fn bool QUuid::operator==(const QUuid &other) const
521 
522     Returns \c true if this QUuid and the \a other QUuid are identical;
523     otherwise returns \c false.
524 */
525 
526 /*!
527     \fn bool QUuid::operator!=(const QUuid &other) const
528 
529     Returns \c true if this QUuid and the \a other QUuid are different;
530     otherwise returns \c false.
531 */
532 
533 /*!
534     Returns the string representation of this QUuid. The string is
535     formatted as five hex fields separated by '-' and enclosed in
536     curly braces, i.e., "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}" where
537     'x' is a hex digit.  From left to right, the five hex fields are
538     obtained from the four public data members in QUuid as follows:
539 
540     \table
541     \header
542     \li Field #
543     \li Source
544 
545     \row
546     \li 1
547     \li data1
548 
549     \row
550     \li 2
551     \li data2
552 
553     \row
554     \li 3
555     \li data3
556 
557     \row
558     \li 4
559     \li data4[0] .. data4[1]
560 
561     \row
562     \li 5
563     \li data4[2] .. data4[7]
564 
565     \endtable
566 */
567 QString QUuid::toString() const
568 {
569     char latin1[MaxUuidLengthAsString];
570     const auto end = _q_uuidToHex(*this, latin1);
571     Q_ASSERT(end - latin1 == MaxUuidLengthAsString);
572     return QString::fromLatin1(latin1, MaxUuidLengthAsString);
573 }
574 
575 /*!
576     Returns the binary representation of this QUuid. The byte array is
577     formatted as five hex fields separated by '-' and enclosed in
578     curly braces, i.e., "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}" where
579     'x' is a hex digit.  From left to right, the five hex fields are
580     obtained from the four public data members in QUuid as follows:
581 
582     \table
583     \header
584     \li Field #
585     \li Source
586 
587     \row
588     \li 1
589     \li data1
590 
591     \row
592     \li 2
593     \li data2
594 
595     \row
596     \li 3
597     \li data3
598 
599     \row
600     \li 4
601     \li data4[0] .. data4[1]
602 
603     \row
604     \li 5
605     \li data4[2] .. data4[7]
606 
607     \endtable
608 
609     \since 4.8
610 */
611 QByteArray QUuid::toByteArray() const
612 {
613     QByteArray result(MaxUuidLengthAsString, Qt::Uninitialized);
614     const auto end = _q_uuidToHex(*this, const_cast<char*>(result.constData()));
615     Q_ASSERT(end - result.constData() == MaxUuidLengthAsString);
616     return result;
617 }
618 
619 /*!
620     Returns the binary representation of this QUuid. The byte array is in big
621     endian format, and formatted according to RFC 4122, section 4.1.2 -
622     "Layout and byte order".
623 
624     The order is as follows:
625 
626     \table
627     \header
628     \li Field #
629     \li Source
630 
631     \row
632     \li 1
633     \li data1
634 
635     \row
636     \li 2
637     \li data2
638 
639     \row
640     \li 3
641     \li data3
642 
643     \row
644     \li 4
645     \li data4[0] .. data4[7]
646 
647     \endtable
648 
649     \since 4.8
650 */
651 QByteArray QUuid::toRfc4122() const
652 {
653     // we know how many bytes a UUID has, I hope :)
654     QByteArray bytes(16, Qt::Uninitialized);
655     uchar *data = reinterpret_cast<uchar*>(bytes.data());
656 
657     qToBigEndian(data1, data);
658     data += sizeof(quint32);
659     qToBigEndian(data2, data);
660     data += sizeof(quint16);
661     qToBigEndian(data3, data);
662     data += sizeof(quint16);
663 
664     for (int i = 0; i < 8; ++i) {
665         *(data) = data4[i];
666         data++;
667     }
668 
669     return bytes;
670 }
671 
672 #ifndef QT_NO_DATASTREAM
673 /*!
674     \relates QUuid
675     Writes the UUID \a id to the data stream \a s.
676 */
677 QDataStream &operator<<(QDataStream &s, const QUuid &id)
678 {
679     QByteArray bytes;
680     if (s.byteOrder() == QDataStream::BigEndian) {
681         bytes = id.toRfc4122();
682     } else {
683         // we know how many bytes a UUID has, I hope :)
684         bytes = QByteArray(16, Qt::Uninitialized);
685         uchar *data = reinterpret_cast<uchar*>(bytes.data());
686 
687         qToLittleEndian(id.data1, data);
688         data += sizeof(quint32);
689         qToLittleEndian(id.data2, data);
690         data += sizeof(quint16);
691         qToLittleEndian(id.data3, data);
692         data += sizeof(quint16);
693 
694         for (int i = 0; i < 8; ++i) {
695             *(data) = id.data4[i];
696             data++;
697         }
698     }
699 
700     if (s.writeRawData(bytes.data(), 16) != 16) {
701         s.setStatus(QDataStream::WriteFailed);
702     }
703     return s;
704 }
705 
706 /*!
707     \relates QUuid
708     Reads a UUID from the stream \a s into \a id.
709 */
710 QDataStream &operator>>(QDataStream &s, QUuid &id)
711 {
712     QByteArray bytes(16, Qt::Uninitialized);
713     if (s.readRawData(bytes.data(), 16) != 16) {
714         s.setStatus(QDataStream::ReadPastEnd);
715         return s;
716     }
717 
718     if (s.byteOrder() == QDataStream::BigEndian) {
719         id = QUuid::fromRfc4122(bytes);
720     } else {
721         const uchar *data = reinterpret_cast<const uchar *>(bytes.constData());
722 
723         id.data1 = qFromLittleEndian<quint32>(data);
724         data += sizeof(quint32);
725         id.data2 = qFromLittleEndian<quint16>(data);
726         data += sizeof(quint16);
727         id.data3 = qFromLittleEndian<quint16>(data);
728         data += sizeof(quint16);
729 
730         for (int i = 0; i < 8; ++i) {
731             id.data4[i] = *(data);
732             data++;
733         }
734     }
735 
736     return s;
737 }
738 #endif // QT_NO_DATASTREAM
739 
740 /*!
741     Returns \c true if this is the null UUID
742     {00000000-0000-0000-0000-000000000000}; otherwise returns \c false.
743 */
744 bool QUuid::isNull() const Q_DECL_NOTHROW
745 {
746     return data4[0] == 0 && data4[1] == 0 && data4[2] == 0 && data4[3] == 0 &&
747            data4[4] == 0 && data4[5] == 0 && data4[6] == 0 && data4[7] == 0 &&
748            data1 == 0 && data2 == 0 && data3 == 0;
749 }
750 
751 /*!
752     \enum QUuid::Variant
753 
754     This enum defines the values used in the \l{Variant field}
755     {variant field} of the UUID. The value in the variant field
756     determines the layout of the 128-bit value.
757 
758     \value VarUnknown Variant is unknown
759     \value NCS Reserved for NCS (Network Computing System) backward compatibility
760     \value DCE Distributed Computing Environment, the scheme used by QUuid
761     \value Microsoft Reserved for Microsoft backward compatibility (GUID)
762     \value Reserved Reserved for future definition
763 */
764 
765 /*!
766     \enum QUuid::Version
767 
768     This enum defines the values used in the \l{Version field}
769     {version field} of the UUID. The version field is meaningful
770     only if the value in the \l{Variant field} {variant field}
771     is QUuid::DCE.
772 
773     \value VerUnknown Version is unknown
774     \value Time Time-based, by using timestamp, clock sequence, and
775     MAC network card address (if available) for the node sections
776     \value EmbeddedPOSIX DCE Security version, with embedded POSIX UUIDs
777     \value Name Name-based, by using values from a name for all sections
778     \value Md5 Alias for Name
779     \value Random Random-based, by using random numbers for all sections
780     \value Sha1
781 */
782 
783 /*!
784     \fn QUuid::Variant QUuid::variant() const
785 
786     Returns the value in the \l{Variant field} {variant field} of the
787     UUID. If the return value is QUuid::DCE, call version() to see
788     which layout it uses. The null UUID is considered to be of an
789     unknown variant.
790 
791     \sa version()
792 */
793 QUuid::Variant QUuid::variant() const Q_DECL_NOTHROW
794 {
795     if (isNull())
796         return VarUnknown;
797     // Check the 3 MSB of data4[0]
798     if ((data4[0] & 0x80) == 0x00) return NCS;
799     else if ((data4[0] & 0xC0) == 0x80) return DCE;
800     else if ((data4[0] & 0xE0) == 0xC0) return Microsoft;
801     else if ((data4[0] & 0xE0) == 0xE0) return Reserved;
802     return VarUnknown;
803 }
804 
805 /*!
806     \fn QUuid::Version QUuid::version() const
807 
808     Returns the \l{Version field} {version field} of the UUID, if the
809     UUID's \l{Variant field} {variant field} is QUuid::DCE. Otherwise
810     it returns QUuid::VerUnknown.
811 
812     \sa variant()
813 */
814 QUuid::Version QUuid::version() const Q_DECL_NOTHROW
815 {
816     // Check the 4 MSB of data3
817     Version ver = (Version)(data3>>12);
818     if (isNull()
819          || (variant() != DCE)
820          || ver < Time
821          || ver > Sha1)
822         return VerUnknown;
823     return ver;
824 }
825 
826 /*!
827     \fn bool QUuid::operator<(const QUuid &other) const
828 
829     Returns \c true if this QUuid has the same \l{Variant field}
830     {variant field} as the \a other QUuid and is lexicographically
831     \e{before} the \a other QUuid. If the \a other QUuid has a
832     different variant field, the return value is determined by
833     comparing the two \l{QUuid::Variant} {variants}.
834 
835     \sa variant()
836 */
837 bool QUuid::operator<(const QUuid &other) const Q_DECL_NOTHROW
838 {
839     if (variant() != other.variant())
840         return variant() < other.variant();
841 
842 #define ISLESS(f1, f2) if (f1!=f2) return (f1<f2);
843     ISLESS(data1, other.data1);
844     ISLESS(data2, other.data2);
845     ISLESS(data3, other.data3);
846     for (int n = 0; n < 8; n++) {
847         ISLESS(data4[n], other.data4[n]);
848     }
849 #undef ISLESS
850     return false;
851 }
852 
853 /*!
854     \fn bool QUuid::operator>(const QUuid &other) const
855 
856     Returns \c true if this QUuid has the same \l{Variant field}
857     {variant field} as the \a other QUuid and is lexicographically
858     \e{after} the \a other QUuid. If the \a other QUuid has a
859     different variant field, the return value is determined by
860     comparing the two \l{QUuid::Variant} {variants}.
861 
862     \sa variant()
863 */
864 bool QUuid::operator>(const QUuid &other) const Q_DECL_NOTHROW
865 {
866     return other < *this;
867 }
868 
869 /*!
870     \fn bool operator<=(const QUuid &lhs, const QUuid &rhs)
871     \relates QUuid
872     \since 5.5
873 
874     Returns \c true if \a lhs has the same \l{Variant field}
875     {variant field} as \a rhs and is lexicographically
876     \e{not after} \a rhs. If \a rhs has a
877     different variant field, the return value is determined by
878     comparing the two \l{QUuid::Variant} {variants}.
879 
880     \sa {QUuid::}{variant()}
881 */
882 
883 /*!
884     \fn bool operator>=(const QUuid &lhs, const QUuid &rhs)
885     \relates QUuid
886     \since 5.5
887 
888     Returns \c true if \a lhs has the same \l{Variant field}
889     {variant field} as \a rhs and is lexicographically
890     \e{not before} \a rhs. If \a rhs has a
891     different variant field, the return value is determined by
892     comparing the two \l{QUuid::Variant} {variants}.
893 
894     \sa {QUuid::}{variant()}
895 */
896 
897 /*!
898     \fn QUuid QUuid::createUuid()
899 
900     On any platform other than Windows, this function returns a new
901     UUID with variant QUuid::DCE and version QUuid::Random.  If
902     the /dev/urandom device exists, then the numbers used to construct
903     the UUID will be of cryptographic quality, which will make the UUID
904     unique.  Otherwise, the numbers of the UUID will be obtained from
905     the local pseudo-random number generator (qrand(), which is seeded
906     by qsrand()) which is usually not of cryptograhic quality, which
907     means that the UUID can't be guaranteed to be unique.
908 
909     On a Windows platform, a GUID is generated, which almost certainly
910     \e{will} be unique, on this or any other system, networked or not.
911 
912     \sa variant(), version()
913 */
914 #if defined(Q_OS_WIN)
915 
916 QT_BEGIN_INCLUDE_NAMESPACE
917 #include <objbase.h> // For CoCreateGuid
918 QT_END_INCLUDE_NAMESPACE
919 
920 QUuid QUuid::createUuid()
921 {
922     GUID guid;
923     CoCreateGuid(&guid);
924     QUuid result = guid;
925     return result;
926 }
927 
928 #else // Q_OS_WIN
929 
930 QT_BEGIN_INCLUDE_NAMESPACE
931 #include "qdatetime.h"
932 #include "qfile.h"
933 #include "qthreadstorage.h"
934 #include <stdlib.h> // for RAND_MAX
935 QT_END_INCLUDE_NAMESPACE
936 
937 #if !defined(QT_BOOTSTRAPPED) && defined(Q_OS_UNIX)
938 Q_GLOBAL_STATIC(QThreadStorage<QFile *>, devUrandomStorage);
939 #endif
940 
941 QUuid QUuid::createUuid()
942 {
943     QUuid result;
944     uint *data = &(result.data1);
945 
946 #if defined(Q_OS_UNIX)
947     QFile *devUrandom;
948 #  if !defined(QT_BOOTSTRAPPED)
949     devUrandom = devUrandomStorage()->localData();
950     if (!devUrandom) {
951         devUrandom = new QFile(QLatin1String("/dev/urandom"));
952         devUrandom->open(QIODevice::ReadOnly | QIODevice::Unbuffered);
953         devUrandomStorage()->setLocalData(devUrandom);
954     }
955 # else
956     QFile file(QLatin1String("/dev/urandom"));
957     devUrandom = &file;
958     devUrandom->open(QIODevice::ReadOnly | QIODevice::Unbuffered);
959 # endif
960     enum { AmountToRead = 4 * sizeof(uint) };
961     if (devUrandom->isOpen()
962         && devUrandom->read((char *) data, AmountToRead) == AmountToRead) {
963         // we got what we wanted, nothing more to do
964         ;
965     } else
966 #endif
967     {
968         static const int intbits = sizeof(int)*8;
969         static int randbits = 0;
970         if (!randbits) {
971             int r = 0;
972             int max = RAND_MAX;
973             do { ++r; } while ((max=max>>1));
974             randbits = r;
975         }
976 
977         // Seed the PRNG once per thread with a combination of current time, a
978         // stack address and a serial counter (since thread stack addresses are
979         // re-used).
980 #ifndef QT_BOOTSTRAPPED
981         static QThreadStorage<int *> uuidseed;
982         if (!uuidseed.hasLocalData())
983         {
984             int *pseed = new int;
985             static QBasicAtomicInt serial = Q_BASIC_ATOMIC_INITIALIZER(0);
986             qsrand(*pseed = QDateTime::currentSecsSinceEpoch()
987                    + quintptr(&pseed)
988                    + 2 + serial.fetchAndAddRelaxed(1));
989             uuidseed.setLocalData(pseed);
990         }
991 #else
992         static bool seeded = false;
993         if (!seeded)
994             qsrand(QDateTime::currentSecsSinceEpoch()
995                    + quintptr(&seeded));
996 #endif
997 
998         int chunks = 16 / sizeof(uint);
999         while (chunks--) {
1000             uint randNumber = 0;
1001             for (int filled = 0; filled < intbits; filled += randbits)
1002                 randNumber |= qrand()<<filled;
1003             *(data+chunks) = randNumber;
1004         }
1005     }
1006 
1007     result.data4[0] = (result.data4[0] & 0x3F) | 0x80;        // UV_DCE
1008     result.data3 = (result.data3 & 0x0FFF) | 0x4000;        // UV_Random
1009 
1010     return result;
1011 }
1012 #endif // !Q_OS_WIN
1013 
1014 /*!
1015     \fn bool QUuid::operator==(const GUID &guid) const
1016 
1017     Returns \c true if this UUID is equal to the Windows GUID \a guid;
1018     otherwise returns \c false.
1019 */
1020 
1021 /*!
1022     \fn bool QUuid::operator!=(const GUID &guid) const
1023 
1024     Returns \c true if this UUID is not equal to the Windows GUID \a
1025     guid; otherwise returns \c false.
1026 */
1027 
1028 #ifndef QT_NO_DEBUG_STREAM
1029 /*!
1030     \relates QUuid
1031     Writes the UUID \a id to the output stream for debugging information \a dbg.
1032 */
1033 QDebug operator<<(QDebug dbg, const QUuid &id)
1034 {
1035     QDebugStateSaver saver(dbg);
1036     dbg.nospace() << "QUuid(" << id.toString() << ')';
1037     return dbg;
1038 }
1039 #endif
1040 
1041 /*!
1042     \since 5.0
1043     \relates QUuid
1044     Returns a hash of the UUID \a uuid, using \a seed to seed the calculation.
1045 */
1046 uint qHash(const QUuid &uuid, uint seed) Q_DECL_NOTHROW
1047 {
1048     return uuid.data1 ^ uuid.data2 ^ (uuid.data3 << 16)
1049             ^ ((uuid.data4[0] << 24) | (uuid.data4[1] << 16) | (uuid.data4[2] << 8) | uuid.data4[3])
1050             ^ ((uuid.data4[4] << 24) | (uuid.data4[5] << 16) | (uuid.data4[6] << 8) | uuid.data4[7])
1051             ^ seed;
1052 }
1053 
1054 
1055 QT_END_NAMESPACE
