Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2019 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtNetwork module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qnetconmonitor_p.h"
41 
42 #include "private/qobject_p.h"
43 
44 #include <QtCore/quuid.h>
45 #include <QtCore/qmetaobject.h>
46 
47 #include <QtNetwork/qnetworkinterface.h>
48 
49 #include <objbase.h>
50 #include <netlistmgr.h>
51 #include <wrl/client.h>
52 #include <wrl/wrappers/corewrappers.h>
53 #include <comdef.h>
54 #include <iphlpapi.h>
55 
56 #include <algorithm>
57 
58 using namespace Microsoft::WRL;
59 
60 QT_BEGIN_NAMESPACE
61 
62 Q_LOGGING_CATEGORY(lcNetMon, "qt.network.monitor");
63 
64 namespace {
65 QString errorStringFromHResult(HRESULT hr)
66 {
67     _com_error error(hr);
68     return QString::fromWCharArray(error.ErrorMessage());
69 }
70 
71 template<typename T>
72 bool QueryInterfaceImpl(IUnknown *from, REFIID riid, void **ppvObject)
73 {
74     if (riid == __uuidof(T)) {
75         *ppvObject = static_cast<T *>(from);
76         from->AddRef();
77         return true;
78     }
79     return false;
80 }
81 
82 QNetworkInterface getInterfaceFromHostAddress(const QHostAddress &local)
83 {
84     QList<QNetworkInterface> interfaces = QNetworkInterface::allInterfaces();
85     auto it = std::find_if(
86             interfaces.cbegin(), interfaces.cend(), [&local](const QNetworkInterface &iface) {
87                 const auto &entries = iface.addressEntries();
88                 return std::any_of(entries.cbegin(), entries.cend(),
89                                    [&local](const QNetworkAddressEntry &entry) {
90                                        return entry.ip().isEqual(local,
91                                                                  QHostAddress::TolerantConversion);
92                                    });
93             });
94     if (it == interfaces.cend()) {
95         qCWarning(lcNetMon, "Could not find the interface for the local address.");
96         return {};
97     }
98     return *it;
99 }
100 } // anonymous namespace
101 
102 class QNetworkConnectionEvents final : public INetworkConnectionEvents
103 {
104 public:
105     QNetworkConnectionEvents(QNetworkConnectionMonitorPrivate *monitor);
106     ~QNetworkConnectionEvents();
107 
108     HRESULT QueryInterface(REFIID riid, void **ppvObject) override;
109 
110     ULONG AddRef() override { return ++ref; }
111     ULONG Release() override
112     {
113         if (--ref == 0) {
114             delete this;
115             return 0;
116         }
117         return ref;
118     }
119 
120     HRESULT STDMETHODCALLTYPE
121     NetworkConnectionConnectivityChanged(GUID connectionId, NLM_CONNECTIVITY connectivity) override;
122     HRESULT STDMETHODCALLTYPE NetworkConnectionPropertyChanged(
123             GUID connectionId, NLM_CONNECTION_PROPERTY_CHANGE flags) override;
124 
125     Q_REQUIRED_RESULT
126     bool setTarget(const QNetworkInterface &iface);
127     Q_REQUIRED_RESULT
128     bool startMonitoring();
129     Q_REQUIRED_RESULT
130     bool stopMonitoring();
131 
132 private:
133     ComPtr<INetworkConnection> getNetworkConnectionFromAdapterGuid(QUuid guid);
134 
135     QUuid currentConnectionId{};
136 
137     ComPtr<INetworkListManager> networkListManager;
138     ComPtr<IConnectionPoint> connectionPoint;
139 
140     QNetworkConnectionMonitorPrivate *monitor = nullptr;
141 
142     QAtomicInteger<ULONG> ref = 1; // start at 1 for our own initial reference
143     DWORD cookie = 0;
144 };
145 
146 class QNetworkConnectionMonitorPrivate : public QObjectPrivate
147 {
148     Q_DECLARE_PUBLIC(QNetworkConnectionMonitor);
149 
150 public:
151     QNetworkConnectionMonitorPrivate();
152     ~QNetworkConnectionMonitorPrivate();
153 
154     Q_REQUIRED_RESULT
155     bool setTargets(const QHostAddress &local, const QHostAddress &remote);
156     Q_REQUIRED_RESULT
157     bool startMonitoring();
158     void stopMonitoring();
159 
160     void setConnectivity(NLM_CONNECTIVITY newConnectivity);
161 
162 private:
163     ComPtr<QNetworkConnectionEvents> connectionEvents;
164     // We can assume we have access to internet/subnet when this class is created because
165     // connection has already been established to the peer:
166     NLM_CONNECTIVITY connectivity =
167             NLM_CONNECTIVITY(NLM_CONNECTIVITY_IPV4_INTERNET | NLM_CONNECTIVITY_IPV6_INTERNET
168                              | NLM_CONNECTIVITY_IPV4_SUBNET | NLM_CONNECTIVITY_IPV6_SUBNET);
169 
170     bool sameSubnet = false;
171     bool monitoring = false;
172     bool comInitFailed = false;
173     bool remoteIsIPv6 = false;
174 };
175 
176 QNetworkConnectionEvents::QNetworkConnectionEvents(QNetworkConnectionMonitorPrivate *monitor)
177     : monitor(monitor)
178 {
179     auto hr = CoCreateInstance(CLSID_NetworkListManager, nullptr, CLSCTX_INPROC_SERVER,
180                                IID_INetworkListManager, &networkListManager);
181     if (FAILED(hr)) {
182         qCWarning(lcNetMon) << "Could not get a NetworkListManager instance:"
183                             << errorStringFromHResult(hr);
184         return;
185     }
186 
187     ComPtr<IConnectionPointContainer> connectionPointContainer;
188     hr = networkListManager.As(&connectionPointContainer);
189     if (SUCCEEDED(hr)) {
190         hr = connectionPointContainer->FindConnectionPoint(IID_INetworkConnectionEvents,
191                                                            &connectionPoint);
192     }
193     if (FAILED(hr)) {
194         qCWarning(lcNetMon) << "Failed to get connection point for network events:"
195                             << errorStringFromHResult(hr);
196     }
197 }
198 
199 QNetworkConnectionEvents::~QNetworkConnectionEvents()
200 {
201     Q_ASSERT(ref == 0);
202 }
203 
204 ComPtr<INetworkConnection> QNetworkConnectionEvents::getNetworkConnectionFromAdapterGuid(QUuid guid)
205 {
206     ComPtr<IEnumNetworkConnections> connections;
207     auto hr = networkListManager->GetNetworkConnections(connections.GetAddressOf());
208     if (FAILED(hr)) {
209         qCWarning(lcNetMon) << "Failed to enumerate network connections:"
210                             << errorStringFromHResult(hr);
211         return nullptr;
212     }
213     ComPtr<INetworkConnection> connection = nullptr;
214     do {
215         hr = connections->Next(1, connection.GetAddressOf(), nullptr);
216         if (FAILED(hr)) {
217             qCWarning(lcNetMon) << "Failed to get next network connection in enumeration:"
218                                 << errorStringFromHResult(hr);
219             break;
220         }
221         if (connection) {
222             GUID adapterId;
223             hr = connection->GetAdapterId(&adapterId);
224             if (FAILED(hr)) {
225                 qCWarning(lcNetMon) << "Failed to get adapter ID from network connection:"
226                                     << errorStringFromHResult(hr);
227                 continue;
228             }
229             if (guid == adapterId)
230                 return connection;
231         }
232     } while (connection);
233     return nullptr;
234 }
235 
236 HRESULT QNetworkConnectionEvents::QueryInterface(REFIID riid, void **ppvObject)
237 {
238     return QueryInterfaceImpl<IUnknown>(this, riid, ppvObject)
239                     || QueryInterfaceImpl<INetworkConnectionEvents>(this, riid, ppvObject)
240             ? S_OK
241             : E_NOINTERFACE;
242 }
243 
244 HRESULT STDMETHODCALLTYPE QNetworkConnectionEvents::NetworkConnectionConnectivityChanged(
245         GUID connectionId, NLM_CONNECTIVITY newConnectivity)
246 {
247     if (connectionId == currentConnectionId)
248         monitor->setConnectivity(newConnectivity);
249     return S_OK;
250 }
251 
252 HRESULT STDMETHODCALLTYPE QNetworkConnectionEvents::NetworkConnectionPropertyChanged(
253         GUID connectionId, NLM_CONNECTION_PROPERTY_CHANGE flags)
254 {
255     Q_UNUSED(connectionId);
256     Q_UNUSED(flags);
257     return E_NOTIMPL;
258 }
259 
260 bool QNetworkConnectionEvents::setTarget(const QNetworkInterface &iface)
261 {
262     // Unset this in case it's already set to something
263     currentConnectionId = QUuid{};
264 
265     NET_LUID luid;
266     if (ConvertInterfaceIndexToLuid(iface.index(), &luid) != NO_ERROR) {
267         qCWarning(lcNetMon, "Could not get the LUID for the interface.");
268         return false;
269     }
270     GUID guid;
271     if (ConvertInterfaceLuidToGuid(&luid, &guid) != NO_ERROR) {
272         qCWarning(lcNetMon, "Could not get the GUID for the interface.");
273         return false;
274     }
275     ComPtr<INetworkConnection> connection = getNetworkConnectionFromAdapterGuid(guid);
276     if (!connection) {
277         qCWarning(lcNetMon, "Could not get the INetworkConnection instance for the adapter GUID.");
278         return false;
279     }
280     auto hr = connection->GetConnectionId(&guid);
281     if (FAILED(hr)) {
282         qCWarning(lcNetMon) << "Failed to get the connection's GUID:" << errorStringFromHResult(hr);
283         return false;
284     }
285     currentConnectionId = guid;
286 
287     return true;
288 }
289 
290 bool QNetworkConnectionEvents::startMonitoring()
291 {
292     if (currentConnectionId.isNull()) {
293         qCWarning(lcNetMon, "Can not start monitoring, set targets first");
294         return false;
295     }
296     if (!connectionPoint) {
297         qCWarning(lcNetMon,
298                   "We don't have the connection point, cannot start listening to events!");
299         return false;
300     }
301 
302     auto hr = connectionPoint->Advise(this, &cookie);
303     if (FAILED(hr)) {
304         qCWarning(lcNetMon) << "Failed to subscribe to network connectivity events:"
305                             << errorStringFromHResult(hr);
306         return false;
307     }
308     return true;
309 }
310 
311 bool QNetworkConnectionEvents::stopMonitoring()
312 {
313     auto hr = connectionPoint->Unadvise(cookie);
314     if (FAILED(hr)) {
315         qCWarning(lcNetMon) << "Failed to unsubscribe from network connection events:"
316                             << errorStringFromHResult(hr);
317         return false;
318     }
319     cookie = 0;
320     return true;
321 }
322 
323 QNetworkConnectionMonitorPrivate::QNetworkConnectionMonitorPrivate()
324 {
325     auto hr = CoInitializeEx(nullptr, COINIT_MULTITHREADED);
326     if (FAILED(hr)) {
327         qCWarning(lcNetMon) << "Failed to initialize COM:" << errorStringFromHResult(hr);
328         comInitFailed = true;
329         return;
330     }
331 
332     connectionEvents = new QNetworkConnectionEvents(this);
333 }
334 
335 QNetworkConnectionMonitorPrivate::~QNetworkConnectionMonitorPrivate()
336 {
337     if (comInitFailed)
338         return;
339     connectionEvents.Reset();
340     CoUninitialize();
341 }
342 
343 bool QNetworkConnectionMonitorPrivate::setTargets(const QHostAddress &local,
344                                                   const QHostAddress &remote)
345 {
346     if (comInitFailed)
347         return false;
348 
349     QNetworkInterface iface = getInterfaceFromHostAddress(local);
350     if (!iface.isValid())
351         return false;
352     const auto &addressEntries = iface.addressEntries();
353     auto it = std::find_if(
354             addressEntries.cbegin(), addressEntries.cend(),
355             [&local](const QNetworkAddressEntry &entry) { return entry.ip() == local; });
356     if (Q_UNLIKELY(it == addressEntries.cend())) {
357         qCWarning(lcNetMon, "The address entry we were working with disappeared");
358         return false;
359     }
360     sameSubnet = remote.isInSubnet(local, it->prefixLength());
361     remoteIsIPv6 = remote.protocol() == QAbstractSocket::IPv6Protocol;
362 
363     return connectionEvents->setTarget(iface);
364 }
365 
366 void QNetworkConnectionMonitorPrivate::setConnectivity(NLM_CONNECTIVITY newConnectivity)
367 {
368     Q_Q(QNetworkConnectionMonitor);
369     const bool reachable = q->isReachable();
370     connectivity = newConnectivity;
371     const bool newReachable = q->isReachable();
372     if (reachable != newReachable)
373         emit q->reachabilityChanged(newReachable);
374 }
375 
376 bool QNetworkConnectionMonitorPrivate::startMonitoring()
377 {
378     Q_ASSERT(connectionEvents);
379     Q_ASSERT(!monitoring);
380     if (connectionEvents->startMonitoring())
381         monitoring = true;
382     return monitoring;
383 }
384 
385 void QNetworkConnectionMonitorPrivate::stopMonitoring()
386 {
387     Q_ASSERT(connectionEvents);
388     Q_ASSERT(monitoring);
389     if (connectionEvents->stopMonitoring())
390         monitoring = false;
391 }
392 
393 QNetworkConnectionMonitor::QNetworkConnectionMonitor()
394     : QObject(*new QNetworkConnectionMonitorPrivate)
395 {
396 }
397 
398 QNetworkConnectionMonitor::QNetworkConnectionMonitor(const QHostAddress &local,
399                                                      const QHostAddress &remote)
400     : QObject(*new QNetworkConnectionMonitorPrivate)
401 {
402     setTargets(local, remote);
403 }
404 
405 QNetworkConnectionMonitor::~QNetworkConnectionMonitor() = default;
406 
407 bool QNetworkConnectionMonitor::setTargets(const QHostAddress &local, const QHostAddress &remote)
408 {
409     if (isMonitoring()) {
410         qCWarning(lcNetMon, "Monitor is already active, call stopMonitoring() first");
411         return false;
412     }
413     if (local.isNull()) {
414         qCWarning(lcNetMon, "Invalid (null) local address, cannot create a reachability target");
415         return false;
416     }
417     // Silently return false for loopback addresses instead of printing warnings later
418     if (remote.isLoopback())
419         return false;
420 
421     return d_func()->setTargets(local, remote);
422 }
423 
424 bool QNetworkConnectionMonitor::startMonitoring()
425 {
426     Q_D(QNetworkConnectionMonitor);
427     if (isMonitoring()) {
428         qCWarning(lcNetMon, "Monitor is already active, call stopMonitoring() first");
429         return false;
430     }
431     return d->startMonitoring();
432 }
433 
434 bool QNetworkConnectionMonitor::isMonitoring() const
435 {
436     return d_func()->monitoring;
437 }
438 
439 void QNetworkConnectionMonitor::stopMonitoring()
440 {
441     Q_D(QNetworkConnectionMonitor);
442     if (!isMonitoring()) {
443         qCWarning(lcNetMon, "stopMonitoring was called when not monitoring!");
444         return;
445     }
446     d->stopMonitoring();
447 }
448 
449 bool QNetworkConnectionMonitor::isReachable()
450 {
451     Q_D(QNetworkConnectionMonitor);
452     NLM_CONNECTIVITY required = d->sameSubnet
453             ? (d->remoteIsIPv6 ? NLM_CONNECTIVITY_IPV6_SUBNET : NLM_CONNECTIVITY_IPV4_SUBNET)
454             : (d->remoteIsIPv6 ? NLM_CONNECTIVITY_IPV6_INTERNET : NLM_CONNECTIVITY_IPV4_INTERNET);
455     return d_func()->connectivity & required;
456 }
457 
458 class QNetworkListManagerEvents final : public INetworkListManagerEvents
459 {
460 public:
461     QNetworkListManagerEvents(QNetworkStatusMonitorPrivate *monitor);
462     ~QNetworkListManagerEvents();
463 
464     HRESULT QueryInterface(REFIID riid, void **ppvObject) override;
465 
466     ULONG AddRef() override { return ++ref; }
467     ULONG Release() override
468     {
469         if (--ref == 0) {
470             delete this;
471             return 0;
472         }
473         return ref;
474     }
475 
476     HRESULT ConnectivityChanged(NLM_CONNECTIVITY newConnectivity) override;
477 
478     Q_REQUIRED_RESULT
479     bool start();
480     Q_REQUIRED_RESULT
481     bool stop();
482 
483 private:
484     ComPtr<INetworkListManager> networkListManager = nullptr;
485     ComPtr<IConnectionPoint> connectionPoint = nullptr;
486 
487     QNetworkStatusMonitorPrivate *monitor = nullptr;
488 
489     QAtomicInteger<ULONG> ref = 1; // start at 1 for our own initial reference
490     DWORD cookie = 0;
491 };
492 
493 class QNetworkStatusMonitorPrivate : public QObjectPrivate
494 {
495     Q_DECLARE_PUBLIC(QNetworkStatusMonitor);
496 
497 public:
498     QNetworkStatusMonitorPrivate();
499     ~QNetworkStatusMonitorPrivate();
500 
501     Q_REQUIRED_RESULT
502     bool start();
503     void stop();
504 
505     void setConnectivity(NLM_CONNECTIVITY newConnectivity);
506 
507 private:
508     friend class QNetworkListManagerEvents;
509 
510     ComPtr<QNetworkListManagerEvents> managerEvents;
511     NLM_CONNECTIVITY connectivity = NLM_CONNECTIVITY_DISCONNECTED;
512 
513     bool monitoring = false;
514     bool comInitFailed = false;
515 };
516 
517 QNetworkListManagerEvents::QNetworkListManagerEvents(QNetworkStatusMonitorPrivate *monitor)
518     : monitor(monitor)
519 {
520     auto hr = CoCreateInstance(CLSID_NetworkListManager, nullptr, CLSCTX_INPROC_SERVER,
521                                IID_INetworkListManager, &networkListManager);
522     if (FAILED(hr)) {
523         qCWarning(lcNetMon) << "Could not get a NetworkListManager instance:"
524                             << errorStringFromHResult(hr);
525         return;
526     }
527 
528     // Set initial connectivity
529     hr = networkListManager->GetConnectivity(&monitor->connectivity);
530     if (FAILED(hr))
531         qCWarning(lcNetMon) << "Could not get connectivity:" << errorStringFromHResult(hr);
532 
533     ComPtr<IConnectionPointContainer> connectionPointContainer;
534     hr = networkListManager.As(&connectionPointContainer);
535     if (SUCCEEDED(hr)) {
536         hr = connectionPointContainer->FindConnectionPoint(IID_INetworkListManagerEvents,
537                                                            &connectionPoint);
538     }
539     if (FAILED(hr)) {
540         qCWarning(lcNetMon) << "Failed to get connection point for network list manager events:"
541                             << errorStringFromHResult(hr);
542     }
543 }
544 
545 QNetworkListManagerEvents::~QNetworkListManagerEvents()
546 {
547     Q_ASSERT(ref == 0);
548 }
549 
550 HRESULT QNetworkListManagerEvents::QueryInterface(REFIID riid, void **ppvObject)
551 {
552     return QueryInterfaceImpl<IUnknown>(this, riid, ppvObject)
553                     || QueryInterfaceImpl<INetworkListManagerEvents>(this, riid, ppvObject)
554             ? S_OK
555             : E_NOINTERFACE;
556 }
557 
558 HRESULT QNetworkListManagerEvents::ConnectivityChanged(NLM_CONNECTIVITY newConnectivity)
559 {
560     // This function is run on a different thread than 'monitor' is created on, so we need to run
561     // it on that thread
562     QMetaObject::invokeMethod(monitor->q_ptr,
563                               [newConnectivity, monitor = this->monitor]() {
564                                   monitor->setConnectivity(newConnectivity);
565                               },
566                               Qt::QueuedConnection);
567     return S_OK;
568 }
569 
570 bool QNetworkListManagerEvents::start()
571 {
572     if (!connectionPoint) {
573         qCWarning(lcNetMon, "Initialization failed, can't start!");
574         return false;
575     }
576     auto hr = connectionPoint->Advise(this, &cookie);
577     if (FAILED(hr)) {
578         qCWarning(lcNetMon) << "Failed to subscribe to network connectivity events:"
579                             << errorStringFromHResult(hr);
580         return false;
581     }
582     return true;
583 }
584 
585 bool QNetworkListManagerEvents::stop()
586 {
587     Q_ASSERT(connectionPoint);
588     auto hr = connectionPoint->Unadvise(cookie);
589     if (FAILED(hr)) {
590         qCWarning(lcNetMon) << "Failed to unsubscribe from network connectivity events:"
591                             << errorStringFromHResult(hr);
592         return false;
593     }
594     cookie = 0;
595     return true;
596 }
597 
598 QNetworkStatusMonitorPrivate::QNetworkStatusMonitorPrivate()
599 {
600     auto hr = CoInitializeEx(nullptr, COINIT_MULTITHREADED);
601     if (FAILED(hr)) {
602         qCWarning(lcNetMon) << "Failed to initialize COM:" << errorStringFromHResult(hr);
603         comInitFailed = true;
604         return;
605     }
606     managerEvents = new QNetworkListManagerEvents(this);
607 }
608 
609 QNetworkStatusMonitorPrivate::~QNetworkStatusMonitorPrivate()
610 {
611     if (comInitFailed)
612         return;
613     if (monitoring)
614         stop();
615     managerEvents.Reset();
616     CoUninitialize();
617 }
618 
619 void QNetworkStatusMonitorPrivate::setConnectivity(NLM_CONNECTIVITY newConnectivity)
620 {
621     Q_Q(QNetworkStatusMonitor);
622 
623     const bool oldAccessibility = q->isNetworkAccesible();
624     connectivity = newConnectivity;
625     const bool accessibility = q->isNetworkAccesible();
626     if (oldAccessibility != accessibility)
627         emit q->onlineStateChanged(accessibility);
628 }
629 
630 bool QNetworkStatusMonitorPrivate::start()
631 {
632     if (comInitFailed)
633         return false;
634     Q_ASSERT(managerEvents);
635     Q_ASSERT(!monitoring);
636     if (managerEvents->start())
637         monitoring = true;
638     return monitoring;
639 }
640 
641 void QNetworkStatusMonitorPrivate::stop()
642 {
643     Q_ASSERT(managerEvents);
644     Q_ASSERT(monitoring);
645     if (managerEvents->stop())
646         monitoring = false;
647 }
648 
649 QNetworkStatusMonitor::QNetworkStatusMonitor() : QObject(*new QNetworkStatusMonitorPrivate) {}
650 
651 QNetworkStatusMonitor::~QNetworkStatusMonitor() {}
652 
653 bool QNetworkStatusMonitor::start()
654 {
655     if (isMonitoring()) {
656         qCWarning(lcNetMon, "Monitor is already active, call stopMonitoring() first");
657         return false;
658     }
659 
660     return d_func()->start();
661 }
662 
663 void QNetworkStatusMonitor::stop()
664 {
665     if (!isMonitoring()) {
666         qCWarning(lcNetMon, "stopMonitoring was called when not monitoring!");
667         return;
668     }
669 
670     d_func()->stop();
671 }
672 
673 bool QNetworkStatusMonitor::isMonitoring() const
674 {
675     return d_func()->monitoring;
676 }
677 
678 bool QNetworkStatusMonitor::isNetworkAccesible()
679 {
680     return d_func()->connectivity
681             & (NLM_CONNECTIVITY_IPV4_INTERNET | NLM_CONNECTIVITY_IPV6_INTERNET
682                | NLM_CONNECTIVITY_IPV4_SUBNET | NLM_CONNECTIVITY_IPV6_SUBNET);
683 }
684 
685 bool QNetworkStatusMonitor::isEnabled()
686 {
687     return true;
688 }
689 
690 void QNetworkStatusMonitor::reachabilityChanged(bool online)
691 {
692     Q_UNUSED(online);
693     Q_UNREACHABLE();
694 }
695 
696 QT_END_NAMESPACE
