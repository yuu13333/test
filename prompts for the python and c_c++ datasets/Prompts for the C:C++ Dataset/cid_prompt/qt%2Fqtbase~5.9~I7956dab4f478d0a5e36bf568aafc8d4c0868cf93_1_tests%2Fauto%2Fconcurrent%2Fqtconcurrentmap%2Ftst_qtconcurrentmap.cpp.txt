Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the test suite of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:GPL-EXCEPT$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
21 ** included in the packaging of this file. Please review the following
22 ** information to ensure the GNU General Public License requirements will
23 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
24 **
25 ** $QT_END_LICENSE$
26 **
27 ****************************************************************************/
28 #include <qtconcurrentmap.h>
29 #include <qexception.h>
30 
31 #include <qdebug.h>
32 #include <QThread>
33 #include <QMutex>
34 
35 #include <QtTest/QtTest>
36 
37 #include "functions.h"
38 
39 class tst_QtConcurrentMap: public QObject
40 {
41     Q_OBJECT
42 private slots:
43     void map();
44     void blocking_map();
45     void mapped();
46     void blocking_mapped();
47     void mappedReduced();
48     void blocking_mappedReduced();
49     void assignResult();
50     void functionOverloads();
51     void noExceptFunctionOverloads();
52 #ifndef QT_NO_EXCEPTIONS
53     void exceptions();
54 #endif
55     void incrementalResults();
56     void noDetach();
57     void stlContainers();
58     void qFutureAssignmentLeak();
59     void stressTest();
60     void persistentResultTest();
61 public slots:
62     void throttling();
63 };
64 
65 using namespace QtConcurrent;
66 
67 void multiplyBy2Immutable(int x)
68 {
69     x *= 2;
70 }
71 
72 class MultiplyBy2Immutable
73 {
74 public:
75     void operator()(int x)
76     {
77         x *= 2;
78     }
79 };
80 
81 void multiplyBy2InPlace(int &x)
82 {
83     x *= 2;
84 }
85 
86 class MultiplyBy2InPlace
87 {
88 public:
89     void operator()(int &x)
90     {
91         x *= 2;
92     }
93 };
94 
95 Q_DECLARE_METATYPE(QList<Number>);
96 
97 void tst_QtConcurrentMap::map()
98 {
99     // functors take arguments by reference, modifying the sequence in place
100     {
101         QList<int> list;
102         list << 1 << 2 << 3;
103 
104         // functor
105         QtConcurrent::map(list, MultiplyBy2InPlace()).waitForFinished();
106         QCOMPARE(list, QList<int>() << 2 << 4 << 6);
107         QtConcurrent::map(list.begin(), list.end(), MultiplyBy2InPlace()).waitForFinished();
108         QCOMPARE(list, QList<int>() << 4 << 8 << 12);
109 
110         // function
111         QtConcurrent::map(list, multiplyBy2InPlace).waitForFinished();
112         QCOMPARE(list, QList<int>() << 8 << 16 << 24);
113         QtConcurrent::map(list.begin(), list.end(), multiplyBy2InPlace).waitForFinished();
114         QCOMPARE(list, QList<int>() << 16 << 32 << 48);
115 
116         // bound function
117         QtConcurrent::map(list, multiplyBy2InPlace).waitForFinished();
118         QCOMPARE(list, QList<int>() << 32 << 64 << 96);
119         QtConcurrent::map(list.begin(), list.end(), multiplyBy2InPlace).waitForFinished();
120         QCOMPARE(list, QList<int>() << 64 << 128 << 192);
121 
122         // member function
123         QList<Number> numberList;
124         numberList << 1 << 2 << 3;
125         QtConcurrent::map(numberList, &Number::multiplyBy2).waitForFinished();
126         QCOMPARE(numberList, QList<Number>() << 2 << 4 << 6);
127         QtConcurrent::map(numberList.begin(), numberList.end(), &Number::multiplyBy2).waitForFinished();
128         QCOMPARE(numberList, QList<Number>() << 4 << 8 << 12);
129 
130 #ifdef Q_COMPILER_LAMBDA
131         // lambda
132         QtConcurrent::map(list, [](int &x){x *= 2;}).waitForFinished();
133         QCOMPARE(list, QList<int>() << 128 << 256 << 384);
134         QtConcurrent::map(list.begin(), list.end(), [](int &x){x *= 2;}).waitForFinished();
135         QCOMPARE(list, QList<int>() << 256 << 512 << 768);
136 #endif
137 
138     }
139 
140     // functors don't take arguments by reference, making these no-ops
141     {
142         QList<int> list;
143         list << 1 << 2 << 3;
144 
145         // functor
146         QtConcurrent::map(list, MultiplyBy2Immutable()).waitForFinished();
147         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
148         QtConcurrent::map(list.begin(), list.end(), MultiplyBy2Immutable()).waitForFinished();
149         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
150 
151         // function
152         QtConcurrent::map(list, multiplyBy2Immutable).waitForFinished();
153         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
154         QtConcurrent::map(list.begin(), list.end(), multiplyBy2Immutable).waitForFinished();
155         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
156 
157         // bound function
158         QtConcurrent::map(list, multiplyBy2Immutable).waitForFinished();
159         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
160         QtConcurrent::map(list.begin(), list.end(), multiplyBy2Immutable).waitForFinished();
161         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
162 
163 #ifdef Q_COMPILER_LAMBDA
164         // lambda
165         QtConcurrent::map(list, [](int x){x *= 2;}).waitForFinished();
166         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
167         QtConcurrent::map(list.begin(), list.end(), [](int x){x *= 2;}).waitForFinished();
168         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
169 #endif
170     }
171 
172     // Linked lists and forward iterators
173     {
174         QLinkedList<int> list;
175         list << 1 << 2 << 3;
176 
177         // functor
178         QtConcurrent::map(list, MultiplyBy2InPlace()).waitForFinished();
179         QCOMPARE(list, QLinkedList<int>() << 2 << 4 << 6);
180         QtConcurrent::map(list.begin(), list.end(), MultiplyBy2InPlace()).waitForFinished();
181         QCOMPARE(list, QLinkedList<int>() << 4 << 8 << 12);
182 
183         // function
184         QtConcurrent::map(list, multiplyBy2InPlace).waitForFinished();
185         QCOMPARE(list, QLinkedList<int>() << 8 << 16 << 24);
186         QtConcurrent::map(list.begin(), list.end(), multiplyBy2InPlace).waitForFinished();
187         QCOMPARE(list, QLinkedList<int>() << 16 << 32 << 48);
188 
189         // bound function
190         QtConcurrent::map(list, multiplyBy2InPlace).waitForFinished();
191         QCOMPARE(list, QLinkedList<int>() << 32 << 64 << 96);
192         QtConcurrent::map(list.begin(), list.end(), multiplyBy2InPlace).waitForFinished();
193         QCOMPARE(list, QLinkedList<int>() << 64 << 128 << 192);
194 
195         // member function
196         QLinkedList<Number> numberList;
197         numberList << 1 << 2 << 3;
198         QtConcurrent::map(numberList, &Number::multiplyBy2).waitForFinished();
199         QCOMPARE(numberList, QLinkedList<Number>() << 2 << 4 << 6);
200         QtConcurrent::map(numberList.begin(), numberList.end(), &Number::multiplyBy2).waitForFinished();
201         QCOMPARE(numberList, QLinkedList<Number>() << 4 << 8 << 12);
202     }
203 
204 #if 0
205     // not allowed: map() with immutable sequences makes no sense
206     {
207         const QList<int> list = QList<int>() << 1 << 2 << 3;
208 
209         QtConcurrent::map(list, MultiplyBy2Immutable());
210         QtConcurrent::map(list, multiplyBy2Immutable);
211         QtConcurrent::map(list, multiplyBy2Immutable);
212     }
213 #endif
214 
215 #if 0
216     // not allowed: in place modification of a temp copy (since temp copy goes out of scope)
217     {
218         QList<int> list;
219         list << 1 << 2 << 3;
220 
221         QtConcurrent::map(QList<int>(list), MultiplyBy2InPlace());
222         QtConcurrent::map(QList<int>(list), multiplyBy2);
223         QtConcurrent::map(QList<int>(list), multiplyBy2InPlace);
224 
225         QList<Number> numberList;
226         numberList << 1 << 2 << 3;
227         QtConcurrent::map(QList<Number>(numberList), &Number::multiplyBy2);
228     }
229 #endif
230 
231 #if 0
232     // not allowed: map() on a const list, where functors try to modify the items in the list
233     {
234         const QList<int> list = QList<int>() << 1 << 2 << 3;;
235 
236         QtConcurrent::map(list, MultiplyBy2InPlace());
237         QtConcurrent::map(list, multiplyBy2InPlace);
238         QtConcurrent::map(list, multiplyBy2InPlace);
239 
240         const QList<Number> numberList = QList<Number>() << 1 << 2 << 3;
241         QtConcurrent::map(numberList, &Number::multiplyBy2);
242     }
243 #endif
244 }
245 
246 void tst_QtConcurrentMap::blocking_map()
247 {
248     // functors take arguments by reference, modifying the sequence in place
249     {
250         QList<int> list;
251         list << 1 << 2 << 3;
252 
253         // functor
254         QtConcurrent::blockingMap(list, MultiplyBy2InPlace());
255         QCOMPARE(list, QList<int>() << 2 << 4 << 6);
256         QtConcurrent::blockingMap(list.begin(), list.end(), MultiplyBy2InPlace());
257         QCOMPARE(list, QList<int>() << 4 << 8 << 12);
258 
259         // function
260         QtConcurrent::blockingMap(list, multiplyBy2InPlace);
261         QCOMPARE(list, QList<int>() << 8 << 16 << 24);
262         QtConcurrent::blockingMap(list.begin(), list.end(), multiplyBy2InPlace);
263         QCOMPARE(list, QList<int>() << 16 << 32 << 48);
264 
265         // bound function
266         QtConcurrent::blockingMap(list, multiplyBy2InPlace);
267         QCOMPARE(list, QList<int>() << 32 << 64 << 96);
268         QtConcurrent::blockingMap(list.begin(), list.end(), multiplyBy2InPlace);
269         QCOMPARE(list, QList<int>() << 64 << 128 << 192);
270 
271         // member function
272         QList<Number> numberList;
273         numberList << 1 << 2 << 3;
274         QtConcurrent::blockingMap(numberList, &Number::multiplyBy2);
275         QCOMPARE(numberList, QList<Number>() << 2 << 4 << 6);
276         QtConcurrent::blockingMap(numberList.begin(), numberList.end(), &Number::multiplyBy2);
277         QCOMPARE(numberList, QList<Number>() << 4 << 8 << 12);
278     }
279 
280     // functors don't take arguments by reference, making these no-ops
281     {
282         QList<int> list;
283         list << 1 << 2 << 3;
284 
285         // functor
286         QtConcurrent::blockingMap(list, MultiplyBy2Immutable());
287         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
288         QtConcurrent::blockingMap(list.begin(), list.end(), MultiplyBy2Immutable());
289         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
290 
291         // function
292         QtConcurrent::blockingMap(list, multiplyBy2Immutable);
293         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
294         QtConcurrent::blockingMap(list.begin(), list.end(), multiplyBy2Immutable);
295         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
296 
297         // bound function
298         QtConcurrent::blockingMap(list, multiplyBy2Immutable);
299         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
300         QtConcurrent::blockingMap(list.begin(), list.end(), multiplyBy2Immutable);
301         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
302     }
303 
304     // Linked lists and forward iterators
305     {
306         QLinkedList<int> list;
307         list << 1 << 2 << 3;
308 
309         // functor
310         QtConcurrent::blockingMap(list, MultiplyBy2InPlace());
311         QCOMPARE(list, QLinkedList<int>() << 2 << 4 << 6);
312         QtConcurrent::blockingMap(list.begin(), list.end(), MultiplyBy2InPlace());
313         QCOMPARE(list, QLinkedList<int>() << 4 << 8 << 12);
314 
315         // function
316         QtConcurrent::blockingMap(list, multiplyBy2InPlace);
317         QCOMPARE(list, QLinkedList<int>() << 8 << 16 << 24);
318         QtConcurrent::blockingMap(list.begin(), list.end(), multiplyBy2InPlace);
319         QCOMPARE(list, QLinkedList<int>() << 16 << 32 << 48);
320 
321         // bound function
322         QtConcurrent::blockingMap(list, multiplyBy2InPlace);
323         QCOMPARE(list, QLinkedList<int>() << 32 << 64 << 96);
324         QtConcurrent::blockingMap(list.begin(), list.end(), multiplyBy2InPlace);
325         QCOMPARE(list, QLinkedList<int>() << 64 << 128 << 192);
326 
327         // member function
328         QLinkedList<Number> numberList;
329         numberList << 1 << 2 << 3;
330         QtConcurrent::blockingMap(numberList, &Number::multiplyBy2);
331         QCOMPARE(numberList, QLinkedList<Number>() << 2 << 4 << 6);
332         QtConcurrent::blockingMap(numberList.begin(), numberList.end(), &Number::multiplyBy2);
333         QCOMPARE(numberList, QLinkedList<Number>() << 4 << 8 << 12);
334     }
335 
336 #if 0
337     // not allowed: map() with immutable sequences makes no sense
338     {
339         const QList<int> list = QList<int>() << 1 << 2 << 3;
340 
341         QtConcurrent::blockingMap(list, MultiplyBy2Immutable());
342         QtConcurrent::blockkng::map(list, multiplyBy2Immutable);
343         QtConcurrent::blockingMap(list, multiplyBy2Immutable);
344     }
345 #endif
346 
347 #if 0
348     // not allowed: in place modification of a temp copy (since temp copy goes out of scope)
349     {
350         QList<int> list;
351         list << 1 << 2 << 3;
352 
353         QtConcurrent::blockingMap(QList<int>(list), MultiplyBy2InPlace());
354         QtConcurrent::blockingMap(QList<int>(list), multiplyBy2);
355         QtConcurrent::blockingMap(QList<int>(list), multiplyBy2InPlace);
356 
357         QList<Number> numberList;
358         numberList << 1 << 2 << 3;
359         QtConcurrent::blockingMap(QList<Number>(numberList), &Number::multiplyBy2);
360     }
361 #endif
362 
363 #if 0
364     // not allowed: map() on a const list, where functors try to modify the items in the list
365     {
366         const QList<int> list = QList<int>() << 1 << 2 << 3;;
367 
368         QtConcurrent::blockingMap(list, MultiplyBy2InPlace());
369         QtConcurrent::blockingMap(list, multiplyBy2InPlace);
370         QtConcurrent::blockingMap(list, multiplyBy2InPlace);
371 
372         const QList<Number> numberList = QList<Number>() << 1 << 2 << 3;
373         QtConcurrent::blockingMap(numberList, &Number::multiplyBy2);
374     }
375 #endif
376 }
377 
378 int multiplyBy2(int x)
379 {
380     int y = x * 2;
381     return y;
382 }
383 
384 class MultiplyBy2
385 {
386 public:
387     typedef int result_type;
388 
389     int operator()(int x) const
390     {
391         int y = x * 2;
392         return y;
393     }
394 };
395 
396 double intToDouble(int x)
397 {
398     return double(x);
399 }
400 
401 class IntToDouble
402 {
403 public:
404     typedef double result_type;
405 
406     double operator()(int x) const
407     {
408         return double(x);
409     }
410 };
411 
412 int stringToInt(const QString &string)
413 {
414     return string.toInt();
415 }
416 
417 class StringToInt
418 {
419 public:
420     typedef int result_type;
421 
422     int operator()(const QString &string) const
423     {
424         return string.toInt();
425     }
426 };
427 
428 void tst_QtConcurrentMap::mapped()
429 {
430     QList<int> list;
431     list << 1 << 2 << 3;
432     QLinkedList<int> linkedList;
433     linkedList << 1 << 2 << 3;
434     QList<Number> numberList;
435     numberList << 1 << 2 << 3;
436     QLinkedList<Number> numberLinkedList;
437     numberLinkedList << 1 << 2 << 3;
438 
439     // functor
440     {
441         QList<int> list2 = QtConcurrent::mapped(list, MultiplyBy2()).results();
442         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
443         QCOMPARE(list2, QList<int>() << 2 << 4 << 6);
444 
445         QList<int> list3 = QtConcurrent::mapped(list.constBegin(),
446                                                 list.constEnd(),
447                                                 MultiplyBy2()).results();
448         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
449         QCOMPARE(list3, QList<int>() << 2 << 4 << 6);
450 
451         QList<int> list4 = QtConcurrent::mapped(QList<int>(list), MultiplyBy2()).results();
452         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
453         QCOMPARE(list4, QList<int>() << 2 << 4 << 6);
454     }
455     {
456         QList<int> list2 = QtConcurrent::mapped(linkedList, MultiplyBy2()).results();
457         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
458         QCOMPARE(list2, QList<int>() << 2 << 4 << 6);
459 
460         QList<int> list3 = QtConcurrent::mapped(linkedList.constBegin(),
461                                                 linkedList.constEnd(),
462                                                 MultiplyBy2()).results();
463         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
464         QCOMPARE(list3, QList<int>() << 2 << 4 << 6);
465 
466         QList<int> list4 =
467             QtConcurrent::mapped(QLinkedList<int>(linkedList), MultiplyBy2()).results();
468         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
469         QCOMPARE(list4, QList<int>() << 2 << 4 << 6);
470     }
471 
472     // function
473     {
474         QList<int> list2 = QtConcurrent::mapped(list, multiplyBy2).results();
475         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
476         QCOMPARE(list2, QList<int>() << 2 << 4 << 6);
477 
478         QList<int> list3 = QtConcurrent::mapped(list.constBegin(),
479                                                 list.constEnd(),
480                                                 multiplyBy2).results();
481         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
482         QCOMPARE(list3, QList<int>() << 2 << 4 << 6);
483 
484         QList<int> list4 = QtConcurrent::mapped(QList<int>(list), multiplyBy2).results();
485         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
486         QCOMPARE(list4, QList<int>() << 2 << 4 << 6);
487     }
488     {
489         QList<int> list2 = QtConcurrent::mapped(linkedList, multiplyBy2).results();
490         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
491         QCOMPARE(list2, QList<int>() << 2 << 4 << 6);
492 
493         QList<int> list3 = QtConcurrent::mapped(linkedList.constBegin(),
494                                                 linkedList.constEnd(),
495                                                 multiplyBy2).results();
496         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
497         QCOMPARE(list3, QList<int>() << 2 << 4 << 6);
498 
499         QList<int> list4 =
500             QtConcurrent::mapped(QLinkedList<int>(linkedList), multiplyBy2).results();
501         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
502         QCOMPARE(list4, QList<int>() << 2 << 4 << 6);
503     }
504 
505     // bound function
506     {
507         QList<int> list2 = QtConcurrent::mapped(list, multiplyBy2).results();
508         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
509         QCOMPARE(list2, QList<int>() << 2 << 4 << 6);
510 
511         QList<int> list3 = QtConcurrent::mapped(list.constBegin(),
512                                                 list.constEnd(),
513                                                 multiplyBy2).results();
514         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
515         QCOMPARE(list3, QList<int>() << 2 << 4 << 6);
516 
517         QList<int> list4 = QtConcurrent::mapped(QList<int>(list), multiplyBy2).results();
518         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
519         QCOMPARE(list4, QList<int>() << 2 << 4 << 6);
520     }
521     {
522         QList<int> list2 = QtConcurrent::mapped(linkedList, multiplyBy2).results();
523         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
524         QCOMPARE(list2, QList<int>() << 2 << 4 << 6);
525 
526         QList<int> list3 = QtConcurrent::mapped(linkedList.constBegin(),
527                                                 linkedList.constEnd(),
528                                                 multiplyBy2)
529                            .results();
530         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
531         QCOMPARE(list3, QList<int>() << 2 << 4 << 6);
532 
533         QList<int> list4 = QtConcurrent::mapped(QLinkedList<int>(linkedList), multiplyBy2)
534                            .results();
535         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
536         QCOMPARE(list4, QList<int>() << 2 << 4 << 6);
537     }
538 
539     // const member function
540     {
541         QList<Number> numberList2 = QtConcurrent::mapped(numberList, &Number::multipliedBy2)
542                                     .results();
543         QCOMPARE(numberList, QList<Number>() << 1 << 2 << 3);
544         QCOMPARE(numberList2, QList<Number>() << 2 << 4 << 6);
545 
546         QList<Number> numberList3 = QtConcurrent::mapped(numberList.constBegin(),
547                                                          numberList.constEnd(),
548                                                          &Number::multipliedBy2)
549                                     .results();
550         QCOMPARE(numberList, QList<Number>() << 1 << 2 << 3);
551         QCOMPARE(numberList3, QList<Number>() << 2 << 4 << 6);
552 
553         QList<Number> numberList4 = QtConcurrent::mapped(QList<Number>(numberList),
554                                                          &Number::multipliedBy2)
555                                     .results();
556         QCOMPARE(numberList, QList<Number>() << 1 << 2 << 3);
557         QCOMPARE(numberList4, QList<Number>() << 2 << 4 << 6);
558     }
559     {
560         QList<Number> numberList2 = QtConcurrent::mapped(numberLinkedList, &Number::multipliedBy2)
561                                     .results();
562         QCOMPARE(numberLinkedList, QLinkedList<Number>() << 1 << 2 << 3);
563         QCOMPARE(numberList2, QList<Number>() << 2 << 4 << 6);
564 
565         QList<Number> numberList3 = QtConcurrent::mapped(numberLinkedList.constBegin(),
566                                                          numberLinkedList.constEnd(),
567                                                          &Number::multipliedBy2)
568                                     .results();
569         QCOMPARE(numberLinkedList, QLinkedList<Number>() << 1 << 2 << 3);
570         QCOMPARE(numberList3, QList<Number>() << 2 << 4 << 6);
571 
572         QList<Number> numberList4 = QtConcurrent::mapped(QLinkedList<Number>(numberLinkedList),
573                                                          &Number::multipliedBy2)
574                                     .results();
575         QCOMPARE(numberLinkedList, QLinkedList<Number>() << 1 << 2 << 3);
576         QCOMPARE(numberList4, QList<Number>() << 2 << 4 << 6);
577     }
578 
579     // change the value_type, same container
580 
581     // functor
582     {
583         QList<double> list2 = QtConcurrent::mapped(list, IntToDouble()).results();
584         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
585         QCOMPARE(list2, QList<double>() << 1.0 << 2.0 << 3.0);
586 
587         QList<double> list3 = QtConcurrent::mapped(list.constBegin(),
588                                                    list.constEnd(),
589                                                    IntToDouble())
590                               .results();
591         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
592         QCOMPARE(list3, QList<double>() << 1.0 << 2.0 << 3.0);
593 
594         QList<double> list4 = QtConcurrent::mapped(QList<int>(list),
595                                                    IntToDouble())
596                               .results();
597         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
598         QCOMPARE(list4, QList<double>() << 1.0 << 2.0 << 3.0);
599     }
600     {
601         QList<double> list2 = QtConcurrent::mapped(linkedList, IntToDouble()).results();
602         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
603         QCOMPARE(list2, QList<double>() << 1.0 << 2.0 << 3.0);
604 
605         QList<double> list3 = QtConcurrent::mapped(linkedList.constBegin(),
606                                                    linkedList.constEnd(),
607                                                    IntToDouble())
608                               .results();
609         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
610         QCOMPARE(list3, QList<double>() << 1.0 << 2.0 << 3.0);
611 
612         QList<double> list4 = QtConcurrent::mapped(QLinkedList<int>(linkedList),
613                                                    IntToDouble())
614                               .results();
615         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
616         QCOMPARE(list4, QList<double>() << 1.0 << 2.0 << 3.0);
617     }
618 
619     // function
620     {
621         QList<double> list2 = QtConcurrent::mapped(list, intToDouble).results();
622         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
623         QCOMPARE(list2, QList<double>() << 1.0 << 2.0 << 3.0);
624 
625         QList<double> list3 = QtConcurrent::mapped(list.constBegin(),
626                                                    list.constEnd(),
627                                                    intToDouble)
628                               .results();
629         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
630         QCOMPARE(list3, QList<double>() << 1.0 << 2.0 << 3.0);
631 
632         QList<double> list4 = QtConcurrent::mapped(QList<int>(list), intToDouble).results();
633         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
634         QCOMPARE(list4, QList<double>() << 1.0 << 2.0 << 3.0);
635     }
636     {
637         QList<double> list2 = QtConcurrent::mapped(linkedList, intToDouble).results();
638         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
639         QCOMPARE(list2, QList<double>() << 1.0 << 2.0 << 3.0);
640 
641         QList<double> list3 = QtConcurrent::mapped(linkedList.constBegin(),
642                                                    linkedList.constEnd(),
643                                                    intToDouble)
644                               .results();
645         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
646         QCOMPARE(list3, QList<double>() << 1.0 << 2.0 << 3.0);
647 
648         QList<double> list4 = QtConcurrent::mapped(QLinkedList<int>(linkedList), intToDouble)
649                               .results();
650         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
651         QCOMPARE(list4, QList<double>() << 1.0 << 2.0 << 3.0);
652     }
653 
654     // bound function
655     {
656         QList<double> list2 = QtConcurrent::mapped(list, intToDouble).results();
657         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
658         QCOMPARE(list2, QList<double>() << 1.0 << 2.0 << 3.0);
659 
660         QList<double> list3 = QtConcurrent::mapped(list.constBegin(),
661                                                    list.constEnd(),
662                                                    intToDouble)
663                               .results();
664         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
665         QCOMPARE(list3, QList<double>() << 1.0 << 2.0 << 3.0);
666 
667 
668         QList<double> list4 = QtConcurrent::mapped(QList<int>(list),
669                                                    intToDouble)
670                               .results();
671         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
672         QCOMPARE(list4, QList<double>() << 1.0 << 2.0 << 3.0);
673     }
674     {
675         QList<double> list2 = QtConcurrent::mapped(linkedList, intToDouble).results();
676         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
677         QCOMPARE(list2, QList<double>() << 1.0 << 2.0 << 3.0);
678 
679         QList<double> list3 = QtConcurrent::mapped(linkedList.constBegin(),
680                                                    linkedList.constEnd(),
681                                                    intToDouble)
682                               .results();
683         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
684         QCOMPARE(list3, QList<double>() << 1.0 << 2.0 << 3.0);
685 
686 
687         QList<double> list4 = QtConcurrent::mapped(QLinkedList<int>(linkedList),
688                                                    intToDouble)
689                               .results();
690         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
691         QCOMPARE(list4, QList<double>() << 1.0 << 2.0 << 3.0);
692     }
693 
694     // const member function
695     {
696         QList<QString> list2 = QtConcurrent::mapped(numberList, &Number::toString).results();
697         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
698         QCOMPARE(list2, QList<QString>() << "1" << "2" << "3");
699 
700         QList<QString> list3 = QtConcurrent::mapped(numberList.constBegin(),
701                                                     numberList.constEnd(),
702                                                     &Number::toString)
703                                .results();
704         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
705         QCOMPARE(list3, QList<QString>() << "1" << "2" << "3");
706 
707         QList<QString> list4 = QtConcurrent::mapped(QList<Number>(numberList), &Number::toString)
708                                .results();
709         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
710         QCOMPARE(list4, QList<QString>() << "1" << "2" << "3");
711     }
712     {
713         QList<QString> list2 = QtConcurrent::mapped(numberLinkedList, &Number::toString).results();
714         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
715         QCOMPARE(list2, QList<QString>() << "1" << "2" << "3");
716 
717         QList<QString> list3 = QtConcurrent::mapped(numberLinkedList.constBegin(),
718                                                     numberLinkedList.constEnd(),
719                                                     &Number::toString)
720                                .results();
721         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
722         QCOMPARE(list3, QList<QString>() << "1" << "2" << "3");
723 
724         QList<QString> list4 = QtConcurrent::mapped(QLinkedList<Number>(numberLinkedList),
725                                                     &Number::toString)
726                                .results();
727         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
728         QCOMPARE(list4, QList<QString>() << "1" << "2" << "3");
729     }
730 
731     // change the value_type
732     {
733         QList<QString> strings = QStringList() << "1" << "2" << "3";
734         QList<int> list = QtConcurrent::mapped(strings, StringToInt()).results();
735         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
736 
737         QList<int> list2 = QtConcurrent::mapped(strings.constBegin(),
738                                                 strings.constEnd(),
739                                                 StringToInt())
740                            .results();
741         QCOMPARE(list2, QList<int>() << 1 << 2 << 3);
742     }
743     {
744         QList<QString> strings = QStringList() << "1" << "2" << "3";
745         QList<int> list = QtConcurrent::mapped(strings, stringToInt).results();
746         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
747 
748         QList<int> list2 = QtConcurrent::mapped(strings.constBegin(),
749                                                 strings.constEnd(),
750                                                 stringToInt).results();
751         QCOMPARE(list2, QList<int>() << 1 << 2 << 3);
752     }
753 
754     {
755         QList<int> numberList2 = QtConcurrent::mapped(numberList, &Number::toInt).results();
756         QCOMPARE(numberList2, QList<int>() << 1 << 2 << 3);
757 
758         QList<int> numberList3 = QtConcurrent::mapped(numberList.constBegin(),
759                                                       numberList.constEnd(),
760                                                       &Number::toInt)
761                                  .results();
762         QCOMPARE(numberList3, QList<int>() << 1 << 2 << 3);
763     }
764 
765     // change the value_type from QStringList
766     {
767         QStringList strings = QStringList() << "1" << "2" << "3";
768         QList<int> list = QtConcurrent::mapped(strings, StringToInt()).results();
769         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
770 
771         QList<int> list2 = QtConcurrent::mapped(strings.constBegin(),
772                                                 strings.constEnd(),
773                                                 StringToInt())
774                            .results();
775         QCOMPARE(list2, QList<int>() << 1 << 2 << 3);
776     }
777     {
778         QStringList strings = QStringList() << "1" << "2" << "3";
779         QList<int> list = QtConcurrent::mapped(strings, stringToInt).results();
780         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
781 
782         QList<int> list2 = QtConcurrent::mapped(strings.constBegin(),
783                                                 strings.constEnd(),
784                                                 stringToInt)
785                            .results();
786         QCOMPARE(list2, QList<int>() << 1 << 2 << 3);
787     }
788 }
789 
790 void tst_QtConcurrentMap::blocking_mapped()
791 {
792     QList<int> list;
793     list << 1 << 2 << 3;
794     QLinkedList<int> linkedList;
795     linkedList << 1 << 2 << 3;
796     QList<Number> numberList;
797     numberList << 1 << 2 << 3;
798     QLinkedList<Number> numberLinkedList;
799     numberLinkedList << 1 << 2 << 3;
800 
801     // functor
802     {
803         QList<int> list2 = QtConcurrent::blockingMapped(list, MultiplyBy2());
804         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
805         QCOMPARE(list2, QList<int>() << 2 << 4 << 6);
806 
807         QList<int> list3 = QtConcurrent::blockingMapped<QList<int> >(list.constBegin(),
808                                                                        list.constEnd(),
809                                                                        MultiplyBy2());
810         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
811         QCOMPARE(list3, QList<int>() << 2 << 4 << 6);
812 
813         QList<int> list4 = QtConcurrent::blockingMapped(QList<int>(list), MultiplyBy2());
814         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
815         QCOMPARE(list4, QList<int>() << 2 << 4 << 6);
816     }
817     {
818         QLinkedList<int> linkedList2 = QtConcurrent::blockingMapped(linkedList, MultiplyBy2());
819         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
820         QCOMPARE(linkedList2, QLinkedList<int>() << 2 << 4 << 6);
821 
822         QLinkedList<int> linkedList3 = QtConcurrent::blockingMapped<QLinkedList<int> >(linkedList.constBegin(),
823                                                                        linkedList.constEnd(),
824                                                                        MultiplyBy2());
825         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
826         QCOMPARE(linkedList3, QLinkedList<int>() << 2 << 4 << 6);
827 
828         QLinkedList<int> linkedList4 = QtConcurrent::blockingMapped(QLinkedList<int>(linkedList), MultiplyBy2());
829         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
830         QCOMPARE(linkedList4, QLinkedList<int>() << 2 << 4 << 6);
831     }
832 
833     // function
834     {
835         QList<int> list2 = QtConcurrent::blockingMapped(list, multiplyBy2);
836         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
837         QCOMPARE(list2, QList<int>() << 2 << 4 << 6);
838 
839         QList<int> list3 = QtConcurrent::blockingMapped<QList<int> >(list.constBegin(),
840                                                              list.constEnd(),
841                                                              multiplyBy2);
842         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
843         QCOMPARE(list3, QList<int>() << 2 << 4 << 6);
844 
845         QList<int> list4 = QtConcurrent::blockingMapped(QList<int>(list), multiplyBy2);
846         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
847         QCOMPARE(list4, QList<int>() << 2 << 4 << 6);
848     }
849     {
850         QLinkedList<int> linkedList2 = QtConcurrent::blockingMapped(linkedList, multiplyBy2);
851         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
852         QCOMPARE(linkedList2, QLinkedList<int>() << 2 << 4 << 6);
853 
854         QLinkedList<int> linkedList3 = QtConcurrent::blockingMapped<QLinkedList<int> >(linkedList.constBegin(),
855                                                              linkedList.constEnd(),
856                                                              multiplyBy2);
857         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
858         QCOMPARE(linkedList3, QLinkedList<int>() << 2 << 4 << 6);
859 
860         QLinkedList<int> linkedList4 = QtConcurrent::blockingMapped(QLinkedList<int>(linkedList), multiplyBy2);
861         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
862         QCOMPARE(linkedList4, QLinkedList<int>() << 2 << 4 << 6);
863     }
864 
865     // bound function
866     {
867         QList<int> list2 = QtConcurrent::blockingMapped(list, multiplyBy2);
868         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
869         QCOMPARE(list2, QList<int>() << 2 << 4 << 6);
870 
871         QList<int> list3 = QtConcurrent::blockingMapped<QList<int> >(list.constBegin(),
872                                                              list.constEnd(),
873                                                              multiplyBy2);
874         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
875         QCOMPARE(list3, QList<int>() << 2 << 4 << 6);
876 
877         QList<int> list4 = QtConcurrent::blockingMapped(QList<int>(list), multiplyBy2);
878         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
879         QCOMPARE(list4, QList<int>() << 2 << 4 << 6);
880     }
881     {
882         QLinkedList<int> linkedList2 = QtConcurrent::blockingMapped(linkedList, multiplyBy2);
883         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
884         QCOMPARE(linkedList2, QLinkedList<int>() << 2 << 4 << 6);
885 
886         QLinkedList<int> linkedList3 = QtConcurrent::blockingMapped<QLinkedList<int> >(linkedList.constBegin(),
887                                                              linkedList.constEnd(),
888                                                              multiplyBy2);
889         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
890         QCOMPARE(linkedList3, QLinkedList<int>() << 2 << 4 << 6);
891 
892         QLinkedList<int> linkedList4 = QtConcurrent::blockingMapped(QLinkedList<int>(linkedList), multiplyBy2);
893         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
894         QCOMPARE(linkedList4, QLinkedList<int>() << 2 << 4 << 6);
895     }
896 
897     // const member function
898     {
899         QList<Number> numberList2 = QtConcurrent::blockingMapped(numberList, &Number::multipliedBy2);
900         QCOMPARE(numberList, QList<Number>() << 1 << 2 << 3);
901         QCOMPARE(numberList2, QList<Number>() << 2 << 4 << 6);
902 
903         QList<Number> numberList3 = QtConcurrent::blockingMapped<QList<Number> >(numberList.constBegin(),
904                                                                          numberList.constEnd(),
905                                                                          &Number::multipliedBy2);
906         QCOMPARE(numberList, QList<Number>() << 1 << 2 << 3);
907         QCOMPARE(numberList3, QList<Number>() << 2 << 4 << 6);
908 
909         QList<Number> numberList4 = QtConcurrent::blockingMapped(QList<Number>(numberList),
910                                                          &Number::multipliedBy2);
911         QCOMPARE(numberList, QList<Number>() << 1 << 2 << 3);
912         QCOMPARE(numberList4, QList<Number>() << 2 << 4 << 6);
913     }
914     {
915         QLinkedList<Number> numberLinkedList2 = QtConcurrent::blockingMapped(numberLinkedList, &Number::multipliedBy2);
916         QCOMPARE(numberLinkedList, QLinkedList<Number>() << 1 << 2 << 3);
917         QCOMPARE(numberLinkedList2, QLinkedList<Number>() << 2 << 4 << 6);
918 
919         QLinkedList<Number> numberLinkedList3 = QtConcurrent::blockingMapped<QLinkedList<Number> >(numberLinkedList.constBegin(),
920                                                                          numberLinkedList.constEnd(),
921                                                                          &Number::multipliedBy2);
922         QCOMPARE(numberLinkedList, QLinkedList<Number>() << 1 << 2 << 3);
923         QCOMPARE(numberLinkedList3, QLinkedList<Number>() << 2 << 4 << 6);
924 
925         QLinkedList<Number> numberLinkedList4 = QtConcurrent::blockingMapped(QLinkedList<Number>(numberLinkedList),
926                                                          &Number::multipliedBy2);
927         QCOMPARE(numberLinkedList, QLinkedList<Number>() << 1 << 2 << 3);
928         QCOMPARE(numberLinkedList4, QLinkedList<Number>() << 2 << 4 << 6);
929     }
930 
931     // change the value_type, same container
932 
933     // functor
934     {
935         QList<double> list2 = QtConcurrent::blockingMapped<QList<double> >(list, IntToDouble());
936         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
937         QCOMPARE(list2, QList<double>() << 1.0 << 2.0 << 3.0);
938 
939         QList<double> list3 = QtConcurrent::blockingMapped<QList<double> >(list.constBegin(),
940                                                                    list.constEnd(),
941                                                                    IntToDouble());
942         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
943         QCOMPARE(list3, QList<double>() << 1.0 << 2.0 << 3.0);
944 
945         QList<double> list4 = QtConcurrent::blockingMapped<QList<double> >(QList<int>(list),
946                                                                    IntToDouble());
947         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
948         QCOMPARE(list4, QList<double>() << 1.0 << 2.0 << 3.0);
949     }
950     {
951         QLinkedList<double> linkedList2 = QtConcurrent::blockingMapped<QLinkedList<double> >(linkedList, IntToDouble());
952         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
953         QCOMPARE(linkedList2, QLinkedList<double>() << 1.0 << 2.0 << 3.0);
954 
955         QLinkedList<double> linkedList3 = QtConcurrent::blockingMapped<QLinkedList<double> >(linkedList.constBegin(),
956                                                                    linkedList.constEnd(),
957                                                                    IntToDouble());
958         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
959         QCOMPARE(linkedList3, QLinkedList<double>() << 1.0 << 2.0 << 3.0);
960 
961         QLinkedList<double> linkedList4 = QtConcurrent::blockingMapped<QLinkedList<double> >(QLinkedList<int>(linkedList),
962                                                                    IntToDouble());
963         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
964         QCOMPARE(linkedList4, QLinkedList<double>() << 1.0 << 2.0 << 3.0);
965     }
966 
967     // function
968     {
969         QList<double> list2 = QtConcurrent::blockingMapped<QList<double> >(list, intToDouble);
970         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
971         QCOMPARE(list2, QList<double>() << 1.0 << 2.0 << 3.0);
972 
973         QList<double> list3 = QtConcurrent::blockingMapped<QList<double> >(list.constBegin(),
974                                                                    list.constEnd(),
975                                                                    intToDouble);
976         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
977         QCOMPARE(list3, QList<double>() << 1.0 << 2.0 << 3.0);
978 
979         QList<double> list4 = QtConcurrent::blockingMapped<QList<double> >(QList<int>(list), intToDouble);
980         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
981         QCOMPARE(list4, QList<double>() << 1.0 << 2.0 << 3.0);
982     }
983     {
984         QLinkedList<double> linkedList2 = QtConcurrent::blockingMapped<QLinkedList<double> >(linkedList, intToDouble);
985         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
986         QCOMPARE(linkedList2, QLinkedList<double>() << 1.0 << 2.0 << 3.0);
987 
988         QLinkedList<double> linkedList3 = QtConcurrent::blockingMapped<QLinkedList<double> >(linkedList.constBegin(),
989                                                                    linkedList.constEnd(),
990                                                                    intToDouble);
991         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
992         QCOMPARE(linkedList3, QLinkedList<double>() << 1.0 << 2.0 << 3.0);
993 
994         QLinkedList<double> linkedList4 = QtConcurrent::blockingMapped<QLinkedList<double> >(QLinkedList<int>(linkedList), intToDouble);
995         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
996         QCOMPARE(linkedList4, QLinkedList<double>() << 1.0 << 2.0 << 3.0);
997     }
998 
999     // bound function
1000     {
1001         QList<double> list2 = QtConcurrent::blockingMapped<QList<double> >(list, intToDouble);
1002         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1003         QCOMPARE(list2, QList<double>() << 1.0 << 2.0 << 3.0);
1004 
1005         QList<double> list3 = QtConcurrent::blockingMapped<QList<double> >(list.constBegin(),
1006                                                                    list.constEnd(),
1007                                                                    intToDouble);
1008         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1009         QCOMPARE(list3, QList<double>() << 1.0 << 2.0 << 3.0);
1010 
1011 
1012         QList<double> list4 = QtConcurrent::blockingMapped<QList<double> >(QList<int>(list),
1013                                                                    intToDouble);
1014         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1015         QCOMPARE(list4, QList<double>() << 1.0 << 2.0 << 3.0);
1016     }
1017     {
1018         QLinkedList<double> linkedList2 = QtConcurrent::blockingMapped<QLinkedList<double> >(linkedList, intToDouble);
1019         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1020         QCOMPARE(linkedList2, QLinkedList<double>() << 1.0 << 2.0 << 3.0);
1021 
1022         QLinkedList<double> linkedList3 = QtConcurrent::blockingMapped<QLinkedList<double> >(linkedList.constBegin(),
1023                                                                    linkedList.constEnd(),
1024                                                                    intToDouble);
1025         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1026         QCOMPARE(linkedList3, QLinkedList<double>() << 1.0 << 2.0 << 3.0);
1027 
1028 
1029         QLinkedList<double> linkedList4 = QtConcurrent::blockingMapped<QLinkedList<double> >(QLinkedList<int>(linkedList),
1030                                                                    intToDouble);
1031         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1032         QCOMPARE(linkedList4, QLinkedList<double>() << 1.0 << 2.0 << 3.0);
1033     }
1034 
1035     // const member function
1036     {
1037         QList<QString> list2 =
1038             QtConcurrent::blockingMapped<QList<QString> >(numberList, &Number::toString);
1039         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1040         QCOMPARE(list2, QList<QString>() << "1" << "2" << "3");
1041 
1042         QList<QString> list3 = QtConcurrent::blockingMapped<QList<QString> >(numberList.constBegin(),
1043                                                                      numberList.constEnd()
1044                                                                      , &Number::toString);
1045         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1046         QCOMPARE(list3, QList<QString>() << "1" << "2" << "3");
1047 
1048         QList<QString> list4 =
1049             QtConcurrent::blockingMapped<QList<QString> >(QList<Number>(numberList), &Number::toString);
1050         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1051         QCOMPARE(list4, QList<QString>() << "1" << "2" << "3");
1052     }
1053     {
1054         QLinkedList<QString> linkedList2 =
1055             QtConcurrent::blockingMapped<QLinkedList<QString> >(numberLinkedList, &Number::toString);
1056         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1057         QCOMPARE(linkedList2, QLinkedList<QString>() << "1" << "2" << "3");
1058 
1059         QLinkedList<QString> linkedList3 = QtConcurrent::blockingMapped<QLinkedList<QString> >(numberLinkedList.constBegin(),
1060                                                                      numberLinkedList.constEnd()
1061                                                                      , &Number::toString);
1062         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1063         QCOMPARE(linkedList3, QLinkedList<QString>() << "1" << "2" << "3");
1064 
1065         QLinkedList<QString> linkedList4 =
1066             QtConcurrent::blockingMapped<QLinkedList<QString> >(QLinkedList<Number>(numberLinkedList), &Number::toString);
1067         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1068         QCOMPARE(linkedList4, QLinkedList<QString>() << "1" << "2" << "3");
1069     }
1070 
1071     // change the value_type
1072     {
1073         QList<QString> strings = QStringList() << "1" << "2" << "3";
1074         QList<int> list = QtConcurrent::blockingMapped(strings, StringToInt());
1075         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1076 
1077         QList<int> list2 = QtConcurrent::blockingMapped<QList<int> >(strings.constBegin(),
1078                                                              strings.constEnd(),
1079                                                              StringToInt());
1080         QCOMPARE(list2, QList<int>() << 1 << 2 << 3);
1081     }
1082     {
1083         QList<QString> strings = QStringList() << "1" << "2" << "3";
1084         QList<int> list = QtConcurrent::blockingMapped(strings, stringToInt);
1085         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1086 
1087         QList<int> list2 = QtConcurrent::blockingMapped<QList<int> >(strings.constBegin(),
1088                                                              strings.constEnd(),
1089                                                              stringToInt);
1090         QCOMPARE(list2, QList<int>() << 1 << 2 << 3);
1091     }
1092 
1093     {
1094         QList<int> numberList2 = QtConcurrent::blockingMapped(numberList, &Number::toInt);
1095         QCOMPARE(numberList2, QList<int>() << 1 << 2 << 3);
1096 
1097         QList<int> numberList3 = QtConcurrent::blockingMapped<QList<int> >(numberList.constBegin(),
1098                                                                    numberList.constEnd(),
1099                                                                    &Number::toInt);
1100         QCOMPARE(numberList3, QList<int>() << 1 << 2 << 3);
1101     }
1102 
1103     // change the value_type from QStringList
1104     {
1105         QStringList strings = QStringList() << "1" << "2" << "3";
1106         QList<int> list = QtConcurrent::blockingMapped(strings, StringToInt());
1107         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1108 
1109         QList<int> list2 = QtConcurrent::blockingMapped<QList<int> >(strings.constBegin(),
1110                                                              strings.constEnd(),
1111                                                              StringToInt());
1112         QCOMPARE(list2, QList<int>() << 1 << 2 << 3);
1113     }
1114     {
1115         QStringList strings = QStringList() << "1" << "2" << "3";
1116         QList<int> list = QtConcurrent::blockingMapped(strings, stringToInt);
1117         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1118 
1119         QList<int> list2 = QtConcurrent::blockingMapped<QList<int> >(strings.constBegin(),
1120                                                              strings.constEnd(),
1121                                                              stringToInt);
1122         QCOMPARE(list2, QList<int>() << 1 << 2 << 3);
1123     }
1124 
1125     // functor
1126     {
1127         QVector<double> list2 = QtConcurrent::blockingMapped<QVector<double> >(list, IntToDouble());
1128         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1129         QCOMPARE(list2, QVector<double>() << 1.0 << 2.0 << 3.0);
1130 
1131         QVector<double> list3 = QtConcurrent::blockingMapped<QVector<double> >(list.constBegin(),
1132                                                                        list.constEnd(),
1133                                                                        IntToDouble());
1134         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1135         QCOMPARE(list3, QVector<double>() << 1.0 << 2.0 << 3.0);
1136 
1137         QVector<double> list4 = QtConcurrent::blockingMapped<QVector<double> >(QList<int>(list),
1138                                                                        IntToDouble());
1139         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1140         QCOMPARE(list4, QVector<double>() << 1.0 << 2.0 << 3.0);
1141 
1142         QStringList strings = QStringList() << "1" << "2" << "3";
1143         QVector<int> list5 = QtConcurrent::blockingMapped<QVector<int> >(strings, StringToInt());
1144         QCOMPARE(list5, QVector<int>() << 1 << 2 << 3);
1145 
1146         QVector<int> list6 = QtConcurrent::blockingMapped<QVector<int> >(strings.constBegin(),
1147                                                                  strings.constEnd(),
1148                                                                  StringToInt());
1149         QCOMPARE(list6, QVector<int>() << 1 << 2 << 3);
1150 
1151         QVector<int> list7 = QtConcurrent::blockingMapped<QVector<int> >(QStringList(strings),
1152                                                                  StringToInt());
1153         QCOMPARE(list7, QVector<int>() << 1 << 2 << 3);
1154     }
1155 
1156     // function
1157     {
1158         QVector<double> list2 = QtConcurrent::blockingMapped<QVector<double> >(list, intToDouble);
1159         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1160         QCOMPARE(list2, QVector<double>() << 1.0 << 2.0 << 3.0);
1161 
1162         QVector<double> list3 = QtConcurrent::blockingMapped<QVector<double> >(list.constBegin(),
1163                                                                        list.constEnd(),
1164                                                                        intToDouble);
1165         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1166         QCOMPARE(list3, QVector<double>() << 1.0 << 2.0 << 3.0);
1167 
1168         QVector<double> list4 = QtConcurrent::blockingMapped<QVector<double> >(QList<int>(list),
1169                                                                        intToDouble);
1170         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1171         QCOMPARE(list4, QVector<double>() << 1.0 << 2.0 << 3.0);
1172 
1173         QStringList strings = QStringList() << "1" << "2" << "3";
1174         QVector<int> list5 = QtConcurrent::blockingMapped<QVector<int> >(strings, stringToInt);
1175         QCOMPARE(list5, QVector<int>() << 1 << 2 << 3);
1176 
1177         QVector<int> list6 = QtConcurrent::blockingMapped<QVector<int> >(strings.constBegin(),
1178                                                                  strings.constEnd(),
1179                                                                  stringToInt);
1180         QCOMPARE(list6, QVector<int>() << 1 << 2 << 3);
1181 
1182         QVector<int> list7 = QtConcurrent::blockingMapped<QVector<int> >(QStringList(strings),
1183                                                                  stringToInt);
1184         QCOMPARE(list7, QVector<int>() << 1 << 2 << 3);
1185     }
1186 
1187     // bound function
1188     {
1189         QVector<double> list2 = QtConcurrent::blockingMapped<QVector<double> >(list, intToDouble);
1190         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1191         QCOMPARE(list2, QVector<double>() << 1.0 << 2.0 << 3.0);
1192 
1193         QVector<double> list3 = QtConcurrent::blockingMapped<QVector<double> >(QList<int>(list), intToDouble);
1194         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1195         QCOMPARE(list3, QVector<double>() << 1.0 << 2.0 << 3.0);
1196 
1197         QStringList strings = QStringList() << "1" << "2" << "3";
1198         QVector<int> list4 = QtConcurrent::blockingMapped<QVector<int> >(strings, stringToInt);
1199         QCOMPARE(list4, QVector<int>() << 1 << 2 << 3);
1200 
1201         QVector<int> list5 = QtConcurrent::blockingMapped<QVector<int> >(QStringList(strings), stringToInt);
1202         QCOMPARE(list5, QVector<int>() << 1 << 2 << 3);
1203     }
1204 
1205     // const member function
1206     {
1207         QVector<QString> list2 = QtConcurrent::blockingMapped<QVector<QString> >(numberList, &Number::toString);
1208         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1209         QCOMPARE(list2, QVector<QString>() << "1" << "2" << "3");
1210 
1211         QVector<QString> list3 =
1212             QtConcurrent::blockingMapped<QVector<QString> >(QList<Number>(numberList), &Number::toString);
1213         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1214         QCOMPARE(list3, QVector<QString>() << "1" << "2" << "3");
1215 
1216         // not allowed: const member function where all arguments have default values
1217 #if 0
1218         QStringList strings = QStringList() << "1" << "2" << "3";
1219         QVector<int> list4 = QtConcurrent::blockingMapped<QVector<int> >(strings, &QString::toInt);
1220         QCOMPARE(list4, QVector<int>() << 1 << 2 << 3);
1221 
1222         QVector<int> list5 = QtConcurrent::blockingMapped<QVector<int> >(QStringList(strings), &QString::toInt);
1223         QCOMPARE(list5, QVector<int>() << 1 << 2 << 3);
1224 #endif
1225     }
1226 }
1227 
1228 int intSquare(int x)
1229 {
1230     return x * x;
1231 }
1232 
1233 class IntSquare
1234 {
1235 public:
1236     typedef int result_type;
1237 
1238     int operator()(int x)
1239     {
1240         return x * x;
1241     }
1242 };
1243 
1244 void tst_QtConcurrentMap::mappedReduced()
1245 {
1246     QList<int> list;
1247     list << 1 << 2 << 3;
1248     QLinkedList<int> linkedList;
1249     linkedList << 1 << 2 << 3;
1250     QList<Number> numberList;
1251     numberList << 1 << 2 << 3;
1252     QLinkedList<Number> numberLinkedList;
1253     numberLinkedList << 1 << 2 << 3;
1254 
1255     // test Q_DECLARE_OPERATORS_FOR_FLAGS
1256     QtConcurrent::ReduceOptions opt = (QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce);
1257     QVERIFY(opt);
1258 
1259     // functor-functor
1260     {
1261         int sum = QtConcurrent::mappedReduced<int>(list, IntSquare(), IntSumReduce());
1262         QCOMPARE(sum, 14);
1263         int sum2 = QtConcurrent::mappedReduced<int>(list.constBegin(),
1264                                                     list.constEnd(),
1265                                                     IntSquare(),
1266                                                     IntSumReduce());
1267         QCOMPARE(sum2, 14);
1268 
1269         int sum3 = QtConcurrent::mappedReduced<int>(QList<int>(list), IntSquare(), IntSumReduce());
1270         QCOMPARE(sum3, 14);
1271 
1272         int sum4 = QtConcurrent::mappedReduced<int>(list, intSquare, intSumReduce);
1273         QCOMPARE(sum4, 14);
1274         int sum5 = QtConcurrent::mappedReduced<int>(list.constBegin(),
1275                                                     list.constEnd(),
1276                                                     intSquare,
1277                                                     intSumReduce);
1278         QCOMPARE(sum5, 14);
1279 
1280         int sum6 = QtConcurrent::mappedReduced<int>(QList<int>(list),
1281                                                     intSquare,
1282                                                     intSumReduce);
1283         QCOMPARE(sum6, 14);
1284     }
1285     {
1286         int sum = QtConcurrent::mappedReduced<int>(linkedList, IntSquare(), IntSumReduce());
1287         QCOMPARE(sum, 14);
1288         int sum2 = QtConcurrent::mappedReduced<int>(linkedList.constBegin(),
1289                                                     linkedList.constEnd(),
1290                                                     IntSquare(),
1291                                                     IntSumReduce());
1292         QCOMPARE(sum2, 14);
1293 
1294         int sum3 = QtConcurrent::mappedReduced<int>(QLinkedList<int>(linkedList), IntSquare(), IntSumReduce());
1295         QCOMPARE(sum3, 14);
1296 
1297         int sum4 = QtConcurrent::mappedReduced<int>(linkedList, intSquare, intSumReduce);
1298         QCOMPARE(sum4, 14);
1299         int sum5 = QtConcurrent::mappedReduced<int>(linkedList.constBegin(),
1300                                                     linkedList.constEnd(),
1301                                                     intSquare,
1302                                                     intSumReduce);
1303         QCOMPARE(sum5, 14);
1304 
1305         int sum6 = QtConcurrent::mappedReduced<int>(QLinkedList<int>(linkedList),
1306                                                     intSquare,
1307                                                     intSumReduce);
1308         QCOMPARE(sum6, 14);
1309     }
1310 
1311     // function-functor
1312     {
1313         int sum = QtConcurrent::mappedReduced<int>(list, intSquare, IntSumReduce());
1314         QCOMPARE(sum, 14);
1315         int sum2 = QtConcurrent::mappedReduced<int>(list.constBegin(),
1316                                                     list.constEnd(),
1317                                                     intSquare,
1318                                                     IntSumReduce());
1319         QCOMPARE(sum2, 14);
1320 
1321         int sum3 = QtConcurrent::mappedReduced<int>(QList<int>(list), intSquare, IntSumReduce());
1322         QCOMPARE(sum3, 14);
1323     }
1324     {
1325         int sum = QtConcurrent::mappedReduced<int>(linkedList, intSquare, IntSumReduce());
1326         QCOMPARE(sum, 14);
1327         int sum2 = QtConcurrent::mappedReduced<int>(linkedList.constBegin(),
1328                                                     linkedList.constEnd(),
1329                                                     intSquare,
1330                                                     IntSumReduce());
1331         QCOMPARE(sum2, 14);
1332 
1333         int sum3 = QtConcurrent::mappedReduced<int>(QLinkedList<int>(linkedList), intSquare, IntSumReduce());
1334         QCOMPARE(sum3, 14);
1335     }
1336 
1337     // functor-function
1338     {
1339         int sum = QtConcurrent::mappedReduced(list, IntSquare(), intSumReduce);
1340         QCOMPARE(sum, 14);
1341         int sum2 = QtConcurrent::mappedReduced(list.constBegin(),
1342                                                list.constEnd(),
1343                                                IntSquare(),
1344                                                intSumReduce);
1345         QCOMPARE(sum2, 14);
1346 
1347         int sum3 = QtConcurrent::mappedReduced(QList<int>(list), IntSquare(), intSumReduce);
1348         QCOMPARE(sum3, 14);
1349     }
1350     {
1351         int sum = QtConcurrent::mappedReduced(linkedList, IntSquare(), intSumReduce);
1352         QCOMPARE(sum, 14);
1353         int sum2 = QtConcurrent::mappedReduced(linkedList.constBegin(),
1354                                                linkedList.constEnd(),
1355                                                IntSquare(),
1356                                                intSumReduce);
1357         QCOMPARE(sum2, 14);
1358 
1359         int sum3 = QtConcurrent::mappedReduced(QLinkedList<int>(linkedList), IntSquare(), intSumReduce);
1360         QCOMPARE(sum3, 14);
1361     }
1362 
1363     // function-function
1364     {
1365         int sum = QtConcurrent::mappedReduced(list, intSquare, intSumReduce);
1366         QCOMPARE(sum, 14);
1367         int sum2 = QtConcurrent::mappedReduced(list.constBegin(),
1368                                                list.constEnd(),
1369                                                intSquare,
1370                                                intSumReduce);
1371         QCOMPARE(sum2, 14);
1372 
1373         int sum3 = QtConcurrent::mappedReduced(QList<int>(list), intSquare, intSumReduce);
1374         QCOMPARE(sum3, 14);
1375     }
1376     {
1377         int sum = QtConcurrent::mappedReduced(linkedList, intSquare, intSumReduce);
1378         QCOMPARE(sum, 14);
1379         int sum2 = QtConcurrent::mappedReduced(linkedList.constBegin(),
1380                                                linkedList.constEnd(),
1381                                                intSquare,
1382                                                intSumReduce);
1383         QCOMPARE(sum2, 14);
1384 
1385         int sum3 = QtConcurrent::mappedReduced(QLinkedList<int>(linkedList), intSquare, intSumReduce);
1386         QCOMPARE(sum3, 14);
1387     }
1388 
1389     // functor-member
1390     {
1391         QList<int> list2 = QtConcurrent::mappedReduced(list,
1392                                                        IntSquare(),
1393                                                        &QList<int>::push_back,
1394                                                        OrderedReduce);
1395         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1396         QCOMPARE(list2, QList<int>() << 1 << 4 << 9);
1397 
1398         QList<int> list3 = QtConcurrent::mappedReduced(list.constBegin(),
1399                                                        list.constEnd(),
1400                                                        IntSquare(),
1401                                                        &QList<int>::push_back,
1402                                                        OrderedReduce);
1403         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1404         QCOMPARE(list3, QList<int>() << 1 << 4 << 9);
1405 
1406         QList<int> list4 = QtConcurrent::mappedReduced(QList<int>(list),
1407                                                        IntSquare(),
1408                                                        &QList<int>::push_back,
1409                                                        OrderedReduce);
1410         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1411         QCOMPARE(list4, QList<int>() << 1 << 4 << 9);
1412     }
1413     {
1414         QLinkedList<int> linkedList2 = QtConcurrent::mappedReduced(linkedList,
1415                                                        IntSquare(),
1416                                                        &QLinkedList<int>::push_back,
1417                                                        OrderedReduce);
1418         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1419         QCOMPARE(linkedList2, QLinkedList<int>() << 1 << 4 << 9);
1420 
1421         QLinkedList<int> linkedList3 = QtConcurrent::mappedReduced(linkedList.constBegin(),
1422                                                        linkedList.constEnd(),
1423                                                        IntSquare(),
1424                                                        &QLinkedList<int>::push_back,
1425                                                        OrderedReduce);
1426         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1427         QCOMPARE(linkedList3, QLinkedList<int>() << 1 << 4 << 9);
1428 
1429         QLinkedList<int> linkedList4 = QtConcurrent::mappedReduced(QLinkedList<int>(linkedList),
1430                                                        IntSquare(),
1431                                                        &QLinkedList<int>::push_back,
1432                                                        OrderedReduce);
1433         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1434         QCOMPARE(linkedList4, QLinkedList<int>() << 1 << 4 << 9);
1435     }
1436 
1437     // member-functor
1438     {
1439         int sum = QtConcurrent::mappedReduced<int>(numberList, &Number::toInt, IntSumReduce());
1440         QCOMPARE(sum, 6);
1441         int sum2 = QtConcurrent::mappedReduced<int>(numberList.constBegin(),
1442                                                     numberList.constEnd(),
1443                                                     &Number::toInt,
1444                                                     IntSumReduce());
1445         QCOMPARE(sum2, 6);
1446 
1447         int sum3 = QtConcurrent::mappedReduced<int>(QList<Number>(numberList),
1448                                                     &Number::toInt,
1449                                                     IntSumReduce());
1450         QCOMPARE(sum3, 6);
1451     }
1452     {
1453         int sum = QtConcurrent::mappedReduced<int>(numberLinkedList, &Number::toInt, IntSumReduce());
1454         QCOMPARE(sum, 6);
1455         int sum2 = QtConcurrent::mappedReduced<int>(numberLinkedList.constBegin(),
1456                                                     numberLinkedList.constEnd(),
1457                                                     &Number::toInt,
1458                                                     IntSumReduce());
1459         QCOMPARE(sum2, 6);
1460 
1461         int sum3 = QtConcurrent::mappedReduced<int>(QLinkedList<Number>(numberLinkedList),
1462                                                     &Number::toInt,
1463                                                     IntSumReduce());
1464         QCOMPARE(sum3, 6);
1465     }
1466 
1467     // member-member
1468     {
1469         QList<int> list2 = QtConcurrent::mappedReduced(numberList,
1470                                                        &Number::toInt,
1471                                                        &QList<int>::push_back,
1472                                                        OrderedReduce);
1473         QCOMPARE(list2, QList<int>() << 1 << 2 << 3);
1474 
1475         QList<int> list3 = QtConcurrent::mappedReduced(numberList.constBegin(),
1476                                                        numberList.constEnd(),
1477                                                        &Number::toInt,
1478                                                        &QList<int>::push_back,
1479                                                        OrderedReduce);
1480         QCOMPARE(list3, QList<int>() << 1 << 2 << 3);
1481 
1482         QList<int> list4 = QtConcurrent::mappedReduced(QList<Number>(numberList),
1483                                                        &Number::toInt,
1484                                                        &QList<int>::push_back, OrderedReduce);
1485         QCOMPARE(list4, QList<int>() << 1 << 2 << 3);
1486     }
1487     {
1488         QLinkedList<int> linkedList2 = QtConcurrent::mappedReduced(numberLinkedList,
1489                                                        &Number::toInt,
1490                                                        &QLinkedList<int>::push_back,
1491                                                        OrderedReduce);
1492         QCOMPARE(linkedList2, QLinkedList<int>() << 1 << 2 << 3);
1493 
1494         QLinkedList<int> linkedList3 = QtConcurrent::mappedReduced(numberLinkedList.constBegin(),
1495                                                        numberLinkedList.constEnd(),
1496                                                        &Number::toInt,
1497                                                        &QLinkedList<int>::push_back,
1498                                                        OrderedReduce);
1499         QCOMPARE(linkedList3, QLinkedList<int>() << 1 << 2 << 3);
1500 
1501         QLinkedList<int> linkedList4 = QtConcurrent::mappedReduced(QLinkedList<Number>(numberLinkedList),
1502                                                        &Number::toInt,
1503                                                        &QLinkedList<int>::push_back, OrderedReduce);
1504         QCOMPARE(linkedList4, QLinkedList<int>() << 1 << 2 << 3);
1505     }
1506 
1507     // function-member
1508     {
1509         QList<int> list2 = QtConcurrent::mappedReduced(list,
1510                                                        intSquare,
1511                                                        &QList<int>::push_back,
1512                                                        OrderedReduce);
1513         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1514         QCOMPARE(list2, QList<int>() << 1 << 4 << 9);
1515 
1516         QList<int> list3 = QtConcurrent::mappedReduced(list.constBegin(),
1517                                                        list.constEnd(),
1518                                                        intSquare,
1519                                                        &QList<int>::push_back,
1520                                                        OrderedReduce);
1521         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1522         QCOMPARE(list3, QList<int>() << 1 << 4 << 9);
1523 
1524         QList<int> list4 = QtConcurrent::mappedReduced(QList<int>(list),
1525                                                        intSquare,
1526                                                        &QList<int>::push_back,
1527                                                        OrderedReduce);
1528         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1529         QCOMPARE(list4, QList<int>() << 1 << 4 << 9);
1530     }
1531     {
1532         QLinkedList<int> linkedList2 = QtConcurrent::mappedReduced(linkedList,
1533                                                        intSquare,
1534                                                        &QLinkedList<int>::append,
1535                                                        OrderedReduce);
1536         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1537         QCOMPARE(linkedList2, QLinkedList<int>() << 1 << 4 << 9);
1538 
1539         QLinkedList<int> linkedList3 = QtConcurrent::mappedReduced(linkedList.constBegin(),
1540                                                        linkedList.constEnd(),
1541                                                        intSquare,
1542                                                        &QLinkedList<int>::append,
1543                                                        OrderedReduce);
1544         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1545         QCOMPARE(linkedList3, QLinkedList<int>() << 1 << 4 << 9);
1546 
1547         QLinkedList<int> linkedList4 = QtConcurrent::mappedReduced(QLinkedList<int>(linkedList),
1548                                                        intSquare,
1549                                                        &QLinkedList<int>::append,
1550                                                        OrderedReduce);
1551         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1552         QCOMPARE(linkedList4, QLinkedList<int>() << 1 << 4 << 9);
1553     }
1554 
1555     // member-function
1556     {
1557         int sum = QtConcurrent::mappedReduced(numberList,
1558                                               &Number::toInt,
1559                                               intSumReduce);
1560         QCOMPARE(sum, 6);
1561         int sum2 = QtConcurrent::mappedReduced(numberList.constBegin(),
1562                                                numberList.constEnd(),
1563                                               &Number::toInt,
1564                                               intSumReduce);
1565         QCOMPARE(sum2, 6);
1566 
1567         int sum3 = QtConcurrent::mappedReduced(QList<Number>(numberList),
1568                                                &Number::toInt,
1569                                                intSumReduce);
1570         QCOMPARE(sum3, 6);
1571     }
1572     {
1573         int sum = QtConcurrent::mappedReduced(numberLinkedList,
1574                                               &Number::toInt,
1575                                               intSumReduce);
1576         QCOMPARE(sum, 6);
1577         int sum2 = QtConcurrent::mappedReduced(numberLinkedList.constBegin(),
1578                                                numberLinkedList.constEnd(),
1579                                               &Number::toInt,
1580                                               intSumReduce);
1581         QCOMPARE(sum2, 6);
1582 
1583         int sum3 = QtConcurrent::mappedReduced(QLinkedList<Number>(numberLinkedList),
1584                                                &Number::toInt,
1585                                                intSumReduce);
1586         QCOMPARE(sum3, 6);
1587     }
1588 
1589     // linked lists
1590     {
1591 
1592         QLinkedList<int> list;
1593         list << 1 << 2 << 3;
1594 
1595         QLinkedList<Number> numberList;
1596         numberList << 1 << 2 << 3;
1597 
1598         int sum = QtConcurrent::mappedReduced<int>(list, IntSquare(), IntSumReduce());
1599         QCOMPARE(sum, 14);
1600         int sum2 = QtConcurrent::mappedReduced<int>(list.constBegin(),
1601                                                     list.constEnd(),
1602                                                     IntSquare(),
1603                                                     IntSumReduce());
1604         QCOMPARE(sum2, 14);
1605 
1606         int sum3 = QtConcurrent::mappedReduced<int>(QLinkedList<int>(list), IntSquare(), IntSumReduce());
1607         QCOMPARE(sum3, 14);
1608 
1609         int sum4 = QtConcurrent::mappedReduced<int>(list, intSquare, intSumReduce);
1610         QCOMPARE(sum4, 14);
1611         int sum5 = QtConcurrent::mappedReduced<int>(list.constBegin(),
1612                                                     list.constEnd(),
1613                                                     intSquare,
1614                                                     intSumReduce);
1615         QCOMPARE(sum5, 14);
1616 
1617         int sum6 = QtConcurrent::mappedReduced<int>(QLinkedList<int>(list),
1618                                                     intSquare,
1619                                                     intSumReduce);
1620         QCOMPARE(sum6, 14);
1621     }
1622 
1623     // ### the same as above, with an initial result value
1624 }
1625 
1626 void tst_QtConcurrentMap::blocking_mappedReduced()
1627 {
1628     QList<int> list;
1629     list << 1 << 2 << 3;
1630     QLinkedList<int> linkedList;
1631     linkedList << 1 << 2 << 3;
1632     QList<Number> numberList;
1633     numberList << 1 << 2 << 3;
1634     QLinkedList<Number> numberLinkedList;
1635     numberLinkedList << 1 << 2 << 3;
1636 
1637     // functor-functor
1638     {
1639         int sum = QtConcurrent::blockingMappedReduced<int>(list, IntSquare(), IntSumReduce());
1640         QCOMPARE(sum, 14);
1641         int sum2 = QtConcurrent::blockingMappedReduced<int>(list.constBegin(),
1642                                                     list.constEnd(),
1643                                                     IntSquare(),
1644                                                     IntSumReduce());
1645         QCOMPARE(sum2, 14);
1646 
1647         int sum3 = QtConcurrent::blockingMappedReduced<int>(QList<int>(list), IntSquare(), IntSumReduce());
1648         QCOMPARE(sum3, 14);
1649 
1650         int sum4 = QtConcurrent::blockingMappedReduced<int>(list, intSquare, intSumReduce);
1651         QCOMPARE(sum4, 14);
1652         int sum5 = QtConcurrent::blockingMappedReduced<int>(list.constBegin(),
1653                                                     list.constEnd(),
1654                                                     intSquare,
1655                                                     intSumReduce);
1656         QCOMPARE(sum5, 14);
1657 
1658         int sum6 = QtConcurrent::blockingMappedReduced<int>(QList<int>(list),
1659                                                     intSquare,
1660                                                     intSumReduce);
1661         QCOMPARE(sum6, 14);
1662     }
1663     {
1664         int sum = QtConcurrent::blockingMappedReduced<int>(linkedList, IntSquare(), IntSumReduce());
1665         QCOMPARE(sum, 14);
1666         int sum2 = QtConcurrent::blockingMappedReduced<int>(linkedList.constBegin(),
1667                                                     linkedList.constEnd(),
1668                                                     IntSquare(),
1669                                                     IntSumReduce());
1670         QCOMPARE(sum2, 14);
1671 
1672         int sum3 = QtConcurrent::blockingMappedReduced<int>(QLinkedList<int>(linkedList), IntSquare(), IntSumReduce());
1673         QCOMPARE(sum3, 14);
1674 
1675         int sum4 = QtConcurrent::blockingMappedReduced<int>(linkedList, intSquare, intSumReduce);
1676         QCOMPARE(sum4, 14);
1677         int sum5 = QtConcurrent::blockingMappedReduced<int>(linkedList.constBegin(),
1678                                                     linkedList.constEnd(),
1679                                                     intSquare,
1680                                                     intSumReduce);
1681         QCOMPARE(sum5, 14);
1682 
1683         int sum6 = QtConcurrent::blockingMappedReduced<int>(QLinkedList<int>(linkedList),
1684                                                     intSquare,
1685                                                     intSumReduce);
1686         QCOMPARE(sum6, 14);
1687     }
1688 
1689     // function-functor
1690     {
1691         int sum = QtConcurrent::blockingMappedReduced<int>(list, intSquare, IntSumReduce());
1692         QCOMPARE(sum, 14);
1693         int sum2 = QtConcurrent::blockingMappedReduced<int>(list.constBegin(),
1694                                                     list.constEnd(),
1695                                                     intSquare,
1696                                                     IntSumReduce());
1697         QCOMPARE(sum2, 14);
1698 
1699         int sum3 = QtConcurrent::blockingMappedReduced<int>(QList<int>(list), intSquare, IntSumReduce());
1700         QCOMPARE(sum3, 14);
1701     }
1702     {
1703         int sum = QtConcurrent::blockingMappedReduced<int>(linkedList, intSquare, IntSumReduce());
1704         QCOMPARE(sum, 14);
1705         int sum2 = QtConcurrent::blockingMappedReduced<int>(linkedList.constBegin(),
1706                                                     linkedList.constEnd(),
1707                                                     intSquare,
1708                                                     IntSumReduce());
1709         QCOMPARE(sum2, 14);
1710 
1711         int sum3 = QtConcurrent::blockingMappedReduced<int>(QLinkedList<int>(linkedList), intSquare, IntSumReduce());
1712         QCOMPARE(sum3, 14);
1713     }
1714 
1715     // functor-function
1716     {
1717         int sum = QtConcurrent::blockingMappedReduced(list, IntSquare(), intSumReduce);
1718         QCOMPARE(sum, 14);
1719         int sum2 = QtConcurrent::blockingMappedReduced(list.constBegin(),
1720                                                list.constEnd(),
1721                                                IntSquare(),
1722                                                intSumReduce);
1723         QCOMPARE(sum2, 14);
1724 
1725         int sum3 = QtConcurrent::blockingMappedReduced(QList<int>(list), IntSquare(), intSumReduce);
1726         QCOMPARE(sum3, 14);
1727     }
1728     {
1729         int sum = QtConcurrent::blockingMappedReduced(linkedList, IntSquare(), intSumReduce);
1730         QCOMPARE(sum, 14);
1731         int sum2 = QtConcurrent::blockingMappedReduced(linkedList.constBegin(),
1732                                                linkedList.constEnd(),
1733                                                IntSquare(),
1734                                                intSumReduce);
1735         QCOMPARE(sum2, 14);
1736 
1737         int sum3 = QtConcurrent::blockingMappedReduced(QLinkedList<int>(linkedList), IntSquare(), intSumReduce);
1738         QCOMPARE(sum3, 14);
1739     }
1740 
1741     // function-function
1742     {
1743         int sum = QtConcurrent::blockingMappedReduced(list, intSquare, intSumReduce);
1744         QCOMPARE(sum, 14);
1745         int sum2 = QtConcurrent::blockingMappedReduced(list.constBegin(),
1746                                                          list.constEnd(),
1747                                                          intSquare,
1748                                                          intSumReduce);
1749         QCOMPARE(sum2, 14);
1750 
1751         int sum3 = QtConcurrent::blockingMappedReduced(QList<int>(list), intSquare, intSumReduce);
1752         QCOMPARE(sum3, 14);
1753     }
1754     {
1755         int sum = QtConcurrent::blockingMappedReduced(linkedList, intSquare, intSumReduce);
1756         QCOMPARE(sum, 14);
1757         int sum2 = QtConcurrent::blockingMappedReduced(linkedList.constBegin(),
1758                                                linkedList.constEnd(),
1759                                                intSquare,
1760                                                intSumReduce);
1761         QCOMPARE(sum2, 14);
1762 
1763         int sum3 = QtConcurrent::blockingMappedReduced(QLinkedList<int>(linkedList), intSquare, intSumReduce);
1764         QCOMPARE(sum3, 14);
1765     }
1766 
1767     // functor-member
1768     {
1769         QList<int> list2 = QtConcurrent::blockingMappedReduced(list,
1770                                                        IntSquare(),
1771                                                        &QList<int>::push_back,
1772                                                        OrderedReduce);
1773         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1774         QCOMPARE(list2, QList<int>() << 1 << 4 << 9);
1775 
1776         QList<int> list3 = QtConcurrent::blockingMappedReduced(list.constBegin(),
1777                                                        list.constEnd(),
1778                                                        IntSquare(),
1779                                                        &QList<int>::push_back,
1780                                                        OrderedReduce);
1781         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1782         QCOMPARE(list3, QList<int>() << 1 << 4 << 9);
1783 
1784         QList<int> list4 = QtConcurrent::blockingMappedReduced(QList<int>(list),
1785                                                        IntSquare(),
1786                                                        &QList<int>::push_back,
1787                                                        OrderedReduce);
1788         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1789         QCOMPARE(list4, QList<int>() << 1 << 4 << 9);
1790     }
1791     {
1792         QLinkedList<int> linkedList2 = QtConcurrent::blockingMappedReduced(linkedList,
1793                                                        IntSquare(),
1794                                                        &QLinkedList<int>::append,
1795                                                        OrderedReduce);
1796         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1797         QCOMPARE(linkedList2, QLinkedList<int>() << 1 << 4 << 9);
1798 
1799         QLinkedList<int> linkedList3 = QtConcurrent::blockingMappedReduced(linkedList.constBegin(),
1800                                                        linkedList.constEnd(),
1801                                                        IntSquare(),
1802                                                        &QLinkedList<int>::append,
1803                                                        OrderedReduce);
1804         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1805         QCOMPARE(linkedList3, QLinkedList<int>() << 1 << 4 << 9);
1806 
1807         QLinkedList<int> linkedList4 = QtConcurrent::blockingMappedReduced(QLinkedList<int>(linkedList),
1808                                                        IntSquare(),
1809                                                        &QLinkedList<int>::append,
1810                                                        OrderedReduce);
1811         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1812         QCOMPARE(linkedList4, QLinkedList<int>() << 1 << 4 << 9);
1813     }
1814 
1815     // member-functor
1816     {
1817         int sum = QtConcurrent::blockingMappedReduced<int>(numberList, &Number::toInt,
1818                                                              IntSumReduce());
1819         QCOMPARE(sum, 6);
1820         int sum2 = QtConcurrent::blockingMappedReduced<int>(numberList.constBegin(),
1821                                                               numberList.constEnd(),
1822                                                               &Number::toInt,
1823                                                               IntSumReduce());
1824         QCOMPARE(sum2, 6);
1825 
1826         int sum3 = QtConcurrent::blockingMappedReduced<int>(QList<Number>(numberList),
1827                                                               &Number::toInt,
1828                                                               IntSumReduce());
1829         QCOMPARE(sum3, 6);
1830     }
1831     {
1832         int sum = QtConcurrent::blockingMappedReduced<int>(numberLinkedList, &Number::toInt, IntSumReduce());
1833         QCOMPARE(sum, 6);
1834         int sum2 = QtConcurrent::blockingMappedReduced<int>(numberLinkedList.constBegin(),
1835                                                     numberLinkedList.constEnd(),
1836                                                     &Number::toInt,
1837                                                     IntSumReduce());
1838         QCOMPARE(sum2, 6);
1839 
1840         int sum3 = QtConcurrent::blockingMappedReduced<int>(QLinkedList<Number>(numberLinkedList),
1841                                                     &Number::toInt,
1842                                                     IntSumReduce());
1843         QCOMPARE(sum3, 6);
1844     }
1845 
1846     // member-member
1847     {
1848         QList<int> list2 = QtConcurrent::blockingMappedReduced(numberList,
1849                                                        &Number::toInt,
1850                                                        &QList<int>::push_back,
1851                                                        OrderedReduce);
1852         QCOMPARE(list2, QList<int>() << 1 << 2 << 3);
1853 
1854         QList<int> list3 = QtConcurrent::blockingMappedReduced(numberList.constBegin(),
1855                                                        numberList.constEnd(),
1856                                                        &Number::toInt,
1857                                                        &QList<int>::push_back,
1858                                                        OrderedReduce);
1859         QCOMPARE(list3, QList<int>() << 1 << 2 << 3);
1860 
1861         QList<int> list4 = QtConcurrent::blockingMappedReduced(QList<Number>(numberList),
1862                                                        &Number::toInt,
1863                                                        &QList<int>::push_back, OrderedReduce);
1864         QCOMPARE(list4, QList<int>() << 1 << 2 << 3);
1865     }
1866     {
1867         QLinkedList<int> linkedList2 = QtConcurrent::blockingMappedReduced(numberLinkedList,
1868                                                        &Number::toInt,
1869                                                        &QLinkedList<int>::append,
1870                                                        OrderedReduce);
1871         QCOMPARE(linkedList2, QLinkedList<int>() << 1 << 2 << 3);
1872 
1873         QLinkedList<int> linkedList3 = QtConcurrent::blockingMappedReduced(numberLinkedList.constBegin(),
1874                                                        numberLinkedList.constEnd(),
1875                                                        &Number::toInt,
1876                                                        &QLinkedList<int>::append,
1877                                                        OrderedReduce);
1878         QCOMPARE(linkedList3, QLinkedList<int>() << 1 << 2 << 3);
1879 
1880         QLinkedList<int> linkedList4 = QtConcurrent::blockingMappedReduced(QLinkedList<Number>(numberLinkedList),
1881                                                        &Number::toInt,
1882                                                        &QLinkedList<int>::append, OrderedReduce);
1883         QCOMPARE(linkedList4, QLinkedList<int>() << 1 << 2 << 3);
1884     }
1885 
1886     // function-member
1887     {
1888         QList<int> list2 = QtConcurrent::blockingMappedReduced(list,
1889                                                        intSquare,
1890                                                        &QList<int>::push_back,
1891                                                        OrderedReduce);
1892         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1893         QCOMPARE(list2, QList<int>() << 1 << 4 << 9);
1894 
1895         QList<int> list3 = QtConcurrent::blockingMappedReduced(list.constBegin(),
1896                                                        list.constEnd(),
1897                                                        intSquare,
1898                                                        &QList<int>::push_back,
1899                                                        OrderedReduce);
1900         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1901         QCOMPARE(list3, QList<int>() << 1 << 4 << 9);
1902 
1903         QList<int> list4 = QtConcurrent::blockingMappedReduced(QList<int>(list),
1904                                                        intSquare,
1905                                                        &QList<int>::push_back,
1906                                                        OrderedReduce);
1907         QCOMPARE(list, QList<int>() << 1 << 2 << 3);
1908         QCOMPARE(list4, QList<int>() << 1 << 4 << 9);
1909     }
1910     {
1911         QLinkedList<int> linkedList2 = QtConcurrent::blockingMappedReduced(linkedList,
1912                                                        intSquare,
1913                                                        &QLinkedList<int>::append,
1914                                                        OrderedReduce);
1915         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1916         QCOMPARE(linkedList2, QLinkedList<int>() << 1 << 4 << 9);
1917 
1918         QLinkedList<int> linkedList3 = QtConcurrent::blockingMappedReduced(linkedList.constBegin(),
1919                                                        linkedList.constEnd(),
1920                                                        intSquare,
1921                                                        &QLinkedList<int>::append,
1922                                                        OrderedReduce);
1923         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1924         QCOMPARE(linkedList3, QLinkedList<int>() << 1 << 4 << 9);
1925 
1926         QLinkedList<int> linkedList4 = QtConcurrent::blockingMappedReduced(QLinkedList<int>(linkedList),
1927                                                        intSquare,
1928                                                        &QLinkedList<int>::append,
1929                                                        OrderedReduce);
1930         QCOMPARE(linkedList, QLinkedList<int>() << 1 << 2 << 3);
1931         QCOMPARE(linkedList4, QLinkedList<int>() << 1 << 4 << 9);
1932     }
1933 
1934     // member-function
1935     {
1936         int sum = QtConcurrent::blockingMappedReduced(numberList,
1937                                               &Number::toInt,
1938                                               intSumReduce);
1939         QCOMPARE(sum, 6);
1940         int sum2 = QtConcurrent::blockingMappedReduced(numberList.constBegin(),
1941                                                numberList.constEnd(),
1942                                               &Number::toInt,
1943                                               intSumReduce);
1944         QCOMPARE(sum2, 6);
1945 
1946         int sum3 = QtConcurrent::blockingMappedReduced(QList<Number>(numberList),
1947                                                &Number::toInt,
1948                                                intSumReduce);
1949         QCOMPARE(sum3, 6);
1950     }
1951     {
1952         int sum = QtConcurrent::blockingMappedReduced(numberLinkedList,
1953                                               &Number::toInt,
1954                                               intSumReduce);
1955         QCOMPARE(sum, 6);
1956         int sum2 = QtConcurrent::blockingMappedReduced(numberLinkedList.constBegin(),
1957                                                numberLinkedList.constEnd(),
1958                                               &Number::toInt,
1959                                               intSumReduce);
1960         QCOMPARE(sum2, 6);
1961 
1962         int sum3 = QtConcurrent::blockingMappedReduced(QLinkedList<Number>(numberLinkedList),
1963                                                &Number::toInt,
1964                                                intSumReduce);
1965         QCOMPARE(sum3, 6);
1966     }
1967 
1968     // linked lists
1969     {
1970 
1971         QLinkedList<int> list;
1972         list << 1 << 2 << 3;
1973 
1974         QLinkedList<Number> numberList;
1975         numberList << 1 << 2 << 3;
1976 
1977         int sum = QtConcurrent::blockingMappedReduced<int>(list, IntSquare(), IntSumReduce());
1978         QCOMPARE(sum, 14);
1979         int sum2 = QtConcurrent::blockingMappedReduced<int>(list.constBegin(),
1980                                                     list.constEnd(),
1981                                                     IntSquare(),
1982                                                     IntSumReduce());
1983         QCOMPARE(sum2, 14);
1984 
1985         int sum3 = QtConcurrent::blockingMappedReduced<int>(QLinkedList<int>(list), IntSquare(), IntSumReduce());
1986         QCOMPARE(sum3, 14);
1987 
1988         int sum4 = QtConcurrent::blockingMappedReduced<int>(list, intSquare, intSumReduce);
1989         QCOMPARE(sum4, 14);
1990         int sum5 = QtConcurrent::blockingMappedReduced<int>(list.constBegin(),
1991                                                     list.constEnd(),
1992                                                     intSquare,
1993                                                     intSumReduce);
1994         QCOMPARE(sum5, 14);
1995 
1996         int sum6 = QtConcurrent::blockingMappedReduced<int>(QLinkedList<int>(list),
1997                                                     intSquare,
1998                                                     intSumReduce);
1999         QCOMPARE(sum6, 14);
2000     }
2001 
2002     // ### the same as above, with an initial result value
2003 }
2004 
2005 int sleeper(int val)
2006 {
2007     QTest::qSleep(100);
2008     return val;
2009 }
2010 
2011 void tst_QtConcurrentMap::assignResult()
2012 {
2013     const QList<int> startList = QList<int>() << 0 << 1 << 2;
2014     QList<int> list = QtConcurrent::blockingMapped(startList, sleeper);
2015     QCOMPARE(list.at(0), 0);
2016     QCOMPARE(list.at(1), 1);
2017 }
2018 
2019 int fnConst(const int &i)
2020 {
2021     return i;
2022 }
2023 
2024 int fn(int &i)
2025 {
2026     return i;
2027 }
2028 
2029 int fnConstNoExcept(const int &i) Q_DECL_NOTHROW
2030 {
2031     return i;
2032 }
2033 
2034 int fnNoExcept(int &i) Q_DECL_NOTHROW
2035 {
2036     return i;
2037 }
2038 
2039 QString changeTypeConst(const int &)
2040 {
2041     return QString();
2042 }
2043 
2044 QString changeType(int &)
2045 {
2046     return QString();
2047 }
2048 
2049 QString changeTypeConstNoExcept(const int &) Q_DECL_NOTHROW
2050 {
2051     return QString();
2052 }
2053 
2054 QString changeTypeNoExcept(int &) Q_DECL_NOTHROW
2055 {
2056     return QString();
2057 }
2058 
2059 int changeTypeQStringListConst(const QStringList &)
2060 {
2061     return 0;
2062 }
2063 
2064 int changeTypeQStringList(QStringList &)
2065 {
2066     return 0;
2067 }
2068 
2069 int changeTypeQStringListConstNoExcept(const QStringList &) Q_DECL_NOTHROW
2070 {
2071     return 0;
2072 }
2073 
2074 int changeTypeQStringListNoExcept(QStringList &) Q_DECL_NOTHROW
2075 {
2076     return 0;
2077 }
2078 
2079 class MemFnTester
2080 {
2081 public:
2082     MemFnTester() {}
2083 
2084     MemFnTester fn()
2085     {
2086         return MemFnTester();
2087     }
2088 
2089     MemFnTester fnConst() const
2090     {
2091         return MemFnTester();
2092     }
2093 
2094     QString changeType()
2095     {
2096         return QString();
2097     }
2098 
2099     QString changeTypeConst() const
2100     {
2101         return QString();
2102     }
2103 
2104     MemFnTester fnNoExcept() Q_DECL_NOTHROW
2105     {
2106         return MemFnTester();
2107     }
2108 
2109     MemFnTester fnConstNoExcept() const Q_DECL_NOTHROW
2110     {
2111         return MemFnTester();
2112     }
2113 
2114     QString changeTypeNoExcept() Q_DECL_NOTHROW
2115     {
2116         return QString();
2117     }
2118 
2119     QString changeTypeConstNoExcept() const Q_DECL_NOTHROW
2120     {
2121         return QString();
2122     }
2123 };
2124 
2125 Q_DECLARE_METATYPE(QVector<MemFnTester>);
2126 Q_DECLARE_METATYPE(QList<MemFnTester>);
2127 
2128 void tst_QtConcurrentMap::functionOverloads()
2129 {
2130     QList<int> intList;
2131     const QList<int> constIntList;
2132     QList<MemFnTester> classList;
2133     const QList<MemFnTester> constMemFnTesterList;
2134 
2135     QtConcurrent::mapped(intList, fnConst);
2136     QtConcurrent::mapped(constIntList, fnConst);
2137     QtConcurrent::mapped(classList, &MemFnTester::fnConst);
2138     QtConcurrent::mapped(constMemFnTesterList, &MemFnTester::fnConst);
2139 
2140     QtConcurrent::blockingMapped<QVector<int> >(intList, fnConst);
2141     QtConcurrent::blockingMapped<QVector<int> >(constIntList, fnConst);
2142     QtConcurrent::blockingMapped<QVector<MemFnTester> >(classList, &MemFnTester::fnConst);
2143     QtConcurrent::blockingMapped<QVector<MemFnTester> >(constMemFnTesterList, &MemFnTester::fnConst);
2144 
2145     QtConcurrent::blockingMapped<QList<QString> >(intList, changeTypeConst);
2146     QtConcurrent::blockingMapped<QList<QString> >(constIntList, changeTypeConst);
2147     QtConcurrent::blockingMapped<QList<QString> >(classList, &MemFnTester::changeTypeConst);
2148     QtConcurrent::blockingMapped<QList<QString> >(constMemFnTesterList, &MemFnTester::changeTypeConst);
2149 }
2150 
2151 void tst_QtConcurrentMap::noExceptFunctionOverloads()
2152 {
2153     QList<int> intList;
2154     const QList<int> constIntList;
2155     QList<MemFnTester> classList;
2156     const QList<MemFnTester> constMemFnTesterList;
2157 
2158     QtConcurrent::mapped(intList, fnConstNoExcept);
2159     QtConcurrent::mapped(constIntList, fnConstNoExcept);
2160     QtConcurrent::mapped(classList, &MemFnTester::fnConstNoExcept);
2161     QtConcurrent::mapped(constMemFnTesterList, &MemFnTester::fnConstNoExcept);
2162 
2163     QtConcurrent::blockingMapped<QVector<int> >(intList, fnConstNoExcept);
2164     QtConcurrent::blockingMapped<QVector<int> >(constIntList, fnConstNoExcept);
2165     QtConcurrent::blockingMapped<QVector<MemFnTester> >(classList, &MemFnTester::fnConstNoExcept);
2166     QtConcurrent::blockingMapped<QVector<MemFnTester> >(constMemFnTesterList, &MemFnTester::fnConstNoExcept);
2167 
2168     QtConcurrent::blockingMapped<QList<QString> >(intList, changeTypeConstNoExcept);
2169     QtConcurrent::blockingMapped<QList<QString> >(constIntList, changeTypeConstNoExcept);
2170     QtConcurrent::blockingMapped<QList<QString> >(classList, &MemFnTester::changeTypeConstNoExcept);
2171     QtConcurrent::blockingMapped<QList<QString> >(constMemFnTesterList, &MemFnTester::changeTypeConstNoExcept);
2172 }
2173 
2174 QAtomicInt currentInstanceCount;
2175 QAtomicInt peakInstanceCount;
2176 class InstanceCounter
2177 {
2178 public:
2179     inline InstanceCounter()
2180     { currentInstanceCount.fetchAndAddRelaxed(1); updatePeak(); }
2181     inline ~InstanceCounter()
2182     { currentInstanceCount.fetchAndAddRelaxed(-1);}
2183     inline InstanceCounter(const InstanceCounter &)
2184     { currentInstanceCount.fetchAndAddRelaxed(1); updatePeak(); }
2185 
2186     void updatePeak()
2187     {
2188         forever {
2189             const int localPeak = peakInstanceCount.load();
2190             const int localCurrent = currentInstanceCount.load();
2191             if (localCurrent <= localPeak)
2192                 break;
2193             if (peakInstanceCount.testAndSetOrdered(localPeak, localCurrent))
2194                 break;
2195         }
2196     }
2197 };
2198 
2199 InstanceCounter slowMap(const InstanceCounter &in)
2200 {
2201     QTest::qSleep(2);
2202     return in;
2203 }
2204 
2205 InstanceCounter fastMap(const InstanceCounter &in)
2206 {
2207     QTest::qSleep(rand() % 2 + 1);
2208     return in;
2209 }
2210 
2211 void slowReduce(int &result, const InstanceCounter&)
2212 {
2213     QTest::qSleep(rand() % 4 + 1);
2214     ++result;
2215 }
2216 
2217 void fastReduce(int &result, const InstanceCounter&)
2218 {
2219     ++result;
2220 }
2221 
2222 void tst_QtConcurrentMap::throttling()
2223 {
2224     const int itemcount = 100;
2225     const int allowedTemporaries = QThread::idealThreadCount() * 40;
2226 
2227     {
2228         currentInstanceCount.store(0);
2229         peakInstanceCount.store(0);
2230 
2231         QList<InstanceCounter> instances;
2232         for (int i = 0; i < itemcount; ++i)
2233             instances.append(InstanceCounter());
2234 
2235         QCOMPARE(currentInstanceCount.load(), itemcount);
2236 
2237         int results = QtConcurrent::blockingMappedReduced(instances, slowMap, fastReduce);
2238         QCOMPARE(results, itemcount);
2239         QCOMPARE(currentInstanceCount.load(), itemcount);
2240         QVERIFY(peakInstanceCount.load() < itemcount + allowedTemporaries);
2241     }
2242 
2243     {
2244         QCOMPARE(currentInstanceCount.load(), 0);
2245         peakInstanceCount.store(0);
2246 
2247         QList<InstanceCounter> instances;
2248         for (int i = 0; i < itemcount; ++i)
2249             instances.append(InstanceCounter());
2250 
2251         QCOMPARE(currentInstanceCount.load(), itemcount);
2252         int results = QtConcurrent::blockingMappedReduced(instances, fastMap, slowReduce);
2253 
2254         QCOMPARE(results, itemcount);
2255         QCOMPARE(currentInstanceCount.load(), itemcount);
2256         QVERIFY(peakInstanceCount.load() < itemcount + allowedTemporaries);
2257     }
2258 }
2259 
2260 #ifndef QT_NO_EXCEPTIONS
2261 void throwMapper(int &e)
2262 {
2263     Q_UNUSED(e);
2264     throw QException();
2265 }
2266 
2267 void tst_QtConcurrentMap::exceptions()
2268 {
2269     bool caught = false;
2270     try  {
2271         QList<int> list = QList<int>() << 1 << 2 << 3;
2272         QtConcurrent::map(list, throwMapper).waitForFinished();
2273     } catch (const QException &) {
2274         caught = true;
2275     }
2276     if (!caught)
2277         QFAIL("did not get exception");
2278 }
2279 #endif
2280 
2281 int mapper(const int &i)
2282 {
2283     QTest::qWait(1);
2284     return i;
2285 }
2286 
2287 void tst_QtConcurrentMap::incrementalResults()
2288 {
2289     const int count = 200;
2290     QList<int> ints;
2291     for (int i=0; i < count; ++i)
2292         ints << i;
2293 
2294     QFuture<int> future = QtConcurrent::mapped(ints, mapper);
2295 
2296     QList<int> results;
2297 
2298     while (future.isFinished() == false) {
2299         for (int i = 0; i < future.resultCount(); ++i) {
2300             results += future.resultAt(i);
2301         }
2302 
2303         QTest::qWait(1);
2304     }
2305 
2306     QCOMPARE(future.isFinished(), true);
2307     QCOMPARE(future.resultCount(), count);
2308     QCOMPARE(future.results().count(), count);
2309 }
2310 
2311 /*
2312     Test that mapped does not cause deep copies when holding
2313     references to Qt containers.
2314 */
2315 void tst_QtConcurrentMap::noDetach()
2316 {
2317     {
2318         QList<int> l = QList<int>() << 1;
2319         QVERIFY(l.isDetached());
2320 
2321         QList<int> ll = l;
2322         QVERIFY(!l.isDetached());
2323 
2324         QtConcurrent::mapped(l, mapper).waitForFinished();
2325 
2326         QVERIFY(!l.isDetached());
2327         QVERIFY(!ll.isDetached());
2328 
2329         QtConcurrent::mappedReduced(l, mapper, intSumReduce).waitForFinished();
2330 
2331         QVERIFY(!l.isDetached());
2332         QVERIFY(!ll.isDetached());
2333 
2334         QtConcurrent::map(l, multiplyBy2Immutable).waitForFinished();
2335         QVERIFY(l.isDetached());
2336         QVERIFY(ll.isDetached());
2337     }
2338     {
2339         const QList<int> l = QList<int>() << 1;
2340         QVERIFY(l.isDetached());
2341 
2342         const QList<int> ll = l;
2343         QVERIFY(!l.isDetached());
2344 
2345         QtConcurrent::mapped(l, mapper).waitForFinished();
2346 
2347         QVERIFY(!l.isDetached());
2348         QVERIFY(!ll.isDetached());
2349 
2350         QtConcurrent::mappedReduced(l, mapper, intSumReduce).waitForFinished();
2351 
2352         QVERIFY(!l.isDetached());
2353         QVERIFY(!ll.isDetached());
2354     }
2355 
2356 }
2357 
2358 void tst_QtConcurrentMap::stlContainers()
2359 {
2360     std::vector<int> vector;
2361     vector.push_back(1);
2362     vector.push_back(2);
2363 
2364     std::vector<int> vector2 =  QtConcurrent::blockingMapped<std::vector<int> >(vector, mapper);
2365     QCOMPARE(vector2.size(), (std::vector<int>::size_type)(2));
2366 
2367     std::list<int> list;
2368     list.push_back(1);
2369     list.push_back(2);
2370 
2371     std::list<int> list2 =  QtConcurrent::blockingMapped<std::list<int> >(list, mapper);
2372     QCOMPARE(list2.size(), (std::vector<int>::size_type)(2));
2373 
2374     QtConcurrent::mapped(list, mapper).waitForFinished();
2375 
2376     QtConcurrent::blockingMap(list, multiplyBy2Immutable);
2377 }
2378 
2379 InstanceCounter ic_fn(const InstanceCounter & ic)
2380 {
2381     return InstanceCounter(ic);
2382 };
2383 
2384 // Verify that held results are deleted when a future is
2385 // assigned over with operator =
2386 void tst_QtConcurrentMap::qFutureAssignmentLeak()
2387 {
2388     currentInstanceCount.store(0);
2389     peakInstanceCount.store(0);
2390     QFuture<InstanceCounter> future;
2391     {
2392         QList<InstanceCounter> list;
2393         for (int i=0;i<1000;++i)
2394             list += InstanceCounter();
2395         future = QtConcurrent::mapped(list, ic_fn);
2396         future.waitForFinished();
2397         QCOMPARE(currentInstanceCount.load(), 2000);
2398 
2399         future = QtConcurrent::mapped(list, ic_fn);
2400         future.waitForFinished();
2401         QCOMPARE(currentInstanceCount.load(), 2000);
2402 
2403         future = QtConcurrent::mapped(list, ic_fn);
2404         future.waitForFinished();
2405         QCOMPARE(currentInstanceCount.load(), 2000);
2406     }
2407     QVERIFY(future.isFinished());
2408     QTRY_COMPARE_WITH_TIMEOUT(currentInstanceCount.load(), 1000, 1000);
2409     future = QFuture<InstanceCounter>();
2410     QTRY_COMPARE_WITH_TIMEOUT(currentInstanceCount.load(), 0, 1000);
2411 }
2412 
2413 inline void increment(int &num)
2414 {
2415     ++num;
2416 }
2417 
2418 inline int echo(const int &num)
2419 {
2420     return num;
2421 }
2422 
2423 void add(int &result, const int &sum)
2424 {
2425     result += sum;
2426 }
2427 
2428 void tst_QtConcurrentMap::stressTest()
2429 {
2430     const int listSize = 1000;
2431     const int sum = (listSize - 1) * (listSize / 2);
2432     QList<int> list;
2433 
2434 
2435     for (int i = 0; i < listSize; ++i) {
2436         list.append(i);
2437     }
2438 
2439     for (int i =0 ; i < 100; ++i) {
2440         QList<int> result = QtConcurrent::blockingMapped(list, echo);
2441         for (int j = 0; j < listSize; ++j)
2442             QCOMPARE(result.at(j), j);
2443     }
2444 
2445     for (int i = 0 ; i < 100; ++i) {
2446         int result = QtConcurrent::blockingMappedReduced(list, echo, add);
2447         QCOMPARE(result, sum);
2448     }
2449 
2450     for (int i = 0 ; i < 100; ++i) {
2451         QtConcurrent::map(list, increment).waitForFinished();
2452         for (int j = 0; j < listSize; ++j)
2453             QCOMPARE(list.at(j), i + j + 1);
2454     }
2455 }
2456 
2457 struct LockedCounter
2458 {
2459     LockedCounter(QMutex *mutex, QAtomicInt *ai)
2460         : mtx(mutex),
2461           ref(ai) {}
2462 
2463     typedef int result_type;
2464     int operator()(int x)
2465     {
2466         QMutexLocker locker(mtx);
2467         ref->ref();
2468         return ++x;
2469     }
2470 
2471     QMutex *mtx;
2472     QAtomicInt *ref;
2473 };
2474 
2475 // The Thread engine holds the last reference
2476 // to the QFuture, so this should not leak
2477 // or fail.
2478 void tst_QtConcurrentMap::persistentResultTest()
2479 {
2480     QFuture<void> voidFuture;
2481     QMutex mtx;
2482     QAtomicInt ref;
2483     LockedCounter lc(&mtx, &ref);
2484     QList<int> list;
2485     {
2486         list << 1 << 2 << 3;
2487         mtx.lock();
2488         QFuture<int> future = QtConcurrent::mapped(list
2489                                                    ,lc);
2490         voidFuture = future;
2491     }
2492     QCOMPARE(ref.loadAcquire(), 0);
2493     mtx.unlock(); // Unblock
2494     voidFuture.waitForFinished();
2495     QCOMPARE(ref.loadAcquire(), 3);
2496 }
2497 
2498 QTEST_MAIN(tst_QtConcurrentMap)
2499 #include "tst_qtconcurrentmap.moc"
