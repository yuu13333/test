Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2017 The Qt Company Ltd.
4 ** Copyright (C) 2014 BlackBerry Limited. All rights reserved.
5 ** Copyright (C) 2014 Governikus GmbH & Co. KG.
6 ** Copyright (C) 2016 Richard J. Moore <rich@kde.org>
7 ** Contact: https://www.qt.io/licensing/
8 **
9 ** This file is part of the QtNetwork module of the Qt Toolkit.
10 **
11 ** $QT_BEGIN_LICENSE:LGPL$
12 ** Commercial License Usage
13 ** Licensees holding valid commercial Qt licenses may use this file in
14 ** accordance with the commercial license agreement provided with the
15 ** Software or, alternatively, in accordance with the terms contained in
16 ** a written agreement between you and The Qt Company. For licensing terms
17 ** and conditions see https://www.qt.io/terms-conditions. For further
18 ** information use the contact form at https://www.qt.io/contact-us.
19 **
20 ** GNU Lesser General Public License Usage
21 ** Alternatively, this file may be used under the terms of the GNU Lesser
22 ** General Public License version 3 as published by the Free Software
23 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
24 ** packaging of this file. Please review the following information to
25 ** ensure the GNU Lesser General Public License version 3 requirements
26 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
27 **
28 ** GNU General Public License Usage
29 ** Alternatively, this file may be used under the terms of the GNU
30 ** General Public License version 2.0 or (at your option) the GNU General
31 ** Public license version 3 or any later version approved by the KDE Free
32 ** Qt Foundation. The licenses are as published by the Free Software
33 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
34 ** included in the packaging of this file. Please review the following
35 ** information to ensure the GNU General Public License requirements will
36 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
37 ** https://www.gnu.org/licenses/gpl-3.0.html.
38 **
39 ** $QT_END_LICENSE$
40 **
41 ****************************************************************************/
42 
43 
44 #include <QtNetwork/qsslsocket.h>
45 #include <QtNetwork/qssldiffiehellmanparameters.h>
46 
47 #include "private/qssl_p.h"
48 #include "private/qsslcontext_openssl_p.h"
49 #include "private/qsslsocket_p.h"
50 #include "private/qsslsocket_openssl_p.h"
51 #include "private/qsslsocket_openssl_symbols_p.h"
52 #include "private/qssldiffiehellmanparameters_p.h"
53 
54 QT_BEGIN_NAMESPACE
55 
56 extern int q_X509Callback(int ok, X509_STORE_CTX *ctx);
57 extern QString getErrorsFromOpenSsl();
58 
59 static inline QString msgErrorSettingEllipticCurves(const QString &why)
60 {
61     return QSslSocket::tr("Error when setting the elliptic curves (%1)").arg(why);
62 }
63 
64 // static
65 void QSslContext::initSslContext(QSslContext *sslContext, QSslSocket::SslMode mode, const QSslConfiguration &configuration, bool allowRootCertOnDemandLoading)
66 {
67     sslContext->sslConfiguration = configuration;
68     sslContext->errorCode = QSslError::NoError;
69 
70     bool client = (mode == QSslSocket::SslClientMode);
71 
72     bool reinitialized = false;
73     bool unsupportedProtocol = false;
74 init_context:
75     if (sslContext->sslConfiguration.protocol() == QSsl::SslV2) {
76         // SSL 2 is no longer supported, but chosen deliberately -> error
77         sslContext->ctx = nullptr;
78         unsupportedProtocol = true;
79     } else {
80         // The ssl options will actually control the supported methods
81         sslContext->ctx = q_SSL_CTX_new(client ? q_TLS_client_method() : q_TLS_server_method());
82     }
83 
84     if (!sslContext->ctx) {
85         // After stopping Flash 10 the SSL library looses its ciphers. Try re-adding them
86         // by re-initializing the library.
87         if (!reinitialized) {
88             reinitialized = true;
89             if (q_OPENSSL_init_ssl(0, nullptr) == 1)
90                 goto init_context;
91         }
92 
93         sslContext->errorStr = QSslSocket::tr("Error creating SSL context (%1)").arg(
94             unsupportedProtocol ? QSslSocket::tr("unsupported protocol") : QSslSocketBackendPrivate::getErrorsFromOpenSsl()
95         );
96         sslContext->errorCode = QSslError::UnspecifiedError;
97         return;
98     }
99 
100     // Enable bug workarounds.
101     long options = QSslSocketBackendPrivate::setupOpenSslOptions(configuration.protocol(), configuration.d->sslOptions);
102     q_SSL_CTX_set_options(sslContext->ctx, options);
103 
104     // Tell OpenSSL to release memory early
105     // http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html
106     q_SSL_CTX_set_mode(sslContext->ctx, SSL_MODE_RELEASE_BUFFERS);
107 
108     // Initialize ciphers
109     QByteArray cipherString;
110     bool first = true;
111     QList<QSslCipher> ciphers = sslContext->sslConfiguration.ciphers();
112     if (ciphers.isEmpty())
113         ciphers = QSslSocketPrivate::defaultCiphers();
114     for (const QSslCipher &cipher : qAsConst(ciphers)) {
115         if (first)
116             first = false;
117         else
118             cipherString.append(':');
119         cipherString.append(cipher.name().toLatin1());
120     }
121 
122     if (!q_SSL_CTX_set_cipher_list(sslContext->ctx, cipherString.data())) {
123         sslContext->errorStr = QSslSocket::tr("Invalid or empty cipher list (%1)").arg(QSslSocketBackendPrivate::getErrorsFromOpenSsl());
124         sslContext->errorCode = QSslError::UnspecifiedError;
125         return;
126     }
127 
128     const QDateTime now = QDateTime::currentDateTimeUtc();
129 
130     // Add all our CAs to this store.
131     const auto caCertificates = sslContext->sslConfiguration.caCertificates();
132     for (const QSslCertificate &caCertificate : caCertificates) {
133         // From https://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html:
134         //
135         // If several CA certificates matching the name, key identifier, and
136         // serial number condition are available, only the first one will be
137         // examined. This may lead to unexpected results if the same CA
138         // certificate is available with different expiration dates. If a
139         // ``certificate expired'' verification error occurs, no other
140         // certificate will be searched. Make sure to not have expired
141         // certificates mixed with valid ones.
142         //
143         // See also: QSslSocketBackendPrivate::verify()
144         if (caCertificate.expiryDate() >= now) {
145             q_X509_STORE_add_cert(q_SSL_CTX_get_cert_store(sslContext->ctx), (X509 *)caCertificate.handle());
146         }
147     }
148 
149     if (QSslSocketPrivate::s_loadRootCertsOnDemand && allowRootCertOnDemandLoading) {
150         // tell OpenSSL the directories where to look up the root certs on demand
151         const QList<QByteArray> unixDirs = QSslSocketPrivate::unixRootCertDirectories();
152         for (const QByteArray &unixDir : unixDirs)
153             q_SSL_CTX_load_verify_locations(sslContext->ctx, nullptr, unixDir.constData());
154     }
155 
156     if (!sslContext->sslConfiguration.localCertificate().isNull()) {
157         // Require a private key as well.
158         if (sslContext->sslConfiguration.privateKey().isNull()) {
159             sslContext->errorStr = QSslSocket::tr("Cannot provide a certificate with no key, %1").arg(QSslSocketBackendPrivate::getErrorsFromOpenSsl());
160             sslContext->errorCode = QSslError::UnspecifiedError;
161             return;
162         }
163 
164         // Load certificate
165         if (!q_SSL_CTX_use_certificate(sslContext->ctx, (X509 *)sslContext->sslConfiguration.localCertificate().handle())) {
166             sslContext->errorStr = QSslSocket::tr("Error loading local certificate, %1").arg(QSslSocketBackendPrivate::getErrorsFromOpenSsl());
167             sslContext->errorCode = QSslError::UnspecifiedError;
168             return;
169         }
170 
171         if (configuration.d->privateKey.algorithm() == QSsl::Opaque) {
172             sslContext->pkey = reinterpret_cast<EVP_PKEY *>(configuration.d->privateKey.handle());
173         } else {
174             // Load private key
175             sslContext->pkey = q_EVP_PKEY_new();
176             // before we were using EVP_PKEY_assign_R* functions and did not use EVP_PKEY_free.
177             // this lead to a memory leak. Now we use the *_set1_* functions which do not
178             // take ownership of the RSA/DSA key instance because the QSslKey already has ownership.
179             if (configuration.d->privateKey.algorithm() == QSsl::Rsa)
180                 q_EVP_PKEY_set1_RSA(sslContext->pkey, reinterpret_cast<RSA *>(configuration.d->privateKey.handle()));
181             else if (configuration.d->privateKey.algorithm() == QSsl::Dsa)
182                 q_EVP_PKEY_set1_DSA(sslContext->pkey, reinterpret_cast<DSA *>(configuration.d->privateKey.handle()));
183 #ifndef OPENSSL_NO_EC
184             else if (configuration.d->privateKey.algorithm() == QSsl::Ec)
185                 q_EVP_PKEY_set1_EC_KEY(sslContext->pkey, reinterpret_cast<EC_KEY *>(configuration.d->privateKey.handle()));
186 #endif
187         }
188 
189         if (!q_SSL_CTX_use_PrivateKey(sslContext->ctx, sslContext->pkey)) {
190             sslContext->errorStr = QSslSocket::tr("Error loading private key, %1").arg(QSslSocketBackendPrivate::getErrorsFromOpenSsl());
191             sslContext->errorCode = QSslError::UnspecifiedError;
192             return;
193         }
194         if (configuration.d->privateKey.algorithm() == QSsl::Opaque)
195             sslContext->pkey = nullptr; // Don't free the private key, it belongs to QSslKey
196 
197         // Check if the certificate matches the private key.
198         if (!q_SSL_CTX_check_private_key(sslContext->ctx)) {
199             sslContext->errorStr = QSslSocket::tr("Private key does not certify public key, %1").arg(QSslSocketBackendPrivate::getErrorsFromOpenSsl());
200             sslContext->errorCode = QSslError::UnspecifiedError;
201             return;
202         }
203 
204         // If we have any intermediate certificates then we need to add them to our chain
205         bool first = true;
206         for (const QSslCertificate &cert : qAsConst(configuration.d->localCertificateChain)) {
207             if (first) {
208                 first = false;
209                 continue;
210             }
211             q_SSL_CTX_ctrl(sslContext->ctx, SSL_CTRL_EXTRA_CHAIN_CERT, 0,
212                            q_X509_dup(reinterpret_cast<X509 *>(cert.handle())));
213         }
214     }
215 
216     // Initialize peer verification.
217     if (sslContext->sslConfiguration.peerVerifyMode() == QSslSocket::VerifyNone) {
218         q_SSL_CTX_set_verify(sslContext->ctx, SSL_VERIFY_NONE, nullptr);
219     } else {
220         q_SSL_CTX_set_verify(sslContext->ctx, SSL_VERIFY_PEER, q_X509Callback);
221     }
222 
223     // Set verification depth.
224     if (sslContext->sslConfiguration.peerVerifyDepth() != 0)
225         q_SSL_CTX_set_verify_depth(sslContext->ctx, sslContext->sslConfiguration.peerVerifyDepth());
226 
227     // set persisted session if the user set it
228     if (!configuration.sessionTicket().isEmpty())
229         sslContext->setSessionASN1(configuration.sessionTicket());
230 
231     // Set temp DH params
232     QSslDiffieHellmanParameters dhparams = configuration.diffieHellmanParameters();
233 
234     if (!dhparams.isValid()) {
235         sslContext->errorStr = QSslSocket::tr("Diffie-Hellman parameters are not valid");
236         sslContext->errorCode = QSslError::UnspecifiedError;
237         return;
238     }
239 
240     if (!dhparams.isEmpty()) {
241         const QByteArray &params = dhparams.d->derData;
242         const char *ptr = params.constData();
243         DH *dh = q_d2i_DHparams(NULL, reinterpret_cast<const unsigned char **>(&ptr), params.length());
244         if (dh == NULL)
245             qFatal("q_d2i_DHparams failed to convert QSslDiffieHellmanParameters to DER form");
246         q_SSL_CTX_set_tmp_dh(sslContext->ctx, dh);
247         q_DH_free(dh);
248     }
249 
250 #if !defined(OPENSSL_NO_PSK)
251     if (!client)
252         q_SSL_CTX_use_psk_identity_hint(sslContext->ctx, sslContext->sslConfiguration.preSharedKeyIdentityHint().constData());
253 #endif // !defined(OPENSSL_NO_PSK)
254 
255     const QVector<QSslEllipticCurve> qcurves = sslContext->sslConfiguration.ellipticCurves();
256     if (!qcurves.isEmpty()) {
257 #if !defined(OPENSSL_NO_EC)
258         // Set the curves to be used
259         // SSL_CTX_ctrl wants a non-const pointer as last argument,
260         // but let's avoid a copy into a temporary array
261         if (!q_SSL_CTX_ctrl(sslContext->ctx,
262                             SSL_CTRL_SET_CURVES,
263                             qcurves.size(),
264                             const_cast<int *>(reinterpret_cast<const int *>(qcurves.data())))) {
265             sslContext->errorStr = msgErrorSettingEllipticCurves(QSslSocketBackendPrivate::getErrorsFromOpenSsl());
266             sslContext->errorCode = QSslError::UnspecifiedError;
267         } else
268 #endif // !defined(OPENSSL_NO_EC)
269         {
270             // specific curves requested, but not possible to set -> error
271             sslContext->errorStr = msgErrorSettingEllipticCurves(QSslSocket::tr("OpenSSL version too old, need at least v1.0.2"));
272             sslContext->errorCode = QSslError::UnspecifiedError;
273         }
274     }
275 }
276 
277 QT_END_NAMESPACE
