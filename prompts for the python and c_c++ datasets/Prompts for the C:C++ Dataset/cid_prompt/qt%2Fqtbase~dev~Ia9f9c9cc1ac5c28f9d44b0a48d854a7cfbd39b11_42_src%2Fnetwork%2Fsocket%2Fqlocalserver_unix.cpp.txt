Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtNetwork module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qlocalserver.h"
41 #include "qlocalserver_p.h"
42 #include "qlocalsocket.h"
43 #include "qlocalsocket_p.h"
44 #include "qnet_unix_p.h"
45 #include "qtemporarydir.h"
46 
47 #include <stddef.h>
48 #include <sys/socket.h>
49 #include <sys/un.h>
50 
51 #include <qdebug.h>
52 #include <qdir.h>
53 #include <qdatetime.h>
54 
55 #ifdef Q_OS_VXWORKS
56 #  include <selectLib.h>
57 #endif
58 
59 QT_BEGIN_NAMESPACE
60 
61 void QLocalServerPrivate::init()
62 {
63 }
64 
65 bool QLocalServerPrivate::removeServer(const QString &name)
66 {
67     QString fileName;
68     if (name.startsWith(QLatin1Char('/'))) {
69         fileName = name;
70     } else {
71         fileName = QDir::cleanPath(QDir::tempPath());
72         fileName += QLatin1Char('/') + name;
73     }
74     if (QFile::exists(fileName))
75         return QFile::remove(fileName);
76     else
77         return true;
78 }
79 
80 bool QLocalServerPrivate::listen(const QString &requestedServerName)
81 {
82     Q_Q(QLocalServer);
83 
84     // determine the full server path
85     if (requestedServerName.startsWith(QLatin1Char('/'))) {
86         fullServerName = requestedServerName;
87     } else {
88         fullServerName = QDir::cleanPath(QDir::tempPath());
89         fullServerName += QLatin1Char('/') + requestedServerName;
90     }
91     serverName = requestedServerName;
92 
93     QByteArray encodedTempPath;
94     const QByteArray encodedFullServerName = QFile::encodeName(fullServerName);
95     QScopedPointer<QTemporaryDir> tempDir;
96 
97     // Check any of the flags
98     const auto options = socketOptions.value();
99     if (options & QLocalServer::WorldAccessOption) {
100         QFileInfo serverNameFileInfo(fullServerName);
101         tempDir.reset(new QTemporaryDir(serverNameFileInfo.absolutePath() + QLatin1Char('/')));
102         if (!tempDir->isValid()) {
103             setError(QLatin1String("QLocalServer::listen"));
104             return false;
105         }
106         encodedTempPath = QFile::encodeName(tempDir->path() + QLatin1String("/s"));
107     }
108 
109     // create the unix socket
110     listenSocket = qt_safe_socket(PF_UNIX, SOCK_STREAM, 0);
111     if (-1 == listenSocket) {
112         setError(QLatin1String("QLocalServer::listen"));
113         closeServer();
114         return false;
115     }
116 
117     // Construct the unix address
118     struct ::sockaddr_un addr;
119 
120     addr.sun_family = PF_UNIX;
121     ::memset(addr.sun_path, 0, sizeof(addr.sun_path));
122 
123     // for abstract namespace add 2 to length, to take into account trailing AND leading null
124     constexpr unsigned int extraCharacters = PlatformSupportsAbstractNamespace ? 2 : 1;
125 
126     if (sizeof(addr.sun_path) < static_cast<size_t>(encodedFullServerName.size() + extraCharacters)) {
127         setError(QLatin1String("QLocalServer::listen"));
128         closeServer();
129         return false;
130     }
131 
132     QT_SOCKLEN_T addrSize = sizeof(::sockaddr_un);
133     if (PlatformSupportsAbstractNamespace && (options & QLocalServer::AbstractNamespaceOption)) {
134         // Abstract socket address is distinguished by the fact
135         // that sun_path[0] is a null byte ('\0')
136         ::memcpy(addr.sun_path + 1, encodedFullServerName.constData(),
137                  encodedFullServerName.size() + 1);
138         addrSize = offsetof(::sockaddr_un, sun_path) + encodedFullServerName.size() + 1;
139     } else if (options & QLocalServer::WorldAccessOption) {
140         if (sizeof(addr.sun_path) < static_cast<size_t>(encodedTempPath.size() + 1)) {
141             setError(QLatin1String("QLocalServer::listen"));
142             closeServer();
143             return false;
144         }
145         ::memcpy(addr.sun_path, encodedTempPath.constData(),
146                  encodedTempPath.size() + 1);
147     } else {
148         ::memcpy(addr.sun_path, encodedFullServerName.constData(),
149                  encodedFullServerName.size() + 1);
150     }
151 
152     // bind
153     if (-1 == QT_SOCKET_BIND(listenSocket, (sockaddr *)&addr, addrSize)) {
154         setError(QLatin1String("QLocalServer::listen"));
155         // if address is in use already, just close the socket, but do not delete the file
156         if (errno == EADDRINUSE)
157             QT_CLOSE(listenSocket);
158         // otherwise, close the socket and delete the file
159         else
160             closeServer();
161         listenSocket = -1;
162         return false;
163     }
164 
165     // listen for connections
166     if (-1 == qt_safe_listen(listenSocket, 50)) {
167         setError(QLatin1String("QLocalServer::listen"));
168         closeServer();
169         listenSocket = -1;
170         if (error != QAbstractSocket::AddressInUseError)
171             QFile::remove(fullServerName);
172         return false;
173     }
174 
175     if (options & QLocalServer::WorldAccessOption) {
176         mode_t mode = 000;
177 
178         if (options & QLocalServer::UserAccessOption)
179             mode |= S_IRWXU;
180 
181         if (options & QLocalServer::GroupAccessOption)
182             mode |= S_IRWXG;
183 
184         if (options & QLocalServer::OtherAccessOption)
185             mode |= S_IRWXO;
186 
187         if (::chmod(encodedTempPath.constData(), mode) == -1) {
188             setError(QLatin1String("QLocalServer::listen"));
189             closeServer();
190             return false;
191         }
192 
193         if (::rename(encodedTempPath.constData(), encodedFullServerName.constData()) == -1) {
194             setError(QLatin1String("QLocalServer::listen"));
195             closeServer();
196             return false;
197         }
198     }
199 
200     Q_ASSERT(!socketNotifier);
201     socketNotifier = new QSocketNotifier(listenSocket,
202                                          QSocketNotifier::Read, q);
203     q->connect(socketNotifier, SIGNAL(activated(QSocketDescriptor)),
204                q, SLOT(_q_onNewConnection()));
205     socketNotifier->setEnabled(maxPendingConnections > 0);
206     return true;
207 }
208 
209 bool QLocalServerPrivate::listen(qintptr socketDescriptor)
210 {
211     Q_Q(QLocalServer);
212 
213     // Attach to the localsocket
214     listenSocket = socketDescriptor;
215 
216     ::fcntl(listenSocket, F_SETFD, FD_CLOEXEC);
217     ::fcntl(listenSocket, F_SETFL, ::fcntl(listenSocket, F_GETFL) | O_NONBLOCK);
218 
219     struct ::sockaddr_un addr;
220     QT_SOCKLEN_T len = sizeof(addr);
221     memset(&addr, 0, sizeof(addr));
222     if (0 == ::getsockname(listenSocket, (sockaddr *)&addr, &len)) {
223         if (len > static_cast<QT_SOCKLEN_T>(offsetof(::sockaddr_un, sun_path))) {
224             len -= offsetof(::sockaddr_un, sun_path);
225             // check for abstract socket address
226             const bool abstractAddress = PlatformSupportsAbstractNamespace
227                                          && (addr.sun_family == PF_UNIX && addr.sun_path[0] == 0);
228             QStringDecoder toUtf16(QStringDecoder::System, QStringDecoder::Flag::Stateless);
229             // abstract socket address can be arbitrary binary, so we'd need to do more work to decode.
230             QString name = toUtf16(QByteArray(addr.sun_path + (abstractAddress ? 1 : 0),
231                                               len - (abstractAddress ? 1 : 0)));
232             if (!name.isEmpty() && !toUtf16.hasError()) {
233                 fullServerName = name;
234                 serverName = fullServerName.mid(fullServerName.lastIndexOf(QLatin1Char('/')) + 1);
235                 if (serverName.isEmpty())
236                     serverName = fullServerName;
237                 QLocalServer::SocketOptions options = socketOptions.value();
238                 socketOptions = options.setFlag(QLocalServer::AbstractNamespaceOption, abstractAddress);
239             }
240         }
241     }
242 
243     Q_ASSERT(!socketNotifier);
244     socketNotifier = new QSocketNotifier(listenSocket,
245                                          QSocketNotifier::Read, q);
246     q->connect(socketNotifier, SIGNAL(activated(QSocketDescriptor)),
247                q, SLOT(_q_onNewConnection()));
248     socketNotifier->setEnabled(maxPendingConnections > 0);
249     return true;
250 }
251 
252 /*!
253     \internal
254 
255     \sa QLocalServer::closeServer()
256  */
257 void QLocalServerPrivate::closeServer()
258 {
259     if (socketNotifier) {
260         socketNotifier->setEnabled(false); // Otherwise, closed socket is checked before deleter runs
261         socketNotifier->deleteLater();
262         socketNotifier = nullptr;
263     }
264 
265     if (-1 != listenSocket)
266         QT_CLOSE(listenSocket);
267     listenSocket = -1;
268 
269     if (!(fullServerName.isEmpty()
270         || socketOptions.value().testFlag(QLocalServer::AbstractNamespaceOption)))
271         QFile::remove(fullServerName);
272 
273     serverName.clear();
274     fullServerName.clear();
275 }
276 
277 /*!
278     \internal
279 
280     We have received a notification that we can read on the listen socket.
281     Accept the new socket.
282  */
283 void QLocalServerPrivate::_q_onNewConnection()
284 {
285     Q_Q(QLocalServer);
286     if (-1 == listenSocket)
287         return;
288 
289     ::sockaddr_un addr;
290     QT_SOCKLEN_T length = sizeof(sockaddr_un);
291     int connectedSocket = qt_safe_accept(listenSocket, (sockaddr *)&addr, &length);
292     if (-1 == connectedSocket) {
293         setError(QLatin1String("QLocalSocket::activated"));
294         closeServer();
295     } else {
296         socketNotifier->setEnabled(pendingConnections.size()
297                                    <= maxPendingConnections);
298         q->incomingConnection(connectedSocket);
299     }
300 }
301 
302 void QLocalServerPrivate::waitForNewConnection(int msec, bool *timedOut)
303 {
304     pollfd pfd = qt_make_pollfd(listenSocket, POLLIN);
305 
306     switch (qt_poll_msecs(&pfd, 1, msec)) {
307     case 0:
308         if (timedOut)
309             *timedOut = true;
310 
311         return;
312         break;
313     default:
314         if ((pfd.revents & POLLNVAL) == 0) {
315             _q_onNewConnection();
316             return;
317         }
318 
319         errno = EBADF;
320         Q_FALLTHROUGH();
321     case -1:
322         setError(QLatin1String("QLocalServer::waitForNewConnection"));
323         closeServer();
324         break;
325     }
326 }
327 
328 void QLocalServerPrivate::setError(const QString &function)
329 {
330     if (EAGAIN == errno)
331         return;
332 
333     switch (errno) {
334     case EACCES:
335         errorString = QLocalServer::tr("%1: Permission denied").arg(function);
336         error = QAbstractSocket::SocketAccessError;
337         break;
338     case ELOOP:
339     case ENOENT:
340     case ENAMETOOLONG:
341     case EROFS:
342     case ENOTDIR:
343         errorString = QLocalServer::tr("%1: Name error").arg(function);
344         error = QAbstractSocket::HostNotFoundError;
345         break;
346     case EADDRINUSE:
347         errorString = QLocalServer::tr("%1: Address in use").arg(function);
348         error = QAbstractSocket::AddressInUseError;
349         break;
350 
351     default:
352         errorString = QLocalServer::tr("%1: Unknown error %2")
353                       .arg(function).arg(errno);
354         error = QAbstractSocket::UnknownSocketError;
355 #if defined QLOCALSERVER_DEBUG
356         qWarning() << errorString << "fullServerName:" << fullServerName;
357 #endif
358     }
359 }
360 
361 QT_END_NAMESPACE
