Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qicc_p.h"
41 
42 #include <qbuffer.h>
43 #include <qbytearray.h>
44 #include <qdatastream.h>
45 #include <qendian.h>
46 #include <qloggingcategory.h>
47 #include <qstring.h>
48 
49 #include "qcolorspace_p.h"
50 #include "qcolortrc_p.h"
51 
52 QT_BEGIN_NAMESPACE
53 Q_LOGGING_CATEGORY(lcIcc, "qt.gui.icc")
54 
55 struct ICCProfileHeader
56 {
57     quint32_be profileSize;
58 
59     quint32_be preferredCmmType;
60 
61     quint32_be profileVersion;
62     quint32_be profileClass;
63     quint32_be inputColorSpace;
64     quint32_be pcs;
65     quint32_be datetime[3];
66     quint32_be signature;
67     quint32_be platformSignature;
68     quint32_be flags;
69     quint32_be deviceManufacturer;
70     quint32_be deviceModel;
71     quint32_be deviceAttributes[2];
72 
73     quint32_be renderingIntent;
74     qint32_be  illuminantXyz[3];
75 
76     quint32_be creatorSignature;
77     quint32_be profileId[4];
78 
79     quint32_be reserved[7];
80 
81 // Technically after the header, but easier to include here:
82     quint32_be tagCount;
83 };
84 
85 constexpr quint32 IccTag(uchar a, uchar b, uchar c, uchar d)
86 {
87     return (a << 24) | (b << 16) | (c << 8) | d;
88 }
89 
90 enum class ColorSpaceType : quint32 {
91     Rgb       = IccTag('R', 'G', 'B', ' '),
92     Gray      = IccTag('G', 'R', 'A', 'Y'),
93 };
94 
95 enum class ProfileClass : quint32 {
96     Input       = IccTag('s', 'c', 'r', 'n'),
97     Display     = IccTag('m', 'n', 't', 'r'),
98     // Not supported:
99     Output      = IccTag('p', 'r', 't', 'r'),
100     ColorSpace  = IccTag('s', 'p', 'a', 'c'),
101 };
102 
103 enum class Tag : quint32 {
104     acsp = IccTag('a', 'c', 's', 'p'),
105     RGB_ = IccTag('R', 'G', 'B', ' '),
106     XYZ_ = IccTag('X', 'Y', 'Z', ' '),
107     rXYZ = IccTag('r', 'X', 'Y', 'Z'),
108     gXYZ = IccTag('g', 'X', 'Y', 'Z'),
109     bXYZ = IccTag('b', 'X', 'Y', 'Z'),
110     rTRC = IccTag('r', 'T', 'R', 'C'),
111     gTRC = IccTag('g', 'T', 'R', 'C'),
112     bTRC = IccTag('b', 'T', 'R', 'C'),
113     kTRC = IccTag('k', 'T', 'R', 'C'),
114     A2B0 = IccTag('A', '2', 'B', '0'),
115     A2B1 = IccTag('A', '2', 'B', '1'),
116     B2A0 = IccTag('B', '2', 'A', '0'),
117     B2A1 = IccTag('B', '2', 'A', '1'),
118     desc = IccTag('d', 'e', 's', 'c'),
119     text = IccTag('t', 'e', 'x', 't'),
120     cprt = IccTag('c', 'p', 'r', 't'),
121     curv = IccTag('c', 'u', 'r', 'v'),
122     para = IccTag('p', 'a', 'r', 'a'),
123     wtpt = IccTag('w', 't', 'p', 't'),
124     bkpt = IccTag('b', 'k', 'p', 't'),
125     mft1 = IccTag('m', 'f', 't', '1'),
126     mft2 = IccTag('m', 'f', 't', '2'),
127     mluc = IccTag('m', 'l', 'u', 'c'),
128     mAB_ = IccTag('m', 'A', 'B', ' '),
129     mBA_ = IccTag('m', 'B', 'A', ' '),
130     chad = IccTag('c', 'h', 'a', 'd'),
131     sf32 = IccTag('s', 'f', '3', '2'),
132 
133     // Apple extensions for ICCv2:
134     aarg = IccTag('a', 'a', 'r', 'g'),
135     aagg = IccTag('a', 'a', 'g', 'g'),
136     aabg = IccTag('a', 'a', 'b', 'g'),
137 };
138 
139 inline uint qHash(const Tag &key, uint seed = 0)
140 {
141     return qHash(quint32(key), seed);
142 }
143 
144 namespace QIcc {
145 
146 struct TagTableEntry
147 {
148     quint32_be signature;
149     quint32_be offset;
150     quint32_be size;
151 };
152 
153 struct GenericTagData {
154     quint32_be type;
155     quint32_be null;
156 };
157 
158 struct XYZTagData : GenericTagData {
159     qint32_be fixedX;
160     qint32_be fixedY;
161     qint32_be fixedZ;
162 };
163 
164 struct CurvTagData : GenericTagData {
165     quint32_be valueCount;
166     quint16_be value[1];
167 };
168 
169 struct ParaTagData : GenericTagData {
170     quint16_be curveType;
171     quint16_be null2;
172     quint32_be parameter[1];
173 };
174 
175 struct DescTagData : GenericTagData {
176     quint32_be asciiDescriptionLength;
177     char asciiDescription[1];
178     // .. we ignore the rest
179 };
180 
181 struct MlucTagRecord {
182     quint16_be languageCode;
183     quint16_be countryCode;
184     quint32_be size;
185     quint32_be offset;
186 };
187 
188 struct MlucTagData : GenericTagData {
189     quint32_be recordCount;
190     quint32_be recordSize; // = sizeof(MlucTagRecord)
191     MlucTagRecord records[1];
192 };
193 
194 // For both mAB and mBA
195 struct mABTagData : GenericTagData {
196     quint8 inputChannels;
197     quint8 outputChannels;
198     quint8 padding[2];
199     quint32_be bCurvesOffset;
200     quint32_be matrixOffset;
201     quint32_be mCurvesOffset;
202     quint32_be clutOffset;
203     quint32_be aCurvesOffset;
204 };
205 
206 struct Sf32TagData : GenericTagData {
207     quint32_be value[1];
208 };
209 
210 static int toFixedS1516(float x)
211 {
212     return int(x * 65536.0f + 0.5f);
213 }
214 
215 static float fromFixedS1516(int x)
216 {
217     return x * (1.0f / 65536.0f);
218 }
219 
220 static bool isValidIccProfile(const ICCProfileHeader &header)
221 {
222     if (header.signature != uint(Tag::acsp)) {
223         qCWarning(lcIcc, "Failed ICC signature test");
224         return false;
225     }
226 
227     // Don't overflow 32bit integers:
228     if (header.tagCount >= INT32_MAX / sizeof(TagTableEntry)) {
229         qCWarning(lcIcc, "Failed tag count sanity");
230         return false;
231     }
232     if (header.profileSize - sizeof(ICCProfileHeader) < header.tagCount * sizeof(TagTableEntry)) {
233         qCWarning(lcIcc, "Failed basic size sanity");
234         return false;
235     }
236 
237     if (header.profileClass != uint(ProfileClass::Input)
238         && header.profileClass != uint(ProfileClass::Display)) {
239         qCWarning(lcIcc, "Unsupported ICC profile class %x", quint32(header.profileClass));
240         return false;
241     }
242     if (header.inputColorSpace != uint(ColorSpaceType::Rgb)
243         && header.inputColorSpace != uint(ColorSpaceType::Gray)) {
244         qCWarning(lcIcc, "Unsupported ICC input color space %x", quint32(header.inputColorSpace));
245         return false;
246     }
247     if (header.pcs != 0x58595a20 /* 'XYZ '*/) {
248         // ### support PCSLAB
249         qCWarning(lcIcc, "Unsupported ICC profile connection space %x", quint32(header.pcs));
250         return false;
251     }
252 
253     QColorVector illuminant;
254     illuminant.x = fromFixedS1516(header.illuminantXyz[0]);
255     illuminant.y = fromFixedS1516(header.illuminantXyz[1]);
256     illuminant.z = fromFixedS1516(header.illuminantXyz[2]);
257     if (illuminant != QColorVector::D50()) {
258         qCWarning(lcIcc, "Invalid ICC illuminant");
259         return false;
260     }
261 
262     return true;
263 }
264 
265 static int writeColorTrc(QDataStream &stream, const QColorTrc &trc)
266 {
267     if (trc.isLinear()) {
268         stream << uint(Tag::curv) << uint(0);
269         stream << uint(0);
270         return 12;
271     }
272 
273     if (trc.m_type == QColorTrc::Type::Function) {
274         const QColorTransferFunction &fun = trc.m_fun;
275         stream << uint(Tag::para) << uint(0);
276         if (fun.isGamma()) {
277             stream << ushort(0) << ushort(0);
278             stream << toFixedS1516(fun.m_g);
279             return 12 + 4;
280         }
281         bool type3 = qFuzzyIsNull(fun.m_e) && qFuzzyIsNull(fun.m_f);
282         stream << ushort(type3 ? 3 : 4) << ushort(0);
283         stream << toFixedS1516(fun.m_g);
284         stream << toFixedS1516(fun.m_a);
285         stream << toFixedS1516(fun.m_b);
286         stream << toFixedS1516(fun.m_c);
287         stream << toFixedS1516(fun.m_d);
288         if (type3)
289             return 12 + 5 * 4;
290         stream << toFixedS1516(fun.m_e);
291         stream << toFixedS1516(fun.m_f);
292         return 12 + 7 * 4;
293     }
294 
295     Q_ASSERT(trc.m_type == QColorTrc::Type::Table);
296     stream << uint(Tag::curv) << uint(0);
297     stream << uint(trc.m_table.m_tableSize);
298     if (!trc.m_table.m_table16.isEmpty()) {
299         for (uint i = 0; i < trc.m_table.m_tableSize; ++i) {
300             stream << ushort(trc.m_table.m_table16[i]);
301         }
302     } else {
303         for (uint i = 0; i < trc.m_table.m_tableSize; ++i) {
304             stream << ushort(trc.m_table.m_table8[i] * 257U);
305         }
306     }
307     return 12 + 2 * trc.m_table.m_tableSize;
308 }
309 
310 QByteArray toIccProfile(const QColorSpace &space)
311 {
312     if (!space.isValid())
313         return QByteArray();
314 
315     const QColorSpacePrivate *spaceDPtr = QColorSpacePrivate::get(space);
316 
317     constexpr int tagCount = 9;
318     constexpr uint profileDataOffset = 128 + 4 + 12 * tagCount;
319     constexpr uint variableTagTableOffsets = 128 + 4 + 12 * 5;
320     uint currentOffset = 0;
321     uint rTrcOffset, gTrcOffset, bTrcOffset;
322     uint rTrcSize, gTrcSize, bTrcSize;
323     uint descOffset, descSize;
324 
325     QBuffer buffer;
326     buffer.open(QIODevice::WriteOnly);
327     QDataStream stream(&buffer);
328 
329     // Profile header:
330     stream << uint(0); // Size, we will update this later
331     stream << uint(0);
332     stream << uint(0x02400000); // Version 2.4 (note we use 'para' from version 4)
333     stream << uint(ProfileClass::Display);
334     stream << uint(Tag::RGB_);
335     stream << uint(Tag::XYZ_);
336     stream << uint(0) << uint(0) << uint(0);
337     stream << uint(Tag::acsp);
338     stream << uint(0) << uint(0) << uint(0);
339     stream << uint(0) << uint(0) << uint(0);
340     stream << uint(1); // Rendering intent
341     stream << uint(0x0000f6d6); // D50 X
342     stream << uint(0x00010000); // D50 Y
343     stream << uint(0x0000d32d); // D50 Z
344     stream << IccTag('Q','t', QT_VERSION_MAJOR, QT_VERSION_MINOR);
345     stream << uint(0) << uint(0) << uint(0) << uint(0);
346     stream << uint(0) << uint(0) << uint(0) << uint(0) << uint(0) << uint(0) << uint(0);
347 
348     // Tag table:
349     stream << uint(tagCount);
350     stream << uint(Tag::rXYZ) << uint(profileDataOffset + 00) << uint(20);
351     stream << uint(Tag::gXYZ) << uint(profileDataOffset + 20) << uint(20);
352     stream << uint(Tag::bXYZ) << uint(profileDataOffset + 40) << uint(20);
353     stream << uint(Tag::wtpt) << uint(profileDataOffset + 60) << uint(20);
354     stream << uint(Tag::cprt) << uint(profileDataOffset + 80) << uint(12);
355     // From here the offset and size will be updated later:
356     stream << uint(Tag::rTRC) << uint(0) << uint(0);
357     stream << uint(Tag::gTRC) << uint(0) << uint(0);
358     stream << uint(Tag::bTRC) << uint(0) << uint(0);
359     stream << uint(Tag::desc) << uint(0) << uint(0);
360     // TODO: consider adding 'chad' tag (required in ICC >=4 when we have non-D50 whitepoint)
361     currentOffset = profileDataOffset;
362 
363     // Tag data:
364     stream << uint(Tag::XYZ_) << uint(0);
365     stream << toFixedS1516(spaceDPtr->toXyz.r.x);
366     stream << toFixedS1516(spaceDPtr->toXyz.r.y);
367     stream << toFixedS1516(spaceDPtr->toXyz.r.z);
368     stream << uint(Tag::XYZ_) << uint(0);
369     stream << toFixedS1516(spaceDPtr->toXyz.g.x);
370     stream << toFixedS1516(spaceDPtr->toXyz.g.y);
371     stream << toFixedS1516(spaceDPtr->toXyz.g.z);
372     stream << uint(Tag::XYZ_) << uint(0);
373     stream << toFixedS1516(spaceDPtr->toXyz.b.x);
374     stream << toFixedS1516(spaceDPtr->toXyz.b.y);
375     stream << toFixedS1516(spaceDPtr->toXyz.b.z);
376     stream << uint(Tag::XYZ_) << uint(0);
377     stream << toFixedS1516(spaceDPtr->whitePoint.x);
378     stream << toFixedS1516(spaceDPtr->whitePoint.y);
379     stream << toFixedS1516(spaceDPtr->whitePoint.z);
380     stream << uint(Tag::text) << uint(0);
381     stream << uint(IccTag('N', '/', 'A', '\0'));
382     currentOffset += 92;
383 
384     // From now on the data is variable sized:
385     rTrcOffset = currentOffset;
386     rTrcSize = writeColorTrc(stream, spaceDPtr->trc[0]);
387     currentOffset += rTrcSize;
388     if (spaceDPtr->trc[0] == spaceDPtr->trc[1]) {
389         gTrcOffset = rTrcOffset;
390         gTrcSize = rTrcSize;
391     } else {
392         gTrcOffset = currentOffset;
393         gTrcSize = writeColorTrc(stream, spaceDPtr->trc[1]);
394         currentOffset += gTrcSize;
395     }
396     if (spaceDPtr->trc[0] == spaceDPtr->trc[2]) {
397         bTrcOffset = rTrcOffset;
398         bTrcSize = rTrcSize;
399     } else {
400         bTrcOffset = currentOffset;
401         bTrcSize = writeColorTrc(stream, spaceDPtr->trc[2]);
402         currentOffset += bTrcSize;
403     }
404 
405     descOffset = currentOffset;
406     QByteArray description = spaceDPtr->description.toUtf8();
407     stream << uint(Tag::desc) << uint(0);
408     stream << uint(description.size() + 1);
409     stream.writeRawData(description.constData(), description.size() + 1);
410     stream << uint(0) << uint(0);
411     stream << ushort(0) << uchar(0);
412     QByteArray macdesc(67, '\0');
413     stream.writeRawData(macdesc.constData(), 67);
414     descSize = 90 + description.size() + 1;
415     currentOffset += descSize;
416 
417     buffer.close();
418     QByteArray iccProfile = buffer.buffer();
419     // Now write final size
420     *(quint32_be *)iccProfile.data() = iccProfile.size();
421     // And the final indices and sizes of variable size tags:
422     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 4) = rTrcOffset;
423     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 8) = rTrcSize;
424     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 12 + 4) = gTrcOffset;
425     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 12 + 8) = gTrcSize;
426     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 2 * 12 + 4) = bTrcOffset;
427     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 2 * 12 + 8) = bTrcSize;
428     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 3 * 12 + 4) = descOffset;
429     *(quint32_be *)(iccProfile.data() + variableTagTableOffsets + 3 * 12 + 8) = descSize;
430 
431 #if !defined(QT_NO_DEBUG) || defined(QT_FORCE_ASSERTS)
432     const ICCProfileHeader *iccHeader = (const ICCProfileHeader *)iccProfile.constData();
433     Q_ASSERT(qsizetype(iccHeader->profileSize) == qsizetype(iccProfile.size()));
434     Q_ASSERT(isValidIccProfile(*iccHeader));
435 #endif
436 
437     return iccProfile;
438 }
439 
440 struct TagEntry {
441     quint32 offset;
442     quint32 size;
443 };
444 
445 bool parseXyzData(const QByteArray &data, const TagEntry &tagEntry, QColorVector &colorVector)
446 {
447     if (tagEntry.size < sizeof(XYZTagData)) {
448         qCWarning(lcIcc) << "Undersized XYZ tag";
449         return false;
450     }
451     const XYZTagData *xyz = reinterpret_cast<const XYZTagData *>(data.constData() + tagEntry.offset);
452     if (xyz->type != quint32(Tag::XYZ_)) {
453         qCWarning(lcIcc) << "Bad XYZ content type";
454         return false;
455     }
456     const float x = fromFixedS1516(xyz->fixedX);
457     const float y = fromFixedS1516(xyz->fixedY);
458     const float z = fromFixedS1516(xyz->fixedZ);
459 
460     colorVector = QColorVector(x, y, z);
461     return true;
462 }
463 
464 bool parseTRC(const QByteArray &data, const TagEntry &tagEntry, QColorTrc &gamma)
465 {
466     const GenericTagData *trcData = reinterpret_cast<const GenericTagData *>(data.constData() + tagEntry.offset);
467     if (trcData->type == quint32(Tag::curv)) {
468         const CurvTagData *curv = static_cast<const CurvTagData *>(trcData);
469         if (curv->valueCount > (1 << 16))
470             return false;
471         if (tagEntry.size - 12 < 2 * curv->valueCount)
472             return false;
473         if (curv->valueCount == 0) {
474             gamma.m_type = QColorTrc::Type::Function;
475             gamma.m_fun = QColorTransferFunction(); // Linear
476         } else if (curv->valueCount == 1) {
477             float g = curv->value[0] * (1.0f / 256.0f);
478             gamma.m_type = QColorTrc::Type::Function;
479             gamma.m_fun = QColorTransferFunction::fromGamma(g);
480         } else {
481             QVector<quint16> tabl;
482             tabl.resize(curv->valueCount);
483             for (uint i = 0; i < curv->valueCount; ++i)
484                 tabl[i] = curv->value[i];
485             QColorTransferTable table = QColorTransferTable(curv->valueCount, std::move(tabl));
486             QColorTransferFunction curve;
487             if (!table.asColorTransferFunction(&curve)) {
488                 gamma.m_type = QColorTrc::Type::Table;
489                 gamma.m_table = table;
490             } else {
491                 qCDebug(lcIcc) << "Detected curv table as function";
492                 gamma.m_type = QColorTrc::Type::Function;
493                 gamma.m_fun = curve;
494             }
495         }
496         return true;
497     }
498     if (trcData->type == quint32(Tag::para)) {
499         if (tagEntry.size < sizeof(ParaTagData))
500             return false;
501         const ParaTagData *para = static_cast<const ParaTagData *>(trcData);
502         switch (para->curveType) {
503         case 0: {
504             float g = fromFixedS1516(para->parameter[0]);
505             gamma.m_type = QColorTrc::Type::Function;
506             gamma.m_fun = QColorTransferFunction::fromGamma(g);
507             break;
508         }
509         case 1: {
510             if (tagEntry.size < sizeof(ParaTagData) + 2 * 4)
511                 return false;
512             float g = fromFixedS1516(para->parameter[0]);
513             float a = fromFixedS1516(para->parameter[1]);
514             float b = fromFixedS1516(para->parameter[2]);
515             float d = -b / a;
516             gamma.m_type = QColorTrc::Type::Function;
517             gamma.m_fun = QColorTransferFunction(a, b, 0.0f, d, 0.0f, 0.0f, g);
518             break;
519         }
520         case 2: {
521             if (tagEntry.size < sizeof(ParaTagData) + 3 * 4)
522                 return false;
523             float g = fromFixedS1516(para->parameter[0]);
524             float a = fromFixedS1516(para->parameter[1]);
525             float b = fromFixedS1516(para->parameter[2]);
526             float c = fromFixedS1516(para->parameter[3]);
527             float d = -b / a;
528             gamma.m_type = QColorTrc::Type::Function;
529             gamma.m_fun = QColorTransferFunction(a, b, 0.0f, d, c, c, g);
530             break;
531         }
532         case 3: {
533             if (tagEntry.size < sizeof(ParaTagData) + 4 * 4)
534                 return false;
535             float g = fromFixedS1516(para->parameter[0]);
536             float a = fromFixedS1516(para->parameter[1]);
537             float b = fromFixedS1516(para->parameter[2]);
538             float c = fromFixedS1516(para->parameter[3]);
539             float d = fromFixedS1516(para->parameter[4]);
540             gamma.m_type = QColorTrc::Type::Function;
541             gamma.m_fun = QColorTransferFunction(a, b, c, d, 0.0f, 0.0f, g);
542             break;
543         }
544         case 4: {
545             if (tagEntry.size < sizeof(ParaTagData) + 6 * 4)
546                 return false;
547             float g = fromFixedS1516(para->parameter[0]);
548             float a = fromFixedS1516(para->parameter[1]);
549             float b = fromFixedS1516(para->parameter[2]);
550             float c = fromFixedS1516(para->parameter[3]);
551             float d = fromFixedS1516(para->parameter[4]);
552             float e = fromFixedS1516(para->parameter[5]);
553             float f = fromFixedS1516(para->parameter[6]);
554             gamma.m_type = QColorTrc::Type::Function;
555             gamma.m_fun = QColorTransferFunction(a, b, c, d, e, f, g);
556             break;
557         }
558         default:
559             qCWarning(lcIcc)  << "Unknown para type" << uint(para->curveType);
560             return false;
561         }
562         return true;
563     }
564     qCWarning(lcIcc) << "Invalid TRC data type";
565     return false;
566 }
567 
568 bool parseDesc(const QByteArray &data, const TagEntry &tagEntry, QString &descName)
569 {
570     const GenericTagData *tag = (const GenericTagData *)(data.constData() + tagEntry.offset);
571 
572     // Either 'desc' (ICCv2) or 'mluc' (ICCv4)
573     if (tag->type == quint32(Tag::desc)) {
574         if (tagEntry.size < sizeof(DescTagData))
575             return false;
576         const DescTagData *desc = (const DescTagData *)(data.constData() + tagEntry.offset);
577         const quint32 len = desc->asciiDescriptionLength;
578         if (len < 1)
579             return false;
580         if (tagEntry.size - 12 < len)
581             return false;
582         if (desc->asciiDescription[len - 1] != '\0')
583             return false;
584         descName = QString::fromLatin1(desc->asciiDescription, len - 1);
585         return true;
586     }
587     if (tag->type != quint32(Tag::mluc))
588         return false;
589 
590     if (tagEntry.size < sizeof(MlucTagData))
591         return false;
592     const MlucTagData *mluc = (const MlucTagData *)(data.constData() + tagEntry.offset);
593     if (mluc->recordCount < 1)
594         return false;
595     if (mluc->recordSize < 12)
596         return false;
597     // We just use the primary record regardless of language or country.
598     const quint32 stringOffset = mluc->records[0].offset;
599     const quint32 stringSize = mluc->records[0].size;
600     if (tagEntry.size < stringOffset || tagEntry.size - stringOffset < stringSize )
601         return false;
602     if ((stringSize | stringOffset) & 1)
603         return false;
604     quint32 stringLen = stringSize / 2;
605     const ushort *unicodeString = (const ushort *)(data.constData() + tagEntry.offset + stringOffset);
606     // The given length shouldn't include 0-termination, but might.
607     if (stringLen > 1 && unicodeString[stringLen - 1] == 0)
608         --stringLen;
609     QVarLengthArray<quint16> utf16hostendian(stringLen);
610     qFromBigEndian<ushort>(unicodeString, stringLen, utf16hostendian.data());
611     descName = QString::fromUtf16(utf16hostendian.data(), stringLen);
612     return true;
613 }
614 
615 bool fromIccProfile(const QByteArray &data, QColorSpace *colorSpace)
616 {
617     if (data.size() < qsizetype(sizeof(ICCProfileHeader))) {
618         qCWarning(lcIcc) << "fromIccProfile: failed size sanity 1";
619         return false;
620     }
621     const ICCProfileHeader *header = (const ICCProfileHeader *)data.constData();
622     if (!isValidIccProfile(*header))
623         return false; // if failed we already printing a warning
624     if (qsizetype(header->profileSize) > data.size()) {
625         qCWarning(lcIcc) << "fromIccProfile: failed size sanity 2";
626         return false;
627     }
628 
629     // Read tag index
630     const TagTableEntry *tagTable = (const TagTableEntry *)(data.constData() + sizeof(ICCProfileHeader));
631     const qsizetype offsetToData = sizeof(ICCProfileHeader) + header->tagCount * sizeof(TagTableEntry);
632     if (offsetToData > data.size() || offsetToData <= 0) {
633         qCWarning(lcIcc) << "fromIccProfile: failed index size sanity";
634         return false;
635     }
636 
637     QHash<Tag, TagEntry> tagIndex;
638     for (uint i = 0; i < header->tagCount; ++i) {
639         // Sanity check tag sizes and offsets:
640         if (qsizetype(tagTable[i].offset) < offsetToData) {
641             qCWarning(lcIcc) << "fromIccProfile: failed tag offset sanity 1";
642             return false;
643         }
644         // Checked separately from (+ size) to handle overflow.
645         if (tagTable[i].offset > header->profileSize) {
646             qCWarning(lcIcc) << "fromIccProfile: failed tag offset sanity 2";
647             return false;
648         }
649         if (tagTable[i].size < 12) {
650             qCWarning(lcIcc) << "fromIccProfile: failed minimal tag size sanity";
651             return false;
652         }
653         if (tagTable[i].size > header->profileSize - tagTable[i].offset) {
654             qCWarning(lcIcc) << "fromIccProfile: failed tag offset + size sanity";
655             return false;
656         }
657         if (tagTable[i].offset & 0x03) {
658             qCWarning(lcIcc) << "fromIccProfile: invalid tag offset alignment";
659             return false;
660         }
661 //        printf("'%4s' %d %d\n", (const char *)&tagTable[i].signature,
662 //                                quint32(tagTable[i].offset),
663 //                                quint32(tagTable[i].size));
664         tagIndex.insert(Tag(quint32(tagTable[i].signature)), { tagTable[i].offset, tagTable[i].size });
665     }
666 
667     // Check the profile is three-component matrix based (what we currently support):
668     if (header->inputColorSpace == uint(ColorSpaceType::Rgb)) {
669         if (!tagIndex.contains(Tag::rXYZ) || !tagIndex.contains(Tag::gXYZ) || !tagIndex.contains(Tag::bXYZ) ||
670             !tagIndex.contains(Tag::rTRC) || !tagIndex.contains(Tag::gTRC) || !tagIndex.contains(Tag::bTRC) ||
671             !tagIndex.contains(Tag::wtpt)) {
672             qCWarning(lcIcc) << "fromIccProfile: Unsupported ICC profile - not three component matrix based";
673             return false;
674         }
675     } else {
676         Q_ASSERT(header->inputColorSpace == uint(ColorSpaceType::Gray));
677         if (!tagIndex.contains(Tag::kTRC) || !tagIndex.contains(Tag::wtpt)) {
678             qCWarning(lcIcc) << "fromIccProfile: Invalid ICC profile - not valid gray scale based";
679             return false;
680         }
681     }
682 
683     QColorSpacePrivate *colorspaceDPtr = QColorSpacePrivate::getWritable(*colorSpace);
684 
685     if (header->inputColorSpace == uint(ColorSpaceType::Rgb)) {
686         // Parse XYZ tags
687         if (!parseXyzData(data, tagIndex[Tag::rXYZ], colorspaceDPtr->toXyz.r))
688             return false;
689         if (!parseXyzData(data, tagIndex[Tag::gXYZ], colorspaceDPtr->toXyz.g))
690             return false;
691         if (!parseXyzData(data, tagIndex[Tag::bXYZ], colorspaceDPtr->toXyz.b))
692             return false;
693         if (!parseXyzData(data, tagIndex[Tag::wtpt], colorspaceDPtr->whitePoint))
694             return false;
695 
696         colorspaceDPtr->primaries = QColorSpace::Primaries::Custom;
697         if (colorspaceDPtr->toXyz == QColorMatrix::toXyzFromSRgb()) {
698             qCDebug(lcIcc) << "fromIccProfile: sRGB primaries detected";
699             colorspaceDPtr->primaries = QColorSpace::Primaries::SRgb;
700         } else if (colorspaceDPtr->toXyz == QColorMatrix::toXyzFromAdobeRgb()) {
701             qCDebug(lcIcc) << "fromIccProfile: Adobe RGB primaries detected";
702             colorspaceDPtr->primaries = QColorSpace::Primaries::AdobeRgb;
703         } else if (colorspaceDPtr->toXyz == QColorMatrix::toXyzFromDciP3D65()) {
704             qCDebug(lcIcc) << "fromIccProfile: DCI-P3 D65 primaries detected";
705             colorspaceDPtr->primaries = QColorSpace::Primaries::DciP3D65;
706         }
707         if (colorspaceDPtr->toXyz == QColorMatrix::toXyzFromProPhotoRgb()) {
708             qCDebug(lcIcc) << "fromIccProfile: ProPhoto RGB primaries detected";
709             colorspaceDPtr->primaries = QColorSpace::Primaries::ProPhotoRgb;
710         }
711     } else {
712         // We will use sRGB primaries and fit to match the given white-point if
713         // it doesn't match sRGB's.
714         QColorVector whitePoint;
715         if (!parseXyzData(data, tagIndex[Tag::wtpt], whitePoint))
716             return false;
717         if (!qFuzzyCompare(whitePoint.y, 1.0f) || (1.0f + whitePoint.z - whitePoint.x) == 0.0f) {
718             qCWarning(lcIcc) << "fromIccProfile: Invalid ICC profile - gray white-point not normalized";
719             return false;
720         }
721         if (whitePoint == QColorVector::D65()) {
722             colorspaceDPtr->primaries = QColorSpace::Primaries::SRgb;
723         } else {
724             colorspaceDPtr->primaries = QColorSpace::Primaries::Custom;
725             // Calculate chromaticity from xyz (assuming y == 1.0f).
726             float y = 1.0f / (1.0f + whitePoint.z - whitePoint.x);
727             float x = whitePoint.x * y;
728             QColorSpacePrimaries primaries(QColorSpace::Primaries::SRgb);
729             primaries.whitePoint = QPointF(x,y);
730             if (!primaries.areValid()) {
731                 qCWarning(lcIcc) << "fromIccProfile: Invalid ICC profile - invalid white-point";
732                 return false;
733             }
734             colorspaceDPtr->toXyz = primaries.toXyzMatrix();
735         }
736     }
737     // Reset the matrix to our canonical values:
738     if (colorspaceDPtr->primaries != QColorSpace::Primaries::Custom)
739         colorspaceDPtr->setToXyzMatrix();
740 
741     // Parse TRC tags
742     TagEntry rTrc;
743     TagEntry gTrc;
744     TagEntry bTrc;
745     if (header->inputColorSpace == uint(ColorSpaceType::Gray)) {
746         rTrc = tagIndex[Tag::kTRC];
747         gTrc = tagIndex[Tag::kTRC];
748         bTrc = tagIndex[Tag::kTRC];
749     } else if (tagIndex.contains(Tag::aarg) && tagIndex.contains(Tag::aagg) && tagIndex.contains(Tag::aabg)) {
750         // Apple extension for parametric version of TRCs in ICCv2:
751         rTrc = tagIndex[Tag::aarg];
752         gTrc = tagIndex[Tag::aagg];
753         bTrc = tagIndex[Tag::aabg];
754     } else {
755         rTrc = tagIndex[Tag::rTRC];
756         gTrc = tagIndex[Tag::gTRC];
757         bTrc = tagIndex[Tag::bTRC];
758     }
759 
760     QColorTrc rCurve;
761     QColorTrc gCurve;
762     QColorTrc bCurve;
763     if (!parseTRC(data, rTrc, rCurve)) {
764         qCWarning(lcIcc) << "fromIccProfile: Invalid rTRC";
765         return false;
766     }
767     if (!parseTRC(data, gTrc, gCurve)) {
768         qCWarning(lcIcc) << "fromIccProfile: Invalid gTRC";
769         return false;
770     }
771     if (!parseTRC(data, bTrc, bCurve)) {
772         qCWarning(lcIcc) << "fromIccProfile: Invalid bTRC";
773         return false;
774     }
775     if (rCurve == gCurve && gCurve == bCurve && rCurve.m_type == QColorTrc::Type::Function) {
776         if (rCurve.m_fun.isLinear()) {
777             qCDebug(lcIcc) << "fromIccProfile: Linear gamma detected";
778             colorspaceDPtr->trc[0] = QColorTransferFunction();
779             colorspaceDPtr->transferFunction = QColorSpace::TransferFunction::Linear;
780             colorspaceDPtr->gamma = 1.0f;
781         } else if (rCurve.m_fun.isGamma()) {
782             qCDebug(lcIcc) << "fromIccProfile: Simple gamma detected";
783             colorspaceDPtr->trc[0] = QColorTransferFunction::fromGamma(rCurve.m_fun.m_g);
784             colorspaceDPtr->transferFunction = QColorSpace::TransferFunction::Gamma;
785             colorspaceDPtr->gamma = rCurve.m_fun.m_g;
786         } else if (rCurve.m_fun.isSRgb()) {
787             qCDebug(lcIcc) << "fromIccProfile: sRGB gamma detected";
788             colorspaceDPtr->trc[0] = QColorTransferFunction::fromSRgb();
789             colorspaceDPtr->transferFunction = QColorSpace::TransferFunction::SRgb;
790         } else {
791             colorspaceDPtr->trc[0] = rCurve;
792             colorspaceDPtr->transferFunction = QColorSpace::TransferFunction::Custom;
793         }
794 
795         colorspaceDPtr->trc[1] = colorspaceDPtr->trc[0];
796         colorspaceDPtr->trc[2] = colorspaceDPtr->trc[0];
797     } else {
798         colorspaceDPtr->trc[0] = rCurve;
799         colorspaceDPtr->trc[1] = gCurve;
800         colorspaceDPtr->trc[2] = bCurve;
801         colorspaceDPtr->transferFunction = QColorSpace::TransferFunction::Custom;
802     }
803 
804     if (tagIndex.contains(Tag::desc)) {
805         if (!parseDesc(data, tagIndex[Tag::desc], colorspaceDPtr->description))
806             qCWarning(lcIcc) << "fromIccProfile: Failed to parse description";
807         else
808             qCDebug(lcIcc) << "fromIccProfile: Description" << colorspaceDPtr->description;
809     }
810 
811     colorspaceDPtr->identifyColorSpace();
812     if (colorspaceDPtr->namedColorSpace)
813         qCDebug(lcIcc) << "fromIccProfile: Named colorspace detected: " << QColorSpace::NamedColorSpace(colorspaceDPtr->namedColorSpace);
814 
815     colorspaceDPtr->iccProfile = data;
816 
817     return true;
818 }
819 
820 } // namespace QIcc
821 
822 QT_END_NAMESPACE
