Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qaccessiblecache_p.h"
41 #include <QtCore/qdebug.h>
42 #include <QtCore/qloggingcategory.h>
43 
44 #ifndef QT_NO_ACCESSIBILITY
45 
46 QT_BEGIN_NAMESPACE
47 
48 Q_LOGGING_CATEGORY(lcAccessibilityCache, "qt.accessibility.cache");
49 
50 /*!
51     \class QAccessibleCache
52     \internal
53     \brief Maintains a cache of accessible interfaces.
54 */
55 
56 static QAccessibleCache *accessibleCache = nullptr;
57 
58 static void cleanupAccessibleCache()
59 {
60     delete accessibleCache;
61     accessibleCache = nullptr;
62 }
63 
64 QAccessibleCache::~QAccessibleCache()
65 {
66     for (QAccessible::Id id: idToInterface.keys())
67         deleteInterface(id);
68 }
69 
70 QAccessibleCache *QAccessibleCache::instance()
71 {
72     if (!accessibleCache) {
73         accessibleCache = new QAccessibleCache;
74         qAddPostRoutine(cleanupAccessibleCache);
75     }
76     return accessibleCache;
77 }
78 
79 /*
80   The ID is always in the range [INT_MAX+1, UINT_MAX].
81   This makes it easy on windows to reserve the positive integer range
82   for the index of a child and not clash with the unique ids.
83 */
84 QAccessible::Id QAccessibleCache::acquireId() const
85 {
86     static const QAccessible::Id FirstId = QAccessible::Id(INT_MAX) + 1;
87     static QAccessible::Id lastUsedId = FirstId;
88 
89     while (idToInterface.contains(lastUsedId)) {
90         // (wrap back when when we reach UINT_MAX - 1)
91         // -1 because on Android -1 is taken for the "View" so just avoid it completely for consistency
92         if (lastUsedId == UINT_MAX - 1)
93             lastUsedId = FirstId;
94         else
95             ++lastUsedId;
96     }
97 
98     return lastUsedId;
99 }
100 
101 QAccessibleInterface *QAccessibleCache::interfaceForId(QAccessible::Id id) const
102 {
103     return idToInterface.value(id);
104 }
105 
106 QAccessible::Id QAccessibleCache::idForInterface(QAccessibleInterface *iface) const
107 {
108     return interfaceToId.value(iface);
109 }
110 
111 QAccessible::Id QAccessibleCache::idForObject(QObject *obj) const
112 {
113     const QMetaObject *mo = obj ? obj->metaObject() : nullptr;
114     for (auto pair : objectToId.values(obj)) {
115         if (pair.second == mo) {
116             return pair.first;
117         }
118     }
119     return 0;
120 }
121 
122 /*!
123  * \internal
124  *
125  * returns true if the cache has an interface for the object and its corresponding QMetaObject
126  */
127 bool QAccessibleCache::containsObject(QObject *obj) const
128 {
129     if (const QMetaObject *mo = obj->metaObject()) {
130         for (auto pair : objectToId.values(obj)) {
131             if (pair.second == mo) {
132                 return true;
133             }
134         }
135     }
136     return false;
137 }
138 
139 QAccessible::Id QAccessibleCache::insert(QObject *object, QAccessibleInterface *iface) const
140 {
141     Q_ASSERT(iface);
142     Q_UNUSED(object)
143 
144     // object might be 0
145     Q_ASSERT(!containsObject(object));
146     Q_ASSERT_X(!interfaceToId.contains(iface), "", "Accessible interface inserted into cache twice!");
147 
148     QAccessible::Id id = acquireId();
149     QObject *obj = iface->object();
150     Q_ASSERT(object == obj);
151     if (obj) {
152         objectToId.insert(obj, qMakePair(id, obj->metaObject()));
153         connect(obj, &QObject::destroyed, this, &QAccessibleCache::objectDestroyed);
154     }
155     idToInterface.insert(id, iface);
156     interfaceToId.insert(iface, id);
157     qCDebug(lcAccessibilityCache) << "insert - id:" << id << " iface:" << iface;
158     return id;
159 }
160 
161 void QAccessibleCache::objectDestroyed(QObject* obj)
162 {
163     /*
164     In some cases we might add a not fully-constructed object to the cache. This might happen with
165     for instance QWidget subclasses that are in the construction phase. If updateAccessibility() is
166     called in the constructor of QWidget (directly or indirectly), it it will end up asking for the
167     classname of that widget in order to know which accessibility interface subclass the
168     accessibility factory should instantiate and return. However, since that requires a virtual
169     call to metaObject(), it will return the metaObject() of QWidget (not for the subclass), and so
170     the factory will ultimately return a rather generic QAccessibleWidget instead of a more
171     specialized interface. Even though it is a "incomplete" interface it will be put in the cache
172     and it will be usable as if the object is a widget. In order for the cache to not just return
173     the same generic QAccessibleWidget for that object, we have to check if the cache matches
174     the objects QMetaObject. We therefore use a QMultiHash and also store the QMetaObject * in
175     the value. We therefore might potentially store several values for the corresponding object
176     (in theory one for each level in the class inheritance chain)
177 
178     This means that after the object have been fully constructed, we will at some point again query
179     for the interface for the same object, but now its metaObject() returns the correct
180     QMetaObject, so it won't return the QAccessibleWidget that is associated with the object in the
181     cache. Instead it will go to the factory and create the _correct_ specialized interface for the
182     object. If that succeeded, it will also put that entry in the cache. We will therefore in those
183     cases insert *two* cache entries for the same object (using QMultiHash). They both must live
184     until the object is destroyed.
185 
186     So when the object is destroyed we might have to delete two entries from the cache.
187     */
188     for (auto pair : objectToId.values(obj)) {
189         QAccessible::Id id = pair.first;
190         Q_ASSERT_X(idToInterface.contains(id), "", "QObject with accessible interface deleted, where interface not in cache!");
191         deleteInterface(id, obj);
192     }
193 }
194 
195 void QAccessibleCache::deleteInterface(QAccessible::Id id, QObject *obj)
196 {
197     QAccessibleInterface *iface = idToInterface.take(id);
198     qCDebug(lcAccessibilityCache) << "delete - id:" << id << " iface:" << iface;
199     if (!iface) // the interface may be deleted already
200         return;
201     interfaceToId.take(iface);
202     if (!obj)
203         obj = iface->object();
204     if (obj)
205         objectToId.remove(obj);
206     delete iface;
207 
208 #ifdef Q_OS_MAC
209     removeCocoaElement(id);
210 #endif
211 }
212 
213 QT_END_NAMESPACE
214 
215 #endif
