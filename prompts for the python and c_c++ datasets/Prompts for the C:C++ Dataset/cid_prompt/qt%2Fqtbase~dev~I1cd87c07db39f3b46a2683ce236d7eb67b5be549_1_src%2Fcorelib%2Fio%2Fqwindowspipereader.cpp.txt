Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qwindowspipereader_p.h"
41 #include "qiodevice_p.h"
42 #include <qelapsedtimer.h>
43 #include <qscopedvaluerollback.h>
44 #include <qabstracteventdispatcher.h>
45 #include <private/qthread_p.h>
46 
47 QT_BEGIN_NAMESPACE
48 
49 QWindowsPipeReader::QWindowsPipeReader(QObject *parent)
50     : QObject(parent),
51       handle(INVALID_HANDLE_VALUE),
52       eventHandle(CreateEvent(NULL, TRUE, FALSE, NULL)),
53       waitHandle(INVALID_HANDLE_VALUE),
54       readBufferMaxSize(0),
55       actualReadBufferSize(0),
56       stopped(true),
57       readSequenceStarted(false),
58       notifiedCalled(false),
59       pipeBroken(false),
60       readyReadPending(false),
61       inReadyRead(false)
62 {
63     connect(this, &QWindowsPipeReader::_q_queueReadyRead,
64             this, &QWindowsPipeReader::emitPendingReadyRead, Qt::QueuedConnection);
65 }
66 
67 QWindowsPipeReader::~QWindowsPipeReader()
68 {
69     stop();
70     CloseHandle(eventHandle);
71 }
72 
73 /*!
74     Sets the handle to read from. The handle must be valid.
75  */
76 void QWindowsPipeReader::setHandle(HANDLE hPipeReadEnd)
77 {
78     readBuffer.clear();
79     actualReadBufferSize = 0;
80     handle = hPipeReadEnd;
81     pipeBroken = false;
82 }
83 
84 /*!
85     Stops the asynchronous read sequence.
86     If the read sequence is running then the I/O operation is canceled.
87  */
88 void QWindowsPipeReader::stop()
89 {
90     stopped = true;
91     if (readSequenceStarted) {
92         if (!CancelIoEx(handle, &overlapped)) {
93             const DWORD dwError = GetLastError();
94             if (dwError != ERROR_NOT_FOUND) {
95                 qErrnoWarning(dwError, "QWindowsPipeReader: CancelIoEx on handle %p failed.",
96                               handle);
97             }
98         }
99         waitForNotification(-1);
100     }
101 }
102 
103 /*!
104     Returns the number of bytes we've read so far.
105  */
106 qint64 QWindowsPipeReader::bytesAvailable() const
107 {
108     return actualReadBufferSize;
109 }
110 
111 /*!
112     Copies at most \c{maxlen} bytes from the internal read buffer to \c{data}.
113  */
114 qint64 QWindowsPipeReader::read(char *data, qint64 maxlen)
115 {
116     if (pipeBroken && actualReadBufferSize == 0)
117         return 0;  // signal EOF
118 
119     qint64 readSoFar;
120     // If startAsyncRead() has read data, copy it to its destination.
121     if (maxlen == 1 && actualReadBufferSize > 0) {
122         *data = readBuffer.getChar();
123         actualReadBufferSize--;
124         readSoFar = 1;
125     } else {
126         readSoFar = readBuffer.read(data, qMin(actualReadBufferSize, maxlen));
127         actualReadBufferSize -= readSoFar;
128     }
129 
130     if (!pipeBroken) {
131         if (!readSequenceStarted && !stopped)
132             startAsyncRead();
133         if (readSoFar == 0)
134             return -2;      // signal EWOULDBLOCK
135     }
136 
137     return readSoFar;
138 }
139 
140 bool QWindowsPipeReader::canReadLine() const
141 {
142     return readBuffer.indexOf('\n', actualReadBufferSize) >= 0;
143 }
144 
145 /*!
146     \internal
147     Will be called whenever the read operation completes.
148  */
149 void QWindowsPipeReader::notified()
150 {
151     notifiedCalled = true;
152     readSequenceStarted = false;
153 
154     DWORD numberOfBytesTransfered = 0;
155     DWORD errorCode = ERROR_SUCCESS;
156     if (!GetOverlappedResult(handle, &overlapped,
157                              &numberOfBytesTransfered, TRUE))
158         errorCode = GetLastError();
159 
160     if (!UnregisterWaitEx(waitHandle, INVALID_HANDLE_VALUE))
161         qErrnoWarning("QWindowsPipeReader: UnregisterWait failed.");
162 
163     switch (errorCode) {
164     case ERROR_SUCCESS:
165         break;
166     case ERROR_MORE_DATA:
167         // This is not an error. We're connected to a message mode
168         // pipe and the message didn't fit into the pipe's system
169         // buffer. We will read the remaining data in the next call.
170         break;
171     case ERROR_BROKEN_PIPE:
172     case ERROR_PIPE_NOT_CONNECTED:
173         pipeBroken = true;
174         break;
175     case ERROR_OPERATION_ABORTED:
176         if (stopped)
177             break;
178         Q_FALLTHROUGH();
179     default:
180         emit winError(errorCode, QLatin1String("QWindowsPipeReader::notified"));
181         pipeBroken = true;
182         break;
183     }
184 
185     // After the reader was stopped, the only reason why this function can be called is the
186     // completion of a cancellation. No signals should be emitted, and no new read sequence should
187     // be started in this case.
188     if (stopped)
189         return;
190 
191     if (pipeBroken) {
192         emit pipeClosed();
193         return;
194     }
195 
196     actualReadBufferSize += numberOfBytesTransfered;
197     readBuffer.truncate(actualReadBufferSize);
198     startAsyncRead();
199     if (!inReadyRead) {
200         readyReadPending = true;
201         emitPendingReadyRead();
202     }
203 }
204 
205 bool QWindowsPipeReader::event(QEvent * e)
206 {
207     QObject::event(e);                        // will activate filters
208     if (e->type() == QEvent::WinEventAct) {
209         // Enable QEvent::WinEventAct posting.
210         winEventActPosted.fetchAndStoreAcquire(false);
211         if (readSequenceStarted && signaled.loadRelaxed()) {
212             signaled.storeRelaxed(false);
213             notified();
214         }
215         return true;
216     }
217     return false;
218 }
219 
220 void QWindowsPipeReader::waitCallback(PVOID lpParameter, BOOLEAN TimerOrWaitFired)
221 {
222     Q_UNUSED(TimerOrWaitFired);
223     QWindowsPipeReader *pipeReader = reinterpret_cast<QWindowsPipeReader *>(lpParameter);
224 
225     pipeReader->signaled.storeRelaxed(true);
226     if (!pipeReader->winEventActPosted.fetchAndStoreRelease(true))
227         QCoreApplication::postEvent(pipeReader, new QEvent(QEvent::WinEventAct));
228 }
229 
230 /*!
231     \internal
232     Reads data from the pipe into the readbuffer.
233  */
234 void QWindowsPipeReader::startAsyncRead()
235 {
236     const DWORD minReadBufferSize = 4096;
237     forever {
238         qint64 bytesToRead = qMax(checkPipeState(), minReadBufferSize);
239         if (pipeBroken)
240             return;
241 
242         if (readBufferMaxSize && bytesToRead > (readBufferMaxSize - readBuffer.size())) {
243             bytesToRead = readBufferMaxSize - readBuffer.size();
244             if (bytesToRead <= 0) {
245                 // Buffer is full. User must read data from the buffer
246                 // before we can read more from the pipe.
247                 return;
248             }
249         }
250 
251         char *ptr = readBuffer.reserve(bytesToRead);
252 
253         stopped = false;
254         ZeroMemory(&overlapped, sizeof(OVERLAPPED));
255         overlapped.hEvent = eventHandle;
256         DWORD numberOfBytesRead;
257         if (!ReadFile(handle, ptr, bytesToRead, &numberOfBytesRead, &overlapped))
258             break;
259 
260         // Read succeeds immediately, so numberOfBytesRead is valid.
261         actualReadBufferSize += numberOfBytesRead;
262         readBuffer.truncate(actualReadBufferSize);
263         if (!readyReadPending) {
264             readyReadPending = true;
265             emit _q_queueReadyRead(QWindowsPipeReader::QPrivateSignal());
266         }
267     }
268 
269     const DWORD dwError = GetLastError();
270     switch (dwError) {
271     case ERROR_IO_PENDING:
272         // Operation has been queued and will complete in the future.
273         signaled.storeRelaxed(false);
274         readSequenceStarted = true;
275         if (RegisterWaitForSingleObject(&waitHandle, eventHandle, &waitCallback, this,
276                                         INFINITE, WT_EXECUTEONLYONCE) == 0)
277             qErrnoWarning("QWindowsPipeReader: RegisterWaitForSingleObject failed.");
278         break;
279     case ERROR_BROKEN_PIPE:
280     case ERROR_PIPE_NOT_CONNECTED:
281         // It may happen, that the other side closes the connection directly
282         // after writing data. Then we must set the appropriate socket state.
283         pipeBroken = true;
284         emit pipeClosed();
285         break;
286     default:
287         emit winError(dwError, QLatin1String("QWindowsPipeReader::startAsyncRead"));
288         break;
289     }
290 }
291 
292 /*!
293     \internal
294     Returns the number of available bytes in the pipe.
295     Sets QWindowsPipeReader::pipeBroken to true if the connection is broken.
296  */
297 DWORD QWindowsPipeReader::checkPipeState()
298 {
299     DWORD bytes;
300     if (PeekNamedPipe(handle, nullptr, 0, nullptr, &bytes, nullptr))
301         return bytes;
302     if (!pipeBroken) {
303         pipeBroken = true;
304         emit pipeClosed();
305     }
306     return 0;
307 }
308 
309 bool QWindowsPipeReader::waitForNotification(int timeout)
310 {
311     QElapsedTimer t;
312     t.start();
313     notifiedCalled = false;
314     int msecs = timeout;
315     do {
316         DWORD waitRet = WaitForSingleObjectEx(eventHandle,
317                                               msecs == -1 ? INFINITE : msecs, TRUE);
318         if (waitRet == WAIT_OBJECT_0) {
319             notified();
320             return true;
321         }
322 
323         if (waitRet != WAIT_IO_COMPLETION)
324             return false;
325 
326         // Some I/O completion routine was called. Wait some more.
327         msecs = qt_subtract_from_timeout(timeout, t.elapsed());
328     } while (msecs != 0);
329 
330     return false;
331 }
332 
333 void QWindowsPipeReader::emitPendingReadyRead()
334 {
335     if (readyReadPending) {
336         readyReadPending = false;
337         QScopedValueRollback<bool> guard(inReadyRead, true);
338         emit readyRead();
339     }
340 }
341 
342 /*!
343     Waits for the completion of the asynchronous read operation.
344     Returns \c true, if we've emitted the readyRead signal (non-recursive case)
345     or readyRead will be emitted by the event loop (recursive case).
346  */
347 bool QWindowsPipeReader::waitForReadyRead(int msecs)
348 {
349     if (readyReadPending) {
350         if (!inReadyRead)
351             emitPendingReadyRead();
352         return true;
353     }
354 
355     if (!readSequenceStarted)
356         return false;
357 
358     if (waitForNotification(msecs))
359         return true;
360 
361     return false;
362 }
363 
364 /*!
365     Waits until the pipe is closed.
366  */
367 bool QWindowsPipeReader::waitForPipeClosed(int msecs)
368 {
369     QElapsedTimer stopWatch;
370     stopWatch.start();
371     forever {
372         waitForReadyRead(0);
373         if (pipeBroken)
374             return true;
375         if (!readSequenceStarted)
376              return false;
377 
378          const int timeout = qt_subtract_from_timeout(msecs, stopWatch.elapsed());
379          if (timeout == 0)
380              return false;
381 
382          waitForNotification(timeout);
383     }
384 }
385 
386 QT_END_NAMESPACE
