Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "callgrindproxymodel.h"
27 
28 #include "callgrinddatamodel.h"
29 #include "callgrindfunction.h"
30 #include "callgrindfunctioncall.h"
31 #include "callgrindparsedata.h"
32 
33 #include <utils/qtcassert.h>
34 
35 #include <QDebug>
36 
37 namespace Valgrind {
38 namespace Callgrind {
39 
40 DataProxyModel::DataProxyModel(QObject *parent)
41     : QSortFilterProxyModel(parent)
42     , m_function(0)
43     , m_maxRows(0)
44     , m_minimumInclusiveCostRatio(0.0)
45 {
46     setDynamicSortFilter(true);
47 }
48 
49 const Function *DataProxyModel::filterFunction() const
50 {
51     return m_function;
52 }
53 
54 void DataProxyModel::setFilterBaseDir ( const QString &baseDir )
55 {
56     if (m_baseDir == baseDir)
57         return;
58 
59     m_baseDir = baseDir;
60     invalidateFilter();
61 }
62 
63 void DataProxyModel::setFilterFunction(const Function *function)
64 {
65     if (m_function == function)
66         return;
67 
68     const Function *previousFunction = m_function;
69     m_function = function;
70     invalidateFilter();
71     emit filterFunctionChanged(previousFunction, function);
72 }
73 
74 void DataProxyModel::setFilterMaximumRows(int rows)
75 {
76     if (m_maxRows == rows)
77         return;
78 
79     m_maxRows = rows;
80     invalidateFilter();
81     emit filterMaximumRowsChanged(rows);
82 }
83 
84 void DataProxyModel::setMinimumInclusiveCostRatio(double minimumInclusiveCost)
85 {
86     if (m_minimumInclusiveCostRatio == minimumInclusiveCost)
87         return;
88 
89     m_minimumInclusiveCostRatio = minimumInclusiveCost;
90     invalidateFilter();
91 }
92 
93 void DataProxyModel::setSourceModel(QAbstractItemModel *sourceModel)
94 {
95     if (!qobject_cast<DataModel *>(sourceModel)) {
96         qWarning() << Q_FUNC_INFO << "accepts DataModel instances only";
97         return;
98     }
99 
100     QSortFilterProxyModel::setSourceModel(sourceModel);
101 }
102 
103 DataModel *DataProxyModel::dataModel() const
104 {
105     return qobject_cast<DataModel *>(sourceModel());
106 }
107 
108 bool DataProxyModel::filterAcceptsRow(int source_row, const QModelIndex &source_parent) const
109 {
110     const QModelIndex source_index = sourceModel()->index( source_row, 0, source_parent );
111     if (!source_index.isValid())
112         return false;
113 
114     // if the filter regexp is a non-empty string, ignore our filters
115     if (!filterRegExp().isEmpty())
116         return QSortFilterProxyModel::filterAcceptsRow(source_row, source_parent);
117 
118     // check max rows
119     if (m_maxRows > 0 && source_row > m_maxRows)
120         return false;
121 
122     const Function *func = source_index.data(DataModel::FunctionRole).value<const Function *>();
123 
124     if (!func)
125         return false;
126 
127     // check if func is located in the specific base directory, if any
128     if (!m_baseDir.isEmpty()) {
129         if (!func->location().startsWith(m_baseDir))
130             return false;
131     }
132 
133     // check if the function from this index is a child of (called by) the filter function
134     if (m_function) {
135         bool isValid = false;
136         foreach (const FunctionCall *call, func->incomingCalls()) {
137             if (call->caller() == m_function) {
138                 isValid = true;
139                 break;
140             }
141         }
142         if (!isValid)
143             return false;
144     }
145 
146     // check minimum inclusive costs
147     DataModel *model = dataModel();
148     QTC_ASSERT(model, return false); // as always: this should never happen
149     const ParseData *data = model->parseData();
150     QTC_ASSERT(data, return false);
151     if (m_minimumInclusiveCostRatio != 0.0) {
152         const quint64 totalCost = data->totalCost(0);
153         const quint64 inclusiveCost = func->inclusiveCost(0);
154         const float inclusiveCostRatio = (float)inclusiveCost / totalCost;
155         if (inclusiveCostRatio < m_minimumInclusiveCostRatio)
156             return false;
157     }
158 
159     return QSortFilterProxyModel::filterAcceptsRow(source_row, source_parent);
160 }
161 
162 } // namespace Callgrind
163 } // namespace Valgrind
