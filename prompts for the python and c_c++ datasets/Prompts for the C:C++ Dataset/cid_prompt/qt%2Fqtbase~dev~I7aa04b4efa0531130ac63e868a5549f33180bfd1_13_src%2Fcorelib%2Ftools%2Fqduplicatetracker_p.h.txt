Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2020 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Marc Mutz <marc.mutz@kdab.com>
4 ** Contact: http://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 #ifndef QDUPLICATETRACKER_P_H
40 #define QDUPLICATETRACKER_P_H
41 
42 //
43 //  W A R N I N G
44 //  -------------
45 //
46 // This file is not part of the Qt API.  It exists purely as an
47 // implementation detail.  This header file may change from version to
48 // version without notice, or even be removed.
49 //
50 // We mean it.
51 //
52 
53 #include <qglobal.h>
54 
55 #if __has_include(<memory_resource>)
56 #  include <unordered_set>
57 #  include <memory_resource>
58 #  include <qhash.h> // for the hashing helpers
59 #else
60 #  include <qset.h>
61 #endif
62 
63 #include <algorithm>
64 
65 QT_BEGIN_NAMESPACE
66 
67 namespace QtPrivate {
68 constexpr inline quint16 nextLikelyBucketListSize(quint8 n) noexcept
69 {
70     // Use a subset of primes, growing in steps just short of The Golden Ratio.
71     constexpr quint8 primes[] = {
72         2, 3, 5, 7, 11, 17, 23, 37, 59, 89, 139, 227,
73     };
74 #ifdef __cpp_lib_constexpr_algorithms
75     const auto it = std::lower_bound(std::begin(primes), std::end(primes), n);
76     if (it != std::end(primes))
77         return *it;
78 #else
79     for (auto prime : primes) {
80         if (prime >= n)
81             return prime;
82     }
83 #endif
84     return 257;
85 }
86 
87 constexpr inline quint32 nextLikelyBucketListSize(quint16 n) noexcept
88 {
89     if (n < 256)
90         return nextLikelyBucketListSize(quint8(n));
91 
92     // Use a subset of primes, growing in steps just short of The Golden Ratio.
93     constexpr quint16 primes[] = {
94         359, 577, 929, 1499, 2423, 3919, 6337, 9497, 15173, 24481, 38873, 62233
95     };
96 #ifdef __cpp_lib_constexpr_algorithms
97     const auto it = std::lower_bound(std::begin(primes), std::end(primes), n);
98     if (it != std::end(primes))
99         return *it;
100 #else
101     for (auto prime : primes) {
102         if (prime >= n)
103             return prime;
104     }
105 #endif
106     return 67307;
107 }
108 } // namespace QtPrivate
109 
110 template <typename T, size_t Prealloc = 32>
111 class QDuplicateTracker {
112 #ifdef __cpp_lib_memory_resource
113     template <typename HT>
114     struct QHasher {
115         size_t storedSeed = QHashSeed::globalSeed();
116         size_t operator()(const HT &t) const {
117             return QHashPrivate::calculateHash(t, storedSeed);
118         }
119     };
120 
121     struct node_guesstimate_1 { void *next; size_t hash; T value; };
122     struct node_guesstimate_2 { void *next; T value; size_t hash; }; // GCC
123     static constexpr quint64 bufferSize(quint64 N) {
124         // Below 2^16, try to guarantee no allocations.
125         // Above, it's a best-effort, no guarantee.
126         const quint64 numBuckets = (N <= std::numeric_limits<quint16>::max())
127                 ? QtPrivate::nextLikelyBucketListSize(quint16(N))
128                 : N;
129         return numBuckets * sizeof(void*) // bucket list
130                 + N * qMax(sizeof(node_guesstimate_1), sizeof(node_guesstimate_2)); // nodes
131     }
132 
133     char buffer[bufferSize(Prealloc)];
134     std::pmr::monotonic_buffer_resource res{buffer, sizeof buffer};
135     std::pmr::unordered_set<T, QHasher<T>> set{Prealloc, &res};
136 #else
137     class Set : public QSet<T> {
138         qsizetype setSize = 0;
139     public:
140         explicit Set(qsizetype n) : QSet<T>{}
141         { this->reserve(n); }
142 
143         auto insert(const T &e) {
144             auto it = QSet<T>::insert(e);
145             const auto n = this->size();
146             return std::pair{it, qExchange(setSize, n) != n};
147         }
148 
149         auto insert(T &&e) {
150             auto it = QSet<T>::insert(std::move(e));
151             const auto n = this->size();
152             return std::pair{it, qExchange(setSize, n) != n};
153         }
154     };
155     Set set{Prealloc};
156 #endif
157     Q_DISABLE_COPY_MOVE(QDuplicateTracker);
158 public:
159     static constexpr inline bool uses_pmr =
160         #ifdef __cpp_lib_memory_resource
161             true
162         #else
163             false
164         #endif
165             ;
166     QDuplicateTracker() = default;
167     explicit QDuplicateTracker(qsizetype n)
168 #ifdef __cpp_lib_memory_resource
169         : set{size_t(n), &res}
170 #else
171         : set{n}
172 #endif
173     {}
174     Q_DECL_DEPRECATED_X("Pass the capacity to reserve() to the ctor instead.")
175     void reserve(qsizetype n) { set.reserve(n); }
176 
177     qsizetype size() const noexcept { return qsizetype(set.size()); }
178 
179     [[nodiscard]] bool hasSeen(const T &s)
180     {
181         return !set.insert(s).second;
182     }
183     [[nodiscard]] bool hasSeen(T &&s)
184     {
185         return !set.insert(std::move(s)).second;
186     }
187 
188     template <typename C>
189     void appendTo(C &c) const &
190     {
191         for (const auto &e : set)
192             c.push_back(e);
193     }
194 
195     template <typename C>
196     void appendTo(C &c) &&
197     {
198         if constexpr (uses_pmr) {
199             while (!set.empty())
200                 c.push_back(std::move(set.extract(set.begin()).value()));
201         } else {
202             return appendTo(c); // lvalue version
203         }
204     }
205 
206     void clear()
207     {
208         set.clear();
209     }
210 };
211 
212 QT_END_NAMESPACE
213 
214 #endif /* QDUPLICATETRACKER_P_H */
