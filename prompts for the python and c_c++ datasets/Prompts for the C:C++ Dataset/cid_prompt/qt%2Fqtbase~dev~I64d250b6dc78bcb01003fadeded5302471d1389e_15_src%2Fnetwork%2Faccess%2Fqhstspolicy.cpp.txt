Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2017 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtNetwork module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qhstspolicy.h"
41 
42 #include <QtCore/qdatetime.h>
43 #include <QtCore/qstring.h>
44 
45 /*!
46     \class QHstsPolicy
47     \brief The QHstsPolicy class specifies that a host supports HTTP Strict Transport
48            Security policy (HSTS).
49     \since 5.9
50     \ingroup network
51     \inmodule QtNetwork
52 
53     HSTS policy defines a period of time during which QNetworkAccessManager
54     should only access a host in a secure fashion. HSTS policy is defined by
55     RFC6797.
56 
57     You can set expiry, host name, include or exclude subdomains for this policy
58     either using constructor or functions setExpiry(), setHost(), setIncludesSubdomains().
59 
60     \note QHstsPolicy effects QNetworkAccessManager only if you also enable HTTP
61     Strict Transport Security via QNetworkAccessManager::enableStrictTransportSecurity().
62 
63     \sa QNetworkAccessManager
64 */
65 
66 class QHstsPolicyPrivate
67 {
68 public:
69     QUrl url;
70     QDateTime expiry;
71     bool includeSubDomains = false;
72 
73     bool operator == (const QHstsPolicyPrivate &other) const
74     {
75         return url.host() == other.url.host() && expiry == other.expiry
76                && includeSubDomains == other.includeSubDomains;
77     }
78 };
79 
80 /*!
81     Constructs an invalid (expired) policy with empty host name and subdomains
82     not included.
83 */
84 QHstsPolicy::QHstsPolicy()
85                 : d(new QHstsPolicyPrivate)
86 {
87 }
88 
89 /*!
90     Constructs QHstsPolicy with \a expiry (in UTC); \a includeSubDomains parameter
91     defines if this policy must also include subdomains, \a host data is interpreted
92     according to \a mode.
93 
94     \sa QUrl::setHost(), QUrl::ParsingMode
95 */
96 QHstsPolicy::QHstsPolicy(const QDateTime &expiry, bool includeSubDomains, const QString &host,
97                          QUrl::ParsingMode mode)
98                 : d(new QHstsPolicyPrivate)
99 {
100     d->url.setHost(host, mode);
101     d->expiry = expiry;
102     d->includeSubDomains = includeSubDomains;
103 }
104 
105 /*!
106     Creates a copy of \a other object.
107 */
108 QHstsPolicy::QHstsPolicy(const QHstsPolicy &other)
109                 : d(new QHstsPolicyPrivate(*other.d))
110 {
111 }
112 
113 /*!
114     Destructor.
115 */
116 QHstsPolicy::~QHstsPolicy()
117 {
118 }
119 
120 /*!
121     Copy-assignment operator, makes a copy of \a other.
122 */
123 QHstsPolicy &QHstsPolicy::operator=(const QHstsPolicy &other)
124 {
125     *d = *other.d;
126     return *this;
127 }
128 
129 
130 /*!
131     Move-assignment operator.
132 */
133 QHstsPolicy &QHstsPolicy::operator=(QHstsPolicy &&other) Q_DECL_NOTHROW
134 {
135     qSwap(d, other.d);
136     return *this;
137 }
138 
139 /*!
140     Sets a host, \a host data is interpreted according to \a mode parameter.
141 
142     \sa host(), QUrl::setHost(), QUrl::ParsingMode
143 */
144 void QHstsPolicy::setHost(const QString &host, QUrl::ParsingMode mode)
145 {
146     d->url.setHost(host, mode);
147 }
148 
149 /*!
150     Returns a host for a given policy, formatted according to \a options.
151 
152     \sa setHost(), QUrl::host(), QUrl::ComponentFormattingOptions
153 */
154 QString QHstsPolicy::host(QUrl::ComponentFormattingOptions options) const
155 {
156     return d->url.host(options);
157 }
158 
159 /*!
160     Sets the expiration date for the policy (in UTC).
161 
162     \sa expiry()
163 */
164 void QHstsPolicy::setExpiry(const QDateTime &expiry)
165 {
166     d->expiry = expiry;
167 }
168 
169 /*!
170     Returns the expiration date for the policy (in UTC).
171 
172     \sa setExpiry()
173 */
174 QDateTime QHstsPolicy::expiry() const
175 {
176     return d->expiry;
177 }
178 
179 /*!
180     Includes or excludes subdomains for this policy.
181 
182     \sa includeSubdomains()
183 */
184 void QHstsPolicy::setIncludesSubDomains(bool include)
185 {
186     d->includeSubDomains = include;
187 }
188 
189 /*!
190     Returns \c true if this policy also includes subdomains.
191 
192     \sa setIncludesSubDomains()
193  */
194 bool QHstsPolicy::includesSubDomains() const
195 {
196     return d->includeSubDomains;
197 }
198 
199 /*!
200     Returns \c true if both policies have the same host name, expiration date and
201     both include or exclude subdomains.
202 */
203 bool QHstsPolicy::operator==(const QHstsPolicy &other) const
204 {
205     return *d == *other.d;
206 }
207 
208 /*!
209     Return \c true if this policy has a valid expiration date and this date
210     is greated than QDateTime::currentGetTimeUtc().
211 
212     \sa setExpiry(), expiry()
213 */
214 bool QHstsPolicy::isExpired() const
215 {
216     return !d->expiry.isValid() || d->expiry <= QDateTime::currentDateTimeUtc();
217 }
218 
