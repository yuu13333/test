Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2018 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qcolorspace.h"
41 #include "qcolorspace_p.h"
42 
43 #include "qcolortransform.h"
44 #include "qcolormatrix_p.h"
45 #include "qcolortransferfunction_p.h"
46 #include "qcolortransform_p.h"
47 #include "qicc_p.h"
48 
49 #include <qmath.h>
50 #include <qtransform.h>
51 
52 #include <qdebug.h>
53 
54 QT_BEGIN_NAMESPACE
55 
56 QBasicMutex QColorSpacePrivate::s_lutWriteLock;
57 
58 QColorSpacePrimaries::QColorSpacePrimaries(QColorSpace::Primaries primaries)
59 {
60     switch (primaries) {
61     case QColorSpace::Primaries::SRgb:
62         redPoint   = QPointF(0.640, 0.330);
63         greenPoint = QPointF(0.300, 0.600);
64         bluePoint  = QPointF(0.150, 0.060);
65         whitePoint = QColorVector::D65Chromaticity();
66         break;
67     case QColorSpace::Primaries::DciP3D65:
68         redPoint   = QPointF(0.680, 0.320);
69         greenPoint = QPointF(0.265, 0.690);
70         bluePoint  = QPointF(0.150, 0.060);
71         whitePoint = QColorVector::D65Chromaticity();
72         break;
73     case QColorSpace::Primaries::AdobeRgb:
74         redPoint   = QPointF(0.640, 0.330);
75         greenPoint = QPointF(0.210, 0.710);
76         bluePoint  = QPointF(0.150, 0.060);
77         whitePoint = QColorVector::D65Chromaticity();
78         break;
79     case QColorSpace::Primaries::ProPhotoRgb:
80         redPoint   = QPointF(0.7347, 0.2653);
81         greenPoint = QPointF(0.1596, 0.8404);
82         bluePoint  = QPointF(0.0366, 0.0001);
83         whitePoint = QColorVector::D50Chromaticity();
84         break;
85     default:
86         Q_UNREACHABLE();
87     }
88 }
89 
90 bool QColorSpacePrimaries::areValid() const
91 {
92     if (!QColorVector::isValidChromaticity(redPoint))
93         return false;
94     if (!QColorVector::isValidChromaticity(greenPoint))
95         return false;
96     if (!QColorVector::isValidChromaticity(bluePoint))
97         return false;
98     if (!QColorVector::isValidChromaticity(whitePoint))
99         return false;
100     return true;
101 }
102 
103 QColorMatrix QColorSpacePrimaries::toXyzMatrix() const
104 {
105     // This converts to XYZ in some undefined scale.
106     QColorMatrix toXyz = { QColorVector(redPoint),
107                            QColorVector(greenPoint),
108                            QColorVector(bluePoint) };
109 
110     // Since the white point should be (1.0, 1.0, 1.0) in the
111     // input, we can figure out the scale by using the
112     // inverse conversion on the white point.
113     QColorVector wXyz(whitePoint);
114     QColorVector whiteScale = toXyz.inverted().map(wXyz);
115 
116     // Now we have scaled conversion to XYZ relative to the given whitepoint
117     toXyz = toXyz * QColorMatrix::fromScale(whiteScale);
118 
119     // But we want a conversion to XYZ relative to D50
120     QColorVector wXyzD50 = QColorVector::D50();
121 
122     if (wXyz != wXyzD50) {
123         // Do chromatic adaptation to map our white point to XYZ D50.
124 
125         // The Bradford method chromatic adaptation matrix:
126         QColorMatrix abrad = { {  0.8951f, -0.7502f,  0.0389f },
127                                {  0.2664f,  1.7135f, -0.0685f },
128                                { -0.1614f,  0.0367f,  1.0296f } };
129         QColorMatrix abradinv = { {  0.9869929f, 0.4323053f, -0.0085287f },
130                                   { -0.1470543f, 0.5183603f,  0.0400428f },
131                                   {  0.1599627f, 0.0492912f,  0.9684867f } };
132 
133         QColorVector srcCone = abrad.map(wXyz);
134         QColorVector dstCone = abrad.map(wXyzD50);
135 
136         QColorMatrix wToD50 = { { dstCone.x / srcCone.x, 0, 0 },
137                                 { 0, dstCone.y / srcCone.y, 0 },
138                                 { 0, 0, dstCone.z / srcCone.z } };
139 
140 
141         QColorMatrix chromaticAdaptation = abradinv * (wToD50 * abrad);
142         toXyz = chromaticAdaptation * toXyz;
143     }
144 
145     return toXyz;
146 }
147 
148 QColorSpacePrivate::QColorSpacePrivate()
149 {
150 }
151 
152 QColorSpacePrivate::QColorSpacePrivate(QColorSpace::NamedColorSpace namedColorSpace)
153         : namedColorSpace(namedColorSpace)
154 {
155     switch (namedColorSpace) {
156     case QColorSpace::SRgb:
157         primaries = QColorSpace::Primaries::SRgb;
158         transferFunction = QColorSpace::TransferFunction::SRgb;
159         description = QStringLiteral("sRGB");
160         break;
161     case QColorSpace::SRgbLinear:
162         primaries = QColorSpace::Primaries::SRgb;
163         transferFunction = QColorSpace::TransferFunction::Linear;
164         description = QStringLiteral("Linear sRGB");
165         break;
166     case QColorSpace::AdobeRgb:
167         primaries = QColorSpace::Primaries::AdobeRgb;
168         transferFunction = QColorSpace::TransferFunction::Gamma;
169         gamma = 2.19921875f; // Not quite 2.2, see https://www.adobe.com/digitalimag/pdfs/AdobeRGB1998.pdf
170         description = QStringLiteral("Adobe RGB");
171         break;
172     case QColorSpace::DisplayP3:
173         primaries = QColorSpace::Primaries::DciP3D65;
174         transferFunction = QColorSpace::TransferFunction::SRgb;
175         description = QStringLiteral("Display P3");
176         break;
177     case QColorSpace::ProPhotoRgb:
178         primaries = QColorSpace::Primaries::ProPhotoRgb;
179         transferFunction = QColorSpace::TransferFunction::ProPhotoRgb;
180         description = QStringLiteral("ProPhoto RGB");
181         break;
182     default:
183         Q_UNREACHABLE();
184     }
185     initialize();
186 }
187 
188 QColorSpacePrivate::QColorSpacePrivate(QColorSpace::Primaries primaries, QColorSpace::TransferFunction fun, float gamma)
189         : primaries(primaries)
190         , transferFunction(fun)
191         , gamma(gamma)
192 {
193     identifyColorSpace();
194     initialize();
195 }
196 
197 QColorSpacePrivate::QColorSpacePrivate(const QColorSpacePrimaries &primaries,
198                                        QColorSpace::TransferFunction fun,
199                                        float gamma)
200         : primaries(QColorSpace::Primaries::Custom)
201         , transferFunction(fun)
202         , gamma(gamma)
203 {
204     Q_ASSERT(primaries.areValid());
205     toXyz = primaries.toXyzMatrix();
206     whitePoint = QColorVector(primaries.whitePoint);
207     identifyColorSpace();
208     setTransferFunction();
209 }
210 
211 void QColorSpacePrivate::identifyColorSpace()
212 {
213     switch (primaries) {
214     case QColorSpace::Primaries::SRgb:
215         if (transferFunction == QColorSpace::TransferFunction::SRgb) {
216             namedColorSpace = QColorSpace::SRgb;
217             if (description.isEmpty())
218                 description = QStringLiteral("sRGB");
219             return;
220         }
221         if (transferFunction == QColorSpace::TransferFunction::Linear) {
222             namedColorSpace = QColorSpace::SRgbLinear;
223             if (description.isEmpty())
224                 description = QStringLiteral("Linear sRGB");
225             return;
226         }
227         break;
228     case QColorSpace::Primaries::AdobeRgb:
229         if (transferFunction == QColorSpace::TransferFunction::Gamma) {
230             if (qAbs(gamma - 2.19921875f) < (1/1024.0f)) {
231                 namedColorSpace = QColorSpace::AdobeRgb;
232                 if (description.isEmpty())
233                     description = QStringLiteral("Adobe RGB");
234                 return;
235             }
236         }
237         break;
238     case QColorSpace::Primaries::DciP3D65:
239         if (transferFunction == QColorSpace::TransferFunction::SRgb) {
240             namedColorSpace = QColorSpace::DisplayP3;
241             if (description.isEmpty())
242                 description = QStringLiteral("Display P3");
243             return;
244         }
245         break;
246     case QColorSpace::Primaries::ProPhotoRgb:
247         if (transferFunction == QColorSpace::TransferFunction::ProPhotoRgb) {
248             namedColorSpace = QColorSpace::ProPhotoRgb;
249             if (description.isEmpty())
250                 description = QStringLiteral("ProPhoto RGB");
251             return;
252         }
253         if (transferFunction == QColorSpace::TransferFunction::Gamma) {
254             // ProPhoto RGB's curve is effectively gamma 1.8 for 8bit precision.
255             if (qAbs(gamma - 1.8f) < (1/1024.0f)) {
256                 namedColorSpace = QColorSpace::ProPhotoRgb;
257                 if (description.isEmpty())
258                     description = QStringLiteral("ProPhoto RGB");
259                 return;
260             }
261         }
262         break;
263     default:
264         break;
265     }
266 
267     namedColorSpace = Unknown;
268 }
269 
270 void QColorSpacePrivate::initialize()
271 {
272     setToXyzMatrix();
273     setTransferFunction();
274 }
275 
276 void QColorSpacePrivate::setToXyzMatrix()
277 {
278     if (primaries == QColorSpace::Primaries::Custom) {
279         toXyz = QColorMatrix();
280         whitePoint = QColorVector::D50();
281         return;
282     }
283     QColorSpacePrimaries colorSpacePrimaries(primaries);
284     toXyz = colorSpacePrimaries.toXyzMatrix();
285     whitePoint = QColorVector(colorSpacePrimaries.whitePoint);
286 }
287 
288 void QColorSpacePrivate::setTransferFunction()
289 {
290     switch (transferFunction) {
291     case QColorSpace::TransferFunction::Linear:
292         trc[0].m_type = QColorTrc::Type::Function;
293         trc[0].m_fun = QColorTransferFunction();
294         if (qFuzzyIsNull(gamma))
295             gamma = 1.0f;
296         break;
297     case QColorSpace::TransferFunction::Gamma:
298         trc[0].m_type = QColorTrc::Type::Function;
299         trc[0].m_fun = QColorTransferFunction::fromGamma(gamma);
300         break;
301     case QColorSpace::TransferFunction::SRgb:
302         trc[0].m_type = QColorTrc::Type::Function;
303         trc[0].m_fun = QColorTransferFunction::fromSRgb();
304         if (qFuzzyIsNull(gamma))
305             gamma = 2.31f;
306         break;
307     case QColorSpace::TransferFunction::ProPhotoRgb:
308         trc[0].m_type = QColorTrc::Type::Function;
309         trc[0].m_fun = QColorTransferFunction::fromProPhotoRgb();
310         if (qFuzzyIsNull(gamma))
311             gamma = 1.8f;
312         break;
313     case QColorSpace::TransferFunction::Custom:
314         break;
315     default:
316         Q_UNREACHABLE();
317         break;
318     }
319     trc[1] = trc[0];
320     trc[2] = trc[0];
321 }
322 
323 QColorTransform QColorSpacePrivate::transformationToColorSpace(const QColorSpacePrivate *out) const
324 {
325     Q_ASSERT(out);
326     QColorTransform combined;
327     auto ptr = new QColorTransformPrivate;
328     combined.d = ptr;
329     ptr->colorSpaceIn = this;
330     ptr->colorSpaceOut = out;
331     ptr->colorMatrix = out->toXyz.inverted() * toXyz;
332     return combined;
333 }
334 
335 std::atomic<QColorSpacePrivate *> QColorSpacePrivate::namedColorSpacePrivates[QColorSpace::ProPhotoRgb];
336 
337 QColorSpacePrivate *QColorSpacePrivate::namedColorSpacePrivate(QColorSpace::NamedColorSpace namedColorSpace)
338 {
339     // NamedColorSpace starts from 1, so subtract it to index the array
340     const int index = static_cast<int>(namedColorSpace) - 1;
341     auto &ptr = QColorSpacePrivate::namedColorSpacePrivates[index];
342 
343     QColorSpacePrivate *csPriv = ptr.load(std::memory_order_acquire);
344 
345     if (Q_UNLIKELY(!csPriv)) {
346         QColorSpacePrivate *tmp = new QColorSpacePrivate(namedColorSpace);
347         tmp->ref.ref();
348         if (ptr.compare_exchange_strong(csPriv, tmp, std::memory_order_acq_rel))
349             csPriv = tmp;
350         else
351             delete tmp;
352     }
353 
354     return csPriv;
355 }
356 
357 void QColorSpacePrivate::clearNamedColorSpaces()
358 {
359     for (auto &ptr : namedColorSpacePrivates) {
360         QColorSpacePrivate *csPriv = ptr.exchange(nullptr, std::memory_order_acquire);
361         if (csPriv && !csPriv->ref.deref())
362             delete csPriv;
363     }
364 }
365 
366 /*!
367     \class QColorSpace
368     \brief The QColorSpace class provides a color space abstraction.
369     \since 5.14
370 
371     \ingroup painting
372     \ingroup appearance
373     \inmodule QtGui
374 
375     Color values can be interpreted in different ways, and based on the interpretation
376     can live in different spaces. We call this \e {color spaces}.
377 
378     QColorSpace provides access to creating several predefined color spaces and
379     can generate QColorTransforms for converting colors from one color space to
380     another.
381 
382     QColorSpace can also represent color spaces defined by ICC profiles or embedded
383     in images, that do not otherwise fit the predefined color spaces.
384 
385     A color space can generally speaking be conceived as a combination of set of primary
386     colors and a transfer function. The primaries defines the axes of the color space, and
387     the transfer function how values are mapped on the axes.
388     The primaries are defined by three primary colors that represent exactly how red, green,
389     and blue look in this particular color space, and a white color that represents where
390     and how bright pure white is. The range of colors expressable by the primary colors is
391     called the gamut, and a color space that can represent a wider range of colors is also
392     known as a wide-gamut color space.
393 
394     The transfer function or gamma curve determines how each component in the
395     color space is encoded. These are used because human perception does not operate
396     linearly, and the transfer functions try to ensure that colors will seem evenly
397     spaced to human eyes.
398 */
399 
400 
401 /*!
402     \enum QColorSpace::NamedColorSpace
403 
404     Predefined color spaces.
405 
406     \value SRgb The sRGB color space, which Qt operates in by default. It is a close approximation
407     of how most classic monitors operate, and a mode most software and hardware support.
408     \l{http://www.color.org/chardata/rgb/srgb.xalter}{ICC registration of sRGB}.
409     \value SRgbLinear The sRGB color space with linear gamma. Useful for gamma-corrected blending.
410     \value AdobeRgb The Adobe RGB color space is a classic wide-gamut color space, using a gamma of 2.2.
411     \l{http://www.color.org/chardata/rgb/adobergb.xalter}{ICC registration of Adobe RGB (1998)}
412     \value DisplayP3 A color-space using the primaries of DCI-P3, but with the whitepoint and transfer
413     function of sRGB. Common in modern wide-gamut screens.
414     \l{http://www.color.org/chardata/rgb/DCIP3.xalter}{ICC registration of DCI-P3}
415     \value ProPhotoRgb The Pro Photo RGB color space, also known as ROMM RGB is a very wide gamut color space.
416     \l{http://www.color.org/chardata/rgb/rommrgb.xalter}{ICC registration of ROMM RGB}
417 */
418 
419 /*!
420     \enum QColorSpace::Primaries
421 
422     Predefined sets of primary colors.
423 
424     \value Custom The primaries are undefined or does not match any predefined sets.
425     \value SRgb The sRGB primaries
426     \value AdobeRgb The Adobe RGB primaries
427     \value DciP3D65 The DCI-P3 primaries with the D65 whitepoint
428     \value ProPhotoRgb The ProPhoto RGB primaries with the D50 whitepoint
429 */
430 
431 /*!
432     \enum QColorSpace::TransferFunction
433 
434     Predefined transfer functions or gamma curves.
435 
436     \value Custom The custom or null transfer function
437     \value Linear The linear transfer functions
438     \value Gamma A transfer function that is a real gamma curve based on the value of gamma()
439     \value SRgb The sRGB transfer function, composed of linear and gamma parts
440     \value ProPhotoRgb The ProPhoto RGB transfer function, composed of linear and gamma parts
441 */
442 
443 /*!
444     Creates a new colorspace object that represents an undefined and invalid colorspace.
445  */
446 QColorSpace::QColorSpace()
447 {
448 }
449 
450 /*!
451     Creates a new colorspace object that represents a \a namedColorSpace.
452  */
453 QColorSpace::QColorSpace(NamedColorSpace namedColorSpace)
454 {
455     if (namedColorSpace < QColorSpace::SRgb || namedColorSpace > QColorSpace::ProPhotoRgb) {
456         qWarning() << "QColorSpace attempted constructed from invalid QColorSpace::NamedColorSpace: " << int(namedColorSpace);
457         return;
458     }
459 
460     d_ptr = QColorSpacePrivate::namedColorSpacePrivate(namedColorSpace);
461     d_ptr->ref.ref();
462     Q_ASSERT(isValid());
463 }
464 
465 /*!
466     Creates a custom color space with the primaries \a primaries, using the transfer function \a fun and
467     optionally \a gamma.
468  */
469 QColorSpace::QColorSpace(QColorSpace::Primaries primaries, QColorSpace::TransferFunction fun, float gamma)
470         : d_ptr(new QColorSpacePrivate(primaries, fun, gamma))
471 {
472     d_ptr->ref.ref();
473 }
474 
475 /*!
476     Creates a custom color space with the primaries \a primaries, using a gamma transfer function of
477     \a gamma.
478  */
479 QColorSpace::QColorSpace(QColorSpace::Primaries primaries, float gamma)
480         : d_ptr(new QColorSpacePrivate(primaries, TransferFunction::Gamma, gamma))
481 {
482     d_ptr->ref.ref();
483 }
484 
485 /*!
486     Creates a custom colorspace with a primaries based on the chromaticities of the primary colors \a whitePoint,
487     \a redPoint, \a greenPoint and \a bluePoint, and using the transfer function \a fun and optionally \a gamma.
488  */
489 QColorSpace::QColorSpace(const QPointF &whitePoint, const QPointF &redPoint,
490                          const QPointF &greenPoint, const QPointF &bluePoint,
491                          QColorSpace::TransferFunction fun, float gamma)
492 {
493     QColorSpacePrimaries primaries(whitePoint, redPoint, greenPoint, bluePoint);
494     if (!primaries.areValid()) {
495         qWarning() << "QColorSpace attempted constructed from invalid primaries:" << whitePoint << redPoint << greenPoint << bluePoint;
496         d_ptr = nullptr;
497         return;
498     }
499     d_ptr = new QColorSpacePrivate(primaries, fun, gamma);
500     d_ptr->ref.ref();
501 }
502 
503 QColorSpace::~QColorSpace()
504 {
505     if (d_ptr && !d_ptr->ref.deref())
506         delete d_ptr;
507 }
508 
509 QColorSpace::QColorSpace(const QColorSpace &colorSpace)
510         : d_ptr(colorSpace.d_ptr)
511 {
512     if (d_ptr)
513         d_ptr->ref.ref();
514 }
515 
516 QColorSpace &QColorSpace::operator=(const QColorSpace &colorSpace)
517 {
518     QColorSpacePrivate *oldD = d_ptr;
519     d_ptr = colorSpace.d_ptr;
520     if (d_ptr)
521         d_ptr->ref.ref();
522     if (oldD && !oldD->ref.deref())
523         delete oldD;
524     return *this;
525 }
526 
527 /*! \fn void QColorSpace::swap(QColorSpace &other)
528 
529     Swaps color space \a other with this color space. This operation is very fast and
530     never fails.
531 */
532 
533 /*!
534     Returns the predefined primaries of the color space
535     or \c primaries::Custom if it doesn't match any of them.
536 */
537 QColorSpace::Primaries QColorSpace::primaries() const noexcept
538 {
539     if (Q_UNLIKELY(!d_ptr))
540         return QColorSpace::Primaries::Custom;
541     return d_ptr->primaries;
542 }
543 
544 /*!
545     Returns the predefined transfer function of the color space
546     or \c TransferFunction::Custom if it doesn't match any of them.
547 
548     \sa gamma(), setTransferFunction(), withTransferFunction()
549 */
550 QColorSpace::TransferFunction QColorSpace::transferFunction() const noexcept
551 {
552     if (Q_UNLIKELY(!d_ptr))
553         return QColorSpace::TransferFunction::Custom;
554     return d_ptr->transferFunction;
555 }
556 
557 /*!
558     Returns the gamma value of color spaces with \c TransferFunction::Gamma,
559     an approximate gamma value for other predefined color spaces, or
560     0.0 if no approximate gamma is known.
561 
562     \sa transferFunction()
563 */
564 float QColorSpace::gamma() const noexcept
565 {
566     if (Q_UNLIKELY(!d_ptr))
567         return 0.0f;
568     return d_ptr->gamma;
569 }
570 
571 /*!
572     Sets the transfer function to \a transferFunction and \a gamma.
573 
574     \sa transferFunction(), gamma(), withTransferFunction()
575 */
576 void QColorSpace::setTransferFunction(QColorSpace::TransferFunction transferFunction, float gamma)
577 {
578     if (transferFunction == TransferFunction::Custom)
579         return;
580     if (!d_ptr) {
581         d_ptr = new QColorSpacePrivate(Primaries::Custom, transferFunction, gamma);
582         d_ptr->ref.ref();
583         return;
584     }
585     if (d_ptr->transferFunction == transferFunction && d_ptr->gamma == gamma)
586         return;
587     QColorSpacePrivate::getWritable(*this);  // detach
588     d_ptr->description.clear();
589     d_ptr->transferFunction = transferFunction;
590     d_ptr->gamma = gamma;
591     d_ptr->identifyColorSpace();
592     d_ptr->setTransferFunction();
593 }
594 
595 /*!
596     Returns a copy of this color space, except using the transfer function
597     \a transferFunction and \a gamma.
598 
599     \sa transferFunction(), gamma(), setTransferFunction()
600 */
601 QColorSpace QColorSpace::withTransferFunction(QColorSpace::TransferFunction transferFunction, float gamma) const
602 {
603     if (!isValid() || transferFunction == QColorSpace::TransferFunction::Custom)
604         return *this;
605     if (d_ptr->transferFunction == transferFunction && d_ptr->gamma == gamma)
606         return *this;
607     QColorSpace out(*this);
608     out.setTransferFunction(transferFunction, gamma);
609     return out;
610 }
611 
612 /*!
613     Sets the primaries to those of the \a primariesId set.
614 
615     \sa primaries()
616 */
617 void QColorSpace::setPrimaries(QColorSpace::Primaries primariesId)
618 {
619     if (primariesId == Primaries::Custom)
620         return;
621     if (!d_ptr) {
622         d_ptr = new QColorSpacePrivate(primariesId, TransferFunction::Custom, 0.0f);
623         d_ptr->ref.ref();
624         return;
625     }
626     if (d_ptr->primaries == primariesId)
627         return;
628     QColorSpacePrivate::getWritable(*this);  // detach
629     d_ptr->description.clear();
630     d_ptr->primaries = primariesId;
631     d_ptr->identifyColorSpace();
632     d_ptr->setToXyzMatrix();
633 }
634 
635 /*!
636     Set primaries to the chromaticities of \a whitePoint, \a redPoint, \a greenPoint
637     and \a bluePoint.
638 
639     \sa primaries()
640 */
641 void QColorSpace::setPrimaries(const QPointF &whitePoint, const QPointF &redPoint,
642                                const QPointF &greenPoint, const QPointF &bluePoint)
643 {
644     QColorSpacePrimaries primaries(whitePoint, redPoint, greenPoint, bluePoint);
645     if (!primaries.areValid())
646         return;
647     if (!d_ptr) {
648         d_ptr = new QColorSpacePrivate(primaries, TransferFunction::Custom, 0.0f);
649         d_ptr->ref.ref();
650         return;
651     }
652     QColorMatrix toXyz = primaries.toXyzMatrix();
653     if (QColorVector(primaries.whitePoint) == d_ptr->whitePoint && toXyz == d_ptr->toXyz)
654         return;
655     QColorSpacePrivate::getWritable(*this);  // detach
656     d_ptr->description.clear();
657     d_ptr->primaries = QColorSpace::Primaries::Custom;
658     d_ptr->toXyz = toXyz;
659     d_ptr->whitePoint = QColorVector(primaries.whitePoint);
660     d_ptr->identifyColorSpace();
661 }
662 
663 /*!
664     Returns an ICC profile representing the color space.
665 
666     If the color space was generated from an ICC profile, that profile
667     is returned, otherwise one is generated.
668 
669     \note Even invalid color spaces may return the ICC profile if they
670     were generated from one, to allow applications to implement wider
671     support themselves.
672 
673     \sa fromIccProfile()
674 */
675 QByteArray QColorSpace::iccProfile() const
676 {
677     if (Q_UNLIKELY(!d_ptr))
678         return QByteArray();
679     if (!d_ptr->iccProfile.isEmpty())
680         return d_ptr->iccProfile;
681     if (!isValid())
682         return QByteArray();
683     return QIcc::toIccProfile(*this);
684 }
685 
686 /*!
687     Creates a QColorSpace from ICC profile \a iccProfile.
688 
689     \note Not all ICC profiles are supported. QColorSpace only supports
690     RGB-XYZ ICC profiles that are three-component matrix-based.
691 
692     If the ICC profile is not supported an invalid QColorSpace is returned
693     where you can still read the original ICC profile using iccProfile().
694 
695     \sa iccProfile()
696 */
697 QColorSpace QColorSpace::fromIccProfile(const QByteArray &iccProfile)
698 {
699     QColorSpace colorSpace;
700     if (QIcc::fromIccProfile(iccProfile, &colorSpace))
701         return colorSpace;
702     QColorSpacePrivate *d = QColorSpacePrivate::getWritable(colorSpace);
703     d->iccProfile = iccProfile;
704     return colorSpace;
705 }
706 
707 /*!
708     Returns \c true if the color space is valid.
709 */
710 bool QColorSpace::isValid() const noexcept
711 {
712     return d_ptr
713         && d_ptr->toXyz.isValid()
714         && d_ptr->trc[0].isValid() && d_ptr->trc[1].isValid() && d_ptr->trc[2].isValid();
715 }
716 
717 /*!
718     \relates QColorSpace
719     Returns \c true if colorspace \a colorSpace1 is equal to colorspace \a colorSpace2;
720     otherwise returns \c false
721 */
722 bool operator==(const QColorSpace &colorSpace1, const QColorSpace &colorSpace2)
723 {
724     if (colorSpace1.d_ptr == colorSpace2.d_ptr)
725         return true;
726     if (!colorSpace1.d_ptr || !colorSpace2.d_ptr)
727         return false;
728 
729     if (colorSpace1.d_ptr->namedColorSpace && colorSpace2.d_ptr->namedColorSpace)
730         return colorSpace1.d_ptr->namedColorSpace == colorSpace2.d_ptr->namedColorSpace;
731 
732     const bool valid1 = colorSpace1.isValid();
733     const bool valid2 = colorSpace2.isValid();
734     if (valid1 != valid2)
735         return false;
736     if (!valid1 && !valid2) {
737         if (!colorSpace1.d_ptr->iccProfile.isEmpty() || !colorSpace2.d_ptr->iccProfile.isEmpty())
738             return colorSpace1.d_ptr->iccProfile == colorSpace2.d_ptr->iccProfile;
739     }
740 
741     // At this point one or both color spaces are unknown, and must be compared in detail instead
742 
743     if (colorSpace1.primaries() != QColorSpace::Primaries::Custom && colorSpace2.primaries() != QColorSpace::Primaries::Custom) {
744         if (colorSpace1.primaries() != colorSpace2.primaries())
745             return false;
746     } else {
747         if (colorSpace1.d_ptr->toXyz != colorSpace2.d_ptr->toXyz)
748             return false;
749     }
750 
751     if (colorSpace1.transferFunction() != QColorSpace::TransferFunction::Custom &&
752             colorSpace2.transferFunction() != QColorSpace::TransferFunction::Custom) {
753         if (colorSpace1.transferFunction() != colorSpace2.transferFunction())
754             return false;
755         if (colorSpace1.transferFunction() == QColorSpace::TransferFunction::Gamma)
756             return (qAbs(colorSpace1.gamma() - colorSpace2.gamma()) <= (1.0f / 512.0f));
757         return true;
758     }
759 
760     if (colorSpace1.d_ptr->trc[0] != colorSpace2.d_ptr->trc[0] ||
761         colorSpace1.d_ptr->trc[1] != colorSpace2.d_ptr->trc[1] ||
762         colorSpace1.d_ptr->trc[2] != colorSpace2.d_ptr->trc[2])
763         return false;
764 
765     return true;
766 }
767 
768 /*!
769     \fn bool operator!=(const QColorSpace &colorSpace1, const QColorSpace &colorSpace2)
770     \relates QColorSpace
771 
772     Returns \c true if colorspace \a colorSpace1 is not equal to colorspace \a colorSpace2;
773     otherwise returns \c false
774 */
775 
776 /*!
777     Generates and returns a color space transformation from this color space to
778     \a colorspace.
779 */
780 QColorTransform QColorSpace::transformationToColorSpace(const QColorSpace &colorspace) const
781 {
782     if (!isValid() || !colorspace.isValid())
783         return QColorTransform();
784 
785     return d_ptr->transformationToColorSpace(colorspace.d_ptr);
786 }
787 
788 /*!
789     Returns the color space as a QVariant.
790     \since 5.15
791 */
792 QColorSpace::operator QVariant() const
793 {
794     return QVariant::fromValue(*this);
795 }
796 
797 /*****************************************************************************
798   QColorSpace stream functions
799  *****************************************************************************/
800 #if !defined(QT_NO_DATASTREAM)
801 /*!
802     \fn QDataStream &operator<<(QDataStream &stream, const QColorSpace &colorSpace)
803     \relates QColorSpace
804 
805     Writes the given \a colorSpace to the given \a stream as an ICC profile.
806 
807     \sa QColorSpace::iccProfile(), {Serializing Qt Data Types}
808 */
809 
810 QDataStream &operator<<(QDataStream &s, const QColorSpace &image)
811 {
812     s << image.iccProfile();
813     return s;
814 }
815 
816 /*!
817     \fn QDataStream &operator>>(QDataStream &stream, QColorSpace &colorSpace)
818     \relates QColorSpace
819 
820     Reads a color space from the given \a stream and stores it in the given
821     \a colorSpace.
822 
823     \sa QColorSpace::fromIccProfile(), {Serializing Qt Data Types}
824 */
825 
826 QDataStream &operator>>(QDataStream &s, QColorSpace &colorSpace)
827 {
828     QByteArray iccProfile;
829     s >> iccProfile;
830     colorSpace = QColorSpace::fromIccProfile(iccProfile);
831     return s;
832 }
833 #endif // QT_NO_DATASTREAM
834 
835 #ifndef QT_NO_DEBUG_STREAM
836 QDebug operator<<(QDebug dbg, const QColorSpace &colorSpace)
837 {
838     QDebugStateSaver saver(dbg);
839     dbg.nospace();
840     dbg << "QColorSpace(";
841     if (colorSpace.d_ptr) {
842         if (colorSpace.d_ptr->namedColorSpace)
843             dbg << colorSpace.d_ptr->namedColorSpace << ", ";
844         dbg << colorSpace.primaries() << ", " << colorSpace.transferFunction();
845         dbg << ", gamma=" << colorSpace.gamma();
846     }
847     dbg << ')';
848     return dbg;
849 }
850 #endif
851 
852 QT_END_NAMESPACE
