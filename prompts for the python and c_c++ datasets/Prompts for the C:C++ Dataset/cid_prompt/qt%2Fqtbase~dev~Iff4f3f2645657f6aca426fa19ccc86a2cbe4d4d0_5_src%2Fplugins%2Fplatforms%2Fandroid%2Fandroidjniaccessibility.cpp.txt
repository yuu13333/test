Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2021 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the plugins of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "androidjniaccessibility.h"
41 #include "androidjnimain.h"
42 #include "qandroidplatformintegration.h"
43 #include "qpa/qplatformaccessibility.h"
44 #include <QtGui/private/qaccessiblebridgeutils_p.h>
45 #include "qguiapplication.h"
46 #include "qwindow.h"
47 #include "qrect.h"
48 #include "QtGui/qaccessible.h"
49 #include <QtCore/qmath.h>
50 #include <QtCore/private/qjnihelpers_p.h>
51 #include <QtCore/QJniObject>
52 #include <QtGui/private/qhighdpiscaling_p.h>
53 #include <QtCore/QObject>
54 
55 static const char m_qtTag[] = "Qt A11Y";
56 static const char m_classErrorMsg[] = "Can't find class \"%s\"";
57 
58 QT_BEGIN_NAMESPACE
59 
60 namespace QtAndroidAccessibility
61 {
62     static jmethodID m_addActionMethodID = 0;
63     static jmethodID m_setCheckableMethodID = 0;
64     static jmethodID m_setCheckedMethodID = 0;
65     static jmethodID m_setClickableMethodID = 0;
66     static jmethodID m_setContentDescriptionMethodID = 0;
67     static jmethodID m_setEditableMethodID = 0;
68     static jmethodID m_setEnabledMethodID = 0;
69     static jmethodID m_setFocusableMethodID = 0;
70     static jmethodID m_setFocusedMethodID = 0;
71     static jmethodID m_setScrollableMethodID = 0;
72     static jmethodID m_setTextSelectionMethodID = 0;
73     static jmethodID m_setVisibleToUserMethodID = 0;
74 
75     static bool m_accessibilityActivated = false;
76 
77     // This object is needed to schedule the execution of the code that
78     // deals with accessibility instances to the Qt main thread.
79     // Because of that almost every method here is split into two parts.
80     // The _helper part is executed in the context of m_accessibilityContext
81     // on the main thread. The other part is executed in Java thread.
82     static QObject *m_accessibilityContext = nullptr;
83 
84     // This method is called from the Qt main thread, and normally a
85     // QGuiApplication instance will be used as a parent.
86     void createAccessibilityContextObject(QObject *parent)
87     {
88         if (m_accessibilityContext)
89             m_accessibilityContext->deleteLater();
90         m_accessibilityContext = new QObject(parent);
91     }
92 
93     template <typename Func, typename Ret>
94     void runInObjectContext(QObject *context, Func &&func, Ret *retVal)
95     {
96         QMetaObject::invokeMethod(context, func, Qt::BlockingQueuedConnection, retVal);
97     }
98 
99     void initialize()
100     {
101         QJniObject::callStaticMethod<void>(QtAndroid::applicationClass(),
102                                            "initializeAccessibility");
103     }
104 
105     bool isActive()
106     {
107         return m_accessibilityActivated;
108     }
109 
110     static void setActive(JNIEnv */*env*/, jobject /*thiz*/, jboolean active)
111     {
112         QMutexLocker lock(QtAndroid::platformInterfaceMutex());
113         QAndroidPlatformIntegration *platformIntegration = QtAndroid::androidPlatformIntegration();
114         m_accessibilityActivated = active;
115         if (platformIntegration)
116             platformIntegration->accessibility()->setActive(active);
117         else
118             __android_log_print(ANDROID_LOG_WARN, m_qtTag, "Could not (yet) activate platform accessibility.");
119     }
120 
121     QAccessibleInterface *interfaceFromId(jint objectId)
122     {
123         QAccessibleInterface *iface = nullptr;
124         if (objectId == -1) {
125             QWindow *win = qApp->focusWindow();
126             if (win)
127                 iface = win->accessibleRoot();
128         } else {
129             iface = QAccessible::accessibleInterface(objectId);
130         }
131         return iface;
132     }
133 
134     void notifyLocationChange()
135     {
136         QtAndroid::notifyAccessibilityLocationChange();
137     }
138 
139     static int parentId_helper(int objectId); // forward declaration
140 
141     void notifyObjectHide(uint accessibilityObjectId)
142     {
143         const auto parentObjectId = parentId_helper(accessibilityObjectId);
144         QtAndroid::notifyObjectHide(accessibilityObjectId, parentObjectId);
145     }
146 
147     void notifyObjectFocus(uint accessibilityObjectId)
148     {
149         QtAndroid::notifyObjectFocus(accessibilityObjectId);
150     }
151 
152     static QVarLengthArray<int, 8> childIdListForAccessibleObject_helper(int objectId)
153     {
154         QAccessibleInterface *iface = interfaceFromId(objectId);
155         if (iface && iface->isValid()) {
156             const int childCount = iface->childCount();
157             QVarLengthArray<jint, 8> ifaceIdArray;
158             ifaceIdArray.reserve(childCount);
159             for (int i = 0; i < childCount; ++i) {
160                 QAccessibleInterface *child = iface->child(i);
161                 if (child && child->isValid())
162                     ifaceIdArray.append(QAccessible::uniqueId(child));
163             }
164             return ifaceIdArray;
165         }
166         return {};
167     }
168 
169     static jintArray childIdListForAccessibleObject(JNIEnv *env, jobject /*thiz*/, jint objectId)
170     {
171         if (m_accessibilityContext) {
172             QVarLengthArray<jint, 8> ifaceIdArray;
173             runInObjectContext(m_accessibilityContext, [objectId]() {
174                 return childIdListForAccessibleObject_helper(objectId);
175             }, &ifaceIdArray);
176             jintArray jArray = env->NewIntArray(jsize(ifaceIdArray.count()));
177             env->SetIntArrayRegion(jArray, 0, ifaceIdArray.count(), ifaceIdArray.data());
178             return jArray;
179         }
180 
181         return env->NewIntArray(jsize(0));
182     }
183 
184     static int parentId_helper(int objectId)
185     {
186         QAccessibleInterface *iface = interfaceFromId(objectId);
187         if (iface && iface->isValid()) {
188             QAccessibleInterface *parent = iface->parent();
189             if (parent && parent->isValid()) {
190                 if (parent->role() == QAccessible::Application)
191                     return -1;
192                 return QAccessible::uniqueId(parent);
193             }
194         }
195         return -1;
196     }
197 
198     static jint parentId(JNIEnv */*env*/, jobject /*thiz*/, jint objectId)
199     {
200         jint result = -1;
201         if (m_accessibilityContext) {
202             runInObjectContext(m_accessibilityContext, [objectId]() {
203                 return parentId_helper(objectId);
204             }, &result);
205         }
206         return result;
207     }
208 
209     static QRect screenRect_helper(int objectId)
210     {
211         QRect rect;
212         QAccessibleInterface *iface = interfaceFromId(objectId);
213         if (iface && iface->isValid()) {
214             rect = QHighDpi::toNativePixels(iface->rect(), iface->window());
215         }
216         // If the widget is not fully in-bound in its parent then we have to clip the rectangle to draw
217         if (iface && iface->parent() && iface->parent()->isValid()) {
218             const auto parentRect = QHighDpi::toNativePixels(iface->parent()->rect(), iface->parent()->window());
219             rect = rect.intersected(parentRect);
220         }
221         return rect;
222     }
223 
224     static jobject screenRect(JNIEnv *env, jobject /*thiz*/, jint objectId)
225     {
226         QRect rect;
227         if (m_accessibilityContext) {
228             runInObjectContext(m_accessibilityContext, [objectId]() {
229                 return screenRect_helper(objectId);
230             }, &rect);
231         }
232         jclass rectClass = env->FindClass("android/graphics/Rect");
233         jmethodID ctor = env->GetMethodID(rectClass, "<init>", "(IIII)V");
234         jobject jrect = env->NewObject(rectClass, ctor, rect.left(), rect.top(), rect.right(), rect.bottom());
235         return jrect;
236     }
237 
238     static int hitTest_helper(float x, float y)
239     {
240         QAccessibleInterface *root = interfaceFromId(-1);
241         if (root && root->isValid()) {
242             QPoint pos = QHighDpi::fromNativePixels(QPoint(int(x), int(y)), root->window());
243 
244             QAccessibleInterface *child = root->childAt(pos.x(), pos.y());
245             QAccessibleInterface *lastChild = nullptr;
246             while (child && (child != lastChild)) {
247                 lastChild = child;
248                 child = child->childAt(pos.x(), pos.y());
249             }
250             if (lastChild)
251                 return QAccessible::uniqueId(lastChild);
252         }
253         return -1;
254     }
255 
256     static jint hitTest(JNIEnv */*env*/, jobject /*thiz*/, jfloat x, jfloat y)
257     {
258         jint result = -1;
259         if (m_accessibilityContext) {
260             runInObjectContext(m_accessibilityContext, [x, y]() {
261                 return hitTest_helper(x, y);
262             }, &result);
263         }
264         return result;
265     }
266 
267     static void invokeActionOnInterfaceInMainThread(QAccessibleActionInterface* actionInterface,
268                                                     const QString& action)
269     {
270         // Queue the action and return back to Java thread, so that we do not
271         // block it for too long
272         QMetaObject::invokeMethod(qApp, [actionInterface, action]() {
273             actionInterface->doAction(action);
274         }, Qt::QueuedConnection);
275     }
276 
277     static bool clickAction_helper(int objectId)
278     {
279         QAccessibleInterface *iface = interfaceFromId(objectId);
280         if (!iface || !iface->isValid() || !iface->actionInterface())
281             return false;
282 
283         const auto& actionNames = iface->actionInterface()->actionNames();
284 
285         if (actionNames.contains(QAccessibleActionInterface::pressAction())) {
286             invokeActionOnInterfaceInMainThread(iface->actionInterface(),
287                                                 QAccessibleActionInterface::pressAction());
288         } else if (actionNames.contains(QAccessibleActionInterface::toggleAction())) {
289             invokeActionOnInterfaceInMainThread(iface->actionInterface(),
290                                                 QAccessibleActionInterface::toggleAction());
291         } else {
292             return false;
293         }
294         return true;
295     }
296 
297     static jboolean clickAction(JNIEnv */*env*/, jobject /*thiz*/, jint objectId)
298     {
299         bool result = false;
300         if (m_accessibilityContext) {
301             runInObjectContext(m_accessibilityContext, [objectId]() {
302                 return clickAction_helper(objectId);
303             }, &result);
304         }
305         return result;
306     }
307 
308     static bool scroll_helper(int objectId, const QString &actionName)
309     {
310         QAccessibleInterface *iface = interfaceFromId(objectId);
311         if (iface && iface->isValid())
312             return QAccessibleBridgeUtils::performEffectiveAction(iface, actionName);
313         return false;
314     }
315 
316     static jboolean scrollForward(JNIEnv */*env*/, jobject /*thiz*/, jint objectId)
317     {
318         bool result = false;
319         if (m_accessibilityContext) {
320             runInObjectContext(m_accessibilityContext, [objectId]() {
321                 return scroll_helper(objectId, QAccessibleActionInterface::increaseAction());
322             }, &result);
323         }
324         return result;
325     }
326 
327     static jboolean scrollBackward(JNIEnv */*env*/, jobject /*thiz*/, jint objectId)
328     {
329         bool result = false;
330         if (m_accessibilityContext) {
331             runInObjectContext(m_accessibilityContext, [objectId]() {
332                 return scroll_helper(objectId, QAccessibleActionInterface::decreaseAction());
333             }, &result);
334         }
335         return result;
336     }
337 
338 
339 #define FIND_AND_CHECK_CLASS(CLASS_NAME) \
340 clazz = env->FindClass(CLASS_NAME); \
341 if (!clazz) { \
342     __android_log_print(ANDROID_LOG_FATAL, m_qtTag, m_classErrorMsg, CLASS_NAME); \
343     return JNI_FALSE; \
344 }
345 
346         //__android_log_print(ANDROID_LOG_FATAL, m_qtTag, m_methodErrorMsg, METHOD_NAME, METHOD_SIGNATURE);
347 
348 
349     static QString descriptionForInterface(QAccessibleInterface *iface)
350     {
351         QString desc;
352         if (iface && iface->isValid()) {
353             desc = iface->text(QAccessible::Name);
354             if (desc.isEmpty())
355                 desc = iface->text(QAccessible::Description);
356             if (desc.isEmpty()) {
357                 desc = iface->text(QAccessible::Value);
358                 if (desc.isEmpty()) {
359                     if (QAccessibleValueInterface *valueIface = iface->valueInterface()) {
360                         desc= valueIface->currentValue().toString();
361                     }
362                 }
363             }
364         }
365         return desc;
366     }
367 
368     static QString descriptionForAccessibleObject_helper(int objectId)
369     {
370         QAccessibleInterface *iface = interfaceFromId(objectId);
371         return descriptionForInterface(iface);
372     }
373 
374     static jstring descriptionForAccessibleObject(JNIEnv *env, jobject /*thiz*/, jint objectId)
375     {
376         QString desc;
377         if (m_accessibilityContext) {
378             runInObjectContext(m_accessibilityContext, [objectId]() {
379                 return descriptionForAccessibleObject_helper(objectId);
380             }, &desc);
381         }
382         return env->NewString((jchar*) desc.constData(), (jsize) desc.size());
383     }
384 
385 
386     struct NodeInfo
387     {
388         bool valid = false;
389         QAccessible::State state;
390         QStringList actions;
391         QString description;
392         bool hasTextSelection = false;
393         int selectionStart = 0;
394         int selectionEnd = 0;
395     };
396 
397     static NodeInfo populateNode_helper(int objectId)
398     {
399         NodeInfo info;
400         QAccessibleInterface *iface = interfaceFromId(objectId);
401         if (iface && iface->isValid()) {
402             info.valid = true;
403             info.state = iface->state();
404             info.actions = QAccessibleBridgeUtils::effectiveActionNames(iface);
405             info.description = descriptionForInterface(iface);
406             QAccessibleTextInterface *textIface = iface->textInterface();
407             if (textIface && (textIface->selectionCount() > 0)) {
408                 info.hasTextSelection = true;
409                 textIface->selection(0, &info.selectionStart, &info.selectionEnd);
410             }
411         }
412         return info;
413     }
414 
415     static jboolean populateNode(JNIEnv *env, jobject /*thiz*/, jint objectId, jobject node)
416     {
417         NodeInfo info;
418         if (m_accessibilityContext) {
419             runInObjectContext(m_accessibilityContext, [objectId]() {
420                 return populateNode_helper(objectId);
421             }, &info);
422         }
423         if (!info.valid) {
424             __android_log_print(ANDROID_LOG_WARN, m_qtTag, "Accessibility: populateNode for Invalid ID");
425             return false;
426         }
427 
428         const bool hasClickableAction =
429                 info.actions.contains(QAccessibleActionInterface::pressAction()) ||
430                 info.actions.contains(QAccessibleActionInterface::toggleAction());
431         const bool hasIncreaseAction =
432                 info.actions.contains(QAccessibleActionInterface::increaseAction());
433         const bool hasDecreaseAction =
434                 info.actions.contains(QAccessibleActionInterface::decreaseAction());
435 
436         if (info.hasTextSelection && m_setTextSelectionMethodID) {
437             env->CallVoidMethod(node, m_setTextSelectionMethodID, info.selectionStart,
438                                 info.selectionEnd);
439         }
440 
441         env->CallVoidMethod(node, m_setCheckableMethodID, (bool)info.state.checkable);
442         env->CallVoidMethod(node, m_setCheckedMethodID, (bool)info.state.checked);
443         env->CallVoidMethod(node, m_setEditableMethodID, info.state.editable);
444         env->CallVoidMethod(node, m_setEnabledMethodID, !info.state.disabled);
445         env->CallVoidMethod(node, m_setFocusableMethodID, (bool)info.state.focusable);
446         env->CallVoidMethod(node, m_setFocusedMethodID, (bool)info.state.focused);
447         env->CallVoidMethod(node, m_setVisibleToUserMethodID, !info.state.invisible);
448         env->CallVoidMethod(node, m_setScrollableMethodID, hasIncreaseAction || hasDecreaseAction);
449         env->CallVoidMethod(node, m_setClickableMethodID, hasClickableAction);
450 
451         // Add ACTION_CLICK
452         if (hasClickableAction)
453             env->CallVoidMethod(node, m_addActionMethodID, (int)0x00000010);    // ACTION_CLICK defined in AccessibilityNodeInfo
454 
455         // Add ACTION_SCROLL_FORWARD
456         if (hasIncreaseAction)
457             env->CallVoidMethod(node, m_addActionMethodID, (int)0x00001000);    // ACTION_SCROLL_FORWARD defined in AccessibilityNodeInfo
458 
459         // Add ACTION_SCROLL_BACKWARD
460         if (hasDecreaseAction)
461             env->CallVoidMethod(node, m_addActionMethodID, (int)0x00002000);    // ACTION_SCROLL_BACKWARD defined in AccessibilityNodeInfo
462 
463         // try to fill in the text property, this is what the screen reader reads
464         jstring jdesc = env->NewString((jchar*)info.description.constData(),
465                                        (jsize)info.description.size());
466         //CALL_METHOD(node, "setText", "(Ljava/lang/CharSequence;)V", jdesc)
467         env->CallVoidMethod(node, m_setContentDescriptionMethodID, jdesc);
468 
469         return true;
470     }
471 
472     static JNINativeMethod methods[] = {
473         {"setActive","(Z)V",(void*)setActive},
474         {"childIdListForAccessibleObject", "(I)[I", (jintArray)childIdListForAccessibleObject},
475         {"parentId", "(I)I", (void*)parentId},
476         {"descriptionForAccessibleObject", "(I)Ljava/lang/String;", (jstring)descriptionForAccessibleObject},
477         {"screenRect", "(I)Landroid/graphics/Rect;", (jobject)screenRect},
478         {"hitTest", "(FF)I", (void*)hitTest},
479         {"populateNode", "(ILandroid/view/accessibility/AccessibilityNodeInfo;)Z", (void*)populateNode},
480         {"clickAction", "(I)Z", (void*)clickAction},
481         {"scrollForward", "(I)Z", (void*)scrollForward},
482         {"scrollBackward", "(I)Z", (void*)scrollBackward},
483     };
484 
485 #define GET_AND_CHECK_STATIC_METHOD(VAR, CLASS, METHOD_NAME, METHOD_SIGNATURE) \
486     VAR = env->GetMethodID(CLASS, METHOD_NAME, METHOD_SIGNATURE); \
487     if (!VAR) { \
488         __android_log_print(ANDROID_LOG_FATAL, QtAndroid::qtTagText(), QtAndroid::methodErrorMsgFmt(), METHOD_NAME, METHOD_SIGNATURE); \
489         return false; \
490     }
491 
492     bool registerNatives(JNIEnv *env)
493     {
494         jclass clazz;
495         FIND_AND_CHECK_CLASS("org/qtproject/qt/android/accessibility/QtNativeAccessibility");
496         jclass appClass = static_cast<jclass>(env->NewGlobalRef(clazz));
497 
498         if (env->RegisterNatives(appClass, methods, sizeof(methods) / sizeof(methods[0])) < 0) {
499             __android_log_print(ANDROID_LOG_FATAL,"Qt A11y", "RegisterNatives failed");
500             return false;
501         }
502 
503         jclass nodeInfoClass = env->FindClass("android/view/accessibility/AccessibilityNodeInfo");
504         GET_AND_CHECK_STATIC_METHOD(m_addActionMethodID, nodeInfoClass, "addAction", "(I)V");
505         GET_AND_CHECK_STATIC_METHOD(m_setCheckableMethodID, nodeInfoClass, "setCheckable", "(Z)V");
506         GET_AND_CHECK_STATIC_METHOD(m_setCheckedMethodID, nodeInfoClass, "setChecked", "(Z)V");
507         GET_AND_CHECK_STATIC_METHOD(m_setClickableMethodID, nodeInfoClass, "setClickable", "(Z)V");
508         GET_AND_CHECK_STATIC_METHOD(m_setContentDescriptionMethodID, nodeInfoClass, "setContentDescription", "(Ljava/lang/CharSequence;)V");
509         GET_AND_CHECK_STATIC_METHOD(m_setEditableMethodID, nodeInfoClass, "setEditable", "(Z)V");
510         GET_AND_CHECK_STATIC_METHOD(m_setEnabledMethodID, nodeInfoClass, "setEnabled", "(Z)V");
511         GET_AND_CHECK_STATIC_METHOD(m_setFocusableMethodID, nodeInfoClass, "setFocusable", "(Z)V");
512         GET_AND_CHECK_STATIC_METHOD(m_setFocusedMethodID, nodeInfoClass, "setFocused", "(Z)V");
513         GET_AND_CHECK_STATIC_METHOD(m_setScrollableMethodID, nodeInfoClass, "setScrollable", "(Z)V");
514         GET_AND_CHECK_STATIC_METHOD(m_setVisibleToUserMethodID, nodeInfoClass, "setVisibleToUser", "(Z)V");
515         GET_AND_CHECK_STATIC_METHOD(m_setTextSelectionMethodID, nodeInfoClass, "setTextSelection", "(II)V");
516 
517         return true;
518     }
519 }
520 
521 QT_END_NAMESPACE
