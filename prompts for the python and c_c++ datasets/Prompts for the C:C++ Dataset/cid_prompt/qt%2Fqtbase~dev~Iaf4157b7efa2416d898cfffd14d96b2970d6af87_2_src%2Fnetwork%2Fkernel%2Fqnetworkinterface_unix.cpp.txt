Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Copyright (C) 2016 Intel Corporation.
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the QtNetwork module of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:LGPL$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU Lesser General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU Lesser
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
22 ** packaging of this file. Please review the following information to
23 ** ensure the GNU Lesser General Public License version 3 requirements
24 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
25 **
26 ** GNU General Public License Usage
27 ** Alternatively, this file may be used under the terms of the GNU
28 ** General Public License version 2.0 or (at your option) the GNU General
29 ** Public license version 3 or any later version approved by the KDE Free
30 ** Qt Foundation. The licenses are as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
32 ** included in the packaging of this file. Please review the following
33 ** information to ensure the GNU General Public License requirements will
34 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
35 ** https://www.gnu.org/licenses/gpl-3.0.html.
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 #include "qset.h"
42 #include "qnetworkinterface.h"
43 #include "qnetworkinterface_p.h"
44 #include "qnetworkinterface_unix_p.h"
45 #include "qalgorithms.h"
46 
47 #include <private/qglobal_p.h>
48 
49 #ifndef QT_NO_NETWORKINTERFACE
50 
51 #if defined(QT_NO_CLOCK_MONOTONIC)
52 #  include "qdatetime.h"
53 #endif
54 
55 #if defined(QT_LINUXBASE)
56 #  define QT_NO_GETIFADDRS
57 #endif
58 
59 #ifdef Q_OS_HAIKU
60 # include <sys/sockio.h>
61 # define IFF_RUNNING 0x0001
62 #endif
63 
64 #ifndef QT_NO_GETIFADDRS
65 # include <ifaddrs.h>
66 #endif
67 
68 #ifdef QT_LINUXBASE
69 #  include <arpa/inet.h>
70 #  ifndef SIOCGIFBRDADDR
71 #    define SIOCGIFBRDADDR 0x8919
72 #  endif
73 #endif // QT_LINUXBASE
74 
75 #include <qplatformdefs.h>
76 
77 QT_BEGIN_NAMESPACE
78 
79 static QHostAddress addressFromSockaddr(sockaddr *sa, int ifindex = 0, const QString &ifname = QString())
80 {
81     QHostAddress address;
82     if (!sa)
83         return address;
84 
85     if (sa->sa_family == AF_INET)
86         address.setAddress(htonl(((sockaddr_in *)sa)->sin_addr.s_addr));
87     else if (sa->sa_family == AF_INET6) {
88         address.setAddress(((sockaddr_in6 *)sa)->sin6_addr.s6_addr);
89         int scope = ((sockaddr_in6 *)sa)->sin6_scope_id;
90         if (scope && scope == ifindex) {
91             // this is the most likely scenario:
92             // a scope ID in a socket is that of the interface this address came from
93             address.setScopeId(ifname);
94         } else if (scope) {
95             address.setScopeId(QNetworkInterfaceManager::interfaceNameFromIndex(scope));
96         }
97     }
98     return address;
99 
100 }
101 
102 uint QNetworkInterfaceManager::interfaceIndexFromName(const QString &name)
103 {
104 #ifndef QT_NO_IPV6IFNAME
105     return ::if_nametoindex(name.toLatin1());
106 #elif defined(SIOCGIFINDEX)
107     struct ifreq req;
108     int socket = qt_safe_socket(AF_INET, SOCK_STREAM, 0);
109     if (socket < 0)
110         return 0;
111 
112     QByteArray name8bit = name.toLatin1();
113     memset(&req, 0, sizeof(ifreq));
114     memcpy(req.ifr_name, name8bit, qMin<int>(name8bit.length() + 1, sizeof(req.ifr_name) - 1));
115 
116     uint id = 0;
117     if (qt_safe_ioctl(socket, SIOCGIFINDEX, &req) >= 0)
118         id = req.ifr_ifindex;
119     qt_safe_close(socket);
120     return id;
121 #else
122     return 0;
123 #endif
124 }
125 
126 QString QNetworkInterfaceManager::interfaceNameFromIndex(uint index)
127 {
128 #ifndef QT_NO_IPV6IFNAME
129     char buf[IF_NAMESIZE];
130     if (::if_indextoname(index, buf))
131         return QString::fromLatin1(buf);
132 #elif defined(SIOCGIFNAME)
133     struct ifreq req;
134     int socket = qt_safe_socket(AF_INET, SOCK_STREAM, 0);
135     if (socket >= 0) {
136         memset(&req, 0, sizeof(ifreq));
137         req.ifr_ifindex = index;
138 
139         if (qt_safe_ioctl(socket, SIOCGIFNAME, &req) >= 0) {
140             qt_safe_close(socket);
141             return QString::fromLatin1(req.ifr_name);
142         }
143         qt_safe_close(socket);
144     }
145 #endif
146     return QString::number(uint(index));
147 }
148 
149 static int getMtu(int socket, struct ifreq *req)
150 {
151 #ifdef SIOCGIFMTU
152     if (qt_safe_ioctl(socket, SIOCGIFMTU, req) == 0)
153         return req->ifr_mtu;
154 #endif
155     return 0;
156 }
157 
158 #ifdef QT_NO_GETIFADDRS
159 // getifaddrs not available
160 
161 static QSet<QByteArray> interfaceNames(int socket)
162 {
163     QSet<QByteArray> result;
164 #ifdef QT_NO_IPV6IFNAME
165     QByteArray storageBuffer;
166     struct ifconf interfaceList;
167     static const int STORAGEBUFFER_GROWTH = 256;
168 
169     forever {
170         // grow the storage buffer
171         storageBuffer.resize(storageBuffer.size() + STORAGEBUFFER_GROWTH);
172         interfaceList.ifc_buf = storageBuffer.data();
173         interfaceList.ifc_len = storageBuffer.size();
174 
175         // get the interface list
176         if (qt_safe_ioctl(socket, SIOCGIFCONF, &interfaceList) >= 0) {
177             if (int(interfaceList.ifc_len + sizeof(ifreq) + 64) < storageBuffer.size()) {
178                 // if the buffer was big enough, break
179                 storageBuffer.resize(interfaceList.ifc_len);
180                 break;
181             }
182         } else {
183             // internal error
184             return result;
185         }
186         if (storageBuffer.size() > 100000) {
187             // out of space
188             return result;
189         }
190     }
191 
192     int interfaceCount = interfaceList.ifc_len / sizeof(ifreq);
193     for (int i = 0; i < interfaceCount; ++i) {
194         QByteArray name = QByteArray(interfaceList.ifc_req[i].ifr_name);
195         if (!name.isEmpty())
196             result << name;
197     }
198 
199     return result;
200 #else
201     Q_UNUSED(socket);
202 
203     // use if_nameindex
204     struct if_nameindex *interfaceList = ::if_nameindex();
205     for (struct if_nameindex *ptr = interfaceList; ptr && ptr->if_name; ++ptr)
206         result << ptr->if_name;
207 
208     if_freenameindex(interfaceList);
209     return result;
210 #endif
211 }
212 
213 static QNetworkInterfacePrivate *findInterface(int socket, QList<QNetworkInterfacePrivate *> &interfaces,
214                                                struct ifreq &req)
215 {
216     QNetworkInterfacePrivate *iface = 0;
217     int ifindex = 0;
218 
219 #if !defined(QT_NO_IPV6IFNAME) || defined(SIOCGIFINDEX)
220     // Get the interface index
221 #  ifdef SIOCGIFINDEX
222     if (qt_safe_ioctl(socket, SIOCGIFINDEX, &req) >= 0)
223 #    if defined(Q_OS_HAIKU)
224         ifindex = req.ifr_index;
225 #    else
226         ifindex = req.ifr_ifindex;
227 #    endif
228 #  else
229     ifindex = if_nametoindex(req.ifr_name);
230 #  endif
231 
232     // find the interface data
233     QList<QNetworkInterfacePrivate *>::Iterator if_it = interfaces.begin();
234     for ( ; if_it != interfaces.end(); ++if_it)
235         if ((*if_it)->index == ifindex) {
236             // existing interface
237             iface = *if_it;
238             break;
239         }
240 #else
241     // Search by name
242     QList<QNetworkInterfacePrivate *>::Iterator if_it = interfaces.begin();
243     for ( ; if_it != interfaces.end(); ++if_it)
244         if ((*if_it)->name == QLatin1String(req.ifr_name)) {
245             // existing interface
246             iface = *if_it;
247             break;
248         }
249 #endif
250 
251     if (!iface) {
252         // new interface, create data:
253         iface = new QNetworkInterfacePrivate;
254         iface->index = ifindex;
255         interfaces << iface;
256     }
257 
258     return iface;
259 }
260 
261 static QList<QNetworkInterfacePrivate *> interfaceListing()
262 {
263     QList<QNetworkInterfacePrivate *> interfaces;
264 
265     int socket;
266     if ((socket = qt_safe_socket(AF_INET, SOCK_STREAM, IPPROTO_IP)) == -1)
267         return interfaces;      // error
268 
269     QSet<QByteArray> names = interfaceNames(socket);
270     QSet<QByteArray>::ConstIterator it = names.constBegin();
271     for ( ; it != names.constEnd(); ++it) {
272         ifreq req;
273         memset(&req, 0, sizeof(ifreq));
274         memcpy(req.ifr_name, *it, qMin<int>(it->length() + 1, sizeof(req.ifr_name) - 1));
275 
276         QNetworkInterfacePrivate *iface = findInterface(socket, interfaces, req);
277 
278 #ifdef SIOCGIFNAME
279         // Get the canonical name
280         QByteArray oldName = req.ifr_name;
281         if (qt_safe_ioctl(socket, SIOCGIFNAME, &req) >= 0) {
282             iface->name = QString::fromLatin1(req.ifr_name);
283 
284             // reset the name:
285             memcpy(req.ifr_name, oldName, qMin<int>(oldName.length() + 1, sizeof(req.ifr_name) - 1));
286         } else
287 #endif
288         {
289             // use this name anyways
290             iface->name = QString::fromLatin1(req.ifr_name);
291         }
292 
293         // Get interface flags
294         if (qt_safe_ioctl(socket, SIOCGIFFLAGS, &req) >= 0) {
295             iface->flags = convertFlags(req.ifr_flags);
296         }
297         iface->mtu = getMtu(socket, &req);
298 
299 #ifdef SIOCGIFHWADDR
300         // Get the HW address
301         if (qt_safe_ioctl(socket, SIOCGIFHWADDR, &req) >= 0) {
302             uchar *addr = (uchar *)req.ifr_addr.sa_data;
303             iface->hardwareAddress = iface->makeHwAddress(6, addr);
304         }
305 #endif
306 
307         // Get the address of the interface
308         QNetworkAddressEntry entry;
309         if (qt_safe_ioctl(socket, SIOCGIFADDR, &req) >= 0) {
310             sockaddr *sa = &req.ifr_addr;
311             entry.setIp(addressFromSockaddr(sa));
312 
313             // Get the interface broadcast address
314             if (iface->flags & QNetworkInterface::CanBroadcast) {
315                 if (qt_safe_ioctl(socket, SIOCGIFBRDADDR, &req) >= 0) {
316                     sockaddr *sa = &req.ifr_addr;
317                     if (sa->sa_family == AF_INET)
318                         entry.setBroadcast(addressFromSockaddr(sa));
319                 }
320             }
321 
322             // Get the interface netmask
323             if (qt_safe_ioctl(socket, SIOCGIFNETMASK, &req) >= 0) {
324                 sockaddr *sa = &req.ifr_addr;
325                 entry.setNetmask(addressFromSockaddr(sa));
326             }
327 
328             iface->addressEntries << entry;
329         }
330     }
331 
332     ::close(socket);
333     return interfaces;
334 }
335 
336 #else
337 // use getifaddrs
338 
339 // platform-specific defs:
340 # ifdef Q_OS_LINUX
341 QT_BEGIN_INCLUDE_NAMESPACE
342 #  include <features.h>
343 QT_END_INCLUDE_NAMESPACE
344 # endif
345 
346 # if defined(Q_OS_LINUX) &&  __GLIBC__ - 0 >= 2 && __GLIBC_MINOR__ - 0 >= 1 && !defined(QT_LINUXBASE)
347 #  include <netpacket/packet.h>
348 
349 static QList<QNetworkInterfacePrivate *> createInterfaces(ifaddrs *rawList)
350 {
351     QList<QNetworkInterfacePrivate *> interfaces;
352     QSet<QString> seenInterfaces;
353     QVarLengthArray<int, 16> seenIndexes;   // faster than QSet<int>
354 
355     // On Linux, glibc, uClibc and MUSL obtain the address listing via two
356     // netlink calls: first an RTM_GETLINK to obtain the interface listing,
357     // then one RTM_GETADDR to get all the addresses (uClibc implementation is
358     // copied from glibc; Bionic currently doesn't support getifaddrs). They
359     // synthesize AF_PACKET addresses from the RTM_GETLINK responses, which
360     // means by construction they currently show up first in the interface
361     // listing.
362     for (ifaddrs *ptr = rawList; ptr; ptr = ptr->ifa_next) {
363         if (ptr->ifa_addr && ptr->ifa_addr->sa_family == AF_PACKET) {
364             sockaddr_ll *sll = (sockaddr_ll *)ptr->ifa_addr;
365             QNetworkInterfacePrivate *iface = new QNetworkInterfacePrivate;
366             interfaces << iface;
367             iface->index = sll->sll_ifindex;
368             iface->name = QString::fromLatin1(ptr->ifa_name);
369             iface->flags = convertFlags(ptr->ifa_flags);
370             iface->hardwareAddress = iface->makeHwAddress(sll->sll_halen, (uchar*)sll->sll_addr);
371 
372             Q_ASSERT(!seenIndexes.contains(iface->index));
373             seenIndexes.append(iface->index);
374             seenInterfaces.insert(iface->name);
375         }
376     }
377 
378     // see if we missed anything:
379     // - virtual interfaces with no HW address have no AF_PACKET
380     // - interface labels have no AF_PACKET, but shouldn't be shown as a new interface
381     for (ifaddrs *ptr = rawList; ptr; ptr = ptr->ifa_next) {
382         if (!ptr->ifa_addr || ptr->ifa_addr->sa_family != AF_PACKET) {
383             QString name = QString::fromLatin1(ptr->ifa_name);
384             if (seenInterfaces.contains(name))
385                 continue;
386 
387             int ifindex = if_nametoindex(ptr->ifa_name);
388             if (seenIndexes.contains(ifindex))
389                 continue;
390 
391             seenInterfaces.insert(name);
392             seenIndexes.append(ifindex);
393 
394             QNetworkInterfacePrivate *iface = new QNetworkInterfacePrivate;
395             interfaces << iface;
396             iface->name = name;
397             iface->flags = convertFlags(ptr->ifa_flags);
398             iface->index = ifindex;
399         }
400     }
401 
402     return interfaces;
403 }
404 
405 static void getAddressExtraInfo(QNetworkAddressEntry *entry, struct sockaddr *sa, const char *ifname)
406 {
407     Q_UNUSED(entry);
408     Q_UNUSED(sa);
409     Q_UNUSED(ifname)
410 }
411 
412 # elif defined(Q_OS_BSD4)
413 QT_BEGIN_INCLUDE_NAMESPACE
414 #  include <net/if_dl.h>
415 #  include <net/if_types.h>
416 #  include <netinet/in_var.h>
417 QT_END_INCLUDE_NAMESPACE
418 
419 static int openSocket(int &socket)
420 {
421     if (socket == -1)
422         socket = qt_safe_socket(AF_INET, SOCK_DGRAM, 0);
423     return socket;
424 }
425 
426 static QList<QNetworkInterfacePrivate *> createInterfaces(ifaddrs *rawList)
427 {
428     QList<QNetworkInterfacePrivate *> interfaces;
429     struct ifreq req;
430     int socket = -1;
431 
432     // on NetBSD we use AF_LINK and sockaddr_dl
433     // scan the list for that family
434     for (ifaddrs *ptr = rawList; ptr; ptr = ptr->ifa_next)
435         if (ptr->ifa_addr && ptr->ifa_addr->sa_family == AF_LINK) {
436             QNetworkInterfacePrivate *iface = new QNetworkInterfacePrivate;
437             interfaces << iface;
438 
439             sockaddr_dl *sdl = (sockaddr_dl *)ptr->ifa_addr;
440             iface->index = sdl->sdl_index;
441             iface->name = QString::fromLatin1(ptr->ifa_name);
442             iface->flags = convertFlags(ptr->ifa_flags);
443             iface->hardwareAddress = iface->makeHwAddress(sdl->sdl_alen, (uchar*)LLADDR(sdl));
444 
445             strlcpy(req.ifr_name, ptr->ifa_name, sizeof(req.ifr_name));
446             iface->mtu = getMtu(openSocket(socket), &req);
447 
448             switch (sdl->sdl_type) {
449             case IFT_ETHER:
450                 iface->type = QNetworkInterface::Ethernet;
451                 break;
452 
453             case IFT_PPP:
454                 iface->type = QNetworkInterface::Ppp;
455                 break;
456 
457             case IFT_LOOP:
458                 iface->type = QNetworkInterface::Loopback;
459                 break;
460 
461             case IFT_GIF:
462             case IFT_STF:
463                 iface->type = QNetworkInterface::Virtual;
464                 break;
465 
466             case IFT_IEEE1394:
467                 iface->type = QNetworkInterface::Ieee1394;
468                 break;
469             }
470         }
471 
472     return interfaces;
473 }
474 
475 static void getAddressExtraInfo(QNetworkAddressEntry *entry, struct sockaddr *sa, const char *ifname)
476 {
477     // get IPv6 address lifetimes
478     if (sa->sa_family != AF_INET6)
479         return;
480 
481     struct in6_ifreq ifr;
482 
483     int s6 = qt_safe_socket(AF_INET6, SOCK_DGRAM, 0);
484     if (Q_UNLIKELY(s6 < 0)) {
485         qErrnoWarning("QNetworkInterface: could not create IPv6 socket");
486         return;
487     }
488 
489     strlcpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
490 
491     // get flags
492     ifr.ifr_addr = *reinterpret_cast<struct sockaddr_in6 *>(sa);
493     if (qt_safe_ioctl(s6, SIOCGIFAFLAG_IN6, &ifr) < 0) {
494         qt_safe_close(s6);
495         return;
496     }
497     int flags = ifr.ifr_ifru.ifru_flags6;
498     QNetworkInterfacePrivate::calculateDnsEligibility(entry,
499                                                       flags & IN6_IFF_TEMPORARY,
500                                                       flags & IN6_IFF_DEPRECATED);
501 
502     // get lifetimes
503     ifr.ifr_addr = *reinterpret_cast<struct sockaddr_in6 *>(sa);
504     if (qt_safe_ioctl(s6, SIOCGIFALIFETIME_IN6, &ifr) < 0) {
505         qt_safe_close(s6);
506         return;
507     }
508     qt_safe_close(s6);
509 
510     auto toDeadline = [](time_t when) {
511         QDeadlineTimer deadline = QDeadlineTimer::Forever;
512         if (when) {
513 #if defined(QT_NO_CLOCK_MONOTONIC)
514             // no monotonic clock
515             deadline.setPreciseRemainingTime(when - QDateTime::currentSecsSinceEpoch());
516 #else
517             deadline.setPreciseDeadline(when);
518 #endif
519         }
520         return deadline;
521     };
522     entry->setAddressLifetime(toDeadline(ifr.ifr_ifru.ifru_lifetime.ia6t_preferred),
523                               toDeadline(ifr.ifr_ifru.ifru_lifetime.ia6t_expire));
524 }
525 
526 # else  // Generic version
527 
528 static QList<QNetworkInterfacePrivate *> createInterfaces(ifaddrs *rawList)
529 {
530     QList<QNetworkInterfacePrivate *> interfaces;
531 
532     // make sure there's one entry for each interface
533     for (ifaddrs *ptr = rawList; ptr; ptr = ptr->ifa_next) {
534         // Get the interface index
535         int ifindex = if_nametoindex(ptr->ifa_name);
536 
537         QList<QNetworkInterfacePrivate *>::Iterator if_it = interfaces.begin();
538         for ( ; if_it != interfaces.end(); ++if_it)
539             if ((*if_it)->index == ifindex)
540                 // this one has been added already
541                 break;
542 
543         if (if_it == interfaces.end()) {
544             // none found, create
545             QNetworkInterfacePrivate *iface = new QNetworkInterfacePrivate;
546             interfaces << iface;
547 
548             iface->index = ifindex;
549             iface->name = QString::fromLatin1(ptr->ifa_name);
550             iface->flags = convertFlags(ptr->ifa_flags);
551         }
552     }
553 
554     return interfaces;
555 }
556 
557 static void getAddressExtraInfo(QNetworkAddressEntry *entry, struct sockaddr *sa, const char *ifname)
558 {
559     Q_UNUSED(entry);
560     Q_UNUSED(sa);
561     Q_UNUSED(ifname)
562 }
563 # endif
564 
565 static QList<QNetworkInterfacePrivate *> interfaceListing()
566 {
567     QList<QNetworkInterfacePrivate *> interfaces;
568 
569     ifaddrs *interfaceListing;
570     if (getifaddrs(&interfaceListing) == -1) {
571         // error
572         return interfaces;
573     }
574 
575     interfaces = createInterfaces(interfaceListing);
576     for (ifaddrs *ptr = interfaceListing; ptr; ptr = ptr->ifa_next) {
577         // Find the interface
578         QLatin1String name(ptr->ifa_name);
579         QNetworkInterfacePrivate *iface = 0;
580         QList<QNetworkInterfacePrivate *>::Iterator if_it = interfaces.begin();
581         for ( ; if_it != interfaces.end(); ++if_it)
582             if ((*if_it)->name == name) {
583                 // found this interface already
584                 iface = *if_it;
585                 break;
586             }
587 
588         if (!iface) {
589             // it may be an interface label, search by interface index
590             int ifindex = if_nametoindex(ptr->ifa_name);
591             for (if_it = interfaces.begin(); if_it != interfaces.end(); ++if_it)
592                 if ((*if_it)->index == ifindex) {
593                     // found this interface already
594                     iface = *if_it;
595                     break;
596                 }
597         }
598 
599         if (!iface) {
600             // skip all non-IP interfaces
601             continue;
602         }
603 
604         QNetworkAddressEntry entry;
605         entry.setIp(addressFromSockaddr(ptr->ifa_addr, iface->index, iface->name));
606         if (entry.ip().isNull())
607             // could not parse the address
608             continue;
609 
610         entry.setNetmask(addressFromSockaddr(ptr->ifa_netmask, iface->index, iface->name));
611         if (iface->flags & QNetworkInterface::CanBroadcast)
612             entry.setBroadcast(addressFromSockaddr(ptr->ifa_broadaddr, iface->index, iface->name));
613         getAddressExtraInfo(&entry, ptr->ifa_addr, name.latin1());
614 
615         iface->addressEntries << entry;
616     }
617 
618     freeifaddrs(interfaceListing);
619     return interfaces;
620 }
621 #endif
622 
623 QList<QNetworkInterfacePrivate *> QNetworkInterfaceManager::scan()
624 {
625     return interfaceListing();
626 }
627 
628 QT_END_NAMESPACE
629 
630 #endif // QT_NO_NETWORKINTERFACE
