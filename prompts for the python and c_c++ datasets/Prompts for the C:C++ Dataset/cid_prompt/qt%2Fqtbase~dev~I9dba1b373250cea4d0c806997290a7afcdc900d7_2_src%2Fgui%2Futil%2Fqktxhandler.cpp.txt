Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2017 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qktxhandler_p.h"
41 #include "qtexturefiledata_p.h"
42 #include <QtEndian>
43 #include <QSize>
44 #include <QtCore/qiodevice.h>
45 
46 //#define KTX_DEBUG
47 #ifdef KTX_DEBUG
48 #include <QDebug>
49 #include <QMetaEnum>
50 #include <QOpenGLTexture>
51 #endif
52 
53 QT_BEGIN_NAMESPACE
54 
55 #define KTX_IDENTIFIER_LENGTH 12
56 static const char ktxIdentifier[KTX_IDENTIFIER_LENGTH] = { '\xAB', 'K', 'T', 'X', ' ', '1', '1', '\xBB', '\r', '\n', '\x1A', '\n' };
57 static const quint32 platformEndianIdentifier = 0x04030201;
58 static const quint32 inversePlatformEndianIdentifier = 0x01020304;
59 
60 struct KTXHeader {
61     quint8 identifier[KTX_IDENTIFIER_LENGTH]; // Must match ktxIdentifier
62     quint32 endianness; // Either platformEndianIdentifier or inversePlatformEndianIdentifier, other values not allowed.
63     quint32 glType;
64     quint32 glTypeSize;
65     quint32 glFormat;
66     quint32 glInternalFormat;
67     quint32 glBaseInternalFormat;
68     quint32 pixelWidth;
69     quint32 pixelHeight;
70     quint32 pixelDepth;
71     quint32 numberOfArrayElements;
72     quint32 numberOfFaces;
73     quint32 numberOfMipmapLevels;
74     quint32 bytesOfKeyValueData;
75 };
76 
77 static const quint32 headerSize = sizeof(KTXHeader);
78 
79 // Currently unused, declared for future reference
80 struct KTXKeyValuePairItem {
81     quint32   keyAndValueByteSize;
82     /*
83     quint8 keyAndValue[keyAndValueByteSize];
84     quint8 valuePadding[3 - ((keyAndValueByteSize + 3) % 4)];
85     */
86 };
87 
88 struct KTXMipmapLevel {
89     quint32 imageSize;
90     /*
91     for each array_element in numberOfArrayElements*
92         for each face in numberOfFaces
93             for each z_slice in pixelDepth*
94                 for each row or row_of_blocks in pixelHeight*
95                     for each pixel or block_of_pixels in pixelWidth
96                         Byte data[format-specific-number-of-bytes]**
97                     end
98                 end
99             end
100             Byte cubePadding[0-3]
101         end
102     end
103     quint8 mipPadding[3 - ((imageSize + 3) % 4)]
104     */
105 };
106 
107 // Returns the nearest multiple of 'rounding' greater than or equal to 'value'
108 constexpr quint32 withPadding(quint32 value, quint32 rounding)
109 {
110     Q_ASSERT(rounding > 1);
111     return value + (rounding - 1) - ((value + (rounding - 1)) % rounding);
112 }
113 
114 bool QKtxHandler::canRead(const QByteArray &suffix, const QByteArray &block)
115 {
116     Q_UNUSED(suffix);
117 
118     return (qstrncmp(block.constData(), ktxIdentifier, KTX_IDENTIFIER_LENGTH) == 0);
119 }
120 
121 QTextureFileData QKtxHandler::read()
122 {
123     if (!device())
124         return QTextureFileData();
125 
126     QByteArray buf = device()->readAll();
127     const quint32 dataSize = quint32(buf.size());
128     if (dataSize < headerSize || !canRead(QByteArray(), buf)) {
129         qCDebug(lcQtGuiTextureIO, "Invalid KTX file %s", logName().constData());
130         return QTextureFileData();
131     }
132 
133     const KTXHeader *header = reinterpret_cast<const KTXHeader *>(buf.constData());
134     if (!checkHeader(*header)) {
135         qCDebug(lcQtGuiTextureIO, "Unsupported KTX file format in %s", logName().constData());
136         return QTextureFileData();
137     }
138 
139     QTextureFileData texData;
140     texData.setData(buf);
141 
142     texData.setSize(QSize(decode(header->pixelWidth), decode(header->pixelHeight)));
143     texData.setGLFormat(decode(header->glFormat));
144     texData.setGLInternalFormat(decode(header->glInternalFormat));
145     texData.setGLBaseInternalFormat(decode(header->glBaseInternalFormat));
146 
147     texData.setNumLevels(decode(header->numberOfMipmapLevels));
148     texData.setNumFaces(decode(header->numberOfFaces));
149 
150     const quint32 bytesOfKeyValueData = decode(header->bytesOfKeyValueData);
151     texData.setKeyValueMetadata(
152             decodeKeyValues(QByteArrayView(buf.data() + headerSize, bytesOfKeyValueData)));
153     quint32 offset = headerSize + bytesOfKeyValueData;
154 
155     constexpr int MAX_ITERATIONS = 32; // cap iterations in case of corrupt data
156 
157     for (int level = 0; level < qMin(texData.numLevels(), MAX_ITERATIONS); level++) {
158         if (offset + sizeof(quint32) > dataSize) // Corrupt file; avoid oob read
159             break;
160 
161         const quint32 imageSize = decode(qFromUnaligned<quint32>(buf.constData() + offset));
162         offset += sizeof(quint32);
163 
164         for (int face = 0; face < qMin(texData.numFaces(), MAX_ITERATIONS); face++) {
165             texData.setDataOffset(offset, level, face);
166             texData.setDataLength(imageSize, level, face);
167 
168             // Add image data and padding to offset
169             offset += withPadding(imageSize, 4);
170         }
171     }
172 
173     if (!texData.isValid()) {
174         qCDebug(lcQtGuiTextureIO, "Invalid values in header of KTX file %s", logName().constData());
175         return QTextureFileData();
176     }
177 
178     texData.setLogName(logName());
179 
180 #ifdef KTX_DEBUG
181     qDebug() << "KTX file handler read" << texData;
182 #endif
183 
184     return texData;
185 }
186 
187 bool QKtxHandler::checkHeader(const KTXHeader &header)
188 {
189     if (header.endianness != platformEndianIdentifier && header.endianness != inversePlatformEndianIdentifier)
190         return false;
191     inverseEndian = (header.endianness == inversePlatformEndianIdentifier);
192 #ifdef KTX_DEBUG
193     QMetaEnum tfme = QMetaEnum::fromType<QOpenGLTexture::TextureFormat>();
194     QMetaEnum ptme = QMetaEnum::fromType<QOpenGLTexture::PixelType>();
195     qDebug("Header of %s:", logName().constData());
196     qDebug("  glType: 0x%x (%s)", decode(header.glType), ptme.valueToKey(decode(header.glType)));
197     qDebug("  glTypeSize: %u", decode(header.glTypeSize));
198     qDebug("  glFormat: 0x%x (%s)", decode(header.glFormat),
199            tfme.valueToKey(decode(header.glFormat)));
200     qDebug("  glInternalFormat: 0x%x (%s)", decode(header.glInternalFormat),
201            tfme.valueToKey(decode(header.glInternalFormat)));
202     qDebug("  glBaseInternalFormat: 0x%x (%s)", decode(header.glBaseInternalFormat),
203            tfme.valueToKey(decode(header.glBaseInternalFormat)));
204     qDebug("  pixelWidth: %u", decode(header.pixelWidth));
205     qDebug("  pixelHeight: %u", decode(header.pixelHeight));
206     qDebug("  pixelDepth: %u", decode(header.pixelDepth));
207     qDebug("  numberOfArrayElements: %u", decode(header.numberOfArrayElements));
208     qDebug("  numberOfFaces: %u", decode(header.numberOfFaces));
209     qDebug("  numberOfMipmapLevels: %u", decode(header.numberOfMipmapLevels));
210     qDebug("  bytesOfKeyValueData: %u", decode(header.bytesOfKeyValueData));
211 #endif
212     const bool isCompressedImage = decode(header.glType) == 0 && decode(header.glFormat) == 0
213             && decode(header.pixelDepth) == 0;
214     const bool isCubeMap = decode(header.numberOfFaces) == 6;
215     const bool is2D = decode(header.pixelDepth) == 0 && decode(header.numberOfArrayElements) == 0;
216 
217     return is2D && (isCubeMap || isCompressedImage);
218 }
219 
220 QMap<QString, QString> QKtxHandler::decodeKeyValues(QByteArrayView view) const
221 {
222     QMap<QString, QString> output;
223     quint32 offset = 0;
224     while (offset < view.size() + sizeof(quint32)) {
225         const quint32 keyAndValueByteSize =
226                 decode(qFromUnaligned<quint32>(view.constData() + offset));
227         offset += sizeof(quint32);
228 
229         if (offset + keyAndValueByteSize > view.size())
230             break; // oob read
231 
232         QByteArray key;
233         QByteArray value;
234         bool isReadingKey = true;
235         for (size_t i = 0; i < keyAndValueByteSize; i++) {
236             const char letter = decode(view.at(offset + i));
237 
238             if (letter == '\0') {
239                 isReadingKey = false;
240                 continue;
241             }
242 
243             if (isReadingKey)
244                 key.push_back(letter);
245             else
246                 value.push_back(letter);
247         }
248 
249         offset = withPadding(offset + keyAndValueByteSize, 4);
250         output.insert(QString::fromUtf8(key), QString::fromUtf8(value));
251     }
252 
253     return output;
254 }
255 
256 quint32 QKtxHandler::decode(quint32 val) const
257 {
258     return inverseEndian ? qbswap<quint32>(val) : val;
259 }
260 
261 char QKtxHandler::decode(char val) const
262 {
263     return inverseEndian ? qbswap<char>(val) : val;
264 }
265 
266 QT_END_NAMESPACE
