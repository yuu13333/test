Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "exampleslistmodel.h"
27 
28 #include "android/androidconstants.h"
29 #include "screenshotcropper.h"
30 
31 #include <QBuffer>
32 #include <QDir>
33 #include <QFile>
34 #include <QImageReader>
35 #include <QPixmapCache>
36 #include <QUrl>
37 
38 #include <coreplugin/helpmanager.h>
39 #include <coreplugin/icore.h>
40 
41 #include <qtsupport/qtkitinformation.h>
42 #include <qtsupport/qtversionmanager.h>
43 
44 #include <utils/algorithm.h>
45 #include <utils/fileutils.h>
46 #include <utils/qtcassert.h>
47 #include <utils/stylehelper.h>
48 
49 #include <algorithm>
50 
51 namespace QtSupport {
52 namespace Internal {
53 
54 static bool debugExamples()
55 {
56     static bool isDebugging = qEnvironmentVariableIsSet("QTC_DEBUG_EXAMPLESMODEL");
57     return isDebugging;
58 }
59 
60 static const char kSelectedExampleSetKey[] = "WelcomePage/SelectedExampleSet";
61 
62 void ExampleSetModel::writeCurrentIdToSettings(int currentIndex) const
63 {
64     QSettings *settings = Core::ICore::settings();
65     settings->setValue(QLatin1String(kSelectedExampleSetKey), getId(currentIndex));
66 }
67 
68 int ExampleSetModel::readCurrentIndexFromSettings() const
69 {
70     QVariant id = Core::ICore::settings()->value(QLatin1String(kSelectedExampleSetKey));
71     for (int i=0; i < rowCount(); i++) {
72         if (id == getId(i))
73             return i;
74     }
75     return -1;
76 }
77 
78 ExampleSetModel::ExampleSetModel()
79 {
80     // read extra example sets settings
81     QSettings *settings = Core::ICore::settings();
82     const QStringList list = settings->value("Help/InstalledExamples", QStringList()).toStringList();
83     if (debugExamples())
84         qWarning() << "Reading Help/InstalledExamples from settings:" << list;
85     for (const QString &item : list) {
86         const QStringList &parts = item.split(QLatin1Char('|'));
87         if (parts.size() < 3) {
88             if (debugExamples())
89                 qWarning() << "Item" << item << "has less than 3 parts (separated by '|'):" << parts;
90             continue;
91         }
92         ExtraExampleSet set;
93         set.displayName = parts.at(0);
94         set.manifestPath = parts.at(1);
95         set.examplesPath = parts.at(2);
96         QFileInfo fi(set.manifestPath);
97         if (!fi.isDir() || !fi.isReadable()) {
98             if (debugExamples())
99                 qWarning() << "Manifest path " << set.manifestPath << "is not a readable directory, ignoring";
100             continue;
101         }
102         m_extraExampleSets.append(set);
103         if (debugExamples()) {
104             qWarning() << "Adding examples set displayName=" << set.displayName
105                        << ", manifestPath=" << set.manifestPath
106                        << ", examplesPath=" << set.examplesPath;
107         }
108     }
109 
110     connect(QtVersionManager::instance(), &QtVersionManager::qtVersionsLoaded,
111             this, &ExampleSetModel::qtVersionManagerLoaded);
112 
113     connect(Core::HelpManager::Signals::instance(),
114             &Core::HelpManager::Signals::setupFinished,
115             this,
116             &ExampleSetModel::helpManagerInitialized);
117 }
118 
119 void ExampleSetModel::recreateModel(const QList<BaseQtVersion *> &qtVersions)
120 {
121     beginResetModel();
122     clear();
123 
124     QSet<QString> extraManifestDirs;
125     for (int i = 0; i < m_extraExampleSets.size(); ++i)  {
126         const ExtraExampleSet &set = m_extraExampleSets.at(i);
127         auto newItem = new QStandardItem();
128         newItem->setData(set.displayName, Qt::DisplayRole);
129         newItem->setData(set.displayName, Qt::UserRole + 1);
130         newItem->setData(QVariant(), Qt::UserRole + 2);
131         newItem->setData(i, Qt::UserRole + 3);
132         appendRow(newItem);
133 
134         extraManifestDirs.insert(set.manifestPath);
135     }
136 
137     foreach (BaseQtVersion *version, qtVersions) {
138         // sanitize away qt versions that have already been added through extra sets
139         if (extraManifestDirs.contains(version->docsPath().toString())) {
140             if (debugExamples()) {
141                 qWarning() << "Not showing Qt version because manifest path is already added through InstalledExamples settings:"
142                            << version->displayName();
143             }
144             continue;
145         }
146         auto newItem = new QStandardItem();
147         newItem->setData(version->displayName(), Qt::DisplayRole);
148         newItem->setData(version->displayName(), Qt::UserRole + 1);
149         newItem->setData(version->uniqueId(), Qt::UserRole + 2);
150         newItem->setData(QVariant(), Qt::UserRole + 3);
151         appendRow(newItem);
152     }
153     endResetModel();
154 }
155 
156 int ExampleSetModel::indexForQtVersion(BaseQtVersion *qtVersion) const
157 {
158     // return either the entry with the same QtId, or an extra example set with same path
159 
160     if (!qtVersion)
161         return -1;
162 
163     // check for Qt version
164     for (int i = 0; i < rowCount(); ++i) {
165         if (getType(i) == QtExampleSet && getQtId(i) == qtVersion->uniqueId())
166             return i;
167     }
168 
169     // check for extra set
170     const QString &documentationPath = qtVersion->docsPath().toString();
171     for (int i = 0; i < rowCount(); ++i) {
172         if (getType(i) == ExtraExampleSetType
173                 && m_extraExampleSets.at(getExtraExampleSetIndex(i)).manifestPath == documentationPath)
174             return i;
175     }
176     return -1;
177 }
178 
179 QVariant ExampleSetModel::getDisplayName(int i) const
180 {
181     if (i < 0 || i >= rowCount())
182         return QVariant();
183     return data(index(i, 0), Qt::UserRole + 1);
184 }
185 
186 // id is either the Qt version uniqueId, or the display name of the extra example set
187 QVariant ExampleSetModel::getId(int i) const
188 {
189     if (i < 0 || i >= rowCount())
190         return QVariant();
191     QModelIndex modelIndex = index(i, 0);
192     QVariant variant = data(modelIndex, Qt::UserRole + 2);
193     if (variant.isValid()) // set from qt version
194         return variant;
195     return getDisplayName(i);
196 }
197 
198 ExampleSetModel::ExampleSetType ExampleSetModel::getType(int i) const
199 {
200     if (i < 0 || i >= rowCount())
201         return InvalidExampleSet;
202     QModelIndex modelIndex = index(i, 0);
203     QVariant variant = data(modelIndex, Qt::UserRole + 2); /*Qt version uniqueId*/
204     if (variant.isValid())
205         return QtExampleSet;
206     return ExtraExampleSetType;
207 }
208 
209 int ExampleSetModel::getQtId(int i) const
210 {
211     QTC_ASSERT(i >= 0, return -1);
212     QModelIndex modelIndex = index(i, 0);
213     QVariant variant = data(modelIndex, Qt::UserRole + 2);
214     QTC_ASSERT(variant.isValid(), return -1);
215     QTC_ASSERT(variant.canConvert<int>(), return -1);
216     return variant.toInt();
217 }
218 
219 bool ExampleSetModel::selectedQtSupports(const Core::Id &target) const
220 {
221     if (!m_selectedQtVersion)
222         return false;
223 
224     return m_selectedQtVersion->targetDeviceTypes().contains(target);
225 }
226 
227 int ExampleSetModel::getExtraExampleSetIndex(int i) const
228 {
229     QTC_ASSERT(i >= 0, return -1);
230     QModelIndex modelIndex = index(i, 0);
231     QVariant variant = data(modelIndex, Qt::UserRole + 3);
232     QTC_ASSERT(variant.isValid(), return -1);
233     QTC_ASSERT(variant.canConvert<int>(), return -1);
234     return variant.toInt();
235 }
236 
237 ExamplesListModel::ExamplesListModel(QObject *parent)
238     : Core::ListModel(parent)
239 {
240     connect(&m_exampleSetModel, &ExampleSetModel::selectedExampleSetChanged,
241             this, &ExamplesListModel::updateExamples);
242     connect(Core::HelpManager::Signals::instance(),
243             &Core::HelpManager::Signals::documentationChanged,
244             this,
245             &ExamplesListModel::updateExamples);
246 }
247 
248 static QString fixStringForTags(const QString &string)
249 {
250     QString returnString = string;
251     returnString.remove(QLatin1String("<i>"));
252     returnString.remove(QLatin1String("</i>"));
253     returnString.remove(QLatin1String("<tt>"));
254     returnString.remove(QLatin1String("</tt>"));
255     return returnString;
256 }
257 
258 static QStringList trimStringList(const QStringList &stringlist)
259 {
260     return Utils::transform(stringlist, [](const QString &str) { return str.trimmed(); });
261 }
262 
263 static QString relativeOrInstallPath(const QString &path, const QString &manifestPath,
264                                      const QString &installPath)
265 {
266     const QChar slash = QLatin1Char('/');
267     const QString relativeResolvedPath = manifestPath + slash + path;
268     const QString installResolvedPath = installPath + slash + path;
269     if (QFile::exists(relativeResolvedPath))
270         return relativeResolvedPath;
271     if (QFile::exists(installResolvedPath))
272         return installResolvedPath;
273     // doesn't exist, just return relative
274     return relativeResolvedPath;
275 }
276 
277 static bool isValidExampleOrDemo(ExampleItem *item)
278 {
279     QTC_ASSERT(item, return false);
280     static QString invalidPrefix = QLatin1String("qthelp:////"); /* means that the qthelp url
281                                                                     doesn't have any namespace */
282     QString reason;
283     bool ok = true;
284     if (!item->hasSourceCode || !QFileInfo::exists(item->projectPath)) {
285         ok = false;
286         reason = QString::fromLatin1("projectPath \"%1\" empty or does not exist").arg(item->projectPath);
287     } else if (item->imageUrl.startsWith(invalidPrefix) || !QUrl(item->imageUrl).isValid()) {
288         ok = false;
289         reason = QString::fromLatin1("imageUrl \"%1\" not valid").arg(item->imageUrl);
290     } else if (!item->docUrl.isEmpty()
291              && (item->docUrl.startsWith(invalidPrefix) || !QUrl(item->docUrl).isValid())) {
292         ok = false;
293         reason = QString::fromLatin1("docUrl \"%1\" non-empty but not valid").arg(item->docUrl);
294     }
295     if (!ok) {
296         item->tags.append(QLatin1String("broken"));
297         if (debugExamples())
298             qWarning() << QString::fromLatin1("ERROR: Item \"%1\" broken: %2").arg(item->name, reason);
299     }
300     if (debugExamples() && item->description.isEmpty())
301         qWarning() << QString::fromLatin1("WARNING: Item \"%1\" has no description").arg(item->name);
302     return ok || debugExamples();
303 }
304 
305 void ExamplesListModel::parseExamples(QXmlStreamReader *reader,
306     const QString &projectsOffset, const QString &examplesInstallPath)
307 {
308     ExampleItem *item = nullptr;
309     const QChar slash = QLatin1Char('/');
310     while (!reader->atEnd()) {
311         switch (reader->readNext()) {
312         case QXmlStreamReader::StartElement:
313             if (reader->name() == QLatin1String("example")) {
314                 item = new ExampleItem;
315                 item->type = Example;
316                 QXmlStreamAttributes attributes = reader->attributes();
317                 item->name = attributes.value(QLatin1String("name")).toString();
318                 item->projectPath = attributes.value(QLatin1String("projectPath")).toString();
319                 item->hasSourceCode = !item->projectPath.isEmpty();
320                 item->projectPath = relativeOrInstallPath(item->projectPath, projectsOffset, examplesInstallPath);
321                 item->imageUrl = attributes.value(QLatin1String("imageUrl")).toString();
322                 QPixmapCache::remove(item->imageUrl);
323                 item->docUrl = attributes.value(QLatin1String("docUrl")).toString();
324                 item->isHighlighted = attributes.value(QLatin1String("isHighlighted")).toString() == QLatin1String("true");
325 
326             } else if (reader->name() == QLatin1String("fileToOpen")) {
327                 const QString mainFileAttribute = reader->attributes().value(
328                             QLatin1String("mainFile")).toString();
329                 const QString filePath = relativeOrInstallPath(
330                             reader->readElementText(QXmlStreamReader::ErrorOnUnexpectedElement),
331                             projectsOffset, examplesInstallPath);
332                 item->filesToOpen.append(filePath);
333                 if (mainFileAttribute.compare(QLatin1String("true"), Qt::CaseInsensitive) == 0)
334                     item->mainFile = filePath;
335             } else if (reader->name() == QLatin1String("description")) {
336                 item->description = fixStringForTags(reader->readElementText(QXmlStreamReader::ErrorOnUnexpectedElement));
337             } else if (reader->name() == QLatin1String("dependency")) {
338                 item->dependencies.append(projectsOffset + slash + reader->readElementText(QXmlStreamReader::ErrorOnUnexpectedElement));
339             } else if (reader->name() == QLatin1String("tags")) {
340                 item->tags = trimStringList(reader->readElementText(QXmlStreamReader::ErrorOnUnexpectedElement).split(QLatin1Char(','), QString::SkipEmptyParts));
341             } else if (reader->name() == QLatin1String("platforms")) {
342                 item->platforms = trimStringList(reader->readElementText(QXmlStreamReader::ErrorOnUnexpectedElement).split(QLatin1Char(','), QString::SkipEmptyParts));
343         }
344             break;
345         case QXmlStreamReader::EndElement:
346             if (reader->name() == QLatin1String("example")) {
347                 if (isValidExampleOrDemo(item))
348                     m_items.append(item);
349             } else if (reader->name() == QLatin1String("examples")) {
350                 return;
351             }
352             break;
353         default: // nothing
354             break;
355         }
356     }
357 }
358 
359 void ExamplesListModel::parseDemos(QXmlStreamReader *reader,
360     const QString &projectsOffset, const QString &demosInstallPath)
361 {
362     ExampleItem *item = nullptr;
363     const QChar slash = QLatin1Char('/');
364     while (!reader->atEnd()) {
365         switch (reader->readNext()) {
366         case QXmlStreamReader::StartElement:
367             if (reader->name() == QLatin1String("demo")) {
368                 item = new ExampleItem;
369                 item->type = Demo;
370                 QXmlStreamAttributes attributes = reader->attributes();
371                 item->name = attributes.value(QLatin1String("name")).toString();
372                 item->projectPath = attributes.value(QLatin1String("projectPath")).toString();
373                 item->hasSourceCode = !item->projectPath.isEmpty();
374                 item->projectPath = relativeOrInstallPath(item->projectPath, projectsOffset, demosInstallPath);
375                 item->imageUrl = attributes.value(QLatin1String("imageUrl")).toString();
376                 QPixmapCache::remove(item->imageUrl);
377                 item->docUrl = attributes.value(QLatin1String("docUrl")).toString();
378                 item->isHighlighted = attributes.value(QLatin1String("isHighlighted")).toString() == QLatin1String("true");
379             } else if (reader->name() == QLatin1String("fileToOpen")) {
380                 item->filesToOpen.append(relativeOrInstallPath(reader->readElementText(QXmlStreamReader::ErrorOnUnexpectedElement),
381                                                               projectsOffset, demosInstallPath));
382             } else if (reader->name() == QLatin1String("description")) {
383                 item->description =  fixStringForTags(reader->readElementText(QXmlStreamReader::ErrorOnUnexpectedElement));
384             } else if (reader->name() == QLatin1String("dependency")) {
385                 item->dependencies.append(projectsOffset + slash + reader->readElementText(QXmlStreamReader::ErrorOnUnexpectedElement));
386             } else if (reader->name() == QLatin1String("tags")) {
387                 item->tags = reader->readElementText(QXmlStreamReader::ErrorOnUnexpectedElement).split(QLatin1Char(','));
388             }
389             break;
390         case QXmlStreamReader::EndElement:
391             if (reader->name() == QLatin1String("demo")) {
392                 if (isValidExampleOrDemo(item))
393                     m_items.append(item);
394             } else if (reader->name() == QLatin1String("demos")) {
395                 return;
396             }
397             break;
398         default: // nothing
399             break;
400         }
401     }
402 }
403 
404 void ExamplesListModel::parseTutorials(QXmlStreamReader *reader, const QString &projectsOffset)
405 {
406     ExampleItem *item = nullptr;
407     const QChar slash = QLatin1Char('/');
408     while (!reader->atEnd()) {
409         switch (reader->readNext()) {
410         case QXmlStreamReader::StartElement:
411             if (reader->name() == QLatin1String("tutorial")) {
412                 item = new ExampleItem;
413                 item->type = Tutorial;
414                 QXmlStreamAttributes attributes = reader->attributes();
415                 item->name = attributes.value(QLatin1String("name")).toString();
416                 item->projectPath = attributes.value(QLatin1String("projectPath")).toString();
417                 item->hasSourceCode = !item->projectPath.isEmpty();
418                 item->projectPath.prepend(slash);
419                 item->projectPath.prepend(projectsOffset);
420                 item->imageUrl = Utils::StyleHelper::dpiSpecificImageFile(
421                             attributes.value(QLatin1String("imageUrl")).toString());
422                 QPixmapCache::remove(item->imageUrl);
423                 item->docUrl = attributes.value(QLatin1String("docUrl")).toString();
424                 item->isVideo = attributes.value(QLatin1String("isVideo")).toString() == QLatin1String("true");
425                 item->videoUrl = attributes.value(QLatin1String("videoUrl")).toString();
426                 item->videoLength = attributes.value(QLatin1String("videoLength")).toString();
427             } else if (reader->name() == QLatin1String("fileToOpen")) {
428                 item->filesToOpen.append(projectsOffset + slash + reader->readElementText(QXmlStreamReader::ErrorOnUnexpectedElement));
429             } else if (reader->name() == QLatin1String("description")) {
430                 item->description =  fixStringForTags(reader->readElementText(QXmlStreamReader::ErrorOnUnexpectedElement));
431             } else if (reader->name() == QLatin1String("dependency")) {
432                 item->dependencies.append(projectsOffset + slash + reader->readElementText(QXmlStreamReader::ErrorOnUnexpectedElement));
433             } else if (reader->name() == QLatin1String("tags")) {
434                 item->tags = reader->readElementText(QXmlStreamReader::ErrorOnUnexpectedElement).split(QLatin1Char(','));
435             }
436             break;
437         case QXmlStreamReader::EndElement:
438             if (reader->name() == QLatin1String("tutorial"))
439                 m_items.append(item);
440             else if (reader->name() == QLatin1String("tutorials"))
441                 return;
442             break;
443         default: // nothing
444             break;
445         }
446     }
447 }
448 
449 static QString resourcePath()
450 {
451     // normalize paths so QML doesn't freak out if it's wrongly capitalized on Windows
452     return Utils::FileUtils::normalizePathName(Core::ICore::resourcePath());
453 }
454 
455 void ExamplesListModel::updateExamples()
456 {
457     QString examplesInstallPath;
458     QString demosInstallPath;
459 
460     QStringList sources = m_exampleSetModel.exampleSources(&examplesInstallPath, &demosInstallPath);
461 
462     beginResetModel();
463     qDeleteAll(m_items);
464     m_items.clear();
465 
466     foreach (const QString &exampleSource, sources) {
467         QFile exampleFile(exampleSource);
468         if (!exampleFile.open(QIODevice::ReadOnly)) {
469             if (debugExamples())
470                 qWarning() << "ERROR: Could not open file" << exampleSource;
471             continue;
472         }
473 
474         QFileInfo fi(exampleSource);
475         QString offsetPath = fi.path();
476         QDir examplesDir(offsetPath);
477         QDir demosDir(offsetPath);
478 
479         if (debugExamples())
480             qWarning() << QString::fromLatin1("Reading file \"%1\"...").arg(fi.absoluteFilePath());
481         QXmlStreamReader reader(&exampleFile);
482         while (!reader.atEnd())
483             switch (reader.readNext()) {
484             case QXmlStreamReader::StartElement:
485                 if (reader.name() == QLatin1String("examples"))
486                     parseExamples(&reader, examplesDir.path(), examplesInstallPath);
487                 else if (reader.name() == QLatin1String("demos"))
488                     parseDemos(&reader, demosDir.path(), demosInstallPath);
489                 else if (reader.name() == QLatin1String("tutorials"))
490                     parseTutorials(&reader, examplesDir.path());
491                 break;
492             default: // nothing
493                 break;
494             }
495 
496         if (reader.hasError() && debugExamples()) {
497             qWarning().noquote().nospace() << "ERROR: Could not parse file as XML document ("
498                 << exampleSource << "):" << reader.lineNumber() << ':' << reader.columnNumber()
499                 << ": " << reader.errorString();
500         }
501     }
502     endResetModel();
503 }
504 
505 QPixmap ExamplesListModel::fetchPixmapAndUpdatePixmapCache(const QString &url) const
506 {
507     QPixmap pixmap;
508     pixmap.load(url);
509     if (pixmap.isNull())
510         pixmap.load(resourcePath() + "/welcomescreen/widgets/" + url);
511     if (pixmap.isNull()) {
512         QByteArray fetchedData = Core::HelpManager::fileData(url);
513         if (!fetchedData.isEmpty()) {
514             QBuffer imgBuffer(&fetchedData);
515             imgBuffer.open(QIODevice::ReadOnly);
516             QImageReader reader(&imgBuffer);
517             QImage img = reader.read();
518             img = ScreenshotCropper::croppedImage(img, url, ListModel::defaultImageSize);
519             pixmap = QPixmap::fromImage(img);
520         }
521     }
522     QPixmapCache::insert(url, pixmap);
523     return pixmap;
524 }
525 
526 void ExampleSetModel::updateQtVersionList()
527 {
528     QList<BaseQtVersion *> versions = QtVersionManager::sortVersions(QtVersionManager::versions(
529         [](const BaseQtVersion *v) { return v->hasExamples() || v->hasDemos(); }));
530 
531     // prioritize default qt version
532     ProjectExplorer::Kit *defaultKit = ProjectExplorer::KitManager::defaultKit();
533     BaseQtVersion *defaultVersion = QtKitAspect::qtVersion(defaultKit);
534     if (defaultVersion && versions.contains(defaultVersion))
535         versions.move(versions.indexOf(defaultVersion), 0);
536 
537     recreateModel(versions);
538 
539     int currentIndex = m_selectedExampleSetIndex;
540     if (currentIndex < 0) // reset from settings
541         currentIndex = readCurrentIndexFromSettings();
542 
543     ExampleSetModel::ExampleSetType currentType = getType(currentIndex);
544 
545     if (currentType == ExampleSetModel::InvalidExampleSet) {
546         // select examples corresponding to 'highest' Qt version
547         BaseQtVersion *highestQt = findHighestQtVersion(versions);
548         currentIndex = indexForQtVersion(highestQt);
549     } else if (currentType == ExampleSetModel::QtExampleSet) {
550         // try to select the previously selected Qt version, or
551         // select examples corresponding to 'highest' Qt version
552         int currentQtId = getQtId(currentIndex);
553         BaseQtVersion *newQtVersion = QtVersionManager::version(currentQtId);
554         if (!newQtVersion)
555             newQtVersion = findHighestQtVersion(versions);
556         currentIndex = indexForQtVersion(newQtVersion);
557     } // nothing to do for extra example sets
558     selectExampleSet(currentIndex);
559     emit selectedExampleSetChanged(currentIndex);
560 }
561 
562 BaseQtVersion *ExampleSetModel::findHighestQtVersion(const QList<BaseQtVersion *> &versions) const
563 {
564     BaseQtVersion *newVersion = nullptr;
565     for (BaseQtVersion *version : versions) {
566         if (!newVersion) {
567             newVersion = version;
568         } else {
569             if (version->qtVersion() > newVersion->qtVersion()) {
570                 newVersion = version;
571             } else if (version->qtVersion() == newVersion->qtVersion()
572                        && version->uniqueId() < newVersion->uniqueId()) {
573                 newVersion = version;
574             }
575         }
576     }
577 
578     if (!newVersion && !versions.isEmpty())
579         newVersion = versions.first();
580 
581     return newVersion;
582 }
583 
584 QStringList ExampleSetModel::exampleSources(QString *examplesInstallPath, QString *demosInstallPath)
585 {
586     QStringList sources;
587 
588     // Qt Creator shipped tutorials
589     sources << ":/qtsupport/qtcreator_tutorials.xml";
590 
591     QString examplesPath;
592     QString demosPath;
593     QString manifestScanPath;
594 
595     ExampleSetModel::ExampleSetType currentType = getType(m_selectedExampleSetIndex);
596     if (currentType == ExampleSetModel::ExtraExampleSetType) {
597         int index = getExtraExampleSetIndex(m_selectedExampleSetIndex);
598         ExtraExampleSet exampleSet = m_extraExampleSets.at(index);
599         manifestScanPath = exampleSet.manifestPath;
600         examplesPath = exampleSet.examplesPath;
601         demosPath = exampleSet.examplesPath;
602     } else if (currentType == ExampleSetModel::QtExampleSet) {
603         int qtId = getQtId(m_selectedExampleSetIndex);
604         foreach (BaseQtVersion *version, QtVersionManager::versions()) {
605             if (version->uniqueId() == qtId) {
606                 manifestScanPath = version->docsPath().toString();
607                 examplesPath = version->examplesPath().toString();
608                 demosPath = version->demosPath().toString();
609                 break;
610             }
611         }
612     }
613     if (!manifestScanPath.isEmpty()) {
614         // search for examples-manifest.xml, demos-manifest.xml in <path>/*/
615         QDir dir = QDir(manifestScanPath);
616         const QStringList examplesPattern(QLatin1String("examples-manifest.xml"));
617         const QStringList demosPattern(QLatin1String("demos-manifest.xml"));
618         QFileInfoList fis;
619         foreach (QFileInfo subDir, dir.entryInfoList(QDir::Dirs | QDir::NoDotAndDotDot)) {
620             fis << QDir(subDir.absoluteFilePath()).entryInfoList(examplesPattern);
621             fis << QDir(subDir.absoluteFilePath()).entryInfoList(demosPattern);
622         }
623         foreach (const QFileInfo &fi, fis)
624             sources.append(fi.filePath());
625     }
626     if (examplesInstallPath)
627         *examplesInstallPath = examplesPath;
628     if (demosInstallPath)
629         *demosInstallPath = demosPath;
630 
631     return sources;
632 }
633 
634 QString prefixForItem(const ExampleItem *item)
635 {
636     QTC_ASSERT(item, return {});
637     if (item->isHighlighted)
638         return QLatin1String("0000 ");
639     return QString();
640 }
641 
642 QVariant ExamplesListModel::data(const QModelIndex &index, int role) const
643 {
644     if (!index.isValid() || index.row() >= m_items.count())
645         return QVariant();
646 
647     ExampleItem *item = static_cast<ExampleItem *>(m_items.at(index.row()));
648     switch (role)
649     {
650     case Qt::DisplayRole: // for search only
651         return QString(prefixForItem(item) + item->name + ' ' + item->tags.join(' '));
652     default:
653         return ListModel::data(index, role);
654     }
655 }
656 
657 void ExampleSetModel::selectExampleSet(int index)
658 {
659     if (index != m_selectedExampleSetIndex) {
660         m_selectedExampleSetIndex = index;
661         writeCurrentIdToSettings(m_selectedExampleSetIndex);
662         if (getType(m_selectedExampleSetIndex) == ExampleSetModel::QtExampleSet)
663             m_selectedQtVersion = QtVersionManager::version(getQtId(m_selectedExampleSetIndex));
664         emit selectedExampleSetChanged(m_selectedExampleSetIndex);
665     }
666 }
667 
668 void ExampleSetModel::qtVersionManagerLoaded()
669 {
670     m_qtVersionManagerInitialized = true;
671     tryToInitialize();
672 }
673 
674 void ExampleSetModel::helpManagerInitialized()
675 {
676     m_helpManagerInitialized = true;
677     tryToInitialize();
678 }
679 
680 
681 void ExampleSetModel::tryToInitialize()
682 {
683     if (m_initalized)
684         return;
685     if (!m_qtVersionManagerInitialized)
686         return;
687     if (!m_helpManagerInitialized)
688         return;
689 
690     m_initalized = true;
691 
692     connect(QtVersionManager::instance(), &QtVersionManager::qtVersionsChanged,
693             this, &ExampleSetModel::updateQtVersionList);
694     connect(ProjectExplorer::KitManager::instance(), &ProjectExplorer::KitManager::defaultkitChanged,
695             this, &ExampleSetModel::updateQtVersionList);
696 
697     updateQtVersionList();
698 }
699 
700 
701 ExamplesListModelFilter::ExamplesListModelFilter(ExamplesListModel *sourceModel, bool showTutorialsOnly, QObject *parent) :
702     Core::ListModelFilter(sourceModel, parent),
703     m_showTutorialsOnly(showTutorialsOnly),
704     m_examplesListModel(sourceModel)
705 {
706 }
707 
708 bool ExamplesListModelFilter::leaveFilterAcceptsRowBeforeFiltering(const Core::ListItem *item,
709                                                                    bool *earlyExitResult) const
710 {
711     QTC_ASSERT(earlyExitResult, return false);
712 
713     const ExampleItem *exampleItem = static_cast<const ExampleItem *>(item);
714     if (m_showTutorialsOnly && exampleItem->type != Tutorial) {
715         *earlyExitResult = false;
716         return true;
717     }
718 
719     if (m_examplesListModel->exampleSetModel()->selectedQtSupports(
720             Android::Constants::ANDROID_DEVICE_TYPE)
721         && !exampleItem->tags.contains("android")) {
722         *earlyExitResult = false;
723         return true;
724     }
725 
726     if (!m_showTutorialsOnly && exampleItem->type != Example && exampleItem->type != Demo) {
727         *earlyExitResult = false;
728         return true;
729     }
730     return false;
731 }
732 
733 } // namespace Internal
734 } // namespace QtSupport
