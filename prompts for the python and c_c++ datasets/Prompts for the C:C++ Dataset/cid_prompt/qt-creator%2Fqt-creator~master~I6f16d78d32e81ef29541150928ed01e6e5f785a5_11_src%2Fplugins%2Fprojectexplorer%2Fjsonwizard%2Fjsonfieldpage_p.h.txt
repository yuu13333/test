Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #pragma once
27 
28 #include "jsonfieldpage.h"
29 
30 #include <utils/pathchooser.h>
31 
32 #include <QWidget>
33 #include <QString>
34 #include <QVariant>
35 
36 #include <memory>
37 #include <vector>
38 
39 QT_BEGIN_NAMESPACE
40 class QStandardItem;
41 class QStandardItemModel;
42 QT_END_NAMESPACE
43 
44 namespace ProjectExplorer {
45 
46 // --------------------------------------------------------------------
47 // JsonFieldPage::Field::FieldPrivate:
48 // --------------------------------------------------------------------
49 
50 class JsonFieldPage::Field::FieldPrivate
51 {
52 public:
53     QString m_name;
54     QString m_displayName;
55     QString m_toolTip;
56     bool m_isMandatory = false;
57     bool m_hasSpan = false;
58 
59     QVariant m_visibleExpression;
60     QVariant m_enabledExpression;
61     QVariant m_isCompleteExpando;
62     QString m_isCompleteExpandoMessage;
63 
64     QLabel *m_label = nullptr;
65     QWidget *m_widget = nullptr;
66 };
67 
68 // --------------------------------------------------------------------
69 // Field Implementations:
70 // --------------------------------------------------------------------
71 
72 class LabelField : public JsonFieldPage::Field
73 {
74 private:
75     QWidget *createWidget(const QString &displayName, JsonFieldPage *page) override;
76     bool parseData(const QVariant &data, QString *errorMessage) override;
77 
78     bool m_wordWrap = false;
79     QString m_text;
80 };
81 
82 class SpacerField : public JsonFieldPage::Field
83 {
84 public:
85     bool suppressName() const override { return true; }
86 
87 private:
88     bool parseData(const QVariant &data, QString *errorMessage) override;
89     QWidget *createWidget(const QString &displayName, JsonFieldPage *page) override;
90 
91     int m_factor = 1;
92 };
93 
94 class LineEditField : public JsonFieldPage::Field
95 {
96 private:
97     bool parseData(const QVariant &data, QString *errorMessage) override;
98     QWidget *createWidget(const QString &displayName, JsonFieldPage *page) override;
99 
100     void setup(JsonFieldPage *page, const QString &name) override;
101 
102     bool validate(Utils::MacroExpander *expander, QString *message) override;
103     void initializeData(Utils::MacroExpander *expander) override;
104 
105     bool m_isModified = false;
106     bool m_isValidating = false;
107     bool m_restoreLastHistoryItem = false;
108     bool m_isPassword = false;
109     QString m_placeholderText;
110     QString m_defaultText;
111     QString m_disabledText;
112     QString m_historyId;
113     QRegularExpression m_validatorRegExp;
114     QString m_fixupExpando;
115     mutable QString m_currentText;
116 };
117 
118 class TextEditField : public JsonFieldPage::Field
119 {
120 private:
121     bool parseData(const QVariant &data, QString *errorMessage) override;
122     QWidget *createWidget(const QString &displayName, JsonFieldPage *page) override;
123 
124     void setup(JsonFieldPage *page, const QString &name) override;
125 
126     bool validate(Utils::MacroExpander *expander, QString *message) override;
127     void initializeData(Utils::MacroExpander *expander) override;
128 
129     QString m_defaultText;
130     bool m_acceptRichText = false;
131     QString m_disabledText;
132 
133     mutable QString m_currentText;
134 };
135 
136 class PathChooserField : public JsonFieldPage::Field
137 {
138 private:
139     bool parseData(const QVariant &data, QString *errorMessage) override;
140 
141     QWidget *createWidget(const QString &displayName, JsonFieldPage *page) override;
142     void setEnabled(bool e) override;
143 
144     void setup(JsonFieldPage *page, const QString &name) override;
145 
146     bool validate(Utils::MacroExpander *expander, QString *message) override;
147     void initializeData(Utils::MacroExpander *expander) override;
148 
149     QString m_path;
150     QString m_basePath;
151     QString m_historyId;
152     Utils::PathChooser::Kind m_kind = Utils::PathChooser::ExistingDirectory;
153 
154     QString m_currentPath;
155 };
156 
157 class CheckBoxField : public JsonFieldPage::Field
158 {
159 public:
160     bool suppressName() const override { return true; }
161 
162 private:
163     bool parseData(const QVariant &data, QString *errorMessage) override;
164 
165     QWidget *createWidget(const QString &displayName, JsonFieldPage *page) override;
166 
167     void setup(JsonFieldPage *page, const QString &name) override;
168 
169     bool validate(Utils::MacroExpander *expander, QString *message) override;
170     void initializeData(Utils::MacroExpander *expander) override;
171 
172     QString m_checkedValue = QString("0");
173     QString m_expandedCheckedValue = QString("true");
174     QString m_uncheckedValue = QString("1");
175     QString m_expandedUncheckedValue = QString("false");
176     QVariant m_checkedExpression;
177 
178     bool m_isModified = false;
179 };
180 
181 class ComboBoxField : public JsonFieldPage::Field
182 {
183 public:
184     enum SpecialRoles {
185         ValueRole = Qt::UserRole,
186         ConditionRole = Qt::UserRole + 1
187     };
188     ComboBoxField();
189     ~ComboBoxField();
190 
191 private:
192     bool parseData(const QVariant &data, QString *errorMessage) override;
193 
194     QWidget *createWidget(const QString &displayName, JsonFieldPage *page) override;
195 
196     void setup(JsonFieldPage *page, const QString &name) override;
197 
198     bool validate(Utils::MacroExpander *expander, QString *message) override;
199     void initializeData(Utils::MacroExpander *expander) override;
200 
201     std::vector<std::unique_ptr<QStandardItem>> m_itemList;
202     QStandardItemModel *m_itemModel = nullptr;
203     int m_index = -1;
204     int m_disabledIndex = -1;
205 
206     mutable int m_savedIndex = -1;
207 };
208 
209 } // namespace ProjectExplorer
