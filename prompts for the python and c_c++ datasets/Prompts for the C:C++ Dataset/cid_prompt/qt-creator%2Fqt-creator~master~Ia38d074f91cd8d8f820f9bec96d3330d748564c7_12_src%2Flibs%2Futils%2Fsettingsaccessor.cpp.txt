Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2017 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "settingsaccessor.h"
27 
28 #include "algorithm.h"
29 #include "asconst.h"
30 #include "qtcassert.h"
31 
32 #include <QApplication>
33 #include <QDebug>
34 #include <QDir>
35 #include <QRegExp>
36 
37 namespace {
38 
39 const char ORIGINAL_VERSION_KEY[] = "OriginalVersion";
40 const char SETTINGS_ID_KEY[] = "EnvironmentId";
41 const char USER_STICKY_KEYS_KEY[] = "UserStickyKeys";
42 const char VERSION_KEY[] = "Version";
43 
44 static QString generateSuffix(const QString &suffix)
45 {
46     QString result = suffix;
47     result.replace(QRegExp("[^a-zA-Z0-9_.-]"), QString('_')); // replace fishy characters:
48     if (!result.startsWith('.'))
49         result.prepend('.');
50     return result;
51 }
52 
53 // FIXME: Remove this!
54 class Operation {
55 public:
56     virtual ~Operation() { }
57 
58     virtual void apply(QVariantMap &userMap, const QString &key, const QVariant &sharedValue) = 0;
59 
60     void synchronize(QVariantMap &userMap, const QVariantMap &sharedMap)
61     {
62         QVariantMap::const_iterator it = sharedMap.begin();
63         QVariantMap::const_iterator eit = sharedMap.end();
64 
65         for (; it != eit; ++it) {
66             const QString &key = it.key();
67             if (key == VERSION_KEY || key == SETTINGS_ID_KEY)
68                 continue;
69             const QVariant &sharedValue = it.value();
70             const QVariant &userValue = userMap.value(key);
71             if (sharedValue.type() == QVariant::Map) {
72                 if (userValue.type() != QVariant::Map) {
73                     // This should happen only if the user manually changed the file in such a way.
74                     continue;
75                 }
76                 QVariantMap nestedUserMap = userValue.toMap();
77                 synchronize(nestedUserMap, sharedValue.toMap());
78                 userMap.insert(key, nestedUserMap);
79                 continue;
80             }
81             if (userMap.contains(key) && userValue != sharedValue) {
82                 apply(userMap, key, sharedValue);
83                 continue;
84             }
85         }
86     }
87 };
88 
89 class MergeSettingsOperation : public Operation
90 {
91 public:
92     void apply(QVariantMap &userMap, const QString &key, const QVariant &sharedValue)
93     {
94         // Do not override bookkeeping settings:
95         if (key == ORIGINAL_VERSION_KEY || key == VERSION_KEY)
96             return;
97         if (!userMap.value(USER_STICKY_KEYS_KEY).toList().contains(key))
98             userMap.insert(key, sharedValue);
99     }
100 };
101 
102 
103 // When restoring settings...
104 //   We check whether a .shared file exists. If so, we compare the settings in this file with
105 //   corresponding ones in the .user file. Whenever we identify a corresponding setting which
106 //   has a different value and which is not marked as sticky, we merge the .shared value into
107 //   the .user value.
108 QVariantMap mergeSharedSettings(const QVariantMap &userMap, const QVariantMap &sharedMap)
109 {
110     QVariantMap result = userMap;
111     if (sharedMap.isEmpty())
112         return result;
113     if (userMap.isEmpty())
114         return sharedMap;
115 
116     MergeSettingsOperation op;
117     op.synchronize(result, sharedMap);
118     return result;
119 }
120 
121 } // namespace
122 
123 namespace Utils {
124 
125 // --------------------------------------------------------------------
126 // BasicSettingsAccessor::Issue:
127 // --------------------------------------------------------------------
128 
129 QMessageBox::StandardButtons BasicSettingsAccessor::Issue::allButtons() const
130 {
131     QMessageBox::StandardButtons result = QMessageBox::NoButton;
132     for (const QMessageBox::StandardButton &b : buttons.keys())
133         result |= b;
134     return result;
135 }
136 
137 // --------------------------------------------------------------------
138 // BasicSettingsAccessor:
139 // --------------------------------------------------------------------
140 
141 /*!
142  * The BasicSettingsAccessor can be used to read/write settings in XML format.
143  */
144 BasicSettingsAccessor::BasicSettingsAccessor(const QString &docType,
145                                              const QString &displayName,
146                                              const QString &applicationDisplayName) :
147     docType(docType),
148     displayName(displayName),
149     applicationDisplayName(applicationDisplayName)
150 {
151     QTC_CHECK(!docType.isEmpty());
152     QTC_CHECK(!displayName.isEmpty());
153     QTC_CHECK(!applicationDisplayName.isEmpty());
154 }
155 
156 /*!
157  * Restore settings from disk and report any issues in a message box centered on \a parent.
158  */
159 QVariantMap BasicSettingsAccessor::restoreSettings(QWidget *parent) const
160 {
161     QTC_ASSERT(!m_baseFilePath.isEmpty(), return QVariantMap());
162 
163     const RestoreData result = readData(m_baseFilePath, parent);
164     const ProceedInfo pi = result.issue ? reportIssues(result.issue.value(), result.path, parent) : ProceedInfo::Continue;
165     return pi == ProceedInfo::DiscardAndContinue ? QVariantMap() : result.data;
166 }
167 
168 /*!
169  * Save \a data to disk and report any issues in a message box centered on \a parent.
170  */
171 bool BasicSettingsAccessor::saveSettings(const QVariantMap &data, QWidget *parent) const
172 {
173     const optional<Issue> result = writeData(m_baseFilePath, data, parent);
174     const ProceedInfo pi = result ? reportIssues(result.value(), m_baseFilePath, parent) : ProceedInfo::Continue;
175     return pi == ProceedInfo::Continue;
176 }
177 
178 /*!
179  * Read data from \a path. Do all the necessary postprocessing of the data.
180  */
181 BasicSettingsAccessor::RestoreData BasicSettingsAccessor::readData(const FileName &path,
182                                                                    QWidget *parent) const
183 {
184     Q_UNUSED(parent);
185     RestoreData result = readFile(path);
186     if (!result.data.isEmpty())
187         result.data = preprocessReadSettings(result.data);
188     return result;
189 }
190 
191 /*!
192  * Store the \a data in \a path on disk. Do all the necessary preprocessing of the data.
193  */
194 Utils::optional<BasicSettingsAccessor::Issue>
195 BasicSettingsAccessor::writeData(const FileName &path, const QVariantMap &data, QWidget *parent) const
196 {
197     Q_UNUSED(parent);
198     return writeFile(path, prepareToWriteSettings(data));
199 }
200 
201 /*!
202  * Read a file at \a path from disk and extract the data into a RestoreData set.
203  *
204  * This method does not do *any* processing of the file contents.
205  */
206 BasicSettingsAccessor::RestoreData BasicSettingsAccessor::readFile(const FileName &path) const
207 {
208     PersistentSettingsReader reader;
209     if (!reader.load(path)) {
210         return RestoreData(Issue(QCoreApplication::translate("Utils::SettingsAccessor", "Failed to Read File"),
211                                  QCoreApplication::translate("Utils::SettingsAccessor", "Could not open \"%1\".")
212                                  .arg(path.toUserOutput())));
213     }
214 
215     return RestoreData(path, reader.restoreValues());
216 }
217 
218 /*!
219  * Write a file at \a path to disk and store the \a data in it.
220  *
221  * This method does not do *any* processing of the file contents.
222  */
223 Utils::optional<BasicSettingsAccessor::Issue>
224 BasicSettingsAccessor::writeFile(const FileName &path, const QVariantMap &data) const
225 {
226     if (data.isEmpty()) {
227         return Issue(QCoreApplication::translate("Utils::SettingsAccessor", "Failed to Write File"),
228                      QCoreApplication::translate("Utils::SettingsAccessor", "There was nothing to write."));
229     }
230 
231     QString errorMessage;
232     if (!m_writer || m_writer->fileName() != path)
233         m_writer = std::make_unique<PersistentSettingsWriter>(path, docType);
234 
235     if (!m_writer->save(data, &errorMessage)) {
236         return Issue(QCoreApplication::translate("Utils::SettingsAccessor", "Failed to Write File"),
237                      errorMessage);
238     }
239     return {};
240 }
241 
242 BasicSettingsAccessor::ProceedInfo
243 BasicSettingsAccessor::reportIssues(const BasicSettingsAccessor::Issue &issue, const FileName &path,
244                                     QWidget *parent) const
245 {
246     if (!path.exists())
247         return Continue;
248 
249     const QMessageBox::Icon icon
250             = issue.buttons.count() > 1 ? QMessageBox::Question : QMessageBox::Information;
251     const QMessageBox::StandardButtons buttons = issue.allButtons();
252     QTC_ASSERT(buttons != QMessageBox::NoButton, return Continue);
253 
254     QMessageBox msgBox(icon, issue.title, issue.message, buttons, parent);
255     if (issue.defaultButton != QMessageBox::NoButton)
256         msgBox.setDefaultButton(issue.defaultButton);
257     if (issue.escapeButton != QMessageBox::NoButton)
258         msgBox.setEscapeButton(issue.escapeButton);
259 
260     int boxAction = msgBox.exec();
261     return issue.buttons.value(static_cast<QMessageBox::StandardButton>(boxAction));
262 }
263 
264 /*!
265  * This method is called right after reading data from disk and modifies \a data.
266  */
267 QVariantMap BasicSettingsAccessor::preprocessReadSettings(const QVariantMap &data) const
268 {
269     return data;
270 }
271 
272 /*!
273  * This method is called right before writing data to disk and modifies \a data.
274  */
275 QVariantMap BasicSettingsAccessor::prepareToWriteSettings(const QVariantMap &data) const
276 {
277     return data;
278 }
279 
280 // --------------------------------------------------------------------
281 // BackingUpSettingsAccessor:
282 // --------------------------------------------------------------------
283 
284 FileNameList BackUpStrategy::readFileCandidates(const FileName &baseFileName) const
285 {
286 
287     const QFileInfo pfi = baseFileName.toFileInfo();
288     const QStringList filter(pfi.fileName() + '*');
289     const QFileInfoList list = QDir(pfi.dir()).entryInfoList(filter, QDir::Files | QDir::Hidden | QDir::System);
290 
291     return Utils::transform(list, [](const QFileInfo &fi) { return FileName::fromString(fi.absoluteFilePath()); });
292 }
293 
294 int BackUpStrategy::compare(const BasicSettingsAccessor::RestoreData &data1,
295                             const BasicSettingsAccessor::RestoreData &data2) const
296 {
297     if (!data1.issue && !data1.data.isEmpty())
298         return -1;
299 
300     if (!data2.issue && !data2.data.isEmpty())
301         return 1;
302 
303     return 0;
304 }
305 
306 Utils::optional<Utils::FileName>
307 BackUpStrategy::backupName(const QVariantMap &oldData, const FileName &path, const QVariantMap &data) const
308 {
309     if (oldData == data)
310         return Utils::nullopt;
311     FileName backup = path;
312     backup.appendString(".bak");
313     return backup;
314 }
315 
316 /*!
317  * The BackingUpSettingsAccessor extends the BasicSettingsAccessor with a way to
318  * keep backups. The backup strategy can be used to influence when and how backups
319  * are created.
320  */
321 BackingUpSettingsAccessor::BackingUpSettingsAccessor(const QString &docType,
322                                                      const QString &dn, const QString &adn) :
323     BackingUpSettingsAccessor(std::make_unique<BackUpStrategy>(), docType, dn, adn)
324 { }
325 
326 BackingUpSettingsAccessor::BackingUpSettingsAccessor(std::unique_ptr<BackUpStrategy> &&strategy,
327                                                      const QString &docType,
328                                                      const QString &dn, const QString &adn) :
329     BasicSettingsAccessor(docType, dn, adn),
330     m_strategy(std::move(strategy))
331 { }
332 
333 BasicSettingsAccessor::RestoreData
334 BackingUpSettingsAccessor::readData(const Utils::FileName &path, QWidget *parent) const
335 {
336     const FileNameList fileList = readFileCandidates(path);
337     if (fileList.isEmpty()) // No settings found at all.
338         return RestoreData(path, QVariantMap());
339 
340     RestoreData result = bestReadFileData(fileList, parent);
341     if (result.path.isEmpty())
342         result.path = baseFilePath().parentDir();
343 
344     if (result.data.isEmpty()) {
345         Issue i(QApplication::translate("Utils::BasicSettingsAccessor", "No Valid Settings Found"),
346                 QApplication::translate("Utils::BasicSettingsAccessor",
347                                         "<p>No valid settings file could be found.</p>"
348                                         "<p>All settings files found in directory \"%1\" "
349                                         "were unsuitable for the current version of %2.</p>")
350                 .arg(path.toUserOutput())
351                 .arg(applicationDisplayName));
352         i.buttons.insert(QMessageBox::Ok, DiscardAndContinue);
353         result.issue = i;
354     }
355 
356     return result;
357 }
358 
359 Utils::optional<BasicSettingsAccessor::Issue>
360 BackingUpSettingsAccessor::writeData(const Utils::FileName &path, const QVariantMap &data,
361                                      QWidget *parent) const
362 {
363     if (data.isEmpty())
364         return {};
365 
366     backupFile(path, data, parent);
367 
368     return BasicSettingsAccessor::writeData(path, data, parent);
369 }
370 
371 FileNameList BackingUpSettingsAccessor::readFileCandidates(const Utils::FileName &path) const
372 {
373     FileNameList result = Utils::filteredUnique(m_strategy->readFileCandidates(path));
374     if (result.removeOne(baseFilePath()))
375         result.prepend(baseFilePath());
376 
377     return result;
378 }
379 
380 BasicSettingsAccessor::RestoreData
381 BackingUpSettingsAccessor::bestReadFileData(const FileNameList &candidates, QWidget *parent) const
382 {
383     BasicSettingsAccessor::RestoreData bestMatch;
384     for (const FileName &c : candidates) {
385         RestoreData cData = BasicSettingsAccessor::readData(c, parent);
386         if (m_strategy->compare(bestMatch, cData) > 0)
387             bestMatch = cData;
388     }
389     return bestMatch;
390 }
391 
392 void BackingUpSettingsAccessor::backupFile(const FileName &path, const QVariantMap &data,
393                                            QWidget *parent) const
394 {
395     RestoreData oldSettings = BasicSettingsAccessor::readData(path, parent);
396     if (oldSettings.data.isEmpty())
397         return;
398 
399     // Do we need to do a backup?
400     const QString origName = path.toString();
401     optional<FileName> backupFileName = m_strategy->backupName(oldSettings.data, path, data);
402     if (backupFileName)
403         QFile::copy(origName, backupFileName.value().toString());
404 }
405 
406 // --------------------------------------------------------------------
407 // UpgradingSettingsAccessor:
408 // --------------------------------------------------------------------
409 
410 VersionedBackUpStrategy::VersionedBackUpStrategy(const UpgradingSettingsAccessor *accessor) :
411     m_accessor(accessor)
412 {
413     QTC_CHECK(accessor);
414 }
415 
416 int VersionedBackUpStrategy::compare(const BasicSettingsAccessor::RestoreData &data1,
417                                      const BasicSettingsAccessor::RestoreData &data2) const
418 {
419     const int origVersion = versionFromMap(data1.data);
420     const bool origValid = m_accessor->isValidVersionAndId(origVersion, settingsIdFromMap(data1.data));
421 
422     const int newVersion = versionFromMap(data2.data);
423     const bool newValid = m_accessor->isValidVersionAndId(newVersion, settingsIdFromMap(data2.data));
424 
425     if ((!origValid && !newValid) || (origValid && newValid && origVersion == newVersion))
426         return 0;
427     if ((!origValid &&  newValid) || (origValid && newValid && origVersion < newVersion))
428         return 1;
429     return -1;
430 }
431 
432 optional<FileName>
433 VersionedBackUpStrategy::backupName(const QVariantMap &oldData, const FileName &path, const QVariantMap &data) const
434 {
435     Q_UNUSED(oldData);
436     FileName backupName = path;
437     const QByteArray oldEnvironmentId = settingsIdFromMap(data);
438     const int oldVersion = versionFromMap(data);
439 
440     if (!oldEnvironmentId.isEmpty() && oldEnvironmentId != m_accessor->settingsId())
441         backupName.appendString('.' + QString::fromLatin1(oldEnvironmentId).mid(1, 7));
442     if (oldVersion != m_accessor->currentVersion()) {
443         VersionUpgrader *upgrader = m_accessor->upgrader(oldVersion);
444         if (upgrader)
445             backupName.appendString('.' + upgrader->backupExtension());
446         else
447             backupName.appendString('.' + QString::number(oldVersion));
448     }
449     if (backupName == path)
450         return nullopt;
451     return backupName;
452 }
453 
454 VersionUpgrader::VersionUpgrader(const int version, const QString &extension) :
455     m_version(version), m_extension(extension)
456 { }
457 
458 int VersionUpgrader::version() const
459 {
460     QTC_CHECK(m_version >= 0);
461     return m_version;
462 }
463 
464 QString VersionUpgrader::backupExtension() const
465 {
466     QTC_CHECK(!m_extension.isEmpty());
467     return m_extension;
468 }
469 
470 /*!
471  * Performs a simple renaming of the listed keys in \a changes recursively on \a map.
472  */
473 QVariantMap VersionUpgrader::renameKeys(const QList<Change> &changes, QVariantMap map) const
474 {
475     foreach (const Change &change, changes) {
476         QVariantMap::iterator oldSetting = map.find(change.first);
477         if (oldSetting != map.end()) {
478             map.insert(change.second, oldSetting.value());
479             map.erase(oldSetting);
480         }
481     }
482 
483     QVariantMap::iterator i = map.begin();
484     while (i != map.end()) {
485         QVariant v = i.value();
486         if (v.type() == QVariant::Map)
487             i.value() = renameKeys(changes, v.toMap());
488 
489         ++i;
490     }
491 
492     return map;
493 }
494 
495 /*!
496  * The UpgradingSettingsAccessor keeps version information in the settings file and will
497  * upgrade the settings on load to the latest supported version (if possible).
498  */
499 UpgradingSettingsAccessor::UpgradingSettingsAccessor(const QString &dn, const QString &adn) :
500     UpgradingSettingsAccessor(std::make_unique<VersionedBackUpStrategy>(this), docType, dn, adn)
501 { }
502 
503 UpgradingSettingsAccessor::UpgradingSettingsAccessor(std::unique_ptr<BackUpStrategy> &&strategy,
504                                                      const QString &docType, const QString &dn,
505                                                      const QString &adn) :
506     BackingUpSettingsAccessor(std::move(strategy), docType, dn, adn)
507 { }
508 
509 int UpgradingSettingsAccessor::currentVersion() const
510 {
511     return lastSupportedVersion() + 1;
512 }
513 
514 int UpgradingSettingsAccessor::firstSupportedVersion() const
515 {
516     return m_upgraders.size() == 0 ? -1 : m_upgraders.front()->version();
517 }
518 
519 int UpgradingSettingsAccessor::lastSupportedVersion() const
520 {
521     return m_upgraders.size() == 0 ? -1 : m_upgraders.back()->version();
522 }
523 
524 bool UpgradingSettingsAccessor::isValidVersionAndId(const int version, const QByteArray &id) const
525 {
526     return (version >= 0
527             && version >= firstSupportedVersion() && version <= currentVersion())
528             && (id == m_id || m_id.isEmpty());
529 }
530 
531 BasicSettingsAccessor::RestoreData UpgradingSettingsAccessor::readData(const FileName &path,
532                                                                        QWidget *parent) const
533 {
534     RestoreData result = readRawData(path, parent);
535     result.data = upgradeSettings(result.data, currentVersion());
536     return result;
537 }
538 
539 BasicSettingsAccessor::RestoreData UpgradingSettingsAccessor::readRawData(const FileName &path,
540                                                                           QWidget *parent) const
541 {
542     RestoreData result = BackingUpSettingsAccessor::readData(path, parent);
543     if (result.issue)
544         return result;
545 
546     const int version = versionFromMap(result.data);
547     if (version < firstSupportedVersion() || version > currentVersion()) {
548         Issue i(QApplication::translate("Utils::SettingsAccessor", "No Valid Settings Found"),
549                 QApplication::translate("Utils::SettingsAccessor",
550                                         "<p>No valid settings file could be found.</p>"
551                                         "<p>All settings files found in directory \"%1\" "
552                                         "were either too new or too old to be read.</p>")
553                 .arg(result.path.toUserOutput()));
554         i.buttons.insert(QMessageBox::Ok, DiscardAndContinue);
555         result.issue = i;
556         return result;
557     }
558     if ((result.path != baseFilePath()) && (version < currentVersion())) {
559         Issue i(QApplication::translate("Utils::SettingsAccessor", "Using Old Settings"),
560                 QApplication::translate("Utils::SettingsAccessor",
561                                         "<p>The versioned backup \"%1\" of the settings "
562                                         "file is used, because the non-versioned file was "
563                                         "created by an incompatible version of %2.</p>"
564                                         "<p>Settings changes made since the last time this "
565                                         "version of %2 was used are ignored, and "
566                                         "changes made now will <b>not</b> be propagated to "
567                                         "the newer version.</p>")
568                 .arg(result.path.toUserOutput())
569                 .arg(applicationDisplayName));
570         i.buttons.insert(QMessageBox::Ok, Continue);
571         result.issue = i;
572         return result;
573     }
574 
575     const QByteArray readId = settingsIdFromMap(result.data);
576     if (!settingsId().isEmpty() && readId != settingsId()) {
577         Issue i(QApplication::translate("Utils::EnvironmentIdAccessor",
578                                         "Settings File for \"%1\" from a different Environment?")
579                 .arg(applicationDisplayName),
580                 QApplication::translate("Utils::EnvironmentIdAccessor",
581                                         "<p>No settings file created by this instance "
582                                         "of %1 was found.</p>"
583                                         "<p>Did you work with this project on another machine or "
584                                         "using a different settings path before?</p>"
585                                         "<p>Do you still want to load the settings file \"%2\"?</p>")
586                 .arg(applicationDisplayName)
587                 .arg(result.path.toUserOutput()));
588         i.defaultButton = QMessageBox::No;
589         i.escapeButton = QMessageBox::No;
590         i.buttons.insert(QMessageBox::Yes, Continue);
591         i.buttons.insert(QMessageBox::No, DiscardAndContinue);
592         result.issue = i;
593         return result;
594     }
595 
596     return result;
597 }
598 
599 QVariantMap UpgradingSettingsAccessor::prepareToWriteSettings(const QVariantMap &data) const
600 {
601     QVariantMap tmp = BackingUpSettingsAccessor::prepareToWriteSettings(data);
602 
603     setVersionInMap(tmp,currentVersion());
604     if (!m_id.isEmpty())
605         setSettingsIdInMap(tmp, m_id);
606 
607     return tmp;
608 }
609 
610 bool UpgradingSettingsAccessor::addVersionUpgrader(std::unique_ptr<VersionUpgrader> &&upgrader)
611 {
612     QTC_ASSERT(upgrader.get(), return false);
613     const int version = upgrader->version();
614     QTC_ASSERT(version >= 0, return false);
615 
616     const bool haveUpgraders = m_upgraders.size() != 0;
617     QTC_ASSERT(!haveUpgraders || currentVersion() == version, return false);
618     m_upgraders.push_back(std::move(upgrader));
619     return true;
620 }
621 
622 VersionUpgrader *UpgradingSettingsAccessor::upgrader(const int version) const
623 {
624     QTC_ASSERT(version >= 0 && firstSupportedVersion() >= 0, return nullptr);
625     const int pos = version - firstSupportedVersion();
626     VersionUpgrader *upgrader = nullptr;
627     if (pos >= 0 && pos < static_cast<int>(m_upgraders.size()))
628         upgrader = m_upgraders[static_cast<size_t>(pos)].get();
629     QTC_CHECK(upgrader == nullptr || upgrader->version() == version);
630     return upgrader;
631 }
632 
633 QVariantMap UpgradingSettingsAccessor::upgradeSettings(const QVariantMap &data, const int targetVersion) const
634 {
635     QTC_ASSERT(targetVersion >= firstSupportedVersion(), return data);
636     QTC_ASSERT(targetVersion <= currentVersion(), return data);
637 
638     const int version = versionFromMap(data);
639     if (!isValidVersionAndId(version, settingsIdFromMap(data)))
640         return data;
641 
642     QVariantMap result = data;
643     if (!data.contains(ORIGINAL_VERSION_KEY))
644         setOriginalVersionInMap(result, version);
645 
646     for (int i = version; i < targetVersion; ++i) {
647         VersionUpgrader *u = upgrader(i);
648         QTC_CHECK(u);
649         result = u->upgrade(result);
650         setVersionInMap(result, i + 1);
651     }
652 
653     return result;
654 }
655 
656 // --------------------------------------------------------------------
657 // SettingsAccessorPrivate:
658 // --------------------------------------------------------------------
659 
660 class SettingsAccessorPrivate
661 {
662 public:
663     SettingsAccessorPrivate(const FileName &projectFilePath) : m_projectFilePath(projectFilePath) { }
664 
665     const FileName m_projectFilePath;
666 
667     std::unique_ptr<UpgradingSettingsAccessor> m_sharedFile;
668 };
669 
670 // Return path to shared directory for .user files, create if necessary.
671 static inline Utils::optional<QString> defineExternalUserFileDir()
672 {
673     const char userFilePathVariable[] = "QTC_USER_FILE_PATH";
674     if (!qEnvironmentVariableIsSet(userFilePathVariable))
675         return QString();
676     const QFileInfo fi(QFile::decodeName(qgetenv(userFilePathVariable)));
677     const QString path = fi.absoluteFilePath();
678     if (fi.isDir() || fi.isSymLink())
679         return path;
680     if (fi.exists()) {
681         qWarning() << userFilePathVariable << '=' << QDir::toNativeSeparators(path)
682             << " points to an existing file";
683         return nullopt;
684     }
685     QDir dir;
686     if (!dir.mkpath(path)) {
687         qWarning() << "Cannot create: " << QDir::toNativeSeparators(path);
688         return nullopt;
689     }
690     return path;
691 }
692 
693 // Return a suitable relative path to be created under the shared .user directory.
694 static QString makeRelative(QString path)
695 {
696     const QChar slash('/');
697     // Windows network shares: "//server.domain-a.com/foo' -> 'serverdomainacom/foo'
698     if (path.startsWith("//")) {
699         path.remove(0, 2);
700         const int nextSlash = path.indexOf(slash);
701         if (nextSlash > 0) {
702             for (int p = nextSlash; p >= 0; --p) {
703                 if (!path.at(p).isLetterOrNumber())
704                     path.remove(p, 1);
705             }
706         }
707         return path;
708     }
709     // Windows drives: "C:/foo' -> 'c/foo'
710     if (path.size() > 3 && path.at(1) == ':') {
711         path.remove(1, 1);
712         path[0] = path.at(0).toLower();
713         return path;
714     }
715     if (path.startsWith(slash)) // Standard UNIX paths: '/foo' -> 'foo'
716         path.remove(0, 1);
717     return path;
718 }
719 
720 // Return complete file path of the .user file.
721 static FileName externalUserFilePath(const Utils::FileName &projectFilePath, const QString &suffix)
722 {
723     FileName result;
724     static const optional<QString> externalUserFileDir = defineExternalUserFileDir();
725 
726     if (!externalUserFileDir) {
727         // Recreate the relative project file hierarchy under the shared directory.
728         // PersistentSettingsWriter::write() takes care of creating the path.
729         result = FileName::fromString(externalUserFileDir.value());
730         result.appendString('/' + makeRelative(projectFilePath.toString()));
731         result.appendString(suffix);
732     }
733     return result;
734 }
735 
736 // -----------------------------------------------------------------------------
737 // SettingsAccessor:
738 // -----------------------------------------------------------------------------
739 
740 SettingsAccessor::SettingsAccessor(std::unique_ptr<BackUpStrategy> &&strategy,
741                                    const Utils::FileName &baseFile, const QString &docType,
742                                    const QString &displayName, const QString &appDisplayName) :
743     UpgradingSettingsAccessor(std::move(strategy), docType, displayName, appDisplayName),
744     d(new SettingsAccessorPrivate(baseFile))
745 {
746     const FileName externalUser = externalUserFile();
747     const FileName projectUser = projectUserFile();
748     setBaseFilePath(externalUser.isEmpty() ? projectUser : externalUser);
749 
750     d->m_sharedFile
751             = std::make_unique<UpgradingSettingsAccessor>(std::make_unique<NoBackUpStrategy>(),
752                                                           docType, displayName, appDisplayName);
753     d->m_sharedFile->setBaseFilePath(sharedFile());
754 }
755 
756 SettingsAccessor::~SettingsAccessor()
757 {
758     delete d;
759 }
760 
761 void SettingsAccessor::storeSharedSettings(const QVariantMap &data) const
762 {
763     Q_UNUSED(data);
764 }
765 
766 FileName SettingsAccessor::projectUserFile() const
767 {
768     FileName projectUserFile = d->m_projectFilePath;
769     projectUserFile.appendString(generateSuffix(qEnvironmentVariable("QTC_EXTENSION", ".user")));
770     return projectUserFile;
771 }
772 
773 FileName SettingsAccessor::externalUserFile() const
774 {
775     return externalUserFilePath(d->m_projectFilePath, generateSuffix(qEnvironmentVariable("QTC_EXTENSION", ".user")));
776 }
777 
778 FileName SettingsAccessor::sharedFile() const
779 {
780     FileName sharedFile = d->m_projectFilePath;
781     sharedFile.appendString(generateSuffix(qEnvironmentVariable("QTC_SHARED_EXTENSION", ".shared")));
782     return sharedFile;
783 }
784 
785 BasicSettingsAccessor::RestoreData SettingsAccessor::readData(const FileName &path,
786                                                               QWidget *parent) const
787 {
788     Q_UNUSED(path); // FIXME: This is wrong!
789 
790     RestoreData userSettings = UpgradingSettingsAccessor::readData(path, parent);
791      if (userSettings.issue && reportIssues(userSettings.issue.value(), userSettings.path, parent) == DiscardAndContinue)
792         userSettings.data.clear();
793 
794     RestoreData sharedSettings = readSharedSettings(parent);
795     if (sharedSettings.issue && reportIssues(sharedSettings.issue.value(), sharedSettings.path, parent) == DiscardAndContinue)
796         sharedSettings.data.clear();
797     RestoreData mergedSettings = RestoreData(userSettings.path,
798                                              mergeSettings(userSettings.data, sharedSettings.data));
799     return mergedSettings;
800 }
801 
802 SettingsAccessor::RestoreData SettingsAccessor::readSharedSettings(QWidget *parent) const
803 {
804     RestoreData sharedSettings = d->m_sharedFile->readData(d->m_sharedFile->baseFilePath(), parent);
805 
806     if (versionFromMap(sharedSettings.data) > currentVersion()) {
807         // The shared file version is newer than Creator... If we have valid user
808         // settings we prompt the user whether we could try an *unsupported* update.
809         // This makes sense since the merging operation will only replace shared settings
810         // that perfectly match corresponding user ones. If we don't have valid user
811         // settings to compare against, there's nothing we can do.
812 
813         sharedSettings.issue = Issue(QApplication::translate("Utils::SettingsAccessor",
814                                                              "Unsupported Shared Settings File"),
815                                      QApplication::translate("Utils::SettingsAccessor",
816                                                              "The version of your .shared file is not "
817                                                              "supported by %1. "
818                                                              "Do you want to try loading it anyway?"));
819         sharedSettings.issue->buttons.insert(QMessageBox::Yes, Continue);
820         sharedSettings.issue->buttons.insert(QMessageBox::No, DiscardAndContinue);
821         sharedSettings.issue->defaultButton = QMessageBox::No;
822         sharedSettings.issue->escapeButton = QMessageBox::No;
823     }
824     return sharedSettings;
825 }
826 
827 QVariantMap
828 SettingsAccessor::mergeSettings(const QVariantMap &userMap, const QVariantMap &sharedMap) const
829 {
830     QVariantMap newUser = userMap;
831     QVariantMap newShared = sharedMap;
832 
833     const int userVersion = versionFromMap(userMap);
834     const int sharedVersion = versionFromMap(sharedMap);
835 
836     QVariantMap result;
837     if (!newUser.isEmpty() && !newShared.isEmpty()) {
838         newUser = upgradeSettings(newUser, sharedVersion);
839         newShared = upgradeSettings(newShared, userVersion);
840         result = mergeSharedSettings(newUser, newShared);
841     } else if (!sharedMap.isEmpty()) {
842         result = sharedMap;
843     } else if (!userMap.isEmpty()) {
844         result = userMap;
845     }
846 
847     storeSharedSettings(newShared);
848 
849     // Update from the base version to Creator's version.
850     return upgradeSettings(result, currentVersion());
851 }
852 
853 // --------------------------------------------------------------------
854 // Helper functions:
855 // --------------------------------------------------------------------
856 
857 int versionFromMap(const QVariantMap &data)
858 {
859     return data.value(VERSION_KEY, -1).toInt();
860 }
861 
862 int originalVersionFromMap(const QVariantMap &data)
863 {
864     return data.value(ORIGINAL_VERSION_KEY, versionFromMap(data)).toInt();
865 }
866 
867 QByteArray settingsIdFromMap(const QVariantMap &data)
868 {
869     return data.value(SETTINGS_ID_KEY).toByteArray();
870 }
871 
872 void setOriginalVersionInMap(QVariantMap &data, int version)
873 {
874     data.insert(ORIGINAL_VERSION_KEY, version);
875 }
876 
877 void setVersionInMap(QVariantMap &data, int version)
878 {
879     data.insert(VERSION_KEY, version);
880 }
881 
882 void setSettingsIdInMap(QVariantMap &data, const QByteArray &id)
883 {
884     data.insert(SETTINGS_ID_KEY, id);
885 }
886 
887 } // namespace Utils
