Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2017 The Qt Company Ltd.
4 ** Copyright (C) 2016 Richard J. Moore <rich@kde.org>
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the QtNetwork module of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:LGPL$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU Lesser General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU Lesser
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
22 ** packaging of this file. Please review the following information to
23 ** ensure the GNU Lesser General Public License version 3 requirements
24 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
25 **
26 ** GNU General Public License Usage
27 ** Alternatively, this file may be used under the terms of the GNU
28 ** General Public License version 2.0 or (at your option) the GNU General
29 ** Public license version 3 or any later version approved by the KDE Free
30 ** Qt Foundation. The licenses are as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
32 ** included in the packaging of this file. Please review the following
33 ** information to ensure the GNU General Public License requirements will
34 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
35 ** https://www.gnu.org/licenses/gpl-3.0.html.
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 
42 #include "qsslkey.h"
43 #include "qsslkey_p.h"
44 #include "qsslsocket_openssl_symbols_p.h"
45 #include "qsslsocket.h"
46 #include "qsslsocket_p.h"
47 
48 #include <QtCore/qatomic.h>
49 #include <QtCore/qbytearray.h>
50 #include <QtCore/qiodevice.h>
51 #ifndef QT_NO_DEBUG_STREAM
52 #include <QtCore/qdebug.h>
53 #endif
54 
55 QT_BEGIN_NAMESPACE
56 
57 void QSslKeyPrivate::clear(bool deep)
58 {
59     isNull = true;
60     if (!QSslSocket::supportsSsl())
61         return;
62     if (algorithm == QSsl::Rsa && rsa) {
63         if (deep)
64             q_RSA_free(rsa);
65         rsa = 0;
66     }
67     if (algorithm == QSsl::Dsa && dsa) {
68         if (deep)
69             q_DSA_free(dsa);
70         dsa = 0;
71     }
72 #ifndef OPENSSL_NO_EC
73     if (algorithm == QSsl::Ec && ec) {
74        if (deep)
75             q_EC_KEY_free(ec);
76        ec = 0;
77     }
78 #endif
79     if (algorithm == QSsl::Opaque && opaque) {
80         if (deep)
81             q_EVP_PKEY_free(opaque);
82         opaque = 0;
83     }
84 }
85 
86 bool QSslKeyPrivate::fromEVP_PKEY(EVP_PKEY *pkey)
87 {
88 #if QT_CONFIG(opensslv11)
89     const int keyType = q_EVP_PKEY_type(q_EVP_PKEY_base_id(pkey));
90 #else
91     const int keyType = pkey->type;
92 #endif
93     if (keyType == EVP_PKEY_RSA) {
94         isNull = false;
95         algorithm = QSsl::Rsa;
96         type = QSsl::PrivateKey;
97         // TODO: can we just merge those ifdef blocks?
98 #if QT_CONFIG(opensslv11)
99         rsa = q_EVP_PKEY_get1_RSA(pkey);
100 #else
101         rsa = q_RSA_new();
102         memcpy(rsa, q_EVP_PKEY_get1_RSA(pkey), sizeof(RSA));
103 #endif
104         return true;
105     } else if (keyType == EVP_PKEY_DSA) {
106         isNull = false;
107         algorithm = QSsl::Dsa;
108         type = QSsl::PrivateKey;
109         // Again, should we merge the lines below?
110 #if QT_CONFIG(opensslv11)
111         dsa = q_EVP_PKEY_get1_DSA(pkey);
112 #else
113         dsa = q_DSA_new();
114         memcpy(dsa, q_EVP_PKEY_get1_DSA(pkey), sizeof(DSA));
115 #endif
116         return true;
117     }
118 #ifndef OPENSSL_NO_EC
119     else if (keyType == EVP_PKEY_EC) {
120         isNull = false;
121         algorithm = QSsl::Ec;
122         type = QSsl::PrivateKey;
123 #if QT_CONFIG(opensslv11)
124         ec = q_EVP_PKEY_get1_EC_KEY(pkey);
125 #else
126         ec = q_EC_KEY_dup(q_EVP_PKEY_get1_EC_KEY(pkey));
127 #endif
128         return true;
129     }
130 #endif
131     else {
132         // Unknown key type. This could be handled as opaque, but then
133         // we'd eventually leak memory since we wouldn't be able to free
134         // the underlying EVP_PKEY structure. For now, we won't support
135         // this.
136     }
137 
138     return false;
139 }
140 
141 void QSslKeyPrivate::decodeDer(const QByteArray &der, bool deepClear)
142 {
143     QMap<QByteArray, QByteArray> headers;
144     decodePem(pemFromDer(der, headers), QByteArray(), deepClear);
145 }
146 
147 void QSslKeyPrivate::decodePem(const QByteArray &pem, const QByteArray &passPhrase,
148                                bool deepClear)
149 {
150     if (pem.isEmpty())
151         return;
152 
153     clear(deepClear);
154 
155     if (!QSslSocket::supportsSsl())
156         return;
157 
158     BIO *bio = q_BIO_new_mem_buf(const_cast<char *>(pem.data()), pem.size());
159     if (!bio)
160         return;
161 
162     void *phrase = const_cast<char *>(passPhrase.constData());
163 
164     if (algorithm == QSsl::Rsa) {
165         RSA *result = (type == QSsl::PublicKey)
166             ? q_PEM_read_bio_RSA_PUBKEY(bio, &rsa, 0, phrase)
167             : q_PEM_read_bio_RSAPrivateKey(bio, &rsa, 0, phrase);
168         if (rsa && rsa == result)
169             isNull = false;
170     } else if (algorithm == QSsl::Dsa) {
171         DSA *result = (type == QSsl::PublicKey)
172             ? q_PEM_read_bio_DSA_PUBKEY(bio, &dsa, 0, phrase)
173             : q_PEM_read_bio_DSAPrivateKey(bio, &dsa, 0, phrase);
174         if (dsa && dsa == result)
175             isNull = false;
176 #ifndef OPENSSL_NO_EC
177     } else if (algorithm == QSsl::Ec) {
178         EC_KEY *result = (type == QSsl::PublicKey)
179             ? q_PEM_read_bio_EC_PUBKEY(bio, &ec, 0, phrase)
180             : q_PEM_read_bio_ECPrivateKey(bio, &ec, 0, phrase);
181         if (ec && ec == result)
182             isNull = false;
183 #endif
184     }
185 
186     q_BIO_free(bio);
187 }
188 
189 int QSslKeyPrivate::length() const
190 {
191     if (isNull || algorithm == QSsl::Opaque)
192         return -1;
193 
194     switch (algorithm) {
195 
196 #if QT_CONFIG(opensslv11)
197         case QSsl::Rsa: return q_RSA_bits(rsa);
198         case QSsl::Dsa: return q_DSA_bits(dsa);
199 #else
200         case QSsl::Rsa: return q_BN_num_bits(rsa->n);
201         case QSsl::Dsa: return q_BN_num_bits(dsa->p);
202 #endif
203 
204 #ifndef OPENSSL_NO_EC
205         case QSsl::Ec: return q_EC_GROUP_get_degree(q_EC_KEY_get0_group(ec));
206 #endif
207         default: return -1;
208     }
209 }
210 
211 QByteArray QSslKeyPrivate::toPem(const QByteArray &passPhrase) const
212 {
213     if (!QSslSocket::supportsSsl() || isNull || algorithm == QSsl::Opaque)
214         return QByteArray();
215 
216     BIO *bio = q_BIO_new(q_BIO_s_mem());
217     if (!bio)
218         return QByteArray();
219 
220     bool fail = false;
221 
222     if (algorithm == QSsl::Rsa) {
223         if (type == QSsl::PublicKey) {
224             if (!q_PEM_write_bio_RSA_PUBKEY(bio, rsa))
225                 fail = true;
226         } else {
227             if (!q_PEM_write_bio_RSAPrivateKey(
228                     bio, rsa,
229                     // ### the cipher should be selectable in the API:
230                     passPhrase.isEmpty() ? (const EVP_CIPHER *)0 : q_EVP_des_ede3_cbc(),
231                     const_cast<uchar *>((const uchar *)passPhrase.data()), passPhrase.size(), 0, 0)) {
232                 fail = true;
233             }
234         }
235     } else if (algorithm == QSsl::Dsa) {
236         if (type == QSsl::PublicKey) {
237             if (!q_PEM_write_bio_DSA_PUBKEY(bio, dsa))
238                 fail = true;
239         } else {
240             if (!q_PEM_write_bio_DSAPrivateKey(
241                     bio, dsa,
242                     // ### the cipher should be selectable in the API:
243                     passPhrase.isEmpty() ? (const EVP_CIPHER *)0 : q_EVP_des_ede3_cbc(),
244                     const_cast<uchar *>((const uchar *)passPhrase.data()), passPhrase.size(), 0, 0)) {
245                 fail = true;
246             }
247         }
248 #ifndef OPENSSL_NO_EC
249     } else if (algorithm == QSsl::Ec) {
250         if (type == QSsl::PublicKey) {
251             if (!q_PEM_write_bio_EC_PUBKEY(bio, ec))
252                 fail = true;
253         } else {
254             if (!q_PEM_write_bio_ECPrivateKey(
255                     bio, ec,
256                     // ### the cipher should be selectable in the API:
257                     passPhrase.isEmpty() ? (const EVP_CIPHER *)0 : q_EVP_des_ede3_cbc(),
258                     const_cast<uchar *>((const uchar *)passPhrase.data()), passPhrase.size(), 0, 0)) {
259                 fail = true;
260             }
261         }
262 #endif
263     } else {
264         fail = true;
265     }
266 
267     QByteArray pem;
268     if (!fail) {
269         char *data;
270         long size = q_BIO_get_mem_data(bio, &data);
271         pem = QByteArray(data, size);
272     }
273     q_BIO_free(bio);
274     return pem;
275 }
276 
277 Qt::HANDLE QSslKeyPrivate::handle() const
278 {
279     switch (algorithm) {
280     case QSsl::Opaque:
281         return Qt::HANDLE(opaque);
282     case QSsl::Rsa:
283         return Qt::HANDLE(rsa);
284     case QSsl::Dsa:
285         return Qt::HANDLE(dsa);
286 #ifndef OPENSSL_NO_EC
287     case QSsl::Ec:
288         return Qt::HANDLE(ec);
289 #endif
290     default:
291         return Qt::HANDLE(NULL);
292     }
293 }
294 
295 static QByteArray doCrypt(QSslKeyPrivate::Cipher cipher, const QByteArray &data, const QByteArray &key, const QByteArray &iv, int enc)
296 {
297 #if QT_CONFIG(opensslv11)
298     EVP_CIPHER_CTX *ctx = q_EVP_CIPHER_CTX_new();
299 #else
300     EVP_CIPHER_CTX evpCipherContext;
301     EVP_CIPHER_CTX *ctx = &evpCipherContext;
302 #endif
303 
304     const EVP_CIPHER* type = 0;
305     int i = 0, len = 0;
306 
307     switch (cipher) {
308     case QSslKeyPrivate::DesCbc:
309         type = q_EVP_des_cbc();
310         break;
311     case QSslKeyPrivate::DesEde3Cbc:
312         type = q_EVP_des_ede3_cbc();
313         break;
314     case QSslKeyPrivate::Rc2Cbc:
315         type = q_EVP_rc2_cbc();
316         break;
317     }
318 
319     QByteArray output;
320     output.resize(data.size() + EVP_MAX_BLOCK_LENGTH);
321 
322 #if QT_CONFIG(opensslv11)
323     q_EVP_CIPHER_CTX_reset(ctx);
324 #else
325     q_EVP_CIPHER_CTX_init(ctx);
326 #endif
327 
328     q_EVP_CipherInit(ctx, type, NULL, NULL, enc);
329     q_EVP_CIPHER_CTX_set_key_length(ctx, key.size());
330     if (cipher == QSslKeyPrivate::Rc2Cbc)
331         q_EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_SET_RC2_KEY_BITS, 8 * key.size(), NULL);
332     q_EVP_CipherInit(ctx, NULL,
333         reinterpret_cast<const unsigned char *>(key.constData()),
334         reinterpret_cast<const unsigned char *>(iv.constData()), enc);
335     q_EVP_CipherUpdate(ctx,
336         reinterpret_cast<unsigned char *>(output.data()), &len,
337         reinterpret_cast<const unsigned char *>(data.constData()), data.size());
338     q_EVP_CipherFinal(ctx,
339         reinterpret_cast<unsigned char *>(output.data()) + len, &i);
340     len += i;
341 
342 #if QT_CONFIG(opensslv11)
343     q_EVP_CIPHER_CTX_reset(ctx);
344     q_EVP_CIPHER_CTX_free(ctx);
345 #else
346     q_EVP_CIPHER_CTX_cleanup(ctx);
347 #endif
348 
349     return output.left(len);
350 }
351 
352 QByteArray QSslKeyPrivate::decrypt(Cipher cipher, const QByteArray &data, const QByteArray &key, const QByteArray &iv)
353 {
354     return doCrypt(cipher, data, key, iv, 0);
355 }
356 
357 QByteArray QSslKeyPrivate::encrypt(Cipher cipher, const QByteArray &data, const QByteArray &key, const QByteArray &iv)
358 {
359     return doCrypt(cipher, data, key, iv, 1);
360 }
361 
362 QT_END_NAMESPACE
