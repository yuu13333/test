Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2018 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the examples of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:BSD$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** BSD License Usage
18 ** Alternatively, you may use this file under the terms of the BSD license
19 ** as follows:
20 **
21 ** "Redistribution and use in source and binary forms, with or without
22 ** modification, are permitted provided that the following conditions are
23 ** met:
24 **   * Redistributions of source code must retain the above copyright
25 **     notice, this list of conditions and the following disclaimer.
26 **   * Redistributions in binary form must reproduce the above copyright
27 **     notice, this list of conditions and the following disclaimer in
28 **     the documentation and/or other materials provided with the
29 **     distribution.
30 **   * Neither the name of The Qt Company Ltd nor the names of its
31 **     contributors may be used to endorse or promote products derived
32 **     from this software without specific prior written permission.
33 **
34 **
35 ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
36 ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
37 ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
38 ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
39 ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
40 ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
41 ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
42 ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
43 ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
44 ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
45 ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
46 **
47 ** $QT_END_LICENSE$
48 **
49 ****************************************************************************/
50 
51 #include "server.h"
52 
53 #include <algorithm>
54 
55 QT_BEGIN_NAMESPACE
56 
57 namespace {
58 
59 QString peer_info(const QHostAddress &address, quint16 port)
60 {
61     const static QString info = QStringLiteral("(%1:%2)");
62     return info.arg(address.toString()).arg(port);
63 }
64 
65 QString connection_info(QSharedPointer<QDtls> connection)
66 {
67     QString info(DtlsServer::tr("Session cipher: "));
68     info += connection->sessionCipher().name();
69 
70     info += DtlsServer::tr("; session protocol: ");
71     switch (connection->sessionProtocol()) {
72     case QSsl::DtlsV1_0:
73         info += QStringLiteral("DTLS 1.0.");
74         break;
75     case QSsl::DtlsV1_2:
76         info += QStringLiteral("DTLS 1.2.");
77         break;
78     case QSsl::DtlsV1_2OrLater:
79         info += QStringLiteral("DTLS 1.2 or later.");
80         break;
81     default:
82         info += QStringLiteral("Unknown protocol.");
83     }
84 
85     return info;
86 }
87 
88 } // unnamed namespace
89 
90 DtlsServer::DtlsServer()
91 {
92     connect(&serverSocket, &QAbstractSocket::readyRead, this, &DtlsServer::readyRead);
93 
94     serverConfiguration.setPreSharedKeyIdentityHint("Qt DTLS example server");
95     serverConfiguration.setPeerVerifyMode(QSslSocket::VerifyNone);
96 }
97 
98 DtlsServer::~DtlsServer()
99 {
100     shutdown();
101 }
102 
103 bool DtlsServer::listen(const QHostAddress &address, quint16 port)
104 {
105     if (address != serverSocket.localAddress() || port != serverSocket.localPort()) {
106         shutdown();
107         listening = serverSocket.bind(address, port);
108         if (!listening)
109             emit errorMessage(serverSocket.errorString());
110     } else {
111         listening = true;
112     }
113 
114     return listening;
115 }
116 
117 bool DtlsServer::isListening() const
118 {
119     return listening;
120 }
121 
122 void DtlsServer::close()
123 {
124     listening = false;
125 }
126 
127 void DtlsServer::readyRead()
128 {
129     const qint64 bytesToRead = serverSocket.pendingDatagramSize();
130     if (bytesToRead <= 0) {
131         emit warningMessage(tr("A spurious read notification"));
132         return;
133     }
134 
135     QByteArray dgram(bytesToRead, Qt::Uninitialized);
136     QHostAddress peerAddress;
137     quint16 peerPort = 0;
138     const qint64 bytesRead = serverSocket.readDatagram(dgram.data(), dgram.size(),
139                                                        &peerAddress, &peerPort);
140     if (bytesRead <= 0) {
141         emit warningMessage(tr("Failed to read a datagram: ") + serverSocket.errorString());
142         return;
143     }
144 
145     dgram.resize(bytesRead);
146 
147     if (peerAddress.isNull() || !peerPort) {
148         emit warningMessage(tr("Failed to extract peer info (address, port)"));
149         return;
150     }
151 
152     const auto client = std::find_if(knownClients.begin(), knownClients.end(),
153                                      [&](const DtlsConnection &connection){
154         return connection->remoteAddress() == peerAddress
155                && connection->remotePort() == peerPort;
156     });
157 
158     if (client == knownClients.end())
159         return handleNewConnection(peerAddress, peerPort, dgram);
160 
161     if ((*client)->connectionEncrypted()) {
162         decryptDatagram(*client, dgram);
163         if ((*client)->dtlsError() == DtlsError::RemoteClosedConnectionError)
164             knownClients.erase(client);
165         return;
166     }
167 
168     doHandshake(*client, dgram);
169 }
170 
171 void DtlsServer::pskRequired(QSslPreSharedKeyAuthenticator *auth)
172 {
173     Q_ASSERT(auth);
174 
175     emit infoMessage(tr("PSK callback, received a client's identity: '%1'")
176                          .arg(QString::fromLatin1(auth->identity())));
177     auth->setPreSharedKey(QByteArrayLiteral("\x1a\x2b\x3c\x4d\x5e\x6f"));
178 }
179 
180 void DtlsServer::handleNewConnection(const QHostAddress &peerAddress,
181                                      quint16 peerPort, const QByteArray &clientHello)
182 {
183     if (!listening)
184         return;
185 
186     const QString peerInfo = peer_info(peerAddress, peerPort);
187     if (cookieSender.verifyClient(&serverSocket, clientHello, peerAddress, peerPort)) {
188         emit infoMessage(peerInfo + tr(": verified, starting a handshake"));
189 
190         DtlsConnection newConnection(new QDtls(QSslSocket::SslServerMode));
191         newConnection->setDtlsConfiguration(serverConfiguration);
192         newConnection->setRemote(peerAddress, peerPort);
193         newConnection->connect(newConnection.data(), &QDtls::pskRequired,
194                                this, &DtlsServer::pskRequired);
195         knownClients.push_back(newConnection);
196         doHandshake(newConnection, clientHello);
197     } else if (cookieSender.dtlsError() != DtlsError::NoError) {
198         emit errorMessage(tr("DTLS error: ") + cookieSender.dtlsErrorString());
199     } else {
200         emit infoMessage(peerInfo + tr(": not verified yet"));
201     }
202 }
203 
204 void DtlsServer::doHandshake(DtlsConnection newConnection, const QByteArray &clientHello)
205 {
206     const bool result = newConnection->doHandshake(&serverSocket, clientHello);
207     if (!result) {
208         emit errorMessage(newConnection->dtlsErrorString());
209         return;
210     }
211 
212     const QString peerInfo = peer_info(newConnection->remoteAddress(),
213                                        newConnection->remotePort());
214     switch (newConnection->handshakeState()) {
215     case QDtls::InProgress:
216         emit infoMessage(peerInfo + tr(": handshake is in progress ..."));
217         break;
218     case QDtls::Complete:
219         emit infoMessage(tr("Connection with %1 encrypted. %2")
220                          .arg(peerInfo, connection_info(newConnection)));
221         break;
222     default:
223         Q_UNREACHABLE();
224     }
225 }
226 
227 void DtlsServer::decryptDatagram(DtlsConnection connection, const QByteArray &clientMessage)
228 {
229     Q_ASSERT(connection->connectionEncrypted());
230 
231     const QString peerInfo = peer_info(connection->remoteAddress(), connection->remotePort());
232     const QByteArray dgram = connection->decryptDatagram(&serverSocket, clientMessage);
233     if (dgram.size()) {
234         emit datagramReceived(peerInfo, clientMessage, dgram);
235         connection->writeDatagramEncrypted(&serverSocket, tr("to %1: ACK").arg(peerInfo).toLatin1());
236     } else if (connection->dtlsError() == DtlsError::NoError) {
237         emit warningMessage(peerInfo + ": " + tr("0 byte dgram, could be a re-connect attempt?"));
238     } else {
239         emit errorMessage(peerInfo + ": " + connection->dtlsErrorString());
240     }
241 }
242 
243 void DtlsServer::shutdown()
244 {
245     for (DtlsConnection &connection : knownClients)
246         connection->sendShutdownAlert(&serverSocket);
247 
248     knownClients.clear();
249     if (serverSocket.state() != QAbstractSocket::UnconnectedState)
250         serverSocket.close();
251 }
252 
253 QT_END_NAMESPACE
