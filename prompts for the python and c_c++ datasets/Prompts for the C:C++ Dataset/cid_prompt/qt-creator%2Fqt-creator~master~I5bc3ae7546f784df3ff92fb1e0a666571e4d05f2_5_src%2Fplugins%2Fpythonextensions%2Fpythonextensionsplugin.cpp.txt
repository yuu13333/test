Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 #include "pythonextensionsplugin.h"
2 #include "pythonextensionsconstants.h"
3 
4 #include "pyutil.h"
5 
6 #include <coreplugin/icore.h>
7 #include <coreplugin/icontext.h>
8 #include <coreplugin/actionmanager/actionmanager.h>
9 #include <coreplugin/actionmanager/command.h>
10 #include <coreplugin/actionmanager/actioncontainer.h>
11 #include <coreplugin/coreconstants.h>
12 
13 #include <extensionsystem/pluginmanager.h>
14 
15 #include <QDir>
16 #include <QIODevice>
17 #include <QFile>
18 #include <QDir>
19 #include <QTextStream>
20 #include <QString>
21 #include <QStringList>
22 
23 
24 namespace PythonExtensions {
25 namespace Internal {
26 
27 PythonExtensionsPlugin::PythonExtensionsPlugin()
28 {
29     // Create your members
30 }
31 
32 PythonExtensionsPlugin::~PythonExtensionsPlugin()
33 {
34     // Unregister objects from the plugin manager's object pool
35     // Delete members
36 }
37 
38 bool PythonExtensionsPlugin::initialize(const QStringList &arguments, QString *errorString)
39 {
40     // Register objects in the plugin manager's object pool
41     // Load settings
42     // Add actions to menus
43     // Connect to other plugins' signals
44     // In the initialize function, a plugin can be sure that the plugins it
45     // depends on have initialized their members.
46 
47     Q_UNUSED(arguments)
48     Q_UNUSED(errorString)
49 
50     this->initializePythonBindings();
51 
52     // Python extensions are loaded after C++ plugins for now (plan: later flag can be set)
53 
54     return true;
55 }
56 
57 void PythonExtensionsPlugin::extensionsInitialized()
58 {
59     // Retrieve objects from the plugin manager's object pool
60     // In the extensionsInitialized function, a plugin can be sure that all
61     // plugins that depend on it are completely initialized.
62     // this->initializePythonPlugins();
63 }
64 
65 bool PythonExtensionsPlugin::delayedInitialize() {
66     // Python plugins are initialized here, to avoid blocking on startup
67     this->initializePythonExtensions();
68     return true;
69 }
70 
71 ExtensionSystem::IPlugin::ShutdownFlag PythonExtensionsPlugin::aboutToShutdown()
72 {
73     // Save settings
74     // Disconnect from signals that are not needed during shutdown
75     // Hide UI (if you add UI that is not in the main window directly)
76     return SynchronousShutdown;
77 }
78 
79 void PythonExtensionsPlugin::initializePythonBindings()
80 {
81     // Initialize the Python context and register global variables
82 
83     // Core namespace / module
84     // TODO: Make this more modular (have macros for the names)
85 
86     // QtCreator module
87     PyUtil::createModule("QtCreator");
88     // QtCreator.Core
89     PyUtil::createModule("QtCreator.Core");
90     PyUtil::bindObject("QtCreator.Core",
91         "ActionManager", PyUtil::CoreActionManager, Core::ActionManager::instance());
92     PyUtil::bindObject("QtCreator.Core",
93         "ICore", PyUtil::CoreICore, Core::ICore::instance());
94     // QtCreator.Core.Constants (TODO: Find better way to expose than this...)
95     //                          (NOTE: One can simply use the strings directly from Python)
96     PyUtil::createModule("QtCreator.Core.Constants");
97     PyUtil::bindObject("QtCreator.Core.Constants",
98         "M_FILE", PyUtil::CoreId, new Core::Id(Core::Constants::M_FILE));
99     PyUtil::bindObject("QtCreator.Core.Constants",
100         "M_FILE_RECENTFILES", PyUtil::CoreId, new Core::Id(Core::Constants::M_FILE_RECENTFILES));
101     PyUtil::bindObject("QtCreator.Core.Constants",
102         "M_EDIT", PyUtil::CoreId, new Core::Id(Core::Constants::M_EDIT));
103     PyUtil::bindObject("QtCreator.Core.Constants",
104         "M_EDIT_ADVANCED", PyUtil::CoreId, new Core::Id(Core::Constants::M_EDIT_ADVANCED));
105     PyUtil::bindObject("QtCreator.Core.Constants",
106         "M_TOOLS", PyUtil::CoreId, new Core::Id(Core::Constants::M_TOOLS));
107     PyUtil::bindObject("QtCreator.Core.Constants",
108         "M_TOOLS_EXTERNAL", PyUtil::CoreId, new Core::Id(Core::Constants::M_TOOLS_EXTERNAL));
109     PyUtil::bindObject("QtCreator.Core.Constants",
110         "M_WINDOW", PyUtil::CoreId, new Core::Id(Core::Constants::M_WINDOW));
111     PyUtil::bindObject("QtCreator.Core.Constants",
112         "M_WINDOW_PANES", PyUtil::CoreId, new Core::Id(Core::Constants::M_WINDOW_PANES));
113     PyUtil::bindObject("QtCreator.Core.Constants",
114         "M_WINDOW_MODESTYLES", PyUtil::CoreId, new Core::Id(Core::Constants::M_WINDOW_MODESTYLES));
115     PyUtil::bindObject("QtCreator.Core.Constants",
116         "M_WINDOW_VIEWS", PyUtil::CoreId, new Core::Id(Core::Constants::M_WINDOW_VIEWS));
117     PyUtil::bindObject("QtCreator.Core.Constants",
118         "M_HELP", PyUtil::CoreId, new Core::Id(Core::Constants::M_HELP));
119 }
120 
121 void PythonExtensionsPlugin::initializePythonExtensions()
122 {
123     // Search python directory in plugin paths
124     QDir *extension_dir;
125     for (int i = 0; i < ExtensionSystem::PluginManager::pluginPaths().size(); i++) {
126         extension_dir = new QDir(ExtensionSystem::PluginManager::pluginPaths()[i] + PythonExtensions::Constants::EXTENSIONS_DIR);
127         if (extension_dir->exists()) {
128             qDebug() << "Found Python extension directory at location" << extension_dir->absolutePath();
129             break;
130         }
131     }
132 
133     if (!extension_dir->exists()) {
134         qWarning() << "Python extension directory not found";
135         delete extension_dir;
136         return;
137     }
138 
139     QStringList extension_names = extension_dir->entryList(QDir::AllDirs);
140 
141     // FIXME: Do other systems include exactly two 'special' files? (i.e. ./ and ../)
142     qDebug() << "Number of Python extensions found:" << (extension_names.size()-2);
143     int loaded = 0;
144 
145     // Run the extension initialization code
146     for (int i = 0; i < extension_names.size(); i ++) {
147         if (extension_names.at(i) == ".." || extension_names.at(i) == ".") {
148             // FIXME: Do similar things exist in Windows?
149             continue;
150         }
151 
152         qDebug() << "Trying to initialize extension" << extension_names.at(i);
153 
154         QFile extension_main(extension_dir->absolutePath() + (QString)"/" + extension_names.at(i) + (QString)"/main.py");
155         if (extension_main.open(QIODevice::ReadOnly)) {
156             QTextStream in(&extension_main);
157             QString extension_code = in.readAll();
158             if (!PyUtil::runScript(extension_code.toStdString())) {
159                 qWarning() << "Failed to initialize extension" << extension_names.at(i);
160             } else {
161                 loaded ++;
162             }
163         } else {
164             qWarning() << "Failed to load main.py for extension" << extension_names.at(i);
165         }
166     }
167 
168     qDebug() << "Number of Python extensions loaded:" << loaded;
169     delete extension_dir;
170 }
171 
172 } // namespace Internal
173 } // namespace PythonExtensions
