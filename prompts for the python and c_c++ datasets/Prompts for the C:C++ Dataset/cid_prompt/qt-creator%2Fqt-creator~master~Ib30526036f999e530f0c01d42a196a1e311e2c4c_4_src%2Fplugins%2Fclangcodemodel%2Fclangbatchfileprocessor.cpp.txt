Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2017 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "clangbatchfileprocessor.h"
27 
28 #include "clangautomationutils.h"
29 
30 #include <clangcodemodel/clangeditordocumentprocessor.h>
31 
32 #include <coreplugin/editormanager/editormanager.h>
33 #include <coreplugin/editormanager/ieditor.h>
34 #include <coreplugin/icore.h>
35 #include <cpptools/cpptoolsreuse.h>
36 #include <cpptools/cpptoolstestcase.h>
37 #include <cpptools/modelmanagertesthelper.h>
38 #include <cpptools/projectinfo.h>
39 #include <projectexplorer/projectexplorer.h>
40 #include <texteditor/codeassist/assistinterface.h>
41 #include <texteditor/codeassist/assistproposalitem.h>
42 #include <texteditor/codeassist/completionassistprovider.h>
43 #include <texteditor/codeassist/genericproposalmodel.h>
44 #include <texteditor/codeassist/iassistprocessor.h>
45 #include <texteditor/codeassist/iassistproposal.h>
46 #include <texteditor/textdocument.h>
47 #include <texteditor/texteditor.h>
48 
49 #include <utils/executeondestruction.h>
50 #include <utils/qtcassert.h>
51 
52 #include <QDebug>
53 #include <QFileInfo>
54 #include <QLoggingCategory>
55 #include <QSharedPointer>
56 #include <QString>
57 #include <QtTest>
58 
59 using namespace ClangBackEnd;
60 using namespace ClangCodeModel;
61 using namespace ClangCodeModel::Internal;
62 using namespace ProjectExplorer;
63 
64 static Q_LOGGING_CATEGORY(debug, "qtc.clangcodemodel.batch");
65 
66 static int timeOutFromEnvironmentVariable()
67 {
68     const QByteArray timeoutAsByteArray = qgetenv("QTC_CLANG_BATCH_TIMEOUT");
69 
70     bool isConversionOk = false;
71     const int intervalAsInt = timeoutAsByteArray.toInt(&isConversionOk);
72     if (!isConversionOk) {
73         qCDebug(debug, "Environment variable QTC_CLANG_BATCH_TIMEOUT is not set, assuming 30000.");
74         return 30000;
75     }
76 
77     return intervalAsInt;
78 }
79 
80 static int timeOutInMs()
81 {
82     static int timeOut = timeOutFromEnvironmentVariable();
83     return timeOut;
84 }
85 
86 namespace {
87 
88 class BatchFileLineTokenizer
89 {
90 public:
91     BatchFileLineTokenizer(const QString &line);
92 
93     QString nextToken();
94 
95 private:
96     const QChar *advanceToTokenBegin();
97     const QChar *advanceToTokenEnd();
98 
99     bool atEnd() const;
100     bool atWhiteSpace() const;
101     bool atQuotationMark() const;
102 
103 private:
104     bool m_isWithinQuotation = false;
105     QString m_line;
106     const QChar *m_currentChar;
107 };
108 
109 BatchFileLineTokenizer::BatchFileLineTokenizer(const QString &line)
110     : m_line(line)
111     , m_currentChar(m_line.unicode())
112 {
113 }
114 
115 QString BatchFileLineTokenizer::nextToken()
116 {
117     if (const QChar *tokenBegin = advanceToTokenBegin()) {
118         if (const QChar *tokenEnd = advanceToTokenEnd()) {
119             const int length = tokenEnd - tokenBegin;
120             return QString(tokenBegin, length);
121         }
122     }
123 
124     return QString();
125 }
126 
127 const QChar *BatchFileLineTokenizer::advanceToTokenBegin()
128 {
129     m_isWithinQuotation = false;
130 
131     forever {
132         if (atEnd())
133             return 0;
134 
135         if (atQuotationMark()) {
136             m_isWithinQuotation = true;
137             ++m_currentChar;
138             return m_currentChar;
139         }
140 
141         if (!atWhiteSpace())
142             return m_currentChar;
143 
144         ++m_currentChar;
145     }
146 }
147 
148 const QChar *BatchFileLineTokenizer::advanceToTokenEnd()
149 {
150     forever {
151         if (m_isWithinQuotation) {
152             if (atEnd()) {
153                 qWarning("ClangBatchFileProcessor: error: unfinished quotation.");
154                 return 0;
155             }
156 
157             if (atQuotationMark())
158                 return m_currentChar++;
159 
160         } else if (atWhiteSpace() || atEnd()) {
161             return m_currentChar;
162         }
163 
164         ++m_currentChar;
165     }
166 }
167 
168 bool BatchFileLineTokenizer::atEnd() const
169 {
170     return *m_currentChar == '\0';
171 }
172 
173 bool BatchFileLineTokenizer::atWhiteSpace() const
174 {
175     return *m_currentChar == ' '
176         || *m_currentChar == '\t'
177         || *m_currentChar == '\n';
178 }
179 
180 bool BatchFileLineTokenizer::atQuotationMark() const
181 {
182     return *m_currentChar == '"';
183 }
184 
185 struct CommandContext {
186     QString filePath;
187     int lineNumber = -1;
188 };
189 
190 class Command
191 {
192 public:
193     using Ptr = QSharedPointer<Command>;
194 
195 public:
196     Command(const CommandContext &context) : m_commandContext(context) {}
197     virtual ~Command() {}
198 
199     const CommandContext &context() const { return m_commandContext; }
200     virtual bool run() { return true; }
201 
202 private:
203     const CommandContext m_commandContext;
204 };
205 
206 class OpenProjectCommand : public Command
207 {
208 public:
209     OpenProjectCommand(const CommandContext &context,
210                        const QString &projectFilePath);
211 
212     bool run() override;
213 
214     static Command::Ptr parse(BatchFileLineTokenizer &arguments,
215                               const CommandContext &context);
216 
217 private:
218     QString m_projectFilePath;
219 };
220 
221 OpenProjectCommand::OpenProjectCommand(const CommandContext &context,
222                                        const QString &projectFilePath)
223     : Command(context)
224     , m_projectFilePath(projectFilePath)
225 {
226 }
227 
228 bool OpenProjectCommand::run()
229 {
230     qCDebug(debug) << "line" << context().lineNumber << "OpenProjectCommand" << m_projectFilePath;
231 
232     const ProjectExplorerPlugin::OpenProjectResult openProjectSucceeded
233             = ProjectExplorerPlugin::openProject(m_projectFilePath);
234     QTC_ASSERT(openProjectSucceeded, return false);
235 
236     Project *project = openProjectSucceeded.project();
237     project->configureAsExampleProject({});
238 
239     return CppTools::Tests::TestCase::waitUntilCppModelManagerIsAwareOf(project, timeOutInMs());
240 }
241 
242 Command::Ptr OpenProjectCommand::parse(BatchFileLineTokenizer &arguments,
243                                        const CommandContext &context)
244 {
245     const QString projectFilePath = arguments.nextToken();
246     if (projectFilePath.isEmpty()) {
247         qWarning("%s:%d: error: No project file path given.",
248                   qPrintable(context.filePath),
249                   context.lineNumber);
250         return Command::Ptr();
251     }
252 
253     const QString absoluteProjectFilePath = QFileInfo(projectFilePath).absoluteFilePath();
254 
255     return Command::Ptr(new OpenProjectCommand(context, absoluteProjectFilePath));
256 }
257 
258 class OpenDocumentCommand : public Command
259 {
260 public:
261     OpenDocumentCommand(const CommandContext &context,
262                         const QString &documentFilePath);
263 
264     bool run() override;
265 
266     static Command::Ptr parse(BatchFileLineTokenizer &arguments, const CommandContext &context);
267 
268 private:
269     QString m_documentFilePath;
270 };
271 
272 OpenDocumentCommand::OpenDocumentCommand(const CommandContext &context,
273                                          const QString &documentFilePath)
274     : Command(context)
275     , m_documentFilePath(documentFilePath)
276 {
277 }
278 
279 class WaitForUpdatedCodeWarnings : public QObject
280 {
281     Q_OBJECT
282 
283 public:
284     WaitForUpdatedCodeWarnings(ClangEditorDocumentProcessor *processor);
285 
286     bool wait(int timeOutInMs) const;
287 
288 private:
289     void onCodeWarningsUpdated() { m_gotResults = true; }
290 
291 private:
292 
293     bool m_gotResults = false;
294 };
295 
296 WaitForUpdatedCodeWarnings::WaitForUpdatedCodeWarnings(ClangEditorDocumentProcessor *processor)
297 {
298     connect(processor,
299             &ClangEditorDocumentProcessor::codeWarningsUpdated,
300             this, &WaitForUpdatedCodeWarnings::onCodeWarningsUpdated);
301 }
302 
303 bool WaitForUpdatedCodeWarnings::wait(int timeOutInMs) const
304 {
305     QTime time;
306     time.start();
307 
308     forever {
309         if (time.elapsed() > timeOutInMs) {
310             qWarning("WaitForUpdatedCodeWarnings: timeout of %d ms reached.", timeOutInMs);
311             return false;
312         }
313 
314         if (m_gotResults)
315             return true;
316 
317         QCoreApplication::processEvents();
318         QThread::msleep(20);
319     }
320 }
321 
322 bool OpenDocumentCommand::run()
323 {
324     qCDebug(debug) << "line" << context().lineNumber << "OpenDocumentCommand" << m_documentFilePath;
325 
326     const bool openEditorSucceeded = Core::EditorManager::openEditor(m_documentFilePath);
327     QTC_ASSERT(openEditorSucceeded, return false);
328 
329     auto *processor = ClangEditorDocumentProcessor::get(m_documentFilePath);
330     QTC_ASSERT(processor, return false);
331 
332     WaitForUpdatedCodeWarnings waiter(processor);
333     return waiter.wait(timeOutInMs());
334 }
335 
336 Command::Ptr OpenDocumentCommand::parse(BatchFileLineTokenizer &arguments,
337                                         const CommandContext &context)
338 {
339     const QString documentFilePath = arguments.nextToken();
340     if (documentFilePath.isEmpty()) {
341         qWarning("%s:%d: error: No document file path given.",
342                   qPrintable(context.filePath),
343                   context.lineNumber);
344         return Command::Ptr();
345     }
346 
347     const QString absoluteDocumentFilePath = QFileInfo(documentFilePath).absoluteFilePath();
348 
349     return Command::Ptr(new OpenDocumentCommand(context, absoluteDocumentFilePath));
350 }
351 
352 class CloseAllDocuments : public Command
353 {
354 public:
355     CloseAllDocuments(const CommandContext &context);
356 
357     bool run() override;
358 
359     static Command::Ptr parse(BatchFileLineTokenizer &arguments, const CommandContext &context);
360 };
361 
362 CloseAllDocuments::CloseAllDocuments(const CommandContext &context)
363     : Command(context)
364 {
365 }
366 
367 bool CloseAllDocuments::run()
368 {
369     qCDebug(debug) << "line" << context().lineNumber << "CloseAllDocuments";
370 
371     return Core::EditorManager::closeAllEditors(/*askAboutModifiedEditors=*/ false);
372 }
373 
374 Command::Ptr CloseAllDocuments::parse(BatchFileLineTokenizer &arguments,
375                                       const CommandContext &context)
376 {
377     const QString argument = arguments.nextToken();
378     if (!argument.isEmpty()) {
379         qWarning("%s:%d: error: Unexpected argument.",
380                  qPrintable(context.filePath),
381                  context.lineNumber);
382         return Command::Ptr();
383     }
384 
385     return Command::Ptr(new CloseAllDocuments(context));
386 }
387 
388 class InsertTextCommand : public Command
389 {
390 public:
391     // line and column are 1-based
392     InsertTextCommand(const CommandContext &context, const QString &text);
393 
394     bool run() override;
395 
396     static Command::Ptr parse(BatchFileLineTokenizer &arguments,
397                               const CommandContext &context);
398 
399 private:
400     const QString m_textToInsert;
401 };
402 
403 InsertTextCommand::InsertTextCommand(const CommandContext &context, const QString &text)
404     : Command(context)
405     , m_textToInsert(text)
406 {
407 }
408 
409 TextEditor::BaseTextEditor *currentTextEditor()
410 {
411     return qobject_cast<TextEditor::BaseTextEditor*>(Core::EditorManager::currentEditor());
412 }
413 
414 bool InsertTextCommand::run()
415 {
416     qCDebug(debug) << "line" << context().lineNumber << "InsertTextCommand" << m_textToInsert;
417 
418     const QString documentFilePath = currentTextEditor()->document()->filePath().toString();
419     auto *processor = ClangEditorDocumentProcessor::get(documentFilePath);
420     QTC_ASSERT(processor, return false);
421 
422     TextEditor::BaseTextEditor *editor = currentTextEditor();
423     QTC_ASSERT(editor, return false);
424     editor->insert(m_textToInsert);
425 
426     WaitForUpdatedCodeWarnings waiter(processor);
427     return waiter.wait(timeOutInMs());
428 }
429 
430 Command::Ptr InsertTextCommand::parse(BatchFileLineTokenizer &arguments,
431                                       const CommandContext &context)
432 {
433     const QString textToInsert = arguments.nextToken();
434     if (textToInsert.isEmpty()) {
435         qWarning("%s:%d: error: No text to insert given.",
436                   qPrintable(context.filePath),
437                   context.lineNumber);
438         return Command::Ptr();
439     }
440 
441     return Command::Ptr(new InsertTextCommand(context, textToInsert));
442 }
443 
444 class CompleteCommand : public Command
445 {
446 public:
447     CompleteCommand(const CommandContext &context);
448 
449     bool run() override;
450 
451     static Command::Ptr parse(BatchFileLineTokenizer &arguments,
452                               const CommandContext &context);
453 };
454 
455 CompleteCommand::CompleteCommand(const CommandContext &context)
456     : Command(context)
457 {
458 }
459 
460 bool CompleteCommand::run()
461 {
462     qCDebug(debug) << "line" << context().lineNumber << "CompleteCommand";
463 
464     const QString documentFilePath = currentTextEditor()->document()->filePath().toString();
465     auto *processor = ClangEditorDocumentProcessor::get(documentFilePath);
466     QTC_ASSERT(processor, return false);
467 
468     TextEditor::BaseTextEditor *editor = currentTextEditor();
469     QTC_ASSERT(editor, return false);
470 
471     return completionResults(editor, QStringList(), timeOutInMs());
472 }
473 
474 Command::Ptr CompleteCommand::parse(BatchFileLineTokenizer &arguments,
475                                     const CommandContext &context)
476 {
477     Q_UNUSED(arguments)
478     Q_UNUSED(context)
479 
480     return Command::Ptr(new CompleteCommand(context));
481 }
482 
483 class SetCursorCommand : public Command
484 {
485 public:
486     // line and column are 1-based
487     SetCursorCommand(const CommandContext &context, int line, int column);
488 
489     bool run() override;
490 
491     static Command::Ptr parse(BatchFileLineTokenizer &arguments,
492                               const CommandContext &context);
493 
494 private:
495     int m_line;
496     int m_column;
497 };
498 
499 SetCursorCommand::SetCursorCommand(const CommandContext &context, int line, int column)
500     : Command(context)
501     , m_line(line)
502     , m_column(column)
503 {
504 }
505 
506 bool SetCursorCommand::run()
507 {
508     qCDebug(debug) << "line" << context().lineNumber << "SetCursorCommand" << m_line << m_column;
509 
510     TextEditor::BaseTextEditor *editor = currentTextEditor();
511     QTC_ASSERT(editor, return false);
512 
513     editor->gotoLine(m_line, m_column - 1);
514 
515     return true;
516 }
517 
518 Command::Ptr SetCursorCommand::parse(BatchFileLineTokenizer &arguments,
519                                      const CommandContext &context)
520 {
521     // Process line
522     const QString line = arguments.nextToken();
523     if (line.isEmpty()) {
524         qWarning("%s:%d: error: No line number given.",
525                   qPrintable(context.filePath),
526                   context.lineNumber);
527         return Command::Ptr();
528     }
529     bool converted = false;
530     const int lineNumber = line.toInt(&converted);
531     if (!converted) {
532         qWarning("%s:%d: error: Invalid line number.",
533                   qPrintable(context.filePath),
534                   context.lineNumber);
535         return Command::Ptr();
536     }
537 
538     // Process column
539     const QString column = arguments.nextToken();
540     if (column.isEmpty()) {
541         qWarning("%s:%d: error: No column number given.",
542                   qPrintable(context.filePath),
543                   context.lineNumber);
544         return Command::Ptr();
545     }
546     converted = false;
547     const int columnNumber = column.toInt(&converted);
548     if (!converted) {
549         qWarning("%s:%d: error: Invalid column number.",
550                   qPrintable(context.filePath),
551                   context.lineNumber);
552         return Command::Ptr();
553     }
554 
555     return Command::Ptr(new SetCursorCommand(context, lineNumber, columnNumber));
556 }
557 
558 class ProcessEventsCommand : public Command
559 {
560 public:
561     ProcessEventsCommand(const CommandContext &context, int durationInMs);
562 
563     bool run() override;
564 
565     static Command::Ptr parse(BatchFileLineTokenizer &arguments,
566                               const CommandContext &context);
567 
568 private:
569     int m_durationInMs;
570 };
571 
572 ProcessEventsCommand::ProcessEventsCommand(const CommandContext &context,
573                                            int durationInMs)
574     : Command(context)
575     , m_durationInMs(durationInMs)
576 {
577 }
578 
579 bool ProcessEventsCommand::run()
580 {
581     qCDebug(debug) << "line" << context().lineNumber << "ProcessEventsCommand" << m_durationInMs;
582 
583     QTime time;
584     time.start();
585 
586     forever {
587         if (time.elapsed() > m_durationInMs)
588             return true;
589 
590         QCoreApplication::processEvents();
591         QThread::msleep(20);
592     }
593 }
594 
595 Command::Ptr ProcessEventsCommand::parse(BatchFileLineTokenizer &arguments,
596                                          const CommandContext &context)
597 {
598     const QString durationInMsText = arguments.nextToken();
599     if (durationInMsText.isEmpty()) {
600         qWarning("%s:%d: error: No duration given.",
601                  qPrintable(context.filePath),
602                  context.lineNumber);
603         return Command::Ptr();
604     }
605 
606     bool converted = false;
607     const int durationInMs = durationInMsText.toInt(&converted);
608     if (!converted) {
609         qWarning("%s:%d: error: Invalid duration given.",
610                  qPrintable(context.filePath),
611                  context.lineNumber);
612         return Command::Ptr();
613     }
614 
615     return Command::Ptr(new ProcessEventsCommand(context, durationInMs));
616 }
617 
618 class BatchFileReader
619 {
620 public:
621     BatchFileReader(const QString &filePath);
622 
623     bool isFilePathValid() const;
624 
625     QString read() const;
626 
627 private:
628     const QString m_batchFilePath;
629 };
630 
631 BatchFileReader::BatchFileReader(const QString &filePath)
632     : m_batchFilePath(filePath)
633 {
634 }
635 
636 bool BatchFileReader::isFilePathValid() const
637 {
638     QFileInfo fileInfo(m_batchFilePath);
639 
640     return !m_batchFilePath.isEmpty()
641         && fileInfo.isFile()
642         && fileInfo.isReadable();
643 }
644 
645 QString BatchFileReader::read() const
646 {
647     QFile file(m_batchFilePath);
648     QTC_CHECK(file.open(QFile::ReadOnly | QFile::Text));
649 
650     return QString::fromLocal8Bit(file.readAll());
651 }
652 
653 class BatchFileParser
654 {
655 public:
656     BatchFileParser(const QString &filePath,
657                     const QString &commands);
658 
659     bool parse();
660     QVector<Command::Ptr> commands() const;
661 
662 private:
663     bool advanceLine();
664     QString currentLine() const;
665     bool parseLine(const QString &line);
666 
667 private:
668     using ParseFunction = Command::Ptr (*)(BatchFileLineTokenizer &, const CommandContext &);
669     using CommandToParseFunction = QHash<QString, ParseFunction>;
670     CommandToParseFunction m_commandParsers;
671 
672     int m_currentLineIndex = -1;
673     CommandContext m_context;
674     QStringList m_lines;
675     QVector<Command::Ptr> m_commands;
676 };
677 
678 BatchFileParser::BatchFileParser(const QString &filePath,
679                                  const QString &commands)
680     : m_lines(commands.split('\n'))
681 {
682     m_context.filePath = filePath;
683 
684     m_commandParsers.insert("openProject", &OpenProjectCommand::parse);
685     m_commandParsers.insert("openDocument", &OpenDocumentCommand::parse);
686     m_commandParsers.insert("closeAllDocuments", &CloseAllDocuments::parse);
687     m_commandParsers.insert("setCursor", &SetCursorCommand::parse);
688     m_commandParsers.insert("insertText", &InsertTextCommand::parse);
689     m_commandParsers.insert("complete", &CompleteCommand::parse);
690     m_commandParsers.insert("processEvents", &ProcessEventsCommand::parse);
691 }
692 
693 bool BatchFileParser::parse()
694 {
695     while (advanceLine()) {
696         const QString line = currentLine().trimmed();
697         if (line.isEmpty() || line.startsWith('#'))
698             continue;
699 
700         if (!parseLine(line))
701             return false;
702     }
703 
704     return true;
705 }
706 
707 QVector<Command::Ptr> BatchFileParser::commands() const
708 {
709     return m_commands;
710 }
711 
712 bool BatchFileParser::advanceLine()
713 {
714     if (m_currentLineIndex == -1) {
715         m_currentLineIndex = 0;
716         m_context.lineNumber = 1;
717         return true;
718     }
719 
720     const bool nextIsValid = m_currentLineIndex + 1 < m_lines.size();
721     if (nextIsValid) {
722         ++m_currentLineIndex;
723         m_context.lineNumber = m_currentLineIndex + 1;
724         return true;
725     }
726 
727     return false;
728 }
729 
730 QString BatchFileParser::currentLine() const
731 {
732     return m_lines[m_currentLineIndex];
733 }
734 
735 bool BatchFileParser::parseLine(const QString &line)
736 {
737     BatchFileLineTokenizer tokenizer(line);
738     QString command = tokenizer.nextToken();
739     QTC_CHECK(!command.isEmpty());
740 
741     if (const ParseFunction parseFunction = m_commandParsers.value(command)) {
742         if (Command::Ptr cmd = parseFunction(tokenizer, m_context)) {
743             m_commands.append(cmd);
744             return true;
745         }
746 
747         return false;
748     }
749 
750     qWarning("%s:%d: error: Unknown command \"%s\".",
751              qPrintable(m_context.filePath),
752              m_context.lineNumber,
753              qPrintable(command));
754 
755     return false;
756 }
757 
758 } // anonymous namespace
759 
760 namespace ClangCodeModel {
761 namespace Internal {
762 
763 static QString applySubstitutions(const QString &filePath, const QString &text)
764 {
765     const QString dirPath = QFileInfo(filePath).absolutePath();
766 
767     QString result = text;
768     result.replace("${PWD}", dirPath);
769 
770     return result;
771 }
772 
773 bool ClangBatchFileProcessor::run(const QString &filePath)
774 {
775     qWarning("ClangBatchFileProcessor: Running \"%s\".", qPrintable(filePath));
776 
777     BatchFileReader reader(filePath);
778     QTC_ASSERT(reader.isFilePathValid(), return false);
779     const QString fileContent = reader.read();
780     const QString fileContentWithSubstitutionsApplied = applySubstitutions(filePath, fileContent);
781 
782     BatchFileParser parser(filePath, fileContentWithSubstitutionsApplied);
783     QTC_ASSERT(parser.parse(), return false);
784     const QVector<Command::Ptr> commands = parser.commands();
785 
786     Utils::ExecuteOnDestruction closeAllEditors([](){
787         qWarning("ClangBatchFileProcessor: Finished, closing all documents.");
788         QTC_CHECK(Core::EditorManager::closeAllEditors(/*askAboutModifiedEditors=*/ false));
789     });
790 
791     foreach (const Command::Ptr &command, commands) {
792         const bool runSucceeded = command->run();
793         QCoreApplication::processEvents(); // Update GUI
794 
795         if (!runSucceeded) {
796             const CommandContext context = command->context();
797             qWarning("%s:%d: Failed to run.",
798                      qPrintable(context.filePath),
799                      context.lineNumber);
800             return false;
801         }
802     }
803 
804     return true;
805 }
806 
807 } // namespace Internal
808 } // namespace ClangCodeModel
809 
810 #include "clangbatchfileprocessor.moc"
