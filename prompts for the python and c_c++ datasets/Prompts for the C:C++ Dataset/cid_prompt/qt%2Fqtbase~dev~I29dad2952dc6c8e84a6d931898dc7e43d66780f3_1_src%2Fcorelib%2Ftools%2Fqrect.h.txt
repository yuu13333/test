Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2020 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #ifndef QRECT_H
41 #define QRECT_H
42 
43 #include <QtCore/qhashfunctions.h>
44 #include <QtCore/qmargins.h>
45 #include <QtCore/qsize.h>
46 #include <QtCore/qpoint.h>
47 
48 #ifdef topLeft
49 #error qrect.h must be included before any header file that defines topLeft
50 #endif
51 
52 #if defined(Q_OS_DARWIN) || defined(Q_QDOC)
53 struct CGRect;
54 #endif
55 
56 QT_BEGIN_NAMESPACE
57 
58 class Q_CORE_EXPORT QRect
59 {
60 public:
61     Q_DECL_CONSTEXPR QRect() noexcept : x1(0), y1(0), x2(), y2(0) {}
62     Q_DECL_CONSTEXPR QRect(const QPoint &topleft, const QPoint &bottomright) noexcept;
63     Q_DECL_CONSTEXPR QRect(const QPoint &topleft, const QSize &size) noexcept;
64     Q_DECL_CONSTEXPR QRect(int left, int top, int width, int height) noexcept;
65 
66     Q_DECL_CONSTEXPR inline bool isNull() const noexcept;
67     Q_DECL_CONSTEXPR inline bool isEmpty() const noexcept;
68     Q_DECL_CONSTEXPR inline bool isValid() const noexcept;
69 
70     Q_DECL_CONSTEXPR inline int left() const noexcept;
71     Q_DECL_CONSTEXPR inline int top() const noexcept;
72     Q_DECL_CONSTEXPR inline int right() const noexcept;
73     Q_DECL_CONSTEXPR inline int bottom() const noexcept;
74     Q_REQUIRED_RESULT QRect normalized() const noexcept;
75 
76     Q_DECL_CONSTEXPR inline int x() const noexcept;
77     Q_DECL_CONSTEXPR inline int y() const noexcept;
78     Q_DECL_RELAXED_CONSTEXPR inline void setLeft(int pos) noexcept;
79     Q_DECL_RELAXED_CONSTEXPR inline void setTop(int pos) noexcept;
80     Q_DECL_RELAXED_CONSTEXPR inline void setRight(int pos) noexcept;
81     Q_DECL_RELAXED_CONSTEXPR inline void setBottom(int pos) noexcept;
82     Q_DECL_RELAXED_CONSTEXPR inline void setX(int x) noexcept;
83     Q_DECL_RELAXED_CONSTEXPR inline void setY(int y) noexcept;
84 
85     Q_DECL_RELAXED_CONSTEXPR inline void setTopLeft(const QPoint &p) noexcept;
86     Q_DECL_RELAXED_CONSTEXPR inline void setBottomRight(const QPoint &p) noexcept;
87     Q_DECL_RELAXED_CONSTEXPR inline void setTopRight(const QPoint &p) noexcept;
88     Q_DECL_RELAXED_CONSTEXPR inline void setBottomLeft(const QPoint &p) noexcept;
89 
90     Q_DECL_CONSTEXPR inline QPoint topLeft() const noexcept;
91     Q_DECL_CONSTEXPR inline QPoint bottomRight() const noexcept;
92     Q_DECL_CONSTEXPR inline QPoint topRight() const noexcept;
93     Q_DECL_CONSTEXPR inline QPoint bottomLeft() const noexcept;
94     Q_DECL_CONSTEXPR inline QPoint center() const noexcept;
95 
96     Q_DECL_RELAXED_CONSTEXPR inline void moveLeft(int pos) noexcept;
97     Q_DECL_RELAXED_CONSTEXPR inline void moveTop(int pos) noexcept;
98     Q_DECL_RELAXED_CONSTEXPR inline void moveRight(int pos) noexcept;
99     Q_DECL_RELAXED_CONSTEXPR inline void moveBottom(int pos) noexcept;
100     Q_DECL_RELAXED_CONSTEXPR inline void moveTopLeft(const QPoint &p) noexcept;
101     Q_DECL_RELAXED_CONSTEXPR inline void moveBottomRight(const QPoint &p) noexcept;
102     Q_DECL_RELAXED_CONSTEXPR inline void moveTopRight(const QPoint &p) noexcept;
103     Q_DECL_RELAXED_CONSTEXPR inline void moveBottomLeft(const QPoint &p) noexcept;
104     Q_DECL_RELAXED_CONSTEXPR inline void moveCenter(const QPoint &p) noexcept;
105 
106     Q_DECL_RELAXED_CONSTEXPR inline void translate(int dx, int dy) noexcept;
107     Q_DECL_RELAXED_CONSTEXPR inline void translate(const QPoint &p) noexcept;
108     Q_REQUIRED_RESULT Q_DECL_CONSTEXPR inline QRect translated(int dx, int dy) const noexcept;
109     Q_REQUIRED_RESULT Q_DECL_CONSTEXPR inline QRect translated(const QPoint &p) const noexcept;
110     Q_REQUIRED_RESULT Q_DECL_CONSTEXPR inline QRect transposed() const noexcept;
111 
112     Q_DECL_RELAXED_CONSTEXPR inline void moveTo(int x, int t) noexcept;
113     Q_DECL_RELAXED_CONSTEXPR inline void moveTo(const QPoint &p) noexcept;
114 
115     Q_DECL_RELAXED_CONSTEXPR inline void setRect(int x, int y, int w, int h) noexcept;
116     Q_DECL_RELAXED_CONSTEXPR inline void getRect(int *x, int *y, int *w, int *h) const;
117 
118     Q_DECL_RELAXED_CONSTEXPR inline void setCoords(int x1, int y1, int x2, int y2) noexcept;
119     Q_DECL_RELAXED_CONSTEXPR inline void getCoords(int *x1, int *y1, int *x2, int *y2) const;
120 
121     Q_DECL_RELAXED_CONSTEXPR inline void adjust(int x1, int y1, int x2, int y2) noexcept;
122     Q_REQUIRED_RESULT Q_DECL_CONSTEXPR inline QRect adjusted(int x1, int y1, int x2, int y2) const noexcept;
123 
124     Q_DECL_CONSTEXPR inline QSize size() const noexcept;
125     Q_DECL_CONSTEXPR inline int width() const noexcept;
126     Q_DECL_CONSTEXPR inline int height() const noexcept;
127     Q_DECL_RELAXED_CONSTEXPR inline void setWidth(int w) noexcept;
128     Q_DECL_RELAXED_CONSTEXPR inline void setHeight(int h) noexcept;
129     Q_DECL_RELAXED_CONSTEXPR inline void setSize(const QSize &s) noexcept;
130 
131     QRect operator|(const QRect &r) const noexcept;
132     QRect operator&(const QRect &r) const noexcept;
133     inline QRect& operator|=(const QRect &r) noexcept;
134     inline QRect& operator&=(const QRect &r) noexcept;
135 
136     bool contains(const QRect &r, bool proper = false) const noexcept;
137     bool contains(const QPoint &p, bool proper=false) const noexcept;
138     inline bool contains(int x, int y) const noexcept;
139     inline bool contains(int x, int y, bool proper) const noexcept;
140     Q_REQUIRED_RESULT inline QRect united(const QRect &other) const noexcept;
141     Q_REQUIRED_RESULT inline QRect intersected(const QRect &other) const noexcept;
142     bool intersects(const QRect &r) const noexcept;
143 
144     Q_DECL_CONSTEXPR inline QRect marginsAdded(const QMargins &margins) const noexcept;
145     Q_DECL_CONSTEXPR inline QRect marginsRemoved(const QMargins &margins) const noexcept;
146     Q_DECL_RELAXED_CONSTEXPR inline QRect &operator+=(const QMargins &margins) noexcept;
147     Q_DECL_RELAXED_CONSTEXPR inline QRect &operator-=(const QMargins &margins) noexcept;
148 
149     friend Q_DECL_CONSTEXPR inline bool operator==(const QRect &, const QRect &) noexcept;
150     friend Q_DECL_CONSTEXPR inline bool operator!=(const QRect &, const QRect &) noexcept;
151     friend Q_DECL_CONSTEXPR inline size_t qHash(const QRect &, size_t) noexcept;
152 
153 #if defined(Q_OS_DARWIN) || defined(Q_QDOC)
154     Q_REQUIRED_RESULT CGRect toCGRect() const noexcept;
155 #endif
156 
157 private:
158     int x1;
159     int y1;
160     int x2;
161     int y2;
162 
163 #ifndef QT_NO_DATASTREAM
164     friend QDataStream &operator<<(QDataStream &, const QRect &);
165     friend QDataStream &operator>>(QDataStream &, QRect &);
166 #endif
167 };
168 Q_DECLARE_TYPEINFO(QRect, Q_MOVABLE_TYPE);
169 
170 Q_DECL_CONSTEXPR inline bool operator==(const QRect &, const QRect &) noexcept;
171 Q_DECL_CONSTEXPR inline bool operator!=(const QRect &, const QRect &) noexcept;
172 
173 
174 /*****************************************************************************
175   QRect stream functions
176  *****************************************************************************/
177 #ifndef QT_NO_DATASTREAM
178 Q_CORE_EXPORT QDataStream &operator<<(QDataStream &, const QRect &);
179 Q_CORE_EXPORT QDataStream &operator>>(QDataStream &, QRect &);
180 #endif
181 
182 /*****************************************************************************
183   QRect inline member functions
184  *****************************************************************************/
185 
186 Q_DECL_CONSTEXPR inline QRect::QRect(int aleft, int atop, int awidth, int aheight) noexcept
187     : x1(aleft), y1(atop), x2(aleft + awidth), y2(atop + aheight) {}
188 
189 Q_DECL_CONSTEXPR inline QRect::QRect(const QPoint &atopLeft, const QPoint &abottomRight) noexcept
190     : x1(atopLeft.x()) , y1(atopLeft.y())
191     , x2(abottomRight.x() + 1), y2(abottomRight.y() + 1)
192 {}
193 
194 Q_DECL_CONSTEXPR inline QRect::QRect(const QPoint &atopLeft, const QSize &asize) noexcept
195     : x1(atopLeft.x()), y1(atopLeft.y()), x2(atopLeft.x()+asize.width()), y2(atopLeft.y()+asize.height()) {}
196 
197 Q_DECL_CONSTEXPR inline bool QRect::isNull() const noexcept
198 { return x2 == x1 && y2 == y1; }
199 
200 Q_DECL_CONSTEXPR inline bool QRect::isEmpty() const noexcept
201 { return x1 >= x2 || y1 >= y2; }
202 
203 Q_DECL_CONSTEXPR inline bool QRect::isValid() const noexcept
204 { return x1 < x2 && y1 < y2; }
205 
206 Q_DECL_CONSTEXPR inline int QRect::left() const noexcept
207 { return x1; }
208 
209 Q_DECL_CONSTEXPR inline int QRect::top() const noexcept
210 { return y1; }
211 
212 Q_DECL_CONSTEXPR inline int QRect::right() const noexcept
213 { return x2 - 1;}
214 
215 Q_DECL_CONSTEXPR inline int QRect::bottom() const noexcept
216 { return y2 - 1; }
217 
218 Q_DECL_CONSTEXPR inline int QRect::x() const noexcept
219 { return x1; }
220 
221 Q_DECL_CONSTEXPR inline int QRect::y() const noexcept
222 { return y1; }
223 
224 Q_DECL_RELAXED_CONSTEXPR inline void QRect::setLeft(int pos) noexcept
225 {
226     x1 = pos;
227 }
228 
229 Q_DECL_RELAXED_CONSTEXPR inline void QRect::setTop(int pos) noexcept
230 {
231     y1 = pos;
232 }
233 
234 Q_DECL_RELAXED_CONSTEXPR inline void QRect::setRight(int pos) noexcept
235 {
236     x2 = pos + 1;
237 }
238 
239 Q_DECL_RELAXED_CONSTEXPR inline void QRect::setBottom(int pos) noexcept
240 {
241     y2 = pos + 1;
242 }
243 
244 Q_DECL_RELAXED_CONSTEXPR inline void QRect::setTopLeft(const QPoint &p) noexcept
245 { setLeft(p.x()); setTop(p.y()); }
246 
247 Q_DECL_RELAXED_CONSTEXPR inline void QRect::setTopRight(const QPoint &p) noexcept
248 { setRight(p.x()); setTop(p.y()); }
249 
250 Q_DECL_RELAXED_CONSTEXPR inline void QRect::setBottomLeft(const QPoint &p) noexcept
251 { setLeft(p.x()); setBottom(p.y()); }
252 
253 Q_DECL_RELAXED_CONSTEXPR inline void QRect::setBottomRight(const QPoint &p) noexcept
254 { setRight(p.x()); setBottom(p.y()); }
255 
256 Q_DECL_RELAXED_CONSTEXPR inline void QRect::setX(int ax) noexcept
257 { setLeft(ax); }
258 
259 Q_DECL_RELAXED_CONSTEXPR inline void QRect::setY(int ay) noexcept
260 { setTop(ay); }
261 
262 Q_DECL_CONSTEXPR inline QPoint QRect::topLeft() const noexcept
263 { return QPoint(left(), top()); }
264 
265 Q_DECL_CONSTEXPR inline QPoint QRect::bottomLeft() const noexcept
266 { return QPoint(left(), bottom()); }
267 
268 Q_DECL_CONSTEXPR inline QPoint QRect::topRight() const noexcept
269 { return QPoint(right(), top()); }
270 
271 Q_DECL_CONSTEXPR inline QPoint QRect::bottomRight() const noexcept
272 { return QPoint(right(), bottom()); }
273 
274 Q_DECL_CONSTEXPR inline QPoint QRect::center() const noexcept
275 { return QPoint(int((qint64(x1)+x2-1)/2), int((qint64(y1)+y2-1)/2)); } // cast avoids overflow on addition
276 
277 Q_DECL_CONSTEXPR inline int QRect::width() const noexcept
278 { return x2 - x1; }
279 
280 Q_DECL_CONSTEXPR inline int QRect::height() const noexcept
281 { return y2 - y1; }
282 
283 Q_DECL_CONSTEXPR inline QSize QRect::size() const noexcept
284 { return QSize(width(), height()); }
285 
286 Q_DECL_RELAXED_CONSTEXPR inline void QRect::translate(int dx, int dy) noexcept
287 {
288     x1 += dx;
289     y1 += dy;
290     x2 += dx;
291     y2 += dy;
292 }
293 
294 Q_DECL_RELAXED_CONSTEXPR inline void QRect::translate(const QPoint &p) noexcept
295 {
296     x1 += p.x();
297     y1 += p.y();
298     x2 += p.x();
299     y2 += p.y();
300 }
301 
302 Q_DECL_CONSTEXPR inline QRect QRect::translated(int dx, int dy) const noexcept
303 { return QRect(QPoint(x1 + dx, y1 + dy), QPoint(x2 + dx - 1, y2 + dy - 1)); }
304 
305 Q_DECL_CONSTEXPR inline QRect QRect::translated(const QPoint &p) const noexcept
306 { return QRect(QPoint(x1 + p.x(), y1 + p.y()), QPoint(x2 + p.x() - 1, y2 + p.y() - 1)); }
307 
308 Q_DECL_CONSTEXPR inline QRect QRect::transposed() const noexcept
309 { return QRect(topLeft(), size().transposed()); }
310 
311 Q_DECL_RELAXED_CONSTEXPR inline void QRect::moveTo(int ax, int ay) noexcept
312 {
313     x2 += ax - x1;
314     y2 += ay - y1;
315     x1 = ax;
316     y1 = ay;
317 }
318 
319 Q_DECL_RELAXED_CONSTEXPR inline void QRect::moveTo(const QPoint &p) noexcept
320 {
321     x2 += p.x() - x1;
322     y2 += p.y() - y1;
323     x1 = p.x();
324     y1 = p.y();
325 }
326 
327 Q_DECL_RELAXED_CONSTEXPR inline void QRect::moveLeft(int pos) noexcept
328 { x2 += (pos - x1); x1 = pos; }
329 
330 Q_DECL_RELAXED_CONSTEXPR inline void QRect::moveTop(int pos) noexcept
331 { y2 += (pos - y1); y1 = pos; }
332 
333 Q_DECL_RELAXED_CONSTEXPR inline void QRect::moveRight(int pos) noexcept
334 {
335     x1 += (pos - x2 + 1);
336     x2 = pos + 1;
337 }
338 
339 Q_DECL_RELAXED_CONSTEXPR inline void QRect::moveBottom(int pos) noexcept
340 {
341     y1 += (pos - y2 + 1);
342     y2 = pos + 1;
343 }
344 
345 Q_DECL_RELAXED_CONSTEXPR inline void QRect::moveTopLeft(const QPoint &p) noexcept
346 {
347     moveLeft(p.x());
348     moveTop(p.y());
349 }
350 
351 Q_DECL_RELAXED_CONSTEXPR inline void QRect::moveBottomRight(const QPoint &p) noexcept
352 {
353     moveRight(p.x());
354     moveBottom(p.y());
355 }
356 
357 Q_DECL_RELAXED_CONSTEXPR inline void QRect::moveTopRight(const QPoint &p) noexcept
358 {
359     moveRight(p.x());
360     moveTop(p.y());
361 }
362 
363 Q_DECL_RELAXED_CONSTEXPR inline void QRect::moveBottomLeft(const QPoint &p) noexcept
364 {
365     moveLeft(p.x());
366     moveBottom(p.y());
367 }
368 
369 Q_DECL_RELAXED_CONSTEXPR inline void QRect::moveCenter(const QPoint &p) noexcept
370 {
371     const int w = x2 - x1;
372     const int h = y2 - y1;
373     x1 = p.x() - w/2;
374     y1 = p.y() - h/2;
375     x2 = x1 + w;
376     y2 = y1 + h;
377 }
378 
379 Q_DECL_RELAXED_CONSTEXPR inline void QRect::getRect(int *ax, int *ay, int *aw, int *ah) const
380 {
381     *ax = x1;
382     *ay = y1;
383     *aw = x2 - x1;
384     *ah = y2 - y1;
385 }
386 
387 Q_DECL_RELAXED_CONSTEXPR inline void QRect::setRect(int ax, int ay, int aw, int ah) noexcept
388 {
389     x1 = ax;
390     y1 = ay;
391     x2 = ax + aw;
392     y2 = ay + ah;
393 }
394 
395 Q_DECL_RELAXED_CONSTEXPR inline void QRect::getCoords(int *xp1, int *yp1, int *xp2, int *yp2) const
396 {
397     *xp1 = x1;
398     *yp1 = y1;
399     *xp2 = x2 - 1;
400     *yp2 = y2 - 1;
401 }
402 
403 Q_DECL_RELAXED_CONSTEXPR inline void QRect::setCoords(int xp1, int yp1, int xp2, int yp2) noexcept
404 {
405     *this = QRect(QPoint(xp1, yp1), QPoint(xp2, yp2));
406 }
407 
408 Q_DECL_CONSTEXPR inline QRect QRect::adjusted(int xp1, int yp1, int xp2, int yp2) const noexcept
409 { return QRect(QPoint(left() + xp1, top() + yp1), QPoint(right() + xp2, bottom() + yp2)); }
410 
411 Q_DECL_RELAXED_CONSTEXPR inline void QRect::adjust(int dx1, int dy1, int dx2, int dy2) noexcept
412 {
413     *this = adjusted(dx1, dy1, dx2, dy2);
414 }
415 
416 Q_DECL_RELAXED_CONSTEXPR inline void QRect::setWidth(int aw) noexcept
417 { x2 = x1 + aw; }
418 
419 Q_DECL_RELAXED_CONSTEXPR inline void QRect::setHeight(int ah) noexcept
420 { y2 = y1 + ah; }
421 
422 Q_DECL_RELAXED_CONSTEXPR inline void QRect::setSize(const QSize &s) noexcept
423 {
424     x2 = s.width()  + x1;
425     y2 = s.height() + y1;
426 }
427 
428 inline bool QRect::contains(int ax, int ay, bool aproper) const noexcept
429 {
430     return contains(QPoint(ax, ay), aproper);
431 }
432 
433 inline bool QRect::contains(int ax, int ay) const noexcept
434 {
435     return contains(QPoint(ax, ay), false);
436 }
437 
438 inline QRect& QRect::operator|=(const QRect &r) noexcept
439 {
440     *this = *this | r;
441     return *this;
442 }
443 
444 inline QRect& QRect::operator&=(const QRect &r) noexcept
445 {
446     *this = *this & r;
447     return *this;
448 }
449 
450 inline QRect QRect::intersected(const QRect &other) const noexcept
451 {
452     return *this & other;
453 }
454 
455 inline QRect QRect::united(const QRect &r) const noexcept
456 {
457     return *this | r;
458 }
459 
460 Q_DECL_CONSTEXPR inline bool operator==(const QRect &r1, const QRect &r2) noexcept
461 {
462     return r1.x1==r2.x1 && r1.x2==r2.x2 && r1.y1==r2.y1 && r1.y2==r2.y2;
463 }
464 
465 Q_DECL_CONSTEXPR inline bool operator!=(const QRect &r1, const QRect &r2) noexcept
466 {
467     return r1.x1!=r2.x1 || r1.x2!=r2.x2 || r1.y1!=r2.y1 || r1.y2!=r2.y2;
468 }
469 
470 Q_DECL_CONSTEXPR inline size_t qHash(const QRect &r, size_t seed = 0) noexcept
471 {
472     return qHashMulti(seed, r.x1, r.x2, r.y1, r.y2);
473 }
474 
475 Q_DECL_CONSTEXPR inline QRect operator+(const QRect &rectangle, const QMargins &margins) noexcept
476 {
477     return QRect(QPoint(rectangle.left() - margins.left(), rectangle.top() - margins.top()),
478                  QPoint(rectangle.right() + margins.right(), rectangle.bottom() + margins.bottom()));
479 }
480 
481 Q_DECL_CONSTEXPR inline QRect operator+(const QMargins &margins, const QRect &rectangle) noexcept
482 {
483     return QRect(QPoint(rectangle.left() - margins.left(), rectangle.top() - margins.top()),
484                  QPoint(rectangle.right() + margins.right(), rectangle.bottom() + margins.bottom()));
485 }
486 
487 Q_DECL_CONSTEXPR inline QRect operator-(const QRect &lhs, const QMargins &rhs) noexcept
488 {
489     return QRect(QPoint(lhs.left() + rhs.left(), lhs.top() + rhs.top()),
490                  QPoint(lhs.right() - rhs.right(), lhs.bottom() - rhs.bottom()));
491 }
492 
493 Q_DECL_CONSTEXPR inline QRect QRect::marginsAdded(const QMargins &margins) const noexcept
494 {
495     return QRect(QPoint(x1 - margins.left(), y1 - margins.top()),
496                  QPoint(right() + margins.right(), bottom() + margins.bottom()));
497 }
498 
499 Q_DECL_CONSTEXPR inline QRect QRect::marginsRemoved(const QMargins &margins) const noexcept
500 {
501     return QRect(QPoint(x1 + margins.left(), y1 + margins.top()),
502                  QPoint(right() - margins.right(), bottom() - margins.bottom()));
503 }
504 
505 Q_DECL_RELAXED_CONSTEXPR inline QRect &QRect::operator+=(const QMargins &margins) noexcept
506 {
507     *this = marginsAdded(margins);
508     return *this;
509 }
510 
511 Q_DECL_RELAXED_CONSTEXPR inline QRect &QRect::operator-=(const QMargins &margins) noexcept
512 {
513     *this = marginsRemoved(margins);
514     return *this;
515 }
516 
517 #ifndef QT_NO_DEBUG_STREAM
518 Q_CORE_EXPORT QDebug operator<<(QDebug, const QRect &);
519 #endif
520 
521 
522 class Q_CORE_EXPORT QRectF
523 {
524 public:
525     Q_DECL_CONSTEXPR QRectF() noexcept : xp(0.), yp(0.), w(0.), h(0.) {}
526     Q_DECL_CONSTEXPR QRectF(const QPointF &topleft, const QSizeF &size) noexcept;
527     Q_DECL_CONSTEXPR QRectF(const QPointF &topleft, const QPointF &bottomRight) noexcept;
528     Q_DECL_CONSTEXPR QRectF(qreal left, qreal top, qreal width, qreal height) noexcept;
529     Q_DECL_CONSTEXPR QRectF(const QRect &rect) noexcept;
530 
531     Q_DECL_CONSTEXPR inline bool isNull() const noexcept;
532     Q_DECL_CONSTEXPR inline bool isEmpty() const noexcept;
533     Q_DECL_CONSTEXPR inline bool isValid() const noexcept;
534     Q_REQUIRED_RESULT QRectF normalized() const noexcept;
535 
536     Q_DECL_CONSTEXPR inline qreal left() const noexcept { return xp; }
537     Q_DECL_CONSTEXPR inline qreal top() const noexcept { return yp; }
538     Q_DECL_CONSTEXPR inline qreal right() const noexcept { return xp + w; }
539     Q_DECL_CONSTEXPR inline qreal bottom() const noexcept { return yp + h; }
540 
541     Q_DECL_CONSTEXPR inline qreal x() const noexcept;
542     Q_DECL_CONSTEXPR inline qreal y() const noexcept;
543     Q_DECL_RELAXED_CONSTEXPR inline void setLeft(qreal pos) noexcept;
544     Q_DECL_RELAXED_CONSTEXPR inline void setTop(qreal pos) noexcept;
545     Q_DECL_RELAXED_CONSTEXPR inline void setRight(qreal pos) noexcept;
546     Q_DECL_RELAXED_CONSTEXPR inline void setBottom(qreal pos) noexcept;
547     Q_DECL_RELAXED_CONSTEXPR inline void setX(qreal pos) noexcept { setLeft(pos); }
548     Q_DECL_RELAXED_CONSTEXPR inline void setY(qreal pos) noexcept { setTop(pos); }
549 
550     Q_DECL_CONSTEXPR inline QPointF topLeft() const noexcept { return QPointF(xp, yp); }
551     Q_DECL_CONSTEXPR inline QPointF bottomRight() const noexcept { return QPointF(xp+w, yp+h); }
552     Q_DECL_CONSTEXPR inline QPointF topRight() const noexcept { return QPointF(xp+w, yp); }
553     Q_DECL_CONSTEXPR inline QPointF bottomLeft() const noexcept { return QPointF(xp, yp+h); }
554     Q_DECL_CONSTEXPR inline QPointF center() const noexcept;
555 
556     Q_DECL_RELAXED_CONSTEXPR inline void setTopLeft(const QPointF &p) noexcept;
557     Q_DECL_RELAXED_CONSTEXPR inline void setBottomRight(const QPointF &p) noexcept;
558     Q_DECL_RELAXED_CONSTEXPR inline void setTopRight(const QPointF &p) noexcept;
559     Q_DECL_RELAXED_CONSTEXPR inline void setBottomLeft(const QPointF &p) noexcept;
560 
561     Q_DECL_RELAXED_CONSTEXPR inline void moveLeft(qreal pos) noexcept;
562     Q_DECL_RELAXED_CONSTEXPR inline void moveTop(qreal pos) noexcept;
563     Q_DECL_RELAXED_CONSTEXPR inline void moveRight(qreal pos) noexcept;
564     Q_DECL_RELAXED_CONSTEXPR inline void moveBottom(qreal pos) noexcept;
565     Q_DECL_RELAXED_CONSTEXPR inline void moveTopLeft(const QPointF &p) noexcept;
566     Q_DECL_RELAXED_CONSTEXPR inline void moveBottomRight(const QPointF &p) noexcept;
567     Q_DECL_RELAXED_CONSTEXPR inline void moveTopRight(const QPointF &p) noexcept;
568     Q_DECL_RELAXED_CONSTEXPR inline void moveBottomLeft(const QPointF &p) noexcept;
569     Q_DECL_RELAXED_CONSTEXPR inline void moveCenter(const QPointF &p) noexcept;
570 
571     Q_DECL_RELAXED_CONSTEXPR inline void translate(qreal dx, qreal dy) noexcept;
572     Q_DECL_RELAXED_CONSTEXPR inline void translate(const QPointF &p) noexcept;
573 
574     Q_REQUIRED_RESULT Q_DECL_CONSTEXPR inline QRectF translated(qreal dx, qreal dy) const noexcept;
575     Q_REQUIRED_RESULT Q_DECL_CONSTEXPR inline QRectF translated(const QPointF &p) const noexcept;
576 
577     Q_REQUIRED_RESULT Q_DECL_CONSTEXPR inline QRectF transposed() const noexcept;
578 
579     Q_DECL_RELAXED_CONSTEXPR inline void moveTo(qreal x, qreal y) noexcept;
580     Q_DECL_RELAXED_CONSTEXPR inline void moveTo(const QPointF &p) noexcept;
581 
582     Q_DECL_RELAXED_CONSTEXPR inline void setRect(qreal x, qreal y, qreal w, qreal h) noexcept;
583     Q_DECL_RELAXED_CONSTEXPR inline void getRect(qreal *x, qreal *y, qreal *w, qreal *h) const;
584 
585     Q_DECL_RELAXED_CONSTEXPR inline void setCoords(qreal x1, qreal y1, qreal x2, qreal y2) noexcept;
586     Q_DECL_RELAXED_CONSTEXPR inline void getCoords(qreal *x1, qreal *y1, qreal *x2, qreal *y2) const;
587 
588     Q_DECL_RELAXED_CONSTEXPR inline void adjust(qreal x1, qreal y1, qreal x2, qreal y2) noexcept;
589     Q_REQUIRED_RESULT Q_DECL_CONSTEXPR inline QRectF adjusted(qreal x1, qreal y1, qreal x2, qreal y2) const noexcept;
590 
591     Q_DECL_CONSTEXPR inline QSizeF size() const noexcept;
592     Q_DECL_CONSTEXPR inline qreal width() const noexcept;
593     Q_DECL_CONSTEXPR inline qreal height() const noexcept;
594     Q_DECL_RELAXED_CONSTEXPR inline void setWidth(qreal w) noexcept;
595     Q_DECL_RELAXED_CONSTEXPR inline void setHeight(qreal h) noexcept;
596     Q_DECL_RELAXED_CONSTEXPR inline void setSize(const QSizeF &s) noexcept;
597 
598     QRectF operator|(const QRectF &r) const noexcept;
599     QRectF operator&(const QRectF &r) const noexcept;
600     inline QRectF& operator|=(const QRectF &r) noexcept;
601     inline QRectF& operator&=(const QRectF &r) noexcept;
602 
603     bool contains(const QRectF &r) const noexcept;
604     bool contains(const QPointF &p) const noexcept;
605     inline bool contains(qreal x, qreal y) const noexcept;
606     Q_REQUIRED_RESULT inline QRectF united(const QRectF &other) const noexcept;
607     Q_REQUIRED_RESULT inline QRectF intersected(const QRectF &other) const noexcept;
608     bool intersects(const QRectF &r) const noexcept;
609 
610     Q_DECL_CONSTEXPR inline QRectF marginsAdded(const QMarginsF &margins) const noexcept;
611     Q_DECL_CONSTEXPR inline QRectF marginsRemoved(const QMarginsF &margins) const noexcept;
612     Q_DECL_RELAXED_CONSTEXPR inline QRectF &operator+=(const QMarginsF &margins) noexcept;
613     Q_DECL_RELAXED_CONSTEXPR inline QRectF &operator-=(const QMarginsF &margins) noexcept;
614 
615     friend Q_DECL_CONSTEXPR inline bool operator==(const QRectF &, const QRectF &) noexcept;
616     friend Q_DECL_CONSTEXPR inline bool operator!=(const QRectF &, const QRectF &) noexcept;
617 
618     Q_REQUIRED_RESULT Q_DECL_CONSTEXPR inline QRect toRect() const noexcept;
619     Q_REQUIRED_RESULT QRect toAlignedRect() const noexcept;
620 
621 #if defined(Q_OS_DARWIN) || defined(Q_QDOC)
622     Q_REQUIRED_RESULT static QRectF fromCGRect(CGRect rect) noexcept;
623     Q_REQUIRED_RESULT CGRect toCGRect() const noexcept;
624 #endif
625 
626 private:
627     qreal xp;
628     qreal yp;
629     qreal w;
630     qreal h;
631 };
632 Q_DECLARE_TYPEINFO(QRectF, Q_MOVABLE_TYPE);
633 
634 Q_DECL_CONSTEXPR inline bool operator==(const QRectF &, const QRectF &) noexcept;
635 Q_DECL_CONSTEXPR inline bool operator!=(const QRectF &, const QRectF &) noexcept;
636 
637 
638 /*****************************************************************************
639   QRectF stream functions
640  *****************************************************************************/
641 #ifndef QT_NO_DATASTREAM
642 Q_CORE_EXPORT QDataStream &operator<<(QDataStream &, const QRectF &);
643 Q_CORE_EXPORT QDataStream &operator>>(QDataStream &, QRectF &);
644 #endif
645 
646 /*****************************************************************************
647   QRectF inline member functions
648  *****************************************************************************/
649 
650 Q_DECL_CONSTEXPR inline QRectF::QRectF(qreal aleft, qreal atop, qreal awidth, qreal aheight) noexcept
651     : xp(aleft), yp(atop), w(awidth), h(aheight)
652 {
653 }
654 
655 Q_DECL_CONSTEXPR inline QRectF::QRectF(const QPointF &atopLeft, const QSizeF &asize) noexcept
656     : xp(atopLeft.x()), yp(atopLeft.y()), w(asize.width()), h(asize.height())
657 {
658 }
659 
660 
661 Q_DECL_CONSTEXPR inline QRectF::QRectF(const QPointF &atopLeft, const QPointF &abottomRight) noexcept
662     : xp(atopLeft.x()), yp(atopLeft.y()), w(abottomRight.x() - atopLeft.x()), h(abottomRight.y() - atopLeft.y())
663 {
664 }
665 
666 Q_DECL_CONSTEXPR inline QRectF::QRectF(const QRect &r) noexcept
667     : xp(r.x()), yp(r.y()), w(r.width()), h(r.height())
668 {
669 }
670 
671 QT_WARNING_PUSH
672 QT_WARNING_DISABLE_FLOAT_COMPARE
673 
674 Q_DECL_CONSTEXPR inline bool QRectF::isNull() const noexcept
675 { return w == 0. && h == 0.; }
676 
677 Q_DECL_CONSTEXPR inline bool QRectF::isEmpty() const noexcept
678 { return w <= 0. || h <= 0.; }
679 
680 QT_WARNING_POP
681 
682 Q_DECL_CONSTEXPR inline bool QRectF::isValid() const noexcept
683 { return w > 0. && h > 0.; }
684 
685 Q_DECL_CONSTEXPR inline qreal QRectF::x() const noexcept
686 { return xp; }
687 
688 Q_DECL_CONSTEXPR inline qreal QRectF::y() const noexcept
689 { return yp; }
690 
691 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::setLeft(qreal pos) noexcept
692 { qreal diff = pos - xp; xp += diff; w -= diff; }
693 
694 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::setRight(qreal pos) noexcept
695 { w = pos - xp; }
696 
697 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::setTop(qreal pos) noexcept
698 { qreal diff = pos - yp; yp += diff; h -= diff; }
699 
700 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::setBottom(qreal pos) noexcept
701 { h = pos - yp; }
702 
703 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::setTopLeft(const QPointF &p) noexcept
704 { setLeft(p.x()); setTop(p.y()); }
705 
706 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::setTopRight(const QPointF &p) noexcept
707 { setRight(p.x()); setTop(p.y()); }
708 
709 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::setBottomLeft(const QPointF &p) noexcept
710 { setLeft(p.x()); setBottom(p.y()); }
711 
712 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::setBottomRight(const QPointF &p) noexcept
713 { setRight(p.x()); setBottom(p.y()); }
714 
715 Q_DECL_CONSTEXPR inline QPointF QRectF::center() const noexcept
716 { return QPointF(xp + w/2, yp + h/2); }
717 
718 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::moveLeft(qreal pos) noexcept
719 { xp = pos; }
720 
721 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::moveTop(qreal pos) noexcept
722 { yp = pos; }
723 
724 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::moveRight(qreal pos) noexcept
725 { xp = pos - w; }
726 
727 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::moveBottom(qreal pos) noexcept
728 { yp = pos - h; }
729 
730 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::moveTopLeft(const QPointF &p) noexcept
731 { moveLeft(p.x()); moveTop(p.y()); }
732 
733 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::moveTopRight(const QPointF &p) noexcept
734 { moveRight(p.x()); moveTop(p.y()); }
735 
736 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::moveBottomLeft(const QPointF &p) noexcept
737 { moveLeft(p.x()); moveBottom(p.y()); }
738 
739 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::moveBottomRight(const QPointF &p) noexcept
740 { moveRight(p.x()); moveBottom(p.y()); }
741 
742 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::moveCenter(const QPointF &p) noexcept
743 { xp = p.x() - w/2; yp = p.y() - h/2; }
744 
745 Q_DECL_CONSTEXPR inline qreal QRectF::width() const noexcept
746 { return w; }
747 
748 Q_DECL_CONSTEXPR inline qreal QRectF::height() const noexcept
749 { return h; }
750 
751 Q_DECL_CONSTEXPR inline QSizeF QRectF::size() const noexcept
752 { return QSizeF(w, h); }
753 
754 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::translate(qreal dx, qreal dy) noexcept
755 {
756     xp += dx;
757     yp += dy;
758 }
759 
760 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::translate(const QPointF &p) noexcept
761 {
762     xp += p.x();
763     yp += p.y();
764 }
765 
766 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::moveTo(qreal ax, qreal ay) noexcept
767 {
768     xp = ax;
769     yp = ay;
770 }
771 
772 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::moveTo(const QPointF &p) noexcept
773 {
774     xp = p.x();
775     yp = p.y();
776 }
777 
778 Q_DECL_CONSTEXPR inline QRectF QRectF::translated(qreal dx, qreal dy) const noexcept
779 { return QRectF(xp + dx, yp + dy, w, h); }
780 
781 Q_DECL_CONSTEXPR inline QRectF QRectF::translated(const QPointF &p) const noexcept
782 { return QRectF(xp + p.x(), yp + p.y(), w, h); }
783 
784 Q_DECL_CONSTEXPR inline QRectF QRectF::transposed() const noexcept
785 { return QRectF(topLeft(), size().transposed()); }
786 
787 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::getRect(qreal *ax, qreal *ay, qreal *aaw, qreal *aah) const
788 {
789     *ax = this->xp;
790     *ay = this->yp;
791     *aaw = this->w;
792     *aah = this->h;
793 }
794 
795 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::setRect(qreal ax, qreal ay, qreal aaw, qreal aah) noexcept
796 {
797     this->xp = ax;
798     this->yp = ay;
799     this->w = aaw;
800     this->h = aah;
801 }
802 
803 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::getCoords(qreal *xp1, qreal *yp1, qreal *xp2, qreal *yp2) const
804 {
805     *xp1 = xp;
806     *yp1 = yp;
807     *xp2 = xp + w;
808     *yp2 = yp + h;
809 }
810 
811 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::setCoords(qreal xp1, qreal yp1, qreal xp2, qreal yp2) noexcept
812 {
813     xp = xp1;
814     yp = yp1;
815     w = xp2 - xp1;
816     h = yp2 - yp1;
817 }
818 
819 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::adjust(qreal xp1, qreal yp1, qreal xp2, qreal yp2) noexcept
820 { xp += xp1; yp += yp1; w += xp2 - xp1; h += yp2 - yp1; }
821 
822 Q_DECL_CONSTEXPR inline QRectF QRectF::adjusted(qreal xp1, qreal yp1, qreal xp2, qreal yp2) const noexcept
823 { return QRectF(xp + xp1, yp + yp1, w + xp2 - xp1, h + yp2 - yp1); }
824 
825 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::setWidth(qreal aw) noexcept
826 { this->w = aw; }
827 
828 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::setHeight(qreal ah) noexcept
829 { this->h = ah; }
830 
831 Q_DECL_RELAXED_CONSTEXPR inline void QRectF::setSize(const QSizeF &s) noexcept
832 {
833     w = s.width();
834     h = s.height();
835 }
836 
837 inline bool QRectF::contains(qreal ax, qreal ay) const noexcept
838 {
839     return contains(QPointF(ax, ay));
840 }
841 
842 inline QRectF& QRectF::operator|=(const QRectF &r) noexcept
843 {
844     *this = *this | r;
845     return *this;
846 }
847 
848 inline QRectF& QRectF::operator&=(const QRectF &r) noexcept
849 {
850     *this = *this & r;
851     return *this;
852 }
853 
854 inline QRectF QRectF::intersected(const QRectF &r) const noexcept
855 {
856     return *this & r;
857 }
858 
859 inline QRectF QRectF::united(const QRectF &r) const noexcept
860 {
861     return *this | r;
862 }
863 
864 Q_DECL_CONSTEXPR inline bool operator==(const QRectF &r1, const QRectF &r2) noexcept
865 {
866     return qFuzzyCompare(r1.xp, r2.xp) && qFuzzyCompare(r1.yp, r2.yp)
867            && qFuzzyCompare(r1.w, r2.w) && qFuzzyCompare(r1.h, r2.h);
868 }
869 
870 Q_DECL_CONSTEXPR inline bool operator!=(const QRectF &r1, const QRectF &r2) noexcept
871 {
872     return !qFuzzyCompare(r1.xp, r2.xp) || !qFuzzyCompare(r1.yp, r2.yp)
873            || !qFuzzyCompare(r1.w, r2.w) || !qFuzzyCompare(r1.h, r2.h);
874 }
875 
876 Q_DECL_CONSTEXPR inline QRect QRectF::toRect() const noexcept
877 {
878     return QRect(QPoint(qRound(xp), qRound(yp)), QPoint(qRound(xp + w) - 1, qRound(yp + h) - 1));
879 }
880 
881 Q_DECL_CONSTEXPR inline QRectF operator+(const QRectF &lhs, const QMarginsF &rhs) noexcept
882 {
883     return QRectF(QPointF(lhs.left() - rhs.left(), lhs.top() - rhs.top()),
884                   QSizeF(lhs.width() + rhs.left() + rhs.right(), lhs.height() + rhs.top() + rhs.bottom()));
885 }
886 
887 Q_DECL_CONSTEXPR inline QRectF operator+(const QMarginsF &lhs, const QRectF &rhs) noexcept
888 {
889     return QRectF(QPointF(rhs.left() - lhs.left(), rhs.top() - lhs.top()),
890                   QSizeF(rhs.width() + lhs.left() + lhs.right(), rhs.height() + lhs.top() + lhs.bottom()));
891 }
892 
893 Q_DECL_CONSTEXPR inline QRectF operator-(const QRectF &lhs, const QMarginsF &rhs) noexcept
894 {
895     return QRectF(QPointF(lhs.left() + rhs.left(), lhs.top() + rhs.top()),
896                   QSizeF(lhs.width() - rhs.left() - rhs.right(), lhs.height() - rhs.top() - rhs.bottom()));
897 }
898 
899 Q_DECL_CONSTEXPR inline QRectF QRectF::marginsAdded(const QMarginsF &margins) const noexcept
900 {
901     return QRectF(QPointF(xp - margins.left(), yp - margins.top()),
902                   QSizeF(w + margins.left() + margins.right(), h + margins.top() + margins.bottom()));
903 }
904 
905 Q_DECL_CONSTEXPR inline QRectF QRectF::marginsRemoved(const QMarginsF &margins) const noexcept
906 {
907     return QRectF(QPointF(xp + margins.left(), yp + margins.top()),
908                   QSizeF(w - margins.left() - margins.right(), h - margins.top() - margins.bottom()));
909 }
910 
911 Q_DECL_RELAXED_CONSTEXPR inline QRectF &QRectF::operator+=(const QMarginsF &margins) noexcept
912 {
913     *this = marginsAdded(margins);
914     return *this;
915 }
916 
917 Q_DECL_RELAXED_CONSTEXPR inline QRectF &QRectF::operator-=(const QMarginsF &margins) noexcept
918 {
919     *this = marginsRemoved(margins);
920     return *this;
921 }
922 
923 #ifndef QT_NO_DEBUG_STREAM
924 Q_CORE_EXPORT QDebug operator<<(QDebug, const QRectF &);
925 #endif
926 
927 QT_END_NAMESPACE
928 
929 #endif // QRECT_H
