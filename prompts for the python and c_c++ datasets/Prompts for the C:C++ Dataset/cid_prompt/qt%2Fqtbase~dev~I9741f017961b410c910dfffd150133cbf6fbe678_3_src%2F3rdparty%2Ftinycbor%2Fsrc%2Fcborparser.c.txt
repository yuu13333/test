Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2018 Intel Corporation
4 **
5 ** Permission is hereby granted, free of charge, to any person obtaining a copy
6 ** of this software and associated documentation files (the "Software"), to deal
7 ** in the Software without restriction, including without limitation the rights
8 ** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
9 ** copies of the Software, and to permit persons to whom the Software is
10 ** furnished to do so, subject to the following conditions:
11 **
12 ** The above copyright notice and this permission notice shall be included in
13 ** all copies or substantial portions of the Software.
14 **
15 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
16 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
17 ** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
18 ** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
19 ** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
20 ** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
21 ** THE SOFTWARE.
22 **
23 ****************************************************************************/
24 
25 #ifndef _BSD_SOURCE
26 #define _BSD_SOURCE 1
27 #endif
28 #ifndef _DEFAULT_SOURCE
29 #define _DEFAULT_SOURCE 1
30 #endif
31 #ifndef __STDC_LIMIT_MACROS
32 #  define __STDC_LIMIT_MACROS 1
33 #endif
34 
35 #include "cbor.h"
36 #include "cborinternal_p.h"
37 #include "compilersupport_p.h"
38 
39 #include <string.h>
40 
41 /**
42  * \defgroup CborParsing Parsing CBOR streams
43  * \brief Group of functions used to parse CBOR streams.
44  *
45  * TinyCBOR provides functions for pull-based stream parsing of a CBOR-encoded
46  * payload. The main data type for the parsing is a CborValue, which behaves
47  * like an iterator and can be used to extract the encoded data. It is first
48  * initialized with a call to cbor_parser_init() and is usually used to extract
49  * exactly one item, most often an array or map.
50  *
51  * Nested CborValue objects can be parsed using cbor_value_enter_container().
52  * Each call to cbor_value_enter_container() must be matched by a call to
53  * cbor_value_leave_container(), with the exact same parameters.
54  *
55  * The example below initializes a CborParser object, begins the parsing with a
56  * CborValue and decodes a single integer:
57  *
58  * \code
59  * int extract_int(const uint8_t *buffer, size_t len)
60  * {
61  *     CborParser parser;
62  *     CborValue value;
63  *     int result;
64  *     cbor_parser_init(buffer, len, 0, &buffer, &value);
65  *     cbor_value_get_int(&value, &result);
66  *     return result;
67  * }
68  * \endcode
69  *
70  * The code above does no error checking, which means it assumes the data comes
71  * from a source trusted to send one properly-encoded integer. The following
72  * example does the exact same operation, but includes error parsing and
73  * returns 0 on parsing failure:
74  *
75  * \code
76  * int extract_int(const uint8_t *buffer, size_t len)
77  * {
78  *     CborParser parser;
79  *     CborValue value;
80  *     int result;
81  *     if (cbor_parser_init(buffer, len, 0, &buffer, &value) != CborNoError)
82  *         return 0;
83  *     if (!cbor_value_is_integer(&value) ||
84  *             cbor_value_get_int(&value, &result) != CborNoError)
85  *         return 0;
86  *     return result;
87  * }
88  * \endcode
89  *
90  * Note, in the example above, that one can't distinguish a parsing failure
91  * from an encoded value of zero. Reporting a parsing error is left as an
92  * exercise to the reader.
93  *
94  * The code above does not execute a range-check either: it is possible that
95  * the value decoded from the CBOR stream encodes a number larger than what can
96  * be represented in a variable of type \c{int}. If detecting that case is
97  * important, the code should call cbor_value_get_int_checked() instead.
98  *
99  * <h3 class="groupheader">Memory and parsing constraints</h3>
100  *
101  * TinyCBOR is designed to run with little memory and with minimal overhead.
102  * Except where otherwise noted, the parser functions always run on constant
103  * time (O(1)), do not recurse and never allocate memory (thus, stack usage is
104  * bounded and is O(1)).
105  *
106  * <h3 class="groupheader">Error handling and preconditions</h3>
107  *
108  * All functions operating on a CborValue return a CborError condition, with
109  * CborNoError standing for the normal situation in which no parsing error
110  * occurred. All functions may return parsing errors in case the stream cannot
111  * be decoded properly, be it due to corrupted data or due to reaching the end
112  * of the input buffer.
113  *
114  * Error conditions must not be ignored. All decoder functions have undefined
115  * behavior if called after an error has been reported, and may crash.
116  *
117  * Some functions are also documented to have preconditions, like
118  * cbor_value_get_int() requiring that the input be an integral value.
119  * Violation of preconditions also results in undefined behavior and the
120  * program may crash.
121  */
122 
123 /**
124  * \addtogroup CborParsing
125  * @{
126  */
127 
128 /**
129  * \struct CborValue
130  *
131  * This type contains one value parsed from the CBOR stream. Each CborValue
132  * behaves as an iterator in a StAX-style parser.
133  *
134  * \if privatedocs
135  * Implementation details: the CborValue contains these fields:
136  * \list
137  *   \li ptr: pointer to the actual data
138  *   \li flags: flags from the decoder
139  *   \li extra: partially decoded integer value (0, 1 or 2 bytes)
140  *   \li remaining: remaining items in this collection after this item or UINT32_MAX if length is unknown
141  * \endlist
142  * \endif
143  */
144 
145 static uint64_t extract_number_and_advance(CborValue *it)
146 {
147     /* This function is only called after we've verified that the number
148      * here is valid, so we can just use _cbor_value_extract_int64_helper. */
149     uint8_t descriptor;
150     uint64_t v = _cbor_value_extract_int64_helper(it);
151 
152     read_bytes_unchecked(it, &descriptor, 0, 1);
153     descriptor &= SmallValueMask;
154 
155     size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
156     advance_bytes(it, bytesNeeded + 1);
157 
158     return v;
159 }
160 
161 static bool is_fixed_type(uint8_t type)
162 {
163     return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
164            type != CborMapType;
165 }
166 
167 static CborError preparse_value(CborValue *it)
168 {
169     enum {
170         /* flags to keep */
171         FlagsToKeep = CborIteratorFlag_ContainerIsMap | CborIteratorFlag_NextIsMapKey
172     };
173     uint8_t descriptor;
174 
175     /* are we at the end? */
176     it->type = CborInvalidType;
177     it->flags &= FlagsToKeep;
178     if (!read_bytes(it, &descriptor, 0, 1))
179         return CborErrorUnexpectedEOF;
180 
181     uint8_t type = descriptor & MajorTypeMask;
182     it->type = type;
183     it->extra = (descriptor &= SmallValueMask);
184 
185     if (descriptor > Value64Bit) {
186         if (unlikely(descriptor != IndefiniteLength))
187             return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
188         if (likely(!is_fixed_type(type))) {
189             /* special case */
190             it->flags |= CborIteratorFlag_UnknownLength;
191             it->type = type;
192             return CborNoError;
193         }
194         return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
195     }
196 
197     size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
198 
199     if (bytesNeeded) {
200         if (!can_read_bytes(it, bytesNeeded + 1))
201             return CborErrorUnexpectedEOF;
202 
203         it->extra = 0;
204 
205         /* read up to 16 bits into it->extra */
206         if (bytesNeeded <= 2) {
207             read_bytes_unchecked(it, &it->extra, 1, bytesNeeded);
208             if (bytesNeeded == 2)
209                 it->extra = cbor_ntohs(it->extra);
210         } else {
211             cbor_static_assert(CborIteratorFlag_IntegerValueTooLarge == (Value32Bit & 3));
212             cbor_static_assert((CborIteratorFlag_IntegerValueIs64Bit |
213                                 CborIteratorFlag_IntegerValueTooLarge) == (Value64Bit & 3));
214             it->flags |= (descriptor & 3);
215         }
216     }
217 
218     uint8_t majortype = type >> MajorTypeShift;
219     if (majortype == NegativeIntegerType) {
220         it->flags |= CborIteratorFlag_NegativeInteger;
221         it->type = CborIntegerType;
222     } else if (majortype == SimpleTypesType) {
223         switch (descriptor) {
224         case FalseValue:
225             it->extra = false;
226             it->type = CborBooleanType;
227             break;
228 
229         case SinglePrecisionFloat:
230         case DoublePrecisionFloat:
231             it->flags |= CborIteratorFlag_IntegerValueTooLarge;
232             /* fall through */
233         case TrueValue:
234         case NullValue:
235         case UndefinedValue:
236         case HalfPrecisionFloat:
237             read_bytes_unchecked(it, &it->type, 0, 1);
238             break;
239 
240         case SimpleTypeInNextByte:
241 #ifndef CBOR_PARSER_NO_STRICT_CHECKS
242             if (unlikely(it->extra < 32)) {
243                 it->type = CborInvalidType;
244                 return CborErrorIllegalSimpleType;
245             }
246 #endif
247             break;
248 
249         case 28:
250         case 29:
251         case 30:
252         case Break:
253             cbor_assert(false);  /* these conditions can't be reached */
254             return CborErrorUnexpectedBreak;
255         }
256     }
257 
258     return CborNoError;
259 }
260 
261 static CborError preparse_next_value_nodecrement(CborValue *it)
262 {
263     uint8_t byte;
264     if (it->remaining == UINT32_MAX && read_bytes(it, &byte, 0, 1) && byte == (uint8_t)BreakByte) {
265         /* end of map or array */
266         if ((it->flags & CborIteratorFlag_ContainerIsMap && it->flags & CborIteratorFlag_NextIsMapKey)
267                 || it->type == CborTagType) {
268             /* but we weren't expecting it! */
269             return CborErrorUnexpectedBreak;
270         }
271         it->type = CborInvalidType;
272         it->remaining = 0;
273         it->flags |= CborIteratorFlag_UnknownLength; /* leave_container must consume the Break */
274         return CborNoError;
275     }
276 
277     return preparse_value(it);
278 }
279 
280 static CborError preparse_next_value(CborValue *it)
281 {
282     /* tags don't count towards item totals or whether we've successfully
283      * read a map's key or value */
284     bool itemCounts = it->type != CborTagType;
285 
286     if (it->remaining != UINT32_MAX) {
287         if (itemCounts && !--it->remaining) {
288             it->type = CborInvalidType;
289             it->flags &= ~CborIteratorFlag_UnknownLength; /* no Break to consume */
290             return CborNoError;
291         }
292     }
293     if (itemCounts) {
294         /* toggle the flag indicating whether this was a map key */
295         it->flags ^= CborIteratorFlag_NextIsMapKey;
296     }
297     return preparse_next_value_nodecrement(it);
298 }
299 
300 static CborError advance_internal(CborValue *it)
301 {
302     uint64_t length = extract_number_and_advance(it);
303 
304     if (it->type == CborByteStringType || it->type == CborTextStringType) {
305         cbor_assert(length == (size_t)length);
306         cbor_assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
307         advance_bytes(it, length);
308     }
309 
310     return preparse_next_value(it);
311 }
312 
313 /** \internal
314  *
315  * Decodes the CBOR integer value when it is larger than the 16 bits available
316  * in value->extra. This function requires that value->flags have the
317  * CborIteratorFlag_IntegerValueTooLarge flag set.
318  *
319  * This function is also used to extract single- and double-precision floating
320  * point values (SinglePrecisionFloat == Value32Bit and DoublePrecisionFloat ==
321  * Value64Bit).
322  */
323 uint64_t _cbor_value_decode_int64_internal(const CborValue *value)
324 {
325     cbor_assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
326                 value->type == CborFloatType || value->type == CborDoubleType);
327     if (value->flags & CborIteratorFlag_IntegerValueIs64Bit)
328         return read_uint64(value, 1);
329 
330     return read_uint32(value, 1);
331 }
332 
333 /**
334  * Initializes the CBOR parser for parsing \a size bytes beginning at \a
335  * buffer. Parsing will use flags set in \a flags. The iterator to the first
336  * element is returned in \a it.
337  *
338  * The \a parser structure needs to remain valid throughout the decoding
339  * process. It is not thread-safe to share one CborParser among multiple
340  * threads iterating at the same time, but the object can be copied so multiple
341  * threads can iterate.
342  */
343 CborError cbor_parser_init(const uint8_t *buffer, size_t size, int flags, CborParser *parser, CborValue *it)
344 {
345     memset(parser, 0, sizeof(*parser));
346     parser->source.end = buffer + size;
347     parser->flags = (enum CborParserGlobalFlags)flags;
348     it->parser = parser;
349     it->source.ptr = buffer;
350     it->remaining = 1;      /* there's one type altogether, usually an array or map */
351     it->flags = 0;
352     return preparse_value(it);
353 }
354 
355 CborError cbor_parser_init_reader(const struct CborParserOperations *ops, CborParser *parser, CborValue *it, void *token)
356 {
357     memset(parser, 0, sizeof(*parser));
358     parser->source.ops = ops;
359     parser->flags = CborParserFlag_ExternalSource;
360     it->parser = parser;
361     it->source.token = token;
362     it->remaining = 1;
363     return preparse_value(it);
364 }
365 
366 /**
367  * \fn bool cbor_value_at_end(const CborValue *it)
368  *
369  * Returns true if \a it has reached the end of the iteration, usually when
370  * advancing after the last item in an array or map.
371  *
372  * In the case of the outermost CborValue object, this function returns true
373  * after decoding a single element. A pointer to the first byte of the
374  * remaining data (if any) can be obtained with cbor_value_get_next_byte().
375  *
376  * \sa cbor_value_advance(), cbor_value_is_valid(), cbor_value_get_next_byte()
377  */
378 
379 /**
380  * \fn const uint8_t *cbor_value_get_next_byte(const CborValue *it)
381  *
382  * Returns a pointer to the next byte that would be decoded if this CborValue
383  * object were advanced.
384  *
385  * This function is useful if cbor_value_at_end() returns true for the
386  * outermost CborValue: the pointer returned is the first byte of the data
387  * remaining in the buffer, if any. Code can decide whether to begin decoding a
388  * new CBOR data stream from this point, or parse some other data appended to
389  * the same buffer.
390  *
391  * This function may be used even after a parsing error. If that occurred,
392  * then this function returns a pointer to where the parsing error occurred.
393  * Note that the error recovery is not precise and the pointer may not indicate
394  * the exact byte containing bad data.
395  *
396  * This function makes sense only when using a linear buffer (that is, when the
397  * parser is initialize by cbor_parser_init()). If using an external source,
398  * this function may return garbage; instead, consult the external source itself
399  * to find out more details about the presence of more data.
400  *
401  * \sa cbor_value_at_end()
402  */
403 
404 CborError cbor_value_reparse(CborValue *it)
405 {
406     if (it->flags & CborIteratorFlag_IteratingStringChunks)
407         return CborNoError;
408     return preparse_next_value_nodecrement(it);
409 }
410 
411 /**
412  * \fn bool cbor_value_is_valid(const CborValue *it)
413  *
414  * Returns true if the iterator \a it contains a valid value. Invalid iterators
415  * happen when iteration reaches the end of a container (see \ref
416  * cbor_value_at_end()) or when a search function resulted in no matches.
417  *
418  * \sa cbor_value_advance(), cbor_valie_at_end(), cbor_value_get_type()
419  */
420 
421 /**
422  * Performs a basic validation of the CBOR stream pointed by \a it and returns
423  * the error it found. If no error was found, it returns CborNoError and the
424  * application can iterate over the items with certainty that no other errors
425  * will appear during parsing.
426  *
427  * A basic validation checks for:
428  * \list
429  *   \li absence of undefined additional information bytes;
430  *   \li well-formedness of all numbers, lengths, and simple values;
431  *   \li string contents match reported sizes;
432  *   \li arrays and maps contain the number of elements they are reported to have;
433  * \endlist
434  *
435  * For further checks, see cbor_value_validate().
436  *
437  * This function has the same timing and memory requirements as
438  * cbor_value_advance().
439  *
440  * \sa cbor_value_validate(), cbor_value_advance()
441  */
442 CborError cbor_value_validate_basic(const CborValue *it)
443 {
444     CborValue value = *it;
445     return cbor_value_advance(&value);
446 }
447 
448 /**
449  * Advances the CBOR value \a it by one fixed-size position. Fixed-size types
450  * are: integers, tags, simple types (including boolean, null and undefined
451  * values) and floating point types.
452  *
453  * If the type is not of fixed size, this function has undefined behavior. Code
454  * must be sure that the current type is one of the fixed-size types before
455  * calling this function. This function is provided because it can guarantee
456  * that runs in constant time (O(1)).
457  *
458  * If the caller is not able to determine whether the type is fixed or not, code
459  * can use the cbor_value_advance() function instead.
460  *
461  * \sa cbor_value_at_end(), cbor_value_advance(), cbor_value_enter_container(), cbor_value_leave_container()
462  */
463 CborError cbor_value_advance_fixed(CborValue *it)
464 {
465     cbor_assert(it->type != CborInvalidType);
466     cbor_assert(is_fixed_type(it->type));
467     if (!it->remaining)
468         return CborErrorAdvancePastEOF;
469     return advance_internal(it);
470 }
471 
472 static CborError advance_recursive(CborValue *it, int nestingLevel)
473 {
474     if (is_fixed_type(it->type))
475         return advance_internal(it);
476 
477     if (!cbor_value_is_container(it)) {
478         size_t len = SIZE_MAX;
479         return _cbor_value_copy_string(it, NULL, &len, it);
480     }
481 
482     /* map or array */
483     if (nestingLevel == 0)
484         return CborErrorNestingTooDeep;
485 
486     CborError err;
487     CborValue recursed;
488     err = cbor_value_enter_container(it, &recursed);
489     if (err)
490         return err;
491     while (!cbor_value_at_end(&recursed)) {
492         err = advance_recursive(&recursed, nestingLevel - 1);
493         if (err)
494             return err;
495     }
496     return cbor_value_leave_container(it, &recursed);
497 }
498 
499 
500 /**
501  * Advances the CBOR value \a it by one element, skipping over containers.
502  * Unlike cbor_value_advance_fixed(), this function can be called on a CBOR
503  * value of any type. However, if the type is a container (map or array) or a
504  * string with a chunked payload, this function will not run in constant time
505  * and will recurse into itself (it will run on O(n) time for the number of
506  * elements or chunks and will use O(n) memory for the number of nested
507  * containers).
508  *
509  * The number of recursions can be limited at compile time to avoid stack
510  * exhaustion in constrained systems.
511  *
512  * \sa cbor_value_at_end(), cbor_value_advance_fixed(), cbor_value_enter_container(), cbor_value_leave_container()
513  */
514 CborError cbor_value_advance(CborValue *it)
515 {
516     cbor_assert(it->type != CborInvalidType);
517     if (!it->remaining)
518         return CborErrorAdvancePastEOF;
519     return advance_recursive(it, CBOR_PARSER_MAX_RECURSIONS);
520 }
521 
522 /**
523  * \fn bool cbor_value_is_tag(const CborValue *value)
524  *
525  * Returns true if the iterator \a value is valid and points to a CBOR tag.
526  *
527  * \sa cbor_value_get_tag(), cbor_value_skip_tag()
528  */
529 
530 /**
531  * \fn CborError cbor_value_get_tag(const CborValue *value, CborTag *result)
532  *
533  * Retrieves the CBOR tag value that \a value points to and stores it in \a
534  * result. If the iterator \a value does not point to a CBOR tag value, the
535  * behavior is undefined, so checking with \ref cbor_value_get_type or with
536  * \ref cbor_value_is_tag is recommended.
537  *
538  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_tag()
539  */
540 
541 /**
542  * Advances the CBOR value \a it until it no longer points to a tag. If \a it is
543  * already not pointing to a tag, then this function returns it unchanged.
544  *
545  * This function does not run in constant time: it will run on O(n) for n being
546  * the number of tags. It does use constant memory (O(1) memory requirements).
547  *
548  * \sa cbor_value_advance_fixed(), cbor_value_advance()
549  */
550 CborError cbor_value_skip_tag(CborValue *it)
551 {
552     while (cbor_value_is_tag(it)) {
553         CborError err = cbor_value_advance_fixed(it);
554         if (err)
555             return err;
556     }
557     return CborNoError;
558 }
559 
560 /**
561  * \fn bool cbor_value_is_container(const CborValue *it)
562  *
563  * Returns true if the \a it value is a container and requires recursion in
564  * order to decode (maps and arrays), false otherwise.
565  */
566 
567 /**
568  * Creates a CborValue iterator pointing to the first element of the container
569  * represented by \a it and saves it in \a recursed. The \a it container object
570  * needs to be kept and passed again to cbor_value_leave_container() in order
571  * to continue iterating past this container.
572  *
573  * The \a it CborValue iterator must point to a container.
574  *
575  * \sa cbor_value_is_container(), cbor_value_leave_container(), cbor_value_advance()
576  */
577 CborError cbor_value_enter_container(const CborValue *it, CborValue *recursed)
578 {
579     cbor_static_assert(CborIteratorFlag_ContainerIsMap == (CborMapType & ~CborArrayType));
580     cbor_assert(cbor_value_is_container(it));
581     *recursed = *it;
582 
583     if (it->flags & CborIteratorFlag_UnknownLength) {
584         recursed->remaining = UINT32_MAX;
585         advance_bytes(recursed, 1);
586     } else {
587         uint64_t len = extract_number_and_advance(recursed);
588 
589         recursed->remaining = (uint32_t)len;
590         if (recursed->remaining != len || len == UINT32_MAX) {
591             /* back track the pointer to indicate where the error occurred */
592             copy_current_position(recursed, it);
593             return CborErrorDataTooLarge;
594         }
595         if (recursed->type == CborMapType) {
596             /* maps have keys and values, so we need to multiply by 2 */
597             if (recursed->remaining > UINT32_MAX / 2) {
598                 /* back track the pointer to indicate where the error occurred */
599                 copy_current_position(recursed, it);
600                 return CborErrorDataTooLarge;
601             }
602             recursed->remaining *= 2;
603         }
604         if (len == 0) {
605             /* the case of the empty container */
606             recursed->type = CborInvalidType;
607             return CborNoError;
608         }
609     }
610     recursed->flags = (recursed->type & CborIteratorFlag_ContainerIsMap);
611     return preparse_next_value_nodecrement(recursed);
612 }
613 
614 /**
615  * Updates \a it to point to the next element after the container. The \a
616  * recursed object needs to point to the element obtained either by advancing
617  * the last element of the container (via cbor_value_advance(),
618  * cbor_value_advance_fixed(), a nested cbor_value_leave_container(), or the \c
619  * next pointer from cbor_value_copy_string() or cbor_value_dup_string()).
620  *
621  * The \a it and \a recursed parameters must be the exact same as passed to
622  * cbor_value_enter_container().
623  *
624  * \sa cbor_value_enter_container(), cbor_value_at_end()
625  */
626 CborError cbor_value_leave_container(CborValue *it, const CborValue *recursed)
627 {
628     cbor_assert(cbor_value_is_container(it));
629     cbor_assert(recursed->type == CborInvalidType);
630 
631     copy_current_position(it, recursed);
632     if (recursed->flags & CborIteratorFlag_UnknownLength)
633         advance_bytes(it, 1);
634     return preparse_next_value(it);
635 }
636 
637 
638 /**
639  * \fn CborType cbor_value_get_type(const CborValue *value)
640  *
641  * Returns the type of the CBOR value that the iterator \a value points to. If
642  * \a value does not point to a valid value, this function returns \ref
643  * CborInvalidType.
644  *
645  * TinyCBOR also provides functions to test directly if a given CborValue object
646  * is of a given type, like cbor_value_is_text_string() and cbor_value_is_null().
647  *
648  * \sa cbor_value_is_valid()
649  */
650 
651 /**
652  * \fn bool cbor_value_is_null(const CborValue *value)
653  *
654  * Returns true if the iterator \a value is valid and points to a CBOR null type.
655  *
656  * \sa cbor_value_is_valid(), cbor_value_is_undefined()
657  */
658 
659 /**
660  * \fn bool cbor_value_is_undefined(const CborValue *value)
661  *
662  * Returns true if the iterator \a value is valid and points to a CBOR undefined type.
663  *
664  * \sa cbor_value_is_valid(), cbor_value_is_null()
665  */
666 
667 /**
668  * \fn bool cbor_value_is_boolean(const CborValue *value)
669  *
670  * Returns true if the iterator \a value is valid and points to a CBOR boolean
671  * type (true or false).
672  *
673  * \sa cbor_value_is_valid(), cbor_value_get_boolean()
674  */
675 
676 /**
677  * \fn CborError cbor_value_get_boolean(const CborValue *value, bool *result)
678  *
679  * Retrieves the boolean value that \a value points to and stores it in \a
680  * result. If the iterator \a value does not point to a boolean value, the
681  * behavior is undefined, so checking with \ref cbor_value_get_type or with
682  * \ref cbor_value_is_boolean is recommended.
683  *
684  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_boolean()
685  */
686 
687 /**
688  * \fn bool cbor_value_is_simple_type(const CborValue *value)
689  *
690  * Returns true if the iterator \a value is valid and points to a CBOR Simple Type
691  * type (other than true, false, null and undefined).
692  *
693  * \sa cbor_value_is_valid(), cbor_value_get_simple_type()
694  */
695 
696 /**
697  * \fn CborError cbor_value_get_simple_type(const CborValue *value, uint8_t *result)
698  *
699  * Retrieves the CBOR Simple Type value that \a value points to and stores it
700  * in \a result. If the iterator \a value does not point to a simple_type
701  * value, the behavior is undefined, so checking with \ref cbor_value_get_type
702  * or with \ref cbor_value_is_simple_type is recommended.
703  *
704  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_simple_type()
705  */
706 
707 /**
708  * \fn bool cbor_value_is_integer(const CborValue *value)
709  *
710  * Returns true if the iterator \a value is valid and points to a CBOR integer
711  * type.
712  *
713  * \sa cbor_value_is_valid(), cbor_value_get_int, cbor_value_get_int64, cbor_value_get_uint64, cbor_value_get_raw_integer
714  */
715 
716 /**
717  * \fn bool cbor_value_is_unsigned_integer(const CborValue *value)
718  *
719  * Returns true if the iterator \a value is valid and points to a CBOR unsigned
720  * integer type (positive values or zero).
721  *
722  * \sa cbor_value_is_valid(), cbor_value_get_uint64()
723  */
724 
725 /**
726  * \fn bool cbor_value_is_negative_integer(const CborValue *value)
727  *
728  * Returns true if the iterator \a value is valid and points to a CBOR negative
729  * integer type.
730  *
731  * \sa cbor_value_is_valid(), cbor_value_get_int, cbor_value_get_int64, cbor_value_get_raw_integer
732  */
733 
734 /**
735  * \fn CborError cbor_value_get_int(const CborValue *value, int *result)
736  *
737  * Retrieves the CBOR integer value that \a value points to and stores it in \a
738  * result. If the iterator \a value does not point to an integer value, the
739  * behavior is undefined, so checking with \ref cbor_value_get_type or with
740  * \ref cbor_value_is_integer is recommended.
741  *
742  * Note that this function does not do range-checking: integral values that do
743  * not fit in a variable of type \c{int} are silently truncated to fit. Use
744  * cbor_value_get_int_checked() that is not acceptable.
745  *
746  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_integer()
747  */
748 
749 /**
750  * \fn CborError cbor_value_get_int64(const CborValue *value, int64_t *result)
751  *
752  * Retrieves the CBOR integer value that \a value points to and stores it in \a
753  * result. If the iterator \a value does not point to an integer value, the
754  * behavior is undefined, so checking with \ref cbor_value_get_type or with
755  * \ref cbor_value_is_integer is recommended.
756  *
757  * Note that this function does not do range-checking: integral values that do
758  * not fit in a variable of type \c{int64_t} are silently truncated to fit. Use
759  * cbor_value_get_int64_checked() that is not acceptable.
760  *
761  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_integer()
762  */
763 
764 /**
765  * \fn CborError cbor_value_get_uint64(const CborValue *value, uint64_t *result)
766  *
767  * Retrieves the CBOR integer value that \a value points to and stores it in \a
768  * result. If the iterator \a value does not point to an unsigned integer
769  * value, the behavior is undefined, so checking with \ref cbor_value_get_type
770  * or with \ref cbor_value_is_unsigned_integer is recommended.
771  *
772  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_unsigned_integer()
773  */
774 
775 /**
776  * \fn CborError cbor_value_get_raw_integer(const CborValue *value, uint64_t *result)
777  *
778  * Retrieves the CBOR integer value that \a value points to and stores it in \a
779  * result. If the iterator \a value does not point to an integer value, the
780  * behavior is undefined, so checking with \ref cbor_value_get_type or with
781  * \ref cbor_value_is_integer is recommended.
782  *
783  * This function is provided because CBOR negative integers can assume values
784  * that cannot be represented with normal 64-bit integer variables.
785  *
786  * If the integer is unsigned (that is, if cbor_value_is_unsigned_integer()
787  * returns true), then \a result will contain the actual value. If the integer
788  * is negative, then \a result will contain the absolute value of that integer,
789  * minus one. That is, \c {actual = -result - 1}. On architectures using two's
790  * complement for representation of negative integers, it is equivalent to say
791  * that \a result will contain the bitwise negation of the actual value.
792  *
793  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_integer()
794  */
795 
796 /**
797  * Retrieves the CBOR integer value that \a value points to and stores it in \a
798  * result. If the iterator \a value does not point to an integer value, the
799  * behavior is undefined, so checking with \ref cbor_value_get_type or with
800  * \ref cbor_value_is_integer is recommended.
801  *
802  * Unlike cbor_value_get_int64(), this function performs a check to see if the
803  * stored integer fits in \a result without data loss. If the number is outside
804  * the valid range for the data type, this function returns the recoverable
805  * error CborErrorDataTooLarge. In that case, use either
806  * cbor_value_get_uint64() (if the number is positive) or
807  * cbor_value_get_raw_integer().
808  *
809  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_integer(), cbor_value_get_int64()
810  */
811 CborError cbor_value_get_int64_checked(const CborValue *value, int64_t *result)
812 {
813     cbor_assert(cbor_value_is_integer(value));
814     uint64_t v = _cbor_value_extract_int64_helper(value);
815 
816     /* Check before converting, as the standard says (C11 6.3.1.3 paragraph 3):
817      * "[if] the new type is signed and the value cannot be represented in it; either the
818      *  result is implementation-defined or an implementation-defined signal is raised."
819      *
820      * The range for int64_t is -2^63 to 2^63-1 (int64_t is required to be
821      * two's complement, C11 7.20.1.1 paragraph 3), which in CBOR is
822      * represented the same way, differing only on the "sign bit" (the major
823      * type).
824      */
825 
826     if (unlikely(v > (uint64_t)INT64_MAX))
827         return CborErrorDataTooLarge;
828 
829     *result = v;
830     if (value->flags & CborIteratorFlag_NegativeInteger)
831         *result = -*result - 1;
832     return CborNoError;
833 }
834 
835 /**
836  * Retrieves the CBOR integer value that \a value points to and stores it in \a
837  * result. If the iterator \a value does not point to an integer value, the
838  * behavior is undefined, so checking with \ref cbor_value_get_type or with
839  * \ref cbor_value_is_integer is recommended.
840  *
841  * Unlike cbor_value_get_int(), this function performs a check to see if the
842  * stored integer fits in \a result without data loss. If the number is outside
843  * the valid range for the data type, this function returns the recoverable
844  * error CborErrorDataTooLarge. In that case, use one of the other integer
845  * functions to obtain the value.
846  *
847  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_integer(), cbor_value_get_int64(),
848  *     cbor_value_get_uint64(), cbor_value_get_int64_checked(), cbor_value_get_raw_integer()
849  */
850 CborError cbor_value_get_int_checked(const CborValue *value, int *result)
851 {
852     cbor_assert(cbor_value_is_integer(value));
853     uint64_t v = _cbor_value_extract_int64_helper(value);
854 
855     /* Check before converting, as the standard says (C11 6.3.1.3 paragraph 3):
856      * "[if] the new type is signed and the value cannot be represented in it; either the
857      *  result is implementation-defined or an implementation-defined signal is raised."
858      *
859      * But we can convert from signed to unsigned without fault (paragraph 2).
860      *
861      * The range for int is implementation-defined and int is not guaranteed use
862      * two's complement representation (int32_t is).
863      */
864 
865     if (value->flags & CborIteratorFlag_NegativeInteger) {
866         if (unlikely(v > (unsigned) -(INT_MIN + 1)))
867             return CborErrorDataTooLarge;
868 
869         *result = (int)v;
870         *result = -*result - 1;
871     } else {
872         if (unlikely(v > (uint64_t)INT_MAX))
873             return CborErrorDataTooLarge;
874 
875         *result = (int)v;
876     }
877     return CborNoError;
878 
879 }
880 
881 /**
882  * \fn bool cbor_value_is_length_known(const CborValue *value)
883  *
884  * Returns true if the length of this type is known without calculation. That
885  * is, if the length of this CBOR string, map or array is encoded in the data
886  * stream, this function returns true. If the length is not encoded, it returns
887  * false.
888  *
889  * If the length is known, code can call cbor_value_get_string_length(),
890  * cbor_value_get_array_length() or cbor_value_get_map_length() to obtain the
891  * length. If the length is not known but is necessary, code can use the
892  * cbor_value_calculate_string_length() function (no equivalent function is
893  * provided for maps and arrays).
894  */
895 
896 /**
897  * \fn bool cbor_value_is_text_string(const CborValue *value)
898  *
899  * Returns true if the iterator \a value is valid and points to a CBOR text
900  * string. CBOR text strings are UTF-8 encoded and usually contain
901  * human-readable text.
902  *
903  * \sa cbor_value_is_valid(), cbor_value_get_string_length(), cbor_value_calculate_string_length(),
904  *     cbor_value_copy_text_string(), cbor_value_dup_text_string()
905  */
906 
907 /**
908  * \fn bool cbor_value_is_byte_string(const CborValue *value)
909  *
910  * Returns true if the iterator \a value is valid and points to a CBOR text
911  * string. CBOR byte strings are binary data with no specified encoding or
912  * format.
913  *
914  * \sa cbor_value_is_valid(), cbor_value_get_string_length(), cbor_value_calculate_string_length(),
915  *     cbor_value_copy_byte_string(), cbor_value_dup_byte_string()
916  */
917 
918 /**
919  * \fn CborError cbor_value_get_string_length(const CborValue *value, size_t *length)
920  *
921  * Extracts the length of the byte or text string that \a value points to and
922  * stores it in \a result. If the iterator \a value does not point to a text
923  * string or a byte string, the behaviour is undefined, so checking with \ref
924  * cbor_value_get_type, with \ref cbor_value_is_text_string or \ref
925  * cbor_value_is_byte_string is recommended.
926  *
927  * If the length of this string is not encoded in the CBOR data stream, this
928  * function will return the recoverable error CborErrorUnknownLength. You may
929  * also check whether that is the case by using cbor_value_is_length_known().
930  *
931  * If the length of the string is required but the length was not encoded, use
932  * cbor_value_calculate_string_length(), but note that that function does not
933  * run in constant time.
934  *
935  * \note On 32-bit platforms, this function will return error condition of \ref
936  * CborErrorDataTooLarge if the stream indicates a length that is too big to
937  * fit in 32-bit.
938  *
939  * \sa cbor_value_is_valid(), cbor_value_is_length_known(), cbor_value_calculate_string_length()
940  */
941 
942 /**
943  * Calculates the length of the byte or text string that \a value points to and
944  * stores it in \a len. If the iterator \a value does not point to a text
945  * string or a byte string, the behaviour is undefined, so checking with \ref
946  * cbor_value_get_type, with \ref cbor_value_is_text_string or \ref
947  * cbor_value_is_byte_string is recommended.
948  *
949  * This function is different from cbor_value_get_string_length() in that it
950  * calculates the length even for strings sent in chunks. For that reason, this
951  * function may not run in constant time (it will run in O(n) time on the
952  * number of chunks). It does use constant memory (O(1)).
953  *
954  * \note On 32-bit platforms, this function will return error condition of \ref
955  * CborErrorDataTooLarge if the stream indicates a length that is too big to
956  * fit in 32-bit.
957  *
958  * \sa cbor_value_get_string_length(), cbor_value_copy_text_string(), cbor_value_copy_byte_string(), cbor_value_is_length_known()
959  */
960 CborError cbor_value_calculate_string_length(const CborValue *value, size_t *len)
961 {
962     *len = SIZE_MAX;
963     return _cbor_value_copy_string(value, NULL, len, NULL);
964 }
965 
966 static inline void prepare_string_iteration(CborValue *it)
967 {
968     if (!cbor_value_is_length_known(it)) {
969         /* chunked string: we're before the first chunk;
970          * advance to the first chunk */
971         advance_bytes(it, 1);
972         it->flags |= CborIteratorFlag_IteratingStringChunks;
973     }
974 }
975 
976 CBOR_INTERNAL_API_CC CborError _cbor_value_prepare_string_iteration(CborValue *it)
977 {
978     cbor_assert((it->flags & CborIteratorFlag_IteratingStringChunks) == 0);
979     prepare_string_iteration(it);
980 
981     /* are we at the end? */
982     if (!can_read_bytes(it, 1))
983         return CborErrorUnexpectedEOF;
984     return CborNoError;
985 }
986 
987 static CborError get_string_chunk_size(CborValue *it, size_t *offset, size_t *len)
988 {
989     /* Possible states:
990      * length known | iterating | meaning
991      *     no       |    no     | before the first chunk of a chunked string
992      *     yes      |    no     | at a non-chunked string
993      *     no       |    yes    | second or later chunk
994      *     yes      |    yes    | after a non-chunked string
995      */
996     if (it->flags & CborIteratorFlag_IteratingStringChunks) {
997         /* already iterating */
998         if (cbor_value_is_length_known(it)) {
999             /* if the length was known, it wasn't chunked, so finish iteration */
1000             *len = 0;
1001             return CborErrorLastStringChunk;
1002         }
1003     } else {
1004         prepare_string_iteration(it);
1005     }
1006 
1007     /* are we at the end? */
1008     uint8_t descriptor;
1009     if (!read_bytes(it, &descriptor, 0, 1))
1010         return CborErrorUnexpectedEOF;
1011 
1012     if (descriptor == BreakByte)
1013         return CborErrorLastStringChunk;
1014     if ((descriptor & MajorTypeMask) != it->type)
1015         return CborErrorIllegalType;
1016 
1017     /* find the string length */
1018     size_t bytesNeeded = 1;
1019 
1020     descriptor &= SmallValueMask;
1021     if (descriptor < Value8Bit) {
1022         *len = descriptor;
1023     } else if (unlikely(descriptor > Value64Bit)) {
1024         return CborErrorIllegalNumber;
1025     } else {
1026         bytesNeeded = (size_t)(1 << (descriptor - Value8Bit));
1027         if (!can_read_bytes(it, 1 + bytesNeeded))
1028             return CborErrorUnexpectedEOF;
1029         if (descriptor <= Value16Bit) {
1030             if (descriptor == Value16Bit)
1031                 *len = read_uint16(it, 1);
1032             else
1033                 *len = read_uint8(it, 1);
1034         } else {
1035             if (descriptor == Value32Bit)
1036                 *len = read_uint32(it, 1);
1037             else
1038                 *len = read_uint64(it, 1);
1039         }
1040         ++bytesNeeded;
1041     }
1042 
1043     if (*len != (size_t)*len)
1044         return CborErrorDataTooLarge;
1045 
1046     *offset = bytesNeeded;
1047     return CborNoError;
1048 }
1049 
1050 static CborError get_string_chunk(CborValue *it, const void **bufferptr, size_t *len)
1051 {
1052     size_t offset;
1053     CborError err = get_string_chunk_size(it, &offset, len);
1054     if (err == CborErrorLastStringChunk) {
1055         /* last chunk */
1056         if (!cbor_value_is_length_known(it)) {
1057             /* skip the break byte */
1058             advance_bytes(it, 1);
1059         }
1060         *bufferptr = NULL;
1061         *len = 0;
1062         return preparse_next_value(it);
1063     } else if (err) {
1064         return err;
1065     }
1066 
1067     /* we're good, transfer the string now */
1068     err = transfer_string(it, bufferptr, offset, *len);
1069     if (err)
1070         return err;
1071 
1072     it->flags |= CborIteratorFlag_IteratingStringChunks;
1073     return CborNoError;
1074 }
1075 
1076 CborError cbor_value_get_string_chunk_size(CborValue *value, size_t *len)
1077 {
1078     size_t offset;
1079     return get_string_chunk_size(value, &offset, len);
1080 }
1081 
1082 /**
1083  * \fn CborError cbor_value_get_text_string_chunk(const CborValue *value, const char **bufferptr, size_t *len, CborValue *next)
1084  *
1085  * Extracts one text string chunk pointed to by \a value and stores a pointer
1086  * to the data in \a buffer and the size in \a len, which must not be null. If
1087  * no more chunks are available, then \a bufferptr will be set to null. This
1088  * function may be used to iterate over any string without causing its contents
1089  * to be copied to a separate buffer, like the convenience function
1090  * cbor_value_copy_text_string() does.
1091  *
1092  * It is designed to be used in code like:
1093  *
1094  * \code
1095  *   if (cbor_value_is_text_string(value)) {
1096  *       char *ptr;
1097  *       size_t len;
1098  *       while (1) {
1099  *           err = cbor_value_get_text_string_chunk(value, &ptr, &len, &value));
1100  *           if (err) return err;
1101  *           if (ptr == NULL) return CborNoError;
1102  *           consume(ptr, len);
1103  *       }
1104  *   }
1105  * \endcode
1106  *
1107  * If the iterator \a value does not point to a text string, the behaviour is
1108  * undefined, so checking with \ref cbor_value_get_type or \ref
1109  * cbor_value_is_text_string is recommended.
1110  *
1111  * The \a next pointer, if not null, will be updated to point to the next item
1112  * after this string. During iteration, the pointer must only be passed back
1113  * again to this function; passing it to any other function in this library
1114  * results in undefined behavior. If there are no more chunks to be read from
1115  * \a value, then \a next will be set to the next item after this string; if \a
1116  * value points to the last item, then \a next will be invalid.
1117  *
1118  * \note This function does not perform UTF-8 validation on the incoming text
1119  * string.
1120  *
1121  * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_caculate_string_length(), cbor_value_get_byte_string_chunk()
1122  */
1123 
1124 /**
1125  * \fn CborError cbor_value_get_byte_string_chunk(const CborValue *value, const char **bufferptr, size_t *len, CborValue *next)
1126  *
1127  * Extracts one byte string chunk pointed to by \a value and stores a pointer
1128  * to the data in \a buffer and the size in \a len, which must not be null. If
1129  * no more chunks are available, then \a bufferptr will be set to null. This
1130  * function may be used to iterate over any string without causing its contents
1131  * to be copied to a separate buffer, like the convenience function
1132  * cbor_value_copy_byte_string() does.
1133  *
1134  * It is designed to be used in code like:
1135  *
1136  * \code
1137  *   if (cbor_value_is_byte_string(value)) {
1138  *       char *ptr;
1139  *       size_t len;
1140  *       while (1) {
1141  *           err = cbor_value_get_byte_string_chunk(value, &ptr, &len, &value));
1142  *           if (err) return err;
1143  *           if (ptr == NULL) return CborNoError;
1144  *           consume(ptr, len);
1145  *       }
1146  *   }
1147  * \endcode
1148  *
1149  * If the iterator \a value does not point to a byte string, the behaviour is
1150  * undefined, so checking with \ref cbor_value_get_type or \ref
1151  * cbor_value_is_byte_string is recommended.
1152  *
1153  * The \a next pointer, if not null, will be updated to point to the next item
1154  * after this string. During iteration, the pointer must only be passed back
1155  * again to this function; passing it to any other function in this library
1156  * results in undefined behavior. If there are no more chunks to be read from
1157  * \a value, then \a next will be set to the next item after this string; if \a
1158  * value points to the last item, then \a next will be invalid.
1159  *
1160  * \sa cbor_value_dup_byte_string(), cbor_value_copy_byte_string(), cbor_value_caculate_string_length(), cbor_value_get_text_string_chunk()
1161  */
1162 
1163 CborError _cbor_value_get_string_chunk(const CborValue *value, const void **bufferptr,
1164                                                         size_t *len, CborValue *next)
1165 {
1166     CborValue tmp;
1167     if (!next)
1168         next = &tmp;
1169     *next = *value;
1170     return get_string_chunk(next, bufferptr, len);
1171 }
1172 
1173 /* We return uintptr_t so that we can pass memcpy directly as the iteration
1174  * function. The choice is to optimize for memcpy, which is used in the base
1175  * parser API (cbor_value_copy_string), while memcmp is used in convenience API
1176  * only. */
1177 typedef uintptr_t (*IterateFunction)(char *, const uint8_t *, size_t);
1178 
1179 static uintptr_t iterate_noop(char *dest, const uint8_t *src, size_t len)
1180 {
1181     (void)dest;
1182     (void)src;
1183     (void)len;
1184     return true;
1185 }
1186 
1187 static uintptr_t iterate_memcmp(char *s1, const uint8_t *s2, size_t len)
1188 {
1189     return memcmp(s1, (const char *)s2, len) == 0;
1190 }
1191 
1192 static uintptr_t iterate_memcpy(char *dest, const uint8_t *src, size_t len)
1193 {
1194     return (uintptr_t)memcpy(dest, src, len);
1195 }
1196 
1197 static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
1198                                        bool *result, CborValue *next, IterateFunction func)
1199 {
1200     cbor_assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
1201 
1202     CborError err;
1203     CborValue tmp;
1204     size_t total = 0;
1205     const void *ptr;
1206 
1207     if (!next)
1208         next = &tmp;
1209     *next = *value;
1210     *result = true;
1211 
1212     while (1) {
1213         size_t newTotal;
1214         size_t chunkLen;
1215         err = get_string_chunk(next, &ptr, &chunkLen);
1216         if (err)
1217             return err;
1218         if (!ptr)
1219             break;
1220 
1221         if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
1222             return CborErrorDataTooLarge;
1223 
1224         if (*result && *buflen >= newTotal)
1225             *result = !!func(buffer + total, (const uint8_t *)ptr, chunkLen);
1226         else
1227             *result = false;
1228 
1229         total = newTotal;
1230     }
1231 
1232     /* is there enough room for the ending NUL byte? */
1233     if (*result && *buflen > total) {
1234         uint8_t nul[] = { 0 };
1235         *result = !!func(buffer + total, nul, 1);
1236     }
1237     *buflen = total;
1238     return CborNoError;
1239 }
1240 
1241 /**
1242  * \fn CborError cbor_value_copy_text_string(const CborValue *value, char *buffer, size_t *buflen, CborValue *next)
1243  *
1244  * Copies the string pointed by \a value into the buffer provided at \a buffer
1245  * of \a buflen bytes. If \a buffer is a NULL pointer, this function will not
1246  * copy anything and will only update the \a next value.
1247  *
1248  * If the iterator \a value does not point to a text string, the behaviour is
1249  * undefined, so checking with \ref cbor_value_get_type or \ref
1250  * cbor_value_is_text_string is recommended.
1251  *
1252  * If the provided buffer length was too small, this function returns an error
1253  * condition of \ref CborErrorOutOfMemory. If you need to calculate the length
1254  * of the string in order to preallocate a buffer, use
1255  * cbor_value_calculate_string_length().
1256  *
1257  * On success, this function sets the number of bytes copied to \c{*buflen}. If
1258  * the buffer is large enough, this function will insert a null byte after the
1259  * last copied byte, to facilitate manipulation of text strings. That byte is
1260  * not included in the returned value of \c{*buflen}.
1261  *
1262  * The \a next pointer, if not null, will be updated to point to the next item
1263  * after this string. If \a value points to the last item, then \a next will be
1264  * invalid.
1265  *
1266  * This function may not run in constant time (it will run in O(n) time on the
1267  * number of chunks). It requires constant memory (O(1)).
1268  *
1269  * \note This function does not perform UTF-8 validation on the incoming text
1270  * string.
1271  *
1272  * \sa cbor_value_get_text_string_chunk() cbor_value_dup_text_string(), cbor_value_copy_byte_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
1273  */
1274 
1275 /**
1276  * \fn CborError cbor_value_copy_byte_string(const CborValue *value, uint8_t *buffer, size_t *buflen, CborValue *next)
1277  *
1278  * Copies the string pointed by \a value into the buffer provided at \a buffer
1279  * of \a buflen bytes. If \a buffer is a NULL pointer, this function will not
1280  * copy anything and will only update the \a next value.
1281  *
1282  * If the iterator \a value does not point to a byte string, the behaviour is
1283  * undefined, so checking with \ref cbor_value_get_type or \ref
1284  * cbor_value_is_byte_string is recommended.
1285  *
1286  * If the provided buffer length was too small, this function returns an error
1287  * condition of \ref CborErrorOutOfMemory. If you need to calculate the length
1288  * of the string in order to preallocate a buffer, use
1289  * cbor_value_calculate_string_length().
1290  *
1291  * On success, this function sets the number of bytes copied to \c{*buflen}. If
1292  * the buffer is large enough, this function will insert a null byte after the
1293  * last copied byte, to facilitate manipulation of null-terminated strings.
1294  * That byte is not included in the returned value of \c{*buflen}.
1295  *
1296  * The \a next pointer, if not null, will be updated to point to the next item
1297  * after this string. If \a value points to the last item, then \a next will be
1298  * invalid.
1299  *
1300  * This function may not run in constant time (it will run in O(n) time on the
1301  * number of chunks). It requires constant memory (O(1)).
1302  *
1303  * \sa cbor_value_get_byte_string_chunk(), cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
1304  */
1305 
1306 CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
1307                                  size_t *buflen, CborValue *next)
1308 {
1309     bool copied_all;
1310     CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
1311                                           buffer ? iterate_memcpy : iterate_noop);
1312     return err ? err :
1313                  copied_all ? CborNoError : CborErrorOutOfMemory;
1314 }
1315 
1316 /**
1317  * Compares the entry \a value with the string \a string and store the result
1318  * in \a result. If the value is different from \a string \a result will
1319  * contain \c false.
1320  *
1321  * The entry at \a value may be a tagged string. If \a is not a string or a
1322  * tagged string, the comparison result will be false.
1323  *
1324  * CBOR requires text strings to be encoded in UTF-8, but this function does
1325  * not validate either the strings in the stream or the string \a string to be
1326  * matched. Moreover, comparison is done on strict codepoint comparison,
1327  * without any Unicode normalization.
1328  *
1329  * This function may not run in constant time (it will run in O(n) time on the
1330  * number of chunks). It requires constant memory (O(1)).
1331  *
1332  * \sa cbor_value_skip_tag(), cbor_value_copy_text_string()
1333  */
1334 CborError cbor_value_text_string_equals(const CborValue *value, const char *string, bool *result)
1335 {
1336     CborValue copy = *value;
1337     CborError err = cbor_value_skip_tag(&copy);
1338     if (err)
1339         return err;
1340     if (!cbor_value_is_text_string(&copy)) {
1341         *result = false;
1342         return CborNoError;
1343     }
1344 
1345     size_t len = strlen(string);
1346     return iterate_string_chunks(&copy, CONST_CAST(char *, string), &len, result, NULL, iterate_memcmp);
1347 }
1348 
1349 /**
1350  * \fn bool cbor_value_is_array(const CborValue *value)
1351  *
1352  * Returns true if the iterator \a value is valid and points to a CBOR array.
1353  *
1354  * \sa cbor_value_is_valid(), cbor_value_is_map()
1355  */
1356 
1357 /**
1358  * \fn CborError cbor_value_get_array_length(const CborValue *value, size_t *length)
1359  *
1360  * Extracts the length of the CBOR array that \a value points to and stores it
1361  * in \a result. If the iterator \a value does not point to a CBOR array, the
1362  * behaviour is undefined, so checking with \ref cbor_value_get_type or \ref
1363  * cbor_value_is_array is recommended.
1364  *
1365  * If the length of this array is not encoded in the CBOR data stream, this
1366  * function will return the recoverable error CborErrorUnknownLength. You may
1367  * also check whether that is the case by using cbor_value_is_length_known().
1368  *
1369  * \note On 32-bit platforms, this function will return error condition of \ref
1370  * CborErrorDataTooLarge if the stream indicates a length that is too big to
1371  * fit in 32-bit.
1372  *
1373  * \sa cbor_value_is_valid(), cbor_value_is_length_known()
1374  */
1375 
1376 /**
1377  * \fn bool cbor_value_is_map(const CborValue *value)
1378  *
1379  * Returns true if the iterator \a value is valid and points to a CBOR map.
1380  *
1381  * \sa cbor_value_is_valid(), cbor_value_is_array()
1382  */
1383 
1384 /**
1385  * \fn CborError cbor_value_get_map_length(const CborValue *value, size_t *length)
1386  *
1387  * Extracts the length of the CBOR map that \a value points to and stores it in
1388  * \a result. If the iterator \a value does not point to a CBOR map, the
1389  * behaviour is undefined, so checking with \ref cbor_value_get_type or \ref
1390  * cbor_value_is_map is recommended.
1391  *
1392  * If the length of this map is not encoded in the CBOR data stream, this
1393  * function will return the recoverable error CborErrorUnknownLength. You may
1394  * also check whether that is the case by using cbor_value_is_length_known().
1395  *
1396  * \note On 32-bit platforms, this function will return error condition of \ref
1397  * CborErrorDataTooLarge if the stream indicates a length that is too big to
1398  * fit in 32-bit.
1399  *
1400  * \sa cbor_value_is_valid(), cbor_value_is_length_known()
1401  */
1402 
1403 /**
1404  * Attempts to find the value in map \a map that corresponds to the text string
1405  * entry \a string. If the iterator \a value does not point to a CBOR map, the
1406  * behaviour is undefined, so checking with \ref cbor_value_get_type or \ref
1407  * cbor_value_is_map is recommended.
1408  *
1409  * If the item is found, it is stored in \a result. If no item is found
1410  * matching the key, then \a result will contain an element of type \ref
1411  * CborInvalidType. Matching is performed using
1412  * cbor_value_text_string_equals(), so tagged strings will also match.
1413  *
1414  * This function has a time complexity of O(n) where n is the number of
1415  * elements in the map to be searched. In addition, this function is has O(n)
1416  * memory requirement based on the number of nested containers (maps or arrays)
1417  * found as elements of this map.
1418  *
1419  * \sa cbor_value_is_valid(), cbor_value_text_string_equals(), cbor_value_advance()
1420  */
1421 CborError cbor_value_map_find_value(const CborValue *map, const char *string, CborValue *element)
1422 {
1423     cbor_assert(cbor_value_is_map(map));
1424     size_t len = strlen(string);
1425     CborError err = cbor_value_enter_container(map, element);
1426     if (err)
1427         goto error;
1428 
1429     while (!cbor_value_at_end(element)) {
1430         /* find the non-tag so we can compare */
1431         err = cbor_value_skip_tag(element);
1432         if (err)
1433             goto error;
1434         if (cbor_value_is_text_string(element)) {
1435             bool equals;
1436             size_t dummyLen = len;
1437             err = iterate_string_chunks(element, CONST_CAST(char *, string), &dummyLen,
1438                                         &equals, element, iterate_memcmp);
1439             if (err)
1440                 goto error;
1441             if (equals)
1442                 return preparse_value(element);
1443         } else {
1444             /* skip this key */
1445             err = cbor_value_advance(element);
1446             if (err)
1447                 goto error;
1448         }
1449 
1450         /* skip this value */
1451         err = cbor_value_skip_tag(element);
1452         if (err)
1453             goto error;
1454         err = cbor_value_advance(element);
1455         if (err)
1456             goto error;
1457     }
1458 
1459     /* not found */
1460     element->type = CborInvalidType;
1461     return CborNoError;
1462 
1463 error:
1464     element->type = CborInvalidType;
1465     return err;
1466 }
1467 
1468 /**
1469  * \fn bool cbor_value_is_float(const CborValue *value)
1470  *
1471  * Returns true if the iterator \a value is valid and points to a CBOR
1472  * single-precision floating point (32-bit).
1473  *
1474  * \sa cbor_value_is_valid(), cbor_value_is_double(), cbor_value_is_half_float()
1475  */
1476 
1477 /**
1478  * \fn CborError cbor_value_get_float(const CborValue *value, float *result)
1479  *
1480  * Retrieves the CBOR single-precision floating point (32-bit) value that \a
1481  * value points to and stores it in \a result. If the iterator \a value does
1482  * not point to a single-precision floating point value, the behavior is
1483  * undefined, so checking with \ref cbor_value_get_type or with \ref
1484  * cbor_value_is_float is recommended.
1485  *
1486  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_float(), cbor_value_get_double()
1487  */
1488 
1489 /**
1490  * \fn bool cbor_value_is_double(const CborValue *value)
1491  *
1492  * Returns true if the iterator \a value is valid and points to a CBOR
1493  * double-precision floating point (64-bit).
1494  *
1495  * \sa cbor_value_is_valid(), cbor_value_is_float(), cbor_value_is_half_float()
1496  */
1497 
1498 /**
1499  * \fn CborError cbor_value_get_double(const CborValue *value, float *result)
1500  *
1501  * Retrieves the CBOR double-precision floating point (64-bit) value that \a
1502  * value points to and stores it in \a result. If the iterator \a value does
1503  * not point to a double-precision floating point value, the behavior is
1504  * undefined, so checking with \ref cbor_value_get_type or with \ref
1505  * cbor_value_is_double is recommended.
1506  *
1507  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_double(), cbor_value_get_float()
1508  */
1509 
1510 /**
1511  * \fn bool cbor_value_is_half_float(const CborValue *value)
1512  *
1513  * Returns true if the iterator \a value is valid and points to a CBOR
1514  * single-precision floating point (16-bit).
1515  *
1516  * \sa cbor_value_is_valid(), cbor_value_is_double(), cbor_value_is_float()
1517  */
1518 
1519 /**
1520  * \fn CborError cbor_value_get_half_float(const CborValue *value, void *result)
1521  *
1522  * Retrieves the CBOR half-precision floating point (16-bit) value that \a
1523  * value points to and stores it in \a result. If the iterator \a value does
1524  * not point to a half-precision floating point value, the behavior is
1525  * undefined, so checking with \ref cbor_value_get_type or with \ref
1526  * cbor_value_is_half_float is recommended.
1527  *
1528  * Note: since the C language does not have a standard type for half-precision
1529  * floating point, this function takes a \c{void *} as a parameter for the
1530  * storage area, which must be at least 16 bits wide.
1531  *
1532  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_half_float(), cbor_value_get_float()
1533  */
1534 
1535 /** @} */
