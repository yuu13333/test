Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qsimpledrag_p.h"
41 
42 #include "qbitmap.h"
43 #include "qdrag.h"
44 #include "qpixmap.h"
45 #include "qevent.h"
46 #include "qfile.h"
47 #include "qtextcodec.h"
48 #include "qguiapplication.h"
49 #include "qpoint.h"
50 #include "qbuffer.h"
51 #include "qimage.h"
52 #include "qregexp.h"
53 #include "qdir.h"
54 #include "qimagereader.h"
55 #include "qimagewriter.h"
56 #include "qplatformscreen.h"
57 #include "qplatformwindow.h"
58 
59 #include <QtCore/QEventLoop>
60 #include <QtCore/QDebug>
61 
62 #include <private/qguiapplication_p.h>
63 #include <private/qdnd_p.h>
64 
65 #include <private/qshapedpixmapdndwindow_p.h>
66 #include <private/qhighdpiscaling_p.h>
67 
68 QT_BEGIN_NAMESPACE
69 
70 #ifndef QT_NO_DRAGANDDROP
71 
72 static QWindow* topLevelAt(const QPoint &pos)
73 {
74     QWindowList list = QGuiApplication::topLevelWindows();
75     for (int i = list.count()-1; i >= 0; --i) {
76         QWindow *w = list.at(i);
77         if (w->isVisible() && w->geometry().contains(pos) && !qobject_cast<QShapedPixmapWindow*>(w))
78             return w;
79     }
80     return 0;
81 }
82 
83 /*!
84     \class QBasicDrag
85     \brief QBasicDrag is a base class for implementing platform drag and drop.
86     \since 5.0
87     \internal
88     \ingroup qpa
89 
90     QBasicDrag implements QPlatformDrag::drag() by running a local event loop in which
91     it tracks mouse movements and moves the drag icon (QShapedPixmapWindow) accordingly.
92     It provides new virtuals allowing for querying whether the receiving window
93     (within the Qt application or outside) accepts the drag and sets the state accordingly.
94 */
95 
96 QBasicDrag::QBasicDrag() :
97     m_restoreCursor(false), m_eventLoop(0),
98     m_executed_drop_action(Qt::IgnoreAction), m_can_drop(false),
99     m_drag(0), m_drag_icon_window(0), m_useCompositing(true),
100     m_screen(Q_NULLPTR)
101 {
102 }
103 
104 QBasicDrag::~QBasicDrag()
105 {
106     delete m_drag_icon_window;
107 }
108 
109 void QBasicDrag::enableEventFilter()
110 {
111     qApp->installEventFilter(this);
112 }
113 
114 void QBasicDrag::disableEventFilter()
115 {
116     qApp->removeEventFilter(this);
117 }
118 
119 
120 static inline QPoint getNativeMousePos(QEvent *e, QWindow *window)
121 {
122     return QHighDpi::toNativePixels(static_cast<QMouseEvent *>(e)->globalPos(), window);
123 }
124 
125 bool QBasicDrag::eventFilter(QObject *o, QEvent *e)
126 {
127     Q_UNUSED(o);
128 
129     if (!m_drag) {
130         if (e->type() == QEvent::KeyRelease && static_cast<QKeyEvent*>(e)->key() == Qt::Key_Escape) {
131             disableEventFilter();
132             exitDndEventLoop();
133             return true; // block the key release
134         }
135         return false;
136     }
137 
138     switch (e->type()) {
139         case QEvent::ShortcutOverride:
140             // prevent accelerators from firing while dragging
141             e->accept();
142             return true;
143 
144         case QEvent::KeyPress:
145         case QEvent::KeyRelease:
146         {
147             QKeyEvent *ke = static_cast<QKeyEvent *>(e);
148             if (ke->key() == Qt::Key_Escape && e->type() == QEvent::KeyPress) {
149                 cancel();
150                 disableEventFilter();
151                 exitDndEventLoop();
152 
153             }
154             return true; // Eat all key events
155         }
156 
157         case QEvent::MouseMove:
158         {
159             QPoint nativePosition = getNativeMousePos(e, m_drag_icon_window);
160             move(nativePosition);
161             return true; // Eat all mouse move events
162         }
163         case QEvent::MouseButtonRelease:
164         {
165             disableEventFilter();
166             if (canDrop()) {
167                 QPoint nativePosition = getNativeMousePos(e, m_drag_icon_window);
168                 drop(nativePosition);
169             } else {
170                 cancel();
171             }
172             exitDndEventLoop();
173 
174             const QMouseEvent *oldRelease = static_cast<QMouseEvent *>(e);
175             const QPoint windowPos(topLevelAt(oldRelease->globalPos())->mapFromGlobal(oldRelease->globalPos()));
176             QMouseEvent *newRelease = new QMouseEvent(oldRelease->type(),
177                 windowPos, windowPos, oldRelease->screenPos(),
178                 oldRelease->button(), oldRelease->buttons(),
179                 oldRelease->modifiers(), oldRelease->source());
180 
181             QCoreApplication::postEvent(o, newRelease);
182             return true; // defer mouse release events until drag event loop has returned
183         }
184         case QEvent::MouseButtonDblClick:
185         case QEvent::Wheel:
186             return true;
187         default:
188              break;
189     }
190     return false;
191 }
192 
193 Qt::DropAction QBasicDrag::drag(QDrag *o)
194 {
195     m_drag = o;
196     m_executed_drop_action = Qt::IgnoreAction;
197     m_can_drop = false;
198     m_restoreCursor = true;
199 #ifndef QT_NO_CURSOR
200     qApp->setOverrideCursor(Qt::DragCopyCursor);
201     updateCursor(m_executed_drop_action);
202 #endif
203     startDrag();
204     m_eventLoop = new QEventLoop;
205     m_eventLoop->exec();
206     delete m_eventLoop;
207     m_eventLoop = 0;
208     m_drag = 0;
209     endDrag();
210     return m_executed_drop_action;
211 }
212 
213 void QBasicDrag::cancelDrag()
214 {
215     if (m_eventLoop) {
216         cancel();
217         m_eventLoop->quit();
218     }
219 }
220 
221 void QBasicDrag::restoreCursor()
222 {
223     if (m_restoreCursor) {
224 #ifndef QT_NO_CURSOR
225         QGuiApplication::restoreOverrideCursor();
226 #endif
227         m_restoreCursor = false;
228     }
229 }
230 
231 void QBasicDrag::startDrag()
232 {
233     QPoint pos;
234 #ifndef QT_NO_CURSOR
235     pos = QCursor::pos();
236     if (pos.x() == int(qInf())) {
237         // ### fixme: no mouse pos registered. Get pos from touch...
238         pos = QPoint();
239     }
240 #endif
241     recreateShapedPixmapWindow(m_screen, pos);
242     enableEventFilter();
243 }
244 
245 void QBasicDrag::endDrag()
246 {
247 }
248 
249 void QBasicDrag::recreateShapedPixmapWindow(QScreen *screen, const QPoint &pos)
250 {
251     delete m_drag_icon_window;
252     // ### TODO Check if its really necessary to have m_drag_icon_window
253     // when QDrag is used without a pixmap - QDrag::setPixmap()
254     m_drag_icon_window = new QShapedPixmapWindow(screen);
255 
256     m_drag_icon_window->setUseCompositing(m_useCompositing);
257     m_drag_icon_window->setPixmap(m_drag->pixmap());
258     m_drag_icon_window->setHotspot(m_drag->hotSpot());
259     m_drag_icon_window->updateGeometry(pos);
260     m_drag_icon_window->setVisible(true);
261 }
262 
263 void QBasicDrag::cancel()
264 {
265     disableEventFilter();
266     restoreCursor();
267     m_drag_icon_window->setVisible(false);
268 }
269 
270 /*!
271   Move the drag label to \a globalPos, which is
272   interpreted in device independent coordinates. Typically called from reimplementations of move().
273  */
274 
275 void QBasicDrag::moveShapedPixmapWindow(const QPoint &globalPos)
276 {
277     if (m_drag)
278         m_drag_icon_window->updateGeometry(globalPos);
279 }
280 
281 void QBasicDrag::drop(const QPoint &)
282 {
283     disableEventFilter();
284     restoreCursor();
285     m_drag_icon_window->setVisible(false);
286 }
287 
288 void  QBasicDrag::exitDndEventLoop()
289 {
290     if (m_eventLoop && m_eventLoop->isRunning())
291         m_eventLoop->exit();
292 }
293 
294 void QBasicDrag::updateCursor(Qt::DropAction action)
295 {
296 #ifndef QT_NO_CURSOR
297     Qt::CursorShape cursorShape = Qt::ForbiddenCursor;
298     if (canDrop()) {
299         switch (action) {
300         case Qt::CopyAction:
301             cursorShape = Qt::DragCopyCursor;
302             break;
303         case Qt::LinkAction:
304             cursorShape = Qt::DragLinkCursor;
305             break;
306         default:
307             cursorShape = Qt::DragMoveCursor;
308             break;
309         }
310     }
311 
312     QCursor *cursor = QGuiApplication::overrideCursor();
313     QPixmap pixmap = m_drag->dragCursor(action);
314     if (!cursor) {
315         QGuiApplication::changeOverrideCursor((pixmap.isNull()) ? QCursor(cursorShape) : QCursor(pixmap));
316     } else {
317         if (!pixmap.isNull()) {
318             if ((cursor->pixmap().cacheKey() != pixmap.cacheKey())) {
319                 QGuiApplication::changeOverrideCursor(QCursor(pixmap));
320             }
321         } else {
322             if (cursorShape != cursor->shape()) {
323                 QGuiApplication::changeOverrideCursor(QCursor(cursorShape));
324             }
325         }
326     }
327 #endif
328     updateAction(action);
329 }
330 
331 
332 static inline QPoint fromNativeGlobalPixels(const QPoint &point)
333 {
334 #ifndef QT_NO_HIGHDPISCALING
335     QPoint res = point;
336     if (QHighDpiScaling::isActive()) {
337         for (const QScreen *s : qAsConst(QGuiApplicationPrivate::screen_list)) {
338             if (s->handle()->geometry().contains(point)) {
339                 res = QHighDpi::fromNativePixels(point, s);
340                 break;
341             }
342         }
343     }
344     return res;
345 #else
346     return point;
347 #endif
348 }
349 
350 /*!
351     \class QSimpleDrag
352     \brief QSimpleDrag implements QBasicDrag for Drag and Drop operations within the Qt Application itself.
353     \since 5.0
354     \internal
355     \ingroup qpa
356 
357     The class checks whether the receiving window is a window of the Qt application
358     and sets the state accordingly. It does not take windows of other applications
359     into account.
360 */
361 
362 QSimpleDrag::QSimpleDrag() : m_current_window(0)
363 {
364 }
365 
366 QMimeData *QSimpleDrag::platformDropData()
367 {
368     if (drag())
369         return drag()->mimeData();
370     return 0;
371 }
372 
373 void QSimpleDrag::startDrag()
374 {
375     QBasicDrag::startDrag();
376     m_current_window = topLevelAt(QCursor::pos());
377     if (m_current_window) {
378         QPlatformDragQtResponse response = QWindowSystemInterface::handleDrag(m_current_window, drag()->mimeData(), QHighDpi::toNativePixels(QCursor::pos(), m_current_window), drag()->supportedActions());
379         setCanDrop(response.isAccepted());
380         updateCursor(response.acceptedAction());
381     } else {
382         setCanDrop(false);
383         updateCursor(Qt::IgnoreAction);
384     }
385     setExecutedDropAction(Qt::IgnoreAction);
386 }
387 
388 void QSimpleDrag::cancel()
389 {
390     QBasicDrag::cancel();
391     if (drag() && m_current_window) {
392         QWindowSystemInterface::handleDrag(m_current_window, 0, QPoint(), Qt::IgnoreAction);
393         m_current_window = 0;
394     }
395 }
396 
397 void QSimpleDrag::move(const QPoint &nativeGlobalPos)
398 {
399     QPoint globalPos = fromNativeGlobalPixels(nativeGlobalPos);
400     moveShapedPixmapWindow(globalPos);
401     QWindow *window = topLevelAt(globalPos);
402     if (!window)
403         return;
404 
405     const QPoint pos = nativeGlobalPos - window->handle()->geometry().topLeft();
406     const QPlatformDragQtResponse qt_response =
407         QWindowSystemInterface::handleDrag(window, drag()->mimeData(), pos, drag()->supportedActions());
408 
409     updateCursor(qt_response.acceptedAction());
410     setCanDrop(qt_response.isAccepted());
411 }
412 
413 void QSimpleDrag::drop(const QPoint &nativeGlobalPos)
414 {
415     QPoint globalPos = fromNativeGlobalPixels(nativeGlobalPos);
416 
417     QBasicDrag::drop(nativeGlobalPos);
418     QWindow *window = topLevelAt(globalPos);
419     if (!window)
420         return;
421 
422     const QPoint pos = nativeGlobalPos - window->handle()->geometry().topLeft();
423     const QPlatformDropQtResponse response =
424             QWindowSystemInterface::handleDrop(window, drag()->mimeData(),pos, drag()->supportedActions());
425     if (response.isAccepted()) {
426         setExecutedDropAction(response.acceptedAction());
427     } else {
428         setExecutedDropAction(Qt::IgnoreAction);
429     }
430 }
431 
432 #endif // QT_NO_DRAGANDDROP
433 
434 QT_END_NAMESPACE
