Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the plugins of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qgtk3dialoghelpers.h"
41 #include "qgtk3theme.h"
42 
43 #include <qeventloop.h>
44 #include <qwindow.h>
45 #include <qcolor.h>
46 #include <qdebug.h>
47 #include <qfont.h>
48 
49 #include <private/qguiapplication_p.h>
50 #include <qpa/qplatformfontdatabase.h>
51 
52 #undef signals
53 #include <gtk/gtk.h>
54 #include <gdk/gdk.h>
55 #include <gdk/gdkx.h>
56 #include <pango/pango.h>
57 
58 QT_BEGIN_NAMESPACE
59 
60 static const char* standardButtonText(int button)
61 {
62     return qUtf8Printable(QGtk3Theme::defaultStandardButtonText(button));
63 }
64 
65 class QGtk3Dialog : public QWindow
66 {
67     Q_OBJECT
68 
69 public:
70     QGtk3Dialog(GtkWidget *gtkWidget);
71     ~QGtk3Dialog();
72 
73     GtkDialog *gtkDialog() const;
74 
75     void exec();
76     bool show(Qt::WindowFlags flags, Qt::WindowModality modality, QWindow *parent);
77     void hide();
78 
79 Q_SIGNALS:
80     void accept();
81     void reject();
82 
83 protected:
84     static void onResponse(QGtk3Dialog *dialog, int response);
85 
86 private slots:
87     void onParentWindowDestroyed();
88 
89 private:
90     GtkWidget *gtkWidget;
91 };
92 
93 QGtk3Dialog::QGtk3Dialog(GtkWidget *gtkWidget) : gtkWidget(gtkWidget)
94 {
95     g_signal_connect_swapped(G_OBJECT(gtkWidget), "response", G_CALLBACK(onResponse), this);
96     g_signal_connect(G_OBJECT(gtkWidget), "delete-event", G_CALLBACK(gtk_widget_hide_on_delete), NULL);
97 }
98 
99 QGtk3Dialog::~QGtk3Dialog()
100 {
101     gtk_clipboard_store(gtk_clipboard_get(GDK_SELECTION_CLIPBOARD));
102     gtk_widget_destroy(gtkWidget);
103 }
104 
105 GtkDialog *QGtk3Dialog::gtkDialog() const
106 {
107     return GTK_DIALOG(gtkWidget);
108 }
109 
110 void QGtk3Dialog::exec()
111 {
112     if (modality() == Qt::ApplicationModal) {
113         // block input to the whole app, including other GTK dialogs
114         gtk_dialog_run(gtkDialog());
115     } else {
116         // block input to the window, allow input to other GTK dialogs
117         QEventLoop loop;
118         connect(this, SIGNAL(accept()), &loop, SLOT(quit()));
119         connect(this, SIGNAL(reject()), &loop, SLOT(quit()));
120         loop.exec();
121     }
122 }
123 
124 bool QGtk3Dialog::show(Qt::WindowFlags flags, Qt::WindowModality modality, QWindow *parent)
125 {
126     if (parent) {
127         connect(parent, &QWindow::destroyed, this, &QGtk3Dialog::onParentWindowDestroyed,
128                 Qt::UniqueConnection);
129     }
130     setParent(parent);
131     setFlags(flags);
132     setModality(modality);
133 
134     gtk_widget_realize(gtkWidget); // creates X window
135 
136     GdkWindow *gdkWindow = gtk_widget_get_window(gtkWidget);
137     if (parent) {
138         if (GDK_IS_X11_WINDOW(gdkWindow)) {
139             GdkDisplay *gdkDisplay = gdk_window_get_display(gdkWindow);
140             XSetTransientForHint(gdk_x11_display_get_xdisplay(gdkDisplay),
141                                  gdk_x11_window_get_xid(gdkWindow),
142                                  parent->winId());
143         }
144     }
145 
146     if (modality != Qt::NonModal) {
147         gdk_window_set_modal_hint(gdkWindow, true);
148         QGuiApplicationPrivate::showModalWindow(this);
149     }
150 
151     gtk_widget_show(gtkWidget);
152     gdk_window_focus(gdkWindow, GDK_CURRENT_TIME);
153     return true;
154 }
155 
156 void QGtk3Dialog::hide()
157 {
158     QGuiApplicationPrivate::hideModalWindow(this);
159     gtk_widget_hide(gtkWidget);
160 }
161 
162 void QGtk3Dialog::onResponse(QGtk3Dialog *dialog, int response)
163 {
164     if (response == GTK_RESPONSE_OK)
165         emit dialog->accept();
166     else
167         emit dialog->reject();
168 }
169 
170 void QGtk3Dialog::onParentWindowDestroyed()
171 {
172     // The QGtk3*DialogHelper classes own this object. Make sure the parent doesn't delete it.
173     setParent(0);
174 }
175 
176 QGtk3ColorDialogHelper::QGtk3ColorDialogHelper()
177 {
178     d.reset(new QGtk3Dialog(gtk_color_chooser_dialog_new("", 0)));
179     connect(d.data(), SIGNAL(accept()), this, SLOT(onAccepted()));
180     connect(d.data(), SIGNAL(reject()), this, SIGNAL(reject()));
181 
182     g_signal_connect_swapped(d->gtkDialog(), "notify::rgba", G_CALLBACK(onColorChanged), this);
183 }
184 
185 QGtk3ColorDialogHelper::~QGtk3ColorDialogHelper()
186 {
187 }
188 
189 bool QGtk3ColorDialogHelper::show(Qt::WindowFlags flags, Qt::WindowModality modality, QWindow *parent)
190 {
191     applyOptions();
192     return d->show(flags, modality, parent);
193 }
194 
195 void QGtk3ColorDialogHelper::exec()
196 {
197     d->exec();
198 }
199 
200 void QGtk3ColorDialogHelper::hide()
201 {
202     d->hide();
203 }
204 
205 void QGtk3ColorDialogHelper::setCurrentColor(const QColor &color)
206 {
207     GtkDialog *gtkDialog = d->gtkDialog();
208     if (color.alpha() < 255)
209         gtk_color_chooser_set_use_alpha(GTK_COLOR_CHOOSER(gtkDialog), true);
210     GdkRGBA gdkColor;
211     gdkColor.red = color.redF();
212     gdkColor.green = color.greenF();
213     gdkColor.blue = color.blueF();
214     gdkColor.alpha = color.alphaF();
215     gtk_color_chooser_set_rgba(GTK_COLOR_CHOOSER(gtkDialog), &gdkColor);
216 }
217 
218 QColor QGtk3ColorDialogHelper::currentColor() const
219 {
220     GtkDialog *gtkDialog = d->gtkDialog();
221     GdkRGBA gdkColor;
222     gtk_color_chooser_get_rgba(GTK_COLOR_CHOOSER(gtkDialog), &gdkColor);
223     return QColor::fromRgbF(gdkColor.red, gdkColor.green, gdkColor.blue, gdkColor.alpha);
224 }
225 
226 void QGtk3ColorDialogHelper::onAccepted()
227 {
228     emit accept();
229 }
230 
231 void QGtk3ColorDialogHelper::onColorChanged(QGtk3ColorDialogHelper *dialog)
232 {
233     emit dialog->currentColorChanged(dialog->currentColor());
234 }
235 
236 void QGtk3ColorDialogHelper::applyOptions()
237 {
238     GtkDialog *gtkDialog = d->gtkDialog();
239     gtk_window_set_title(GTK_WINDOW(gtkDialog), qUtf8Printable(options()->windowTitle()));
240 
241     gtk_color_chooser_set_use_alpha(GTK_COLOR_CHOOSER(gtkDialog), options()->testOption(QColorDialogOptions::ShowAlphaChannel));
242 }
243 
244 QGtk3FileDialogHelper::QGtk3FileDialogHelper()
245 {
246     d.reset(new QGtk3Dialog(gtk_file_chooser_dialog_new("", 0,
247                                                         GTK_FILE_CHOOSER_ACTION_OPEN,
248                                                         standardButtonText(QPlatformDialogHelper::Cancel), GTK_RESPONSE_CANCEL,
249                                                         standardButtonText(QPlatformDialogHelper::Ok), GTK_RESPONSE_OK,
250                                                         NULL)));
251 
252     connect(d.data(), SIGNAL(accept()), this, SLOT(onAccepted()));
253     connect(d.data(), SIGNAL(reject()), this, SIGNAL(reject()));
254 
255     g_signal_connect(GTK_FILE_CHOOSER(d->gtkDialog()), "selection-changed", G_CALLBACK(onSelectionChanged), this);
256     g_signal_connect_swapped(GTK_FILE_CHOOSER(d->gtkDialog()), "current-folder-changed", G_CALLBACK(onCurrentFolderChanged), this);
257     g_signal_connect_swapped(GTK_FILE_CHOOSER(d->gtkDialog()), "notify::filter", G_CALLBACK(onFilterChanged), this);
258 }
259 
260 QGtk3FileDialogHelper::~QGtk3FileDialogHelper()
261 {
262 }
263 
264 bool QGtk3FileDialogHelper::show(Qt::WindowFlags flags, Qt::WindowModality modality, QWindow *parent)
265 {
266     _dir.clear();
267     _selection.clear();
268 
269     applyOptions();
270     return d->show(flags, modality, parent);
271 }
272 
273 void QGtk3FileDialogHelper::exec()
274 {
275     d->exec();
276 }
277 
278 void QGtk3FileDialogHelper::hide()
279 {
280     // After GtkFileChooserDialog has been hidden, gtk_file_chooser_get_current_folder()
281     // & gtk_file_chooser_get_filenames() will return bogus values -> cache the actual
282     // values before hiding the dialog
283     _dir = directory();
284     _selection = selectedFiles();
285 
286     d->hide();
287 }
288 
289 bool QGtk3FileDialogHelper::defaultNameFilterDisables() const
290 {
291     return false;
292 }
293 
294 void QGtk3FileDialogHelper::setDirectory(const QUrl &directory)
295 {
296     GtkDialog *gtkDialog = d->gtkDialog();
297     gtk_file_chooser_set_current_folder(GTK_FILE_CHOOSER(gtkDialog), qUtf8Printable(directory.toLocalFile()));
298 }
299 
300 QUrl QGtk3FileDialogHelper::directory() const
301 {
302     // While GtkFileChooserDialog is hidden, gtk_file_chooser_get_current_folder()
303     // returns a bogus value -> return the cached value before hiding
304     if (!_dir.isEmpty())
305         return _dir;
306 
307     QString ret;
308     GtkDialog *gtkDialog = d->gtkDialog();
309     gchar *folder = gtk_file_chooser_get_current_folder(GTK_FILE_CHOOSER(gtkDialog));
310     if (folder) {
311         ret = QString::fromUtf8(folder);
312         g_free(folder);
313     }
314     return QUrl::fromLocalFile(ret);
315 }
316 
317 void QGtk3FileDialogHelper::selectFile(const QUrl &filename)
318 {
319     setFileChooserAction();
320     selectFileInternal(filename);
321 }
322 
323 void QGtk3FileDialogHelper::selectFileInternal(const QUrl &filename)
324 {
325     GtkDialog *gtkDialog = d->gtkDialog();
326     if (options()->acceptMode() == QFileDialogOptions::AcceptSave) {
327         QFileInfo fi(filename.toLocalFile());
328         gtk_file_chooser_set_current_folder(GTK_FILE_CHOOSER(gtkDialog), qUtf8Printable(fi.path()));
329         gtk_file_chooser_set_current_name(GTK_FILE_CHOOSER(gtkDialog), qUtf8Printable(fi.fileName()));
330     } else {
331         gtk_file_chooser_select_filename(GTK_FILE_CHOOSER(gtkDialog), qUtf8Printable(filename.toLocalFile()));
332     }
333 }
334 
335 QList<QUrl> QGtk3FileDialogHelper::selectedFiles() const
336 {
337     // While GtkFileChooserDialog is hidden, gtk_file_chooser_get_filenames()
338     // returns a bogus value -> return the cached value before hiding
339     if (!_selection.isEmpty())
340         return _selection;
341 
342     QList<QUrl> selection;
343     GtkDialog *gtkDialog = d->gtkDialog();
344     GSList *filenames = gtk_file_chooser_get_filenames(GTK_FILE_CHOOSER(gtkDialog));
345     for (GSList *it  = filenames; it; it = it->next)
346         selection += QUrl::fromLocalFile(QString::fromUtf8((const char*)it->data));
347     g_slist_free(filenames);
348     return selection;
349 }
350 
351 void QGtk3FileDialogHelper::setFilter()
352 {
353     applyOptions();
354 }
355 
356 void QGtk3FileDialogHelper::selectNameFilter(const QString &filter)
357 {
358     GtkFileFilter *gtkFilter = _filters.value(filter);
359     if (gtkFilter) {
360         GtkDialog *gtkDialog = d->gtkDialog();
361         gtk_file_chooser_set_filter(GTK_FILE_CHOOSER(gtkDialog), gtkFilter);
362     }
363 }
364 
365 QString QGtk3FileDialogHelper::selectedNameFilter() const
366 {
367     GtkDialog *gtkDialog = d->gtkDialog();
368     GtkFileFilter *gtkFilter = gtk_file_chooser_get_filter(GTK_FILE_CHOOSER(gtkDialog));
369     return _filterNames.value(gtkFilter);
370 }
371 
372 void QGtk3FileDialogHelper::onAccepted()
373 {
374     emit accept();
375 }
376 
377 void QGtk3FileDialogHelper::onSelectionChanged(GtkDialog *gtkDialog, QGtk3FileDialogHelper *helper)
378 {
379     QString selection;
380     gchar *filename = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(gtkDialog));
381     if (filename) {
382         selection = QString::fromUtf8(filename);
383         g_free(filename);
384     }
385     emit helper->currentChanged(QUrl::fromLocalFile(selection));
386 }
387 
388 void QGtk3FileDialogHelper::onCurrentFolderChanged(QGtk3FileDialogHelper *dialog)
389 {
390     emit dialog->directoryEntered(dialog->directory());
391 }
392 
393 void QGtk3FileDialogHelper::onFilterChanged(QGtk3FileDialogHelper *dialog)
394 {
395     emit dialog->filterSelected(dialog->selectedNameFilter());
396 }
397 
398 static GtkFileChooserAction gtkFileChooserAction(const QSharedPointer<QFileDialogOptions> &options)
399 {
400     switch (options->fileMode()) {
401     case QFileDialogOptions::AnyFile:
402     case QFileDialogOptions::ExistingFile:
403     case QFileDialogOptions::ExistingFiles:
404         if (options->acceptMode() == QFileDialogOptions::AcceptOpen)
405             return GTK_FILE_CHOOSER_ACTION_OPEN;
406         else
407             return GTK_FILE_CHOOSER_ACTION_SAVE;
408     case QFileDialogOptions::Directory:
409     case QFileDialogOptions::DirectoryOnly:
410     default:
411         if (options->acceptMode() == QFileDialogOptions::AcceptOpen)
412             return GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER;
413         else
414             return GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER;
415     }
416 }
417 
418 void QGtk3FileDialogHelper::setFileChooserAction()
419 {
420     GtkDialog *gtkDialog = d->gtkDialog();
421 
422     const GtkFileChooserAction action = gtkFileChooserAction(options());
423     gtk_file_chooser_set_action(GTK_FILE_CHOOSER(gtkDialog), action);
424 }
425 
426 void QGtk3FileDialogHelper::applyOptions()
427 {
428     GtkDialog *gtkDialog = d->gtkDialog();
429     const QSharedPointer<QFileDialogOptions> &opts = options();
430 
431     gtk_window_set_title(GTK_WINDOW(gtkDialog), qUtf8Printable(opts->windowTitle()));
432     gtk_file_chooser_set_local_only(GTK_FILE_CHOOSER(gtkDialog), true);
433 
434     setFileChooserAction();
435 
436     const bool selectMultiple = opts->fileMode() == QFileDialogOptions::ExistingFiles;
437     gtk_file_chooser_set_select_multiple(GTK_FILE_CHOOSER(gtkDialog), selectMultiple);
438 
439     const bool confirmOverwrite = !opts->testOption(QFileDialogOptions::DontConfirmOverwrite);
440     gtk_file_chooser_set_do_overwrite_confirmation(GTK_FILE_CHOOSER(gtkDialog), confirmOverwrite);
441 
442     const bool readOnly = opts->testOption(QFileDialogOptions::ReadOnly);
443     gtk_file_chooser_set_create_folders(GTK_FILE_CHOOSER(gtkDialog), !readOnly);
444 
445     const QStringList nameFilters = opts->nameFilters();
446     if (!nameFilters.isEmpty())
447         setNameFilters(nameFilters);
448 
449     if (opts->initialDirectory().isLocalFile())
450         setDirectory(opts->initialDirectory());
451 
452     foreach (const QUrl &filename, opts->initiallySelectedFiles())
453         selectFileInternal(filename);
454 
455     const QString initialNameFilter = opts->initiallySelectedNameFilter();
456     if (!initialNameFilter.isEmpty())
457         selectNameFilter(initialNameFilter);
458 
459     GtkWidget *acceptButton = gtk_dialog_get_widget_for_response(gtkDialog, GTK_RESPONSE_OK);
460     if (acceptButton) {
461         if (opts->isLabelExplicitlySet(QFileDialogOptions::Accept))
462             gtk_button_set_label(GTK_BUTTON(acceptButton), qUtf8Printable(opts->labelText(QFileDialogOptions::Accept)));
463         else if (opts->acceptMode() == QFileDialogOptions::AcceptOpen)
464             gtk_button_set_label(GTK_BUTTON(acceptButton), standardButtonText(QPlatformDialogHelper::Open));
465         else
466             gtk_button_set_label(GTK_BUTTON(acceptButton), standardButtonText(QPlatformDialogHelper::Save));
467     }
468 
469     GtkWidget *rejectButton = gtk_dialog_get_widget_for_response(gtkDialog, GTK_RESPONSE_CANCEL);
470     if (rejectButton) {
471         if (opts->isLabelExplicitlySet(QFileDialogOptions::Reject))
472             gtk_button_set_label(GTK_BUTTON(rejectButton), qUtf8Printable(opts->labelText(QFileDialogOptions::Reject)));
473         else
474             gtk_button_set_label(GTK_BUTTON(rejectButton), standardButtonText(QPlatformDialogHelper::Cancel));
475     }
476 }
477 
478 void QGtk3FileDialogHelper::setNameFilters(const QStringList &filters)
479 {
480     GtkDialog *gtkDialog = d->gtkDialog();
481     foreach (GtkFileFilter *filter, _filters)
482         gtk_file_chooser_remove_filter(GTK_FILE_CHOOSER(gtkDialog), filter);
483 
484     _filters.clear();
485     _filterNames.clear();
486 
487     foreach (const QString &filter, filters) {
488         GtkFileFilter *gtkFilter = gtk_file_filter_new();
489         const QStringRef name = filter.leftRef(filter.indexOf(QLatin1Char('(')));
490         const QStringList extensions = cleanFilterList(filter);
491 
492         gtk_file_filter_set_name(gtkFilter, name.isEmpty() ? extensions.join(qUtf8Printable(QLatin1String(", "))) : qUtf8Printable(name));
493         foreach (const QString &ext, extensions)
494             gtk_file_filter_add_pattern(gtkFilter, qUtf8Printable(ext));
495 
496         gtk_file_chooser_add_filter(GTK_FILE_CHOOSER(gtkDialog), gtkFilter);
497 
498         _filters.insert(filter, gtkFilter);
499         _filterNames.insert(gtkFilter, filter);
500     }
501 }
502 
503 QGtk3FontDialogHelper::QGtk3FontDialogHelper()
504 {
505     d.reset(new QGtk3Dialog(gtk_font_chooser_dialog_new("", 0)));
506     connect(d.data(), SIGNAL(accept()), this, SLOT(onAccepted()));
507     connect(d.data(), SIGNAL(reject()), this, SIGNAL(reject()));
508 
509     g_signal_connect_swapped(d->gtkDialog(), "notify::font", G_CALLBACK(onFontChanged), this);
510 }
511 
512 QGtk3FontDialogHelper::~QGtk3FontDialogHelper()
513 {
514 }
515 
516 bool QGtk3FontDialogHelper::show(Qt::WindowFlags flags, Qt::WindowModality modality, QWindow *parent)
517 {
518     applyOptions();
519     return d->show(flags, modality, parent);
520 }
521 
522 void QGtk3FontDialogHelper::exec()
523 {
524     d->exec();
525 }
526 
527 void QGtk3FontDialogHelper::hide()
528 {
529     d->hide();
530 }
531 
532 static QString qt_fontToString(const QFont &font)
533 {
534     PangoFontDescription *desc = pango_font_description_new();
535     pango_font_description_set_size(desc, (font.pointSizeF() > 0.0 ? font.pointSizeF() : QFontInfo(font).pointSizeF()) * PANGO_SCALE);
536     pango_font_description_set_family(desc, qUtf8Printable(QFontInfo(font).family()));
537 
538     int weight = font.weight();
539     if (weight >= QFont::Black)
540         pango_font_description_set_weight(desc, PANGO_WEIGHT_HEAVY);
541     else if (weight >= QFont::ExtraBold)
542         pango_font_description_set_weight(desc, PANGO_WEIGHT_ULTRABOLD);
543     else if (weight >= QFont::Bold)
544         pango_font_description_set_weight(desc, PANGO_WEIGHT_BOLD);
545     else if (weight >= QFont::DemiBold)
546         pango_font_description_set_weight(desc, PANGO_WEIGHT_SEMIBOLD);
547     else if (weight >= QFont::Medium)
548         pango_font_description_set_weight(desc, PANGO_WEIGHT_MEDIUM);
549     else if (weight >= QFont::Normal)
550         pango_font_description_set_weight(desc, PANGO_WEIGHT_NORMAL);
551     else if (weight >= QFont::Light)
552         pango_font_description_set_weight(desc, PANGO_WEIGHT_LIGHT);
553     else if (weight >= QFont::ExtraLight)
554         pango_font_description_set_weight(desc, PANGO_WEIGHT_ULTRALIGHT);
555     else
556         pango_font_description_set_weight(desc, PANGO_WEIGHT_THIN);
557 
558     int style = font.style();
559     if (style == QFont::StyleItalic)
560         pango_font_description_set_style(desc, PANGO_STYLE_ITALIC);
561     else if (style == QFont::StyleOblique)
562         pango_font_description_set_style(desc, PANGO_STYLE_OBLIQUE);
563     else
564         pango_font_description_set_style(desc, PANGO_STYLE_NORMAL);
565 
566     char *str = pango_font_description_to_string(desc);
567     QString name = QString::fromUtf8(str);
568     pango_font_description_free(desc);
569     g_free(str);
570     return name;
571 }
572 
573 static QFont qt_fontFromString(const QString &name)
574 {
575     QFont font;
576     PangoFontDescription *desc = pango_font_description_from_string(qUtf8Printable(name));
577     font.setPointSizeF(static_cast<float>(pango_font_description_get_size(desc)) / PANGO_SCALE);
578 
579     QString family = QString::fromUtf8(pango_font_description_get_family(desc));
580     if (!family.isEmpty())
581         font.setFamily(family);
582 
583     const int weight = pango_font_description_get_weight(desc);
584     font.setWeight(QPlatformFontDatabase::weightFromInteger(weight));
585 
586     PangoStyle style = pango_font_description_get_style(desc);
587     if (style == PANGO_STYLE_ITALIC)
588         font.setStyle(QFont::StyleItalic);
589     else if (style == PANGO_STYLE_OBLIQUE)
590         font.setStyle(QFont::StyleOblique);
591     else
592         font.setStyle(QFont::StyleNormal);
593 
594     pango_font_description_free(desc);
595     return font;
596 }
597 
598 void QGtk3FontDialogHelper::setCurrentFont(const QFont &font)
599 {
600     GtkFontChooser *gtkDialog = GTK_FONT_CHOOSER(d->gtkDialog());
601     gtk_font_chooser_set_font(gtkDialog, qUtf8Printable(qt_fontToString(font)));
602 }
603 
604 QFont QGtk3FontDialogHelper::currentFont() const
605 {
606     GtkFontChooser *gtkDialog = GTK_FONT_CHOOSER(d->gtkDialog());
607     gchar *name = gtk_font_chooser_get_font(gtkDialog);
608     QFont font = qt_fontFromString(QString::fromUtf8(name));
609     g_free(name);
610     return font;
611 }
612 
613 void QGtk3FontDialogHelper::onAccepted()
614 {
615     emit accept();
616 }
617 
618 void QGtk3FontDialogHelper::onFontChanged(QGtk3FontDialogHelper *dialog)
619 {
620     emit dialog->currentFontChanged(dialog->currentFont());
621 }
622 
623 void QGtk3FontDialogHelper::applyOptions()
624 {
625     GtkDialog *gtkDialog = d->gtkDialog();
626     const QSharedPointer<QFontDialogOptions> &opts = options();
627 
628     gtk_window_set_title(GTK_WINDOW(gtkDialog), qUtf8Printable(opts->windowTitle()));
629 }
630 
631 QT_END_NAMESPACE
632 
633 #include "qgtk3dialoghelpers.moc"
