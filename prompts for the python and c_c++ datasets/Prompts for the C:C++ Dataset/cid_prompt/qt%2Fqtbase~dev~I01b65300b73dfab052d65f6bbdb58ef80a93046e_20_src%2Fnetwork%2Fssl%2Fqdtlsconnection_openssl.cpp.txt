Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2017 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtNetwork module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "private/qnativesocketengine_p.h"
41 
42 #include "qsslsocket_openssl_symbols_p.h"
43 #include "qdtlsconnection_openssl_p.h"
44 #include "qsslcontext_openssl_p.h"
45 #include "qdtlsconnection.h"
46 #include "qsslsocket.h"
47 #include "qssl_p.h"
48 
49 #include "qmessageauthenticationcode.h"
50 #include "qcryptographichash.h"
51 
52 #include "qnetworkdatagram_p.h"
53 
54 #include "private/qthread_p.h"
55 
56 #include "qdebug.h"
57 
58 
59 // DTLSTODO: Windows ....
60 #include <netinet/in.h>
61 
62 #include <cstring>
63 #include <cstddef>
64 
65 QT_BEGIN_NAMESPACE
66 
67 namespace {
68 
69 #if QT_CONFIG(opensslv11)
70 
71 // Not here yet ...
72 
73 #else // opensslv11
74 
75 QByteArray qt_get_cookie_material_for_connection(SSL *ssl)
76 {
77     Q_ASSERT(ssl);
78 
79     // SSL_get_rbio does not increment the reference count:
80     BIO *readChannel = q_SSL_get_rbio(ssl);
81     if (!readChannel) {
82         qCWarning(lcSsl) << "failed to read peer's address";
83         return {};
84     }
85 
86     qt_sockaddr peer;
87     if (q_BIO_dgram_get_peer(readChannel, &peer) <= 0) {
88         qCWarning(lcSsl) << "BIO_dgram_get_peer failed";
89         return {};
90     }
91 
92     QByteArray peerData;
93     char *dst = nullptr;
94     switch (peer.a.sa_family) {
95     case AF_INET:
96         peerData.resize(int(sizeof(in_addr) + sizeof peer.a4.sin_port));
97         dst = peerData.data();
98         std::memcpy(dst, &peer.a4.sin_port, sizeof peer.a4.sin_port);
99         dst += sizeof peer.a4.sin_port;
100         std::memcpy(dst, &peer.a4.sin_addr, sizeof(in_addr));
101         break;
102     case AF_INET6:
103         peerData.resize(int(sizeof(in6_addr) + sizeof peer.a6.sin6_port));
104         dst = peerData.data();
105         std::memcpy(dst, &peer.a6.sin6_port, sizeof peer.a6.sin6_port);
106         dst += sizeof peer.a6.sin6_port;
107         std::memcpy(dst, &peer.a6.sin6_addr, sizeof(in6_addr));
108         break;
109     default:;
110     }
111 
112     return peerData;
113 }
114 
115 void qt_set_BIO_connected(BIO *bio, const QHostAddress &peerAddress, quint16 peerPort)
116 {
117     Q_ASSERT(bio);
118 
119     // qt_sockaddr is something similar to what OpenSSL 1.1 has in bio_addr_st.
120     qt_sockaddr peer;
121     if (peerAddress.protocol() == QAbstractSocket::IPv6Protocol) {
122         memset(&peer.a, 0, sizeof(sockaddr_in6));
123         peer.a6.sin6_family = AF_INET6;
124         peer.a6.sin6_port = htons(peerPort);
125         Q_IPV6ADDR tmp = peerAddress.toIPv6Address();
126         memcpy(&peer.a6.sin6_addr, &tmp, sizeof(tmp));
127         SetSALen::set(&peer.a6, sizeof(sockaddr_in6));
128     } else if (peerAddress.protocol() == QAbstractSocket::IPv4Protocol) {
129         memset(&peer.a, 0, sizeof(sockaddr_in));
130         peer.a4.sin_family = AF_INET;
131         peer.a4.sin_port = htons(peerPort);
132         peer.a4.sin_addr.s_addr = htonl(peerAddress.toIPv4Address());
133         SetSALen::set(&peer.a, sizeof(sockaddr_in));
134     } else {
135         Q_UNREACHABLE();
136     }
137 
138     q_BIO_ctrl(bio, BIO_CTRL_DGRAM_SET_CONNECTED, 0, &peer);
139 }
140 
141 #endif // !opensslv11
142 
143 struct CookieSecret
144 {
145     CookieSecret()
146     {
147         // DTLSTODO :where did I find this 16? Why is it hardcoded?
148         key.resize(16);
149         const int status = q_RAND_bytes(reinterpret_cast<unsigned char *>(key.data()),
150                                         key.size());
151         if (status <= 0)
152             key.clear();
153     }
154 
155     QByteArray key;
156 
157     Q_DISABLE_COPY(CookieSecret)
158 };
159 
160 } // unnamed namespace
161 
162 void SslConnectionGuard::SslDeleter::cleanup(SSL *ssl)
163 {
164     if (ssl)
165         q_SSL_free(ssl);
166 }
167 
168 QDtlsConnectionOpenSSL::~QDtlsConnectionOpenSSL()
169 {
170 }
171 
172 void QDtlsConnectionOpenSSL::readNotification()
173 {
174     Q_Q(QDtlsConnection);
175 
176     if (encryptionState == QDtlsConnection::InHandshake) {
177         continueHandshake();
178         return;
179     } else if (socketEngine->hasPendingDatagrams()) {
180         if (encryptionState == QDtlsConnection::Encrypted) {
181             emit q->readyRead();
182         } else if (side == QDtlsConnection::Server) {
183             if (!initTls()) {
184                 // DTLSTODO: set error/description, emit.
185                 qCWarning(lcSsl) << "cannot send a HelloVerifyRequest";
186                 return;
187             }
188 
189             verifyClientHello();
190         } // else - we ignore.
191     }
192 }
193 
194 void QDtlsConnectionOpenSSL::writeNotification()
195 {
196     if (encryptionState == QDtlsConnection::InHandshake)
197         continueHandshake();
198 }
199 
200 void QDtlsConnectionOpenSSL::closeNotification()
201 {
202     Q_UNIMPLEMENTED();
203 }
204 
205 void QDtlsConnectionOpenSSL::exceptionNotification()
206 {
207     Q_UNIMPLEMENTED();
208 }
209 
210 void QDtlsConnectionOpenSSL::connectionNotification()
211 {
212     Q_UNIMPLEMENTED();
213 }
214 
215 void QDtlsConnectionOpenSSL::proxyAuthenticationRequired(const QNetworkProxy &proxy,
216                                                          QAuthenticator *authenticator)
217 {
218     Q_UNUSED(proxy) Q_UNUSED(authenticator)
219     Q_UNIMPLEMENTED();
220 }
221 
222 bool QDtlsConnectionOpenSSL::initTls()
223 {
224     if (sslContext)
225         return true;
226 
227     if (!QSslSocket::supportsSsl())
228         return false;
229 
230     // create a deep copy of our configuration
231     QSslConfigurationPrivate *configurationCopy = new QSslConfigurationPrivate(configuration);
232     configurationCopy->ref.store(0); // the QSslConfiguration constructor refs up
233 
234     // DTLSTODO: check we do not set something DTLS-incompatible there ...
235     SslContextGuard newContext(QSslContext::sharedFromConfiguration(sideToMode(), configurationCopy, true));
236     if (!newContext) {
237         qCWarning(lcSsl) << "QSslContext::sharedFromConfiguration failed";
238         return false;
239     }
240 
241     SslConnectionGuard newConnection(newContext.createSsl());
242     if (!newConnection) {
243         qCWarning(lcSsl) << "SSL_new failed";
244         // DTLSTODO: be more specific why ...
245         return false;
246     }
247 
248     Q_ASSERT(socketEngine.data());
249     BIO *bio = q_BIO_new_dgram(socketEngine->socketDescriptor(), BIO_NOCLOSE);
250     if (!bio) {
251         qCWarning(lcSsl) << "BIO_new_dgram failed";
252         return false;
253     }
254 
255     q_SSL_set_bio(newConnection, bio, bio);
256 
257     if (side == QDtlsConnection::Server) {
258         q_SSL_CTX_set_cookie_generate_cb(newContext, generateCookieCallback);
259         q_SSL_CTX_set_cookie_verify_cb(newContext, (pre11VerifyCallbackType)verifyCookieCallback);
260         q_SSL_set_options(newConnection, SSL_OP_COOKIE_EXCHANGE);
261     } else {
262         Q_ASSERT(side == QDtlsConnection::Client);
263         Q_ASSERT(socketState == QAbstractSocket::ConnectedState);
264         qt_set_BIO_connected(q_SSL_get_rbio(newConnection), peerAddress, peerPort);
265         // DTLSTODO: this is only temporarily!!! I need it for tests and
266         // a proper solution ...
267         SSL_set_options(newConnection, SSL_OP_NO_QUERY_MTU);
268         DTLS_set_link_mtu(newConnection, 1024);
269     }
270 
271     sslContext.swap(newContext);
272     sslConnection.swap(newConnection);
273 
274     return true;
275 }
276 
277 bool QDtlsConnectionOpenSSL::connectToHost(const QHostAddress &address, quint16 port)
278 {
279     if (!QDtlsConnectionPrivate::connectToHost(address, port))
280         return false;
281 
282     // Check for consistency!
283     if (side == QDtlsConnection::Server) {
284         Q_ASSERT(sslConnection);
285         // SSL_get_rbio does not ref-up a counter.
286         auto bio = q_SSL_get_rbio(sslConnection);
287         Q_ASSERT(bio);
288         qt_set_BIO_connected(bio, address, port);
289     }
290 
291     return true;
292 }
293 
294 bool QDtlsConnectionOpenSSL::startHandshake()
295 {
296     Q_Q(QDtlsConnection);
297 
298     if (socketState != QAbstractSocket::ConnectedState) {
299         qCWarning(lcSsl) << "cannot start handshake, must be in ConnectedState";
300         return false;
301     }
302 
303     if (encryptionState == QDtlsConnection::Encrypted) {
304         qCWarning(lcSsl) << "cannot start handshake, already encrypted";
305         return false;
306     }
307 
308     if (!initTls()) {
309         // initTls already reported an error.
310         return false;
311     }
312 
313     Q_ASSERT(sslConnection);
314 
315     encryptionState = QDtlsConnection::InHandshake;
316     const bool isClient = side == QDtlsConnection::Client;
317     const int result = isClient ? q_SSL_connect(sslConnection) : q_SSL_accept(sslConnection);
318 
319     if (result > 0) {
320         encryptionState = QDtlsConnection::Encrypted;
321         emit q->encrypted();
322     } else {
323         switch (q_SSL_get_error(sslConnection, result)) {
324         case SSL_ERROR_WANT_READ:
325         case SSL_ERROR_WANT_WRITE:
326             // The handshake is not yet complete.
327             break;
328         default: {
329             }
330         }
331     }
332 
333     return true;
334 }
335 
336 bool QDtlsConnectionOpenSSL::continueHandshake()
337 {
338     return startHandshake();
339 }
340 
341 QSslSocket::SslMode QDtlsConnectionOpenSSL::sideToMode() const
342 {
343     return side == QDtlsConnection::Server ? QSslSocket::SslServerMode
344                                            : QSslSocket::SslClientMode;
345 }
346 
347 #if QT_CONFIG(opensslv11)
348 void QDtlsConnectionOpenSSL::verifyClientHello()
349 {
350 }
351 #else // opensslv11
352 
353 void QDtlsConnectionOpenSSL::verifyClientHello()
354 {
355     Q_Q(QDtlsConnection);
356 
357     Q_ASSERT(sslConnection);
358 
359     qt_sockaddr peer;
360     if (q_DTLSv1_listen(sslConnection, &peer) > 0) {
361         QHostAddress address(&peer.a);
362         if (address.isNull()) {
363             // We somehow failed to extract/create address, nothing to connect
364             // to, ignore.
365             return;
366         }
367 
368         quint16 port = 0;
369         if (peer.a.sa_family == AF_INET) {
370             port = peer.a4.sin_port;
371         } else if (peer.a.sa_family == AF_INET6) {
372             port = peer.a6.sin6_port;
373         } else {
374             // Ignore this datagram, that's something we don't accept/expect
375             // or some error.
376             return;
377         }
378 
379         peerAddress = address;
380         peerPort = ntohs(port);
381 
382         clientVerified = true;
383         socketEngine->setReadNotificationEnabled(false);
384         emit q->newConnection(peerAddress, peerPort);
385     } // DTLSTODO els ...
386 }
387 
388 #endif // !opensslv11
389 
390 qint64 QDtlsConnectionOpenSSL::writeDatagram(const QByteArray &datagram)
391 {
392     Q_ASSERT(encryptionState == QDtlsConnection::Encrypted);
393 
394     q_SSL_write(sslConnection, datagram.constData(), datagram.size());
395     // DTLSTODO: q_SSL_write requires error handling.
396     return datagram.size();
397 }
398 
399 qint64 QDtlsConnectionOpenSSL::readDatagram(QByteArray *datagram)
400 {
401     Q_ASSERT(datagram);
402     Q_ASSERT(encryptionState == QDtlsConnection::Encrypted);
403 
404     datagram->resize(socketEngine->pendingDatagramSize());
405     const int read = q_SSL_read(sslConnection, datagram->data(), datagram->size());
406     if (read >= 0)
407         datagram->resize(read);
408     else
409         datagram->clear();
410     // DTLSTODO: Error handling here!
411     return read;
412 }
413 
414 int QDtlsConnectionOpenSSL::generateCookieCallback(SSL *ssl, unsigned char *dst,
415                                                    unsigned *cookieLength)
416 {
417     if (!ssl || !dst || !cookieLength) {
418         qCWarning(lcSsl)
419              << "failed to generate cookie - invalid (nullptr) parameter(s)";
420         return 0;
421     }
422 
423     *cookieLength = 0;
424 
425     static CookieSecret secret;
426     if (!secret.key.size())
427         return 0;
428 
429     const QByteArray peerData = qt_get_cookie_material_for_connection(ssl);
430     if (!peerData.size())
431         return 0;
432 
433     QMessageAuthenticationCode hmac(QCryptographicHash::Sha1, secret.key);
434     hmac.addData(peerData);
435     const QByteArray cookie = hmac.result();
436     Q_ASSERT(cookie.size() >= 0);
437     // OpenSSL docs don't say what's the max possible size, but dtls1_state_st
438     // has a data-member 'cookie' which has this size - DTLS1_COOKIE_LENGTH and
439     // &cookie[0] is what they pass into our callback. That's also what we
440     // do when verifying a cookie.
441     if (Q_UNLIKELY(!cookie.size() || cookie.size() > DTLS1_COOKIE_LENGTH)) {
442         qCWarning(lcSsl) << "HMAC does not fit in DTLS1_COOKIE_LENGTH";
443         return 0;
444     }
445 
446     std::memcpy(dst, cookie.constData(), cookie.size());
447     *cookieLength = cookie.size();
448 
449     return 1;
450 }
451 
452 int QDtlsConnectionOpenSSL::verifyCookieCallback(SSL *ssl, const unsigned char *cookie,
453                                                  unsigned cookieLength)
454 {
455     if (!ssl || !cookie || !cookieLength) {
456         qCWarning(lcSsl)
457             << "could not verify cookie, one of input parameters is not valid";
458         return 0;
459     }
460 
461     unsigned char newCookie[DTLS1_COOKIE_LENGTH] = {};
462     unsigned newCookieLength = 0;
463     if (generateCookieCallback(ssl, newCookie, &newCookieLength) != 1)
464         return 0;
465 
466     if (newCookieLength == cookieLength
467         && !std::memcmp(cookie, newCookie, cookieLength))
468         return 1;
469 
470     return 0;
471 }
472 
473 QT_END_NAMESPACE
