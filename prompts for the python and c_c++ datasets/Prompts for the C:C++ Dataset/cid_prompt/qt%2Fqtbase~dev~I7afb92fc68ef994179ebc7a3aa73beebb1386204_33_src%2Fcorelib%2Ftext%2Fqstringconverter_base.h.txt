Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 // Copyright (C) 2022 The Qt Company Ltd.
2 // SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
3 
4 #ifndef QSTRINGCONVERTER_BASE_H
5 #define QSTRINGCONVERTER_BASE_H
6 
7 #if 0
8 // QStringConverter(Base) class are handled in qstringconverter
9 #pragma qt_sync_stop_processing
10 #endif
11 
12 #include <optional>
13 
14 #include <QtCore/qglobal.h> // QT_{BEGIN,END}_NAMESPACE
15 #include <QtCore/qflags.h> // Q_DECLARE_FLAGS
16 
17 #include <cstring>
18 
19 QT_BEGIN_NAMESPACE
20 
21 class QByteArrayView;
22 class QChar;
23 class QByteArrayView;
24 class QStringView;
25 
26 class QStringConverterBase
27 {
28 public:
29     enum class Flag {
30         Default = 0,
31         Stateless = 0x1,
32         ConvertInvalidToNull = 0x2,
33         WriteBom = 0x4,
34         ConvertInitialBom = 0x8
35     };
36     Q_DECLARE_FLAGS(Flags, Flag)
37 
38     struct State {
39         constexpr State(Flags f = Flag::Default) noexcept
40             : flags(f), state_data{0, 0, 0, 0} {}
41         ~State() { clear(); }
42         State(State &&other) noexcept
43             : flags(other.flags),
44               remainingChars(other.remainingChars),
45               invalidChars(other.invalidChars),
46               state_data{other.state_data[0], other.state_data[1],
47                          other.state_data[2], other.state_data[3]},
48               clearFn(other.clearFn)
49         { other.clearFn = nullptr; }
50         State &operator=(State &&other) noexcept
51         {
52             clear();
53             flags = other.flags;
54             remainingChars = other.remainingChars;
55             invalidChars = other.invalidChars;
56             std::memmove(state_data, other.state_data, sizeof state_data); // self-assignment-safe
57             clearFn = other.clearFn;
58             other.clearFn = nullptr;
59             return *this;
60         }
61         Q_CORE_EXPORT void clear() noexcept;
62 
63         Flags flags;
64         int internalState = 0;
65         qsizetype remainingChars = 0;
66         qsizetype invalidChars = 0;
67 
68         union {
69             uint state_data[4];
70             void *d[2];
71         };
72         using ClearDataFn = void (*)(State *) noexcept;
73         ClearDataFn clearFn = nullptr;
74     private:
75         Q_DISABLE_COPY(State)
76     };
77 protected:
78     ~QStringConverterBase() = default;
79 };
80 Q_DECLARE_OPERATORS_FOR_FLAGS(QStringConverterBase::Flags)
81 
82 class QStringConverter : public QStringConverterBase
83 {
84 public:
85 
86     enum Encoding {
87         Utf8,
88         Utf16,
89         Utf16LE,
90         Utf16BE,
91         Utf32,
92         Utf32LE,
93         Utf32BE,
94         Latin1,
95         System,
96         LastEncoding = System
97     };
98 #ifdef Q_QDOC
99     // document the flags here
100     enum class Flag {
101         Default = 0,
102         Stateless = 0x1,
103         ConvertInvalidToNull = 0x2,
104         WriteBom = 0x4,
105         ConvertInitialBom = 0x8
106     };
107     Q_DECLARE_FLAGS(Flags, Flag)
108 #endif
109 
110 protected:
111 
112     struct Interface
113     {
114         using DecoderFn = QChar * (*)(QChar *out, QByteArrayView in, State *state);
115         using LengthFn = qsizetype (*)(qsizetype inLength);
116         using EncoderFn = char * (*)(char *out, QStringView in, State *state);
117         using DestroyFn = void (*)(const Interface *) noexcept;
118         const char *name = nullptr;
119         DecoderFn toUtf16 = nullptr;
120         LengthFn toUtf16Len = nullptr;
121         EncoderFn fromUtf16 = nullptr;
122         LengthFn fromUtf16Len = nullptr;
123         DestroyFn destroy = nullptr;
124     };
125 
126     constexpr QStringConverter() noexcept
127         : iface(nullptr)
128     {}
129     constexpr explicit QStringConverter(Encoding encoding, Flags f)
130         : iface(&encodingInterfaces[int(encoding)]), state(f)
131     {}
132     constexpr explicit QStringConverter(const Interface *i) noexcept
133         : iface(i)
134     {}
135     Q_CORE_EXPORT explicit QStringConverter(const char *name, Flags f) noexcept;
136 
137     Q_CORE_EXPORT void destructHelper();
138 
139     ~QStringConverter()
140     {
141         if (iface && iface->destroy)
142             destructHelper();
143     };
144 
145 public:
146     QStringConverter(QStringConverter &&) = default;
147     QStringConverter &operator=(QStringConverter &&) = default;
148 
149     bool isValid() const noexcept { return iface != nullptr; }
150 
151     void resetState() noexcept
152     {
153         state.clear();
154     }
155     bool hasError() const noexcept { return state.invalidChars != 0; }
156 
157     const char *name() const noexcept
158     { return isValid() ? iface->name : nullptr; }
159 
160     Q_CORE_EXPORT static std::optional<Encoding> encodingForName(const char *name) noexcept;
161     Q_CORE_EXPORT static const char *nameForEncoding(Encoding e);
162     Q_CORE_EXPORT static std::optional<Encoding>
163     encodingForData(QByteArrayView data, char16_t expectedFirstCharacter = 0) noexcept;
164     Q_CORE_EXPORT static std::optional<Encoding> encodingForHtml(QByteArrayView data);
165 
166 protected:
167     const Interface *iface;
168     State state;
169 private:
170     Q_CORE_EXPORT static const Interface encodingInterfaces[Encoding::LastEncoding + 1];
171 };
172 
173 QT_END_NAMESPACE
174 
175 #endif
