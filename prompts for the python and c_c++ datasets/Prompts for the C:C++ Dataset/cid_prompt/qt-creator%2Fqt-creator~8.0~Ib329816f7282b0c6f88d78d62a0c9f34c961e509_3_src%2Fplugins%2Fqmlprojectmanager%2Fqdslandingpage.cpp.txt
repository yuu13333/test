Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2022 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "qdslandingpage.h"
27 #include "qdslandingpagetheme.h"
28 #include "utils/algorithm.h"
29 
30 #include <coreplugin/icore.h>
31 
32 #include <QtQml/QQmlEngine>
33 #include <QQuickItem>
34 
35 namespace QmlProjectManager {
36 namespace Internal {
37 
38 const char QMLRESOURCEPATH[] = "qmldesigner/propertyEditorQmlSources/imports";
39 const char LANDINGPAGEPATH[] = "qmldesigner/landingpage";
40 
41 QdsLandingPageWidget::QdsLandingPageWidget(QWidget* parent)
42     :QWidget(parent)
43 {
44     setLayout(new QHBoxLayout());
45     layout()->setContentsMargins(0,0,0,0);
46 }
47 
48 QdsLandingPageWidget::~QdsLandingPageWidget()
49 {
50     if (m_widget)
51         m_widget->deleteLater();
52 }
53 
54 QQuickWidget* QdsLandingPageWidget::widget()
55 {
56     if (!m_widget) {
57         m_widget = new QQuickWidget();
58         layout()->addWidget(m_widget);
59     }
60 
61     return m_widget;
62 }
63 
64 QdsLandingPage::QdsLandingPage(QdsLandingPageWidget *widget, QWidget *parent)
65     : m_widget{widget->widget()}
66 {
67     Q_UNUSED(parent)
68 
69     setParent(m_widget);
70 
71     const QString resourcePath = Core::ICore::resourcePath(QMLRESOURCEPATH).toString();
72     const QString landingPath = Core::ICore::resourcePath(LANDINGPAGEPATH).toString();
73 
74     qmlRegisterSingletonInstance<QdsLandingPage>("LandingPageApi", 1, 0, "LandingPageApi", this);
75     QdsLandingPageTheme::setupTheme(m_widget->engine());
76 
77     m_widget->setResizeMode(QQuickWidget::SizeRootObjectToView);
78     m_widget->engine()->addImportPath(landingPath + "/imports");
79     m_widget->engine()->addImportPath(resourcePath);
80     m_widget->setSource(QUrl::fromLocalFile(landingPath + "/main.qml"));
81 
82     if (m_widget->rootObject()) { // main.qml only works with Qt6
83         connect(m_widget->rootObject(), SIGNAL(openQtc(bool)), this, SIGNAL(openCreator(bool)));
84         connect(m_widget->rootObject(), SIGNAL(openQds(bool)), this, SIGNAL(openDesigner(bool)));
85         connect(m_widget->rootObject(), SIGNAL(installQds()), this, SIGNAL(installDesigner()));
86         connect(m_widget->rootObject(), SIGNAL(generateCmake()), this, SIGNAL(generateCmake()));
87         connect(m_widget->rootObject(), SIGNAL(generateProjectFile()), this, SIGNAL(generateProjectFile()));
88     }
89     m_widget->hide();
90 }
91 
92 QWidget* QdsLandingPage::widget()
93 {
94     return m_widget;
95 }
96 
97 void QdsLandingPage::show()
98 {
99     m_widget->rootObject()->setProperty("qdsInstalled", m_qdsInstalled);
100     m_widget->rootObject()->setProperty("projectFileExists", m_projectFileExists);
101     m_widget->rootObject()->setProperty("qtVersion", m_qtVersion);
102     m_widget->rootObject()->setProperty("qdsVersion", m_qdsVersion);
103     m_widget->rootObject()->setProperty("cmakeLists", m_cmakeResources);
104     m_widget->rootObject()->setProperty("rememberSelection", Qt::Unchecked);
105     m_widget->show();
106 }
107 
108 void QdsLandingPage::hide()
109 {
110     m_widget->hide();
111 }
112 
113 bool QdsLandingPage::qdsInstalled() const
114 {
115     return m_qdsInstalled;
116 }
117 
118 void QdsLandingPage::setQdsInstalled(bool installed)
119 {
120     m_qdsInstalled = installed;
121 }
122 
123 bool QdsLandingPage::projectFileExists() const
124 {
125     return m_projectFileExists;
126 }
127 
128 void QdsLandingPage::setProjectFileExists(bool exists)
129 {
130     m_projectFileExists = exists;
131 }
132 
133 const QString QdsLandingPage::qtVersion() const
134 {
135     return m_qtVersion;
136 }
137 
138 void QdsLandingPage::setQtVersion(const QString &version)
139 {
140     m_qtVersion = version;
141 }
142 
143 const QString QdsLandingPage::qdsVersion() const
144 {
145     return m_qdsVersion;
146 }
147 
148 void QdsLandingPage::setQdsVersion(const QString &version)
149 {
150     m_qdsVersion = version;
151 }
152 
153 const QStringList QdsLandingPage::cmakeResources() const
154 {
155     return m_cmakeResources;
156 }
157 
158 void QdsLandingPage::setCmakeResources(const Utils::FilePaths &resources)
159 {
160     QStringList strings = Utils::transform(resources,
161                                            [](const Utils::FilePath &path)
162                                                 { return path.fileName(); });
163     setCmakeResources(strings);
164 }
165 
166 void QdsLandingPage::setCmakeResources(const QStringList &resources)
167 {
168     m_cmakeResources = resources;
169 }
170 
171 } // namespace Internal
172 } // namespace QmlProjectManager
