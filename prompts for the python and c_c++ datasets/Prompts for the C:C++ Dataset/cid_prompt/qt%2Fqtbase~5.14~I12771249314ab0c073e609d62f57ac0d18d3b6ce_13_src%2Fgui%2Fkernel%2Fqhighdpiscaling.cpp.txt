Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qhighdpiscaling_p.h"
41 #include "qguiapplication.h"
42 #include "qscreen.h"
43 #include "qplatformintegration.h"
44 #include "private/qscreen_p.h"
45 
46 #include <QtCore/qdebug.h>
47 #include <QtCore/qmetaobject.h>
48 
49 #include <algorithm>
50 
51 QT_BEGIN_NAMESPACE
52 
53 Q_LOGGING_CATEGORY(lcScaling, "qt.scaling");
54 
55 #ifndef QT_NO_HIGHDPISCALING
56 static const char legacyDevicePixelEnvVar[] = "QT_DEVICE_PIXEL_RATIO";
57 static const char scaleFactorEnvVar[] = "QT_SCALE_FACTOR";
58 static const char autoScreenEnvVar[] = "QT_AUTO_SCREEN_SCALE_FACTOR";
59 static const char screenFactorsEnvVar[] = "QT_SCREEN_SCALE_FACTORS";
60 static const char scaleFactorRoundingPolicyEnvVar[] = "QT_SCALE_FACTOR_ROUNDING_POLICY";
61 static const char dpiAdjustmentPolicyEnvVar[] = "QT_DPI_ADJUSTMENT_POLICY";
62 static const char usePhysicalDpiEnvVar[] = "QT_USE_PHYSICAL_DPI";
63 
64 // Per-screen scale factors for named screens set with QT_SCREEN_SCALE_FACTORS
65 // are stored here. Use a global hash to keep the factor across screen
66 // disconnect/connect cycles where the screen object may be deleted.
67 typedef QHash<QString, qreal> QScreenScaleFactorHash;
68 Q_GLOBAL_STATIC(QScreenScaleFactorHash, qNamedScreenScaleFactors);
69 
70 // Reads and interprets the given environment variable as a bool,
71 // returns the default value if not set.
72 static bool qEnvironmentVariableAsBool(const char *name, bool defaultValue)
73 {
74     bool ok = false;
75     int value = qEnvironmentVariableIntValue(name, &ok);
76     return ok ? value > 0 : defaultValue;
77 }
78 
79 static inline qreal initialGlobalScaleFactor()
80 {
81 
82     qreal result = 1;
83     if (qEnvironmentVariableIsSet(scaleFactorEnvVar)) {
84         bool ok;
85         const qreal f = qgetenv(scaleFactorEnvVar).toDouble(&ok);
86         if (ok && f > 0) {
87             qCDebug(lcScaling) << "Apply " << scaleFactorEnvVar << f;
88             result = f;
89         }
90     } else {
91         if (qEnvironmentVariableIsSet(legacyDevicePixelEnvVar)) {
92             qWarning("Warning: %s is deprecated. Instead use:\n"
93                      "   %s to enable platform plugin controlled per-screen factors.\n"
94                      "   %s to set per-screen factors.\n"
95                      "   %s to set the application global scale factor.",
96                      legacyDevicePixelEnvVar, autoScreenEnvVar, screenFactorsEnvVar, scaleFactorEnvVar);
97 
98             int dpr = qEnvironmentVariableIntValue(legacyDevicePixelEnvVar);
99             if (dpr > 0)
100                 result = dpr;
101         }
102     }
103     return result;
104 }
105 
106 /*!
107     \class QHighDpiScaling
108     \since 5.6
109     \internal
110     \preliminary
111     \ingroup qpa
112 
113     \brief Collection of utility functions for UI scaling.
114 
115     QHighDpiScaling implements utility functions for high-dpi scaling for use
116     on operating systems that provide limited support for native scaling. In
117     addition this functionality can be used for simulation and testing purposes.
118 
119     The functions support scaling between the device independent coordinate
120     system used by Qt applications and the native coordinate system used by
121     the platform plugins. Intended usage locations are the low level / platform
122     plugin interfacing parts of QtGui, for example the QWindow, QScreen and
123     QWindowSystemInterface implementation.
124 
125     There are now up to three active coordinate systems in Qt:
126 
127      ---------------------------------------------------
128     |  Application            Device Independent Pixels |   devicePixelRatio
129     |  Qt Widgets                                       |         =
130     |  Qt Gui                                           |
131     |---------------------------------------------------|   Qt Scale Factor
132     |  Qt Gui QPlatform*      Native Pixels             |         *
133     |  Qt platform plugin                               |
134     |---------------------------------------------------|   OS Scale Factor
135     |  Display                Device Pixels             |
136     |  (Graphics Buffers)                               |
137     -----------------------------------------------------
138 
139     This is an simplification and shows the main coordinate system. All layers
140     may work with device pixels in specific cases: OpenGL, creating the backing
141     store, and QPixmap management. The "Native Pixels" coordinate system is
142     internal to Qt and should not be exposed to Qt users: Seen from the outside
143     there are only two coordinate systems: device independent pixels and device
144     pixels.
145 
146     The devicePixelRatio seen by applications is the product of the Qt scale
147     factor and the OS scale factor. The value of the scale factors may be 1,
148     in which case two or more of the coordinate systems are equivalent. Platforms
149     that (may) have an OS scale factor include \macos, iOS and Wayland.
150 
151     Note that the functions in this file do not work with the OS scale factor
152     directly and are limited to converting between device independent and native
153     pixels. The OS scale factor is accounted for by QWindow::devicePixelRatio()
154     and similar functions.
155 
156     Configuration Examples:
157 
158     'Classic': Device Independent Pixels = Native Pixels = Device Pixels
159      ---------------------------------------------------    devicePixelRatio: 1
160     |  Application / Qt Gui             100 x 100       |
161     |                                                   |   Qt Scale Factor: 1
162     |  Qt Platform / OS                 100 x 100       |
163     |                                                   |   OS Scale Factor: 1
164     |  Display                          100 x 100       |
165     -----------------------------------------------------
166 
167     'Retina Device': Device Independent Pixels = Native Pixels
168      ---------------------------------------------------    devicePixelRatio: 2
169     |  Application / Qt Gui             100 x 100       |
170     |                                                   |   Qt Scale Factor: 1
171     |  Qt Platform / OS                 100 x 100       |
172     |---------------------------------------------------|   OS Scale Factor: 2
173     |  Display                          200 x 200       |
174     -----------------------------------------------------
175 
176     '2x Qt Scaling': Native Pixels = Device Pixels
177      ---------------------------------------------------    devicePixelRatio: 2
178     |  Application / Qt Gui             100 x 100       |
179     |---------------------------------------------------|   Qt Scale Factor: 2
180     |  Qt Platform / OS                 200 x 200       |
181     |                                                   |   OS Scale Factor: 1
182     |  Display                          200 x 200       |
183     -----------------------------------------------------
184 
185     The Qt Scale Factor is the product of two sub-scale factors, which
186     are independently either set or determined by the platform plugin.
187     Several APIs are offered for this, targeting both developers and
188     end users. All scale factors are of type qreal.
189 
190     1) A global scale factor
191         The QT_SCALE_FACTOR environment variable can be used to set
192         a global scale factor for all windows in the process. This
193         is useful for testing and debugging (you can simulate any
194         devicePixelRatio without needing access to special hardware),
195         and perhaps also for targeting a specific application to
196         a specific display type (embedded use cases).
197 
198     2) Per-screen scale factors
199         Some platform plugins support providing a per-screen scale
200         factor based on display density information. These platforms
201         include X11, Windows, and Android.
202 
203         There are two APIs for enabling or disabling this behavior:
204             - The QT_AUTO_SCREEN_SCALE_FACTOR environment variable.
205             - The AA_EnableHighDpiScaling and AA_DisableHighDpiScaling
206               application attributes
207 
208         Enabling either will make QHighDpiScaling call QPlatformScreen::pixelDensity()
209         and use the value provided as the scale factor for the screen in
210         question. Disabling is done on a 'veto' basis where either the
211         environment or the application can disable the scaling. The intended use
212         cases are 'My system is not providing correct display density
213         information' and 'My application needs to work in display pixels',
214         respectively.
215 
216         The QT_SCREEN_SCALE_FACTORS environment variable can be used to set the screen
217         scale factors manually. Set this to a semicolon-separated
218         list of scale factors (matching the order of QGuiApplications::screens()),
219         or to a list of name=value pairs (where name matches QScreen::name()).
220 
221     Coordinate conversion functions must be used when writing code that passes
222     geometry across the Qt Gui / Platform plugin boundary. The main conversion
223     functions are:
224         T toNativePixels(T, QWindow *)
225         T fromNativePixels(T, QWindow*)
226 
227     The following classes in QtGui use native pixels, for the convenience of the
228     platform plugins:
229         QPlatformWindow
230         QPlatformScreen
231         QWindowSystemInterface (API only - Events are in device independent pixels)
232 
233     As a special consideration platform plugin code should be careful about
234     calling QtGui geometry accessor functions:
235         QRect r = window->geometry();
236     Here the returned geometry is in device independent pixels. Add a conversion call:
237         QRect r = QHighDpi::toNativePixels(window->geometry());
238     (Avoiding calling QWindow and instead using the QPlatformWindow geometry
239      might be a better course of action in this case.)
240 */
241 
242 qreal QHighDpiScaling::m_factor = 1.0;
243 bool QHighDpiScaling::m_active = false; //"overall active" - is there any scale factor set.
244 bool QHighDpiScaling::m_usePixelDensity = false; // use scale factor from platform plugin
245 bool QHighDpiScaling::m_pixelDensityScalingActive = false; // pixel density scale factor > 1
246 bool QHighDpiScaling::m_globalScalingActive = false; // global scale factor is active
247 bool QHighDpiScaling::m_screenFactorSet = false; // QHighDpiScaling::setScreenFactor has been used
248 
249 /*
250     Initializes the QHighDpiScaling global variables. Called before the
251     platform plugin is created.
252 */
253 
254 static inline bool usePixelDensity()
255 {
256     // Determine if we should set a scale factor based on the pixel density
257     // reported by the platform plugin. There are several enablers and several
258     // disablers. A single disable may veto all other enablers.
259     if (QCoreApplication::testAttribute(Qt::AA_DisableHighDpiScaling))
260         return false;
261     bool screenEnvValueOk;
262     const int screenEnvValue = qEnvironmentVariableIntValue(autoScreenEnvVar, &screenEnvValueOk);
263     if (screenEnvValueOk && screenEnvValue < 1)
264         return false;
265     return QCoreApplication::testAttribute(Qt::AA_EnableHighDpiScaling)
266         || (screenEnvValueOk && screenEnvValue > 0)
267         || (qEnvironmentVariableIsSet(legacyDevicePixelEnvVar) &&
268             qgetenv(legacyDevicePixelEnvVar).compare("auto", Qt::CaseInsensitive) == 0);
269 }
270 
271 qreal QHighDpiScaling::rawScaleFactor(const QPlatformScreen *screen)
272 {
273     // Determine if physical DPI should be used
274     static bool usePhysicalDpi = qEnvironmentVariableAsBool(usePhysicalDpiEnvVar, false);
275 
276     // Calculate scale factor beased on platform screen DPI values
277     qreal factor;
278     QDpi platformBaseDpi = screen->logicalBaseDpi();
279     if (usePhysicalDpi) {
280         qreal platformPhysicalDpi = screen->screen()->physicalDotsPerInch();
281         factor = qreal(platformPhysicalDpi) / qreal(platformBaseDpi.first);
282     } else {
283         QDpi platformLogicalDpi = screen->logicalDpi();
284         factor = qreal(platformLogicalDpi.first) / qreal(platformBaseDpi.first);
285     }
286 
287     return factor;
288 }
289 
290 template <class EnumType>
291 struct EnumLookup
292 {
293     const char *name;
294     EnumType value;
295 };
296 
297 template <class EnumType>
298 static bool operator==(const EnumLookup<EnumType> &e1, const EnumLookup<EnumType> &e2)
299 {
300     return qstricmp(e1.name, e2.name) == 0;
301 }
302 
303 template <class EnumType>
304 static QByteArray joinEnumValues(const EnumLookup<EnumType> *i1, const EnumLookup<EnumType> *i2)
305 {
306     QByteArray result;
307     for (; i1 < i2; ++i1) {
308         if (!result.isEmpty())
309             result += QByteArrayLiteral(", ");
310         result += i1->name;
311     }
312     return result;
313 }
314 
315 using ScaleFactorRoundingPolicyLookup = EnumLookup<QHighDpiScaling::HighDpiScaleFactorRoundingPolicy>;
316 
317 static const ScaleFactorRoundingPolicyLookup scaleFactorRoundingPolicyLookup[] =
318 {
319     {"Round", QHighDpiScaling::ScaleFactorPolicyRound},
320     {"Ceil", QHighDpiScaling::ScaleFactorPolicyCeil},
321     {"Floor", QHighDpiScaling::ScaleFactorPolicyFloor},
322     {"RoundPreferFloor", QHighDpiScaling::ScaleFactorPolicyRoundPreferFloor},
323     {"PassThrough", QHighDpiScaling::ScaleFactorPolicyPassThrough}
324 };
325 
326 static QHighDpiScaling::HighDpiScaleFactorRoundingPolicy
327     lookupScaleFactorRoundingPolicy(const QByteArray &v)
328 {
329     auto end = std::end(scaleFactorRoundingPolicyLookup);
330     auto it = std::find(std::begin(scaleFactorRoundingPolicyLookup), end,
331                         ScaleFactorRoundingPolicyLookup{v.constData(), QHighDpiScaling::ScaleFactorPolicyNotSet});
332     return it != end ? it->value : QHighDpiScaling::ScaleFactorPolicyNotSet;
333 }
334 
335 using DpiAdjustmentPolicyLookup = EnumLookup<QHighDpiScaling::DpiAdjustmentPolicy>;
336 
337 static const DpiAdjustmentPolicyLookup dpiAdjustmentPolicyLookup[] =
338 {
339     {"AdjustDpi", QHighDpiScaling::DpiAdjustmentEnabled},
340     {"DontAdjustDpi", QHighDpiScaling::DpiAdjustmentDisabled},
341     {"AdjustUpOnly", QHighDpiScaling::DpiAdjustmentUpOnly}
342 };
343 
344 static QHighDpiScaling::DpiAdjustmentPolicy
345     lookupDpiAdjustmentPolicy(const QByteArray &v)
346 {
347     auto end = std::end(dpiAdjustmentPolicyLookup);
348     auto it = std::find(std::begin(dpiAdjustmentPolicyLookup), end,
349                         DpiAdjustmentPolicyLookup{v.constData(), QHighDpiScaling::DpiAdjustmentNotSet});
350     return it != end ? it->value : QHighDpiScaling::DpiAdjustmentNotSet;
351 }
352 
353 qreal QHighDpiScaling::roundScaleFactor(qreal rawFactor)
354 {
355     // Apply scale factor rounding policy. Using mathematically correct rounding
356     // may not give the most desirable visual results, especially for
357     // critical fractions like .5. In general, rounding down results in visual
358     // sizes that are smaller than the ideal size, and opposite for rounding up.
359     // Rounding down is then preferable since "small UI" is a more acceptable
360     // high-DPI experience than "large UI".
361     static HighDpiScaleFactorRoundingPolicy scaleFactorRoundingPolicy = ScaleFactorPolicyNotSet;
362 
363     // Determine rounding policy
364     if (scaleFactorRoundingPolicy == ScaleFactorPolicyNotSet) {
365         // Check environment
366         if (qEnvironmentVariableIsSet(scaleFactorRoundingPolicyEnvVar)) {
367             QByteArray policyText = qgetenv(scaleFactorRoundingPolicyEnvVar);
368             auto policyEnumValue = lookupScaleFactorRoundingPolicy(policyText);
369             if (policyEnumValue != QHighDpiScaling::ScaleFactorPolicyNotSet) {
370                 scaleFactorRoundingPolicy = policyEnumValue;
371             } else {
372                 auto values = joinEnumValues(std::begin(scaleFactorRoundingPolicyLookup),
373                                              std::end(scaleFactorRoundingPolicyLookup));
374                 qWarning("Unknown scale factor rounding policy: %s. Supported values are: %s.",
375                          policyText.constData(), values.constData());
376             }
377         } else {
378             // Set default policy if no environment variable is set.
379             scaleFactorRoundingPolicy = ScaleFactorPolicyRoundPreferFloor;
380         }
381     }
382 
383     // Apply rounding policy.
384     qreal roundedFactor = rawFactor;
385     switch (scaleFactorRoundingPolicy) {
386     case ScaleFactorPolicyRound:
387         roundedFactor = qRound(rawFactor);
388         break;
389     case ScaleFactorPolicyCeil:
390         roundedFactor = qCeil(rawFactor);
391         break;
392     case ScaleFactorPolicyFloor:
393         roundedFactor = qFloor(rawFactor);
394         break;
395     case ScaleFactorPolicyRoundPreferFloor:
396         // Round up for .75 and higher. This favors "small UI" over "large UI".
397         roundedFactor = rawFactor - qFloor(rawFactor) < 0.75
398             ? qFloor(rawFactor) : qCeil(rawFactor);
399         break;
400     case ScaleFactorPolicyPassThrough:
401     case ScaleFactorPolicyNotSet:
402         break;
403     }
404 
405     // Don't round down to to zero; clamp the minimum (rounded) factor to 1.
406     // This is not a common case but can happen if a display reports a very
407     // low DPI.
408     if (scaleFactorRoundingPolicy != ScaleFactorPolicyPassThrough)
409         roundedFactor = qMax(roundedFactor, qreal(1));
410 
411     return roundedFactor;
412 }
413 
414 QDpi QHighDpiScaling::effectiveLogicalDpi(const QPlatformScreen *screen, qreal rawFactor, qreal roundedFactor)
415 {
416     // Apply DPI adjustment policy, if needed. If enabled this will change
417     // the reported logical DPI to account for the difference between the
418     // rounded scale factor and the actual scale factor. The effect
419     // is that text size will be correct for the screen dpi, but may be (slightly)
420     // out of sync with the rest of the UI. The amount of out-of-synch-ness
421     // depends on how well user code handles a non-standard DPI values, but
422     // since the adjustment is small (typically +/- 48 max) this might be OK.
423     static DpiAdjustmentPolicy dpiAdjustmentPolicy = DpiAdjustmentNotSet;
424 
425     // Determine adjustment policy.
426     if (dpiAdjustmentPolicy == DpiAdjustmentNotSet) {
427         if (qEnvironmentVariableIsSet(dpiAdjustmentPolicyEnvVar)) {
428             QByteArray policyText = qgetenv(dpiAdjustmentPolicyEnvVar);
429             auto policyEnumValue = lookupDpiAdjustmentPolicy(policyText);
430             if (policyEnumValue != DpiAdjustmentNotSet) {
431                 dpiAdjustmentPolicy = policyEnumValue;
432             } else {
433                 auto values = joinEnumValues(std::begin(dpiAdjustmentPolicyLookup),
434                                              std::end(dpiAdjustmentPolicyLookup));
435                 qWarning("Unknown DPI adjustment policy: %s. Supported values are: %s.",
436                          policyText.constData(), values.constData());
437             }
438         }
439         if (dpiAdjustmentPolicy == DpiAdjustmentNotSet)
440             dpiAdjustmentPolicy = DpiAdjustmentUpOnly;
441     }
442 
443     // Apply adjustment policy.
444     const QDpi baseDpi = screen->logicalBaseDpi();
445     const qreal dpiAdjustmentFactor = rawFactor / roundedFactor;
446 
447     // Return the base DPI for cases where there is no adjustment
448     if (dpiAdjustmentPolicy == DpiAdjustmentDisabled)
449         return baseDpi;
450     if (dpiAdjustmentPolicy == DpiAdjustmentUpOnly && dpiAdjustmentFactor < 1)
451         return baseDpi;
452 
453     return QDpi(baseDpi.first * dpiAdjustmentFactor, baseDpi.second * dpiAdjustmentFactor);
454 }
455 
456 QHighDpiScaling::QHighDpiScaling() = default;
457 
458 QHighDpiScaling::~QHighDpiScaling() = default;
459 
460 void QHighDpiScaling::initHighDpiScaling()
461 {
462     // Determine if there is a global scale factor set.
463     m_factor = initialGlobalScaleFactor();
464     m_globalScalingActive = !qFuzzyCompare(m_factor, qreal(1));
465 
466     m_usePixelDensity = usePixelDensity();
467 
468     m_pixelDensityScalingActive = false; //set in updateHighDpiScaling below
469 
470     m_active = m_globalScalingActive || m_usePixelDensity;
471 }
472 
473 void QHighDpiScaling::updateHighDpiScaling()
474 {
475     if (QCoreApplication::testAttribute(Qt::AA_DisableHighDpiScaling))
476         return;
477 
478     if (m_usePixelDensity && !m_pixelDensityScalingActive) {
479         const auto screens = QGuiApplication::screens();
480         for (QScreen *screen : screens) {
481             if (!qFuzzyCompare(screenSubfactor(screen->handle()), qreal(1))) {
482                 m_pixelDensityScalingActive = true;
483                 break;
484             }
485         }
486     }
487     if (qEnvironmentVariableIsSet(screenFactorsEnvVar)) {
488         int i = 0;
489         const auto specs = qgetenv(screenFactorsEnvVar).split(';');
490         for (const QByteArray &spec : specs) {
491             int equalsPos = spec.lastIndexOf('=');
492             qreal factor = 0;
493             if (equalsPos > 0) {
494                 // support "name=factor"
495                 QByteArray name = spec.mid(0, equalsPos);
496                 QByteArray f = spec.mid(equalsPos + 1);
497                 bool ok;
498                 factor = f.toDouble(&ok);
499                 if (ok) {
500                     const auto screens = QGuiApplication::screens();
501                     for (QScreen *s : screens) {
502                         QString candidate = s->name();
503                         if (candidate == QString::fromLocal8Bit(name)) {
504                             setScreenFactor(s, factor);
505                             break;
506                         }
507                     }
508                 }
509             } else {
510                 // listing screens in order
511                 bool ok;
512                 factor = spec.toDouble(&ok);
513                 if (ok && i < QGuiApplication::screens().count()) {
514                     QScreen *screen = QGuiApplication::screens().at(i);
515                     setScreenFactor(screen, factor);
516                 }
517             }
518             ++i;
519         }
520     }
521     m_active = m_globalScalingActive || m_usePixelDensity;
522 }
523 
524 /*
525     Sets the global scale factor which is applied to all windows.
526 */
527 void QHighDpiScaling::setGlobalFactor(qreal factor)
528 {
529     if (qFuzzyCompare(factor, m_factor))
530         return;
531     if (!QGuiApplication::allWindows().isEmpty())
532         qWarning("QHighDpiScaling::setFactor: Should only be called when no windows exist.");
533 
534     m_globalScalingActive = !qFuzzyCompare(factor, qreal(1));
535     m_factor = m_globalScalingActive ? factor : qreal(1);
536     m_active = m_globalScalingActive || m_screenFactorSet || m_pixelDensityScalingActive;
537     const auto screens = QGuiApplication::screens();
538     for (QScreen *screen : screens)
539          screen->d_func()->updateHighDpi();
540 }
541 
542 static const char scaleFactorProperty[] = "_q_scaleFactor";
543 
544 /*
545     Sets a per-screen scale factor.
546 */
547 void QHighDpiScaling::setScreenFactor(QScreen *screen, qreal factor)
548 {
549     if (!qFuzzyCompare(factor, qreal(1))) {
550         m_screenFactorSet = true;
551         m_active = true;
552     }
553 
554     // Prefer associating the factor with screen name over the object
555     // since the screen object may be deleted on screen disconnects.
556     const QString name = screen->name();
557     if (!name.isEmpty())
558         qNamedScreenScaleFactors()->insert(name, factor);
559     else
560         screen->setProperty(scaleFactorProperty, QVariant(factor));
561 
562     // hack to force re-evaluation of screen geometry
563     if (screen->handle())
564         screen->d_func()->setPlatformScreen(screen->handle()); // updates geometries based on scale factor
565 }
566 
567 QPoint QHighDpiScaling::mapPositionToNative(const QPoint &pos, const QPlatformScreen *platformScreen)
568 {
569     if (!platformScreen)
570         return pos;
571     const qreal scaleFactor = factor(platformScreen);
572     const QPoint topLeft = platformScreen->geometry().topLeft();
573     return (pos - topLeft) * scaleFactor + topLeft;
574 }
575 
576 QPoint QHighDpiScaling::mapPositionFromNative(const QPoint &pos, const QPlatformScreen *platformScreen)
577 {
578     if (!platformScreen)
579         return pos;
580     const qreal scaleFactor = factor(platformScreen);
581     const QPoint topLeft = platformScreen->geometry().topLeft();
582     return (pos - topLeft) / scaleFactor + topLeft;
583 }
584 
585 qreal QHighDpiScaling::screenSubfactor(const QPlatformScreen *screen)
586 {
587     qreal factor = qreal(1.0);
588     if (!screen)
589         return factor;
590 
591     // Unlike the other code where factors are combined
592     // by multiplication, factors from QT_SCREEN_SCALE_FACTORS takes
593     // precedence over the factor computed from platform plugin
594     // DPI. The rationale is that the user is setting the factor
595     // to override erroneous DPI values.
596     bool screenPropertyUsed = false;
597     if (m_screenFactorSet) {
598         // Check if there is a factor set on the screen object or
599         // associated with the screen name. These are mutually
600         // exclusive, so checking order is not significant.
601         QVariant byIndex = screen->screen()->property(scaleFactorProperty);
602         auto byName = qNamedScreenScaleFactors()->find(screen->name());
603         if (byIndex.isValid()) {
604             screenPropertyUsed = true;
605             factor = byIndex.toReal();
606         } else if (byName != qNamedScreenScaleFactors()->end()) {
607             screenPropertyUsed = true;
608             factor = *byName;
609         }
610     }
611 
612     if (!screenPropertyUsed && m_usePixelDensity)
613         factor = roundScaleFactor(rawScaleFactor(screen));
614 
615     return factor;
616 }
617 
618 QDpi QHighDpiScaling::logicalDpi(const QScreen *screen)
619 {
620     // (Note: m_active test is performed at call site.)
621     if (!screen || !screen->handle())
622         return QDpi(96, 96);
623 
624     if (!m_usePixelDensity)
625         return screen->handle()->logicalDpi();
626 
627     const qreal scaleFactor = rawScaleFactor(screen->handle());
628     const qreal roundedScaleFactor = roundScaleFactor(scaleFactor);
629     return effectiveLogicalDpi(screen->handle(), scaleFactor, roundedScaleFactor);
630 }
631 
632 qreal QHighDpiScaling::factor(const QScreen *screen)
633 {
634     // Fast path for when scaling in Qt is not used at all.
635     if (!m_active)
636         return qreal(1.0);
637 
638     // The effective factor for a given screen is the product of the
639     // screen and global sub-factors
640     qreal factor = m_factor;
641     if (screen)
642         factor *= screenSubfactor(screen->handle());
643     return factor;
644 }
645 
646 qreal QHighDpiScaling::factor(const QPlatformScreen *platformScreen)
647 {
648     if (!m_active)
649         return qreal(1.0);
650 
651     return m_factor * screenSubfactor(platformScreen);
652 }
653 
654 qreal QHighDpiScaling::factor(const QWindow *window)
655 {
656     if (!m_active)
657         return qreal(1.0);
658 
659     return factor(window ? window->screen() : QGuiApplication::primaryScreen());
660 }
661 
662 QPoint QHighDpiScaling::origin(const QScreen *screen)
663 {
664     return screen->geometry().topLeft();
665 }
666 
667 QPoint QHighDpiScaling::origin(const QPlatformScreen *platformScreen)
668 {
669     return platformScreen->geometry().topLeft();
670 }
671 
672 #endif //QT_NO_HIGHDPISCALING
673 QT_END_NAMESPACE
