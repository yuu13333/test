Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Copyright (C) 2016 Intel Corporation.
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the QtCore module of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:LGPL$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU Lesser General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU Lesser
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
22 ** packaging of this file. Please review the following information to
23 ** ensure the GNU Lesser General Public License version 3 requirements
24 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
25 **
26 ** GNU General Public License Usage
27 ** Alternatively, this file may be used under the terms of the GNU
28 ** General Public License version 2.0 or (at your option) the GNU General
29 ** Public license version 3 or any later version approved by the KDE Free
30 ** Qt Foundation. The licenses are as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
32 ** included in the packaging of this file. Please review the following
33 ** information to ensure the GNU General Public License requirements will
34 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
35 ** https://www.gnu.org/licenses/gpl-3.0.html.
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 //#define QPROCESS_DEBUG
42 #include "qdebug.h"
43 
44 #if QT_CONFIG(process) && defined(QPROCESS_DEBUG)
45 #include "private/qtools_p.h"
46 #include <ctype.h>
47 
48 /*
49     Returns a human readable representation of the first \a len
50     characters in \a data.
51 */
52 QT_BEGIN_NAMESPACE
53 static QByteArray qt_prettyDebug(const char *data, int len, int maxSize)
54 {
55     if (!data) return "(null)";
56     QByteArray out;
57     for (int i = 0; i < len; ++i) {
58         char c = data[i];
59         if (isprint(c)) {
60             out += c;
61         } else switch (c) {
62         case '\n': out += "\\n"; break;
63         case '\r': out += "\\r"; break;
64         case '\t': out += "\\t"; break;
65         default: {
66             const char buf[] =  {
67                 '\\',
68                 QtMiscUtils::toOct(uchar(c) / 64),
69                 QtMiscUtils::toOct(uchar(c) % 64 / 8),
70                 QtMiscUtils::toOct(uchar(c) % 8),
71                 0
72             };
73             out += buf;
74             }
75         }
76     }
77 
78     if (len < maxSize)
79         out += "...";
80 
81     return out;
82 }
83 QT_END_NAMESPACE
84 #endif
85 
86 #include "qplatformdefs.h"
87 
88 #include "qprocess.h"
89 #include "qprocess_p.h"
90 #include "qstandardpaths.h"
91 #include "private/qcore_unix_p.h"
92 
93 #ifdef Q_OS_MAC
94 #include <private/qcore_mac_p.h>
95 #endif
96 
97 #include <private/qcoreapplication_p.h>
98 #include <private/qthread_p.h>
99 #include <qfile.h>
100 #include <qfileinfo.h>
101 #include <qdir.h>
102 #include <qlist.h>
103 #include <qmutex.h>
104 #include <qsemaphore.h>
105 #include <qsocketnotifier.h>
106 #include <qthread.h>
107 #include <qelapsedtimer.h>
108 
109 #ifdef Q_OS_QNX
110 #  include <sys/neutrino.h>
111 #endif
112 
113 #include <errno.h>
114 #include <stdlib.h>
115 #include <string.h>
116 
117 #if QT_CONFIG(process)
118 #include <forkfd.h>
119 #endif
120 
121 QT_BEGIN_NAMESPACE
122 
123 #if !defined(Q_OS_DARWIN)
124 
125 QT_BEGIN_INCLUDE_NAMESPACE
126 extern char **environ;
127 QT_END_INCLUDE_NAMESPACE
128 
129 QProcessEnvironment QProcessEnvironment::systemEnvironment()
130 {
131     QProcessEnvironment env;
132     const char *entry;
133     for (int count = 0; (entry = environ[count]); ++count) {
134         const char *equal = strchr(entry, '=');
135         if (!equal)
136             continue;
137 
138         QByteArray name(entry, equal - entry);
139         QByteArray value(equal + 1);
140         env.d->hash.insert(QProcessEnvironmentPrivate::Key(name),
141                            QProcessEnvironmentPrivate::Value(value));
142     }
143     return env;
144 }
145 
146 #endif // !defined(Q_OS_DARWIN)
147 
148 #if QT_CONFIG(process)
149 
150 // POSIX requires PIPE_BUF to be 512 or larger
151 // so we will use 512
152 static const int errorBufferMax = 512;
153 
154 namespace {
155 struct QProcessPoller
156 {
157     QProcessPoller(const QProcessPrivate &proc);
158 
159     int poll(int timeout);
160 
161     pollfd &stdinPipe() { return pfds[0]; }
162     pollfd &stdoutPipe() { return pfds[1]; }
163     pollfd &stderrPipe() { return pfds[2]; }
164     pollfd &forkfd() { return pfds[3]; }
165     pollfd &childStartedPipe() { return pfds[4]; }
166 
167     enum { n_pfds = 5 };
168     pollfd pfds[n_pfds];
169 };
170 
171 QProcessPoller::QProcessPoller(const QProcessPrivate &proc)
172 {
173     for (int i = 0; i < n_pfds; i++)
174         pfds[i] = qt_make_pollfd(-1, POLLIN);
175 
176     stdoutPipe().fd = proc.stdoutChannel.pipe[0];
177     stderrPipe().fd = proc.stderrChannel.pipe[0];
178 
179     if (!proc.writeBuffer.isEmpty()) {
180         stdinPipe().fd = proc.stdinChannel.pipe[1];
181         stdinPipe().events = POLLOUT;
182     }
183 
184     forkfd().fd = proc.forkfd;
185 
186     if (proc.processState == QProcess::Starting)
187         childStartedPipe().fd = proc.childStartedPipe[0];
188 }
189 
190 int QProcessPoller::poll(int timeout)
191 {
192     const nfds_t nfds = (childStartedPipe().fd == -1) ? 4 : 5;
193     return qt_poll_msecs(pfds, nfds, timeout);
194 }
195 } // anonymous namespace
196 
197 static bool qt_pollfd_check(const pollfd &pfd, short revents)
198 {
199     return pfd.fd >= 0 && (pfd.revents & (revents | POLLHUP | POLLERR | POLLNVAL)) != 0;
200 }
201 
202 static int qt_create_pipe(int *pipe)
203 {
204     if (pipe[0] != -1)
205         qt_safe_close(pipe[0]);
206     if (pipe[1] != -1)
207         qt_safe_close(pipe[1]);
208     int pipe_ret = qt_safe_pipe(pipe);
209     if (pipe_ret != 0) {
210         qWarning("QProcessPrivate::createPipe: Cannot create pipe %p: %s",
211                  pipe, qPrintable(qt_error_string(errno)));
212     }
213     return pipe_ret;
214 }
215 
216 void QProcessPrivate::destroyPipe(int *pipe)
217 {
218     if (pipe[1] != -1) {
219         qt_safe_close(pipe[1]);
220         pipe[1] = -1;
221     }
222     if (pipe[0] != -1) {
223         qt_safe_close(pipe[0]);
224         pipe[0] = -1;
225     }
226 }
227 
228 void QProcessPrivate::closeChannel(Channel *channel)
229 {
230     destroyPipe(channel->pipe);
231 }
232 
233 /*
234     Create the pipes to a QProcessPrivate::Channel.
235 
236     This function must be called in order: stdin, stdout, stderr
237 */
238 bool QProcessPrivate::openChannel(Channel &channel)
239 {
240     Q_Q(QProcess);
241 
242     if (&channel == &stderrChannel && processChannelMode == QProcess::MergedChannels) {
243         channel.pipe[0] = -1;
244         channel.pipe[1] = -1;
245         return true;
246     }
247 
248     if (channel.type == Channel::Normal) {
249         // we're piping this channel to our own process
250         if (qt_create_pipe(channel.pipe) != 0)
251             return false;
252 
253         // create the socket notifiers
254         if (threadData->hasEventDispatcher()) {
255             if (&channel == &stdinChannel) {
256                 channel.notifier = new QSocketNotifier(channel.pipe[1],
257                                                        QSocketNotifier::Write, q);
258                 channel.notifier->setEnabled(false);
259                 QObject::connect(channel.notifier, SIGNAL(activated(int)),
260                                  q, SLOT(_q_canWrite()));
261             } else {
262                 channel.notifier = new QSocketNotifier(channel.pipe[0],
263                                                        QSocketNotifier::Read, q);
264                 const char *receiver;
265                 if (&channel == &stdoutChannel)
266                     receiver = SLOT(_q_canReadStandardOutput());
267                 else
268                     receiver = SLOT(_q_canReadStandardError());
269                 QObject::connect(channel.notifier, SIGNAL(activated(int)),
270                                  q, receiver);
271             }
272         }
273 
274         return true;
275     } else if (channel.type == Channel::Redirect) {
276         // we're redirecting the channel to/from a file
277         QByteArray fname = QFile::encodeName(channel.file);
278 
279         if (&channel == &stdinChannel) {
280             // try to open in read-only mode
281             channel.pipe[1] = -1;
282             if ( (channel.pipe[0] = qt_safe_open(fname, O_RDONLY)) != -1)
283                 return true;    // success
284             setErrorAndEmit(QProcess::FailedToStart,
285                             QProcess::tr("Could not open input redirection for reading"));
286         } else {
287             int mode = O_WRONLY | O_CREAT;
288             if (channel.append)
289                 mode |= O_APPEND;
290             else
291                 mode |= O_TRUNC;
292 
293             channel.pipe[0] = -1;
294             if ( (channel.pipe[1] = qt_safe_open(fname, mode, 0666)) != -1)
295                 return true; // success
296 
297             setErrorAndEmit(QProcess::FailedToStart,
298                             QProcess::tr("Could not open input redirection for reading"));
299         }
300         cleanup();
301         return false;
302     } else {
303         Q_ASSERT_X(channel.process, "QProcess::start", "Internal error");
304 
305         Channel *source;
306         Channel *sink;
307 
308         if (channel.type == Channel::PipeSource) {
309             // we are the source
310             source = &channel;
311             sink = &channel.process->stdinChannel;
312 
313             Q_ASSERT(source == &stdoutChannel);
314             Q_ASSERT(sink->process == this && sink->type == Channel::PipeSink);
315         } else {
316             // we are the sink;
317             source = &channel.process->stdoutChannel;
318             sink = &channel;
319 
320             Q_ASSERT(sink == &stdinChannel);
321             Q_ASSERT(source->process == this && source->type == Channel::PipeSource);
322         }
323 
324         if (source->pipe[1] != INVALID_Q_PIPE || sink->pipe[0] != INVALID_Q_PIPE) {
325             // already created, do nothing
326             return true;
327         } else {
328             Q_ASSERT(source->pipe[0] == INVALID_Q_PIPE && source->pipe[1] == INVALID_Q_PIPE);
329             Q_ASSERT(sink->pipe[0] == INVALID_Q_PIPE && sink->pipe[1] == INVALID_Q_PIPE);
330 
331             Q_PIPE pipe[2] = { -1, -1 };
332             if (qt_create_pipe(pipe) != 0)
333                 return false;
334             sink->pipe[0] = pipe[0];
335             source->pipe[1] = pipe[1];
336 
337             return true;
338         }
339     }
340 }
341 
342 static char **_q_dupEnvironment(const QProcessEnvironmentPrivate::Hash &environment, int *envc)
343 {
344     *envc = 0;
345     if (environment.isEmpty())
346         return 0;
347 
348     char **envp = new char *[environment.count() + 2];
349     envp[environment.count()] = 0;
350     envp[environment.count() + 1] = 0;
351 
352     QProcessEnvironmentPrivate::Hash::ConstIterator it = environment.constBegin();
353     const QProcessEnvironmentPrivate::Hash::ConstIterator end = environment.constEnd();
354     for ( ; it != end; ++it) {
355         QByteArray key = it.key().key;
356         QByteArray value = it.value().bytes();
357         key.reserve(key.length() + 1 + value.length());
358         key.append('=');
359         key.append(value);
360 
361         envp[(*envc)++] = ::strdup(key.constData());
362     }
363 
364     return envp;
365 }
366 
367 void QProcessPrivate::startProcess()
368 {
369     Q_Q(QProcess);
370 
371 #if defined (QPROCESS_DEBUG)
372     qDebug("QProcessPrivate::startProcess()");
373 #endif
374 
375     // Initialize pipes
376     if (!openChannel(stdinChannel) ||
377         !openChannel(stdoutChannel) ||
378         !openChannel(stderrChannel) ||
379         qt_create_pipe(childStartedPipe) != 0) {
380         setErrorAndEmit(QProcess::FailedToStart, qt_error_string(errno));
381         cleanup();
382         return;
383     }
384 
385     if (threadData->hasEventDispatcher()) {
386         startupSocketNotifier = new QSocketNotifier(childStartedPipe[0],
387                                                     QSocketNotifier::Read, q);
388         QObject::connect(startupSocketNotifier, SIGNAL(activated(int)),
389                          q, SLOT(_q_startupNotification()));
390     }
391 
392     // Start the process (platform dependent)
393     q->setProcessState(QProcess::Starting);
394 
395     // Create argument list with right number of elements, and set the final
396     // one to 0.
397     char **argv = new char *[arguments.count() + 2];
398     argv[arguments.count() + 1] = 0;
399 
400     // Encode the program name.
401     QByteArray encodedProgramName = QFile::encodeName(program);
402 #ifdef Q_OS_MAC
403     // allow invoking of .app bundles on the Mac.
404     QFileInfo fileInfo(program);
405     if (encodedProgramName.endsWith(".app") && fileInfo.isDir()) {
406         QCFType<CFURLRef> url = CFURLCreateWithFileSystemPath(0,
407                                                           QCFString(fileInfo.absoluteFilePath()),
408                                                           kCFURLPOSIXPathStyle, true);
409         {
410             // CFBundle is not reentrant, since CFBundleCreate might return a reference
411             // to a cached bundle object. Protect the bundle calls with a mutex lock.
412             static QBasicMutex cfbundleMutex;
413             QMutexLocker lock(&cfbundleMutex);
414             QCFType<CFBundleRef> bundle = CFBundleCreate(0, url);
415             // 'executableURL' can be either relative or absolute ...
416             QCFType<CFURLRef> executableURL = CFBundleCopyExecutableURL(bundle);
417             // not to depend on caching - make sure it's always absolute.
418             url = CFURLCopyAbsoluteURL(executableURL);
419         }
420         if (url) {
421             const QCFString str = CFURLCopyFileSystemPath(url, kCFURLPOSIXPathStyle);
422             encodedProgramName += (QDir::separator() + QDir(program).relativeFilePath(QString::fromCFString(str))).toUtf8();
423         }
424     }
425 #endif
426 
427     // Add the program name to the argument list.
428     argv[0] = nullptr;
429     if (!program.contains(QLatin1Char('/'))) {
430         const QString &exeFilePath = QStandardPaths::findExecutable(program);
431         if (!exeFilePath.isEmpty()) {
432             const QByteArray &tmp = QFile::encodeName(exeFilePath);
433             argv[0] = ::strdup(tmp.constData());
434         }
435     }
436     if (!argv[0])
437         argv[0] = ::strdup(encodedProgramName.constData());
438 
439     // Add every argument to the list
440     for (int i = 0; i < arguments.count(); ++i)
441         argv[i + 1] = ::strdup(QFile::encodeName(arguments.at(i)).constData());
442 
443     // Duplicate the environment.
444     int envc = 0;
445     char **envp = 0;
446     if (environment.d.constData()) {
447         QProcessEnvironmentPrivate::MutexLocker locker(environment.d);
448         envp = _q_dupEnvironment(environment.d.constData()->hash, &envc);
449     }
450 
451     // Encode the working directory if it's non-empty, otherwise just pass 0.
452     const char *workingDirPtr = 0;
453     QByteArray encodedWorkingDirectory;
454     if (!workingDirectory.isEmpty()) {
455         encodedWorkingDirectory = QFile::encodeName(workingDirectory);
456         workingDirPtr = encodedWorkingDirectory.constData();
457     }
458 
459     // Start the process manager, and fork off the child process.
460     pid_t childPid;
461     forkfd = ::forkfd(FFD_CLOEXEC, &childPid);
462     int lastForkErrno = errno;
463     if (forkfd != FFD_CHILD_PROCESS) {
464         // Parent process.
465         // Clean up duplicated memory.
466         for (int i = 0; i <= arguments.count(); ++i)
467             free(argv[i]);
468         for (int i = 0; i < envc; ++i)
469             free(envp[i]);
470         delete [] argv;
471         delete [] envp;
472     }
473 
474     // On QNX, if spawnChild failed, childPid will be -1 but forkfd is still 0.
475     // This is intentional because we only want to handle failure to fork()
476     // here, which is a rare occurrence. Handling of the failure to start is
477     // done elsewhere.
478     if (forkfd == -1) {
479         // Cleanup, report error and return
480 #if defined (QPROCESS_DEBUG)
481         qDebug("fork failed: %s", qPrintable(qt_error_string(lastForkErrno)));
482 #endif
483         q->setProcessState(QProcess::NotRunning);
484         setErrorAndEmit(QProcess::FailedToStart,
485                         QProcess::tr("Resource error (fork failure): %1").arg(qt_error_string(lastForkErrno)));
486         cleanup();
487         return;
488     }
489 
490     // Start the child.
491     if (forkfd == FFD_CHILD_PROCESS) {
492         execChild(workingDirPtr, argv, envp);
493         ::_exit(-1);
494     }
495 
496     pid = Q_PID(childPid);
497 
498     // parent
499     // close the ends we don't use and make all pipes non-blocking
500     qt_safe_close(childStartedPipe[1]);
501     childStartedPipe[1] = -1;
502 
503     if (stdinChannel.pipe[0] != -1) {
504         qt_safe_close(stdinChannel.pipe[0]);
505         stdinChannel.pipe[0] = -1;
506     }
507 
508     if (stdinChannel.pipe[1] != -1)
509         ::fcntl(stdinChannel.pipe[1], F_SETFL, ::fcntl(stdinChannel.pipe[1], F_GETFL) | O_NONBLOCK);
510 
511     if (stdoutChannel.pipe[1] != -1) {
512         qt_safe_close(stdoutChannel.pipe[1]);
513         stdoutChannel.pipe[1] = -1;
514     }
515 
516     if (stdoutChannel.pipe[0] != -1)
517         ::fcntl(stdoutChannel.pipe[0], F_SETFL, ::fcntl(stdoutChannel.pipe[0], F_GETFL) | O_NONBLOCK);
518 
519     if (stderrChannel.pipe[1] != -1) {
520         qt_safe_close(stderrChannel.pipe[1]);
521         stderrChannel.pipe[1] = -1;
522     }
523     if (stderrChannel.pipe[0] != -1)
524         ::fcntl(stderrChannel.pipe[0], F_SETFL, ::fcntl(stderrChannel.pipe[0], F_GETFL) | O_NONBLOCK);
525 
526     if (threadData->eventDispatcher) {
527         deathNotifier = new QSocketNotifier(forkfd, QSocketNotifier::Read, q);
528         QObject::connect(deathNotifier, SIGNAL(activated(int)),
529                          q, SLOT(_q_processDied()));
530     }
531 }
532 
533 void QProcessPrivate::execChild(const char *workingDir, char **argv, char **envp)
534 {
535     ::signal(SIGPIPE, SIG_DFL);         // reset the signal that we ignored
536 
537     Q_Q(QProcess);
538 
539     // copy the stdin socket if asked to (without closing on exec)
540     if (inputChannelMode != QProcess::ForwardedInputChannel)
541         qt_safe_dup2(stdinChannel.pipe[0], STDIN_FILENO, 0);
542 
543     // copy the stdout and stderr if asked to
544     if (processChannelMode != QProcess::ForwardedChannels) {
545         if (processChannelMode != QProcess::ForwardedOutputChannel)
546             qt_safe_dup2(stdoutChannel.pipe[1], STDOUT_FILENO, 0);
547 
548         // merge stdout and stderr if asked to
549         if (processChannelMode == QProcess::MergedChannels) {
550             qt_safe_dup2(STDOUT_FILENO, STDERR_FILENO, 0);
551         } else if (processChannelMode != QProcess::ForwardedErrorChannel) {
552             qt_safe_dup2(stderrChannel.pipe[1], STDERR_FILENO, 0);
553         }
554     }
555 
556     // make sure this fd is closed if execv() succeeds
557     qt_safe_close(childStartedPipe[0]);
558 
559     // enter the working directory
560     const char *callthatfailed = "chdir: ";
561     if (workingDir && QT_CHDIR(workingDir) == -1) {
562         // failed, stop the process
563         goto report_errno;
564     }
565 
566     // this is a virtual call, and it base behavior is to do nothing.
567     q->setupChildProcess();
568 
569     // execute the process
570     if (!envp) {
571         qt_safe_execv(argv[0], argv);
572         callthatfailed = "execv: ";
573     } else {
574 #if defined (QPROCESS_DEBUG)
575         fprintf(stderr, "QProcessPrivate::execChild() starting %s\n", argv[0]);
576 #endif
577         qt_safe_execve(argv[0], argv, envp);
578         callthatfailed = "execve: ";
579     }
580 
581     // notify failure
582     // we're running in the child process, so we don't need to be thread-safe;
583     // we can use strerror
584 report_errno:
585     const char *msg = strerror(errno);
586 #if defined (QPROCESS_DEBUG)
587     fprintf(stderr, "QProcessPrivate::execChild() failed (%s), notifying parent process\n", msg);
588 #endif
589     qt_safe_write(childStartedPipe[1], callthatfailed, strlen(callthatfailed));
590     qt_safe_write(childStartedPipe[1], msg, strlen(msg));
591     qt_safe_close(childStartedPipe[1]);
592     childStartedPipe[1] = -1;
593 }
594 
595 bool QProcessPrivate::processStarted(QString *errorMessage)
596 {
597     char buf[errorBufferMax];
598     int i = 0;
599     int ret;
600     do {
601         ret = qt_safe_read(childStartedPipe[0], buf + i, sizeof buf - i);
602         if (ret > 0)
603             i += ret;
604     } while (ret > 0 && i < int(sizeof buf));
605 
606     if (startupSocketNotifier) {
607         startupSocketNotifier->setEnabled(false);
608         startupSocketNotifier->deleteLater();
609         startupSocketNotifier = 0;
610     }
611     qt_safe_close(childStartedPipe[0]);
612     childStartedPipe[0] = -1;
613 
614 #if defined (QPROCESS_DEBUG)
615     qDebug("QProcessPrivate::processStarted() == %s", i <= 0 ? "true" : "false");
616 #endif
617 
618     // did we read an error message?
619     if ((i > 0) && errorMessage)
620         *errorMessage = QString::fromLocal8Bit(buf, i);
621 
622     return i <= 0;
623 }
624 
625 qint64 QProcessPrivate::bytesAvailableInChannel(const Channel *channel) const
626 {
627     Q_ASSERT(channel->pipe[0] != INVALID_Q_PIPE);
628     int nbytes = 0;
629     qint64 available = 0;
630     if (::ioctl(channel->pipe[0], FIONREAD, (char *) &nbytes) >= 0)
631         available = (qint64) nbytes;
632 #if defined (QPROCESS_DEBUG)
633     qDebug("QProcessPrivate::bytesAvailableInChannel(%d) == %lld", int(channel - &stdinChannel), available);
634 #endif
635     return available;
636 }
637 
638 qint64 QProcessPrivate::readFromChannel(const Channel *channel, char *data, qint64 maxlen)
639 {
640     Q_ASSERT(channel->pipe[0] != INVALID_Q_PIPE);
641     qint64 bytesRead = qt_safe_read(channel->pipe[0], data, maxlen);
642 #if defined QPROCESS_DEBUG
643     int save_errno = errno;
644     qDebug("QProcessPrivate::readFromChannel(%d, %p \"%s\", %lld) == %lld",
645            int(channel - &stdinChannel),
646            data, qt_prettyDebug(data, bytesRead, 16).constData(), maxlen, bytesRead);
647     errno = save_errno;
648 #endif
649     if (bytesRead == -1 && errno == EWOULDBLOCK)
650         return -2;
651     return bytesRead;
652 }
653 
654 bool QProcessPrivate::writeToStdin()
655 {
656     const char *data = writeBuffer.readPointer();
657     const qint64 bytesToWrite = writeBuffer.nextDataBlockSize();
658 
659     qint64 written = qt_safe_write_nosignal(stdinChannel.pipe[1], data, bytesToWrite);
660 #if defined QPROCESS_DEBUG
661     qDebug("QProcessPrivate::writeToStdin(), write(%p \"%s\", %lld) == %lld",
662            data, qt_prettyDebug(data, bytesToWrite, 16).constData(), bytesToWrite, written);
663     if (written == -1)
664         qDebug("QProcessPrivate::writeToStdin(), failed to write (%s)", qPrintable(qt_error_string(errno)));
665 #endif
666     if (written == -1) {
667         // If the O_NONBLOCK flag is set and If some data can be written without blocking
668         // the process, write() will transfer what it can and return the number of bytes written.
669         // Otherwise, it will return -1 and set errno to EAGAIN
670         if (errno == EAGAIN)
671             return true;
672 
673         closeChannel(&stdinChannel);
674         setErrorAndEmit(QProcess::WriteError);
675         return false;
676     }
677     writeBuffer.free(written);
678     if (!emittedBytesWritten && written != 0) {
679         emittedBytesWritten = true;
680         emit q_func()->bytesWritten(written);
681         emittedBytesWritten = false;
682     }
683     return true;
684 }
685 
686 void QProcessPrivate::terminateProcess()
687 {
688 #if defined (QPROCESS_DEBUG)
689     qDebug("QProcessPrivate::terminateProcess()");
690 #endif
691     if (pid)
692         ::kill(pid_t(pid), SIGTERM);
693 }
694 
695 void QProcessPrivate::killProcess()
696 {
697 #if defined (QPROCESS_DEBUG)
698     qDebug("QProcessPrivate::killProcess()");
699 #endif
700     if (pid)
701         ::kill(pid_t(pid), SIGKILL);
702 }
703 
704 bool QProcessPrivate::waitForStarted(int msecs)
705 {
706 #if defined (QPROCESS_DEBUG)
707     qDebug("QProcessPrivate::waitForStarted(%d) waiting for child to start (fd = %d)", msecs,
708            childStartedPipe[0]);
709 #endif
710 
711     pollfd pfd = qt_make_pollfd(childStartedPipe[0], POLLIN);
712 
713     if (qt_poll_msecs(&pfd, 1, msecs) == 0) {
714         setError(QProcess::Timedout);
715 #if defined (QPROCESS_DEBUG)
716         qDebug("QProcessPrivate::waitForStarted(%d) == false (timed out)", msecs);
717 #endif
718         return false;
719     }
720 
721     bool startedEmitted = _q_startupNotification();
722 #if defined (QPROCESS_DEBUG)
723     qDebug("QProcessPrivate::waitForStarted() == %s", startedEmitted ? "true" : "false");
724 #endif
725     return startedEmitted;
726 }
727 
728 bool QProcessPrivate::waitForReadyRead(int msecs)
729 {
730 #if defined (QPROCESS_DEBUG)
731     qDebug("QProcessPrivate::waitForReadyRead(%d)", msecs);
732 #endif
733 
734     QElapsedTimer stopWatch;
735     stopWatch.start();
736 
737     forever {
738         QProcessPoller poller(*this);
739 
740         int timeout = qt_subtract_from_timeout(msecs, stopWatch.elapsed());
741         int ret = poller.poll(timeout);
742 
743         if (ret < 0) {
744             break;
745         }
746         if (ret == 0) {
747             setError(QProcess::Timedout);
748             return false;
749         }
750 
751         if (qt_pollfd_check(poller.childStartedPipe(), POLLIN)) {
752             if (!_q_startupNotification())
753                 return false;
754         }
755 
756         bool readyReadEmitted = false;
757         if (qt_pollfd_check(poller.stdoutPipe(), POLLIN)) {
758             bool canRead = _q_canReadStandardOutput();
759             if (currentReadChannel == QProcess::StandardOutput && canRead)
760                 readyReadEmitted = true;
761         }
762         if (qt_pollfd_check(poller.stderrPipe(), POLLIN)) {
763             bool canRead = _q_canReadStandardError();
764             if (currentReadChannel == QProcess::StandardError && canRead)
765                 readyReadEmitted = true;
766         }
767         if (readyReadEmitted)
768             return true;
769 
770         if (qt_pollfd_check(poller.stdinPipe(), POLLOUT))
771             _q_canWrite();
772 
773         if (qt_pollfd_check(poller.forkfd(), POLLIN)) {
774             if (_q_processDied())
775                 return false;
776         }
777     }
778     return false;
779 }
780 
781 bool QProcessPrivate::waitForBytesWritten(int msecs)
782 {
783 #if defined (QPROCESS_DEBUG)
784     qDebug("QProcessPrivate::waitForBytesWritten(%d)", msecs);
785 #endif
786 
787     QElapsedTimer stopWatch;
788     stopWatch.start();
789 
790     while (!writeBuffer.isEmpty()) {
791         QProcessPoller poller(*this);
792 
793         int timeout = qt_subtract_from_timeout(msecs, stopWatch.elapsed());
794         int ret = poller.poll(timeout);
795 
796         if (ret < 0) {
797             break;
798         }
799 
800         if (ret == 0) {
801             setError(QProcess::Timedout);
802             return false;
803         }
804 
805         if (qt_pollfd_check(poller.childStartedPipe(), POLLIN)) {
806             if (!_q_startupNotification())
807                 return false;
808         }
809 
810         if (qt_pollfd_check(poller.stdinPipe(), POLLOUT))
811             return _q_canWrite();
812 
813         if (qt_pollfd_check(poller.stdoutPipe(), POLLIN))
814             _q_canReadStandardOutput();
815 
816         if (qt_pollfd_check(poller.stderrPipe(), POLLIN))
817             _q_canReadStandardError();
818 
819         if (qt_pollfd_check(poller.forkfd(), POLLIN)) {
820             if (_q_processDied())
821                 return false;
822         }
823     }
824 
825     return false;
826 }
827 
828 bool QProcessPrivate::waitForFinished(int msecs)
829 {
830 #if defined (QPROCESS_DEBUG)
831     qDebug("QProcessPrivate::waitForFinished(%d)", msecs);
832 #endif
833 
834     QElapsedTimer stopWatch;
835     stopWatch.start();
836 
837     forever {
838         QProcessPoller poller(*this);
839 
840         int timeout = qt_subtract_from_timeout(msecs, stopWatch.elapsed());
841         int ret = poller.poll(timeout);
842 
843         if (ret < 0) {
844             break;
845         }
846         if (ret == 0) {
847             setError(QProcess::Timedout);
848             return false;
849         }
850 
851         if (qt_pollfd_check(poller.childStartedPipe(), POLLIN)) {
852             if (!_q_startupNotification())
853                 return false;
854         }
855         if (qt_pollfd_check(poller.stdinPipe(), POLLOUT))
856             _q_canWrite();
857 
858         if (qt_pollfd_check(poller.stdoutPipe(), POLLIN))
859             _q_canReadStandardOutput();
860 
861         if (qt_pollfd_check(poller.stderrPipe(), POLLIN))
862             _q_canReadStandardError();
863 
864         if (qt_pollfd_check(poller.forkfd(), POLLIN)) {
865             if (_q_processDied())
866                 return true;
867         }
868     }
869     return false;
870 }
871 
872 void QProcessPrivate::findExitCode()
873 {
874 }
875 
876 bool QProcessPrivate::waitForDeadChild()
877 {
878     if (forkfd == -1)
879         return true; // child has already exited
880 
881     // read the process information from our fd
882     forkfd_info info;
883     int ret;
884     EINTR_LOOP(ret, forkfd_wait(forkfd, &info, Q_NULLPTR));
885 
886     exitCode = info.status;
887     crashed = info.code != CLD_EXITED;
888 
889     delete deathNotifier;
890     deathNotifier = 0;
891 
892     EINTR_LOOP(ret, forkfd_close(forkfd));
893     forkfd = -1; // Child is dead, don't try to kill it anymore
894 
895 #if defined QPROCESS_DEBUG
896     qDebug() << "QProcessPrivate::waitForDeadChild() dead with exitCode"
897              << exitCode << ", crashed?" << crashed;
898 #endif
899     return true;
900 }
901 
902 bool QProcessPrivate::startDetached(qint64 *pid)
903 {
904     QByteArray encodedWorkingDirectory = QFile::encodeName(workingDirectory);
905 
906     // To catch the startup of the child
907     int startedPipe[2];
908     if (qt_safe_pipe(startedPipe) != 0)
909         return false;
910     // To communicate the pid of the child
911     int pidPipe[2];
912     if (qt_safe_pipe(pidPipe) != 0) {
913         qt_safe_close(startedPipe[0]);
914         qt_safe_close(startedPipe[1]);
915         return false;
916     }
917 
918     if ((stdinChannel.type == Channel::Redirect && !openChannel(stdinChannel))
919             || (stdoutChannel.type == Channel::Redirect && !openChannel(stdoutChannel))
920             || (stderrChannel.type == Channel::Redirect && !openChannel(stderrChannel))) {
921         closeChannel(&stdinChannel);
922         closeChannel(&stdoutChannel);
923         closeChannel(&stderrChannel);
924         return false;
925     }
926 
927     pid_t childPid = fork();
928     if (childPid == 0) {
929         struct sigaction noaction;
930         memset(&noaction, 0, sizeof(noaction));
931         noaction.sa_handler = SIG_IGN;
932         ::sigaction(SIGPIPE, &noaction, 0);
933 
934         ::setsid();
935 
936         qt_safe_close(startedPipe[0]);
937         qt_safe_close(pidPipe[0]);
938 
939         pid_t doubleForkPid = fork();
940         if (doubleForkPid == 0) {
941             qt_safe_close(pidPipe[1]);
942 
943             // copy the stdin socket if asked to (without closing on exec)
944             if (inputChannelMode != QProcess::ForwardedInputChannel)
945                 qt_safe_dup2(stdinChannel.pipe[0], STDIN_FILENO, 0);
946 
947             // copy the stdout and stderr if asked to
948             if (processChannelMode != QProcess::ForwardedChannels) {
949                 if (processChannelMode != QProcess::ForwardedOutputChannel)
950                     qt_safe_dup2(stdoutChannel.pipe[1], STDOUT_FILENO, 0);
951                 if (processChannelMode != QProcess::ForwardedErrorChannel)
952                     qt_safe_dup2(stderrChannel.pipe[1], STDERR_FILENO, 0);
953             }
954 
955             if (!encodedWorkingDirectory.isEmpty()) {
956                 if (QT_CHDIR(encodedWorkingDirectory.constData()) == -1)
957                     qWarning("QProcessPrivate::startDetached: failed to chdir to %s", encodedWorkingDirectory.constData());
958             }
959 
960             char **argv = new char *[arguments.size() + 2];
961             for (int i = 0; i < arguments.size(); ++i)
962                 argv[i + 1] = ::strdup(QFile::encodeName(arguments.at(i)).constData());
963             argv[arguments.size() + 1] = 0;
964 
965             // Duplicate the environment.
966             int envc = 0;
967             char **envp = nullptr;
968             if (environment.d.constData()) {
969                 QProcessEnvironmentPrivate::MutexLocker locker(environment.d);
970                 envp = _q_dupEnvironment(environment.d.constData()->hash, &envc);
971             }
972 
973             QByteArray tmp;
974             if (!program.contains(QLatin1Char('/'))) {
975                 const QString &exeFilePath = QStandardPaths::findExecutable(program);
976                 if (!exeFilePath.isEmpty())
977                     tmp = QFile::encodeName(exeFilePath);
978             }
979             if (tmp.isEmpty())
980                 tmp = QFile::encodeName(program);
981             argv[0] = tmp.data();
982 
983             if (envp)
984                 qt_safe_execve(argv[0], argv, envp);
985             else
986                 qt_safe_execv(argv[0], argv);
987 
988             struct sigaction noaction;
989             memset(&noaction, 0, sizeof(noaction));
990             noaction.sa_handler = SIG_IGN;
991             ::sigaction(SIGPIPE, &noaction, 0);
992 
993             // '\1' means execv failed
994             char c = '\1';
995             qt_safe_write(startedPipe[1], &c, 1);
996             qt_safe_close(startedPipe[1]);
997             ::_exit(1);
998         } else if (doubleForkPid == -1) {
999             struct sigaction noaction;
1000             memset(&noaction, 0, sizeof(noaction));
1001             noaction.sa_handler = SIG_IGN;
1002             ::sigaction(SIGPIPE, &noaction, 0);
1003 
1004             // '\2' means internal error
1005             char c = '\2';
1006             qt_safe_write(startedPipe[1], &c, 1);
1007         }
1008 
1009         qt_safe_close(startedPipe[1]);
1010         qt_safe_write(pidPipe[1], (const char *)&doubleForkPid, sizeof(pid_t));
1011         if (QT_CHDIR("/") == -1)
1012             qWarning("QProcessPrivate::startDetached: failed to chdir to /");
1013         ::_exit(1);
1014     }
1015 
1016     qt_safe_close(startedPipe[1]);
1017     qt_safe_close(pidPipe[1]);
1018     closeChannel(&stdinChannel);
1019     closeChannel(&stdoutChannel);
1020     closeChannel(&stderrChannel);
1021 
1022     if (childPid == -1) {
1023         qt_safe_close(startedPipe[0]);
1024         qt_safe_close(pidPipe[0]);
1025         return false;
1026     }
1027 
1028     char reply = '\0';
1029     int startResult = qt_safe_read(startedPipe[0], &reply, 1);
1030     int result;
1031     qt_safe_close(startedPipe[0]);
1032     qt_safe_waitpid(childPid, &result, 0);
1033     bool success = (startResult != -1 && reply == '\0');
1034     if (success && pid) {
1035         pid_t actualPid = 0;
1036         if (qt_safe_read(pidPipe[0], (char *)&actualPid, sizeof(pid_t)) == sizeof(pid_t)) {
1037             *pid = actualPid;
1038         } else {
1039             *pid = 0;
1040         }
1041     }
1042     qt_safe_close(pidPipe[0]);
1043     return success;
1044 }
1045 
1046 #endif // QT_CONFIG(process)
1047 
1048 QT_END_NAMESPACE
