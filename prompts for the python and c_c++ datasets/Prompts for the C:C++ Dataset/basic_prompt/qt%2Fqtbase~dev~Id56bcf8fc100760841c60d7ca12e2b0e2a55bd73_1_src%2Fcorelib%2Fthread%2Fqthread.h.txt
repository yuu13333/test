Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #ifndef QTHREAD_H
41 #define QTHREAD_H
42 
43 #include <QtCore/qobject.h>
44 
45 // The implementation of QThread::create uses various C++14/C++17 facilities;
46 // we must check for their presence. For std::async (used in all codepaths)
47 // there is no SG10 feature macro; just test for the header presence.
48 // For the C++17 codepath do some more throughout checks for std::invoke and
49 // C++14 lambdas availability.
50 #if QT_HAS_INCLUDE(<future>)
51 #  define QTHREAD_HAS_CREATE
52 #  include <future> // for std::async
53 #  include <functional> // for std::invoke; no guard needed as it's a C++98 header
54 
55 #  if defined(__cpp_lib_invoke) && __cpp_lib_invoke >= 201411 \
56       && defined(__cpp_init_captures) && __cpp_init_captures >= 201304 \
57       && defined(__cpp_generic_lambdas) &&  __cpp_generic_lambdas >= 201304
58 #    define QTHREAD_HAS_VARIADIC_CREATE
59 #  endif
60 #endif
61 
62 #if QT_HAS_INCLUDE(<chrono>)
63 #  include <chrono>
64 #endif
65 
66 #include <limits.h>
67 
68 QT_BEGIN_NAMESPACE
69 
70 
71 class QThreadData;
72 class QThreadPrivate;
73 class QAbstractEventDispatcher;
74 
75 #ifndef QT_NO_THREAD
76 class Q_CORE_EXPORT QThread : public QObject
77 {
78     Q_OBJECT
79 public:
80     static Qt::HANDLE currentThreadId() Q_DECL_NOTHROW Q_DECL_PURE_FUNCTION;
81     static QThread *currentThread();
82     static int idealThreadCount() Q_DECL_NOTHROW;
83     static void yieldCurrentThread();
84 
85     explicit QThread(QObject *parent = Q_NULLPTR);
86     ~QThread();
87 
88     enum Priority {
89         IdlePriority,
90 
91         LowestPriority,
92         LowPriority,
93         NormalPriority,
94         HighPriority,
95         HighestPriority,
96 
97         TimeCriticalPriority,
98 
99         InheritPriority
100     };
101 
102     void setPriority(Priority priority);
103     Priority priority() const;
104 
105     bool isFinished() const;
106     bool isRunning() const;
107 
108     void requestInterruption();
109     bool isInterruptionRequested() const;
110 
111     void setStackSize(uint stackSize);
112     uint stackSize() const;
113 
114     void exit(int retcode = 0);
115 
116     QAbstractEventDispatcher *eventDispatcher() const;
117     void setEventDispatcher(QAbstractEventDispatcher *eventDispatcher);
118 
119     bool event(QEvent *event) Q_DECL_OVERRIDE;
120     int loopLevel() const;
121 
122 #ifdef QTHREAD_HAS_CREATE
123 #ifdef QTHREAD_HAS_VARIADIC_CREATE
124     template <typename Function, typename... Args>
125     static QThread *create(Function &&f, Args &&... args);
126 #else
127     template <typename Function>
128     static QThread *create(Function &&f);
129 #endif
130 #endif
131 
132 public Q_SLOTS:
133     void start(Priority = InheritPriority);
134     void terminate();
135     void quit();
136 
137 public:
138     // default argument causes thread to block indefinetely
139     bool wait(unsigned long time = ULONG_MAX);
140 
141     static void sleep(unsigned long);
142     static void msleep(unsigned long);
143     static void usleep(unsigned long);
144 
145 #if QT_HAS_INCLUDE(<chrono>)
146 private:
147     template <typename ToPeriod, typename FromRep, typename FromPeriod>
148     static Q_DECL_RELAXED_CONSTEXPR unsigned long convertToULongPeriod(std::chrono::duration<FromRep, FromPeriod> duration)
149     {
150         if (duration < duration.zero())
151             return 0;
152         using D = std::chrono::duration<unsigned long, ToPeriod>;
153         auto converted = std::chrono::duration_cast<D>(duration);
154         if (converted < duration)
155             converted += D(1);
156         Q_ASSERT(converted >= duration);
157         return converted.count();
158     }
159 public:
160     template <typename Rep, typename Period>
161     bool wait(std::chrono::duration<Rep, Period> duration)
162     { return wait(convertToULongPeriod<std::milli>(duration)); }
163 
164     template <typename Rep, typename Period>
165     static void sleep(std::chrono::duration<Rep, Period> duration)
166     {
167         if (duration < std::chrono::seconds(1))
168             usleep(convertToULongPeriod<std::micro>(duration));
169         else
170             msleep(convertToULongPeriod<std::milli>(duration));
171     }
172 #endif
173 
174 Q_SIGNALS:
175     void started(QPrivateSignal);
176     void finished(QPrivateSignal);
177 
178 protected:
179     virtual void run();
180     int exec();
181 
182     static void setTerminationEnabled(bool enabled = true);
183 
184 protected:
185     QThread(QThreadPrivate &dd, QObject *parent = Q_NULLPTR);
186 
187 private:
188     Q_DECLARE_PRIVATE(QThread)
189 
190     friend class QCoreApplication;
191     friend class QThreadData;
192 };
193 
194 #ifdef QTHREAD_HAS_CREATE
195 namespace QtPrivate {
196 
197 class QThreadCreateThread : public QThread
198 {
199 public:
200 #if defined(QTHREAD_HAS_VARIADIC_CREATE)
201     // C++17: std::thread's constructor complying call
202     template <typename Function, typename... Args>
203     explicit QThreadCreateThread(Function &&f, Args &&... args)
204         : m_future(std::async(std::launch::deferred,
205                    [f = static_cast<typename std::decay<Function>::type>(std::forward<Function>(f))](auto &&... largs) mutable -> void
206                    {
207                        (void)std::invoke(std::move(f), std::forward<decltype(largs)>(largs)...);
208                    }, std::forward<Args>(args)...))
209     {
210     }
211 #elif defined(__cpp_init_captures) && __cpp_init_captures >= 201304
212     // C++14: implementation for just one callable
213     template <typename Function>
214     explicit QThreadCreateThread(Function &&f)
215         : m_future(std::async(std::launch::deferred,
216                    [f = static_cast<typename std::decay<Function>::type>(std::forward<Function>(f))]() mutable -> void
217                    {
218                        (void)f();
219                    }))
220     {
221     }
222 #else
223 private:
224     // C++11: same as C++14, but with a workaround for not having generalized lambda captures
225     template <typename Function>
226     struct Callable
227     {
228         explicit Callable(Function &&f)
229             : m_function(std::forward<Function>(f))
230         {
231         }
232 
233 #if defined(Q_COMPILER_DEFAULT_MEMBERS) && defined(Q_COMPILER_DELETE_MEMBERS)
234         // Apply the same semantics of a lambda closure type w.r.t. the special
235         // member functions, if possible: delete the copy assignment operator,
236         // bring back all the others as per the RO5 (cf. ยง8.1.5.1/11 [expr.prim.lambda.closure])
237         ~Callable() = default;
238         Callable(const Callable &) = default;
239         Callable(Callable &&) = default;
240         Callable &operator=(const Callable &) = delete;
241         Callable &operator=(Callable &&) = default;
242 #endif
243 
244         void operator()()
245         {
246             (void)m_function();
247         }
248 
249         typename std::decay<Function>::type m_function;
250     };
251 
252 public:
253     template <typename Function>
254     explicit QThreadCreateThread(Function &&f)
255         : m_future(std::async(std::launch::deferred, Callable<Function>(std::forward<Function>(f))))
256     {
257     }
258 #endif // QTHREAD_HAS_VARIADIC_CREATE
259 
260 private:
261     void run() override
262     {
263         m_future.get();
264     }
265 
266     std::future<void> m_future;
267 };
268 
269 } // namespace QtPrivate
270 
271 #ifdef QTHREAD_HAS_VARIADIC_CREATE
272 template <typename Function, typename... Args>
273 QThread *QThread::create(Function &&f, Args &&... args)
274 {
275     return new QtPrivate::QThreadCreateThread(std::forward<Function>(f), std::forward<Args>(args)...);
276 }
277 #else
278 template <typename Function>
279 QThread *QThread::create(Function &&f)
280 {
281     return new QtPrivate::QThreadCreateThread(std::forward<Function>(f));
282 }
283 #endif // QTHREAD_HAS_VARIADIC_CREATE
284 
285 #endif // QTHREAD_HAS_CREATE
286 
287 #else // QT_NO_THREAD
288 
289 class Q_CORE_EXPORT QThread : public QObject
290 {
291 public:
292     static Qt::HANDLE currentThreadId() { return Qt::HANDLE(currentThread()); }
293     static QThread* currentThread();
294 
295 protected:
296     QThread(QThreadPrivate &dd, QObject *parent = nullptr);
297 
298 private:
299     explicit QThread(QObject *parent = nullptr);
300     static QThread *instance;
301 
302     friend class QCoreApplication;
303     friend class QThreadData;
304     friend class QAdoptedThread;
305     Q_DECLARE_PRIVATE(QThread)
306 };
307 
308 #endif // QT_NO_THREAD
309 
310 QT_END_NAMESPACE
311 
312 #endif // QTHREAD_H
