Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2020 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the test suite of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:GPL-EXCEPT$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
21 ** included in the packaging of this file. Please review the following
22 ** information to ensure the GNU General Public License requirements will
23 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
24 **
25 ** $QT_END_LICENSE$
26 **
27 ****************************************************************************/
28 
29 #include <QtTest/QtTest>
30 #include <QtCore/qglobal.h>
31 #include <QtCore/qthread.h>
32 #include <QtCore/qbytearray.h>
33 #include <QtCore/qeventloop.h>
34 #include <QtCore/qvector.h>
35 #include <QtCore/qelapsedtimer.h>
36 #include <QtNetwork/qlocalsocket.h>
37 #include <QtNetwork/qlocalserver.h>
38 
39 class tst_QLocalSocket : public QObject
40 {
41     Q_OBJECT
42 
43 private slots:
44     void pingPong_data();
45     void pingPong();
46     void dataExchange_data();
47     void dataExchange();
48 };
49 
50 class ServerThread : public QThread
51 {
52 public:
53     explicit ServerThread(int chunkSize)
54     {
55         buffer.resize(chunkSize);
56     }
57 
58     void run() override
59     {
60         QLocalServer *server = new QLocalServer();
61 
62         connect(server, &QLocalServer::newConnection, [this, server]() {
63             auto socket = server->nextPendingConnection();
64 
65             connect(socket, &QLocalSocket::readyRead, [this, socket]() {
66                 const qint64 bytesAvailable = socket->bytesAvailable();
67 
68                 QCOMPARE(socket->read(this->buffer.data(), bytesAvailable), bytesAvailable);
69                 QCOMPARE(socket->write(this->buffer.data(), bytesAvailable), bytesAvailable);
70             });
71         });
72 
73         server->listen("foo");
74         exec();
75         delete server;
76     }
77 
78 protected:
79     QByteArray buffer;
80 };
81 
82 class SocketFactory : public QObject
83 {
84     Q_OBJECT
85 
86 public:
87     explicit SocketFactory(int chunkSize, int connections, qint64 bytesToTransfer)
88         : numberOfSockets(connections)
89     {
90         buffer.resize(chunkSize);
91         bytesToRead.fill(qMax(1, bytesToTransfer / chunkSize) * chunkSize, connections);
92         for (int i = 0; i < connections; ++i) {
93             QLocalSocket *socket = new QLocalSocket(this);
94             Q_CHECK_PTR(socket);
95 
96             connect(this, &SocketFactory::start, [this, socket]() {
97                QCOMPARE(socket->write(this->buffer.data(), this->buffer.size()),
98                                       this->buffer.size());
99             });
100 
101             connect(socket, &QLocalSocket::readyRead, [i, this, socket]() {
102                 const qint64 bytesAvailable = socket->bytesAvailable();
103 
104                 QCOMPARE(socket->read(this->buffer.data(), bytesAvailable), bytesAvailable);
105                 this->bytesToRead[i] -= bytesAvailable;
106                 if (this->bytesToRead[i] == 0) {
107                     if (--this->numberOfSockets == 0)
108                         this->eventLoop.quit();
109                 } else {
110                     QCOMPARE(socket->write(this->buffer.data(), this->buffer.size()),
111                                            this->buffer.size());
112                 }
113             });
114 
115             while (socket->state() != QLocalSocket::ConnectedState)
116                 socket->connectToServer("foo");
117         }
118     }
119 
120     void run()
121     {
122         emit start();
123         eventLoop.exec();
124     }
125 
126 signals:
127     void start();
128 
129 protected:
130     QByteArray buffer;
131     QEventLoop eventLoop;
132     QVector<qint64> bytesToRead;
133     int numberOfSockets;
134 };
135 
136 void tst_QLocalSocket::pingPong_data()
137 {
138     QTest::addColumn<int>("connections");
139     for (int value : {10, 50, 100, 1000, 10000})
140         QTest::addRow("connections: %d", value) << value;
141 }
142 
143 void tst_QLocalSocket::pingPong()
144 {
145     QFETCH(int, connections);
146 
147     const int iterations = 100000;
148 
149     ServerThread serverThread(1);
150     serverThread.start();
151     SocketFactory factory(1, connections, qMax(1, iterations / connections));
152 
153     QElapsedTimer timer;
154     timer.start();
155 
156     factory.run();
157 
158     qDebug("Elapsed time: %.1f s", timer.elapsed() / 1000.0);
159     serverThread.quit();
160     serverThread.wait();
161 }
162 
163 void tst_QLocalSocket::dataExchange_data()
164 {
165     QTest::addColumn<int>("connections");
166     QTest::addColumn<int>("chunkSize");
167     for (int connections : {1, 5, 10}) {
168         for (int chunkSize : {100, 1000, 10000, 100000 }) {
169             QTest::addRow("connections: %d, chunk size: %d",
170                           connections, chunkSize) << connections << chunkSize;
171         }
172     }
173 }
174 
175 void tst_QLocalSocket::dataExchange()
176 {
177     QFETCH(int, connections);
178     QFETCH(int, chunkSize);
179 
180     const qint64 iterations = 50000;
181 
182     ServerThread serverThread(chunkSize);
183     serverThread.start();
184     SocketFactory factory(chunkSize, connections, iterations * chunkSize / connections);
185 
186     QElapsedTimer timer;
187     timer.start();
188 
189     factory.run();
190 
191     qDebug("Elapsed time: %.1f s", timer.elapsed() / 1000.0);
192     serverThread.quit();
193     serverThread.wait();
194 }
195 
196 QTEST_MAIN(tst_QLocalSocket)
197 
198 #include "tst_qlocalsocket.moc"
