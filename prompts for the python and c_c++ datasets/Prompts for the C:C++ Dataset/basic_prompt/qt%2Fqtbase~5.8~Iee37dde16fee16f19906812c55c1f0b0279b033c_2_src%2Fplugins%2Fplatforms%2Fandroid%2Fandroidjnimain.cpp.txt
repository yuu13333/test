Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2014 BogDan Vatra <bogdan@kde.org>
4 ** Copyright (C) 2016 The Qt Company Ltd.
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the plugins of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:LGPL$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU Lesser General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU Lesser
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
22 ** packaging of this file. Please review the following information to
23 ** ensure the GNU Lesser General Public License version 3 requirements
24 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
25 **
26 ** GNU General Public License Usage
27 ** Alternatively, this file may be used under the terms of the GNU
28 ** General Public License version 2.0 or (at your option) the GNU General
29 ** Public license version 3 or any later version approved by the KDE Free
30 ** Qt Foundation. The licenses are as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
32 ** included in the packaging of this file. Please review the following
33 ** information to ensure the GNU General Public License requirements will
34 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
35 ** https://www.gnu.org/licenses/gpl-3.0.html.
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 #include <dlfcn.h>
42 #include <pthread.h>
43 #include <semaphore.h>
44 #include <qplugin.h>
45 #include <qdebug.h>
46 
47 #include "androidjnimain.h"
48 #include "androidjniaccessibility.h"
49 #include "androidjniinput.h"
50 #include "androidjniclipboard.h"
51 #include "androidjnimenu.h"
52 #include "androiddeadlockprotector.h"
53 #include "qandroidplatformdialoghelpers.h"
54 #include "qandroidplatformintegration.h"
55 #include "qandroidassetsfileenginehandler.h"
56 
57 #include <android/bitmap.h>
58 #include <android/asset_manager_jni.h>
59 #include "qandroideventdispatcher.h"
60 #include <android/api-level.h>
61 
62 #include <QtCore/private/qjnihelpers_p.h>
63 #include <QtCore/private/qjni_p.h>
64 #include <QtGui/private/qguiapplication_p.h>
65 #include <QtGui/private/qhighdpiscaling_p.h>
66 
67 #include <qpa/qwindowsysteminterface.h>
68 
69 Q_IMPORT_PLUGIN(QAndroidPlatformIntegrationPlugin)
70 
71 QT_BEGIN_NAMESPACE
72 
73 static JavaVM *m_javaVM = nullptr;
74 static jclass m_applicationClass  = nullptr;
75 static jobject m_classLoaderObject = nullptr;
76 static jmethodID m_loadClassMethodID = nullptr;
77 static AAssetManager *m_assetManager = nullptr;
78 static jobject m_resourcesObj = nullptr;
79 static jobject m_activityObject = nullptr;
80 static jmethodID m_createSurfaceMethodID = nullptr;
81 static jobject m_serviceObject = nullptr;
82 static jmethodID m_setSurfaceGeometryMethodID = nullptr;
83 static jmethodID m_destroySurfaceMethodID = nullptr;
84 
85 static bool m_activityActive = true; // defaults to true because when the platform plugin is
86                                      // initialized, QtActivity::onResume() has already been called
87 
88 static jclass m_bitmapClass  = nullptr;
89 static jmethodID m_createBitmapMethodID = nullptr;
90 static jobject m_ARGB_8888_BitmapConfigValue = nullptr;
91 static jobject m_RGB_565_BitmapConfigValue = nullptr;
92 
93 static bool m_statusBarShowing = true;
94 
95 static jclass m_bitmapDrawableClass = nullptr;
96 static jmethodID m_bitmapDrawableConstructorMethodID = nullptr;
97 
98 extern "C" typedef int (*Main)(int, char **); //use the standard main method to start the application
99 static Main m_main = nullptr;
100 static void *m_mainLibraryHnd = nullptr;
101 static QList<QByteArray> m_applicationParams;
102 pthread_t m_qtAppThread = 0;
103 static sem_t m_exitSemaphore, m_terminateSemaphore;
104 
105 struct SurfaceData
106 {
107     ~SurfaceData() { delete surface; }
108     QJNIObjectPrivate *surface = nullptr;
109     AndroidSurfaceClient *client = nullptr;
110 };
111 
112 QHash<int, AndroidSurfaceClient *> m_surfaces;
113 
114 static QMutex m_surfacesMutex;
115 static int m_surfaceId = 1;
116 
117 
118 static QAndroidPlatformIntegration *m_androidPlatformIntegration = nullptr;
119 
120 static int m_desktopWidthPixels  = 0;
121 static int m_desktopHeightPixels = 0;
122 static double m_scaledDensity = 0;
123 static double m_density = 1.0;
124 
125 static AndroidAssetsFileEngineHandler *m_androidAssetsFileEngineHandler = nullptr;
126 
127 
128 
129 static const char m_qtTag[] = "Qt";
130 static const char m_classErrorMsg[] = "Can't find class \"%s\"";
131 static const char m_methodErrorMsg[] = "Can't find method \"%s%s\"";
132 
133 namespace QtAndroid
134 {
135     void setAndroidPlatformIntegration(QAndroidPlatformIntegration *androidPlatformIntegration)
136     {
137         m_surfacesMutex.lock();
138         m_androidPlatformIntegration = androidPlatformIntegration;
139         m_surfacesMutex.unlock();
140     }
141 
142     QAndroidPlatformIntegration *androidPlatformIntegration()
143     {
144         QMutexLocker locker(&m_surfacesMutex);
145         return m_androidPlatformIntegration;
146     }
147 
148     QWindow *topLevelWindowAt(const QPoint &globalPos)
149     {
150         return m_androidPlatformIntegration
151                ? m_androidPlatformIntegration->screen()->topLevelAt(globalPos)
152                : 0;
153     }
154 
155     int desktopWidthPixels()
156     {
157         return m_desktopWidthPixels;
158     }
159 
160     int desktopHeightPixels()
161     {
162         return m_desktopHeightPixels;
163     }
164 
165     double scaledDensity()
166     {
167         return m_scaledDensity;
168     }
169 
170     double pixelDensity()
171     {
172         return m_density;
173     }
174 
175     JavaVM *javaVM()
176     {
177         return m_javaVM;
178     }
179 
180     AAssetManager *assetManager()
181     {
182         return m_assetManager;
183     }
184 
185     jclass applicationClass()
186     {
187         return m_applicationClass;
188     }
189 
190     jobject activity()
191     {
192         return m_activityObject;
193     }
194 
195     jobject service()
196     {
197         return m_serviceObject;
198     }
199 
200     void showStatusBar()
201     {
202         if (m_statusBarShowing)
203             return;
204 
205         QJNIObjectPrivate::callStaticMethod<void>(m_applicationClass, "setFullScreen", "(Z)V", false);
206         m_statusBarShowing = true;
207     }
208 
209     void hideStatusBar()
210     {
211         if (!m_statusBarShowing)
212             return;
213 
214         QJNIObjectPrivate::callStaticMethod<void>(m_applicationClass, "setFullScreen", "(Z)V", true);
215         m_statusBarShowing = false;
216     }
217 
218     void setApplicationActive()
219     {
220         if (m_activityActive)
221             QWindowSystemInterface::handleApplicationStateChanged(Qt::ApplicationActive);
222     }
223 
224     jobject createBitmap(QImage img, JNIEnv *env)
225     {
226         if (!m_bitmapClass)
227             return 0;
228 
229         if (img.format() != QImage::Format_RGBA8888 && img.format() != QImage::Format_RGB16)
230             img = img.convertToFormat(QImage::Format_RGBA8888);
231 
232         jobject bitmap = env->CallStaticObjectMethod(m_bitmapClass,
233                                                      m_createBitmapMethodID,
234                                                      img.width(),
235                                                      img.height(),
236                                                      img.format() == QImage::Format_RGBA8888
237                                                         ? m_ARGB_8888_BitmapConfigValue
238                                                         : m_RGB_565_BitmapConfigValue);
239         if (!bitmap)
240             return 0;
241 
242         AndroidBitmapInfo info;
243         if (AndroidBitmap_getInfo(env, bitmap, &info) < 0) {
244             env->DeleteLocalRef(bitmap);
245             return 0;
246         }
247 
248         void *pixels;
249         if (AndroidBitmap_lockPixels(env, bitmap, &pixels) < 0) {
250             env->DeleteLocalRef(bitmap);
251             return 0;
252         }
253 
254         if (info.stride == uint(img.bytesPerLine())
255                 && info.width == uint(img.width())
256                 && info.height == uint(img.height())) {
257             memcpy(pixels, img.constBits(), info.stride * info.height);
258         } else {
259             uchar *bmpPtr = static_cast<uchar *>(pixels);
260             const unsigned width = qMin(info.width, (uint)img.width()); //should be the same
261             const unsigned height = qMin(info.height, (uint)img.height()); //should be the same
262             for (unsigned y = 0; y < height; y++, bmpPtr += info.stride)
263                 memcpy(bmpPtr, img.constScanLine(y), width);
264         }
265         AndroidBitmap_unlockPixels(env, bitmap);
266         return bitmap;
267     }
268 
269     jobject createBitmap(int width, int height, QImage::Format format, JNIEnv *env)
270     {
271         if (format != QImage::Format_RGBA8888
272                 && format != QImage::Format_RGB16)
273             return 0;
274 
275         return env->CallStaticObjectMethod(m_bitmapClass,
276                                                      m_createBitmapMethodID,
277                                                      width,
278                                                      height,
279                                                      format == QImage::Format_RGB16
280                                                         ? m_RGB_565_BitmapConfigValue
281                                                         : m_ARGB_8888_BitmapConfigValue);
282     }
283 
284     jobject createBitmapDrawable(jobject bitmap, JNIEnv *env)
285     {
286         if (!bitmap || !m_bitmapDrawableClass || !m_resourcesObj)
287             return 0;
288 
289         return env->NewObject(m_bitmapDrawableClass,
290                               m_bitmapDrawableConstructorMethodID,
291                               m_resourcesObj,
292                               bitmap);
293     }
294 
295     const char *classErrorMsgFmt()
296     {
297         return m_classErrorMsg;
298     }
299 
300     const char *methodErrorMsgFmt()
301     {
302         return m_methodErrorMsg;
303     }
304 
305     const char *qtTagText()
306     {
307         return m_qtTag;
308     }
309 
310     QString deviceName()
311     {
312         QString manufacturer = QJNIObjectPrivate::getStaticObjectField("android/os/Build", "MANUFACTURER", "Ljava/lang/String;").toString();
313         QString model = QJNIObjectPrivate::getStaticObjectField("android/os/Build", "MODEL", "Ljava/lang/String;").toString();
314 
315         return manufacturer + QLatin1Char(' ') + model;
316     }
317 
318     int createSurface(AndroidSurfaceClient *client, const QRect &geometry, bool onTop, int imageDepth)
319     {
320         QJNIEnvironmentPrivate env;
321         if (!env)
322             return -1;
323 
324         m_surfacesMutex.lock();
325         int surfaceId = m_surfaceId++;
326         m_surfaces[surfaceId] = client;
327         m_surfacesMutex.unlock();
328 
329         jint x = 0, y = 0, w = -1, h = -1;
330         if (!geometry.isNull()) {
331             x = geometry.x();
332             y = geometry.y();
333             w = std::max(geometry.width(), 1);
334             h = std::max(geometry.height(), 1);
335         }
336         env->CallStaticVoidMethod(m_applicationClass,
337                                      m_createSurfaceMethodID,
338                                      surfaceId,
339                                      jboolean(onTop),
340                                      x, y, w, h,
341                                      imageDepth);
342         return surfaceId;
343     }
344 
345     int insertNativeView(jobject view, const QRect &geometry)
346     {
347         m_surfacesMutex.lock();
348         const int surfaceId = m_surfaceId++;
349         m_surfaces[surfaceId] = nullptr; // dummy
350         m_surfacesMutex.unlock();
351 
352         jint x = 0, y = 0, w = -1, h = -1;
353         if (!geometry.isNull())
354             geometry.getRect(&x, &y, &w, &h);
355 
356         QJNIObjectPrivate::callStaticMethod<void>(m_applicationClass,
357                                                   "insertNativeView",
358                                                   "(ILandroid/view/View;IIII)V",
359                                                   surfaceId,
360                                                   view,
361                                                   x,
362                                                   y,
363                                                   qMax(w, 1),
364                                                   qMax(h, 1));
365 
366         return surfaceId;
367     }
368 
369     void setViewVisibility(jobject view, bool visible)
370     {
371         QJNIObjectPrivate::callStaticMethod<void>(m_applicationClass,
372                                                   "setViewVisibility",
373                                                   "(Landroid/view/View;Z)V",
374                                                   view,
375                                                   visible);
376     }
377 
378     void setSurfaceGeometry(int surfaceId, const QRect &geometry)
379     {
380         if (surfaceId == -1)
381             return;
382 
383         QJNIEnvironmentPrivate env;
384         if (!env)
385             return;
386         jint x = 0, y = 0, w = -1, h = -1;
387         if (!geometry.isNull()) {
388             x = geometry.x();
389             y = geometry.y();
390             w = geometry.width();
391             h = geometry.height();
392         }
393         env->CallStaticVoidMethod(m_applicationClass,
394                                      m_setSurfaceGeometryMethodID,
395                                      surfaceId,
396                                      x, y, w, h);
397     }
398 
399 
400     void destroySurface(int surfaceId)
401     {
402         if (surfaceId == -1)
403             return;
404 
405         QJNIEnvironmentPrivate env;
406         if (!env)
407             return;
408 
409         env->CallStaticVoidMethod(m_applicationClass,
410                                      m_destroySurfaceMethodID,
411                                      surfaceId);
412     }
413 
414     void bringChildToFront(int surfaceId)
415     {
416         if (surfaceId == -1)
417             return;
418 
419         QJNIObjectPrivate::callStaticMethod<void>(m_applicationClass,
420                                                   "bringChildToFront",
421                                                   "(I)V",
422                                                   surfaceId);
423     }
424 
425     void bringChildToBack(int surfaceId)
426     {
427         if (surfaceId == -1)
428             return;
429 
430         QJNIObjectPrivate::callStaticMethod<void>(m_applicationClass,
431                                                   "bringChildToBack",
432                                                   "(I)V",
433                                                   surfaceId);
434     }
435 
436     bool blockEventLoopsWhenSuspended()
437     {
438         static bool block = qEnvironmentVariableIntValue("QT_BLOCK_EVENT_LOOPS_WHEN_SUSPENDED");
439         return block;
440     }
441 
442 } // namespace QtAndroid
443 
444 
445 static jboolean startQtAndroidPlugin(JNIEnv* /*env*/, jobject /*object*//*, jobject applicationAssetManager*/)
446 {
447     m_androidPlatformIntegration = nullptr;
448     m_androidAssetsFileEngineHandler = new AndroidAssetsFileEngineHandler();
449     return true;
450 }
451 
452 static void *startMainMethod(void */*data*/)
453 {
454     QVarLengthArray<const char *> params(m_applicationParams.size());
455     for (int i = 0; i < m_applicationParams.size(); i++)
456         params[i] = static_cast<const char *>(m_applicationParams[i].constData());
457 
458     int ret = m_main(m_applicationParams.length(), const_cast<char **>(params.data()));
459 
460     if (m_mainLibraryHnd) {
461         int res = dlclose(m_mainLibraryHnd);
462         if (res < 0)
463             qWarning() << "dlclose failed:" << dlerror();
464     }
465 
466     if (m_applicationClass)
467         QJNIObjectPrivate::callStaticMethod<void>(m_applicationClass, "quitApp", "()V");
468 
469     // All attached threads should be detached before returning from this function.
470     JavaVM *vm = QtAndroidPrivate::javaVM();
471     if (vm != 0)
472         vm->DetachCurrentThread();
473 
474     sem_post(&m_terminateSemaphore);
475     sem_wait(&m_exitSemaphore);
476     sem_destroy(&m_exitSemaphore);
477 
478     // We must call exit() to ensure that all global objects will be destructed
479     exit(ret);
480     return 0;
481 }
482 
483 static jboolean startQtApplication(JNIEnv *env, jobject /*object*/, jstring paramsString, jstring environmentString)
484 {
485     m_mainLibraryHnd = nullptr;
486     { // Set env. vars
487         const char *nativeString = env->GetStringUTFChars(environmentString, 0);
488         const QList<QByteArray> envVars = QByteArray(nativeString).split('\t');
489         env->ReleaseStringUTFChars(environmentString, nativeString);
490         for (const QByteArray &envVar : envVars) {
491             const QList<QByteArray> envVarPair = envVar.split('=');
492             if (envVarPair.size() == 2 && ::setenv(envVarPair[0], envVarPair[1], 1) != 0)
493                 qWarning() << "Can't set environment" << envVarPair;
494         }
495     }
496 
497     const char *nativeString = env->GetStringUTFChars(paramsString, 0);
498     QByteArray string = nativeString;
499     env->ReleaseStringUTFChars(paramsString, nativeString);
500 
501     m_applicationParams=string.split('\t');
502 
503     // Go home
504     QDir::setCurrent(QDir::homePath());
505 
506     //look for main()
507     if (m_applicationParams.length()) {
508         // Obtain a handle to the main library (the library that contains the main() function).
509         // This library should already be loaded, and calling dlopen() will just return a reference to it.
510         m_mainLibraryHnd = dlopen(m_applicationParams.constFirst().data(), 0);
511         if (Q_UNLIKELY(!m_mainLibraryHnd)) {
512             qCritical() << "dlopen failed:" << dlerror();
513             return false;
514         }
515         m_main = (Main)dlsym(m_mainLibraryHnd, "main");
516     } else {
517         qWarning("No main library was specified; searching entire process (this is slow!)");
518         m_main = (Main)dlsym(RTLD_DEFAULT, "main");
519     }
520 
521     if (Q_UNLIKELY(!m_main)) {
522         qCritical() << "dlsym failed:" << dlerror() << endl
523                     << "Could not find main method";
524         return false;
525     }
526 
527     if (sem_init(&m_exitSemaphore, 0, 0) == -1)
528         return false;
529 
530     if (sem_init(&m_terminateSemaphore, 0, 0) == -1)
531         return false;
532 
533     return pthread_create(&m_qtAppThread, nullptr, startMainMethod, nullptr) == 0;
534 }
535 
536 static void quitQtAndroidPlugin(JNIEnv *env, jclass /*clazz*/)
537 {
538     Q_UNUSED(env);
539     m_androidPlatformIntegration = nullptr;
540     delete m_androidAssetsFileEngineHandler;
541     m_androidAssetsFileEngineHandler = nullptr;
542 }
543 
544 static void terminateQt(JNIEnv *env, jclass /*clazz*/)
545 {
546     // QAndroidEventDispatcherStopper is stopped when the user uses the task manager to kill the application
547     if (!QAndroidEventDispatcherStopper::instance()->stopped()) {
548         sem_wait(&m_terminateSemaphore);
549         sem_destroy(&m_terminateSemaphore);
550     }
551     env->DeleteGlobalRef(m_applicationClass);
552     env->DeleteGlobalRef(m_classLoaderObject);
553     if (m_resourcesObj)
554         env->DeleteGlobalRef(m_resourcesObj);
555     if (m_activityObject)
556         env->DeleteGlobalRef(m_activityObject);
557     if (m_serviceObject)
558         env->DeleteGlobalRef(m_serviceObject);
559     if (m_bitmapClass)
560         env->DeleteGlobalRef(m_bitmapClass);
561     if (m_ARGB_8888_BitmapConfigValue)
562         env->DeleteGlobalRef(m_ARGB_8888_BitmapConfigValue);
563     if (m_RGB_565_BitmapConfigValue)
564         env->DeleteGlobalRef(m_RGB_565_BitmapConfigValue);
565     if (m_bitmapDrawableClass)
566         env->DeleteGlobalRef(m_bitmapDrawableClass);
567     m_androidPlatformIntegration = nullptr;
568     delete m_androidAssetsFileEngineHandler;
569     m_androidAssetsFileEngineHandler = nullptr;
570 
571     if (!QAndroidEventDispatcherStopper::instance()->stopped()) {
572         sem_post(&m_exitSemaphore);
573         pthread_join(m_qtAppThread, nullptr);
574     }
575 }
576 
577 static void setSurface(JNIEnv *env, jobject /*thiz*/, jint id, jobject jSurface, jint w, jint h)
578 {
579     QMutexLocker lock(&m_surfacesMutex);
580     const auto &it = m_surfaces.find(id);
581     if (it == m_surfaces.end()) {
582         qWarning()<<"Can't find surface" << id;
583         return;
584     }
585     auto surfaceClient = it.value();
586     if (!surfaceClient) // This should never happen...
587         return;
588 
589     surfaceClient->surfaceChanged(env, jSurface, w, h);
590 
591     if (!jSurface)
592         m_surfaces.erase(it);
593 }
594 
595 static void setDisplayMetrics(JNIEnv */*env*/, jclass /*clazz*/,
596                             jint widthPixels, jint heightPixels,
597                             jint desktopWidthPixels, jint desktopHeightPixels,
598                             jdouble xdpi, jdouble ydpi,
599                             jdouble scaledDensity, jdouble density)
600 {
601     // Android does not give us the correct screen size for immersive mode, but
602     // the surface does have the right size
603 
604     widthPixels = qMax(widthPixels, desktopWidthPixels);
605     heightPixels = qMax(heightPixels, desktopHeightPixels);
606 
607     m_desktopWidthPixels = desktopWidthPixels;
608     m_desktopHeightPixels = desktopHeightPixels;
609     m_scaledDensity = scaledDensity;
610     m_density = density;
611 
612     if (!m_androidPlatformIntegration) {
613         QAndroidPlatformIntegration::setDefaultDisplayMetrics(desktopWidthPixels,
614                                                               desktopHeightPixels,
615                                                               qRound(double(widthPixels)  / xdpi * 25.4),
616                                                               qRound(double(heightPixels) / ydpi * 25.4),
617                                                               widthPixels,
618                                                               heightPixels);
619     } else {
620         m_androidPlatformIntegration->setDisplayMetrics(qRound(double(widthPixels)  / xdpi * 25.4),
621                                                         qRound(double(heightPixels) / ydpi * 25.4));
622         m_androidPlatformIntegration->setScreenSize(widthPixels, heightPixels);
623         m_androidPlatformIntegration->setDesktopSize(desktopWidthPixels, desktopHeightPixels);
624     }
625 }
626 
627 static void updateWindow(JNIEnv */*env*/, jobject /*thiz*/)
628 {
629     if (!m_androidPlatformIntegration)
630         return;
631 
632     if (QGuiApplication::instance() != nullptr) {
633         const auto tlw = QGuiApplication::topLevelWindows();
634         for (QWindow *w : tlw) {
635 
636             // Skip non-platform windows, e.g., offscreen windows.
637             if (!w->handle())
638                 continue;
639 
640             QRect availableGeometry = w->screen()->availableGeometry();
641             if (w->geometry().width() > 0 && w->geometry().height() > 0 && availableGeometry.width() > 0 && availableGeometry.height() > 0)
642                 QWindowSystemInterface::handleExposeEvent(w, QRegion(QRect(QPoint(), w->geometry().size())));
643         }
644     }
645 
646     QAndroidPlatformScreen *screen = static_cast<QAndroidPlatformScreen *>(m_androidPlatformIntegration->screen());
647     if (screen->rasterSurfaces())
648         QMetaObject::invokeMethod(screen, "setDirty", Qt::QueuedConnection, Q_ARG(QRect,screen->geometry()));
649 }
650 
651 static void updateApplicationState(JNIEnv */*env*/, jobject /*thiz*/, jint state)
652 {
653     m_activityActive = (state == Qt::ApplicationActive);
654 
655     if (!m_main || !m_androidPlatformIntegration || !QGuiApplicationPrivate::platformIntegration()) {
656         QAndroidPlatformIntegration::setDefaultApplicationState(Qt::ApplicationState(state));
657         return;
658     }
659 
660     if (state == Qt::ApplicationActive)
661         QtAndroidPrivate::handleResume();
662     else if (state == Qt::ApplicationInactive)
663         QtAndroidPrivate::handlePause();
664 
665     if (state <= Qt::ApplicationInactive) {
666         // NOTE: sometimes we will receive two consecutive suspended notifications,
667         // In the second suspended notification, QWindowSystemInterface::flushWindowSystemEvents()
668         // will deadlock since the dispatcher has been stopped in the first suspended notification.
669         // To avoid the deadlock we simply return if we found the event dispatcher has been stopped.
670         if (QAndroidEventDispatcherStopper::instance()->stopped())
671             return;
672 
673         // Don't send timers and sockets events anymore if we are going to hide all windows
674         QAndroidEventDispatcherStopper::instance()->goingToStop(true);
675         QCoreApplication::processEvents();
676         QWindowSystemInterface::handleApplicationStateChanged(Qt::ApplicationState(state));
677         if (state == Qt::ApplicationSuspended)
678             QAndroidEventDispatcherStopper::instance()->stopAll();
679     } else {
680         QAndroidEventDispatcherStopper::instance()->startAll();
681         QWindowSystemInterface::handleApplicationStateChanged(Qt::ApplicationState(state));
682         QAndroidEventDispatcherStopper::instance()->goingToStop(false);
683     }
684 }
685 
686 static void handleOrientationChanged(JNIEnv */*env*/, jobject /*thiz*/, jint newRotation, jint nativeOrientation)
687 {
688     // Array of orientations rotated in 90 degree increments, counterclockwise
689     // (same direction as Android measures angles)
690     static const Qt::ScreenOrientation orientations[] = {
691         Qt::PortraitOrientation,
692         Qt::LandscapeOrientation,
693         Qt::InvertedPortraitOrientation,
694         Qt::InvertedLandscapeOrientation
695     };
696 
697     // The Android API defines the following constants:
698     // ROTATION_0 :   0
699     // ROTATION_90 :  1
700     // ROTATION_180 : 2
701     // ROTATION_270 : 3
702     // ORIENTATION_PORTRAIT :  1
703     // ORIENTATION_LANDSCAPE : 2
704 
705     // and newRotation is how much the current orientation is rotated relative to nativeOrientation
706 
707     // which means that we can be really clever here :)
708     Qt::ScreenOrientation screenOrientation = orientations[(nativeOrientation - 1 + newRotation) % 4];
709     Qt::ScreenOrientation native = orientations[nativeOrientation - 1];
710 
711     QAndroidPlatformIntegration::setScreenOrientation(screenOrientation, native);
712     if (m_androidPlatformIntegration) {
713         QPlatformScreen *screen = m_androidPlatformIntegration->screen();
714         QWindowSystemInterface::handleScreenOrientationChange(screen->screen(),
715                                                               screenOrientation);
716     }
717 }
718 
719 static void onActivityResult(JNIEnv */*env*/, jclass /*cls*/,
720                              jint requestCode,
721                              jint resultCode,
722                              jobject data)
723 {
724     QtAndroidPrivate::handleActivityResult(requestCode, resultCode, data);
725 }
726 
727 static void onNewIntent(JNIEnv *env, jclass /*cls*/, jobject data)
728 {
729     QtAndroidPrivate::handleNewIntent(env, data);
730 }
731 
732 static JNINativeMethod methods[] = {
733     {"startQtAndroidPlugin", "()Z", (void *)startQtAndroidPlugin},
734     {"startQtApplication", "(Ljava/lang/String;Ljava/lang/String;)V", (void *)startQtApplication},
735     {"quitQtAndroidPlugin", "()V", (void *)quitQtAndroidPlugin},
736     {"terminateQt", "()V", (void *)terminateQt},
737     {"setDisplayMetrics", "(IIIIDDDD)V", (void *)setDisplayMetrics},
738     {"setSurface", "(ILjava/lang/Object;II)V", (void *)setSurface},
739     {"updateWindow", "()V", (void *)updateWindow},
740     {"updateApplicationState", "(I)V", (void *)updateApplicationState},
741     {"handleOrientationChanged", "(II)V", (void *)handleOrientationChanged},
742     {"onActivityResult", "(IILandroid/content/Intent;)V", (void *)onActivityResult},
743     {"onNewIntent", "(Landroid/content/Intent;)V", (void *)onNewIntent}
744 };
745 
746 #define FIND_AND_CHECK_CLASS(CLASS_NAME) \
747 clazz = env->FindClass(CLASS_NAME); \
748 if (!clazz) { \
749     __android_log_print(ANDROID_LOG_FATAL, m_qtTag, m_classErrorMsg, CLASS_NAME); \
750     return JNI_FALSE; \
751 }
752 
753 #define GET_AND_CHECK_METHOD(VAR, CLASS, METHOD_NAME, METHOD_SIGNATURE) \
754 VAR = env->GetMethodID(CLASS, METHOD_NAME, METHOD_SIGNATURE); \
755 if (!VAR) { \
756     __android_log_print(ANDROID_LOG_FATAL, m_qtTag, m_methodErrorMsg, METHOD_NAME, METHOD_SIGNATURE); \
757     return JNI_FALSE; \
758 }
759 
760 #define GET_AND_CHECK_STATIC_METHOD(VAR, CLASS, METHOD_NAME, METHOD_SIGNATURE) \
761 VAR = env->GetStaticMethodID(CLASS, METHOD_NAME, METHOD_SIGNATURE); \
762 if (!VAR) { \
763     __android_log_print(ANDROID_LOG_FATAL, m_qtTag, m_methodErrorMsg, METHOD_NAME, METHOD_SIGNATURE); \
764     return JNI_FALSE; \
765 }
766 
767 #define GET_AND_CHECK_FIELD(VAR, CLASS, FIELD_NAME, FIELD_SIGNATURE) \
768 VAR = env->GetFieldID(CLASS, FIELD_NAME, FIELD_SIGNATURE); \
769 if (!VAR) { \
770     __android_log_print(ANDROID_LOG_FATAL, m_qtTag, m_methodErrorMsg, FIELD_NAME, FIELD_SIGNATURE); \
771     return JNI_FALSE; \
772 }
773 
774 #define GET_AND_CHECK_STATIC_FIELD(VAR, CLASS, FIELD_NAME, FIELD_SIGNATURE) \
775 VAR = env->GetStaticFieldID(CLASS, FIELD_NAME, FIELD_SIGNATURE); \
776 if (!VAR) { \
777     __android_log_print(ANDROID_LOG_FATAL, m_qtTag, m_methodErrorMsg, FIELD_NAME, FIELD_SIGNATURE); \
778     return JNI_FALSE; \
779 }
780 
781 static int registerNatives(JNIEnv *env)
782 {
783     jclass clazz;
784     FIND_AND_CHECK_CLASS("org/qtproject/qt5/android/QtNative");
785     m_applicationClass = static_cast<jclass>(env->NewGlobalRef(clazz));
786 
787     if (env->RegisterNatives(m_applicationClass, methods, sizeof(methods) / sizeof(methods[0])) < 0) {
788         __android_log_print(ANDROID_LOG_FATAL,"Qt", "RegisterNatives failed");
789         return JNI_FALSE;
790     }
791 
792     GET_AND_CHECK_STATIC_METHOD(m_createSurfaceMethodID, m_applicationClass, "createSurface", "(IZIIIII)V");
793     GET_AND_CHECK_STATIC_METHOD(m_setSurfaceGeometryMethodID, m_applicationClass, "setSurfaceGeometry", "(IIIII)V");
794     GET_AND_CHECK_STATIC_METHOD(m_destroySurfaceMethodID, m_applicationClass, "destroySurface", "(I)V");
795 
796     jmethodID methodID;
797     GET_AND_CHECK_STATIC_METHOD(methodID, m_applicationClass, "activity", "()Landroid/app/Activity;");
798     jobject activityObject = env->CallStaticObjectMethod(m_applicationClass, methodID);
799     GET_AND_CHECK_STATIC_METHOD(methodID, m_applicationClass, "service", "()Landroid/app/Service;");
800     jobject serviceObject = env->CallStaticObjectMethod(m_applicationClass, methodID);
801     GET_AND_CHECK_STATIC_METHOD(methodID, m_applicationClass, "classLoader", "()Ljava/lang/ClassLoader;");
802     m_classLoaderObject = env->NewGlobalRef(env->CallStaticObjectMethod(m_applicationClass, methodID));
803     clazz = env->GetObjectClass(m_classLoaderObject);
804     GET_AND_CHECK_METHOD(m_loadClassMethodID, clazz, "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;");
805     if (serviceObject)
806         m_serviceObject = env->NewGlobalRef(serviceObject);
807 
808     if (activityObject)
809         m_activityObject = env->NewGlobalRef(activityObject);
810 
811     jobject object = activityObject ? activityObject : serviceObject;
812     if (object) {
813         FIND_AND_CHECK_CLASS("android/content/ContextWrapper");
814         GET_AND_CHECK_METHOD(methodID, clazz, "getAssets", "()Landroid/content/res/AssetManager;");
815         m_assetManager = AAssetManager_fromJava(env, env->CallObjectMethod(object, methodID));
816 
817         GET_AND_CHECK_METHOD(methodID, clazz, "getResources", "()Landroid/content/res/Resources;");
818         m_resourcesObj = env->NewGlobalRef(env->CallObjectMethod(object, methodID));
819 
820         FIND_AND_CHECK_CLASS("android/graphics/Bitmap");
821         m_bitmapClass = static_cast<jclass>(env->NewGlobalRef(clazz));
822         GET_AND_CHECK_STATIC_METHOD(m_createBitmapMethodID, m_bitmapClass
823                                     , "createBitmap", "(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;");
824         FIND_AND_CHECK_CLASS("android/graphics/Bitmap$Config");
825         jfieldID fieldId;
826         GET_AND_CHECK_STATIC_FIELD(fieldId, clazz, "ARGB_8888", "Landroid/graphics/Bitmap$Config;");
827         m_ARGB_8888_BitmapConfigValue = env->NewGlobalRef(env->GetStaticObjectField(clazz, fieldId));
828         GET_AND_CHECK_STATIC_FIELD(fieldId, clazz, "RGB_565", "Landroid/graphics/Bitmap$Config;");
829         m_RGB_565_BitmapConfigValue = env->NewGlobalRef(env->GetStaticObjectField(clazz, fieldId));
830 
831         FIND_AND_CHECK_CLASS("android/graphics/drawable/BitmapDrawable");
832         m_bitmapDrawableClass = static_cast<jclass>(env->NewGlobalRef(clazz));
833         GET_AND_CHECK_METHOD(m_bitmapDrawableConstructorMethodID,
834                              m_bitmapDrawableClass,
835                              "<init>",
836                              "(Landroid/content/res/Resources;Landroid/graphics/Bitmap;)V");
837     }
838 
839     return JNI_TRUE;
840 }
841 
842 QT_END_NAMESPACE
843 
844 Q_DECL_EXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void */*reserved*/)
845 {
846     static bool initialized = false;
847     if (initialized)
848         return JNI_VERSION_1_6;
849     initialized = true;
850 
851     QT_USE_NAMESPACE
852     typedef union {
853         JNIEnv *nativeEnvironment;
854         void *venv;
855     } UnionJNIEnvToVoid;
856 
857     __android_log_print(ANDROID_LOG_INFO, "Qt", "qt start");
858     UnionJNIEnvToVoid uenv;
859     uenv.venv = nullptr;
860     m_javaVM = nullptr;
861 
862     if (vm->GetEnv(&uenv.venv, JNI_VERSION_1_4) != JNI_OK) {
863         __android_log_print(ANDROID_LOG_FATAL, "Qt", "GetEnv failed");
864         return -1;
865     }
866 
867     JNIEnv *env = uenv.nativeEnvironment;
868     if (!registerNatives(env)
869             || !QtAndroidInput::registerNatives(env)
870             || !QtAndroidMenu::registerNatives(env)
871             || !QtAndroidAccessibility::registerNatives(env)
872             || !QtAndroidDialogHelpers::registerNatives(env)) {
873         __android_log_print(ANDROID_LOG_FATAL, "Qt", "registerNatives failed");
874         return -1;
875     }
876     QWindowSystemInterfacePrivate::TabletEvent::setPlatformSynthesizesMouse(false);
877 
878     m_javaVM = vm;
879     return JNI_VERSION_1_4;
880 }
