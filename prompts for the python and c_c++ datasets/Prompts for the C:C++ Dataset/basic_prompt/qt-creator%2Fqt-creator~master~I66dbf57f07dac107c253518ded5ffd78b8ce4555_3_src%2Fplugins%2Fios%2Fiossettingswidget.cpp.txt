Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "iossettingswidget.h"
27 #include "createsimulatordialog.h"
28 #include "iosconfigurations.h"
29 #include "ui_iossettingswidget.h"
30 #include "simulatoroperationdialog.h"
31 
32 #include <utils/algorithm.h>
33 #include <utils/runextensions.h>
34 
35 #include <QDateTime>
36 #include <QInputDialog>
37 #include <QLoggingCategory>
38 #include <QMessageBox>
39 #include <QScrollBar>
40 
41 static const int NameColumn = 0;
42 static const int RuntimeColumn = 1;
43 static const int StateColumn = 2;
44 static const int SimStartWarnCount = 4;
45 static const int SimInfoRole = Qt::UserRole + 1;
46 
47 namespace Ios {
48 namespace Internal {
49 
50 using namespace std::placeholders;
51 
52 static SimulatorInfoList selectedSimulators(const QTreeWidget *deviceTreeWidget)
53 {
54     SimulatorInfoList simulators;
55     foreach (QTreeWidgetItem *item, deviceTreeWidget->selectedItems())
56         simulators.append(item->data(NameColumn, SimInfoRole).value<SimulatorInfo>());
57     return simulators;
58 }
59 
60 static void onSimOperation(const SimulatorInfo &simInfo, SimulatorOperationDialog* dlg,
61                            const QString &contextStr, const SimulatorControl::ResponseData &response)
62 {
63     dlg->addMessage(simInfo, response, contextStr);
64 }
65 
66 IosSettingsWidget::IosSettingsWidget(QWidget *parent)
67     : QWidget(parent),
68       m_ui(new Ui::IosSettingsWidget),
69       m_simControl(new SimulatorControl(this))
70 {
71     initGui();
72 
73     connect(m_ui->startButton, &QPushButton::clicked, this, &IosSettingsWidget::onStart);
74     connect(m_ui->createButton, &QPushButton::clicked, this, &IosSettingsWidget::onCreate);
75     connect(m_ui->renameButton, &QPushButton::clicked, this, &IosSettingsWidget::onRename);
76     connect(m_ui->resetButton, &QPushButton::clicked, this, &IosSettingsWidget::onReset);
77     connect(m_ui->deleteButton, &QPushButton::clicked, this, &IosSettingsWidget::onDelete);
78     connect(m_ui->deviceView, &QTreeWidget::itemSelectionChanged,
79             this, &IosSettingsWidget::onSelectionChanged);
80 
81     m_futureList << Utils::onResultReady(SimulatorControl::updateAvailableSimulators(),
82                                          std::bind(&IosSettingsWidget::populateSimulators, this, _1));
83 
84     // Update simulator state every 1 sec.
85     startTimer(1000);
86 }
87 
88 IosSettingsWidget::~IosSettingsWidget()
89 {
90     cancelPendingOperations();
91     delete m_ui;
92 }
93 
94 void IosSettingsWidget::initGui()
95 {
96     m_ui->setupUi(this);
97     m_ui->pathWidget->setExpectedKind(Utils::PathChooser::ExistingDirectory);
98     m_ui->pathWidget->lineEdit()->setReadOnly(true);
99     m_ui->pathWidget->setFileName(IosConfigurations::screenshotDir());
100     m_ui->pathWidget->addButton(tr("Screenshot"), this,
101                                 std::bind(&IosSettingsWidget::onScreenshot, this));
102 
103     m_ui->deviceAskCheckBox->setChecked(!IosConfigurations::ignoreAllDevices());
104 }
105 
106 /*!
107     Called on start button click. Selected simulator devices are started. Multiple devices can be
108     started simultaneously provided they in shutdown state.
109  */
110 void IosSettingsWidget::onStart()
111 {
112     const SimulatorInfoList simulatorInfoList = selectedSimulators(m_ui->deviceView);
113     if (simulatorInfoList.isEmpty())
114         return;
115 
116     if (simulatorInfoList.count() > SimStartWarnCount) {
117         QString message = tr("You are trying to launch %n simulators simultaneously. This will take"
118                              " significant system resources. Do you really want to continue?", "",
119                              simulatorInfoList.count());
120         int buttonCode = QMessageBox::warning(this, tr("Simulator Start"), message,
121                                               QMessageBox::Ok | QMessageBox::Abort,
122                                               QMessageBox::Abort);
123 
124         if (buttonCode == QMessageBox::Abort)
125             return;
126     }
127 
128     SimulatorOperationDialog statusDialog(this);
129     statusDialog.addMessage(tr("Starting simulator devices...", "", simulatorInfoList.count()),
130                              Utils::NormalMessageFormat);
131 
132     QList<QFuture<void>> futureList;
133     foreach (auto info, simulatorInfoList) {
134         if (!info.isShutdown()) {
135             statusDialog.addMessage(tr("Can not start simulator(%1, %2) in current state: %3")
136                                     .arg(info.name).arg(info.runtimeName).arg(info.state),
137                                     Utils::StdErrFormat);
138         } else {
139             futureList << Utils::onResultReady(m_simControl->startSimulator(info.identifier),
140                                                std::bind(onSimOperation, info, &statusDialog,
141                                                          tr("simulator start"), _1));
142         }
143     }
144 
145     statusDialog.addFutures(futureList);
146     statusDialog.exec(); // Modal dialog returns only when all the operations are done or cancelled.
147 }
148 
149 /*!
150     Called on create button click. User is presented with the create simulator dialog and with the
151     selected options a new device is created.
152  */
153 void IosSettingsWidget::onCreate()
154 {
155     SimulatorOperationDialog statusDialog(this);
156     statusDialog.addMessage(tr("Creating simulator device..."), Utils::NormalMessageFormat);
157     auto onSimulatorCreate = [this, &statusDialog](const QString &name,
158             const SimulatorControl::ResponseData &response) {
159         if (response.success) {
160             statusDialog.addMessage(tr("Simulator device(%1) created.\nUDID: %2")
161                                     .arg(name).arg(response.simUdid), Utils::StdOutFormat);
162         } else {
163             statusDialog.addMessage(tr("Simulator device(%1) creation failed.\nError: %2").
164                                     arg(name).arg(QString::fromUtf8(response.commandOutput)),
165                                     Utils::StdErrFormat);
166         }
167     };
168 
169     CreateSimulatorDialog createDialog(this);
170     if (createDialog.exec() == QDialog::Accepted) {
171         QFuture<void> f = Utils::onResultReady(
172                             m_simControl->createSimulator(
173                                 createDialog.name(),
174                                 createDialog.deviceType(),
175                                 createDialog.runtime()),
176                             std::bind(onSimulatorCreate, createDialog.name(), _1));
177         statusDialog.addFutures({ f });
178         statusDialog.exec(); // Modal dialog returns only when all the operations are done or cancelled.
179     }
180 }
181 
182 /*!
183     Called on reset button click. Contents and settings of the selected devices are erased. Multiple
184     devices can be erased simultaneously provided they in shutdown state.
185  */
186 void IosSettingsWidget::onReset()
187 {
188     const SimulatorInfoList simulatorInfoList = selectedSimulators(m_ui->deviceView);
189     if (simulatorInfoList.isEmpty())
190         return;
191 
192     int userInput = QMessageBox::question(this, tr("Reset"),
193                                           tr("Do you really want to reset the contents and settings "
194                                              "of the selected devices", "",
195                                              simulatorInfoList.count()));
196     if (userInput == QMessageBox::No)
197         return;
198 
199 
200     SimulatorOperationDialog statusDialog(this);
201     statusDialog.addMessage(tr("Resetting contents and settings..."), Utils::NormalMessageFormat);
202 
203     QList<QFuture<void>> futureList;
204     foreach (auto info, simulatorInfoList) {
205         futureList << Utils::onResultReady(m_simControl->resetSimulator(info.identifier),
206                                            std::bind(onSimOperation, info, &statusDialog,
207                                                      tr("simulator reset"), _1));
208     }
209 
210     statusDialog.addFutures(futureList);
211     statusDialog.exec(); // Modal dialog returns only when all the operations are done or cancelled.
212 }
213 
214 /*!
215     Called on rename button click. Selected device is renamed. Only one device can be renamed at a
216     time. Rename button is disabled on multi-selection.
217  */
218 void IosSettingsWidget::onRename()
219 {
220     const SimulatorInfoList simulatorInfoList = selectedSimulators(m_ui->deviceView);
221     if (simulatorInfoList.isEmpty() || simulatorInfoList.count() > 1)
222         return;
223 
224     const SimulatorInfo &simInfo = simulatorInfoList.at(0);
225     QString newName = QInputDialog::getText(this, tr("Rename %1").arg(simInfo.name),
226                                             tr("Enter new name:"));
227 
228     SimulatorOperationDialog statusDialog(this);
229     statusDialog.addMessage(tr("Renaming simulator device..."), Utils::NormalMessageFormat);
230     QFuture<void> f = Utils::onResultReady(m_simControl->renameSimulator(simInfo.identifier, newName),
231                                            std::bind(onSimOperation, simInfo, &statusDialog,
232                                                      tr("simulator rename"), _1));
233     statusDialog.addFutures({f});
234     statusDialog.exec(); // Modal dialog returns only when all the operations are done or cancelled.
235 }
236 
237 /*!
238     Called on delete button click. Selected devices are deleted. Multiple devices can be deleted
239     simultaneously provided they in shutdown state.
240  */
241 void IosSettingsWidget::onDelete()
242 {
243     const SimulatorInfoList simulatorInfoList = selectedSimulators(m_ui->deviceView);
244     if (simulatorInfoList.isEmpty())
245         return;
246 
247     int userInput = QMessageBox::question(this, tr("Delete Device"),
248                                           tr("Do you really want to delete the selected devices",
249                                              "", simulatorInfoList.count()));
250     if (userInput == QMessageBox::No)
251         return;
252 
253     SimulatorOperationDialog statusDialog(this);
254     statusDialog.addMessage(tr("Deleting simulator devices...", "", simulatorInfoList.count()),
255                              Utils::NormalMessageFormat);
256     QList<QFuture<void>> futureList;
257     foreach (auto info, simulatorInfoList) {
258         futureList << Utils::onResultReady(m_simControl->deleteSimulator(info.identifier),
259                                            std::bind(onSimOperation, info, &statusDialog,
260                                                      tr("simulator delete"), _1));
261     }
262 
263     statusDialog.addFutures(futureList);
264     statusDialog.exec(); // Modal dialog returns only when all the operations are done or cancelled.
265 }
266 
267 /*!
268     Called on screenshot button click. Screenshot of the selected devices are saved to the selected
269     path. Screenshot from multiple devices can be taken simultaneously provided they in booted state.
270  */
271 void IosSettingsWidget::onScreenshot()
272 {
273     const SimulatorInfoList simulatorInfoList = selectedSimulators(m_ui->deviceView);
274     if (simulatorInfoList.isEmpty())
275         return;
276 
277     auto generatePath = [this](const SimulatorInfo &info) {
278         QString fileName = QString("%1_%2_%3.png").arg(info.name).arg(info.runtimeName)
279                 .arg(QDateTime::currentDateTime().toString("yyyy-MM-dd_HH-mm-ss-z")).replace(' ', '_');
280         QString filePath = m_ui->pathWidget->fileName().appendPath(fileName).toString();
281         return filePath;
282     };
283 
284     SimulatorOperationDialog statusDialog(this);
285     statusDialog.addMessage(tr("Capturing screenshots from devices...", "",
286                                 simulatorInfoList.count()), Utils::NormalMessageFormat);
287     QList<QFuture<void>> futureList;
288     foreach (auto info, simulatorInfoList) {
289         futureList << Utils::onResultReady(m_simControl->takeSceenshot(info.identifier,
290                                                                          generatePath(info)),
291                                            std::bind(onSimOperation, info, &statusDialog,
292                                                      tr("simulator screenshot"), _1));
293     }
294 
295     statusDialog.addFutures(futureList);
296     statusDialog.exec(); // Modal dialog returns only when all the operations are done or cancelled.
297 }
298 
299 void IosSettingsWidget::onSelectionChanged()
300 {
301     SimulatorInfoList infoList = selectedSimulators(m_ui->deviceView);
302     bool hasRunning = Utils::anyOf(infoList,[](const SimulatorInfo &info) { return info.isBooted(); });
303     bool hasShutdown = Utils::anyOf(infoList,[](const SimulatorInfo &info) { return info.isShutdown(); });
304     m_ui->startButton->setEnabled(hasShutdown);
305     m_ui->deleteButton->setEnabled(hasShutdown);
306     m_ui->resetButton->setEnabled(hasShutdown);
307     m_ui->renameButton->setEnabled(infoList.count() == 1 && hasShutdown);
308     m_ui->pathWidget->buttonAtIndex(1)->setEnabled(hasRunning); // Screenshot button
309 }
310 
311 /*!
312     Clears and re-populates the simulator devices. Selection and scroll position are preserved.
313  */
314 void IosSettingsWidget::populateSimulators(SimulatorInfoList simulatorList)
315 {
316     // Cache selected items.
317     QStringList selectedDevices;
318     foreach (auto selectedItem, m_ui->deviceView->selectedItems()) {
319         SimulatorInfo info = selectedItem->data(NameColumn, SimInfoRole).value<SimulatorInfo>();
320         selectedDevices << info.identifier;
321     }
322 
323     // Current scroll position.
324     int scrollvalue = m_ui->deviceView->verticalScrollBar()->value();
325 
326     QList<QTreeWidgetItem *> itemsToSelect;
327     m_ui->deviceView->clear();
328     foreach (SimulatorInfo simInfo, simulatorList) {
329         auto *item = new QTreeWidgetItem(m_ui->deviceView);
330         QString id = tr("UDID: %1").arg(simInfo.identifier);
331         item->setData(NameColumn, SimInfoRole, QVariant::fromValue<SimulatorInfo>(simInfo));
332         item->setText(NameColumn, simInfo.name);
333         item->setData(NameColumn, Qt::ToolTipRole, id);
334         item->setText(RuntimeColumn, simInfo.runtimeName);
335         item->setData(RuntimeColumn, Qt::ToolTipRole, id);
336         item->setText(StateColumn, simInfo.state);
337         item->setData(StateColumn, Qt::ToolTipRole, id);
338         // Not setting the selection directly here as it messes up the scroll postion.
339         if (selectedDevices.contains(simInfo.identifier))
340             itemsToSelect << item;
341     }
342 
343     // Restore the scroll pos.
344     m_ui->deviceView->verticalScrollBar()->setValue(scrollvalue);
345 
346     // Restore selection.
347     foreach (auto item, itemsToSelect)
348         item->setSelected(true);
349 
350     m_ui->deviceView->resizeColumnToContents(NameColumn);
351     m_ui->deviceView->resizeColumnToContents(RuntimeColumn);
352     m_ui->deviceView->resizeColumnToContents(StateColumn);
353 }
354 
355 /*!
356     Cancels the pending operations and blocks(if waitForFinished is set to true) while the
357     operations are finished.
358  */
359 void IosSettingsWidget::cancelPendingOperations()
360 {
361     foreach (auto f, m_futureList) {
362         if (!f.isFinished()) {
363             f.cancel();
364             f.waitForFinished();
365         }
366     }
367     m_futureList.clear();
368 }
369 
370 void IosSettingsWidget::clearFinishedOperations()
371 {
372     // Remove finished futures.
373     m_futureList = Utils::filtered(m_futureList, [](const QFuture<void> &f) {
374         return !f.isFinished();
375     });
376 }
377 
378 void IosSettingsWidget::saveSettings()
379 {
380     IosConfigurations::setIgnoreAllDevices(!m_ui->deviceAskCheckBox->isChecked());
381     IosConfigurations::setScreenshotDir(m_ui->pathWidget->fileName());
382 }
383 
384 /*!
385     Periodicaly fetches the simulator device data and populates it.
386  */
387 void IosSettingsWidget::timerEvent(QTimerEvent *e)
388 {
389     Q_UNUSED(e)
390     clearFinishedOperations();
391     // Update simulator state.
392     m_futureList << Utils::onResultReady(SimulatorControl::updateAvailableSimulators(),
393                                          std::bind(&IosSettingsWidget::populateSimulators, this, _1));
394 }
395 
396 } // namespace Internal
397 } // namespace Ios
398 
