Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Marc Mutz <marc.mutz@kdab.com>
4 ** Contact: http://www.qt.io/licensing/
5 **
6 ** This file is part of the QtCore module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #ifndef QSTRING_H
41 # include <QtCore/qstring.h>
42 #endif
43 
44 #ifndef QSTRINGVIEW_H
45 #define QSTRINGVIEW_H
46 
47 #if QT_STRINGVIEW_LEVEL > 0
48 
49 #ifdef QT_NO_VECTOR_STRING_CIRCULAR_DEPENDENCY
50 #include <QVector>
51 #else
52 QT_BEGIN_NAMESPACE
53 template <typename T> class QVector;
54 QT_END_NAMESPACE
55 #endif
56 #include <QtCore/qvarlengtharray.h>
57 
58 #include <vector>
59 #include <string>
60 
61 #ifndef QT_NO_UNICODE_LITERAL
62 # define Q_STRINGVIEW_LITERAL(x) QStringView(QT_UNICODE_LITERAL_II(x), (sizeof(QT_UNICODE_LITERAL_II(x)) / sizeof(char16_t)) - 1)
63 #else
64 # define Q_STRINGVIEW_LITERAL(x) QStringView(QStringLiteral(x))
65 #endif
66 
67 QT_BEGIN_NAMESPACE
68 
69 class QStringView
70 {
71     template <typename Char>
72     struct IsCompatibleCharTypeHelper
73         : std::integral_constant<bool,
74                                  std::is_same<Char, QChar>::value ||
75                                  std::is_same<Char, ushort>::value ||
76 #ifdef Q_COMPILER_UNICODE_STRINGS
77                                  std::is_same<Char, char16_t>::value ||
78 #endif
79                                  (std::is_same<Char, wchar_t>::value && sizeof(wchar_t) == sizeof(QChar))> {};
80     template <typename Char>
81     struct IsCompatibleCharType
82         : IsCompatibleCharTypeHelper<typename std::remove_reference<typename std::remove_cv<Char>::type>::type> {};
83 
84     template <typename T>
85     struct IsStdBasicString : std::false_type {};
86     template <typename Char, typename Traits, typename Alloc>
87     struct IsStdBasicString<std::basic_string<Char, Traits, Alloc> > : std::true_type {};
88 
89     template <typename Char>
90     Q_DECL_RELAXED_CONSTEXPR size_t length(const Char *str) Q_DECL_NOTHROW
91     {
92         size_t result = 0;
93         if (str) {
94             while (!str--)
95                 ++result;
96         }
97         return result;
98     }
99     typedef ushort storage_type;
100 public:
101     typedef const QChar value_type;
102     typedef std::ptrdiff_t difference_type;
103     typedef std::size_t size_type;
104     typedef value_type &reference_type;
105     typedef value_type &const_reference_type;
106     typedef value_type *pointer;
107     typedef value_type *const_pointer;
108 
109     typedef pointer iterator;
110     typedef const_pointer const_iterator;
111     typedef std::reverse_iterator<iterator> reverse_iterator;
112     typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
113 
114     Q_DECL_CONSTEXPR QStringView() Q_DECL_NOTHROW
115         : m_size(0), m_data(nullptr) {}
116     Q_DECL_CONSTEXPR QStringView(std::nullptr_t) Q_DECL_NOTHROW
117         : m_size(0), m_data(nullptr) {}
118 
119 #ifdef Q_QDOC
120     Q_DECL_CONSTEXPR QStringView(const QChar *str, size_t len) Q_DECL_NOTHROW;
121     Q_DECL_CONSTEXPR QStringView(const char16_t *str, size_t len) Q_DECL_NOTHROW;
122     Q_DECL_CONSTEXPR QStringView(const ushort *str, size_t len) Q_DECL_NOTHROW;
123     Q_DECL_CONSTEXPR QStringView(const wchar_t *str, size_t len) Q_DECL_NOTHROW;
124 #else
125     template <typename Char>
126     Q_DECL_CONSTEXPR QStringView(const Char *str, size_t len,
127                                  typename std::enable_if<IsCompatibleCharType<Char>::value>::type* = nullptr) Q_DECL_NOTHROW
128         : m_size(len), m_data(reinterpret_cast<const storage_type*>(str)) {}
129 #endif
130 
131 #ifdef Q_QDOC
132     Q_DECL_RELAXED_CONSTEXPR QStringView(const QChar *str) Q_DECL_NOTHROW;
133     Q_DECL_RELAXED_CONSTEXPR QStringView(const char16_t *str) Q_DECL_NOTHROW;
134     Q_DECL_RELAXED_CONSTEXPR QStringView(const ushort *str) Q_DECL_NOTHROW;
135     Q_DECL_RELAXED_CONSTEXPR QStringView(const wchar_t *str) Q_DECL_NOTHROW;
136 #else
137     template <typename Char>
138     Q_DECL_RELAXED_CONSTEXPR QStringView(const Char *str,
139                                  typename std::enable_if<IsCompatibleCharType<Char>::value>::type* = nullptr) Q_DECL_NOTHROW
140         : QStringView(str, length(str)) {}
141 #endif
142 
143     QStringView(const QString &str) Q_DECL_NOTHROW
144         : QStringView(str.isNull() ? nullptr : str.data(), size_type(str.size())) {}
145     QStringView(const QStringRef &str) Q_DECL_NOTHROW
146         : QStringView(str.isNull() ? nullptr : str.data(), size_type(str.size())) {}
147 
148     template <typename Char, typename Traits, typename Alloc>
149     QStringView(const std::basic_string<Char, Traits, Alloc> &str
150 #ifndef Q_QDOC
151                 , typename std::enable_if<IsCompatibleCharType<Char>::value>::type* = nullptr
152 #endif
153                ) Q_DECL_NOTHROW
154         : QStringView(str.data(), str.size()) {}
155 
156     template <typename Char, int N>
157     QStringView(const QVarLengthArray<Char, N> &arr
158 #ifndef Q_QDOC
159                 , typename std::enable_if<IsCompatibleCharType<Char>::value>::type* = nullptr
160 #endif
161                ) Q_DECL_NOTHROW
162         : QStringView(arr.data(), size_type(arr.size())) {}
163 
164     template <typename Char>
165     QStringView(const QVector<Char> &vec
166 #ifndef Q_QDOC
167                 , typename std::enable_if<IsCompatibleCharType<Char>::value>::type* = nullptr
168 #endif
169                ) Q_DECL_NOTHROW
170         : QStringView(vec.data(), size_type(vec.size())) {}
171 
172     template <typename Char, typename Alloc>
173     QStringView(const std::vector<Char, Alloc> &vec
174 #ifndef Q_QDOC
175                 , typename std::enable_if<IsCompatibleCharType<Char>::value>::type* = nullptr
176 #endif
177                ) Q_DECL_NOTHROW
178         : QStringView(vec.data(), vec.size()) {}
179 
180     QString toString() const { return QString(data(), count()); }
181 
182     template <typename StdBasicString>
183     StdBasicString toStdBasicString(StdBasicString &&str = StdBasicString()
184 #ifndef Q_QDOC
185                                     , typename std::enable_if<
186                                         IsStdBasicString<StdBasicString>::value &&
187                                         IsCompatibleCharType<typename StdBasicString::value_type>::value
188                                     >::type* = nullptr
189 #endif
190                                     ) const
191     {
192         str.assign(reinterpret_cast<const typename StdBasicString::value_type *>(data()), size());
193         return std::forward<StdBasicString>(str);
194     }
195 
196 #ifdef Q_COMPILER_UNICODE_STRINGS
197     std::u16string toU16String() const
198     {
199         return std::u16string(reinterpret_cast<const char16_t *>(data()), size());
200     }
201 #endif
202 
203     Q_DECL_CONSTEXPR size_type size() const Q_DECL_NOTHROW { return m_size; }
204     Q_DECL_CONSTEXPR const_pointer data() const Q_DECL_NOTHROW { return reinterpret_cast<const_pointer>(m_data); }
205 
206     //
207     // QString API
208     //
209     static int compare(QStringView lhs, QStringView rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW
210     { return QString::compare_helper(lhs.data(), int(lhs.size()), rhs.data(), int(rhs.size()), cs); }
211 
212     static int compare(QStringView lhs, QChar rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW
213     { return QString::compare_helper(lhs.data(), int(lhs.size()), &rhs, 1, cs); }
214     static int compare(QChar lhs, QStringView rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW
215     { return QString::compare_helper(&lhs, 1, rhs.data(), int(rhs.size()), cs); }
216 
217     static int compare(QStringView lhs, QLatin1String rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW
218     { return QString::compare_helper(lhs.data(), int(lhs.size()), rhs, cs); }
219     static int compare(QLatin1String lhs, QStringView rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW
220     { return -compare(rhs, lhs, cs); }
221 
222 #if !defined(QT_NO_CAST_FROM_ASCII) && !defined(QT_RESTRICTED_CAST_FROM_ASCII)
223     static int compare(QStringView lhs, const QByteArray &rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive)
224     { return QString::compare_helper(lhs.data(), int(lhs.size()), rhs.data(), qstrnlen(rhs.data(), rhs.size()), cs); }
225     static int compare(const QByteArray &lhs, QStringView rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive)
226     { return -compare(rhs, lhs, cs); }
227 
228     static int compare(QStringView lhs, const char *rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive)
229     { return QString::compare_helper(lhs.data(), int(lhs.size()), rhs, -1, cs); }
230     static int compare(const char *lhs, QStringView rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive)
231     { return -compare(rhs, lhs, cs); }
232 #endif
233 
234     int compare(QStringView other, Qt::CaseSensitivity cs = Qt::CaseSensitive) const Q_DECL_NOTHROW { return compare(*this, other, cs); }
235     int compare(QChar other, Qt::CaseSensitivity cs = Qt::CaseSensitive) const Q_DECL_NOTHROW { return compare(*this, other, cs); }
236     int compare(QLatin1String other, Qt::CaseSensitivity cs = Qt::CaseSensitive) const Q_DECL_NOTHROW { return compare(*this, other, cs); }
237 #if !defined(QT_NO_CAST_FROM_ASCII) && !defined(QT_RESTRICTED_CAST_FROM_ASCII)
238     int compare(const QByteArray &other, Qt::CaseSensitivity cs = Qt::CaseSensitive) const { return compare(*this, other, cs); }
239     int compare(const char *other, Qt::CaseSensitivity cs = Qt::CaseSensitive) const { return compare(*this, other, cs); }
240 #endif
241 
242 
243     //
244     // STL compatibility API:
245     //
246     Q_DECL_CONSTEXPR const_iterator begin()   const Q_DECL_NOTHROW { return data(); }
247     Q_DECL_CONSTEXPR const_iterator end()     const Q_DECL_NOTHROW { return data() + size(); }
248     Q_DECL_CONSTEXPR const_iterator cbegin()  const Q_DECL_NOTHROW { return begin(); }
249     Q_DECL_CONSTEXPR const_iterator cend()    const Q_DECL_NOTHROW { return end(); }
250     const_reverse_iterator rbegin()  const Q_DECL_NOTHROW { return const_reverse_iterator(end()); }
251     const_reverse_iterator rend()    const Q_DECL_NOTHROW { return const_reverse_iterator(begin()); }
252     const_reverse_iterator crbegin() const Q_DECL_NOTHROW { return rbegin(); }
253     const_reverse_iterator crend()   const Q_DECL_NOTHROW { return rend(); }
254 
255     Q_DECL_CONSTEXPR bool empty() const Q_DECL_NOTHROW { return size() == 0; }
256     Q_DECL_CONSTEXPR QChar front() const { return *begin(); }
257     Q_DECL_CONSTEXPR QChar back()  const { return *(end() - 1); }
258 
259     //
260     // Qt compatibility API:
261     //
262     Q_DECL_CONSTEXPR bool isNull() const Q_DECL_NOTHROW { return !data(); }
263     Q_DECL_CONSTEXPR bool isEmpty() const Q_DECL_NOTHROW { return empty(); }
264     Q_DECL_CONSTEXPR int count() const /*not nothrow!*/ { return int(size()); }
265     Q_DECL_CONSTEXPR QChar first() const { return front(); }
266     Q_DECL_CONSTEXPR QChar last()  const { return back(); }
267 private:
268     size_type m_size;
269     const storage_type *m_data;
270 };
271 Q_DECLARE_TYPEINFO(QStringView, Q_MOVABLE_TYPE);
272 template <> class QList<QStringView> {}; // prevent instantiating QList with QStringView; use QVector<QStringView> instead
273 
274 // QString members
275 
276 inline int QString::compare(QStringView lhs, QStringView rhs, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
277 { return compare_helper(lhs.data(), lhs.size(), rhs.data(), rhs.size(), cs); }
278 inline int QString::compare(QStringView lhs, QLatin1String rhs, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
279 { return compare_helper(lhs.data(), lhs.size(), rhs, cs); }
280 inline int QString::compare(QLatin1String lhs, QStringView rhs, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
281 { return -compare_helper(rhs.data(), rhs.size(), lhs, cs); }
282 inline int QString::localeAwareCompare(QStringView lhs, QStringView rhs) Q_DECL_NOTHROW
283 { return localeAwareCompare_helper(lhs.data(), lhs.size(), rhs.data(), rhs.size()); }
284 
285 // QStringView relational operators
286 
287 // QStringView <> QStringView
288 inline bool operator==(QStringView lhs, QStringView rhs) Q_DECL_NOTHROW { return QString::compare(lhs, rhs) == 0; }
289 inline bool operator< (QStringView lhs, QStringView rhs) Q_DECL_NOTHROW { return QString::compare(lhs, rhs) < 0; }
290 
291 inline bool operator!=(QStringView lhs, QStringView rhs) Q_DECL_NOTHROW { return !(lhs == rhs); }
292 inline bool operator> (QStringView lhs, QStringView rhs) Q_DECL_NOTHROW { return   rhs < lhs; }
293 inline bool operator<=(QStringView lhs, QStringView rhs) Q_DECL_NOTHROW { return !(rhs < lhs); }
294 inline bool operator>=(QStringView lhs, QStringView rhs) Q_DECL_NOTHROW { return !(lhs < rhs); }
295 
296 // QChar <> QStringView
297 inline bool operator==(QChar lhs, QStringView rhs) Q_DECL_NOTHROW { return QStringView(lhs) == rhs; }
298 inline bool operator< (QChar lhs, QStringView rhs) Q_DECL_NOTHROW { return QStringView(lhs) <  rhs; }
299 
300 inline bool operator==(QStringView lhs, QChar rhs) Q_DECL_NOTHROW { return lhs == QStringView(rhs); }
301 inline bool operator< (QStringView lhs, QChar rhs) Q_DECL_NOTHROW { return lhs <  QStringView(rhs); }
302 
303 inline bool operator!=(QChar lhs, QStringView rhs) Q_DECL_NOTHROW { return !(lhs == rhs); }
304 inline bool operator> (QChar lhs, QStringView rhs) Q_DECL_NOTHROW { return   rhs < lhs; }
305 inline bool operator<=(QChar lhs, QStringView rhs) Q_DECL_NOTHROW { return !(rhs < lhs); }
306 inline bool operator>=(QChar lhs, QStringView rhs) Q_DECL_NOTHROW { return !(lhs < rhs); }
307 
308 inline bool operator!=(QStringView lhs, QChar rhs) Q_DECL_NOTHROW { return !(lhs == rhs); }
309 inline bool operator> (QStringView lhs, QChar rhs) Q_DECL_NOTHROW { return   rhs < lhs; }
310 inline bool operator<=(QStringView lhs, QChar rhs) Q_DECL_NOTHROW { return !(rhs < lhs); }
311 inline bool operator>=(QStringView lhs, QChar rhs) Q_DECL_NOTHROW { return !(lhs < rhs); }
312 
313 // QLatin1String <> QStringView
314 inline bool operator==(QLatin1String lhs, QStringView rhs) Q_DECL_NOTHROW { return QString::compare(lhs, rhs) == 0; }
315 inline bool operator< (QLatin1String lhs, QStringView rhs) Q_DECL_NOTHROW { return QString::compare(lhs, rhs) <  0; }
316 
317 inline bool operator==(QStringView lhs, QLatin1String rhs) Q_DECL_NOTHROW { return QString::compare(lhs, rhs) == 0; }
318 inline bool operator< (QStringView lhs, QLatin1String rhs) Q_DECL_NOTHROW { return QString::compare(lhs, rhs) <  0; }
319 
320 inline bool operator!=(QLatin1String lhs, QStringView rhs) Q_DECL_NOTHROW { return !(lhs == rhs); }
321 inline bool operator> (QLatin1String lhs, QStringView rhs) Q_DECL_NOTHROW { return   rhs < lhs; }
322 inline bool operator<=(QLatin1String lhs, QStringView rhs) Q_DECL_NOTHROW { return !(rhs < lhs); }
323 inline bool operator>=(QLatin1String lhs, QStringView rhs) Q_DECL_NOTHROW { return !(lhs < rhs); }
324 
325 inline bool operator!=(QStringView lhs, QLatin1String rhs) Q_DECL_NOTHROW { return !(lhs == rhs); }
326 inline bool operator> (QStringView lhs, QLatin1String rhs) Q_DECL_NOTHROW { return   rhs < lhs; }
327 inline bool operator<=(QStringView lhs, QLatin1String rhs) Q_DECL_NOTHROW { return !(rhs < lhs); }
328 inline bool operator>=(QStringView lhs, QLatin1String rhs) Q_DECL_NOTHROW { return !(lhs < rhs); }
329 
330 #if !defined(QT_NO_CAST_FROM_ASCII) && !defined(QT_RESTRICTED_CAST_FROM_ASCII)
331 // QByteArray <> QStringView
332 inline bool operator==(const QByteArray &lhs, QStringView rhs) { return QStringView::compare(lhs, rhs) == 0; }
333 inline bool operator< (const QByteArray &lhs, QStringView rhs) { return QStringView::compare(lhs, rhs) <  0; }
334 
335 inline bool operator==(QStringView lhs, const QByteArray &rhs) { return QStringView::compare(lhs, rhs) == 0; }
336 inline bool operator< (QStringView lhs, const QByteArray &rhs) { return QStringView::compare(lhs, rhs) <  0; }
337 
338 inline bool operator!=(const QByteArray &lhs, QStringView rhs) { return !(lhs == rhs); }
339 inline bool operator> (const QByteArray &lhs, QStringView rhs) { return   rhs < lhs; }
340 inline bool operator<=(const QByteArray &lhs, QStringView rhs) { return !(rhs < lhs); }
341 inline bool operator>=(const QByteArray &lhs, QStringView rhs) { return !(lhs < rhs); }
342 
343 inline bool operator!=(QStringView lhs, const QByteArray &rhs) { return !(lhs == rhs); }
344 inline bool operator> (QStringView lhs, const QByteArray &rhs) { return   rhs < lhs; }
345 inline bool operator<=(QStringView lhs, const QByteArray &rhs) { return !(rhs < lhs); }
346 inline bool operator>=(QStringView lhs, const QByteArray &rhs) { return !(lhs < rhs); }
347 
348 // const char * <> QStringView
349 inline bool operator==(const char *lhs, QStringView rhs) { return QStringView::compare(lhs, rhs) == 0; }
350 inline bool operator< (const char *lhs, QStringView rhs) { return QStringView::compare(lhs, rhs) <  0; }
351 
352 inline bool operator==(QStringView lhs, const char *rhs) { return QStringView::compare(lhs, rhs) == 0; }
353 inline bool operator< (QStringView lhs, const char *rhs) { return QStringView::compare(lhs, rhs) <  0; }
354 
355 inline bool operator!=(const char *lhs, QStringView rhs) { return !(lhs == rhs); }
356 inline bool operator> (const char *lhs, QStringView rhs) { return   rhs < lhs; }
357 inline bool operator<=(const char *lhs, QStringView rhs) { return !(rhs < lhs); }
358 inline bool operator>=(const char *lhs, QStringView rhs) { return !(lhs < rhs); }
359 
360 inline bool operator!=(QStringView lhs, const char *rhs) { return !(lhs == rhs); }
361 inline bool operator> (QStringView lhs, const char *rhs) { return   rhs < lhs; }
362 inline bool operator<=(QStringView lhs, const char *rhs) { return !(rhs < lhs); }
363 inline bool operator>=(QStringView lhs, const char *rhs) { return !(lhs < rhs); }
364 #endif
365 
366 QT_END_NAMESPACE
367 
368 //Q_DECLARE_METATYPE(QStringView);
369 
370 #endif // QT_STRINGVIEW_LEVEL > 0
371 
372 #endif /* QSTRINGVIEW_H */
