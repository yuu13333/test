Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "../tools/qtcreatorcrashhandler/crashhandlersetup.h"
27 
28 #include <app/app_version.h>
29 #include <extensionsystem/iplugin.h>
30 #include <extensionsystem/pluginerroroverview.h>
31 #include <extensionsystem/pluginmanager.h>
32 #include <extensionsystem/pluginspec.h>
33 #include <qtsingleapplication.h>
34 
35 #include <utils/algorithm.h>
36 #include <utils/environment.h>
37 #include <utils/fileutils.h>
38 #include <utils/hostosinfo.h>
39 #include <utils/optional.h>
40 #include <utils/temporarydirectory.h>
41 
42 #include <QDebug>
43 #include <QDir>
44 #include <QFontDatabase>
45 #include <QFileInfo>
46 #include <QLibraryInfo>
47 #include <QSettings>
48 #include <QStyle>
49 #include <QTextStream>
50 #include <QThreadPool>
51 #include <QTimer>
52 #include <QTranslator>
53 #include <QUrl>
54 #include <QVariant>
55 
56 #include <QNetworkProxyFactory>
57 
58 #include <QApplication>
59 #include <QMessageBox>
60 #include <QProcess>
61 #include <QStandardPaths>
62 #include <QTemporaryDir>
63 
64 #include <string>
65 #include <vector>
66 #include <iterator>
67 
68 #ifdef ENABLE_QT_BREAKPAD
69 #include <qtsystemexceptionhandler.h>
70 #endif
71 
72 #ifdef ENABLE_CRASHPAD
73 #include "client/crashpad_client.h"
74 #include "client/crash_report_database.h"
75 #include "client/settings.h"
76 #endif
77 
78 #ifdef Q_OS_LINUX
79 #include <malloc.h>
80 #endif
81 
82 using namespace ExtensionSystem;
83 
84 enum { OptionIndent = 4, DescriptionIndent = 34 };
85 
86 const char corePluginNameC[] = "Core";
87 const char fixedOptionsC[] =
88 " [OPTION]... [FILE]...\n"
89 "Options:\n"
90 "    -help                         Display this help\n"
91 "    -version                      Display program version\n"
92 "    -client                       Attempt to connect to already running first instance\n"
93 "    -settingspath <path>          Override the default path where user settings are stored\n"
94 "    -installsettingspath <path>   Override the default path from where user-independent settings are read\n"
95 "    -temporarycleansettings       Use clean settings for debug or testing reasons\n"
96 "    -pid <pid>                    Attempt to connect to instance given by pid\n"
97 "    -block                        Block until editor is closed\n"
98 "    -pluginpath <path>            Add a custom search path for plugins\n";
99 
100 const char HELP_OPTION1[] = "-h";
101 const char HELP_OPTION2[] = "-help";
102 const char HELP_OPTION3[] = "/h";
103 const char HELP_OPTION4[] = "--help";
104 const char VERSION_OPTION[] = "-version";
105 const char CLIENT_OPTION[] = "-client";
106 const char SETTINGS_OPTION[] = "-settingspath";
107 const char INSTALL_SETTINGS_OPTION[] = "-installsettingspath";
108 const char TEST_OPTION[] = "-test";
109 const char TEMPORARY_CLEAN_SETTINGS1[] = "-temporarycleansettings";
110 const char TEMPORARY_CLEAN_SETTINGS2[] = "-tcs";
111 const char PID_OPTION[] = "-pid";
112 const char BLOCK_OPTION[] = "-block";
113 const char PLUGINPATH_OPTION[] = "-pluginpath";
114 const char USER_LIBRARY_PATH_OPTION[] = "-user-library-path"; // hidden option for qtcreator.sh
115 
116 using PluginSpecSet = QVector<PluginSpec *>;
117 
118 // Helpers for displaying messages. Note that there is no console on Windows.
119 
120 // Format as <pre> HTML
121 static inline QString toHtml(const QString &t)
122 {
123     QString res = t;
124     res.replace(QLatin1Char('&'), QLatin1String("&amp;"));
125     res.replace(QLatin1Char('<'), QLatin1String("&lt;"));
126     res.replace(QLatin1Char('>'), QLatin1String("&gt;"));
127     res.insert(0, QLatin1String("<html><pre>"));
128     res.append(QLatin1String("</pre></html>"));
129     return res;
130 }
131 
132 static void displayHelpText(const QString &t)
133 {
134     if (Utils::HostOsInfo::isWindowsHost() && qApp)
135         QMessageBox::information(nullptr, QLatin1String(Core::Constants::IDE_DISPLAY_NAME), toHtml(t));
136     else
137         qWarning("%s", qPrintable(t));
138 }
139 
140 static void displayError(const QString &t)
141 {
142     if (Utils::HostOsInfo::isWindowsHost() && qApp)
143         QMessageBox::critical(nullptr, QLatin1String(Core::Constants::IDE_DISPLAY_NAME), t);
144     else
145         qCritical("%s", qPrintable(t));
146 }
147 
148 static void printVersion(const PluginSpec *coreplugin)
149 {
150     QString version;
151     QTextStream str(&version);
152     str << '\n' << Core::Constants::IDE_DISPLAY_NAME << ' ' << coreplugin->version()<< " based on Qt " << qVersion() << "\n\n";
153     PluginManager::formatPluginVersions(str);
154     str << '\n' << coreplugin->copyright() << '\n';
155     displayHelpText(version);
156 }
157 
158 static void printHelp(const QString &a0)
159 {
160     QString help;
161     QTextStream str(&help);
162     str << "Usage: " << a0 << fixedOptionsC;
163     PluginManager::formatOptions(str, OptionIndent, DescriptionIndent);
164     PluginManager::formatPluginOptions(str, OptionIndent, DescriptionIndent);
165     displayHelpText(help);
166 }
167 
168 QString applicationDirPath(char *arg = nullptr)
169 {
170     static QString dir;
171 
172     if (arg)
173         dir = QFileInfo(QString::fromLocal8Bit(arg)).dir().absolutePath();
174 
175     if (QCoreApplication::instance())
176         return QApplication::applicationDirPath();
177 
178     return dir;
179 }
180 
181 static QString resourcePath()
182 {
183     return QDir::cleanPath(applicationDirPath() + '/' + RELATIVE_DATA_PATH);
184 }
185 
186 static inline QString msgCoreLoadFailure(const QString &why)
187 {
188     return QCoreApplication::translate("Application", "Failed to load core: %1").arg(why);
189 }
190 
191 static inline int askMsgSendFailed()
192 {
193     return QMessageBox::question(nullptr, QApplication::translate("Application","Could not send message"),
194                 QCoreApplication::translate("Application", "Unable to send command line arguments "
195                                             "to the already running instance. It does not appear to "
196                                             "be responding. Do you want to start a new instance of "
197                                             "%1?").arg(Core::Constants::IDE_DISPLAY_NAME),
198                 QMessageBox::Yes | QMessageBox::No | QMessageBox::Retry,
199                 QMessageBox::Retry);
200 }
201 
202 // taken from utils/fileutils.cpp. We cannot use utils here since that depends app_version.h.
203 static bool copyRecursively(const QString &srcFilePath, const QString &tgtFilePath)
204 {
205     QFileInfo srcFileInfo(srcFilePath);
206     if (srcFileInfo.isDir()) {
207         QDir targetDir(tgtFilePath);
208         targetDir.cdUp();
209         if (!targetDir.mkdir(Utils::FilePath::fromString(tgtFilePath).fileName()))
210             return false;
211         QDir sourceDir(srcFilePath);
212         const QStringList fileNames = sourceDir.entryList
213                 (QDir::Files | QDir::Dirs | QDir::NoDotAndDotDot | QDir::Hidden | QDir::System);
214         for (const QString &fileName : fileNames) {
215             const QString newSrcFilePath = srcFilePath + '/' + fileName;
216             const QString newTgtFilePath = tgtFilePath + '/' + fileName;
217             if (!copyRecursively(newSrcFilePath, newTgtFilePath))
218                 return false;
219         }
220     } else {
221         if (!QFile::copy(srcFilePath, tgtFilePath))
222             return false;
223     }
224     return true;
225 }
226 
227 static inline QStringList getPluginPaths()
228 {
229     QStringList rc(QDir::cleanPath(QApplication::applicationDirPath()
230                                    + '/' + RELATIVE_PLUGIN_PATH));
231     // Local plugin path: <localappdata>/plugins/<ideversion>
232     //    where <localappdata> is e.g.
233     //    "%LOCALAPPDATA%\QtProject\qtcreator" on Windows Vista and later
234     //    "$XDG_DATA_HOME/data/QtProject/qtcreator" or "~/.local/share/data/QtProject/qtcreator" on Linux
235     //    "~/Library/Application Support/QtProject/Qt Creator" on Mac
236     QString pluginPath = QStandardPaths::writableLocation(QStandardPaths::GenericDataLocation);
237     if (Utils::HostOsInfo::isAnyUnixHost() && !Utils::HostOsInfo::isMacHost())
238         pluginPath += QLatin1String("/data");
239     pluginPath += QLatin1Char('/')
240             + QLatin1String(Core::Constants::IDE_SETTINGSVARIANT_STR)
241             + QLatin1Char('/');
242     pluginPath += QLatin1String(Utils::HostOsInfo::isMacHost() ?
243                                     Core::Constants::IDE_DISPLAY_NAME :
244                                     Core::Constants::IDE_ID);
245     pluginPath += QLatin1String("/plugins/");
246     // Qt Creator X.Y.Z can load plugins from X.Y.(Z-1) etc, so add current and previous
247     // patch versions
248     const QString minorVersion = QString::number(IDE_VERSION_MAJOR) + '.'
249                                  + QString::number(IDE_VERSION_MINOR) + '.';
250     const int minPatchVersion
251         = qMin(IDE_VERSION_RELEASE,
252                QVersionNumber::fromString(Core::Constants::IDE_VERSION_COMPAT).microVersion());
253     for (int patchVersion = IDE_VERSION_RELEASE; patchVersion >= minPatchVersion; --patchVersion)
254         rc.push_back(pluginPath + minorVersion + QString::number(patchVersion));
255     return rc;
256 }
257 
258 static void setupInstallSettings(QString &installSettingspath)
259 {
260     if (!installSettingspath.isEmpty() && !QFileInfo(installSettingspath).isDir()) {
261         displayError(QString("-installsettingspath \"%0\" needs to be the path where a %1/%2.ini exist.").arg(installSettingspath,
262             QLatin1String(Core::Constants::IDE_SETTINGSVARIANT_STR), QLatin1String(Core::Constants::IDE_CASED_ID)));
263         installSettingspath.clear();
264     }
265     // Check if the default install settings contain a setting for the actual install settings.
266     // This can be an absolute path, or a path relative to applicationDirPath().
267     // The result is interpreted like -settingspath, but for SystemScope
268     static const char kInstallSettingsKey[] = "Settings/InstallSettings";
269     QSettings::setPath(QSettings::IniFormat, QSettings::SystemScope,
270         installSettingspath.isEmpty() ? resourcePath() : installSettingspath);
271 
272     QSettings installSettings(QSettings::IniFormat, QSettings::UserScope,
273                               QLatin1String(Core::Constants::IDE_SETTINGSVARIANT_STR),
274                               QLatin1String(Core::Constants::IDE_CASED_ID));
275     if (installSettings.contains(kInstallSettingsKey)) {
276         QString installSettingsPath = installSettings.value(kInstallSettingsKey).toString();
277         if (QDir::isRelativePath(installSettingsPath))
278             installSettingsPath = applicationDirPath() + '/' + installSettingsPath;
279         QSettings::setPath(QSettings::IniFormat, QSettings::SystemScope, installSettingsPath);
280     }
281 }
282 
283 static QSettings *createUserSettings()
284 {
285     return new QSettings(QSettings::IniFormat, QSettings::UserScope,
286                          QLatin1String(Core::Constants::IDE_SETTINGSVARIANT_STR),
287                          QLatin1String(Core::Constants::IDE_CASED_ID));
288 }
289 
290 static inline QSettings *userSettings()
291 {
292     QSettings *settings = createUserSettings();
293     const QString fromVariant = QLatin1String(Core::Constants::IDE_COPY_SETTINGS_FROM_VARIANT_STR);
294     if (fromVariant.isEmpty())
295         return settings;
296 
297     // Copy old settings to new ones:
298     QFileInfo pathFi = QFileInfo(settings->fileName());
299     if (pathFi.exists()) // already copied.
300         return settings;
301 
302     QDir destDir = pathFi.absolutePath();
303     if (!destDir.exists())
304         destDir.mkpath(pathFi.absolutePath());
305 
306     QDir srcDir = destDir;
307     srcDir.cdUp();
308     if (!srcDir.cd(fromVariant))
309         return settings;
310 
311     if (srcDir == destDir) // Nothing to copy and no settings yet
312         return settings;
313 
314     const QStringList entries = srcDir.entryList();
315     for (const QString &file : entries) {
316         const QString lowerFile = file.toLower();
317         if (lowerFile.startsWith(QLatin1String("profiles.xml"))
318                 || lowerFile.startsWith(QLatin1String("toolchains.xml"))
319                 || lowerFile.startsWith(QLatin1String("qtversion.xml"))
320                 || lowerFile.startsWith(QLatin1String("devices.xml"))
321                 || lowerFile.startsWith(QLatin1String("debuggers.xml"))
322                 || lowerFile.startsWith(QLatin1String(Core::Constants::IDE_ID) + "."))
323             QFile::copy(srcDir.absoluteFilePath(file), destDir.absoluteFilePath(file));
324         if (file == QLatin1String(Core::Constants::IDE_ID))
325             copyRecursively(srcDir.absoluteFilePath(file), destDir.absoluteFilePath(file));
326     }
327 
328     // Make sure to use the copied settings:
329     delete settings;
330     return createUserSettings();
331 }
332 
333 static void setHighDpiEnvironmentVariable()
334 {
335 
336     if (Utils::HostOsInfo().isMacHost())
337         return;
338 
339     std::unique_ptr<QSettings> settings(createUserSettings());
340 
341     const bool defaultValue = Utils::HostOsInfo().isWindowsHost();
342     const bool enableHighDpiScaling = settings->value("Core/EnableHighDpiScaling", defaultValue).toBool();
343 
344     static const char ENV_VAR_QT_DEVICE_PIXEL_RATIO[] = "QT_DEVICE_PIXEL_RATIO";
345     if (enableHighDpiScaling
346             && !qEnvironmentVariableIsSet(ENV_VAR_QT_DEVICE_PIXEL_RATIO) // legacy in 5.6, but still functional
347             && !qEnvironmentVariableIsSet("QT_AUTO_SCREEN_SCALE_FACTOR")
348             && !qEnvironmentVariableIsSet("QT_SCALE_FACTOR")
349             && !qEnvironmentVariableIsSet("QT_SCREEN_SCALE_FACTORS")) {
350 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
351         QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);
352 #if QT_VERSION == QT_VERSION_CHECK(5, 14, 0)
353         // work around QTBUG-80934
354         QGuiApplication::setHighDpiScaleFactorRoundingPolicy(
355             Qt::HighDpiScaleFactorRoundingPolicy::Round);
356 #endif
357 #endif
358     }
359 }
360 
361 void loadFonts()
362 {
363     const QDir dir(resourcePath() + "/fonts/");
364 
365     const QFileInfoList fonts = dir.entryInfoList(QStringList("*.ttf"), QDir::Files);
366     for (const QFileInfo &fileInfo : fonts)
367         QFontDatabase::addApplicationFont(fileInfo.absoluteFilePath());
368 }
369 
370 struct Options
371 {
372     QString settingsPath;
373     QString installSettingsPath;
374     QStringList customPluginPaths;
375     // list of arguments that were handled and not passed to the application or plugin manager
376     QStringList preAppArguments;
377     // list of arguments to be passed to the application or plugin manager
378     std::vector<char *> appArguments;
379     Utils::optional<QString> userLibraryPath;
380     bool hasTestOption = false;
381     bool wantsCleanSettings = false;
382 };
383 
384 Options parseCommandLine(int argc, char *argv[])
385 {
386     Options options;
387     auto it = argv;
388     const auto end = argv + argc;
389     while (it != end) {
390         const auto arg = QString::fromLocal8Bit(*it);
391         const bool hasNext = it + 1 != end;
392         const auto nextArg = hasNext ? QString::fromLocal8Bit(*(it + 1)) : QString();
393 
394         if (arg == SETTINGS_OPTION && hasNext) {
395             ++it;
396             options.settingsPath = QDir::fromNativeSeparators(nextArg);
397             options.preAppArguments << arg << nextArg;
398         } else if (arg == INSTALL_SETTINGS_OPTION && hasNext) {
399             ++it;
400             options.installSettingsPath = QDir::fromNativeSeparators(nextArg);
401             options.preAppArguments << arg << nextArg;
402         } else if (arg == PLUGINPATH_OPTION && hasNext) {
403             ++it;
404             options.customPluginPaths += QDir::fromNativeSeparators(nextArg);
405             options.preAppArguments << arg << nextArg;
406         } else if (arg == USER_LIBRARY_PATH_OPTION && hasNext) {
407             ++it;
408             options.userLibraryPath = nextArg;
409             options.preAppArguments << arg << nextArg;
410         } else if (arg == TEMPORARY_CLEAN_SETTINGS1 || arg == TEMPORARY_CLEAN_SETTINGS2) {
411             options.wantsCleanSettings = true;
412             options.preAppArguments << arg;
413         } else { // arguments that are still passed on to the application
414             if (arg == TEST_OPTION)
415                 options.hasTestOption = true;
416             options.appArguments.push_back(*it);
417         }
418         ++it;
419     }
420     return options;
421 }
422 
423 class Restarter
424 {
425 public:
426     Restarter(int argc, char *argv[])
427     {
428         Q_UNUSED(argc)
429         m_executable = QString::fromLocal8Bit(argv[0]);
430         m_workingPath = QDir::currentPath();
431     }
432 
433     void setArguments(const QStringList &args) { m_args = args; }
434 
435     QStringList arguments() const { return m_args; }
436 
437     int restartOrExit(int exitCode)
438     {
439         return qApp->property("restart").toBool() ? restart(exitCode) : exitCode;
440     }
441 
442     int restart(int exitCode)
443     {
444         QProcess::startDetached(m_executable, m_args, m_workingPath);
445         return exitCode;
446     }
447 
448 private:
449     QString m_executable;
450     QStringList m_args;
451     QString m_workingPath;
452 };
453 
454 QStringList lastSessionArgument()
455 {
456     // using insider information here is not particularly beautiful, anyhow
457     const bool hasProjectExplorer = Utils::anyOf(PluginManager::plugins(),
458                                                  Utils::equal(&PluginSpec::name,
459                                                               QString("ProjectExplorer")));
460     return hasProjectExplorer ? QStringList({"-lastsession"}) : QStringList();
461 }
462 
463 #ifdef ENABLE_CRASHPAD
464 bool startCrashpad(const QString &libexecPath)
465 {
466     using namespace crashpad;
467 
468     // Cache directory that will store crashpad information and minidumps
469     QString databasePath = libexecPath + "crashpad_reports";
470     QString handlerPath = libexecPath + "crashpad_handler";
471 #ifdef Q_OS_WIN
472     handlerPath += ".exe";
473     base::FilePath database(databasePath.toStdWString());
474     base::FilePath handler(handlerPath.toStdWString());
475 #elif defined(Q_OS_MACOS) || defined(Q_OS_LINUX)
476     base::FilePath database(databasePath.toStdString());
477     base::FilePath handler(handlerPath.toStdString());
478 #endif
479 
480     std::unique_ptr<CrashReportDatabase> db = CrashReportDatabase::Initialize(database);
481     if (db && db->GetSettings())
482         db->GetSettings()->SetUploadsEnabled(true);
483 
484     // URL used to submit minidumps to
485     std::string url(CRASHPAD_BACKEND_URL);
486 
487     // Optional annotations passed via --annotations to the handler
488     std::map<std::string, std::string> annotations;
489     annotations["app-version"] = Core::Constants::IDE_VERSION_DISPLAY;
490     annotations["qt-version"] = QT_VERSION_STR;
491 
492     // Optional arguments to pass to the handler
493     std::vector<std::string> arguments;
494     arguments.push_back("--no-rate-limit");
495 
496     CrashpadClient *client = new CrashpadClient();
497     bool success = client->StartHandler(
498         handler,
499         database,
500         database,
501         url,
502         annotations,
503         arguments,
504         /* restartable */ true,
505         /* asynchronous_start */ true
506     );
507 
508     return success;
509 }
510 #endif
511 
512 int main(int argc, char **argv)
513 {
514     Restarter restarter(argc, argv);
515     Utils::Environment::systemEnvironment(); // cache system environment before we do any changes
516 
517     // Manually determine various command line options
518     // We can't use the regular way of the plugin manager,
519     // because settings can change the way plugin manager behaves
520     Options options = parseCommandLine(argc, argv);
521     applicationDirPath(argv[0]);
522 
523     if (qEnvironmentVariableIsSet("QTC_DO_NOT_PROPAGATE_LD_PRELOAD")) {
524         Utils::Environment::modifySystemEnvironment(
525             {{"LD_PRELOAD", "", Utils::EnvironmentItem::Unset}});
526     }
527 
528     if (options.userLibraryPath) {
529         if ((*options.userLibraryPath).isEmpty()) {
530             Utils::Environment::modifySystemEnvironment(
531                 {{"LD_LIBRARY_PATH", "", Utils::EnvironmentItem::Unset}});
532         } else {
533             Utils::Environment::modifySystemEnvironment(
534                 {{"LD_LIBRARY_PATH", *options.userLibraryPath, Utils::EnvironmentItem::SetEnabled}});
535         }
536     }
537 
538 #ifdef Q_OS_WIN
539     if (!qEnvironmentVariableIsSet("QT_OPENGL"))
540         QCoreApplication::setAttribute(Qt::AA_UseOpenGLES);
541 #endif
542 
543     if (qEnvironmentVariableIsSet("QTCREATOR_DISABLE_NATIVE_MENUBAR")
544             || qgetenv("XDG_CURRENT_DESKTOP").startsWith("Unity")) {
545         QApplication::setAttribute(Qt::AA_DontUseNativeMenuBar);
546     }
547 
548     Utils::TemporaryDirectory::setMasterTemporaryDirectory(QDir::tempPath() + "/" + Core::Constants::IDE_CASED_ID + "-XXXXXX");
549 
550 #ifdef Q_OS_MACOS
551     // increase the number of file that can be opened in Qt Creator.
552     struct rlimit rl;
553     getrlimit(RLIMIT_NOFILE, &rl);
554 
555     rl.rlim_cur = qMin((rlim_t)OPEN_MAX, rl.rlim_max);
556     setrlimit(RLIMIT_NOFILE, &rl);
557 #endif
558 
559     QScopedPointer<Utils::TemporaryDirectory> temporaryCleanSettingsDir;
560     if (options.settingsPath.isEmpty() && (options.hasTestOption || options.wantsCleanSettings)) {
561         temporaryCleanSettingsDir.reset(new Utils::TemporaryDirectory("qtc-test-settings"));
562         if (!temporaryCleanSettingsDir->isValid())
563             return 1;
564         options.settingsPath = temporaryCleanSettingsDir->path();
565     }
566     if (!options.settingsPath.isEmpty())
567         QSettings::setPath(QSettings::IniFormat, QSettings::UserScope, options.settingsPath);
568 
569     // Must be done before any QSettings class is created
570     QSettings::setDefaultFormat(QSettings::IniFormat);
571     setupInstallSettings(options.installSettingsPath);
572     // plugin manager takes control of this settings object
573 
574     setHighDpiEnvironmentVariable();
575 
576     SharedTools::QtSingleApplication::setAttribute(Qt::AA_ShareOpenGLContexts);
577 
578     int numberofArguments = static_cast<int>(options.appArguments.size());
579 
580     SharedTools::QtSingleApplication app((QLatin1String(Core::Constants::IDE_DISPLAY_NAME)),
581                                          numberofArguments,
582                                          options.appArguments.data());
583     QCoreApplication::setApplicationName(Core::Constants::IDE_CASED_ID);
584     QCoreApplication::setApplicationVersion(QLatin1String(Core::Constants::IDE_VERSION_LONG));
585     QCoreApplication::setOrganizationName(QLatin1String(Core::Constants::IDE_SETTINGSVARIANT_STR));
586     QGuiApplication::setApplicationDisplayName(Core::Constants::IDE_DISPLAY_NAME);
587 
588     const QStringList pluginArguments = app.arguments();
589 
590     /*Initialize global settings and resetup install settings with QApplication::applicationDirPath */
591     setupInstallSettings(options.installSettingsPath);
592     QSettings *settings = userSettings();
593     QSettings *globalSettings = new QSettings(QSettings::IniFormat, QSettings::SystemScope,
594                                               QLatin1String(Core::Constants::IDE_SETTINGSVARIANT_STR),
595                                               QLatin1String(Core::Constants::IDE_CASED_ID));
596     loadFonts();
597 
598     if (Utils::HostOsInfo().isWindowsHost()
599             && !qFuzzyCompare(qApp->devicePixelRatio(), 1.0)
600             && QApplication::style()->objectName().startsWith(
601                 QLatin1String("windows"), Qt::CaseInsensitive)) {
602         QApplication::setStyle(QLatin1String("fusion"));
603     }
604     const int threadCount = QThreadPool::globalInstance()->maxThreadCount();
605     QThreadPool::globalInstance()->setMaxThreadCount(qMax(4, 2 * threadCount));
606 
607     const QString libexecPath = QCoreApplication::applicationDirPath()
608             + '/' + RELATIVE_LIBEXEC_PATH;
609 #ifdef ENABLE_QT_BREAKPAD
610     QtSystemExceptionHandler systemExceptionHandler(libexecPath);
611 #else
612     // Display a backtrace once a serious signal is delivered (Linux only).
613     CrashHandlerSetup setupCrashHandler(Core::Constants::IDE_DISPLAY_NAME,
614                                         CrashHandlerSetup::EnableRestart, libexecPath);
615 #endif
616 
617 #ifdef ENABLE_CRASHPAD
618     if (settings->value("EditorManager/CrashReportingEnabled", true).toBool())
619         startCrashpad(libexecPath);
620 #endif
621 
622 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
623     app.setAttribute(Qt::AA_UseHighDpiPixmaps);
624     app.setAttribute(Qt::AA_DisableWindowContextHelpButton);
625 #endif
626 
627     PluginManager pluginManager;
628     PluginManager::setPluginIID(QLatin1String("org.qt-project.Qt.QtCreatorPlugin"));
629     PluginManager::setGlobalSettings(globalSettings);
630     PluginManager::setSettings(settings);
631 
632     QTranslator translator;
633     QTranslator qtTranslator;
634     QStringList uiLanguages = QLocale::system().uiLanguages();
635     QString overrideLanguage = settings->value(QLatin1String("General/OverrideLanguage")).toString();
636     if (!overrideLanguage.isEmpty())
637         uiLanguages.prepend(overrideLanguage);
638     const QString &creatorTrPath = resourcePath() + "/translations";
639     for (QString locale : qAsConst(uiLanguages)) {
640         locale = QLocale(locale).name();
641         if (translator.load("qtcreator_" + locale, creatorTrPath)) {
642             const QString &qtTrPath = QLibraryInfo::location(QLibraryInfo::TranslationsPath);
643             const QString &qtTrFile = QLatin1String("qt_") + locale;
644             // Binary installer puts Qt tr files into creatorTrPath
645             if (qtTranslator.load(qtTrFile, qtTrPath) || qtTranslator.load(qtTrFile, creatorTrPath)) {
646                 app.installTranslator(&translator);
647                 app.installTranslator(&qtTranslator);
648                 app.setProperty("qtc_locale", locale);
649                 break;
650             }
651             Q_UNUSED(translator.load(QString())); // unload()
652         } else if (locale == QLatin1String("C") /* overrideLanguage == "English" */) {
653             // use built-in
654             break;
655         } else if (locale.startsWith(QLatin1String("en")) /* "English" is built-in */) {
656             // use built-in
657             break;
658         }
659     }
660 
661     app.setDesktopFileName("org.qt-project.qtcreator.desktop");
662 
663     // Make sure we honor the system's proxy settings
664     QNetworkProxyFactory::setUseSystemConfiguration(true);
665 
666     // Load
667     const QStringList pluginPaths = getPluginPaths() + options.customPluginPaths;
668     PluginManager::setPluginPaths(pluginPaths);
669     QMap<QString, QString> foundAppOptions;
670     if (pluginArguments.size() > 1) {
671         QMap<QString, bool> appOptions;
672         appOptions.insert(QLatin1String(HELP_OPTION1), false);
673         appOptions.insert(QLatin1String(HELP_OPTION2), false);
674         appOptions.insert(QLatin1String(HELP_OPTION3), false);
675         appOptions.insert(QLatin1String(HELP_OPTION4), false);
676         appOptions.insert(QLatin1String(VERSION_OPTION), false);
677         appOptions.insert(QLatin1String(CLIENT_OPTION), false);
678         appOptions.insert(QLatin1String(PID_OPTION), true);
679         appOptions.insert(QLatin1String(BLOCK_OPTION), false);
680         QString errorMessage;
681         if (!PluginManager::parseOptions(pluginArguments, appOptions, &foundAppOptions, &errorMessage)) {
682             displayError(errorMessage);
683             printHelp(QFileInfo(app.applicationFilePath()).baseName());
684             return -1;
685         }
686     }
687     restarter.setArguments(options.preAppArguments + PluginManager::argumentsForRestart()
688                            + lastSessionArgument());
689 
690     const PluginSpecSet plugins = PluginManager::plugins();
691     PluginSpec *coreplugin = nullptr;
692     for (PluginSpec *spec : plugins) {
693         if (spec->name() == QLatin1String(corePluginNameC)) {
694             coreplugin = spec;
695             break;
696         }
697     }
698     if (!coreplugin) {
699         QString nativePaths = QDir::toNativeSeparators(pluginPaths.join(QLatin1Char(',')));
700         const QString reason = QCoreApplication::translate("Application", "Could not find Core plugin in %1").arg(nativePaths);
701         displayError(msgCoreLoadFailure(reason));
702         return 1;
703     }
704     if (!coreplugin->isEffectivelyEnabled()) {
705         const QString reason = QCoreApplication::translate("Application", "Core plugin is disabled.");
706         displayError(msgCoreLoadFailure(reason));
707         return 1;
708     }
709     if (coreplugin->hasError()) {
710         displayError(msgCoreLoadFailure(coreplugin->errorString()));
711         return 1;
712     }
713     if (foundAppOptions.contains(QLatin1String(VERSION_OPTION))) {
714         printVersion(coreplugin);
715         return 0;
716     }
717     if (foundAppOptions.contains(QLatin1String(HELP_OPTION1))
718             || foundAppOptions.contains(QLatin1String(HELP_OPTION2))
719             || foundAppOptions.contains(QLatin1String(HELP_OPTION3))
720             || foundAppOptions.contains(QLatin1String(HELP_OPTION4))) {
721         printHelp(QFileInfo(app.applicationFilePath()).baseName());
722         return 0;
723     }
724 
725     qint64 pid = -1;
726     if (foundAppOptions.contains(QLatin1String(PID_OPTION))) {
727         QString pidString = foundAppOptions.value(QLatin1String(PID_OPTION));
728         bool pidOk;
729         qint64 tmpPid = pidString.toInt(&pidOk);
730         if (pidOk)
731             pid = tmpPid;
732     }
733 
734     bool isBlock = foundAppOptions.contains(QLatin1String(BLOCK_OPTION));
735     if (app.isRunning() && (pid != -1 || isBlock
736                             || foundAppOptions.contains(QLatin1String(CLIENT_OPTION)))) {
737         app.setBlock(isBlock);
738         if (app.sendMessage(PluginManager::serializedArguments(), 5000 /*timeout*/, pid))
739             return 0;
740 
741         // Message could not be send, maybe it was in the process of quitting
742         if (app.isRunning(pid)) {
743             // Nah app is still running, ask the user
744             int button = askMsgSendFailed();
745             while (button == QMessageBox::Retry) {
746                 if (app.sendMessage(PluginManager::serializedArguments(), 5000 /*timeout*/, pid))
747                     return 0;
748                 if (!app.isRunning(pid)) // App quit while we were trying so start a new creator
749                     button = QMessageBox::Yes;
750                 else
751                     button = askMsgSendFailed();
752             }
753             if (button == QMessageBox::No)
754                 return -1;
755         }
756     }
757 
758     PluginManager::checkForProblematicPlugins();
759     PluginManager::loadPlugins();
760     if (coreplugin->hasError()) {
761         displayError(msgCoreLoadFailure(coreplugin->errorString()));
762         return 1;
763     }
764 
765     // Set up remote arguments.
766     QObject::connect(&app, &SharedTools::QtSingleApplication::messageReceived,
767                      &pluginManager, &PluginManager::remoteArguments);
768 
769     QObject::connect(&app, SIGNAL(fileOpenRequest(QString)), coreplugin->plugin(),
770                      SLOT(fileOpenRequest(QString)));
771 
772     // shutdown plugin manager on the exit
773     QObject::connect(&app, &QCoreApplication::aboutToQuit, &pluginManager, &PluginManager::shutdown);
774 
775 #ifdef Q_OS_LINUX
776     class MemoryTrimmer : public QObject
777     {
778     public:
779         MemoryTrimmer()
780         {
781             m_trimTimer.setSingleShot(true);
782             m_trimTimer.setInterval(60000);
783             // glibc may not actually free memory in free().
784             connect(&m_trimTimer, &QTimer::timeout, this, [] { malloc_trim(0); });
785         }
786 
787         bool eventFilter(QObject *, QEvent *e) override
788         {
789             if ((e->type() == QEvent::MouseButtonPress || e->type() == QEvent::KeyPress)
790                     && !m_trimTimer.isActive()) {
791                 m_trimTimer.start();
792             }
793             return false;
794         }
795 
796         QTimer m_trimTimer;
797     };
798     MemoryTrimmer trimmer;
799     app.installEventFilter(&trimmer);
800 #endif
801 
802     return restarter.restartOrExit(app.exec());
803 }
