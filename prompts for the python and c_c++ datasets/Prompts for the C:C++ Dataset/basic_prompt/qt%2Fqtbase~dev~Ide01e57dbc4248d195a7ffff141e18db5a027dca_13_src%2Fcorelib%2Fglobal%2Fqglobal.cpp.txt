Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Copyright (C) 2016 Intel Corporation.
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the QtCore module of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:LGPL$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU Lesser General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU Lesser
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
22 ** packaging of this file. Please review the following information to
23 ** ensure the GNU Lesser General Public License version 3 requirements
24 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
25 **
26 ** GNU General Public License Usage
27 ** Alternatively, this file may be used under the terms of the GNU
28 ** General Public License version 2.0 or (at your option) the GNU General
29 ** Public license version 3 or any later version approved by the KDE Free
30 ** Qt Foundation. The licenses are as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
32 ** included in the packaging of this file. Please review the following
33 ** information to ensure the GNU General Public License requirements will
34 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
35 ** https://www.gnu.org/licenses/gpl-3.0.html.
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 #include "qplatformdefs.h"
42 #include "qstring.h"
43 #include "qvector.h"
44 #include "qlist.h"
45 #include "qthreadstorage.h"
46 #include "qdir.h"
47 #include "qdatetime.h"
48 #include <private/qlocale_tools_p.h>
49 
50 #include <qmutex.h>
51 
52 #ifndef QT_NO_QOBJECT
53 #include <private/qthread_p.h>
54 #endif
55 
56 #include <stdlib.h>
57 #include <limits.h>
58 #include <stdarg.h>
59 #include <string.h>
60 
61 #ifndef QT_NO_EXCEPTIONS
62 #  include <string>
63 #  include <exception>
64 #endif
65 
66 #include <errno.h>
67 #if defined(Q_CC_MSVC)
68 #  include <crtdbg.h>
69 #endif
70 
71 #ifdef Q_OS_WINRT
72 #include <Ws2tcpip.h>
73 #endif // Q_OS_WINRT
74 
75 #if defined(Q_OS_VXWORKS) && defined(_WRS_KERNEL)
76 #  include <envLib.h>
77 #endif
78 
79 #if defined(Q_OS_ANDROID)
80 #include <private/qjni_p.h>
81 #endif
82 
83 #if defined(Q_OS_SOLARIS)
84 #  include <sys/systeminfo.h>
85 #endif
86 
87 #ifdef Q_OS_UNIX
88 #include <sys/utsname.h>
89 #include <private/qcore_unix_p.h>
90 #endif
91 
92 #ifdef Q_OS_BSD4
93 #include <sys/sysctl.h>
94 #endif
95 
96 #include "archdetect.cpp"
97 
98 QT_BEGIN_NAMESPACE
99 
100 #if !QT_DEPRECATED_SINCE(5, 0)
101 // Make sure they're defined to be exported
102 Q_CORE_EXPORT void *qMemCopy(void *dest, const void *src, size_t n);
103 Q_CORE_EXPORT void *qMemSet(void *dest, int c, size_t n);
104 #endif
105 
106 // Statically check assumptions about the environment we're running
107 // in. The idea here is to error or warn if otherwise implicit Qt
108 // assumptions are not fulfilled on new hardware or compilers
109 // (if this list becomes too long, consider factoring into a separate file)
110 Q_STATIC_ASSERT_X(sizeof(int) == 4, "Qt assumes that int is 32 bits");
111 Q_STATIC_ASSERT_X(UCHAR_MAX == 255, "Qt assumes that char is 8 bits");
112 Q_STATIC_ASSERT_X(QT_POINTER_SIZE == sizeof(void *), "QT_POINTER_SIZE defined incorrectly");
113 
114 /*!
115     \class QFlag
116     \inmodule QtCore
117     \brief The QFlag class is a helper data type for QFlags.
118 
119     It is equivalent to a plain \c int, except with respect to
120     function overloading and type conversions. You should never need
121     to use this class in your applications.
122 
123     \sa QFlags
124 */
125 
126 /*!
127     \fn QFlag::QFlag(int value)
128 
129     Constructs a QFlag object that stores the given \a value.
130 */
131 
132 /*!
133     \fn QFlag::QFlag(uint value)
134     \since Qt 5.3
135 
136     Constructs a QFlag object that stores the given \a value.
137 */
138 
139 /*!
140     \fn QFlag::QFlag(short value)
141     \since 5.3
142 
143     Constructs a QFlag object that stores the given \a value.
144 */
145 
146 /*!
147     \fn QFlag::QFlag(ushort value)
148     \since Qt 5.3
149 
150     Constructs a QFlag object that stores the given \a value.
151 */
152 
153 /*!
154     \fn QFlag::operator int() const
155 
156     Returns the value stored by the QFlag object.
157 */
158 
159 /*!
160     \fn QFlag::operator uint() const
161     \since Qt 5.3
162 
163     Returns the value stored by the QFlag object.
164 */
165 
166 /*!
167     \class QFlags
168     \inmodule QtCore
169     \brief The QFlags class provides a type-safe way of storing
170     OR-combinations of enum values.
171 
172 
173     \ingroup tools
174 
175     The QFlags<Enum> class is a template class, where Enum is an enum
176     type. QFlags is used throughout Qt for storing combinations of
177     enum values.
178 
179     The traditional C++ approach for storing OR-combinations of enum
180     values is to use an \c int or \c uint variable. The inconvenience
181     with this approach is that there's no type checking at all; any
182     enum value can be OR'd with any other enum value and passed on to
183     a function that takes an \c int or \c uint.
184 
185     Qt uses QFlags to provide type safety. For example, the
186     Qt::Alignment type is simply a typedef for
187     QFlags<Qt::AlignmentFlag>. QLabel::setAlignment() takes a
188     Qt::Alignment parameter, which means that any combination of
189     Qt::AlignmentFlag values, or 0, is legal:
190 
191     \snippet code/src_corelib_global_qglobal.cpp 0
192 
193     If you try to pass a value from another enum or just a plain
194     integer other than 0, the compiler will report an error. If you
195     need to cast integer values to flags in a untyped fashion, you can
196     use the explicit QFlags constructor as cast operator.
197 
198     If you want to use QFlags for your own enum types, use
199     the Q_DECLARE_FLAGS() and Q_DECLARE_OPERATORS_FOR_FLAGS().
200 
201     Example:
202 
203     \snippet code/src_corelib_global_qglobal.cpp 1
204 
205     You can then use the \c MyClass::Options type to store
206     combinations of \c MyClass::Option values.
207 
208     \section1 Flags and the Meta-Object System
209 
210     The Q_DECLARE_FLAGS() macro does not expose the flags to the meta-object
211     system, so they cannot be used by Qt Script or edited in Qt Designer.
212     To make the flags available for these purposes, the Q_FLAG() macro must
213     be used:
214 
215     \snippet code/src_corelib_global_qglobal.cpp meta-object flags
216 
217     \section1 Naming Convention
218 
219     A sensible naming convention for enum types and associated QFlags
220     types is to give a singular name to the enum type (e.g., \c
221     Option) and a plural name to the QFlags type (e.g., \c Options).
222     When a singular name is desired for the QFlags type (e.g., \c
223     Alignment), you can use \c Flag as the suffix for the enum type
224     (e.g., \c AlignmentFlag).
225 
226     \sa QFlag
227 */
228 
229 /*!
230     \typedef QFlags::Int
231     \since 5.0
232 
233     Typedef for the integer type used for storage as well as for
234     implicit conversion. Either \c int or \c{unsigned int}, depending
235     on whether the enum's underlying type is signed or unsigned.
236 */
237 
238 /*!
239     \typedef QFlags::enum_type
240 
241     Typedef for the Enum template type.
242 */
243 
244 /*!
245     \fn QFlags::QFlags(const QFlags &other)
246 
247     Constructs a copy of \a other.
248 */
249 
250 /*!
251     \fn QFlags::QFlags(Enum flag)
252 
253     Constructs a QFlags object storing the given \a flag.
254 */
255 
256 /*!
257     \fn QFlags::QFlags(Zero zero)
258 
259     Constructs a QFlags object with no flags set. \a zero must be a
260     literal 0 value.
261 */
262 
263 /*!
264     \fn QFlags::QFlags(QFlag value)
265 
266     Constructs a QFlags object initialized with the given integer \a
267     value.
268 
269     The QFlag type is a helper type. By using it here instead of \c
270     int, we effectively ensure that arbitrary enum values cannot be
271     cast to a QFlags, whereas untyped enum values (i.e., \c int
272     values) can.
273 */
274 
275 /*!
276     \fn QFlags::QFlags(std::initializer_list<Enum> flags)
277     \since 5.4
278 
279     Constructs a QFlags object initialized with all \a flags
280     combined using the bitwise OR operator.
281 
282     \sa operator|=(), operator|()
283 */
284 
285 /*!
286     \fn QFlags &QFlags::operator=(const QFlags &other)
287 
288     Assigns \a other to this object and returns a reference to this
289     object.
290 */
291 
292 /*!
293     \fn QFlags &QFlags::operator&=(int mask)
294 
295     Performs a bitwise AND operation with \a mask and stores the
296     result in this QFlags object. Returns a reference to this object.
297 
298     \sa operator&(), operator|=(), operator^=()
299 */
300 
301 /*!
302     \fn QFlags &QFlags::operator&=(uint mask)
303 
304     \overload
305 */
306 
307 /*!
308     \fn QFlags &QFlags::operator&=(Enum mask)
309 
310     \overload
311 */
312 
313 /*!
314     \fn QFlags &QFlags::operator|=(QFlags other)
315 
316     Performs a bitwise OR operation with \a other and stores the
317     result in this QFlags object. Returns a reference to this object.
318 
319     \sa operator|(), operator&=(), operator^=()
320 */
321 
322 /*!
323     \fn QFlags &QFlags::operator|=(Enum other)
324 
325     \overload
326 */
327 
328 /*!
329     \fn QFlags &QFlags::operator^=(QFlags other)
330 
331     Performs a bitwise XOR operation with \a other and stores the
332     result in this QFlags object. Returns a reference to this object.
333 
334     \sa operator^(), operator&=(), operator|=()
335 */
336 
337 /*!
338     \fn QFlags &QFlags::operator^=(Enum other)
339 
340     \overload
341 */
342 
343 /*!
344     \fn QFlags::operator Int() const
345 
346     Returns the value stored in the QFlags object as an integer.
347 
348     \sa Int
349 */
350 
351 /*!
352     \fn QFlags QFlags::operator|(QFlags other) const
353 
354     Returns a QFlags object containing the result of the bitwise OR
355     operation on this object and \a other.
356 
357     \sa operator|=(), operator^(), operator&(), operator~()
358 */
359 
360 /*!
361     \fn QFlags QFlags::operator|(Enum other) const
362 
363     \overload
364 */
365 
366 /*!
367     \fn QFlags QFlags::operator^(QFlags other) const
368 
369     Returns a QFlags object containing the result of the bitwise XOR
370     operation on this object and \a other.
371 
372     \sa operator^=(), operator&(), operator|(), operator~()
373 */
374 
375 /*!
376     \fn QFlags QFlags::operator^(Enum other) const
377 
378     \overload
379 */
380 
381 /*!
382     \fn QFlags QFlags::operator&(int mask) const
383 
384     Returns a QFlags object containing the result of the bitwise AND
385     operation on this object and \a mask.
386 
387     \sa operator&=(), operator|(), operator^(), operator~()
388 */
389 
390 /*!
391     \fn QFlags QFlags::operator&(uint mask) const
392 
393     \overload
394 */
395 
396 /*!
397     \fn QFlags QFlags::operator&(Enum mask) const
398 
399     \overload
400 */
401 
402 /*!
403     \fn QFlags QFlags::operator~() const
404 
405     Returns a QFlags object that contains the bitwise negation of
406     this object.
407 
408     \sa operator&(), operator|(), operator^()
409 */
410 
411 /*!
412     \fn bool QFlags::operator!() const
413 
414     Returns \c true if no flag is set (i.e., if the value stored by the
415     QFlags object is 0); otherwise returns \c false.
416 */
417 
418 /*!
419     \fn bool QFlags::testFlag(Enum flag) const
420     \since 4.2
421 
422     Returns \c true if the \a flag is set, otherwise \c false.
423 */
424 
425 /*!
426     \fn QFlags QFlags::setFlag(Enum flag, bool on)
427     \since 5.7
428 
429     Sets the indicated \a flag if \a on is \c true or unsets it if
430     \a on is \c false. Returns a reference to this object.
431 */
432 
433 /*!
434   \macro Q_DISABLE_COPY(Class)
435   \relates QObject
436 
437   Disables the use of copy constructors and assignment operators
438   for the given \a Class.
439 
440   Instances of subclasses of QObject should not be thought of as
441   values that can be copied or assigned, but as unique identities.
442   This means that when you create your own subclass of QObject
443   (director or indirect), you should \e not give it a copy constructor
444   or an assignment operator.  However, it may not enough to simply
445   omit them from your class, because, if you mistakenly write some code
446   that requires a copy constructor or an assignment operator (it's easy
447   to do), your compiler will thoughtfully create it for you. You must
448   do more.
449 
450   The curious user will have seen that the Qt classes derived
451   from QObject typically include this macro in a private section:
452 
453   \snippet code/src_corelib_global_qglobal.cpp 43
454 
455   It declares a copy constructor and an assignment operator in the
456   private section, so that if you use them by mistake, the compiler
457   will report an error.
458 
459   \snippet code/src_corelib_global_qglobal.cpp 44
460 
461   But even this might not catch absolutely every case. You might be
462   tempted to do something like this:
463 
464   \snippet code/src_corelib_global_qglobal.cpp 45
465 
466   First of all, don't do that. Most compilers will generate code that
467   uses the copy constructor, so the privacy violation error will be
468   reported, but your C++ compiler is not required to generate code for
469   this statement in a specific way. It could generate code using
470   \e{neither} the copy constructor \e{nor} the assignment operator we
471   made private. In that case, no error would be reported, but your
472   application would probably crash when you called a member function
473   of \c{w}.
474 */
475 
476 /*!
477     \macro Q_DECLARE_FLAGS(Flags, Enum)
478     \relates QFlags
479 
480     The Q_DECLARE_FLAGS() macro expands to
481 
482     \snippet code/src_corelib_global_qglobal.cpp 2
483 
484     \a Enum is the name of an existing enum type, whereas \a Flags is
485     the name of the QFlags<\e{Enum}> typedef.
486 
487     See the QFlags documentation for details.
488 
489     \sa Q_DECLARE_OPERATORS_FOR_FLAGS()
490 */
491 
492 /*!
493     \macro Q_DECLARE_OPERATORS_FOR_FLAGS(Flags)
494     \relates QFlags
495 
496     The Q_DECLARE_OPERATORS_FOR_FLAGS() macro declares global \c
497     operator|() functions for \a Flags, which is of type QFlags<T>.
498 
499     See the QFlags documentation for details.
500 
501     \sa Q_DECLARE_FLAGS()
502 */
503 
504 /*!
505     \headerfile <QtGlobal>
506     \title Global Qt Declarations
507     \ingroup funclists
508 
509     \brief The <QtGlobal> header file includes the fundamental global
510     declarations. It is included by most other Qt header files.
511 
512     The global declarations include \l{types}, \l{functions} and
513     \l{macros}.
514 
515     The type definitions are partly convenience definitions for basic
516     types (some of which guarantee certain bit-sizes on all platforms
517     supported by Qt), partly types related to Qt message handling. The
518     functions are related to generating messages, Qt version handling
519     and comparing and adjusting object values. And finally, some of
520     the declared macros enable programmers to add compiler or platform
521     specific code to their applications, while others are convenience
522     macros for larger operations.
523 
524     \section1 Types
525 
526     The header file declares several type definitions that guarantee a
527     specified bit-size on all platforms supported by Qt for various
528     basic types, for example \l qint8 which is a signed char
529     guaranteed to be 8-bit on all platforms supported by Qt. The
530     header file also declares the \l qlonglong type definition for \c
531     {long long int } (\c __int64 on Windows).
532 
533     Several convenience type definitions are declared: \l qreal for \c
534     double, \l uchar for \c unsigned char, \l uint for \c unsigned
535     int, \l ulong for \c unsigned long and \l ushort for \c unsigned
536     short.
537 
538     Finally, the QtMsgType definition identifies the various messages
539     that can be generated and sent to a Qt message handler;
540     QtMessageHandler is a type definition for a pointer to a function with
541     the signature
542     \c {void myMessageHandler(QtMsgType, const QMessageLogContext &, const char *)}.
543     QMessageLogContext class contains the line, file, and function the
544     message was logged at. This information is created by the QMessageLogger
545     class.
546 
547     \section1 Functions
548 
549     The <QtGlobal> header file contains several functions comparing
550     and adjusting an object's value. These functions take a template
551     type as argument: You can retrieve the absolute value of an object
552     using the qAbs() function, and you can bound a given object's
553     value by given minimum and maximum values using the qBound()
554     function. You can retrieve the minimum and maximum of two given
555     objects using qMin() and qMax() respectively. All these functions
556     return a corresponding template type; the template types can be
557     replaced by any other type.
558 
559     Example:
560 
561     \snippet code/src_corelib_global_qglobal.cpp 3
562 
563     <QtGlobal> also contains functions that generate messages from the
564     given string argument: qDebug(), qInfo(), qWarning(), qCritical(),
565     and qFatal(). These functions call the message handler
566     with the given message.
567 
568     Example:
569 
570     \snippet code/src_corelib_global_qglobal.cpp 4
571 
572     The remaining functions are qRound() and qRound64(), which both
573     accept a \c double or \c float value as their argument returning
574     the value rounded up to the nearest integer and 64-bit integer
575     respectively, the qInstallMessageHandler() function which installs
576     the given QtMessageHandler, and the qVersion() function which
577     returns the version number of Qt at run-time as a string.
578 
579     \section1 Macros
580 
581     The <QtGlobal> header file provides a range of macros (Q_CC_*)
582     that are defined if the application is compiled using the
583     specified platforms. For example, the Q_CC_SUN macro is defined if
584     the application is compiled using Forte Developer, or Sun Studio
585     C++.  The header file also declares a range of macros (Q_OS_*)
586     that are defined for the specified platforms. For example,
587     Q_OS_UNIX which is defined for the Unix-based systems.
588 
589     The purpose of these macros is to enable programmers to add
590     compiler or platform specific code to their application.
591 
592     The remaining macros are convenience macros for larger operations:
593     The QT_TRANSLATE_NOOP() and QT_TR_NOOP() macros provide the
594     possibility of marking text for dynamic translation,
595     i.e. translation without changing the stored source text. The
596     Q_ASSERT() and Q_ASSERT_X() enables warning messages of various
597     level of refinement. The Q_FOREACH() and foreach() macros
598     implement Qt's foreach loop.
599 
600     The Q_INT64_C() and Q_UINT64_C() macros wrap signed and unsigned
601     64-bit integer literals in a platform-independent way. The
602     Q_CHECK_PTR() macro prints a warning containing the source code's
603     file name and line number, saying that the program ran out of
604     memory, if the pointer is 0. The qPrintable() and qUtf8Printable()
605     macros represent an easy way of printing text.
606 
607     Finally, the QT_POINTER_SIZE macro expands to the size of a
608     pointer in bytes, and the QT_VERSION and QT_VERSION_STR macros
609     expand to a numeric value or a string, respectively, specifying
610     Qt's version number, i.e the version the application is compiled
611     against.
612 
613     \sa <QtAlgorithms>, QSysInfo
614 */
615 
616 /*!
617     \typedef qreal
618     \relates <QtGlobal>
619 
620     Typedef for \c double unless Qt is configured with the
621     \c{-qreal float} option.
622 */
623 
624 /*! \typedef uchar
625     \relates <QtGlobal>
626 
627     Convenience typedef for \c{unsigned char}.
628 */
629 
630 /*! \typedef ushort
631     \relates <QtGlobal>
632 
633     Convenience typedef for \c{unsigned short}.
634 */
635 
636 /*! \typedef uint
637     \relates <QtGlobal>
638 
639     Convenience typedef for \c{unsigned int}.
640 */
641 
642 /*! \typedef ulong
643     \relates <QtGlobal>
644 
645     Convenience typedef for \c{unsigned long}.
646 */
647 
648 /*! \typedef qint8
649     \relates <QtGlobal>
650 
651     Typedef for \c{signed char}. This type is guaranteed to be 8-bit
652     on all platforms supported by Qt.
653 */
654 
655 /*!
656     \typedef quint8
657     \relates <QtGlobal>
658 
659     Typedef for \c{unsigned char}. This type is guaranteed to
660     be 8-bit on all platforms supported by Qt.
661 */
662 
663 /*! \typedef qint16
664     \relates <QtGlobal>
665 
666     Typedef for \c{signed short}. This type is guaranteed to be
667     16-bit on all platforms supported by Qt.
668 */
669 
670 /*!
671     \typedef quint16
672     \relates <QtGlobal>
673 
674     Typedef for \c{unsigned short}. This type is guaranteed to
675     be 16-bit on all platforms supported by Qt.
676 */
677 
678 /*! \typedef qint32
679     \relates <QtGlobal>
680 
681     Typedef for \c{signed int}. This type is guaranteed to be 32-bit
682     on all platforms supported by Qt.
683 */
684 
685 /*!
686     \typedef quint32
687     \relates <QtGlobal>
688 
689     Typedef for \c{unsigned int}. This type is guaranteed to
690     be 32-bit on all platforms supported by Qt.
691 */
692 
693 /*! \typedef qint64
694     \relates <QtGlobal>
695 
696     Typedef for \c{long long int} (\c __int64 on Windows). This type
697     is guaranteed to be 64-bit on all platforms supported by Qt.
698 
699     Literals of this type can be created using the Q_INT64_C() macro:
700 
701     \snippet code/src_corelib_global_qglobal.cpp 5
702 
703     \sa Q_INT64_C(), quint64, qlonglong
704 */
705 
706 /*!
707     \typedef quint64
708     \relates <QtGlobal>
709 
710     Typedef for \c{unsigned long long int} (\c{unsigned __int64} on
711     Windows). This type is guaranteed to be 64-bit on all platforms
712     supported by Qt.
713 
714     Literals of this type can be created using the Q_UINT64_C()
715     macro:
716 
717     \snippet code/src_corelib_global_qglobal.cpp 6
718 
719     \sa Q_UINT64_C(), qint64, qulonglong
720 */
721 
722 /*!
723     \typedef qintptr
724     \relates <QtGlobal>
725 
726     Integral type for representing pointers in a signed integer (useful for
727     hashing, etc.).
728 
729     Typedef for either qint32 or qint64. This type is guaranteed to
730     be the same size as a pointer on all platforms supported by Qt. On
731     a system with 32-bit pointers, qintptr is a typedef for qint32;
732     on a system with 64-bit pointers, qintptr is a typedef for
733     qint64.
734 
735     Note that qintptr is signed. Use quintptr for unsigned values.
736 
737     \sa qptrdiff, qint32, qint64
738 */
739 
740 /*!
741     \typedef quintptr
742     \relates <QtGlobal>
743 
744     Integral type for representing pointers in an unsigned integer (useful for
745     hashing, etc.).
746 
747     Typedef for either quint32 or quint64. This type is guaranteed to
748     be the same size as a pointer on all platforms supported by Qt. On
749     a system with 32-bit pointers, quintptr is a typedef for quint32;
750     on a system with 64-bit pointers, quintptr is a typedef for
751     quint64.
752 
753     Note that quintptr is unsigned. Use qptrdiff for signed values.
754 
755     \sa qptrdiff, quint32, quint64
756 */
757 
758 /*!
759     \typedef qptrdiff
760     \relates <QtGlobal>
761 
762     Integral type for representing pointer differences.
763 
764     Typedef for either qint32 or qint64. This type is guaranteed to be
765     the same size as a pointer on all platforms supported by Qt. On a
766     system with 32-bit pointers, quintptr is a typedef for quint32; on
767     a system with 64-bit pointers, quintptr is a typedef for quint64.
768 
769     Note that qptrdiff is signed. Use quintptr for unsigned values.
770 
771     \sa quintptr, qint32, qint64
772 */
773 
774 /*!
775     \enum QtMsgType
776     \relates <QtGlobal>
777 
778     This enum describes the messages that can be sent to a message
779     handler (QtMessageHandler). You can use the enum to identify and
780     associate the various message types with the appropriate
781     actions.
782 
783     \value QtDebugMsg
784            A message generated by the qDebug() function.
785     \value QtInfoMsg
786            A message generated by the qInfo() function.
787     \value QtWarningMsg
788            A message generated by the qWarning() function.
789     \value QtCriticalMsg
790            A message generated by the qCritical() function.
791     \value QtFatalMsg
792            A message generated by the qFatal() function.
793     \value QtSystemMsg
794 
795     \c QtInfoMsg was added in Qt 5.5.
796 
797     \sa QtMessageHandler, qInstallMessageHandler()
798 */
799 
800 /*! \typedef QFunctionPointer
801     \relates <QtGlobal>
802 
803     This is a typedef for \c{void (*)()}, a pointer to a function that takes
804     no arguments and returns void.
805 */
806 
807 /*! \macro qint64 Q_INT64_C(literal)
808     \relates <QtGlobal>
809 
810     Wraps the signed 64-bit integer \a literal in a
811     platform-independent way.
812 
813     Example:
814 
815     \snippet code/src_corelib_global_qglobal.cpp 8
816 
817     \sa qint64, Q_UINT64_C()
818 */
819 
820 /*! \macro quint64 Q_UINT64_C(literal)
821     \relates <QtGlobal>
822 
823     Wraps the unsigned 64-bit integer \a literal in a
824     platform-independent way.
825 
826     Example:
827 
828     \snippet code/src_corelib_global_qglobal.cpp 9
829 
830     \sa quint64, Q_INT64_C()
831 */
832 
833 /*! \typedef qlonglong
834     \relates <QtGlobal>
835 
836     Typedef for \c{long long int} (\c __int64 on Windows). This is
837     the same as \l qint64.
838 
839     \sa qulonglong, qint64
840 */
841 
842 /*!
843     \typedef qulonglong
844     \relates <QtGlobal>
845 
846     Typedef for \c{unsigned long long int} (\c{unsigned __int64} on
847     Windows). This is the same as \l quint64.
848 
849     \sa quint64, qlonglong
850 */
851 
852 /*! \fn T qAbs(const T &value)
853     \relates <QtGlobal>
854 
855     Compares \a value to the 0 of type T and returns the absolute
856     value. Thus if T is \e {double}, then \a value is compared to
857     \e{(double) 0}.
858 
859     Example:
860 
861     \snippet code/src_corelib_global_qglobal.cpp 10
862 */
863 
864 /*! \fn int qRound(double value)
865     \relates <QtGlobal>
866 
867     Rounds \a value to the nearest integer.
868 
869     Example:
870 
871     \snippet code/src_corelib_global_qglobal.cpp 11A
872 */
873 
874 /*! \fn int qRound(float value)
875     \relates <QtGlobal>
876 
877     Rounds \a value to the nearest integer.
878 
879     Example:
880 
881     \snippet code/src_corelib_global_qglobal.cpp 11B
882 */
883 
884 /*! \fn qint64 qRound64(double value)
885     \relates <QtGlobal>
886 
887     Rounds \a value to the nearest 64-bit integer.
888 
889     Example:
890 
891     \snippet code/src_corelib_global_qglobal.cpp 12A
892 */
893 
894 /*! \fn qint64 qRound64(float value)
895     \relates <QtGlobal>
896 
897     Rounds \a value to the nearest 64-bit integer.
898 
899     Example:
900 
901     \snippet code/src_corelib_global_qglobal.cpp 12B
902 */
903 
904 /*! \fn const T &qMin(const T &value1, const T &value2)
905     \relates <QtGlobal>
906 
907     Returns the minimum of \a value1 and \a value2.
908 
909     Example:
910 
911     \snippet code/src_corelib_global_qglobal.cpp 13
912 
913     \sa qMax(), qBound()
914 */
915 
916 /*! \fn const T &qMax(const T &value1, const T &value2)
917     \relates <QtGlobal>
918 
919     Returns the maximum of \a value1 and \a value2.
920 
921     Example:
922 
923     \snippet code/src_corelib_global_qglobal.cpp 14
924 
925     \sa qMin(), qBound()
926 */
927 
928 /*! \fn const T &qBound(const T &min, const T &value, const T &max)
929     \relates <QtGlobal>
930 
931     Returns \a value bounded by \a min and \a max. This is equivalent
932     to qMax(\a min, qMin(\a value, \a max)).
933 
934     Example:
935 
936     \snippet code/src_corelib_global_qglobal.cpp 15
937 
938     \sa qMin(), qMax()
939 */
940 
941 /*! \fn auto qOverload(T functionPointer)
942     \relates <QtGlobal>
943     \since 5.7
944 
945     Returns a pointer to an overloaded function. The template
946     parameter is the list of the argument types of the function.
947     \a functionPointer is the pointer to the (member) function:
948 
949     \snippet code/src_corelib_global_qglobal.cpp 52
950 
951     If a member function is also const-overloaded \l qConstOverload and
952     \l qNonConstOverload need to be used.
953 
954     qOverload() requires C++14 enabled. In C++11-only code, the helper
955     classes QOverload, QConstOverload, and QNonConstOverload can be used directly:
956 
957     \snippet code/src_corelib_global_qglobal.cpp 53
958 
959     \sa qConstOverload(), qNonConstOverload()
960 */
961 
962 /*! \fn auto qConstOverload(T memberFunctionPointer)
963     \relates <QtGlobal>
964     \since 5.7
965 
966     Returns the \a memberFunctionPointer pointer to a constant member function:
967 
968     \snippet code/src_corelib_global_qglobal.cpp 54
969 
970     \sa qOverload, qNonConstOverload
971 */
972 
973 /*! \fn auto qNonConstOverload(T memberFunctionPointer)
974     \relates <QtGlobal>
975     \since 5.7
976 
977     Returns the \a memberFunctionPointer pointer to a non-constant member function:
978 
979     \snippet code/src_corelib_global_qglobal.cpp 54
980 
981     \sa qOverload, qNonConstOverload
982 */
983 
984 /*!
985     \macro QT_VERSION_CHECK
986     \relates <QtGlobal>
987 
988     Turns the major, minor and patch numbers of a version into an
989     integer, 0xMMNNPP (MM = major, NN = minor, PP = patch). This can
990     be compared with another similarly processed version id.
991 
992     Example:
993 
994     \snippet code/src_corelib_global_qglobal.cpp qt-version-check
995 
996     \sa QT_VERSION
997 */
998 
999 /*!
1000     \macro QT_VERSION
1001     \relates <QtGlobal>
1002 
1003     This macro expands a numeric value of the form 0xMMNNPP (MM =
1004     major, NN = minor, PP = patch) that specifies Qt's version
1005     number. For example, if you compile your application against Qt
1006     4.1.2, the QT_VERSION macro will expand to 0x040102.
1007 
1008     You can use QT_VERSION to use the latest Qt features where
1009     available.
1010 
1011     Example:
1012 
1013     \snippet code/src_corelib_global_qglobal.cpp 16
1014 
1015     \sa QT_VERSION_STR, qVersion()
1016 */
1017 
1018 /*!
1019     \macro QT_VERSION_STR
1020     \relates <QtGlobal>
1021 
1022     This macro expands to a string that specifies Qt's version number
1023     (for example, "4.1.2"). This is the version against which the
1024     application is compiled.
1025 
1026     \sa qVersion(), QT_VERSION
1027 */
1028 
1029 /*!
1030     \relates <QtGlobal>
1031 
1032     Returns the version number of Qt at run-time as a string (for
1033     example, "4.1.2"). This may be a different version than the
1034     version the application was compiled against.
1035 
1036     \sa QT_VERSION_STR, QLibraryInfo::version()
1037 */
1038 
1039 const char *qVersion() Q_DECL_NOTHROW
1040 {
1041     return QT_VERSION_STR;
1042 }
1043 
1044 bool qSharedBuild() Q_DECL_NOTHROW
1045 {
1046 #ifdef QT_SHARED
1047     return true;
1048 #else
1049     return false;
1050 #endif
1051 }
1052 
1053 /*****************************************************************************
1054   System detection routines
1055  *****************************************************************************/
1056 
1057 /*!
1058     \class QSysInfo
1059     \inmodule QtCore
1060     \brief The QSysInfo class provides information about the system.
1061 
1062     \list
1063     \li \l WordSize specifies the size of a pointer for the platform
1064        on which the application is compiled.
1065     \li \l ByteOrder specifies whether the platform is big-endian or
1066        little-endian.
1067     \li \l WindowsVersion specifies the version of the Windows operating
1068        system on which the application is run.
1069     \li \l MacintoshVersion specifies the version of the Macintosh
1070        operating system on which the application is run.
1071     \endlist
1072 
1073     Some constants are defined only on certain platforms. You can use
1074     the preprocessor symbols Q_OS_WIN and Q_OS_OSX to test that
1075     the application is compiled under Windows or OS X.
1076 
1077     \sa QLibraryInfo
1078 */
1079 
1080 /*!
1081     \enum QSysInfo::Sizes
1082 
1083     This enum provides platform-specific information about the sizes of data
1084     structures used by the underlying architecture.
1085 
1086     \value WordSize The size in bits of a pointer for the platform on which
1087            the application is compiled (32 or 64).
1088 */
1089 
1090 /*!
1091     \variable QSysInfo::WindowsVersion
1092     \brief the version of the Windows operating system on which the
1093            application is run.
1094 */
1095 
1096 /*!
1097     \fn QSysInfo::WindowsVersion QSysInfo::windowsVersion()
1098     \since 4.4
1099 
1100     Returns the version of the Windows operating system on which the
1101     application is run, or WV_None if the operating system is not
1102     Windows.
1103 */
1104 
1105 /*!
1106     \variable QSysInfo::MacintoshVersion
1107     \brief the version of the Macintosh operating system on which
1108            the application is run.
1109 */
1110 
1111 /*!
1112     \fn QSysInfo::MacVersion QSysInfo::macVersion()
1113 
1114     Returns the version of Darwin (OS X or iOS) on which the
1115     application is run, or MV_None if the operating system
1116     is not a version of Darwin.
1117 */
1118 
1119 /*!
1120     \enum QSysInfo::Endian
1121 
1122     \value BigEndian  Big-endian byte order (also called Network byte order)
1123     \value LittleEndian  Little-endian byte order
1124     \value ByteOrder  Equals BigEndian or LittleEndian, depending on
1125                       the platform's byte order.
1126 */
1127 
1128 /*!
1129     \enum QSysInfo::WinVersion
1130 
1131     This enum provides symbolic names for the various versions of the
1132     Windows operating system. On Windows, the
1133     QSysInfo::WindowsVersion variable gives the version of the system
1134     on which the application is run.
1135 
1136     MS-DOS-based versions:
1137 
1138     \value WV_32s   Windows 3.1 with Win 32s
1139     \value WV_95    Windows 95
1140     \value WV_98    Windows 98
1141     \value WV_Me    Windows Me
1142 
1143     NT-based versions (note that each operating system version is only represented once rather than each Windows edition):
1144 
1145     \value WV_NT    Windows NT (operating system version 4.0)
1146     \value WV_2000  Windows 2000 (operating system version 5.0)
1147     \value WV_XP    Windows XP (operating system version 5.1)
1148     \value WV_2003  Windows Server 2003, Windows Server 2003 R2, Windows Home Server, Windows XP Professional x64 Edition (operating system version 5.2)
1149     \value WV_VISTA Windows Vista, Windows Server 2008 (operating system version 6.0)
1150     \value WV_WINDOWS7 Windows 7, Windows Server 2008 R2 (operating system version 6.1)
1151     \value WV_WINDOWS8 Windows 8 (operating system version 6.2)
1152     \value WV_WINDOWS8_1 Windows 8.1 (operating system version 6.3), introduced in Qt 5.2
1153     \value WV_WINDOWS10 Windows 10 (operating system version 10.0), introduced in Qt 5.5
1154 
1155     Alternatively, you may use the following macros which correspond directly to the Windows operating system version number:
1156 
1157     \value WV_4_0   Operating system version 4.0, corresponds to Windows NT
1158     \value WV_5_0   Operating system version 5.0, corresponds to Windows 2000
1159     \value WV_5_1   Operating system version 5.1, corresponds to Windows XP
1160     \value WV_5_2   Operating system version 5.2, corresponds to Windows Server 2003, Windows Server 2003 R2, Windows Home Server, and Windows XP Professional x64 Edition
1161     \value WV_6_0   Operating system version 6.0, corresponds to Windows Vista and Windows Server 2008
1162     \value WV_6_1   Operating system version 6.1, corresponds to Windows 7 and Windows Server 2008 R2
1163     \value WV_6_2   Operating system version 6.2, corresponds to Windows 8
1164     \value WV_6_3   Operating system version 6.3, corresponds to Windows 8.1, introduced in Qt 5.2
1165     \value WV_10_0  Operating system version 10.0, corresponds to Windows 10, introduced in Qt 5.5
1166 
1167     The following masks can be used for testing whether a Windows
1168     version is MS-DOS-based, NT-based, or CE-based:
1169 
1170     \value WV_DOS_based MS-DOS-based version of Windows
1171     \value WV_NT_based  NT-based version of Windows
1172 
1173     \value WV_None Operating system other than Windows.
1174 
1175     \sa MacVersion
1176 */
1177 
1178 /*!
1179     \enum QSysInfo::MacVersion
1180 
1181     This enum provides symbolic names for the various versions of the
1182     Darwin operating system, covering both OS X and iOS. The
1183     QSysInfo::MacintoshVersion variable gives the version of the
1184     system on which the application is run.
1185 
1186     \value MV_9        Mac OS 9
1187     \value MV_10_0     Mac OS X 10.0
1188     \value MV_10_1     Mac OS X 10.1
1189     \value MV_10_2     Mac OS X 10.2
1190     \value MV_10_3     Mac OS X 10.3
1191     \value MV_10_4     Mac OS X 10.4
1192     \value MV_10_5     Mac OS X 10.5
1193     \value MV_10_6     Mac OS X 10.6
1194     \value MV_10_7     Mac OS X 10.7
1195     \value MV_10_8     OS X 10.8
1196     \value MV_10_9     OS X 10.9
1197     \value MV_10_10    OS X 10.10
1198     \value MV_10_11    OS X 10.11
1199     \value MV_10_12    macOS 10.12
1200     \value MV_Unknown  An unknown and currently unsupported platform
1201 
1202     \value MV_CHEETAH  Apple codename for MV_10_0
1203     \value MV_PUMA     Apple codename for MV_10_1
1204     \value MV_JAGUAR   Apple codename for MV_10_2
1205     \value MV_PANTHER  Apple codename for MV_10_3
1206     \value MV_TIGER    Apple codename for MV_10_4
1207     \value MV_LEOPARD  Apple codename for MV_10_5
1208     \value MV_SNOWLEOPARD  Apple codename for MV_10_6
1209     \value MV_LION     Apple codename for MV_10_7
1210     \value MV_MOUNTAINLION Apple codename for MV_10_8
1211     \value MV_MAVERICKS    Apple codename for MV_10_9
1212     \value MV_YOSEMITE     Apple codename for MV_10_10
1213     \value MV_ELCAPITAN    Apple codename for MV_10_11
1214     \value MV_SIERRA       Apple codename for MV_10_12
1215 
1216     \value MV_IOS      iOS (any)
1217     \value MV_IOS_4_3  iOS 4.3
1218     \value MV_IOS_5_0  iOS 5.0
1219     \value MV_IOS_5_1  iOS 5.1
1220     \value MV_IOS_6_0  iOS 6.0
1221     \value MV_IOS_6_1  iOS 6.1
1222     \value MV_IOS_7_0  iOS 7.0
1223     \value MV_IOS_7_1  iOS 7.1
1224     \value MV_IOS_8_0  iOS 8.0
1225     \value MV_IOS_8_1  iOS 8.1
1226     \value MV_IOS_8_2  iOS 8.2
1227     \value MV_IOS_8_3  iOS 8.3
1228     \value MV_IOS_8_4  iOS 8.4
1229     \value MV_IOS_9_0  iOS 9.0
1230     \value MV_IOS_9_1  iOS 9.1
1231     \value MV_IOS_9_2  iOS 9.2
1232     \value MV_IOS_9_3  iOS 9.3
1233     \value MV_IOS_10_0 iOS 10.0
1234 
1235     \value MV_TVOS          tvOS (any)
1236     \value MV_TVOS_9_0      tvOS 9.0
1237     \value MV_TVOS_9_1      tvOS 9.1
1238     \value MV_TVOS_9_2      tvOS 9.2
1239     \value MV_TVOS_10_0     tvOS 10.0
1240 
1241     \value MV_None     Not a Darwin operating system
1242 
1243     \sa WinVersion
1244 */
1245 
1246 /*!
1247     \macro Q_OS_DARWIN
1248     \relates <QtGlobal>
1249 
1250     Defined on Darwin-based operating systems such as macOS, iOS, watchOS, and tvOS.
1251 */
1252 
1253 /*!
1254     \macro Q_OS_MAC
1255     \relates <QtGlobal>
1256 
1257     Deprecated synonym for \c Q_OS_DARWIN. Do not use.
1258  */
1259 
1260 /*!
1261     \macro Q_OS_OSX
1262     \relates <QtGlobal>
1263 
1264     Deprecated synonym for \c Q_OS_MACOS. Do not use.
1265  */
1266 
1267 /*!
1268     \macro Q_OS_MACOS
1269     \relates <QtGlobal>
1270 
1271     Defined on macOS.
1272  */
1273 
1274 /*!
1275     \macro Q_OS_IOS
1276     \relates <QtGlobal>
1277 
1278     Defined on iOS.
1279  */
1280 
1281 /*!
1282     \macro Q_OS_WATCHOS
1283     \relates <QtGlobal>
1284 
1285     Defined on watchOS.
1286  */
1287 
1288 /*!
1289     \macro Q_OS_TVOS
1290     \relates <QtGlobal>
1291 
1292     Defined on tvOS.
1293  */
1294 
1295 /*!
1296     \macro Q_OS_WIN
1297     \relates <QtGlobal>
1298 
1299     Defined on all supported versions of Windows. That is, if
1300     \l Q_OS_WIN32, \l Q_OS_WIN64 or \l Q_OS_WINRT is defined.
1301 */
1302 
1303 /*!
1304     \macro Q_OS_WIN32
1305     \relates <QtGlobal>
1306 
1307     Defined on 32-bit and 64-bit versions of Windows (not on Windows CE).
1308 */
1309 
1310 /*!
1311     \macro Q_OS_WIN64
1312     \relates <QtGlobal>
1313 
1314     Defined on 64-bit versions of Windows.
1315 */
1316 
1317 /*!
1318     \macro Q_OS_WINRT
1319     \relates <QtGlobal>
1320 
1321     Defined for Windows Runtime (Windows Store apps) on Windows 8, Windows RT,
1322     and Windows Phone 8.
1323 */
1324 
1325 /*!
1326     \macro Q_OS_WINPHONE
1327     \relates <QtGlobal>
1328 
1329     Defined on Windows Phone 8.
1330 */
1331 
1332 /*!
1333     \macro Q_OS_CYGWIN
1334     \relates <QtGlobal>
1335 
1336     Defined on Cygwin.
1337 */
1338 
1339 /*!
1340     \macro Q_OS_SOLARIS
1341     \relates <QtGlobal>
1342 
1343     Defined on Sun Solaris.
1344 */
1345 
1346 /*!
1347     \macro Q_OS_HPUX
1348     \relates <QtGlobal>
1349 
1350     Defined on HP-UX.
1351 */
1352 
1353 /*!
1354     \macro Q_OS_ULTRIX
1355     \relates <QtGlobal>
1356 
1357     Defined on DEC Ultrix.
1358 */
1359 
1360 /*!
1361     \macro Q_OS_LINUX
1362     \relates <QtGlobal>
1363 
1364     Defined on Linux.
1365 */
1366 
1367 /*!
1368     \macro Q_OS_ANDROID
1369     \relates <QtGlobal>
1370 
1371     Defined on Android.
1372 */
1373 
1374 /*!
1375     \macro Q_OS_FREEBSD
1376     \relates <QtGlobal>
1377 
1378     Defined on FreeBSD.
1379 */
1380 
1381 /*!
1382     \macro Q_OS_NETBSD
1383     \relates <QtGlobal>
1384 
1385     Defined on NetBSD.
1386 */
1387 
1388 /*!
1389     \macro Q_OS_OPENBSD
1390     \relates <QtGlobal>
1391 
1392     Defined on OpenBSD.
1393 */
1394 
1395 /*!
1396     \macro Q_OS_BSDI
1397     \relates <QtGlobal>
1398 
1399     Defined on BSD/OS.
1400 */
1401 
1402 /*!
1403     \macro Q_OS_IRIX
1404     \relates <QtGlobal>
1405 
1406     Defined on SGI Irix.
1407 */
1408 
1409 /*!
1410     \macro Q_OS_OSF
1411     \relates <QtGlobal>
1412 
1413     Defined on HP Tru64 UNIX.
1414 */
1415 
1416 /*!
1417     \macro Q_OS_SCO
1418     \relates <QtGlobal>
1419 
1420     Defined on SCO OpenServer 5.
1421 */
1422 
1423 /*!
1424     \macro Q_OS_UNIXWARE
1425     \relates <QtGlobal>
1426 
1427     Defined on UnixWare 7, Open UNIX 8.
1428 */
1429 
1430 /*!
1431     \macro Q_OS_AIX
1432     \relates <QtGlobal>
1433 
1434     Defined on AIX.
1435 */
1436 
1437 /*!
1438     \macro Q_OS_HURD
1439     \relates <QtGlobal>
1440 
1441     Defined on GNU Hurd.
1442 */
1443 
1444 /*!
1445     \macro Q_OS_DGUX
1446     \relates <QtGlobal>
1447 
1448     Defined on DG/UX.
1449 */
1450 
1451 /*!
1452     \macro Q_OS_RELIANT
1453     \relates <QtGlobal>
1454 
1455     Defined on Reliant UNIX.
1456 */
1457 
1458 /*!
1459     \macro Q_OS_DYNIX
1460     \relates <QtGlobal>
1461 
1462     Defined on DYNIX/ptx.
1463 */
1464 
1465 /*!
1466     \macro Q_OS_QNX
1467     \relates <QtGlobal>
1468 
1469     Defined on QNX Neutrino.
1470 */
1471 
1472 /*!
1473     \macro Q_OS_LYNX
1474     \relates <QtGlobal>
1475 
1476     Defined on LynxOS.
1477 */
1478 
1479 /*!
1480     \macro Q_OS_BSD4
1481     \relates <QtGlobal>
1482 
1483     Defined on Any BSD 4.4 system.
1484 */
1485 
1486 /*!
1487     \macro Q_OS_UNIX
1488     \relates <QtGlobal>
1489 
1490     Defined on Any UNIX BSD/SYSV system.
1491 */
1492 
1493 /*!
1494     \macro Q_CC_SYM
1495     \relates <QtGlobal>
1496 
1497     Defined if the application is compiled using Digital Mars C/C++
1498     (used to be Symantec C++).
1499 */
1500 
1501 /*!
1502     \macro Q_CC_MSVC
1503     \relates <QtGlobal>
1504 
1505     Defined if the application is compiled using Microsoft Visual
1506     C/C++, Intel C++ for Windows.
1507 */
1508 
1509 /*!
1510     \macro Q_CC_BOR
1511     \relates <QtGlobal>
1512 
1513     Defined if the application is compiled using Borland/Turbo C++.
1514 */
1515 
1516 /*!
1517     \macro Q_CC_WAT
1518     \relates <QtGlobal>
1519 
1520     Defined if the application is compiled using Watcom C++.
1521 */
1522 
1523 /*!
1524     \macro Q_CC_GNU
1525     \relates <QtGlobal>
1526 
1527     Defined if the application is compiled using GNU C++.
1528 */
1529 
1530 /*!
1531     \macro Q_CC_COMEAU
1532     \relates <QtGlobal>
1533 
1534     Defined if the application is compiled using Comeau C++.
1535 */
1536 
1537 /*!
1538     \macro Q_CC_EDG
1539     \relates <QtGlobal>
1540 
1541     Defined if the application is compiled using Edison Design Group
1542     C++.
1543 */
1544 
1545 /*!
1546     \macro Q_CC_OC
1547     \relates <QtGlobal>
1548 
1549     Defined if the application is compiled using CenterLine C++.
1550 */
1551 
1552 /*!
1553     \macro Q_CC_SUN
1554     \relates <QtGlobal>
1555 
1556     Defined if the application is compiled using Forte Developer, or
1557     Sun Studio C++.
1558 */
1559 
1560 /*!
1561     \macro Q_CC_MIPS
1562     \relates <QtGlobal>
1563 
1564     Defined if the application is compiled using MIPSpro C++.
1565 */
1566 
1567 /*!
1568     \macro Q_CC_DEC
1569     \relates <QtGlobal>
1570 
1571     Defined if the application is compiled using DEC C++.
1572 */
1573 
1574 /*!
1575     \macro Q_CC_HPACC
1576     \relates <QtGlobal>
1577 
1578     Defined if the application is compiled using HP aC++.
1579 */
1580 
1581 /*!
1582     \macro Q_CC_USLC
1583     \relates <QtGlobal>
1584 
1585     Defined if the application is compiled using SCO OUDK and UDK.
1586 */
1587 
1588 /*!
1589     \macro Q_CC_CDS
1590     \relates <QtGlobal>
1591 
1592     Defined if the application is compiled using Reliant C++.
1593 */
1594 
1595 /*!
1596     \macro Q_CC_KAI
1597     \relates <QtGlobal>
1598 
1599     Defined if the application is compiled using KAI C++.
1600 */
1601 
1602 /*!
1603     \macro Q_CC_INTEL
1604     \relates <QtGlobal>
1605 
1606     Defined if the application is compiled using Intel C++ for Linux,
1607     Intel C++ for Windows.
1608 */
1609 
1610 /*!
1611     \macro Q_CC_HIGHC
1612     \relates <QtGlobal>
1613 
1614     Defined if the application is compiled using MetaWare High C/C++.
1615 */
1616 
1617 /*!
1618     \macro Q_CC_PGI
1619     \relates <QtGlobal>
1620 
1621     Defined if the application is compiled using Portland Group C++.
1622 */
1623 
1624 /*!
1625     \macro Q_CC_GHS
1626     \relates <QtGlobal>
1627 
1628     Defined if the application is compiled using Green Hills
1629     Optimizing C++ Compilers.
1630 */
1631 
1632 /*!
1633     \macro Q_PROCESSOR_ALPHA
1634     \relates <QtGlobal>
1635 
1636     Defined if the application is compiled for Alpha processors.
1637 
1638     \sa QSysInfo::buildCpuArchitecture()
1639 */
1640 
1641 /*!
1642     \macro Q_PROCESSOR_ARM
1643     \relates <QtGlobal>
1644 
1645     Defined if the application is compiled for ARM processors. Qt currently
1646     supports three optional ARM revisions: \l Q_PROCESSOR_ARM_V5, \l
1647     Q_PROCESSOR_ARM_V6, and \l Q_PROCESSOR_ARM_V7.
1648 
1649     \sa QSysInfo::buildCpuArchitecture()
1650 */
1651 /*!
1652     \macro Q_PROCESSOR_ARM_V5
1653     \relates <QtGlobal>
1654 
1655     Defined if the application is compiled for ARMv5 processors. The \l
1656     Q_PROCESSOR_ARM macro is also defined when Q_PROCESSOR_ARM_V5 is defined.
1657 
1658     \sa QSysInfo::buildCpuArchitecture()
1659 */
1660 /*!
1661     \macro Q_PROCESSOR_ARM_V6
1662     \relates <QtGlobal>
1663 
1664     Defined if the application is compiled for ARMv6 processors. The \l
1665     Q_PROCESSOR_ARM and \l Q_PROCESSOR_ARM_V5 macros are also defined when
1666     Q_PROCESSOR_ARM_V6 is defined.
1667 
1668     \sa QSysInfo::buildCpuArchitecture()
1669 */
1670 /*!
1671     \macro Q_PROCESSOR_ARM_V7
1672     \relates <QtGlobal>
1673 
1674     Defined if the application is compiled for ARMv7 processors. The \l
1675     Q_PROCESSOR_ARM, \l Q_PROCESSOR_ARM_V5, and \l Q_PROCESSOR_ARM_V6 macros
1676     are also defined when Q_PROCESSOR_ARM_V7 is defined.
1677 
1678     \sa QSysInfo::buildCpuArchitecture()
1679 */
1680 
1681 /*!
1682     \macro Q_PROCESSOR_AVR32
1683     \relates <QtGlobal>
1684 
1685     Defined if the application is compiled for AVR32 processors.
1686 
1687     \sa QSysInfo::buildCpuArchitecture()
1688 */
1689 
1690 /*!
1691     \macro Q_PROCESSOR_BLACKFIN
1692     \relates <QtGlobal>
1693 
1694     Defined if the application is compiled for Blackfin processors.
1695 
1696     \sa QSysInfo::buildCpuArchitecture()
1697 */
1698 
1699 /*!
1700     \macro Q_PROCESSOR_IA64
1701     \relates <QtGlobal>
1702 
1703     Defined if the application is compiled for IA-64 processors. This includes
1704     all Itanium and Itanium 2 processors.
1705 
1706     \sa QSysInfo::buildCpuArchitecture()
1707 */
1708 
1709 /*!
1710     \macro Q_PROCESSOR_MIPS
1711     \relates <QtGlobal>
1712 
1713     Defined if the application is compiled for MIPS processors. Qt currently
1714     supports seven MIPS revisions: \l Q_PROCESSOR_MIPS_I, \l
1715     Q_PROCESSOR_MIPS_II, \l Q_PROCESSOR_MIPS_III, \l Q_PROCESSOR_MIPS_IV, \l
1716     Q_PROCESSOR_MIPS_V, \l Q_PROCESSOR_MIPS_32, and \l Q_PROCESSOR_MIPS_64.
1717 
1718     \sa QSysInfo::buildCpuArchitecture()
1719 */
1720 /*!
1721     \macro Q_PROCESSOR_MIPS_I
1722     \relates <QtGlobal>
1723 
1724     Defined if the application is compiled for MIPS-I processors. The \l
1725     Q_PROCESSOR_MIPS macro is also defined when Q_PROCESSOR_MIPS_I is defined.
1726 
1727     \sa QSysInfo::buildCpuArchitecture()
1728 */
1729 /*!
1730     \macro Q_PROCESSOR_MIPS_II
1731     \relates <QtGlobal>
1732 
1733     Defined if the application is compiled for MIPS-II processors. The \l
1734     Q_PROCESSOR_MIPS and \l Q_PROCESSOR_MIPS_I macros are also defined when
1735     Q_PROCESSOR_MIPS_II is defined.
1736 
1737     \sa QSysInfo::buildCpuArchitecture()
1738 */
1739 /*!
1740     \macro Q_PROCESSOR_MIPS_32
1741     \relates <QtGlobal>
1742 
1743     Defined if the application is compiled for MIPS32 processors. The \l
1744     Q_PROCESSOR_MIPS, \l Q_PROCESSOR_MIPS_I, and \l Q_PROCESSOR_MIPS_II macros
1745     are also defined when Q_PROCESSOR_MIPS_32 is defined.
1746 
1747     \sa QSysInfo::buildCpuArchitecture()
1748 */
1749 /*!
1750     \macro Q_PROCESSOR_MIPS_III
1751     \relates <QtGlobal>
1752 
1753     Defined if the application is compiled for MIPS-III processors. The \l
1754     Q_PROCESSOR_MIPS, \l Q_PROCESSOR_MIPS_I, and \l Q_PROCESSOR_MIPS_II macros
1755     are also defined when Q_PROCESSOR_MIPS_III is defined.
1756 
1757     \sa QSysInfo::buildCpuArchitecture()
1758 */
1759 /*!
1760     \macro Q_PROCESSOR_MIPS_IV
1761     \relates <QtGlobal>
1762 
1763     Defined if the application is compiled for MIPS-IV processors. The \l
1764     Q_PROCESSOR_MIPS, \l Q_PROCESSOR_MIPS_I, \l Q_PROCESSOR_MIPS_II, and \l
1765     Q_PROCESSOR_MIPS_III macros are also defined when Q_PROCESSOR_MIPS_IV is
1766     defined.
1767 
1768     \sa QSysInfo::buildCpuArchitecture()
1769 */
1770 /*!
1771     \macro Q_PROCESSOR_MIPS_V
1772     \relates <QtGlobal>
1773 
1774     Defined if the application is compiled for MIPS-V processors. The \l
1775     Q_PROCESSOR_MIPS, \l Q_PROCESSOR_MIPS_I, \l Q_PROCESSOR_MIPS_II, \l
1776     Q_PROCESSOR_MIPS_III, and \l Q_PROCESSOR_MIPS_IV macros are also defined
1777     when Q_PROCESSOR_MIPS_V is defined.
1778 
1779     \sa QSysInfo::buildCpuArchitecture()
1780 */
1781 /*!
1782     \macro Q_PROCESSOR_MIPS_64
1783     \relates <QtGlobal>
1784 
1785     Defined if the application is compiled for MIPS64 processors. The \l
1786     Q_PROCESSOR_MIPS, \l Q_PROCESSOR_MIPS_I, \l Q_PROCESSOR_MIPS_II, \l
1787     Q_PROCESSOR_MIPS_III, \l Q_PROCESSOR_MIPS_IV, and \l Q_PROCESSOR_MIPS_V
1788     macros are also defined when Q_PROCESSOR_MIPS_64 is defined.
1789 
1790     \sa QSysInfo::buildCpuArchitecture()
1791 */
1792 
1793 /*!
1794     \macro Q_PROCESSOR_POWER
1795     \relates <QtGlobal>
1796 
1797     Defined if the application is compiled for POWER processors. Qt currently
1798     supports two Power variants: \l Q_PROCESSOR_POWER_32 and \l
1799     Q_PROCESSOR_POWER_64.
1800 
1801     \sa QSysInfo::buildCpuArchitecture()
1802 */
1803 /*!
1804     \macro Q_PROCESSOR_POWER_32
1805     \relates <QtGlobal>
1806 
1807     Defined if the application is compiled for 32-bit Power processors. The \l
1808     Q_PROCESSOR_POWER macro is also defined when Q_PROCESSOR_POWER_32 is
1809     defined.
1810 
1811     \sa QSysInfo::buildCpuArchitecture()
1812 */
1813 /*!
1814     \macro Q_PROCESSOR_POWER_64
1815     \relates <QtGlobal>
1816 
1817     Defined if the application is compiled for 64-bit Power processors. The \l
1818     Q_PROCESSOR_POWER macro is also defined when Q_PROCESSOR_POWER_64 is
1819     defined.
1820 
1821     \sa QSysInfo::buildCpuArchitecture()
1822 */
1823 
1824 /*!
1825     \macro Q_PROCESSOR_S390
1826     \relates <QtGlobal>
1827 
1828     Defined if the application is compiled for S/390 processors. Qt supports
1829     one optional variant of S/390: Q_PROCESSOR_S390_X.
1830 
1831     \sa QSysInfo::buildCpuArchitecture()
1832 */
1833 /*!
1834     \macro Q_PROCESSOR_S390_X
1835     \relates <QtGlobal>
1836 
1837     Defined if the application is compiled for S/390x processors. The \l
1838     Q_PROCESSOR_S390 macro is also defined when Q_PROCESSOR_S390_X is defined.
1839 
1840     \sa QSysInfo::buildCpuArchitecture()
1841 */
1842 
1843 /*!
1844     \macro Q_PROCESSOR_SH
1845     \relates <QtGlobal>
1846 
1847     Defined if the application is compiled for SuperH processors. Qt currently
1848     supports one SuperH revision: \l Q_PROCESSOR_SH_4A.
1849 
1850     \sa QSysInfo::buildCpuArchitecture()
1851 */
1852 /*!
1853     \macro Q_PROCESSOR_SH_4A
1854     \relates <QtGlobal>
1855 
1856     Defined if the application is compiled for SuperH 4A processors. The \l
1857     Q_PROCESSOR_SH macro is also defined when Q_PROCESSOR_SH_4A is defined.
1858 
1859     \sa QSysInfo::buildCpuArchitecture()
1860 */
1861 
1862 /*!
1863     \macro Q_PROCESSOR_SPARC
1864     \relates <QtGlobal>
1865 
1866     Defined if the application is compiled for SPARC processors. Qt currently
1867     supports one optional SPARC revision: \l Q_PROCESSOR_SPARC_V9.
1868 
1869     \sa QSysInfo::buildCpuArchitecture()
1870 */
1871 /*!
1872     \macro Q_PROCESSOR_SPARC_V9
1873     \relates <QtGlobal>
1874 
1875     Defined if the application is compiled for SPARC V9 processors. The \l
1876     Q_PROCESSOR_SPARC macro is also defined when Q_PROCESSOR_SPARC_V9 is
1877     defined.
1878 
1879     \sa QSysInfo::buildCpuArchitecture()
1880 */
1881 
1882 /*!
1883     \macro Q_PROCESSOR_X86
1884     \relates <QtGlobal>
1885 
1886     Defined if the application is compiled for x86 processors. Qt currently
1887     supports two x86 variants: \l Q_PROCESSOR_X86_32 and \l Q_PROCESSOR_X86_64.
1888 
1889     \sa QSysInfo::buildCpuArchitecture()
1890 */
1891 /*!
1892     \macro Q_PROCESSOR_X86_32
1893     \relates <QtGlobal>
1894 
1895     Defined if the application is compiled for 32-bit x86 processors. This
1896     includes all i386, i486, i586, and i686 processors. The \l Q_PROCESSOR_X86
1897     macro is also defined when Q_PROCESSOR_X86_32 is defined.
1898 
1899     \sa QSysInfo::buildCpuArchitecture()
1900 */
1901 /*!
1902     \macro Q_PROCESSOR_X86_64
1903     \relates <QtGlobal>
1904 
1905     Defined if the application is compiled for 64-bit x86 processors. This
1906     includes all AMD64, Intel 64, and other x86_64/x64 processors. The \l
1907     Q_PROCESSOR_X86 macro is also defined when Q_PROCESSOR_X86_64 is defined.
1908 
1909     \sa QSysInfo::buildCpuArchitecture()
1910 */
1911 
1912 /*!
1913   \macro QT_DISABLE_DEPRECATED_BEFORE
1914   \relates <QtGlobal>
1915 
1916   This macro can be defined in the project file to disable functions deprecated in
1917   a specified version of Qt or any earlier version. The default version number is 5.0,
1918   meaning that functions deprecated in or before Qt 5.0 will not be included.
1919 
1920   Examples:
1921   When using a future release of Qt 5, set QT_DISABLE_DEPRECATED_BEFORE=0x050100 to
1922   disable functions deprecated in Qt 5.1 and earlier. In any release, set
1923   QT_DISABLE_DEPRECATED_BEFORE=0x000000 to enable any functions, including the ones
1924   deprecated in Qt 5.0
1925  */
1926 
1927 #if defined(QT_BUILD_QMAKE)
1928 // needed to bootstrap qmake
1929 static const unsigned int qt_one = 1;
1930 const int QSysInfo::ByteOrder = ((*((unsigned char *) &qt_one) == 0) ? BigEndian : LittleEndian);
1931 #endif
1932 
1933 #if defined(Q_OS_MAC)
1934 
1935 QT_BEGIN_INCLUDE_NAMESPACE
1936 #include "private/qcore_mac_p.h"
1937 #include "qnamespace.h"
1938 QT_END_INCLUDE_NAMESPACE
1939 
1940 QSysInfo::MacVersion QSysInfo::macVersion()
1941 {
1942     const QAppleOperatingSystemVersion version = qt_apple_os_version(); // qtcore_mac_objc.mm
1943 #if defined(Q_OS_OSX)
1944     return QSysInfo::MacVersion(Q_MV_OSX(version.major, version.minor));
1945 #elif defined(Q_OS_IOS)
1946     return QSysInfo::MacVersion(Q_MV_IOS(version.major, version.minor));
1947 #elif defined(Q_OS_TVOS)
1948     return QSysInfo::MacVersion(Q_MV_TVOS(version.major, version.minor));
1949 #else
1950     return QSysInfo::MV_Unknown;
1951 #endif
1952 }
1953 const QSysInfo::MacVersion QSysInfo::MacintoshVersion = QSysInfo::macVersion();
1954 
1955 #ifdef Q_OS_OSX
1956 static const char *osxVer_helper(QAppleOperatingSystemVersion version = qt_apple_os_version())
1957 {
1958     if (version.major == 10) {
1959         switch (version.minor) {
1960         case 9:
1961             return "Mavericks";
1962         case 10:
1963             return "Yosemite";
1964         case 11:
1965             return "El Capitan";
1966         case 12:
1967             return "Sierra";
1968         }
1969     }
1970     // unknown, future version
1971     return 0;
1972 }
1973 #endif
1974 
1975 #elif defined(Q_OS_WIN) || defined(Q_OS_CYGWIN) || defined(Q_OS_WINRT)
1976 
1977 QT_BEGIN_INCLUDE_NAMESPACE
1978 #include "qt_windows.h"
1979 QT_END_INCLUDE_NAMESPACE
1980 
1981 #  ifndef QT_BOOTSTRAPPED
1982 class QWindowsSockInit
1983 {
1984 public:
1985     QWindowsSockInit();
1986     ~QWindowsSockInit();
1987     int version;
1988 };
1989 
1990 QWindowsSockInit::QWindowsSockInit()
1991 :   version(0)
1992 {
1993     //### should we try for 2.2 on all platforms ??
1994     WSAData wsadata;
1995 
1996     // IPv6 requires Winsock v2.0 or better.
1997     if (WSAStartup(MAKEWORD(2,0), &wsadata) != 0) {
1998         qWarning("QTcpSocketAPI: WinSock v2.0 initialization failed.");
1999     } else {
2000         version = 0x20;
2001     }
2002 }
2003 
2004 QWindowsSockInit::~QWindowsSockInit()
2005 {
2006     WSACleanup();
2007 }
2008 Q_GLOBAL_STATIC(QWindowsSockInit, winsockInit)
2009 #  endif // QT_BOOTSTRAPPED
2010 
2011 #ifdef Q_OS_WINRT
2012 static inline HMODULE moduleHandleForFunction(LPCVOID address)
2013 {
2014     // This is a widely used, decades-old technique for retrieving the handle
2015     // of a module and is effectively equivalent to GetModuleHandleEx
2016     // (which is unavailable on WinRT)
2017     MEMORY_BASIC_INFORMATION mbi = { 0, 0, 0, 0, 0, 0, 0 };
2018     if (VirtualQuery(address, &mbi, sizeof(mbi)) == 0)
2019         return 0;
2020     return reinterpret_cast<HMODULE>(mbi.AllocationBase);
2021 }
2022 #endif
2023 
2024 static inline OSVERSIONINFOEX determineWinOsVersion()
2025 {
2026     OSVERSIONINFOEX result = { sizeof(OSVERSIONINFOEX), 0, 0, 0, 0, {'\0'}, 0, 0, 0, 0, 0};
2027 
2028 #define GetProcAddressA GetProcAddress
2029 
2030     // GetModuleHandle is not supported in WinRT and linking to it at load time
2031     // will not pass the Windows App Certification Kit... but it exists and is functional,
2032     // so use some unusual but widely used techniques to get a pointer to it
2033 #ifdef Q_OS_WINRT
2034     // 1. Get HMODULE of kernel32.dll, using the address of some function exported by that DLL
2035     HMODULE kernelModule = moduleHandleForFunction(reinterpret_cast<LPCVOID>(VirtualQuery));
2036     if (Q_UNLIKELY(!kernelModule))
2037         return result;
2038 
2039     // 2. Get pointer to GetModuleHandle so we can then load other arbitrary modules (DLLs)
2040     typedef HMODULE(WINAPI *GetModuleHandleFunction)(LPCWSTR);
2041     GetModuleHandleFunction pGetModuleHandle = reinterpret_cast<GetModuleHandleFunction>(
2042         GetProcAddressA(kernelModule, "GetModuleHandleW"));
2043     if (Q_UNLIKELY(!pGetModuleHandle))
2044         return result;
2045 #else
2046 #define pGetModuleHandle GetModuleHandleW
2047 #endif
2048 
2049 #ifndef Q_OS_WINCE
2050     HMODULE ntdll = pGetModuleHandle(L"ntdll.dll");
2051     if (Q_UNLIKELY(!ntdll))
2052         return result;
2053 
2054     // NTSTATUS is not defined on WinRT
2055     typedef LONG NTSTATUS;
2056     typedef NTSTATUS (NTAPI *RtlGetVersionFunction)(LPOSVERSIONINFO);
2057 
2058     // RtlGetVersion is documented public API but we must load it dynamically
2059     // because linking to it at load time will not pass the Windows App Certification Kit
2060     // https://msdn.microsoft.com/en-us/library/windows/hardware/ff561910.aspx
2061     RtlGetVersionFunction pRtlGetVersion = reinterpret_cast<RtlGetVersionFunction>(
2062         GetProcAddressA(ntdll, "RtlGetVersion"));
2063     if (Q_UNLIKELY(!pRtlGetVersion))
2064         return result;
2065 
2066     // GetVersionEx() has been deprecated in Windows 8.1 and will return
2067     // only Windows 8 from that version on, so use the kernel API function.
2068     pRtlGetVersion((LPOSVERSIONINFO) &result); // always returns STATUS_SUCCESS
2069 #else // !Q_OS_WINCE
2070     GetVersionEx(&result);
2071 #endif
2072     return result;
2073 }
2074 
2075 static OSVERSIONINFOEX winOsVersion()
2076 {
2077     OSVERSIONINFOEX realResult = determineWinOsVersion();
2078 #ifdef QT_DEBUG
2079     {
2080         if (Q_UNLIKELY(qEnvironmentVariableIsSet("QT_WINVER_OVERRIDE"))) {
2081             OSVERSIONINFOEX result = realResult;
2082             result.dwMajorVersion = 0;
2083             result.dwMinorVersion = 0;
2084 
2085             // Erase any build number and service pack information
2086             result.dwBuildNumber = 0;
2087             result.szCSDVersion[0] = L'\0';
2088             result.wServicePackMajor = 0;
2089             result.wServicePackMinor = 0;
2090 
2091             const QByteArray winVerOverride = qgetenv("QT_WINVER_OVERRIDE");
2092             if (winVerOverride == "WINDOWS7" || winVerOverride == "2008_R2") {
2093                 result.dwMajorVersion = 6;
2094                 result.dwMinorVersion = 1;
2095             } else if (winVerOverride == "WINDOWS8" || winVerOverride == "2012") {
2096                 result.dwMajorVersion = 6;
2097                 result.dwMinorVersion = 2;
2098             } else if (winVerOverride == "WINDOWS8_1" || winVerOverride == "2012_R2") {
2099                 result.dwMajorVersion = 6;
2100                 result.dwMinorVersion = 3;
2101             } else if (winVerOverride == "WINDOWS10" || winVerOverride == "2016") {
2102                 result.dwMajorVersion = 10;
2103             } else {
2104                 return realResult;
2105             }
2106 
2107             if (winVerOverride == "2008_R2"
2108                 || winVerOverride == "2012"
2109                 || winVerOverride == "2012_R2"
2110                 || winVerOverride == "2016") {
2111                 // If the current host OS is a domain controller and the override OS
2112                 // is also a server type OS, preserve that information
2113                 if (result.wProductType == VER_NT_WORKSTATION)
2114                     result.wProductType = VER_NT_SERVER;
2115             } else {
2116                 // Any other OS must be a workstation OS type
2117                 result.wProductType = VER_NT_WORKSTATION;
2118             }
2119         }
2120     }
2121 #endif
2122     return realResult;
2123 }
2124 
2125 QSysInfo::WinVersion QSysInfo::windowsVersion()
2126 {
2127     const OSVERSIONINFOEX osver = winOsVersion();
2128     if (osver.dwMajorVersion == 6 && osver.dwMinorVersion == 1)
2129         return QSysInfo::WV_WINDOWS7;
2130     if (osver.dwMajorVersion == 6 && osver.dwMinorVersion == 2)
2131         return QSysInfo::WV_WINDOWS8;
2132     if (osver.dwMajorVersion == 6 && osver.dwMinorVersion == 3)
2133         return QSysInfo::WV_WINDOWS8_1;
2134     if (osver.dwMajorVersion == 10 && osver.dwMinorVersion == 0)
2135         return QSysInfo::WV_WINDOWS10;
2136     return QSysInfo::WV_NT_based;
2137 }
2138 
2139 static QString winSp_helper()
2140 {
2141     const qint16 major = winOsVersion().wServicePackMajor;
2142     if (major) {
2143         QString sp = QStringLiteral(" SP ") + QString::number(major);
2144         const qint16 minor = winOsVersion().wServicePackMinor;
2145         if (minor)
2146             sp += QLatin1Char('.') + QString::number(minor);
2147 
2148         return sp;
2149     }
2150     return QString();
2151 }
2152 
2153 static const char *winVer_helper()
2154 {
2155     const OSVERSIONINFOEX osver = winOsVersion();
2156     const bool workstation = osver.wProductType == VER_NT_WORKSTATION;
2157 
2158 #define Q_WINVER(major, minor) (major << 8 | minor)
2159     switch (Q_WINVER(osver.dwMajorVersion, osver.dwMinorVersion)) {
2160     case Q_WINVER(6, 1):
2161         return workstation ? "7" : "Server 2008 R2";
2162     case Q_WINVER(6, 2):
2163         return workstation ? "8" : "Server 2012";
2164     case Q_WINVER(6, 3):
2165         return workstation ? "8.1" : "Server 2012 R2";
2166     case Q_WINVER(10, 0):
2167         return workstation ? "10" : "Server 2016";
2168     }
2169 #undef Q_WINVER
2170     // unknown, future version
2171     return 0;
2172 }
2173 
2174 const QSysInfo::WinVersion QSysInfo::WindowsVersion = QSysInfo::windowsVersion();
2175 
2176 #endif
2177 #if defined(Q_OS_UNIX)
2178 #  if (defined(Q_OS_LINUX) && !defined(Q_OS_ANDROID)) || defined(Q_OS_FREEBSD)
2179 #    define USE_ETC_OS_RELEASE
2180 struct QUnixOSVersion
2181 {
2182                                     // from /etc/os-release         older /etc/lsb-release         // redhat /etc/redhat-release         // debian /etc/debian_version
2183     QString productType;            // $ID                          $DISTRIB_ID                    // single line file containing:       // Debian
2184     QString productVersion;         // $VERSION_ID                  $DISTRIB_RELEASE               // <Vendor_ID release Version_ID>     // single line file <Release_ID/sid>
2185     QString prettyName;             // $PRETTY_NAME                 $DISTRIB_DESCRIPTION
2186 };
2187 
2188 static QString unquote(const char *begin, const char *end)
2189 {
2190     if (*begin == '"') {
2191         Q_ASSERT(end[-1] == '"');
2192         return QString::fromLatin1(begin + 1, end - begin - 2);
2193     }
2194     return QString::fromLatin1(begin, end - begin);
2195 }
2196 static QByteArray getEtcFileContent(const char *filename)
2197 {
2198     // we're avoiding QFile here
2199     int fd = qt_safe_open(filename, O_RDONLY);
2200     if (fd == -1)
2201         return QByteArray();
2202 
2203     QT_STATBUF sbuf;
2204     if (QT_FSTAT(fd, &sbuf) == -1) {
2205         qt_safe_close(fd);
2206         return QByteArray();
2207     }
2208 
2209     QByteArray buffer(sbuf.st_size, Qt::Uninitialized);
2210     buffer.resize(qt_safe_read(fd, buffer.data(), sbuf.st_size));
2211     qt_safe_close(fd);
2212     return buffer;
2213 }
2214 
2215 static bool readEtcFile(QUnixOSVersion &v, const char *filename,
2216                         const QByteArray &idKey, const QByteArray &versionKey, const QByteArray &prettyNameKey)
2217 {
2218 
2219     QByteArray buffer = getEtcFileContent(filename);
2220     if (buffer.isEmpty())
2221         return false;
2222 
2223     const char *ptr = buffer.constData();
2224     const char *end = buffer.constEnd();
2225     const char *eol;
2226     QByteArray line;
2227     for ( ; ptr != end; ptr = eol + 1) {
2228         // find the end of the line after ptr
2229         eol = static_cast<const char *>(memchr(ptr, '\n', end - ptr));
2230         if (!eol)
2231             eol = end - 1;
2232         line.setRawData(ptr, eol - ptr);
2233 
2234         if (line.startsWith(idKey)) {
2235             ptr += idKey.length();
2236             v.productType = unquote(ptr, eol);
2237             continue;
2238         }
2239 
2240         if (line.startsWith(prettyNameKey)) {
2241             ptr += prettyNameKey.length();
2242             v.prettyName = unquote(ptr, eol);
2243             continue;
2244         }
2245 
2246         if (line.startsWith(versionKey)) {
2247             ptr += versionKey.length();
2248             v.productVersion = unquote(ptr, eol);
2249             continue;
2250         }
2251     }
2252 
2253     return true;
2254 }
2255 
2256 static bool readEtcOsRelease(QUnixOSVersion &v)
2257 {
2258     return readEtcFile(v, "/etc/os-release", QByteArrayLiteral("ID="),
2259                        QByteArrayLiteral("VERSION_ID="), QByteArrayLiteral("PRETTY_NAME="));
2260 }
2261 
2262 static bool readEtcLsbRelease(QUnixOSVersion &v)
2263 {
2264     bool ok = readEtcFile(v, "/etc/lsb-release", QByteArrayLiteral("DISTRIB_ID="),
2265                           QByteArrayLiteral("DISTRIB_RELEASE="), QByteArrayLiteral("DISTRIB_DESCRIPTION="));
2266     if (ok && (v.prettyName.isEmpty() || v.prettyName == v.productType)) {
2267         // some distributions have redundant information for the pretty name,
2268         // so try /etc/<lowercasename>-release
2269 
2270         // we're still avoiding QFile here
2271         QByteArray distrorelease = "/etc/" + v.productType.toLatin1().toLower() + "-release";
2272         int fd = qt_safe_open(distrorelease, O_RDONLY);
2273         if (fd != -1) {
2274             QT_STATBUF sbuf;
2275             if (QT_FSTAT(fd, &sbuf) != -1 && sbuf.st_size > v.prettyName.length()) {
2276                 // file apparently contains interesting information
2277                 QByteArray buffer(sbuf.st_size, Qt::Uninitialized);
2278                 buffer.resize(qt_safe_read(fd, buffer.data(), sbuf.st_size));
2279                 v.prettyName = QString::fromLatin1(buffer.trimmed());
2280             }
2281             qt_safe_close(fd);
2282         }
2283     }
2284 
2285     // some distributions have a /etc/lsb-release file that does not provide the values
2286     // we are looking for, i.e. DISTRIB_ID, DISTRIB_RELEASE and DISTRIB_DESCRIPTION.
2287     // Assuming that neither DISTRIB_ID nor DISTRIB_RELEASE were found, or contained valid values,
2288     // returning false for readEtcLsbRelease will allow further /etc/<lowercasename>-release parsing.
2289     return ok && !(v.productType.isEmpty() && v.productVersion.isEmpty());
2290 }
2291 
2292 #if defined(Q_OS_LINUX)
2293 static QByteArray getEtcFileFirstLine(const char *fileName)
2294 {
2295     QByteArray buffer = getEtcFileContent(fileName);
2296     if (buffer.isEmpty())
2297         return QByteArray();
2298 
2299     const char *ptr = buffer.constData();
2300     int eol = buffer.indexOf("\n");
2301     return QByteArray(ptr, eol).trimmed();
2302 }
2303 
2304 static bool readEtcRedHatRelease(QUnixOSVersion &v)
2305 {
2306     // /etc/redhat-release analysed should be a one line file
2307     // the format of its content is <Vendor_ID release Version>
2308     // i.e. "Red Hat Enterprise Linux Workstation release 6.5 (Santiago)"
2309     QByteArray line = getEtcFileFirstLine("/etc/redhat-release");
2310     if (line.isEmpty())
2311         return false;
2312 
2313     v.prettyName = QString::fromLatin1(line);
2314 
2315     const char keyword[] = "release ";
2316     int releaseIndex = line.indexOf(keyword);
2317     v.productType = QString::fromLatin1(line.mid(0, releaseIndex)).remove(QLatin1Char(' '));
2318     int spaceIndex = line.indexOf(' ', releaseIndex + strlen(keyword));
2319     v.productVersion = QString::fromLatin1(line.mid(releaseIndex + strlen(keyword),
2320                                                     spaceIndex > -1 ? spaceIndex - releaseIndex - int(strlen(keyword)) : -1));
2321     return true;
2322 }
2323 
2324 static bool readEtcDebianVersion(QUnixOSVersion &v)
2325 {
2326     // /etc/debian_version analysed should be a one line file
2327     // the format of its content is <Release_ID/sid>
2328     // i.e. "jessie/sid"
2329     QByteArray line = getEtcFileFirstLine("/etc/debian_version");
2330     if (line.isEmpty())
2331         return false;
2332 
2333     v.productType = QStringLiteral("Debian");
2334     v.productVersion = QString::fromLatin1(line);
2335     return true;
2336 }
2337 #endif
2338 
2339 static bool findUnixOsVersion(QUnixOSVersion &v)
2340 {
2341     if (readEtcOsRelease(v))
2342         return true;
2343     if (readEtcLsbRelease(v))
2344         return true;
2345 #if defined(Q_OS_LINUX)
2346     if (readEtcRedHatRelease(v))
2347         return true;
2348     if (readEtcDebianVersion(v))
2349         return true;
2350 #endif
2351     return false;
2352 }
2353 #  endif // USE_ETC_OS_RELEASE
2354 #endif // Q_OS_UNIX
2355 
2356 
2357 /*!
2358     \since 5.4
2359 
2360     Returns the architecture of the CPU that Qt was compiled for, in text
2361     format. Note that this may not match the actual CPU that the application is
2362     running on if there's an emulation layer or if the CPU supports multiple
2363     architectures (like x86-64 processors supporting i386 applications). To
2364     detect that, use currentCpuArchitecture().
2365 
2366     Values returned by this function are stable and will not change over time,
2367     so applications can rely on the returned value as an identifier, except
2368     that new CPU types may be added over time.
2369 
2370     Typical returned values are (note: list not exhaustive):
2371     \list
2372         \li "arm"
2373         \li "arm64"
2374         \li "i386"
2375         \li "ia64"
2376         \li "mips"
2377         \li "mips64"
2378         \li "power"
2379         \li "power64"
2380         \li "sparc"
2381         \li "sparcv9"
2382         \li "x86_64"
2383     \endlist
2384 
2385     \sa QSysInfo::buildAbi(), QSysInfo::currentCpuArchitecture()
2386 */
2387 QString QSysInfo::buildCpuArchitecture()
2388 {
2389     return QStringLiteral(ARCH_PROCESSOR);
2390 }
2391 
2392 /*!
2393     \since 5.4
2394 
2395     Returns the architecture of the CPU that the application is running on, in
2396     text format. Note that this function depends on what the OS will report and
2397     may not detect the actual CPU architecture if the OS hides that information
2398     or is unable to provide it. For example, a 32-bit OS running on a 64-bit
2399     CPU is usually unable to determine the CPU is actually capable of running
2400     64-bit programs.
2401 
2402     Values returned by this function are mostly stable: an attempt will be made
2403     to ensure that they stay constant over time and match the values returned
2404     by QSysInfo::builldCpuArchitecture(). However, due to the nature of the
2405     operating system functions being used, there may be discrepancies.
2406 
2407     Typical returned values are (note: list not exhaustive):
2408     \list
2409         \li "arm"
2410         \li "arm64"
2411         \li "i386"
2412         \li "ia64"
2413         \li "mips"
2414         \li "mips64"
2415         \li "power"
2416         \li "power64"
2417         \li "sparc"
2418         \li "sparcv9"
2419         \li "x86_64"
2420     \endlist
2421 
2422     \sa QSysInfo::buildAbi(), QSysInfo::buildCpuArchitecture()
2423  */
2424 QString QSysInfo::currentCpuArchitecture()
2425 {
2426 #if defined(Q_OS_WIN)
2427     // We don't need to catch all the CPU architectures in this function;
2428     // only those where the host CPU might be different than the build target
2429     // (usually, 64-bit platforms).
2430     SYSTEM_INFO info;
2431     GetNativeSystemInfo(&info);
2432     switch (info.wProcessorArchitecture) {
2433 #  ifdef PROCESSOR_ARCHITECTURE_AMD64
2434     case PROCESSOR_ARCHITECTURE_AMD64:
2435         return QStringLiteral("x86_64");
2436 #  endif
2437 #  ifdef PROCESSOR_ARCHITECTURE_IA32_ON_WIN64
2438     case PROCESSOR_ARCHITECTURE_IA32_ON_WIN64:
2439 #  endif
2440     case PROCESSOR_ARCHITECTURE_IA64:
2441         return QStringLiteral("ia64");
2442     }
2443 #elif defined(Q_OS_UNIX)
2444     long ret = -1;
2445     struct utsname u;
2446 
2447 #  if defined(Q_OS_SOLARIS)
2448     // We need a special call for Solaris because uname(2) on x86 returns "i86pc" for
2449     // both 32- and 64-bit CPUs. Reference:
2450     // http://docs.oracle.com/cd/E18752_01/html/816-5167/sysinfo-2.html#REFMAN2sysinfo-2
2451     // http://fxr.watson.org/fxr/source/common/syscall/systeminfo.c?v=OPENSOLARIS
2452     // http://fxr.watson.org/fxr/source/common/conf/param.c?v=OPENSOLARIS;im=10#L530
2453     if (ret == -1)
2454         ret = sysinfo(SI_ARCHITECTURE_64, u.machine, sizeof u.machine);
2455 #  endif
2456 
2457     if (ret == -1)
2458         ret = uname(&u);
2459 
2460     // we could use detectUnixVersion() above, but we only need a field no other function does
2461     if (ret != -1) {
2462         // the use of QT_BUILD_INTERNAL here is simply to ensure all branches build
2463         // as we don't often build on some of the less common platforms
2464 #  if defined(Q_PROCESSOR_ARM) || defined(QT_BUILD_INTERNAL)
2465         if (strcmp(u.machine, "aarch64") == 0)
2466             return QStringLiteral("arm64");
2467         if (strncmp(u.machine, "armv", 4) == 0)
2468             return QStringLiteral("arm");
2469 #  endif
2470 #  if defined(Q_PROCESSOR_POWER) || defined(QT_BUILD_INTERNAL)
2471         // harmonize "powerpc" and "ppc" to "power"
2472         if (strncmp(u.machine, "ppc", 3) == 0)
2473             return QLatin1String("power") + QLatin1String(u.machine + 3);
2474         if (strncmp(u.machine, "powerpc", 7) == 0)
2475             return QLatin1String("power") + QLatin1String(u.machine + 7);
2476         if (strcmp(u.machine, "Power Macintosh") == 0)
2477             return QLatin1String("power");
2478 #  endif
2479 #  if defined(Q_PROCESSOR_SPARC) || defined(QT_BUILD_INTERNAL)
2480         // Solaris sysinfo(2) (above) uses "sparcv9", but uname -m says "sun4u";
2481         // Linux says "sparc64"
2482         if (strcmp(u.machine, "sun4u") == 0 || strcmp(u.machine, "sparc64") == 0)
2483             return QStringLiteral("sparcv9");
2484         if (strcmp(u.machine, "sparc32") == 0)
2485             return QStringLiteral("sparc");
2486 #  endif
2487 #  if defined(Q_PROCESSOR_X86) || defined(QT_BUILD_INTERNAL)
2488         // harmonize all "i?86" to "i386"
2489         if (strlen(u.machine) == 4 && u.machine[0] == 'i'
2490                 && u.machine[2] == '8' && u.machine[3] == '6')
2491             return QStringLiteral("i386");
2492         if (strcmp(u.machine, "amd64") == 0) // Solaris
2493             return QStringLiteral("x86_64");
2494 #  endif
2495         return QString::fromLatin1(u.machine);
2496     }
2497 #endif
2498     return buildCpuArchitecture();
2499 }
2500 
2501 /*!
2502     \since 5.4
2503 
2504     Returns the full architecture string that Qt was compiled for. This string
2505     is useful for identifying different, incompatible builds. For example, it
2506     can be used as an identifier to request an upgrade package from a server.
2507 
2508     The values returned from this function are kept stable as follows: the
2509     mandatory components of the result will not change in future versions of
2510     Qt, but optional suffixes may be added.
2511 
2512     The returned value is composed of three or more parts, separated by dashes
2513     ("-"). They are:
2514 
2515     \table
2516     \header \li Component           \li Value
2517     \row    \li CPU Architecture    \li The same as QSysInfo::buildCpuArchitecture(), such as "arm", "i386", "mips" or "x86_64"
2518     \row    \li Endianness          \li "little_endian" or "big_endian"
2519     \row    \li Word size           \li Whether it's a 32- or 64-bit application. Possible values are:
2520                                         "llp64" (Windows 64-bit), "lp64" (Unix 64-bit), "ilp32" (32-bit)
2521     \row    \li (Optional) ABI      \li Zero or more components identifying different ABIs possible in this architecture.
2522                                         Currently, Qt has optional ABI components for ARM and MIPS processors: one
2523                                         component is the main ABI (such as "eabi", "o32", "n32", "o64"); another is
2524                                         whether the calling convention is using hardware floating point registers ("hardfloat"
2525                                         is present).
2526 
2527                                         Additionally, if Qt was configured with \c{-qreal float}, the ABI option tag "qreal_float"
2528                                         will be present. If Qt was configured with another type as qreal, that type is present after
2529                                         "qreal_", with all characters other than letters and digits escaped by an underscore, followed
2530                                         by two hex digits. For example, \c{-qreal long double} becomes "qreal_long_20double".
2531     \endtable
2532 
2533     \sa QSysInfo::buildCpuArchitecture()
2534 */
2535 QString QSysInfo::buildAbi()
2536 {
2537 #ifdef Q_COMPILER_UNICODE_STRINGS
2538     // ARCH_FULL is a concatenation of strings (incl. ARCH_PROCESSOR), which breaks
2539     // QStringLiteral on MSVC. Since the concatenation behavior we want is specified
2540     // the same C++11 paper as the Unicode strings, we'll use that macro and hope
2541     // that Microsoft implements the new behavior when they add support for Unicode strings.
2542     return QStringLiteral(ARCH_FULL);
2543 #else
2544     return QLatin1String(ARCH_FULL);
2545 #endif
2546 }
2547 
2548 static QString unknownText()
2549 {
2550     return QStringLiteral("unknown");
2551 }
2552 
2553 /*!
2554     \since 5.4
2555 
2556     Returns the type of the operating system kernel Qt was compiled for. It's
2557     also the kernel the application is running on, unless the host operating
2558     system is running a form of compatibility or virtualization layer.
2559 
2560     Values returned by this function are stable and will not change over time,
2561     so applications can rely on the returned value as an identifier, except
2562     that new OS kernel types may be added over time.
2563 
2564     On Windows, this function returns the type of Windows kernel, like "wince"
2565     or "winnt". On Unix systems, it returns the same as the output of \c{uname
2566     -s} (lowercased).
2567 
2568     Note that this function may return surprising values: it returns "linux"
2569     for all operating systems running Linux (including Android), "qnx" for all
2570     operating systems running QNX, "freebsd" for
2571     Debian/kFreeBSD, and "darwin" for OS X and iOS. For information on the type
2572     of product the application is running on, see productType().
2573 
2574     \sa QFileSelector, kernelVersion(), productType(), productVersion(), prettyProductName()
2575 */
2576 QString QSysInfo::kernelType()
2577 {
2578 #if defined(Q_OS_WIN)
2579     return QStringLiteral("winnt");
2580 #elif defined(Q_OS_UNIX)
2581     struct utsname u;
2582     if (uname(&u) == 0)
2583         return QString::fromLatin1(u.sysname).toLower();
2584 #endif
2585     return unknownText();
2586 }
2587 
2588 /*!
2589     \since 5.4
2590 
2591     Returns the release version of the operating system kernel. On Windows, it
2592     returns the version of the NT kernel. On Unix systems, including
2593     Android and OS X, it returns the same as the \c{uname -r}
2594     command would return.
2595 
2596     If the version could not be determined, this function may return an empty
2597     string.
2598 
2599     \sa kernelType(), productType(), productVersion(), prettyProductName()
2600 */
2601 QString QSysInfo::kernelVersion()
2602 {
2603 #ifdef Q_OS_WIN
2604     const OSVERSIONINFOEX osver = winOsVersion();
2605     return QString::number(int(osver.dwMajorVersion)) + QLatin1Char('.') + QString::number(int(osver.dwMinorVersion))
2606             + QLatin1Char('.') + QString::number(int(osver.dwBuildNumber));
2607 #else
2608     struct utsname u;
2609     if (uname(&u) == 0)
2610         return QString::fromLatin1(u.release);
2611     return QString();
2612 #endif
2613 }
2614 
2615 
2616 /*!
2617     \since 5.4
2618 
2619     Returns the product name of the operating system this application is
2620     running in. If the application is running on some sort of emulation or
2621     virtualization layer (such as WINE on a Unix system), this function will
2622     inspect the emulation / virtualization layer.
2623 
2624     Values returned by this function are stable and will not change over time,
2625     so applications can rely on the returned value as an identifier, except
2626     that new OS types may be added over time.
2627 
2628     \b{Linux and Android note}: this function returns "android" for Linux
2629     systems running Android userspace, notably when using the Bionic library.
2630     For all other Linux systems, regardless of C library being used, it tries
2631     to determine the distribution name and returns that. If determining the
2632     distribution name failed, it returns "unknown".
2633 
2634     \b{Darwin, macOS, iOS and tvOS note}: this function returns "macos" for macOS
2635     systems, "ios" for iOS systems, "tvos" for tvOS systems and "darwin" in case
2636     the system could not be determined.
2637 
2638     \b{OS X note}: this function returns "osx" for versions of macOS prior to 10.12.
2639 
2640     \b{FreeBSD note}: this function returns "debian" for Debian/kFreeBSD and
2641     "unknown" otherwise.
2642 
2643     \b{Windows note}: this function returns "winphone" for builds for Windows
2644     Phone, "winrt" for WinRT builds and "windows" for normal desktop builds.
2645 
2646     For other Unix-type systems, this function usually returns "unknown".
2647 
2648     \sa QFileSelector, kernelType(), kernelVersion(), productVersion(), prettyProductName()
2649 */
2650 QString QSysInfo::productType()
2651 {
2652     // similar, but not identical to QFileSelectorPrivate::platformSelectors
2653 #if defined(Q_OS_WINPHONE)
2654     return QStringLiteral("winphone");
2655 #elif defined(Q_OS_WINRT)
2656     return QStringLiteral("winrt");
2657 #elif defined(Q_OS_WIN)
2658     return QStringLiteral("windows");
2659 
2660 #elif defined(Q_OS_QNX)
2661     return QStringLiteral("qnx");
2662 
2663 #elif defined(Q_OS_ANDROID)
2664     return QStringLiteral("android");
2665 
2666 #elif defined(Q_OS_IOS)
2667     return QStringLiteral("ios");
2668 #elif defined(Q_OS_TVOS)
2669     return QStringLiteral("tvos");
2670 #elif defined(Q_OS_MACOS)
2671     const QAppleOperatingSystemVersion version = qt_apple_os_version();
2672     if (version.major == 10 && version.minor < 12)
2673         return QStringLiteral("osx");
2674     return QStringLiteral("macos");
2675 #elif defined(Q_OS_DARWIN)
2676     return QStringLiteral("darwin");
2677 
2678 #elif defined(USE_ETC_OS_RELEASE) // Q_OS_UNIX
2679     QUnixOSVersion unixOsVersion;
2680     findUnixOsVersion(unixOsVersion);
2681     if (!unixOsVersion.productType.isEmpty())
2682         return unixOsVersion.productType;
2683 #endif
2684     return unknownText();
2685 }
2686 
2687 /*!
2688     \since 5.4
2689 
2690     Returns the product version of the operating system in string form. If the
2691     version could not be determined, this function returns "unknown".
2692 
2693     It will return the Android, iOS, OS X, Windows full-product
2694     versions on those systems. In particular, on OS X, iOS and Windows, the
2695     returned string is similar to the macVersion() or windowsVersion() enums.
2696 
2697     On Linux systems, it will try to determine the distribution version and will
2698     return that. This is also done on Debian/kFreeBSD, so this function will
2699     return Debian version in that case.
2700 
2701     In all other Unix-type systems, this function always returns "unknown".
2702 
2703     \note The version string returned from this function is not guaranteed to
2704     be orderable. On Linux, the version of
2705     the distribution may jump unexpectedly, please refer to the distribution's
2706     documentation for versioning practices.
2707 
2708     \sa kernelType(), kernelVersion(), productType(), prettyProductName()
2709 */
2710 QString QSysInfo::productVersion()
2711 {
2712 #if defined(Q_OS_MAC)
2713     const QAppleOperatingSystemVersion version = qt_apple_os_version();
2714     return QString::number(version.major) + QLatin1Char('.') + QString::number(version.minor);
2715 #elif defined(Q_OS_WIN)
2716     const char *version = winVer_helper();
2717     if (version) {
2718         const QLatin1Char spaceChar(' ');
2719         return QString::fromLatin1(version).remove(spaceChar).toLower() + winSp_helper().remove(spaceChar).toLower();
2720     }
2721     // fall through
2722 
2723 // Android should not fall through to the Unix code
2724 #elif defined(Q_OS_ANDROID)
2725     return QJNIObjectPrivate::getStaticObjectField("android/os/Build$VERSION", "RELEASE", "Ljava/lang/String;").toString();
2726 #elif defined(USE_ETC_OS_RELEASE) // Q_OS_UNIX
2727     QUnixOSVersion unixOsVersion;
2728     findUnixOsVersion(unixOsVersion);
2729     if (!unixOsVersion.productVersion.isEmpty())
2730         return unixOsVersion.productVersion;
2731 #endif
2732 
2733     // fallback
2734     return unknownText();
2735 }
2736 
2737 /*!
2738     \since 5.4
2739 
2740     Returns a prettier form of productType() and productVersion(), containing
2741     other tokens like the operating system type, codenames and other
2742     information. The result of this function is suitable for displaying to the
2743     user, but not for long-term storage, as the string may change with updates
2744     to Qt.
2745 
2746     If productType() is "unknown", this function will instead use the
2747     kernelType() and kernelVersion() functions.
2748 
2749     \sa kernelType(), kernelVersion(), productType(), productVersion()
2750 */
2751 QString QSysInfo::prettyProductName()
2752 {
2753 #if defined(Q_OS_IOS)
2754     return QLatin1String("iOS ") + productVersion();
2755 #elif defined(Q_OS_TVOS)
2756     return QLatin1String("tvOS ") + productVersion();
2757 #elif defined(Q_OS_MACOS)
2758     const QAppleOperatingSystemVersion version = qt_apple_os_version();
2759     const char *name = osxVer_helper(version);
2760     if (name) {
2761         return (version.major == 10 && version.minor < 12
2762                 ? QLatin1String("OS X ")
2763                 : QLatin1String("macOS "))
2764             + QLatin1String(name)
2765             + QLatin1String(" (") + QString::number(version.major)
2766             + QLatin1Char('.') + QString::number(version.minor)
2767             + QLatin1Char(')');
2768     } else {
2769         return QLatin1String("macOS ")
2770             + QString::number(version.major) + QLatin1Char('.')
2771             + QString::number(version.minor);
2772     }
2773 #elif defined(Q_OS_WINPHONE)
2774     return QLatin1String("Windows Phone ") + QLatin1String(winVer_helper());
2775 #elif defined(Q_OS_WIN)
2776     const char *name = winVer_helper();
2777     const OSVERSIONINFOEX osver = winOsVersion();
2778     if (name)
2779         return QLatin1String("Windows ") + QLatin1String(name) + winSp_helper()
2780             + QLatin1String(" (") + QString::number(osver.dwMajorVersion)
2781             + QLatin1Char('.') + QString::number(osver.dwMinorVersion)
2782             + QLatin1Char(')');
2783     else
2784         return QLatin1String("Windows ")
2785             + QString::number(osver.dwMajorVersion) + QLatin1Char('.')
2786             + QString::number(osver.dwMinorVersion);
2787 #elif defined(Q_OS_ANDROID)
2788     return QLatin1String("Android ") + productVersion();
2789 #elif defined(Q_OS_HAIKU)
2790     return QLatin1String("Haiku ") + productVersion();
2791 #elif defined(Q_OS_UNIX)
2792 #  ifdef USE_ETC_OS_RELEASE
2793     QUnixOSVersion unixOsVersion;
2794     findUnixOsVersion(unixOsVersion);
2795     if (!unixOsVersion.prettyName.isEmpty())
2796         return unixOsVersion.prettyName;
2797 #  endif
2798     struct utsname u;
2799     if (uname(&u) == 0)
2800         return QString::fromLatin1(u.sysname) + QLatin1Char(' ') + QString::fromLatin1(u.release);
2801 #endif
2802     return unknownText();
2803 }
2804 
2805 #ifndef QT_BOOTSTRAPPED
2806 /*!
2807     \since 5.6
2808 
2809     Returns this machine's host name, if one is configured. Note that hostnames
2810     are not guaranteed to be globally unique, especially if they were
2811     configured automatically.
2812 
2813     This function does not guarantee the returned host name is a Fully
2814     Qualified Domain Name (FQDN). For that, use QHostInfo to resolve the
2815     returned name to an FQDN.
2816 
2817     This function returns the same as QHostInfo::localHostName().
2818 
2819     \sa QHostInfo::localDomainName
2820  */
2821 QString QSysInfo::machineHostName()
2822 {
2823 #if defined(Q_OS_LINUX)
2824     // gethostname(3) on Linux just calls uname(2), so do it ourselves
2825     // and avoid a memcpy
2826     struct utsname u;
2827     if (uname(&u) == 0)
2828         return QString::fromLocal8Bit(u.nodename);
2829 #else
2830 #  ifdef Q_OS_WIN
2831     // Important: QtNetwork depends on machineHostName() initializing ws2_32.dll
2832     winsockInit();
2833 #  endif
2834 
2835     char hostName[512];
2836     if (gethostname(hostName, sizeof(hostName)) == -1)
2837         return QString();
2838     hostName[sizeof(hostName) - 1] = '\0';
2839     return QString::fromLocal8Bit(hostName);
2840 #endif
2841     return QString();
2842 }
2843 #endif // QT_BOOTSTRAPPED
2844 
2845 /*!
2846     \macro void Q_ASSERT(bool test)
2847     \relates <QtGlobal>
2848 
2849     Prints a warning message containing the source code file name and
2850     line number if \a test is \c false.
2851 
2852     Q_ASSERT() is useful for testing pre- and post-conditions
2853     during development. It does nothing if \c QT_NO_DEBUG was defined
2854     during compilation.
2855 
2856     Example:
2857 
2858     \snippet code/src_corelib_global_qglobal.cpp 17
2859 
2860     If \c b is zero, the Q_ASSERT statement will output the following
2861     message using the qFatal() function:
2862 
2863     \snippet code/src_corelib_global_qglobal.cpp 18
2864 
2865     \sa Q_ASSERT_X(), qFatal(), {Debugging Techniques}
2866 */
2867 
2868 /*!
2869     \macro void Q_ASSERT_X(bool test, const char *where, const char *what)
2870     \relates <QtGlobal>
2871 
2872     Prints the message \a what together with the location \a where,
2873     the source file name and line number if \a test is \c false.
2874 
2875     Q_ASSERT_X is useful for testing pre- and post-conditions during
2876     development. It does nothing if \c QT_NO_DEBUG was defined during
2877     compilation.
2878 
2879     Example:
2880 
2881     \snippet code/src_corelib_global_qglobal.cpp 19
2882 
2883     If \c b is zero, the Q_ASSERT_X statement will output the following
2884     message using the qFatal() function:
2885 
2886     \snippet code/src_corelib_global_qglobal.cpp 20
2887 
2888     \sa Q_ASSERT(), qFatal(), {Debugging Techniques}
2889 */
2890 
2891 /*!
2892     \macro void Q_ASSUME(bool expr)
2893     \relates <QtGlobal>
2894     \since 5.0
2895 
2896     Causes the compiler to assume that \a expr is \c true. This macro is useful
2897     for improving code generation, by providing the compiler with hints about
2898     conditions that it would not otherwise know about. However, there is no
2899     guarantee that the compiler will actually use those hints.
2900 
2901     This macro could be considered a "lighter" version of \l{Q_ASSERT()}. While
2902     Q_ASSERT will abort the program's execution if the condition is \c false,
2903     Q_ASSUME will tell the compiler not to generate code for those conditions.
2904     Therefore, it is important that the assumptions always hold, otherwise
2905     undefined behaviour may occur.
2906 
2907     If \a expr is a constantly \c false condition, Q_ASSUME will tell the compiler
2908     that the current code execution cannot be reached. That is, Q_ASSUME(false)
2909     is equivalent to Q_UNREACHABLE().
2910 
2911     In debug builds the condition is enforced by an assert to facilitate debugging.
2912 
2913     \note Q_LIKELY() tells the compiler that the expression is likely, but not
2914     the only possibility. Q_ASSUME tells the compiler that it is the only
2915     possibility.
2916 
2917     \sa Q_ASSERT(), Q_UNREACHABLE(), Q_LIKELY()
2918 */
2919 
2920 /*!
2921     \macro void Q_UNREACHABLE()
2922     \relates <QtGlobal>
2923     \since 5.0
2924 
2925     Tells the compiler that the current point cannot be reached by any
2926     execution, so it may optimize any code paths leading here as dead code, as
2927     well as code continuing from here.
2928 
2929     This macro is useful to mark impossible conditions. For example, given the
2930     following enum:
2931 
2932     \snippet code/src_corelib_global_qglobal.cpp qunreachable-enum
2933 
2934     One can write a switch table like so:
2935 
2936     \snippet code/src_corelib_global_qglobal.cpp qunreachable-switch
2937 
2938     The advantage of inserting Q_UNREACHABLE() at that point is that the
2939     compiler is told not to generate code for a shape variable containing that
2940     value. If the macro is missing, the compiler will still generate the
2941     necessary comparisons for that value. If the case label were removed, some
2942     compilers could produce a warning that some enum values were not checked.
2943 
2944     By using this macro in impossible conditions, code coverage may be improved
2945     as dead code paths may be eliminated.
2946 
2947     In debug builds the condition is enforced by an assert to facilitate debugging.
2948 
2949     \sa Q_ASSERT(), Q_ASSUME(), qFatal()
2950 */
2951 
2952 /*!
2953     \macro void Q_CHECK_PTR(void *pointer)
2954     \relates <QtGlobal>
2955 
2956     If \a pointer is 0, prints a message containing the source
2957     code's file name and line number, saying that the program ran out
2958     of memory and aborts program execution. It throws \c std::bad_alloc instead
2959     if exceptions are enabled.
2960 
2961     Q_CHECK_PTR does nothing if \c QT_NO_DEBUG and \c QT_NO_EXCEPTIONS were
2962     defined during compilation. Therefore you must not use Q_CHECK_PTR to check
2963     for successful memory allocations because the check will be disabled in
2964     some cases.
2965 
2966     Example:
2967 
2968     \snippet code/src_corelib_global_qglobal.cpp 21
2969 
2970     \sa qWarning(), {Debugging Techniques}
2971 */
2972 
2973 /*!
2974     \fn T *q_check_ptr(T *pointer)
2975     \relates <QtGlobal>
2976 
2977     Uses Q_CHECK_PTR on \a pointer, then returns \a pointer.
2978 
2979     This can be used as an inline version of Q_CHECK_PTR.
2980 */
2981 
2982 /*!
2983     \macro const char* Q_FUNC_INFO()
2984     \relates <QtGlobal>
2985 
2986     Expands to a string that describe the function the macro resides in. How this string looks
2987     more specifically is compiler dependent. With GNU GCC it is typically the function signature,
2988     while with other compilers it might be the line and column number.
2989 
2990     Q_FUNC_INFO can be conveniently used with qDebug(). For example, this function:
2991 
2992     \snippet code/src_corelib_global_qglobal.cpp 22
2993 
2994     when instantiated with the integer type, will with the GCC compiler produce:
2995 
2996     \tt{const TInputType& myMin(const TInputType&, const TInputType&) [with TInputType = int] was called with value1: 3 value2: 4}
2997 
2998     If this macro is used outside a function, the behavior is undefined.
2999  */
3000 
3001 /*
3002   The Q_CHECK_PTR macro calls this function if an allocation check
3003   fails.
3004 */
3005 void qt_check_pointer(const char *n, int l)
3006 {
3007     qFatal("In file %s, line %d: Out of memory", n, l);
3008 }
3009 
3010 /*
3011    \internal
3012    Allows you to throw an exception without including <new>
3013    Called internally from Q_CHECK_PTR on certain OS combinations
3014 */
3015 void qBadAlloc()
3016 {
3017     QT_THROW(std::bad_alloc());
3018 }
3019 
3020 #ifndef QT_NO_EXCEPTIONS
3021 /*
3022    \internal
3023    Allows you to call std::terminate() without including <exception>.
3024    Called internally from QT_TERMINATE_ON_EXCEPTION
3025 */
3026 Q_NORETURN void qTerminate() Q_DECL_NOTHROW
3027 {
3028     std::terminate();
3029 }
3030 #endif
3031 
3032 /*
3033   The Q_ASSERT macro calls this function when the test fails.
3034 */
3035 void qt_assert(const char *assertion, const char *file, int line) Q_DECL_NOTHROW
3036 {
3037     qFatal("ASSERT: \"%s\" in file %s, line %d", assertion, file, line);
3038 }
3039 
3040 /*
3041   The Q_ASSERT_X macro calls this function when the test fails.
3042 */
3043 void qt_assert_x(const char *where, const char *what, const char *file, int line) Q_DECL_NOTHROW
3044 {
3045     qFatal("ASSERT failure in %s: \"%s\", file %s, line %d", where, what, file, line);
3046 }
3047 
3048 
3049 /*
3050     Dijkstra's bisection algorithm to find the square root of an integer.
3051     Deliberately not exported as part of the Qt API, but used in both
3052     qsimplerichtext.cpp and qgfxraster_qws.cpp
3053 */
3054 Q_CORE_EXPORT unsigned int qt_int_sqrt(unsigned int n)
3055 {
3056     // n must be in the range 0...UINT_MAX/2-1
3057     if (n >= (UINT_MAX>>2)) {
3058         unsigned int r = 2 * qt_int_sqrt(n / 4);
3059         unsigned int r2 = r + 1;
3060         return (n >= r2 * r2) ? r2 : r;
3061     }
3062     uint h, p= 0, q= 1, r= n;
3063     while (q <= n)
3064         q <<= 2;
3065     while (q != 1) {
3066         q >>= 2;
3067         h= p + q;
3068         p >>= 1;
3069         if (r >= h) {
3070             p += q;
3071             r -= h;
3072         }
3073     }
3074     return p;
3075 }
3076 
3077 void *qMemCopy(void *dest, const void *src, size_t n) { return memcpy(dest, src, n); }
3078 void *qMemSet(void *dest, int c, size_t n) { return memset(dest, c, n); }
3079 
3080 #if !defined(Q_OS_WIN) && !defined(QT_NO_THREAD) && !defined(Q_OS_INTEGRITY) && !defined(Q_OS_QNX) && \
3081     defined(_POSIX_THREAD_SAFE_FUNCTIONS) && _POSIX_VERSION >= 200112L
3082 namespace {
3083     // There are two incompatible versions of strerror_r:
3084     // a) the XSI/POSIX.1 version, which returns an int,
3085     //    indicating success or not
3086     // b) the GNU version, which returns a char*, which may or may not
3087     //    be the beginning of the buffer we used
3088     // The GNU libc manpage for strerror_r says you should use the XSI
3089     // version in portable code. However, it's impossible to do that if
3090     // _GNU_SOURCE is defined so we use C++ overloading to decide what to do
3091     // depending on the return type
3092     static inline Q_DECL_UNUSED QString fromstrerror_helper(int, const QByteArray &buf)
3093     {
3094         return QString::fromLocal8Bit(buf.constData());
3095     }
3096     static inline Q_DECL_UNUSED QString fromstrerror_helper(const char *str, const QByteArray &)
3097     {
3098         return QString::fromLocal8Bit(str);
3099     }
3100 }
3101 #endif
3102 
3103 QString qt_error_string(int errorCode)
3104 {
3105     const char *s = 0;
3106     QString ret;
3107     if (errorCode == -1) {
3108 #if defined(Q_OS_WIN)
3109         errorCode = GetLastError();
3110 #else
3111         errorCode = errno;
3112 #endif
3113     }
3114     switch (errorCode) {
3115     case 0:
3116         break;
3117     case EACCES:
3118         s = QT_TRANSLATE_NOOP("QIODevice", "Permission denied");
3119         break;
3120     case EMFILE:
3121         s = QT_TRANSLATE_NOOP("QIODevice", "Too many open files");
3122         break;
3123     case ENOENT:
3124         s = QT_TRANSLATE_NOOP("QIODevice", "No such file or directory");
3125         break;
3126     case ENOSPC:
3127         s = QT_TRANSLATE_NOOP("QIODevice", "No space left on device");
3128         break;
3129     default: {
3130 #if defined(Q_OS_WIN)
3131         // Retrieve the system error message for the last-error code.
3132 #  ifndef Q_OS_WINRT
3133         wchar_t *string = 0;
3134         FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_ALLOCATE_BUFFER,
3135                       NULL,
3136                       errorCode,
3137                       MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
3138                       (LPWSTR)&string,
3139                       0,
3140                       NULL);
3141         ret = QString::fromWCharArray(string);
3142         LocalFree((HLOCAL)string);
3143 #  else // !Q_OS_WINRT
3144         __declspec(thread) static wchar_t errorString[4096];
3145         FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
3146                       NULL,
3147                       errorCode,
3148                       MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
3149                       errorString,
3150                       ARRAYSIZE(errorString),
3151                       NULL);
3152         ret = QString::fromWCharArray(errorString);
3153 #  endif // Q_OS_WINRT
3154 
3155         if (ret.isEmpty() && errorCode == ERROR_MOD_NOT_FOUND)
3156             ret = QString::fromLatin1("The specified module could not be found.");
3157 #elif !defined(QT_NO_THREAD) && defined(_POSIX_THREAD_SAFE_FUNCTIONS) && _POSIX_VERSION >= 200112L && !defined(Q_OS_INTEGRITY) && !defined(Q_OS_QNX)
3158         QByteArray buf(1024, '\0');
3159         ret = fromstrerror_helper(strerror_r(errorCode, buf.data(), buf.size()), buf);
3160 #else
3161         ret = QString::fromLocal8Bit(strerror(errorCode));
3162 #endif
3163     break; }
3164     }
3165     if (s)
3166         // ######## this breaks moc build currently
3167 //         ret = QCoreApplication::translate("QIODevice", s);
3168         ret = QString::fromLatin1(s);
3169     return ret.trimmed();
3170 }
3171 
3172 // In the C runtime on all platforms access to the environment is not thread-safe. We
3173 // add thread-safety for the Qt wrappers.
3174 static QBasicMutex environmentMutex;
3175 
3176 #if defined(Q_OS_WINRT)
3177 #  define USE_FAKE_ENVIRONMENT
3178 #endif
3179 //#define USE_FAKE_ENVIRONMENT
3180 
3181 #ifdef USE_FAKE_ENVIRONMENT
3182 namespace {
3183 class Environment
3184 {
3185 public:
3186     struct Entry {
3187         QString value;
3188         QVarLengthArray<char, 64 - sizeof(QString) - sizeof(QVarLengthArray<char, 1>)> name;
3189     };
3190     typedef QVector<Entry>::iterator iterator;
3191     iterator end() Q_DECL_NOTHROW { return entries.end(); }
3192 
3193     iterator find(const char *name) Q_DECL_NOTHROW
3194     {
3195         size_t len = strlen(name);
3196         iterator it = entries.begin();
3197         for ( ; it != end(); ++it) {
3198             if (len == size_t(it->name.size()) - 1 &&
3199                     memcmp(name, it->name.constData(), len) == 0)
3200                 return it;
3201         }
3202         return end();
3203     }
3204 
3205     iterator append()
3206     {
3207         entries.resize(entries.size() + 1);
3208         return end() - 1;
3209     }
3210 
3211     QVector<Entry> entries;
3212 };
3213 } // anonymous namespace
3214 Q_GLOBAL_STATIC(Environment, fakeEnvironment)
3215 #endif // USE_FAKE_ENVIRONMENT
3216 
3217 // getenv is declared as deprecated in VS2005. This function
3218 // makes use of the new secure getenv function.
3219 /*!
3220     \relates <QtGlobal>
3221 
3222     Returns the value of the environment variable with name \a
3223     varName. To get the variable string, use QByteArray::constData().
3224 
3225     \note qgetenv() was introduced because getenv() from the standard
3226     C library was deprecated in VC2005 (and later versions). qgetenv()
3227     uses the new replacement function in VC, and calls the standard C
3228     library's implementation on all other platforms.
3229 
3230     \sa qputenv(), qEnvironmentVariableIsSet(), qEnvironmentVariableIsEmpty()
3231 */
3232 QByteArray qgetenv(const char *varName)
3233 {
3234     QMutexLocker locker(&environmentMutex);
3235 #if defined(USE_FAKE_ENVIRONMENT)
3236     Environment::iterator it = fakeEnvironment->find(varName);
3237 
3238     // qunsetenv simply clears the variable name, without removing the entry,
3239     // so check if varName was empty too
3240     return (it == fakeEnvironment->end() || it->name.isEmpty()) ? QByteArray() : it->value.toLocal8Bit();
3241 #elif defined(_MSC_VER) && _MSC_VER >= 1400
3242     size_t requiredSize = 0;
3243     QByteArray buffer;
3244     getenv_s(&requiredSize, 0, 0, varName);
3245     if (requiredSize == 0)
3246         return buffer;
3247     buffer.resize(int(requiredSize));
3248     getenv_s(&requiredSize, buffer.data(), requiredSize, varName);
3249     // requiredSize includes the terminating null, which we don't want.
3250     Q_ASSERT(buffer.endsWith('\0'));
3251     buffer.chop(1);
3252     return buffer;
3253 #else
3254     return QByteArray(::getenv(varName));
3255 #endif
3256 }
3257 
3258 /*!
3259     \relates <QtGlobal>
3260     \since 5.1
3261 
3262     Returns whether the environment variable \a varName is empty.
3263 
3264     Equivalent to
3265     \code
3266     qgetenv(varName).isEmpty()
3267     \endcode
3268     except that it's potentially much faster, and can't throw exceptions.
3269 
3270     \sa qgetenv(), qEnvironmentVariableIsSet()
3271 */
3272 bool qEnvironmentVariableIsEmpty(const char *varName) Q_DECL_NOEXCEPT
3273 {
3274     QMutexLocker locker(&environmentMutex);
3275 #if defined(USE_FAKE_ENVIRONMENT)
3276     Environment::iterator it = fakeEnvironment->find(varName);
3277     return it == fakeEnvironment->end() || it->value.isEmpty();
3278 #elif defined(_MSC_VER) && _MSC_VER >= 1400
3279     // we provide a buffer that can only hold the empty string, so
3280     // when the env.var isn't empty, we'll get an ERANGE error (buffer
3281     // too small):
3282     size_t dummy;
3283     char buffer = '\0';
3284     return getenv_s(&dummy, &buffer, 1, varName) != ERANGE;
3285 #else
3286     const char * const value = ::getenv(varName);
3287     return !value || !*value;
3288 #endif
3289 }
3290 
3291 /*!
3292     \relates <QtGlobal>
3293     \since 5.5
3294 
3295     Returns the numerical value of the environment variable \a varName.
3296     If \a ok is not null, sets \c{*ok} to \c true or \c false depending
3297     on the success of the conversion.
3298 
3299     Equivalent to
3300     \code
3301     qgetenv(varName).toInt()
3302     \endcode
3303     except that it's much faster, and can't throw exceptions.
3304 
3305     \sa qgetenv(), qEnvironmentVariableIsSet()
3306 */
3307 int qEnvironmentVariableIntValue(const char *varName, bool *ok) Q_DECL_NOEXCEPT
3308 {
3309     QMutexLocker locker(&environmentMutex);
3310 #if defined(USE_FAKE_ENVIRONMENT) || defined(Q_CC_MSVC)
3311     // we provide a buffer that can hold any int value:
3312     static const int NumBinaryDigitsPerOctalDigit = 3;
3313     static const int MaxDigitsForOctalInt =
3314         (std::numeric_limits<uint>::digits + NumBinaryDigitsPerOctalDigit - 1) / NumBinaryDigitsPerOctalDigit;
3315     char buffer[MaxDigitsForOctalInt + 2]; // +1 for NUL +1 for optional '-'
3316 #endif
3317 #if defined(USE_FAKE_ENVIRONMENT)
3318     Environment::iterator it = fakeEnvironment->find(varName);
3319     if (it == fakeEnvironment->end() || it->value.size() >= int(sizeof(buffer))) {
3320         if (ok)
3321             *ok = false;
3322         return 0;
3323     }
3324 
3325     // cheap, exception-free conversion to Latin 1
3326     for (int i = 0; i < it->value.size(); ++i) {
3327         ushort uc = it->value.at(i).unicode();
3328         buffer[i] = (uc > 0x80) ? '?' : char(uc);
3329     }
3330     buffer[it->value.size()] = '\0';
3331 #elif defined(_MSC_VER) && _MSC_VER >= 1400
3332     size_t dummy;
3333     if (getenv_s(&dummy, buffer, sizeof buffer, varName) != 0) {
3334         if (ok)
3335             *ok = false;
3336         return 0;
3337     }
3338 #else
3339     const char * const buffer = ::getenv(varName);
3340     if (!buffer || !*buffer) {
3341         if (ok)
3342             *ok = false;
3343         return 0;
3344     }
3345 #endif
3346     bool ok_ = true;
3347     const qlonglong value = qstrtoll(buffer, Q_NULLPTR, 0, &ok_);
3348     if (int(value) != value) { // this is the check in QByteArray::toInt(), keep it in sync
3349         if (ok)
3350             *ok = false;
3351         return 0;
3352     } else if (ok) {
3353         *ok = ok_;
3354     }
3355     return int(value);
3356 }
3357 
3358 /*!
3359     \relates <QtGlobal>
3360     \since 5.1
3361 
3362     Returns whether the environment variable \a varName is set.
3363 
3364     Equivalent to
3365     \code
3366     !qgetenv(varName).isNull()
3367     \endcode
3368     except that it's potentially much faster, and can't throw exceptions.
3369 
3370     \sa qgetenv(), qEnvironmentVariableIsEmpty()
3371 */
3372 bool qEnvironmentVariableIsSet(const char *varName) Q_DECL_NOEXCEPT
3373 {
3374     QMutexLocker locker(&environmentMutex);
3375 #if defined(USE_FAKE_ENVIRONMENT)
3376     Environment::iterator it = fakeEnvironment->find(varName);
3377     return varName && *varName && it != fakeEnvironment->end() && !it->name.isEmpty();
3378 #elif defined(_MSC_VER) && _MSC_VER >= 1400
3379     size_t requiredSize = 0;
3380     (void)getenv_s(&requiredSize, 0, 0, varName);
3381     return requiredSize != 0;
3382 #else
3383     return ::getenv(varName) != 0;
3384 #endif
3385 }
3386 
3387 /*!
3388     \relates <QtGlobal>
3389 
3390     This function sets the \a value of the environment variable named
3391     \a varName. It will create the variable if it does not exist. It
3392     returns false if the variable could not be set.
3393 
3394     Calling qputenv with an empty value removes the environment variable on
3395     Windows, and makes it set (but empty) on Unix. Prefer using qunsetenv()
3396     for fully portable behavior.
3397 
3398     \note qputenv() was introduced because putenv() from the standard
3399     C library was deprecated in VC2005 (and later versions). qputenv()
3400     uses the replacement function in VC, and calls the standard C
3401     library's implementation on all other platforms.
3402 
3403     \sa qgetenv()
3404 */
3405 bool qputenv(const char *varName, const QByteArray& value)
3406 {
3407 #if defined(USE_FAKE_ENVIRONMENT)
3408     if (!varName || !*varName)
3409         return false;
3410     if (value.isEmpty())
3411         return qunsetenv(varName);
3412 
3413     QMutexLocker locker(&environmentMutex);
3414     Environment::iterator it = fakeEnvironment->find(varName);
3415     if (it == fakeEnvironment->end()) {
3416         // find any empty slot
3417         it = fakeEnvironment->find("");
3418         if (it == fakeEnvironment->end())
3419             it = fakeEnvironment->append();
3420         it->name.resize(int(strlen(varName)) + 1);
3421         strcpy(it->name.data(), varName);
3422     }
3423 
3424 #  ifdef Q_OS_WIN
3425     // use the reverse of the function that qgetenv has to use
3426     QString &buffer = it->value;
3427     buffer = QString(value.length(), Qt::Uninitialized);
3428     int len;
3429     forever {
3430         len = MultiByteToWideChar(CP_ACP, MB_ERR_INVALID_CHARS,
3431                                   value.constData(), value.length(),
3432                                   reinterpret_cast<wchar_t *>(buffer.data()),
3433                                   buffer.length());
3434         if (len != 0)
3435             break;
3436 
3437         DWORD err = GetLastError();
3438         if (err == ERROR_NO_UNICODE_TRANSLATION) {
3439             it->name.clear();
3440             buffer.clear();
3441             return false;               // decode failure
3442         }
3443         if (Q_UNLIKELY(err != ERROR_INSUFFICIENT_BUFFER)) {
3444             // Can't use qFatal here because the logging will recurse
3445             fprintf(stderr, "qputenv: MultiByteToWideChar failed, error = %lu\n", err);
3446             std::abort();
3447         }
3448         // enlarge buffer
3449         buffer.resize(buffer.size() + value.length());
3450     }
3451     buffer.resize(len);
3452 #  else
3453     // Only for testing FakeEnvironment. This may deadlock!
3454     it->value = QString::fromLocal8Bit(value);
3455 #  endif
3456     return true;
3457 #elif defined(_MSC_VER) && _MSC_VER >= 1400
3458     QMutexLocker locker(&environmentMutex);
3459     return _putenv_s(varName, value.constData()) == 0;
3460 #elif (defined(_POSIX_VERSION) && (_POSIX_VERSION-0) >= 200112L) || defined(Q_OS_HAIKU)
3461     // POSIX.1-2001 has setenv
3462     QMutexLocker locker(&environmentMutex);
3463     return setenv(varName, value.constData(), true) == 0;
3464 #else
3465     QByteArray buffer(varName);
3466     buffer += '=';
3467     buffer += value;
3468     char* envVar = qstrdup(buffer.constData());
3469 
3470     QMutexLocker locker(&environmentMutex);
3471     int result = putenv(envVar);
3472     if (result != 0) // error. we have to delete the string.
3473         delete[] envVar;
3474     return result == 0;
3475 #endif
3476 }
3477 
3478 /*!
3479     \relates <QtGlobal>
3480 
3481     This function deletes the variable \a varName from the environment.
3482 
3483     Returns \c true on success.
3484 
3485     \since 5.1
3486 
3487     \sa qputenv(), qgetenv()
3488 */
3489 bool qunsetenv(const char *varName)
3490 {
3491     QMutexLocker locker(&environmentMutex);
3492 #if defined(USE_FAKE_ENVIRONMENT)
3493     Environment::iterator it = fakeEnvironment->find(varName);
3494     if (it != fakeEnvironment->end()) {
3495         it->name.clear();
3496         it->value.clear();
3497     }
3498     return true;
3499 #elif defined(_MSC_VER) && _MSC_VER >= 1400
3500     return _putenv_s(varName, "") == 0;
3501 #elif (defined(_POSIX_VERSION) && (_POSIX_VERSION-0) >= 200112L) || defined(Q_OS_BSD4) || defined(Q_OS_HAIKU)
3502     // POSIX.1-2001, BSD and Haiku have unsetenv
3503     return unsetenv(varName) == 0;
3504 #elif defined(Q_CC_MINGW)
3505     // On mingw, putenv("var=") removes "var" from the environment
3506     QByteArray buffer(varName);
3507     buffer += '=';
3508     return putenv(buffer.constData()) == 0;
3509 #else
3510     // Fallback to putenv("var=") which will insert an empty var into the
3511     // environment and leak it
3512     QByteArray buffer(varName);
3513     buffer += '=';
3514     char *envVar = qstrdup(buffer.constData());
3515     return putenv(envVar) == 0;
3516 #endif
3517 }
3518 
3519 #if defined(Q_OS_UNIX) && !defined(QT_NO_THREAD) && defined(_POSIX_THREAD_SAFE_FUNCTIONS) && (_POSIX_THREAD_SAFE_FUNCTIONS - 0 > 0)
3520 
3521 #  if defined(Q_OS_INTEGRITY) && defined(__GHS_VERSION_NUMBER) && (__GHS_VERSION_NUMBER < 500)
3522 // older versions of INTEGRITY used a long instead of a uint for the seed.
3523 typedef long SeedStorageType;
3524 #  else
3525 typedef uint SeedStorageType;
3526 #  endif
3527 
3528 typedef QThreadStorage<SeedStorageType *> SeedStorage;
3529 Q_GLOBAL_STATIC(SeedStorage, randTLS)  // Thread Local Storage for seed value
3530 
3531 #elif defined(Q_OS_ANDROID)
3532 typedef QThreadStorage<QJNIObjectPrivate> AndroidRandomStorage;
3533 Q_GLOBAL_STATIC(AndroidRandomStorage, randomTLS)
3534 #endif
3535 
3536 /*!
3537     \relates <QtGlobal>
3538     \since 4.2
3539 
3540     Thread-safe version of the standard C++ \c srand() function.
3541 
3542     Sets the argument \a seed to be used to generate a new random number sequence of
3543     pseudo random integers to be returned by qrand().
3544 
3545     The sequence of random numbers generated is deterministic per thread. For example,
3546     if two threads call qsrand(1) and subsequently calls qrand(), the threads will get
3547     the same random number sequence.
3548 
3549     \sa qrand()
3550 */
3551 void qsrand(uint seed)
3552 {
3553 #if defined(Q_OS_UNIX) && !defined(QT_NO_THREAD) && defined(_POSIX_THREAD_SAFE_FUNCTIONS) && (_POSIX_THREAD_SAFE_FUNCTIONS - 0 > 0)
3554     SeedStorage *seedStorage = randTLS();
3555     if (seedStorage) {
3556         SeedStorageType *pseed = seedStorage->localData();
3557         if (!pseed)
3558             seedStorage->setLocalData(pseed = new SeedStorageType);
3559         *pseed = seed;
3560     } else {
3561         //global static seed storage should always exist,
3562         //except after being deleted by QGlobalStaticDeleter.
3563         //But since it still can be called from destructor of another
3564         //global static object, fallback to srand(seed)
3565         srand(seed);
3566     }
3567 #elif defined(Q_OS_ANDROID)
3568     if (randomTLS->hasLocalData()) {
3569         randomTLS->localData().callMethod<void>("setSeed", "(J)V", jlong(seed));
3570         return;
3571     }
3572 
3573     QJNIObjectPrivate random("java/util/Random",
3574                              "(J)V",
3575                              jlong(seed));
3576     if (!random.isValid()) {
3577         srand(seed);
3578         return;
3579     }
3580 
3581     randomTLS->setLocalData(random);
3582 #else
3583     // On Windows srand() and rand() already use Thread-Local-Storage
3584     // to store the seed between calls
3585     // this is also valid for QT_NO_THREAD
3586     srand(seed);
3587 #endif
3588 }
3589 
3590 /*!
3591     \relates <QtGlobal>
3592     \since 4.2
3593 
3594     Thread-safe version of the standard C++ \c rand() function.
3595 
3596     Returns a value between 0 and \c RAND_MAX (defined in \c <cstdlib> and
3597     \c <stdlib.h>), the next number in the current sequence of pseudo-random
3598     integers.
3599 
3600     Use \c qsrand() to initialize the pseudo-random number generator with
3601     a seed value.
3602 
3603     \sa qsrand()
3604 */
3605 int qrand()
3606 {
3607 #if defined(Q_OS_UNIX) && !defined(QT_NO_THREAD) && defined(_POSIX_THREAD_SAFE_FUNCTIONS) && (_POSIX_THREAD_SAFE_FUNCTIONS - 0 > 0)
3608     SeedStorage *seedStorage = randTLS();
3609     if (seedStorage) {
3610         SeedStorageType *pseed = seedStorage->localData();
3611         if (!pseed) {
3612             seedStorage->setLocalData(pseed = new SeedStorageType);
3613             *pseed = 1;
3614         }
3615         return rand_r(pseed);
3616     } else {
3617         //global static seed storage should always exist,
3618         //except after being deleted by QGlobalStaticDeleter.
3619         //But since it still can be called from destructor of another
3620         //global static object, fallback to rand()
3621         return rand();
3622     }
3623 #elif defined(Q_OS_ANDROID)
3624     AndroidRandomStorage *randomStorage = randomTLS();
3625     if (!randomStorage)
3626         return rand();
3627 
3628     if (randomStorage->hasLocalData()) {
3629         return randomStorage->localData().callMethod<jint>("nextInt",
3630                                                            "(I)I",
3631                                                            RAND_MAX);
3632     }
3633 
3634     QJNIObjectPrivate random("java/util/Random",
3635                              "(J)V",
3636                              jlong(1));
3637 
3638     if (!random.isValid())
3639         return rand();
3640 
3641     randomStorage->setLocalData(random);
3642     return random.callMethod<jint>("nextInt", "(I)I", RAND_MAX);
3643 #else
3644     // On Windows srand() and rand() already use Thread-Local-Storage
3645     // to store the seed between calls
3646     // this is also valid for QT_NO_THREAD
3647     return rand();
3648 #endif
3649 }
3650 
3651 /*!
3652     \macro forever
3653     \relates <QtGlobal>
3654 
3655     This macro is provided for convenience for writing infinite
3656     loops.
3657 
3658     Example:
3659 
3660     \snippet code/src_corelib_global_qglobal.cpp 31
3661 
3662     It is equivalent to \c{for (;;)}.
3663 
3664     If you're worried about namespace pollution, you can disable this
3665     macro by adding the following line to your \c .pro file:
3666 
3667     \snippet code/src_corelib_global_qglobal.cpp 32
3668 
3669     \sa Q_FOREVER
3670 */
3671 
3672 /*!
3673     \macro Q_FOREVER
3674     \relates <QtGlobal>
3675 
3676     Same as \l{forever}.
3677 
3678     This macro is available even when \c no_keywords is specified
3679     using the \c .pro file's \c CONFIG variable.
3680 
3681     \sa foreach()
3682 */
3683 
3684 /*!
3685     \macro foreach(variable, container)
3686     \relates <QtGlobal>
3687 
3688     This macro is used to implement Qt's \c foreach loop. The \a
3689     variable parameter is a variable name or variable definition; the
3690     \a container parameter is a Qt container whose value type
3691     corresponds to the type of the variable. See \l{The foreach
3692     Keyword} for details.
3693 
3694     If you're worried about namespace pollution, you can disable this
3695     macro by adding the following line to your \c .pro file:
3696 
3697     \snippet code/src_corelib_global_qglobal.cpp 33
3698 
3699     \note Since Qt 5.7, the use of this macro is discouraged. It will
3700     be removed in a future version of Qt. Please use C++11 range-for,
3701     possibly with qAsConst(), as needed.
3702 
3703     \sa qAsConst()
3704 */
3705 
3706 /*!
3707     \macro Q_FOREACH(variable, container)
3708     \relates <QtGlobal>
3709 
3710     Same as foreach(\a variable, \a container).
3711 
3712     This macro is available even when \c no_keywords is specified
3713     using the \c .pro file's \c CONFIG variable.
3714 
3715     \note Since Qt 5.7, the use of this macro is discouraged. It will
3716     be removed in a future version of Qt. Please use C++11 range-for,
3717     possibly with qAsConst(), as needed.
3718 
3719     \sa qAsConst()
3720 */
3721 
3722 /*!
3723     \fn qAsConst(T &t)
3724     \relates <QtGlobal>
3725     \since 5.7
3726 
3727     Returns \a t cast to \c{const T}.
3728 
3729     This function is a Qt implementation of C++17's std::as_const(),
3730     a cast function like std::move(). But while std::move() turns
3731     lvalues into rvalues, this function turns non-const lvalues into
3732     const lvalues. Like std::as_const(), it doesn't work on rvalues,
3733     because it cannot be efficiently implemented for rvalues without
3734     leaving dangling references.
3735 
3736     Its main use in Qt is to prevent implicitly-shared Qt containers
3737     from detaching:
3738     \code
3739     QString s = ...;
3740     for (QChar ch : s) // detaches 's' (performs a deep-copy if 's' was shared)
3741         process(ch);
3742     for (QChar ch : qAsConst(s)) // ok, no detach attempt
3743         process(ch);
3744     \endcode
3745 
3746     Of course, in this case, you could (and probably should) have declared
3747     \c s as \c const in the first place:
3748     \code
3749     const QString s = ...;
3750     for (QChar ch : s) // ok, no detach attempt on const objects
3751         process(ch);
3752     \endcode
3753     but often that is not easily possible.
3754 
3755     It is important to note that qAsConst() does not copy its argument,
3756     it just performs a \c{const_cast<const T&>(t)}. This is also the reason
3757     why it is designed to fail for rvalues: The returned reference would go
3758     stale too soon. So while this works (but detaches the returned object):
3759     \code
3760     for (QChar ch : funcReturningQString())
3761         process(ch); // OK, the returned object is kept alive for the loop's duration
3762     \endcode
3763 
3764     this would not:
3765     \code
3766     for (QChar ch : qAsConst(funcReturningQString()))
3767         process(ch); // ERROR: ch is copied from deleted memory
3768     \endcode
3769 
3770     To prevent this construct from compiling (and failing at runtime), qAsConst() has
3771     a second, deleted, overload which binds to rvalues.
3772 */
3773 
3774 /*!
3775     \fn qAsConst(const T &&t)
3776     \relates <QtGlobal>
3777     \since 5.7
3778     \overload
3779 
3780     This overload is deleted to prevent a dangling reference in code like
3781     \code
3782     for (QChar ch : qAsConst(funcReturningQString()))
3783         process(ch); // ERROR: ch is copied from deleted memory
3784     \endcode
3785 */
3786 
3787 /*!
3788     \macro QT_TR_NOOP(sourceText)
3789     \relates <QtGlobal>
3790 
3791     Marks the string literal \a sourceText for dynamic translation in
3792     the current context (class), i.e the stored \a sourceText will not
3793     be altered.
3794 
3795     The macro expands to \a sourceText.
3796 
3797     Example:
3798 
3799     \snippet code/src_corelib_global_qglobal.cpp 34
3800 
3801     The macro QT_TR_NOOP_UTF8() is identical except that it tells lupdate
3802     that the source string is encoded in UTF-8. Corresponding variants
3803     exist in the QT_TRANSLATE_NOOP() family of macros, too.
3804 
3805     \sa QT_TRANSLATE_NOOP(), {Internationalization with Qt}
3806 */
3807 
3808 /*!
3809     \macro QT_TRANSLATE_NOOP(context, sourceText)
3810     \relates <QtGlobal>
3811 
3812     Marks the string literal \a sourceText for dynamic translation in
3813     the given \a context; i.e, the stored \a sourceText will not be
3814     altered. The \a context is typically a class and also needs to
3815     be specified as string literal.
3816 
3817     The macro expands to \a sourceText.
3818 
3819     Example:
3820 
3821     \snippet code/src_corelib_global_qglobal.cpp 35
3822 
3823     \sa QT_TR_NOOP(), QT_TRANSLATE_NOOP3(), {Internationalization with Qt}
3824 */
3825 
3826 /*!
3827     \macro QT_TRANSLATE_NOOP3(context, sourceText, comment)
3828     \relates <QtGlobal>
3829     \since 4.4
3830 
3831     Marks the string literal \a sourceText for dynamic translation in the
3832     given \a context and with \a comment, i.e the stored \a sourceText will
3833     not be altered. The \a context is typically a class and also needs to
3834     be specified as string literal. The string literal \a comment
3835     will be available for translators using e.g. Qt Linguist.
3836 
3837     The macro expands to anonymous struct of the two string
3838     literals passed as \a sourceText and \a comment.
3839 
3840     Example:
3841 
3842     \snippet code/src_corelib_global_qglobal.cpp 36
3843 
3844     \sa QT_TR_NOOP(), QT_TRANSLATE_NOOP(), {Internationalization with Qt}
3845 */
3846 
3847 /*!
3848     \fn QString qtTrId(const char *id, int n = -1)
3849     \relates <QtGlobal>
3850     \reentrant
3851     \since 4.6
3852 
3853     \brief The qtTrId function finds and returns a translated string.
3854 
3855     Returns a translated string identified by \a id.
3856     If no matching string is found, the id itself is returned. This
3857     should not happen under normal conditions.
3858 
3859     If \a n >= 0, all occurrences of \c %n in the resulting string
3860     are replaced with a decimal representation of \a n. In addition,
3861     depending on \a n's value, the translation text may vary.
3862 
3863     Meta data and comments can be passed as documented for QObject::tr().
3864     In addition, it is possible to supply a source string template like that:
3865 
3866     \tt{//% <C string>}
3867 
3868     or
3869 
3870     \tt{\\begincomment% <C string> \\endcomment}
3871 
3872     Example:
3873 
3874     \snippet code/src_corelib_global_qglobal.cpp qttrid
3875 
3876     Creating QM files suitable for use with this function requires passing
3877     the \c -idbased option to the \c lrelease tool.
3878 
3879     \warning This method is reentrant only if all translators are
3880     installed \e before calling this method. Installing or removing
3881     translators while performing translations is not supported. Doing
3882     so will probably result in crashes or other undesirable behavior.
3883 
3884     \sa QObject::tr(), QCoreApplication::translate(), {Internationalization with Qt}
3885 */
3886 
3887 /*!
3888     \macro QT_TRID_NOOP(id)
3889     \relates <QtGlobal>
3890     \since 4.6
3891 
3892     \brief The QT_TRID_NOOP macro marks an id for dynamic translation.
3893 
3894     The only purpose of this macro is to provide an anchor for attaching
3895     meta data like to qtTrId().
3896 
3897     The macro expands to \a id.
3898 
3899     Example:
3900 
3901     \snippet code/src_corelib_global_qglobal.cpp qttrid_noop
3902 
3903     \sa qtTrId(), {Internationalization with Qt}
3904 */
3905 
3906 /*!
3907     \macro Q_LIKELY(expr)
3908     \relates <QtGlobal>
3909     \since 4.8
3910 
3911     \brief Hints to the compiler that the enclosed condition, \a expr, is
3912     likely to evaluate to \c true.
3913 
3914     Use of this macro can help the compiler to optimize the code.
3915 
3916     Example:
3917 
3918     \snippet code/src_corelib_global_qglobal.cpp qlikely
3919 
3920     \sa Q_UNLIKELY()
3921 */
3922 
3923 /*!
3924     \macro Q_UNLIKELY(expr)
3925     \relates <QtGlobal>
3926     \since 4.8
3927 
3928     \brief Hints to the compiler that the enclosed condition, \a expr, is
3929     likely to evaluate to \c false.
3930 
3931     Use of this macro can help the compiler to optimize the code.
3932 
3933     Example:
3934 
3935     \snippet code/src_corelib_global_qglobal.cpp qunlikely
3936 
3937     \sa Q_LIKELY()
3938 */
3939 
3940 /*!
3941     \macro QT_POINTER_SIZE
3942     \relates <QtGlobal>
3943 
3944     Expands to the size of a pointer in bytes (4 or 8). This is
3945     equivalent to \c sizeof(void *) but can be used in a preprocessor
3946     directive.
3947 */
3948 
3949 /*!
3950     \macro QABS(n)
3951     \relates <QtGlobal>
3952     \obsolete
3953 
3954     Use qAbs(\a n) instead.
3955 
3956     \sa QMIN(), QMAX()
3957 */
3958 
3959 /*!
3960     \macro QMIN(x, y)
3961     \relates <QtGlobal>
3962     \obsolete
3963 
3964     Use qMin(\a x, \a y) instead.
3965 
3966     \sa QMAX(), QABS()
3967 */
3968 
3969 /*!
3970     \macro QMAX(x, y)
3971     \relates <QtGlobal>
3972     \obsolete
3973 
3974     Use qMax(\a x, \a y) instead.
3975 
3976     \sa QMIN(), QABS()
3977 */
3978 
3979 /*!
3980     \macro const char *qPrintable(const QString &str)
3981     \relates <QtGlobal>
3982 
3983     Returns \a str as a \c{const char *}. This is equivalent to
3984     \a{str}.toLocal8Bit().constData().
3985 
3986     The char pointer will be invalid after the statement in which
3987     qPrintable() is used. This is because the array returned by
3988     QString::toLocal8Bit() will fall out of scope.
3989 
3990     \note qDebug(), qInfo(), qWarning(), qCritical(), qFatal() expect
3991     %s arguments to be UTF-8 encoded, while qPrintable() converts to
3992     local 8-bit encoding. Therefore qUtf8Printable() should be used
3993     for logging strings instead of qPrintable().
3994 
3995     \sa qUtf8Printable()
3996 */
3997 
3998 /*!
3999     \macro const char *qUtf8Printable(const QString &str)
4000     \relates <QtGlobal>
4001     \since 5.4
4002 
4003     Returns \a str as a \c{const char *}. This is equivalent to
4004     \a{str}.toUtf8().constData().
4005 
4006     The char pointer will be invalid after the statement in which
4007     qUtf8Printable() is used. This is because the array returned by
4008     QString::toUtf8() will fall out of scope.
4009 
4010     Example:
4011 
4012     \snippet code/src_corelib_global_qglobal.cpp 37
4013 
4014     \sa qPrintable(), qDebug(), qInfo(), qWarning(), qCritical(), qFatal()
4015 */
4016 
4017 /*!
4018     \macro const wchar_t *qUtf16Printable(const QString &str)
4019     \relates <QtGlobal>
4020     \since 5.7
4021 
4022     Returns \a str as a \c{const ushort *}, but cast to a \c{const wchar_t *}
4023     to avoid warnings. This is equivalent to \a{str}.utf16() plus some casting.
4024 
4025     The only useful thing you can do with the return value of this macro is to
4026     pass it to QString::asprintf() for use in a \c{%ls} conversion. In particular,
4027     the return value is \e{not} a valid \c{const wchar_t*}!
4028 
4029     In general, the pointer will be invalid after the statement in which
4030     qUtf16Printable() is used. This is because the pointer may have been
4031     obtained from a temporary expression, which will fall out of scope.
4032 
4033     Example:
4034 
4035     \snippet code/src_corelib_global_qglobal.cpp qUtf16Printable
4036 
4037     \sa qPrintable(), qDebug(), qInfo(), qWarning(), qCritical(), qFatal()
4038 */
4039 
4040 /*!
4041     \macro Q_DECLARE_TYPEINFO(Type, Flags)
4042     \relates <QtGlobal>
4043 
4044     You can use this macro to specify information about a custom type
4045     \a Type. With accurate type information, Qt's \l{Container Classes}
4046     {generic containers} can choose appropriate storage methods and
4047     algorithms.
4048 
4049     \a Flags can be one of the following:
4050 
4051     \list
4052     \li \c Q_PRIMITIVE_TYPE specifies that \a Type is a POD (plain old
4053        data) type with no constructor or destructor, or else a type where
4054        every bit pattern is a valid object and memcpy() creates a valid
4055        independent copy of the object.
4056     \li \c Q_MOVABLE_TYPE specifies that \a Type has a constructor
4057        and/or a destructor but can be moved in memory using \c
4058        memcpy(). Note: despite the name, this has nothing to do with move
4059        constructors or C++ move semantics.
4060     \li \c Q_COMPLEX_TYPE (the default) specifies that \a Type has
4061        constructors and/or a destructor and that it may not be moved
4062        in memory.
4063     \endlist
4064 
4065     Example of a "primitive" type:
4066 
4067     \snippet code/src_corelib_global_qglobal.cpp 38
4068 
4069     An example of a non-POD "primitive" type is QUuid: Even though
4070     QUuid has constructors (and therefore isn't POD), every bit
4071     pattern still represents a valid object, and memcpy() can be used
4072     to create a valid independent copy of a QUuid object.
4073 
4074     Example of a movable type:
4075 
4076     \snippet code/src_corelib_global_qglobal.cpp 39
4077 */
4078 
4079 /*!
4080     \macro Q_UNUSED(name)
4081     \relates <QtGlobal>
4082 
4083     Indicates to the compiler that the parameter with the specified
4084     \a name is not used in the body of a function. This can be used to
4085     suppress compiler warnings while allowing functions to be defined
4086     with meaningful parameter names in their signatures.
4087 */
4088 
4089 struct QInternal_CallBackTable {
4090     QVector<QList<qInternalCallback> > callbacks;
4091 };
4092 
4093 Q_GLOBAL_STATIC(QInternal_CallBackTable, global_callback_table)
4094 
4095 bool QInternal::registerCallback(Callback cb, qInternalCallback callback)
4096 {
4097     if (cb >= 0 && cb < QInternal::LastCallback) {
4098         QInternal_CallBackTable *cbt = global_callback_table();
4099         cbt->callbacks.resize(cb + 1);
4100         cbt->callbacks[cb].append(callback);
4101         return true;
4102     }
4103     return false;
4104 }
4105 
4106 bool QInternal::unregisterCallback(Callback cb, qInternalCallback callback)
4107 {
4108     if (cb >= 0 && cb < QInternal::LastCallback) {
4109         QInternal_CallBackTable *cbt = global_callback_table();
4110         return (bool) cbt->callbacks[cb].removeAll(callback);
4111     }
4112     return false;
4113 }
4114 
4115 bool QInternal::activateCallbacks(Callback cb, void **parameters)
4116 {
4117     Q_ASSERT_X(cb >= 0, "QInternal::activateCallback()", "Callback id must be a valid id");
4118 
4119     QInternal_CallBackTable *cbt = global_callback_table();
4120     if (cbt && cb < cbt->callbacks.size()) {
4121         QList<qInternalCallback> callbacks = cbt->callbacks[cb];
4122         bool ret = false;
4123         for (int i=0; i<callbacks.size(); ++i)
4124             ret |= (callbacks.at(i))(parameters);
4125         return ret;
4126     }
4127     return false;
4128 }
4129 
4130 /*!
4131     \macro Q_BYTE_ORDER
4132     \relates <QtGlobal>
4133 
4134     This macro can be used to determine the byte order your system
4135     uses for storing data in memory. i.e., whether your system is
4136     little-endian or big-endian. It is set by Qt to one of the macros
4137     Q_LITTLE_ENDIAN or Q_BIG_ENDIAN. You normally won't need to worry
4138     about endian-ness, but you might, for example if you need to know
4139     which byte of an integer or UTF-16 character is stored in the
4140     lowest address. Endian-ness is important in networking, where
4141     computers with different values for Q_BYTE_ORDER must pass data
4142     back and forth.
4143 
4144     Use this macro as in the following examples.
4145 
4146     \snippet code/src_corelib_global_qglobal.cpp 40
4147 
4148     \sa Q_BIG_ENDIAN, Q_LITTLE_ENDIAN
4149 */
4150 
4151 /*!
4152     \macro Q_LITTLE_ENDIAN
4153     \relates <QtGlobal>
4154 
4155     This macro represents a value you can compare to the macro
4156     Q_BYTE_ORDER to determine the endian-ness of your system.  In a
4157     little-endian system, the least significant byte is stored at the
4158     lowest address. The other bytes follow in increasing order of
4159     significance.
4160 
4161     \snippet code/src_corelib_global_qglobal.cpp 41
4162 
4163     \sa Q_BYTE_ORDER, Q_BIG_ENDIAN
4164 */
4165 
4166 /*!
4167     \macro Q_BIG_ENDIAN
4168     \relates <QtGlobal>
4169 
4170     This macro represents a value you can compare to the macro
4171     Q_BYTE_ORDER to determine the endian-ness of your system.  In a
4172     big-endian system, the most significant byte is stored at the
4173     lowest address. The other bytes follow in decreasing order of
4174     significance.
4175 
4176     \snippet code/src_corelib_global_qglobal.cpp 42
4177 
4178     \sa Q_BYTE_ORDER, Q_LITTLE_ENDIAN
4179 */
4180 
4181 /*!
4182     \macro Q_GLOBAL_STATIC(type, name)
4183     \internal
4184 
4185     Declares a global static variable with the given \a type and \a name.
4186 
4187     Use this macro to instantiate an object in a thread-safe way, creating
4188     a global pointer that can be used to refer to it.
4189 
4190     \warning This macro is subject to a race condition that can cause the object
4191     to be constructed twice. However, if this occurs, the second instance will
4192     be immediately deleted.
4193 
4194     See also
4195     \l{http://www.aristeia.com/publications.html}{"C++ and the perils of Double-Checked Locking"}
4196     by Scott Meyers and Andrei Alexandrescu.
4197 */
4198 
4199 /*!
4200     \macro Q_GLOBAL_STATIC_WITH_ARGS(type, name, arguments)
4201     \internal
4202 
4203     Declares a global static variable with the specified \a type and \a name.
4204 
4205     Use this macro to instantiate an object using the \a arguments specified
4206     in a thread-safe way, creating a global pointer that can be used to refer
4207     to it.
4208 
4209     \warning This macro is subject to a race condition that can cause the object
4210     to be constructed twice. However, if this occurs, the second instance will
4211     be immediately deleted.
4212 
4213     See also
4214     \l{http://www.aristeia.com/publications.html}{"C++ and the perils of Double-Checked Locking"}
4215     by Scott Meyers and Andrei Alexandrescu.
4216 */
4217 
4218 /*!
4219     \macro QT_NAMESPACE
4220     \internal
4221 
4222     If this macro is defined to \c ns all Qt classes are put in a namespace
4223     called \c ns. Also, moc will output code putting metaobjects etc.
4224     into namespace \c ns.
4225 
4226     \sa QT_BEGIN_NAMESPACE, QT_END_NAMESPACE,
4227     QT_PREPEND_NAMESPACE, QT_USE_NAMESPACE,
4228     QT_BEGIN_INCLUDE_NAMESPACE, QT_END_INCLUDE_NAMESPACE,
4229     QT_BEGIN_MOC_NAMESPACE, QT_END_MOC_NAMESPACE,
4230 */
4231 
4232 /*!
4233     \macro QT_PREPEND_NAMESPACE(identifier)
4234     \internal
4235 
4236     This macro qualifies \a identifier with the full namespace.
4237     It expands to \c{::QT_NAMESPACE::identifier} if \c QT_NAMESPACE is defined
4238     and only \a identifier otherwise.
4239 
4240     \sa QT_NAMESPACE
4241 */
4242 
4243 /*!
4244     \macro QT_USE_NAMESPACE
4245     \internal
4246 
4247     This macro expands to using QT_NAMESPACE if QT_NAMESPACE is defined
4248     and nothing otherwise.
4249 
4250     \sa QT_NAMESPACE
4251 */
4252 
4253 /*!
4254     \macro QT_BEGIN_NAMESPACE
4255     \internal
4256 
4257     This macro expands to
4258 
4259     \snippet code/src_corelib_global_qglobal.cpp begin namespace macro
4260 
4261     if \c QT_NAMESPACE is defined and nothing otherwise. If should always
4262     appear in the file-level scope and be followed by \c QT_END_NAMESPACE
4263     at the same logical level with respect to preprocessor conditionals
4264     in the same file.
4265 
4266     As a rule of thumb, \c QT_BEGIN_NAMESPACE should appear in all Qt header
4267     and Qt source files after the last \c{#include} line and before the first
4268     declaration.
4269 
4270     If that rule can't be followed because, e.g., \c{#include} lines and
4271     declarations are wildly mixed, place \c QT_BEGIN_NAMESPACE before
4272     the first declaration and wrap the \c{#include} lines in
4273     \c QT_BEGIN_INCLUDE_NAMESPACE and \c QT_END_INCLUDE_NAMESPACE.
4274 
4275     When using the \c QT_NAMESPACE feature in user code
4276     (e.g., when building plugins statically linked to Qt) where
4277     the user code is not intended to go into the \c QT_NAMESPACE
4278     namespace, all forward declarations of Qt classes need to
4279     be wrapped in \c QT_BEGIN_NAMESPACE and \c QT_END_NAMESPACE.
4280     After that, a \c QT_USE_NAMESPACE should follow.
4281     No further changes should be needed.
4282 
4283     \sa QT_NAMESPACE
4284 */
4285 
4286 /*!
4287     \macro QT_END_NAMESPACE
4288     \internal
4289 
4290     This macro expands to
4291 
4292     \snippet code/src_corelib_global_qglobal.cpp end namespace macro
4293 
4294     if \c QT_NAMESPACE is defined and nothing otherwise. It is used to cancel
4295     the effect of \c QT_BEGIN_NAMESPACE.
4296 
4297     If a source file ends with a \c{#include} directive that includes a moc file,
4298     \c QT_END_NAMESPACE should be placed before that \c{#include}.
4299 
4300     \sa QT_NAMESPACE
4301 */
4302 
4303 /*!
4304     \macro QT_BEGIN_INCLUDE_NAMESPACE
4305     \internal
4306 
4307     This macro is equivalent to \c QT_END_NAMESPACE.
4308     It only serves as syntactic sugar and is intended
4309     to be used before #include lines within a
4310     \c QT_BEGIN_NAMESPACE ... \c QT_END_NAMESPACE block.
4311 
4312     \sa QT_NAMESPACE
4313 */
4314 
4315 /*!
4316     \macro QT_END_INCLUDE_NAMESPACE
4317     \internal
4318 
4319     This macro is equivalent to \c QT_BEGIN_NAMESPACE.
4320     It only serves as syntactic sugar and is intended
4321     to be used after #include lines within a
4322     \c QT_BEGIN_NAMESPACE ... \c QT_END_NAMESPACE block.
4323 
4324     \sa QT_NAMESPACE
4325 */
4326 
4327 /*!
4328     \macro QT_BEGIN_MOC_NAMESPACE
4329     \internal
4330 
4331     This macro is output by moc at the beginning of
4332     moc files. It is equivalent to \c QT_USE_NAMESPACE.
4333 
4334     \sa QT_NAMESPACE
4335 */
4336 
4337 /*!
4338     \macro QT_END_MOC_NAMESPACE
4339     \internal
4340 
4341     This macro is output by moc at the beginning of
4342     moc files. It expands to nothing.
4343 
4344     \sa QT_NAMESPACE
4345 */
4346 
4347 /*!
4348  \fn bool qFuzzyCompare(double p1, double p2)
4349  \relates <QtGlobal>
4350  \since 4.4
4351  \threadsafe
4352 
4353  Compares the floating point value \a p1 and \a p2 and
4354  returns \c true if they are considered equal, otherwise \c false.
4355 
4356  Note that comparing values where either \a p1 or \a p2 is 0.0 will not work.
4357  The solution to this is to compare against values greater than or equal to 1.0.
4358 
4359  \snippet code/src_corelib_global_qglobal.cpp 46
4360 
4361  The two numbers are compared in a relative way, where the
4362  exactness is stronger the smaller the numbers are.
4363  */
4364 
4365 /*!
4366  \fn bool qFuzzyCompare(float p1, float p2)
4367  \relates <QtGlobal>
4368  \since 4.4
4369  \threadsafe
4370 
4371  Compares the floating point value \a p1 and \a p2 and
4372  returns \c true if they are considered equal, otherwise \c false.
4373 
4374  The two numbers are compared in a relative way, where the
4375  exactness is stronger the smaller the numbers are.
4376  */
4377 
4378 /*!
4379  \fn bool qFuzzyIsNull(double d)
4380  \relates <QtGlobal>
4381  \since 4.4
4382  \threadsafe
4383 
4384  Returns true if the absolute value of \a d is within 0.000000000001 of 0.0.
4385 */
4386 
4387 /*!
4388  \fn bool qFuzzyIsNull(float f)
4389  \relates <QtGlobal>
4390  \since 4.4
4391  \threadsafe
4392 
4393  Returns true if the absolute value of \a f is within 0.00001f of 0.0.
4394 */
4395 
4396 /*!
4397     \macro QT_REQUIRE_VERSION(int argc, char **argv, const char *version)
4398     \relates <QtGlobal>
4399 
4400     This macro can be used to ensure that the application is run
4401     against a recent enough version of Qt. This is especially useful
4402     if your application depends on a specific bug fix introduced in a
4403     bug-fix release (e.g., 4.0.2).
4404 
4405     The \a argc and \a argv parameters are the \c main() function's
4406     \c argc and \c argv parameters. The \a version parameter is a
4407     string literal that specifies which version of Qt the application
4408     requires (e.g., "4.0.2").
4409 
4410     Example:
4411 
4412     \snippet code/src_gui_dialogs_qmessagebox.cpp 4
4413 */
4414 
4415 /*!
4416     \macro Q_DECL_EXPORT
4417     \relates <QtGlobal>
4418 
4419     This macro marks a symbol for shared library export (see
4420      \l{sharedlibrary.html}{Creating Shared Libraries}).
4421 
4422     \sa Q_DECL_IMPORT
4423 */
4424 
4425 /*!
4426     \macro Q_DECL_IMPORT
4427     \relates <QtGlobal>
4428 
4429     This macro declares a symbol to be an import from a shared library (see
4430     \l{sharedlibrary.html}{Creating Shared Libraries}).
4431 
4432     \sa Q_DECL_EXPORT
4433 */
4434 
4435 /*!
4436     \macro Q_DECL_CONSTEXPR
4437     \relates <QtGlobal>
4438 
4439     This macro can be used to declare variable that should be constructed at compile-time,
4440     or an inline function that can be computed at compile-time.
4441 
4442     It expands to "constexpr" if your compiler supports that C++11 keyword, or to nothing
4443     otherwise.
4444 
4445     \sa Q_DECL_RELAXED_CONSTEXPR
4446 */
4447 
4448 /*!
4449     \macro Q_DECL_RELAXED_CONSTEXPR
4450     \relates <QtGlobal>
4451 
4452     This macro can be used to declare an inline function that can be computed
4453     at compile-time according to the relaxed rules from C++14.
4454 
4455     It expands to "constexpr" if your compiler supports C++14 relaxed constant
4456     expressions, or to nothing otherwise.
4457 
4458     \sa Q_DECL_CONSTEXPR
4459 */
4460 
4461 /*!
4462     \macro qDebug(const char *message, ...)
4463     \relates <QtGlobal>
4464 
4465     Calls the message handler with the debug message \a message. If no
4466     message handler has been installed, the message is printed to
4467     stderr. Under Windows the message is sent to the console, if it is a
4468     console application; otherwise, it is sent to the debugger. On QNX, the
4469     message is sent to slogger2. This function does nothing if \c QT_NO_DEBUG_OUTPUT
4470     was defined during compilation.
4471 
4472     If you pass the function a format string and a list of arguments,
4473     it works in similar way to the C printf() function. The format
4474     should be a Latin-1 string.
4475 
4476     Example:
4477 
4478     \snippet code/src_corelib_global_qglobal.cpp 24
4479 
4480     If you include \c <QtDebug>, a more convenient syntax is also
4481     available:
4482 
4483     \snippet code/src_corelib_global_qglobal.cpp 25
4484 
4485     With this syntax, the function returns a QDebug object that is
4486     configured to use the QtDebugMsg message type. It automatically
4487     puts a single space between each item, and outputs a newline at
4488     the end. It supports many C++ and Qt types.
4489 
4490     To suppress the output at run-time, install your own message handler
4491     with qInstallMessageHandler().
4492 
4493     \sa qInfo(), qWarning(), qCritical(), qFatal(), qInstallMessageHandler(),
4494         {Debugging Techniques}
4495 */
4496 
4497 /*!
4498     \macro qInfo(const char *message, ...)
4499     \relates <QtGlobal>
4500     \since 5.5
4501 
4502     Calls the message handler with the informational message \a message. If no
4503     message handler has been installed, the message is printed to
4504     stderr. Under Windows, the message is sent to the console, if it is a
4505     console application; otherwise, it is sent to the debugger. On QNX the
4506     message is sent to slogger2. This function does nothing if \c QT_NO_INFO_OUTPUT
4507     was defined during compilation.
4508 
4509     If you pass the function a format string and a list of arguments,
4510     it works in similar way to the C printf() function. The format
4511     should be a Latin-1 string.
4512 
4513     Example:
4514 
4515     \snippet code/src_corelib_global_qglobal.cpp qInfo_printf
4516 
4517     If you include \c <QtDebug>, a more convenient syntax is also
4518     available:
4519 
4520     \snippet code/src_corelib_global_qglobal.cpp qInfo_stream
4521 
4522     With this syntax, the function returns a QDebug object that is
4523     configured to use the QtInfoMsg message type. It automatically
4524     puts a single space between each item, and outputs a newline at
4525     the end. It supports many C++ and Qt types.
4526 
4527     To suppress the output at run-time, install your own message handler
4528     with qInstallMessageHandler().
4529 
4530     \sa qDebug(), qWarning(), qCritical(), qFatal(), qInstallMessageHandler(),
4531         {Debugging Techniques}
4532 */
4533 
4534 /*!
4535     \macro qWarning(const char *message, ...)
4536     \relates <QtGlobal>
4537 
4538     Calls the message handler with the warning message \a message. If no
4539     message handler has been installed, the message is printed to
4540     stderr. Under Windows, the message is sent to the debugger.
4541     On QNX the message is sent to slogger2. This
4542     function does nothing if \c QT_NO_WARNING_OUTPUT was defined
4543     during compilation; it exits if the environment variable \c
4544     QT_FATAL_WARNINGS is not empty.
4545 
4546     This function takes a format string and a list of arguments,
4547     similar to the C printf() function. The format should be a Latin-1
4548     string.
4549 
4550     Example:
4551     \snippet code/src_corelib_global_qglobal.cpp 26
4552 
4553     If you include <QtDebug>, a more convenient syntax is
4554     also available:
4555 
4556     \snippet code/src_corelib_global_qglobal.cpp 27
4557 
4558     This syntax inserts a space between each item, and
4559     appends a newline at the end.
4560 
4561     To suppress the output at runtime, install your own message handler
4562     with qInstallMessageHandler().
4563 
4564     \sa qDebug(), qInfo(), qCritical(), qFatal(), qInstallMessageHandler(),
4565         {Debugging Techniques}
4566 */
4567 
4568 /*!
4569     \macro qCritical(const char *message, ...)
4570     \relates <QtGlobal>
4571 
4572     Calls the message handler with the critical message \a message. If no
4573     message handler has been installed, the message is printed to
4574     stderr. Under Windows, the message is sent to the debugger.
4575     On QNX the message is sent to slogger2
4576 
4577     It exits if the environment variable QT_FATAL_CRITICALS is not empty.
4578 
4579     This function takes a format string and a list of arguments,
4580     similar to the C printf() function. The format should be a Latin-1
4581     string.
4582 
4583     Example:
4584     \snippet code/src_corelib_global_qglobal.cpp 28
4585 
4586     If you include <QtDebug>, a more convenient syntax is
4587     also available:
4588 
4589     \snippet code/src_corelib_global_qglobal.cpp 29
4590 
4591     A space is inserted between the items, and a newline is
4592     appended at the end.
4593 
4594     To suppress the output at runtime, install your own message handler
4595     with qInstallMessageHandler().
4596 
4597     \sa qDebug(), qInfo(), qWarning(), qFatal(), qInstallMessageHandler(),
4598         {Debugging Techniques}
4599 */
4600 
4601 /*!
4602     \macro qFatal(const char *message, ...)
4603     \relates <QtGlobal>
4604 
4605     Calls the message handler with the fatal message \a message. If no
4606     message handler has been installed, the message is printed to
4607     stderr. Under Windows, the message is sent to the debugger.
4608     On QNX the message is sent to slogger2
4609 
4610     If you are using the \b{default message handler} this function will
4611     abort on Unix systems to create a core dump. On Windows, for debug builds,
4612     this function will report a _CRT_ERROR enabling you to connect a debugger
4613     to the application.
4614 
4615     This function takes a format string and a list of arguments,
4616     similar to the C printf() function.
4617 
4618     Example:
4619     \snippet code/src_corelib_global_qglobal.cpp 30
4620 
4621     To suppress the output at runtime, install your own message handler
4622     with qInstallMessageHandler().
4623 
4624     \sa qDebug(), qInfo(), qWarning(), qCritical(), qInstallMessageHandler(),
4625         {Debugging Techniques}
4626 */
4627 
4628 /*!
4629     \macro qMove(x)
4630     \relates <QtGlobal>
4631 
4632     It expands to "std::move" if your compiler supports that C++11 function, or to nothing
4633     otherwise.
4634 
4635     qMove takes an rvalue reference to its parameter \a x, and converts it to an xvalue.
4636 */
4637 
4638 /*!
4639     \macro Q_DECL_NOTHROW
4640     \relates <QtGlobal>
4641     \since 5.0
4642 
4643     This macro marks a function as never throwing, under no
4644     circumstances. If the function does nevertheless throw, the
4645     behaviour is undefined.
4646 
4647     The macro expands to either "throw()", if that has some benefit on
4648     the compiler, or to C++11 noexcept, if available, or to nothing
4649     otherwise.
4650 
4651     If you need C++11 noexcept semantics, don't use this macro, use
4652     Q_DECL_NOEXCEPT/Q_DECL_NOEXCEPT_EXPR instead.
4653 
4654     \sa Q_DECL_NOEXCEPT, Q_DECL_NOEXCEPT_EXPR()
4655 */
4656 
4657 /*!
4658     \macro QT_TERMINATE_ON_EXCEPTION(expr)
4659     \relates <QtGlobal>
4660     \internal
4661 
4662     In general, use of the Q_DECL_NOEXCEPT macro is preferred over
4663     Q_DECL_NOTHROW, because it exhibits well-defined behavior and
4664     supports the more powerful Q_DECL_NOEXCEPT_EXPR variant. However,
4665     use of Q_DECL_NOTHROW has the advantage that Windows builds
4666     benefit on a wide range or compiler versions that do not yet
4667     support the C++11 noexcept feature.
4668 
4669     It may therefore be beneficial to use Q_DECL_NOTHROW and emulate
4670     the C++11 behavior manually with an embedded try/catch.
4671 
4672     Qt provides the QT_TERMINATE_ON_EXCEPTION(expr) macro for this
4673     purpose. It either expands to \c expr (if Qt is compiled without
4674     exception support or the compiler supports C++11 noexcept
4675     semantics) or to
4676     \code
4677     try { expr; } catch(...) { qTerminate(); }
4678     \endcode
4679     otherwise.
4680 
4681     Since this macro expands to just \c expr if the compiler supports
4682     C++11 noexcept, expecting the compiler to take over responsibility
4683     of calling std::terminate() in that case, it should not be used
4684     outside Q_DECL_NOTHROW functions.
4685 
4686     \sa Q_DECL_NOEXCEPT, Q_DECL_NOTHROW, qTerminate()
4687 */
4688 
4689 /*!
4690     \macro Q_DECL_NOEXCEPT
4691     \relates <QtGlobal>
4692     \since 5.0
4693 
4694     This macro marks a function as never throwing. If the function
4695     does nevertheless throw, the behaviour is defined:
4696     std::terminate() is called.
4697 
4698     The macro expands to C++11 noexcept, if available, or to nothing
4699     otherwise.
4700 
4701     If you need the operator version of C++11 noexcept, use
4702     Q_DECL_NOEXCEPT_EXPR(x).
4703 
4704     If you don't need C++11 noexcept semantics, e.g. because your
4705     function can't possibly throw, don't use this macro, use
4706     Q_DECL_NOTHROW instead.
4707 
4708     \sa Q_DECL_NOTHROW, Q_DECL_NOEXCEPT_EXPR()
4709 */
4710 
4711 /*!
4712     \macro Q_DECL_NOEXCEPT_EXPR(x)
4713     \relates <QtGlobal>
4714     \since 5.0
4715 
4716     This macro marks a function as non-throwing if \a x is \c true. If
4717     the function does nevertheless throw, the behaviour is defined:
4718     std::terminate() is called.
4719 
4720     The macro expands to C++11 noexcept(x), if available, or to
4721     nothing otherwise.
4722 
4723     If you need the always-true version of C++11 noexcept, use
4724     Q_DECL_NOEXCEPT.
4725 
4726     If you don't need C++11 noexcept semantics, e.g. because your
4727     function can't possibly throw, don't use this macro, use
4728     Q_DECL_NOTHROW instead.
4729 
4730     \sa Q_DECL_NOTHROW, Q_DECL_NOEXCEPT
4731 */
4732 
4733 /*!
4734     \macro Q_DECL_OVERRIDE
4735     \since 5.0
4736     \relates <QtGlobal>
4737 
4738     This macro can be used to declare an overriding virtual
4739     function. Use of this markup will allow the compiler to generate
4740     an error if the overriding virtual function does not in fact
4741     override anything.
4742 
4743     It expands to "override" if your compiler supports that C++11
4744     contextual keyword, or to nothing otherwise.
4745 
4746     The macro goes at the end of the function, usually after the
4747     \c{const}, if any:
4748     \code
4749     // generate error if this doesn't actually override anything:
4750     virtual void MyWidget::paintEvent(QPaintEvent*) Q_DECL_OVERRIDE;
4751     \endcode
4752 
4753     \sa Q_DECL_FINAL
4754 */
4755 
4756 /*!
4757     \macro Q_DECL_FINAL
4758     \since 5.0
4759     \relates <QtGlobal>
4760 
4761     This macro can be used to declare an overriding virtual or a class
4762     as "final", with Java semantics. Further-derived classes can then
4763     no longer override this virtual function, or inherit from this
4764     class, respectively.
4765 
4766     It expands to "final" if your compiler supports that C++11
4767     contextual keyword, or something non-standard if your compiler
4768     supports something close enough to the C++11 semantics, or to
4769     nothing otherwise.
4770 
4771     The macro goes at the end of the function, usually after the
4772     \c{const}, if any:
4773     \code
4774     // more-derived classes no longer permitted to override this:
4775     virtual void MyWidget::paintEvent(QPaintEvent*) Q_DECL_FINAL;
4776     \endcode
4777 
4778     For classes, it goes in front of the \c{:} in the class
4779     definition, if any:
4780     \code
4781     class QRect Q_DECL_FINAL { // cannot be derived from
4782         // ...
4783     };
4784     \endcode
4785 
4786     \sa Q_DECL_OVERRIDE
4787 */
4788 
4789 /*!
4790     \macro Q_FORWARD_DECLARE_OBJC_CLASS(classname)
4791     \since 5.2
4792     \relates <QtGlobal>
4793 
4794     Forward-declares an Objective-C \a classname in a manner such that it can be
4795     compiled as either Objective-C or C++.
4796 
4797     This is primarily intended for use in header files that may be included by
4798     both Objective-C and C++ source files.
4799 */
4800 
4801 /*!
4802     \macro Q_FORWARD_DECLARE_CF_TYPE(type)
4803     \since 5.2
4804     \relates <QtGlobal>
4805 
4806     Forward-declares a Core Foundation \a type. This includes the actual
4807     type and the ref type. For example, Q_FORWARD_DECLARE_CF_TYPE(CFString)
4808     declares __CFString and CFStringRef.
4809 */
4810 
4811 /*!
4812     \macro Q_FORWARD_DECLARE_MUTABLE_CF_TYPE(type)
4813     \since 5.2
4814     \relates <QtGlobal>
4815 
4816     Forward-declares a mutable Core Foundation \a type. This includes the actual
4817     type and the ref type. For example, Q_FORWARD_DECLARE_MUTABLE_CF_TYPE(CFMutableString)
4818     declares __CFMutableString and CFMutableStringRef.
4819 */
4820 
4821 QT_END_NAMESPACE
