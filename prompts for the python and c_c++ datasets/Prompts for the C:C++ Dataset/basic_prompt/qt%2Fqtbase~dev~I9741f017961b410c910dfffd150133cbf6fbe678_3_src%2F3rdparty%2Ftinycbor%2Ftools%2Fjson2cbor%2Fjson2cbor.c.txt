Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2015 Intel Corporation
4 **
5 ** Permission is hereby granted, free of charge, to any person obtaining a copy
6 ** of this software and associated documentation files (the "Software"), to deal
7 ** in the Software without restriction, including without limitation the rights
8 ** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
9 ** copies of the Software, and to permit persons to whom the Software is
10 ** furnished to do so, subject to the following conditions:
11 **
12 ** The above copyright notice and this permission notice shall be included in
13 ** all copies or substantial portions of the Software.
14 **
15 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
16 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
17 ** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
18 ** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
19 ** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
20 ** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
21 ** THE SOFTWARE.
22 **
23 ****************************************************************************/
24 
25 #define _POSIX_C_SOURCE 200809L
26 #define _GNU_SOURCE
27 #include "cbor.h"
28 #include "compilersupport_p.h"
29 
30 #include <cjson/cJSON.h>
31 
32 #include <errno.h>
33 #include <math.h>
34 #include <inttypes.h>
35 #include <stdio.h>
36 #include <stdlib.h>
37 #include <string.h>
38 #include <unistd.h>
39 
40 static const char meta_data_marker[] = "$cbor";
41 uint8_t *buffer;
42 size_t buffersize;
43 bool usingMetaData = false;
44 
45 struct MetaData {
46     CborTag tag;
47     union {
48         const char *v;
49         uint8_t simpleType;
50     };
51     CborType t;
52     bool tagged;
53 };
54 
55 uint8_t *decode_base64_generic(const char *string, size_t *len, const int8_t reverse_alphabet[256])
56 {
57     *len = ((strlen(string) + 3) & ~3) * 3 / 4;
58     uint8_t *buffer = malloc(*len);
59     if (buffer == NULL)
60         return NULL;
61 
62     uint8_t *out = buffer;
63     const uint8_t *in = (const uint8_t *)string;
64     bool done = false;
65     while (!done) {
66         if (reverse_alphabet[in[0]] < 0 || reverse_alphabet[in[1]] < 0) {
67             if (in[0] == '\0')
68                 done = true;
69             break;
70         }
71 
72         uint32_t val = reverse_alphabet[in[0]] << 18;
73         val |= reverse_alphabet[in[1]] << 12;
74         if (in[2] == '=' || in[2] == '\0') {
75             if (in[2] == '=' && (in[3] != '=' || in[4] != '\0'))
76                 break;
77             val >>= 12;
78             done = true;
79         } else if (in[3] == '=' || in[3] == '\0') {
80             if (in[3] == '=' && in[4] != '\0')
81                 break;
82             val >>= 6;
83             val |= reverse_alphabet[in[2]];
84             done = true;
85         } else {
86             val |= reverse_alphabet[in[2]] << 6;
87             val |= reverse_alphabet[in[3]];
88         }
89 
90         *out++ = val >> 16;
91         *out++ = val >> 8;
92         *out++ = val;
93         in += 4;
94     }
95 
96     if (!done) {
97         free(buffer);
98         return NULL;
99     }
100     *len = out - buffer;
101     return buffer;
102 }
103 
104 uint8_t *decode_base64(const char *string, size_t *len)
105 {
106     static const int8_t reverse_alphabet[256] = {
107         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
108         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
109         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,
110         52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,
111         -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
112         15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
113         -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
114         41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
115         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
116         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
117         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
118         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
119         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
120         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
121         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
122         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
123     };
124     return decode_base64_generic(string, len, reverse_alphabet);
125 }
126 
127 uint8_t *decode_base64url(const char *string, size_t *len)
128 {
129     static const int8_t reverse_alphabet[256] = {
130         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
131         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
132         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1,
133         52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,
134         -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
135         15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63,
136         -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
137         41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
138         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
139         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
140         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
141         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
142         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
143         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
144         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
145         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
146     };
147     return decode_base64_generic(string, len, reverse_alphabet);
148 }
149 
150 uint8_t *decode_base16(const char *string, size_t *len)
151 {
152     size_t i;
153     *len = strlen(string) / 2;
154     uint8_t *buffer = malloc(*len);
155     if (buffer == NULL)
156         return NULL;
157 
158     for (i = 0; i < *len; ++i) {
159         char c = string[i * 2];
160         if (c >= '0' && c <= '9') {
161             buffer[i] = (c - '0') << 4;
162         } else if ((c | 0x20) >= 'a' && (c | 0x20) <= 'f') {
163             buffer[i] = ((c | 0x20) - 'a' + 10) << 4;
164         } else {
165             free(buffer);
166             return NULL;
167         }
168 
169         c = string[i * 2 + 1];
170         if (c >= '0' && c <= '9') {
171             buffer[i] |= (c - '0');
172         } else if ((c | 0x20) >= 'a' && (c | 0x20) <= 'f') {
173             buffer[i] |= ((c | 0x20) - 'a' + 10);
174         } else {
175             free(buffer);
176             return NULL;
177         }
178     }
179 
180     return buffer;
181 }
182 
183 size_t get_cjson_size_limited(cJSON *container)
184 {
185     // cJSON_GetArraySize is O(n), so don't go too far
186     unsigned s = 0;
187     cJSON *item;
188     for (item = container->child; item; item = item->next) {
189         if (++s > 255)
190             return CborIndefiniteLength;
191     }
192     return s;
193 }
194 
195 cJSON *get_meta_data(cJSON *object, cJSON *item)
196 {
197     cJSON *meta;
198     char *metadatakey;
199 
200     if (asprintf(&metadatakey, "%s%s", item->string, meta_data_marker) < 0 || metadatakey == NULL)
201         return NULL;
202     meta = cJSON_GetObjectItem(object, metadatakey);
203     free(metadatakey);
204     return meta;
205 }
206 
207 struct MetaData parse_meta_data(cJSON *md)
208 {
209     struct MetaData result = { 0, {NULL}, CborInvalidType, false };
210     if (md == NULL || md->type != cJSON_Object)
211         return result;
212 
213     for (md = md->child; md; md = md->next) {
214         if (strcmp(md->string, "tag") == 0) {
215             if (md->type != cJSON_String || sscanf(md->valuestring, "%" PRIu64, &result.tag) < 0)
216                 fprintf(stderr, "json2cbor: could not parse tag: %s\n", md->valuestring);
217             else
218                 result.tagged = true;
219         } else if (strcmp(md->string, "t") == 0) {
220             result.t = md->valueint;
221         } else if (strcmp(md->string, "v") == 0) {
222             if (md->type == cJSON_Number)
223                 result.simpleType = md->valueint;
224             else
225                 result.v = md->valuestring;
226         }
227     }
228     return result;
229 }
230 
231 CborError decode_json(cJSON *json, CborEncoder *encoder);
232 CborError decode_json_with_metadata(cJSON *item, CborEncoder *encoder, struct MetaData md)
233 {
234     switch (md.t) {
235     case CborIntegerType: {
236         // integer that has more than 53 bits of precision
237         uint64_t v;
238         bool positive = *md.v++ == '+';
239         if (sscanf(md.v, "%" PRIx64, &v) < 0) {
240             fprintf(stderr, "json2cbor: could not parse number: %s\n", md.v);
241             break;
242         }
243         return positive ? cbor_encode_uint(encoder, v) : cbor_encode_negative_int(encoder, v);
244     }
245 
246     case CborByteStringType: {
247         uint8_t *data;
248         size_t len;
249         if (md.tag == CborExpectedBase64Tag)
250             data = decode_base64(item->valuestring, &len);
251         else if (md.tag == CborExpectedBase16Tag)
252             data = decode_base16(item->valuestring, &len);
253         else if (md.tag == CborNegativeBignumTag)
254             data = decode_base64url(item->valuestring + 1, &len);
255         else
256             data = decode_base64url(item->valuestring, &len);
257 
258         if (data != NULL) {
259             CborError err = cbor_encode_byte_string(encoder, data, len);
260             free(data);
261             return err;
262         }
263         fprintf(stderr, "json2cbor: could not decode encoded byte string: %s\n", item->valuestring);
264         break;
265     }
266 
267     case CborSimpleType:
268         return cbor_encode_simple_value(encoder, md.simpleType);
269 
270     case CborUndefinedType:
271         return cbor_encode_undefined(encoder);
272 
273     case CborHalfFloatType:
274     case CborFloatType:
275     case CborDoubleType: {
276         unsigned short half;
277         double v;
278         if (!md.v) {
279             v = item->valuedouble;
280         } else if (strcmp(md.v, "nan") == 0) {
281             v = NAN;
282         } else if (strcmp(md.v, "-inf") == 0) {
283             v = -INFINITY;
284         } else if (strcmp(md.v, "inf") == 0) {
285             v = INFINITY;
286         } else {
287             fprintf(stderr, "json2cbor: invalid floating-point value: %s\n", md.v);
288             break;
289         }
290 
291         // we can't get an OOM here because the metadata makes up for space
292         // (the smallest metadata is "$cbor":{"t":250} (17 bytes)
293         return (md.t == CborDoubleType) ? cbor_encode_double(encoder, v) :
294                (md.t == CborFloatType) ? cbor_encode_float(encoder, v) :
295                                          (half = encode_half(v), cbor_encode_half_float(encoder, &half));
296     }
297 
298     default:
299         fprintf(stderr, "json2cbor: invalid CBOR type: %d\n", md.t);
300     case CborInvalidType:
301         break;
302     }
303 
304     return decode_json(item, encoder);
305 }
306 
307 CborError decode_json(cJSON *json, CborEncoder *encoder)
308 {
309     CborEncoder container;
310     CborError err;
311     cJSON *item;
312 
313     switch (json->type) {
314     case cJSON_False:
315     case cJSON_True:
316         return cbor_encode_boolean(encoder, json->type == cJSON_True);
317 
318     case cJSON_NULL:
319         return cbor_encode_null(encoder);
320 
321     case cJSON_Number:
322         if ((double)json->valueint == json->valuedouble)
323             return cbor_encode_int(encoder, json->valueint);
324 encode_double:
325         // the only exception that JSON is larger: floating point numbers
326         container = *encoder;   // save the state
327         err = cbor_encode_double(encoder, json->valuedouble);
328 
329         if (err == CborErrorOutOfMemory) {
330             buffersize += 1024;
331             uint8_t *newbuffer = realloc(buffer, buffersize);
332             if (newbuffer == NULL)
333                 return err;
334 
335             *encoder = container;   // restore state
336             encoder->data.ptr = newbuffer + (container.data.ptr - buffer);
337             encoder->end = newbuffer + buffersize;
338             buffer = newbuffer;
339             goto encode_double;
340         }
341         return err;
342 
343     case cJSON_String:
344         return cbor_encode_text_stringz(encoder, json->valuestring);
345 
346     default:
347         return CborErrorUnknownType;
348 
349     case cJSON_Array:
350         err = cbor_encoder_create_array(encoder, &container, get_cjson_size_limited(json));
351         if (err)
352             return err;
353         for (item = json->child; item; item = item->next) {
354             err = decode_json(item, &container);
355             if (err)
356                 return err;
357         }
358         return cbor_encoder_close_container_checked(encoder, &container);
359 
360     case cJSON_Object:
361         err = cbor_encoder_create_map(encoder, &container,
362                                       usingMetaData ? CborIndefiniteLength : get_cjson_size_limited(json));
363         if (err)
364             return err;
365 
366         for (item = json->child ; item; item = item->next) {
367             if (usingMetaData && strlen(item->string) > strlen(meta_data_marker)
368                     && strcmp(item->string + strlen(item->string) - 5, meta_data_marker) == 0)
369                 continue;
370 
371             err = cbor_encode_text_stringz(&container, item->string);
372             if (err)
373                 return err;
374 
375             if (usingMetaData) {
376                 cJSON *meta = get_meta_data(json, item);
377                 struct MetaData md = parse_meta_data(meta);
378                 if (md.tagged) {
379                     err = cbor_encode_tag(&container, md.tag);
380                     if (err)
381                         return err;
382                 }
383 
384                 err = decode_json_with_metadata(item, &container, md);
385             } else {
386                 err = decode_json(item, &container);
387             }
388             if (err)
389                 return err;
390         }
391 
392         return cbor_encoder_close_container_checked(encoder, &container);
393     }
394 }
395 
396 int main(int argc, char **argv)
397 {
398     int c;
399     while ((c = getopt(argc, argv, "M")) != -1) {
400         switch (c) {
401         case 'M':
402             usingMetaData = true;
403             break;
404 
405         case '?':
406             fprintf(stderr, "Unknown option -%c.\n", optopt);
407             // fall through
408         case 'h':
409             puts("Usage: json2cbor [OPTION]... [FILE]...\n"
410                  "Reads JSON content from FILE and convert to CBOR.\n"
411                  "\n"
412                  "Options:\n"
413                  " -M       Interpret metadata added by cbordump tool\n"
414                  "");
415             return c == '?' ? EXIT_FAILURE : EXIT_SUCCESS;
416         }
417     }
418 
419     FILE *in;
420     const char *fname = argv[optind];
421     if (fname && strcmp(fname, "-") != 0) {
422         in = fopen(fname, "r");
423         if (!in) {
424             perror("open");
425             return EXIT_FAILURE;
426         }
427     } else {
428         in = stdin;
429         fname = "-";
430     }
431 
432     /* 1. read the file */
433     off_t fsize;
434     if (fseeko(in, 0, SEEK_END) == 0 && (fsize = ftello(in)) >= 0) {
435         buffersize = fsize + 1;
436         buffer = malloc(buffersize);
437         if (buffer == NULL) {
438             perror("malloc");
439             return EXIT_FAILURE;
440         }
441 
442         rewind(in);
443         fsize = fread(buffer, 1, fsize, in);
444         buffer[fsize] = '\0';
445     } else {
446         const unsigned chunk = 16384;
447         buffersize = 0;
448         buffer = NULL;
449         do {    // it the hard way
450             buffer = realloc(buffer, buffersize + chunk);
451             if (buffer == NULL)
452                 perror("malloc");
453 
454             buffersize += fread(buffer + buffersize, 1, chunk, in);
455         } while (!feof(in) && !ferror(in));
456         buffer[buffersize] = '\0';
457     }
458 
459     if (ferror(in)) {
460         perror("read");
461         return EXIT_FAILURE;
462     }
463     if (in != stdin)
464         fclose(in);
465 
466     /* 2. parse as JSON */
467     cJSON *doc = cJSON_ParseWithOpts((char *)buffer, NULL, true);
468     if (doc == NULL) {
469         fprintf(stderr, "json2cbor: %s: could not parse.\n", fname);
470         return EXIT_FAILURE;
471     }
472 
473     /* 3. encode as CBOR */
474     // We're going to reuse the buffer, as CBOR is usually shorter than the equivalent JSON
475     CborEncoder encoder;
476     cbor_encoder_init(&encoder, buffer, buffersize, 0);
477     CborError err = decode_json(doc, &encoder);
478 
479     cJSON_Delete(doc);
480 
481     if (err) {
482         fprintf(stderr, "json2cbor: %s: error encoding to CBOR: %s\n", fname,
483                 cbor_error_string(err));
484         return EXIT_FAILURE;
485     }
486 
487     fwrite(buffer, 1, encoder.data.ptr - buffer, stdout);
488     free(buffer);
489     return EXIT_SUCCESS;
490 }
