Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the plugins of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qxcbbackingstore.h"
41 
42 #include "qxcbconnection.h"
43 #include "qxcbscreen.h"
44 #include "qxcbwindow.h"
45 
46 #include <xcb/shm.h>
47 #include <xcb/xcb_image.h>
48 
49 #include <sys/ipc.h>
50 #include <sys/shm.h>
51 
52 #include <stdio.h>
53 #include <errno.h>
54 
55 #include <qdebug.h>
56 #include <qpainter.h>
57 #include <qscreen.h>
58 #include <QtGui/private/qhighdpiscaling_p.h>
59 #include <qpa/qplatformgraphicsbuffer.h>
60 #include <private/qimage_p.h>
61 #include <qendian.h>
62 
63 #include <algorithm>
64 QT_BEGIN_NAMESPACE
65 
66 class QXcbShmImage : public QXcbObject
67 {
68 public:
69     QXcbShmImage(QXcbScreen *connection, const QSize &size, uint depth, QImage::Format format);
70     ~QXcbShmImage() { destroy(true); }
71 
72     void resize(const QSize &size);
73 
74     void flushScrolledRegion(bool clientSideScroll);
75 
76     bool scroll(const QRegion &area, int dx, int dy);
77 
78     QImage *image() { return &m_qimage; }
79     QPlatformGraphicsBuffer *graphicsBuffer() { return m_graphics_buffer; }
80 
81     QSize size() const { return m_qimage.size(); }
82 
83     bool hasAlpha() const { return m_hasAlpha; }
84     bool hasShm() const { return m_shm_info.shmaddr != nullptr; }
85 
86     void put(xcb_drawable_t dst, const QRegion &region, const QPoint &offset);
87     void preparePaint(const QRegion &region);
88 
89 private:
90     void doResize(const QSize &size, const xcb_format_t *fmt, QImage::Format format);
91 
92     void destroy(bool destroyShm);
93     void doDestroyShm(bool detachFromXcb);
94 
95     void ensureGC(xcb_drawable_t dst);
96     void shmPutImage(xcb_drawable_t drawable, const QRegion &region, const QPoint offset = QPoint());
97     void flushPixmap(const QRegion &region, bool fullRegion = false);
98     void setClip(const QRegion &region);
99 
100     xcb_window_t m_screen_root;
101 
102     xcb_shm_segment_info_t m_shm_info;
103     qint32 m_segmentSize;
104 
105     xcb_image_t *m_xcb_image;
106 
107     QImage m_qimage;
108     QPlatformGraphicsBuffer *m_graphics_buffer;
109 
110     xcb_gcontext_t m_gc;
111     xcb_drawable_t m_gc_drawable;
112 
113     // When using shared memory these variables are used only for server-side scrolling.
114     // When not using shared memory, we maintain a server-side pixmap with the backing
115     // store as well as repainted content not yet flushed to the pixmap. We only flush
116     // the regions we need and only when these are marked dirty. This way we can just
117     // do a server-side copy on expose instead of sending the pixels every time
118     xcb_pixmap_t m_xcb_pixmap;
119     QRegion m_pendingFlush;
120 
121     // This is the scrolled region which is stored in server-side pixmap
122     QRegion m_scrolledRegion;
123 
124     // When using shared memory this is the region currently shared with the server
125     QRegion m_dirtyShm;
126 
127     // When not using shared memory this is a temporary buffer which is uploaded
128     // as a pixmap region to server
129     QByteArray m_flushBuffer;
130 
131     bool m_hasAlpha;
132     bool m_clientSideScroll;
133 };
134 
135 class QXcbShmGraphicsBuffer : public QPlatformGraphicsBuffer
136 {
137 public:
138     QXcbShmGraphicsBuffer(QImage *image)
139         : QPlatformGraphicsBuffer(image->size(), QImage::toPixelFormat(image->format()))
140         , m_access_lock(QPlatformGraphicsBuffer::None)
141         , m_image(image)
142     { }
143 
144     bool doLock(AccessTypes access, const QRect &rect) override
145     {
146         Q_UNUSED(rect);
147         if (access & ~(QPlatformGraphicsBuffer::SWReadAccess | QPlatformGraphicsBuffer::SWWriteAccess))
148             return false;
149 
150         m_access_lock |= access;
151         return true;
152     }
153     void doUnlock() override { m_access_lock = None; }
154 
155     const uchar *data() const override { return m_image->bits(); }
156     uchar *data() override { return m_image->bits(); }
157     int bytesPerLine() const override { return m_image->bytesPerLine(); }
158 
159     Origin origin() const override { return QPlatformGraphicsBuffer::OriginTopLeft; }
160 private:
161     AccessTypes m_access_lock;
162     QImage *m_image;
163 };
164 
165 QXcbShmImage::QXcbShmImage(QXcbScreen *screen, const QSize &size, uint depth, QImage::Format format)
166     : QXcbObject(screen->connection())
167     , m_screen_root(screen->screen()->root)
168     , m_segmentSize(0)
169     , m_graphics_buffer(nullptr)
170     , m_gc(0)
171     , m_gc_drawable(0)
172     , m_xcb_pixmap(0)
173     , m_clientSideScroll(false)
174 {
175     const xcb_format_t *fmt = connection()->formatForDepth(depth);
176     Q_ASSERT(fmt);
177 
178     m_hasAlpha = QImage::toPixelFormat(format).alphaUsage() == QPixelFormat::UsesAlpha;
179     if (!m_hasAlpha)
180         format = qt_maybeAlphaVersionWithSameDepth(format);
181 
182     memset(&m_shm_info, 0, sizeof m_shm_info);
183 
184     doResize(size, fmt, format);
185 }
186 
187 void QXcbShmImage::resize(const QSize &size)
188 {
189     xcb_format_t fmt;
190     memset(&fmt, 0, sizeof fmt);
191     fmt.depth = m_xcb_image->depth;
192     fmt.bits_per_pixel = m_xcb_image->bpp;
193     fmt.scanline_pad = m_xcb_image->scanline_pad;
194     destroy(false);
195     doResize(size, &fmt, m_qimage.format());
196 }
197 
198 void QXcbShmImage::doResize(const QSize &size, const xcb_format_t *fmt, QImage::Format format)
199 {
200     m_xcb_image = xcb_image_create(size.width(), size.height(),
201                                    XCB_IMAGE_FORMAT_Z_PIXMAP,
202                                    fmt->scanline_pad,
203                                    fmt->depth, fmt->bits_per_pixel, 0,
204                                    QSysInfo::ByteOrder == QSysInfo::BigEndian ? XCB_IMAGE_ORDER_MSB_FIRST : XCB_IMAGE_ORDER_LSB_FIRST,
205                                    XCB_IMAGE_ORDER_MSB_FIRST,
206                                    0, ~0, 0);
207 
208     const int segmentSize = m_xcb_image->stride * m_xcb_image->height;
209     if (!segmentSize)
210         return;
211 
212     int id = -1;
213 
214     if (hasShm() && m_segmentSize > 0 && (m_segmentSize < segmentSize || m_segmentSize >= segmentSize * 4)) {
215         doDestroyShm(true);
216         m_shm_info.shmaddr = 0;
217     }
218 
219     if (!hasShm()) {
220         m_segmentSize = segmentSize;
221 
222         id = shmget(IPC_PRIVATE, m_segmentSize, IPC_CREAT | 0600);
223 
224         if (id == -1) {
225             qWarning("QXcbShmImage: shmget() failed (%d: %s) for size %d (%dx%d)",
226                      errno, strerror(errno), m_segmentSize, size.width(), size.height());
227         } else {
228             m_shm_info.shmaddr = m_xcb_image->data = (quint8 *)shmat(id, 0, 0);
229         }
230 
231         m_shm_info.shmseg = xcb_generate_id(xcb_connection());
232         m_shm_info.shmid = id;
233 
234         const xcb_query_extension_reply_t *shm_reply = xcb_get_extension_data(xcb_connection(), &xcb_shm_id);
235         xcb_generic_error_t *error = NULL;
236         bool shm_present = shm_reply != NULL && shm_reply->present;
237         if (shm_present)
238             error = xcb_request_check(xcb_connection(), xcb_shm_attach_checked(xcb_connection(), m_shm_info.shmseg, m_shm_info.shmid, false));
239         if (!shm_present || error || id == -1) {
240             free(error);
241 
242             if (id != -1)
243                 doDestroyShm(false);
244             m_shm_info.shmaddr = 0;
245 
246             m_xcb_image->data = (uint8_t *)malloc(segmentSize);
247         } else {
248             if (shmctl(m_shm_info.shmid, IPC_RMID, 0) == -1)
249                 qWarning("QXcbBackingStore: Error while marking the shared memory segment to be destroyed");
250         }
251     } else {
252         id = m_shm_info.shmid;
253         m_xcb_image->data = m_shm_info.shmaddr;
254     }
255 
256     m_qimage = QImage( (uchar*) m_xcb_image->data, m_xcb_image->width, m_xcb_image->height, m_xcb_image->stride, format);
257     m_graphics_buffer = new QXcbShmGraphicsBuffer(&m_qimage);
258 
259     m_xcb_pixmap = xcb_generate_id(xcb_connection());
260     xcb_create_pixmap(xcb_connection(),
261                       m_xcb_image->depth,
262                       m_xcb_pixmap,
263                       m_screen_root,
264                       m_xcb_image->width, m_xcb_image->height);
265 }
266 
267 void QXcbShmImage::flushScrolledRegion(bool clientSideScroll)
268 {
269     if (m_clientSideScroll == clientSideScroll)
270        return;
271 
272     m_clientSideScroll = clientSideScroll;
273 
274     if (m_scrolledRegion.isNull())
275         return;
276 
277     if (hasShm())
278         connection()->sync();
279 
280     if (m_clientSideScroll) {
281         // Copy scrolled image region from server-side pixmap to client-side memory
282         for (const QRect &rect : m_scrolledRegion) {
283             const int w = rect.width();
284             const int h = rect.height();
285 
286             auto reply = Q_XCB_REPLY_UNCHECKED(xcb_get_image,
287                                                xcb_connection(),
288                                                m_xcb_image->format,
289                                                m_xcb_pixmap,
290                                                rect.x(), rect.y(),
291                                                w, h,
292                                                ~0u);
293 
294             if (reply && reply->depth == m_xcb_image->depth) {
295                 const QImage img(xcb_get_image_data(reply.get()), w, h, m_qimage.format());
296 
297                 QPainter p(&m_qimage);
298                 p.setCompositionMode(QPainter::CompositionMode_Source);
299                 p.drawImage(rect.topLeft(), img);
300             }
301         }
302         m_scrolledRegion = QRegion();
303     } else {
304         // Copy scrolled image region from client-side memory to server-side pixmap
305         ensureGC(m_xcb_pixmap);
306         if (hasShm())
307             shmPutImage(m_xcb_pixmap, m_scrolledRegion);
308         else
309             flushPixmap(m_scrolledRegion, true);
310     }
311 }
312 
313 extern void qt_scrollRectInImage(QImage &img, const QRect &rect, const QPoint &offset);
314 
315 bool QXcbShmImage::scroll(const QRegion &area, int dx, int dy)
316 {
317     const QRect bounds(QPoint(), size());
318     const QPoint delta(dx, dy);
319 
320     if (m_clientSideScroll) {
321         if (m_qimage.isNull())
322             return false;
323 
324         if (hasShm())
325             preparePaint(area);
326 
327         for (const QRect &rect : area)
328             qt_scrollRectInImage(m_qimage, rect, delta);
329     } else {
330         if (hasShm())
331             shmPutImage(m_xcb_pixmap, m_pendingFlush.intersected(area));
332         else
333             flushPixmap(area);
334 
335         ensureGC(m_xcb_pixmap);
336 
337         for (const QRect &src : area) {
338             const QRect dst = src.translated(delta).intersected(bounds);
339             xcb_copy_area(xcb_connection(),
340                           m_xcb_pixmap,
341                           m_xcb_pixmap,
342                           m_gc,
343                           src.x(), src.y(),
344                           dst.x(), dst.y(),
345                           dst.width(), dst.height());
346         }
347     }
348 
349     m_scrolledRegion |= area.translated(delta).intersected(bounds);
350     if (hasShm()) {
351         m_pendingFlush -= area;
352         m_pendingFlush -= m_scrolledRegion;
353     }
354 
355     return true;
356 }
357 
358 void QXcbShmImage::destroy(bool destroyShm)
359 {
360     const int segmentSize = m_xcb_image ? (m_xcb_image->stride * m_xcb_image->height) : 0;
361 
362     if (segmentSize) {
363         if (m_shm_info.shmaddr) {
364             if (destroyShm)
365                 doDestroyShm(true);
366         } else {
367             free(m_xcb_image->data);
368         }
369     }
370 
371     xcb_image_destroy(m_xcb_image);
372 
373     if (m_gc) {
374         xcb_free_gc(xcb_connection(), m_gc);
375         m_gc = 0;
376     }
377     m_gc_drawable = 0;
378 
379     delete m_graphics_buffer;
380     m_graphics_buffer = nullptr;
381 
382     xcb_free_pixmap(xcb_connection(), m_xcb_pixmap);
383     m_xcb_pixmap = 0;
384 }
385 
386 void QXcbShmImage::doDestroyShm(bool detachFromXcb)
387 {
388     if (detachFromXcb)
389         xcb_shm_detach(xcb_connection(), m_shm_info.shmseg);
390     shmdt(m_shm_info.shmaddr);
391     shmctl(m_shm_info.shmid, IPC_RMID, 0);
392 }
393 
394 void QXcbShmImage::ensureGC(xcb_drawable_t dst)
395 {
396     if (m_gc_drawable != dst) {
397         if (m_gc)
398             xcb_free_gc(xcb_connection(), m_gc);
399 
400         static const uint32_t mask = XCB_GC_GRAPHICS_EXPOSURES;
401         static const uint32_t values[] = { 0 };
402 
403         m_gc = xcb_generate_id(xcb_connection());
404         xcb_create_gc(xcb_connection(), m_gc, dst, mask, values);
405 
406         m_gc_drawable = dst;
407     }
408 }
409 
410 static inline void copy_unswapped(char *dst, int dstBytesPerLine, const QImage &img, const QRect &rect)
411 {
412     const uchar *srcData = img.constBits();
413     const int srcBytesPerLine = img.bytesPerLine();
414 
415     const int leftOffset = rect.left() * img.depth() >> 3;
416     const int bottom = rect.bottom() + 1;
417 
418     for (int yy = rect.top(); yy < bottom; ++yy) {
419         const uchar *src = srcData + yy * srcBytesPerLine + leftOffset;
420         ::memmove(dst, src, dstBytesPerLine);
421         dst += dstBytesPerLine;
422     }
423 }
424 
425 template <class Pixel>
426 static inline void copy_swapped(char *dst, const int dstStride, const QImage &img, const QRect &rect)
427 {
428     const uchar *srcData = img.constBits();
429     const int srcBytesPerLine = img.bytesPerLine();
430 
431     const int left = rect.left();
432     const int width = rect.width();
433     const int bottom = rect.bottom() + 1;
434 
435     for (int yy = rect.top(); yy < bottom; ++yy) {
436         Pixel *dstPixels = reinterpret_cast<Pixel *>(dst);
437         const Pixel *srcPixels = reinterpret_cast<const Pixel *>(srcData + yy * srcBytesPerLine) + left;
438 
439         for (int i = 0; i < width; ++i)
440             dstPixels[i] = qbswap<Pixel>(*srcPixels++);
441 
442         dst += dstStride;
443     }
444 }
445 
446 static QImage native_sub_image(QByteArray *buffer, const int dstStride, const QImage &src, const QRect &rect, bool swap)
447 {
448     if (!swap && src.rect() == rect && src.bytesPerLine() == dstStride)
449         return src;
450 
451     buffer->resize(rect.height() * dstStride);
452 
453     if (swap) {
454         switch (src.depth()) {
455         case 32:
456             copy_swapped<quint32>(buffer->data(), dstStride, src, rect);
457             break;
458         case 16:
459             copy_swapped<quint16>(buffer->data(), dstStride, src, rect);
460             break;
461         }
462     } else {
463         copy_unswapped(buffer->data(), dstStride, src, rect);
464     }
465 
466     return QImage(reinterpret_cast<const uchar *>(buffer->constData()), rect.width(), rect.height(), dstStride, src.format());
467 }
468 
469 static inline quint32 round_up_scanline(quint32 base, quint32 pad)
470 {
471     return (base + pad - 1) & -pad;
472 }
473 
474 void QXcbShmImage::shmPutImage(xcb_drawable_t drawable, const QRegion &region, const QPoint offset)
475 {
476     for (const QRect &rect : region) {
477         const QPoint source = rect.translated(offset).topLeft();
478         xcb_shm_put_image(xcb_connection(),
479                           drawable,
480                           m_gc,
481                           m_xcb_image->width,
482                           m_xcb_image->height,
483                           source.x(), source.y(),
484                           rect.width(), rect.height(),
485                           rect.x(), rect.y(),
486                           m_xcb_image->depth,
487                           m_xcb_image->format,
488                           0, // send event?
489                           m_shm_info.shmseg,
490                           m_xcb_image->data - m_shm_info.shmaddr);
491     }
492     m_dirtyShm |= region.translated(offset);
493 }
494 
495 void QXcbShmImage::flushPixmap(const QRegion &region, bool fullRegion)
496 {
497     QVector<QRect> rects;
498     if (!fullRegion) {
499         rects = m_pendingFlush.intersected(region).rects();
500         m_pendingFlush -= region;
501     } else {
502         rects = region.rects();
503     }
504 
505     xcb_image_t xcb_subimage;
506     memset(&xcb_subimage, 0, sizeof(xcb_image_t));
507 
508     xcb_subimage.format = m_xcb_image->format;
509     xcb_subimage.scanline_pad = m_xcb_image->scanline_pad;
510     xcb_subimage.depth = m_xcb_image->depth;
511     xcb_subimage.bpp = m_xcb_image->bpp;
512     xcb_subimage.unit = m_xcb_image->unit;
513     xcb_subimage.plane_mask = m_xcb_image->plane_mask;
514     xcb_subimage.byte_order = (xcb_image_order_t) connection()->setup()->image_byte_order;
515     xcb_subimage.bit_order = m_xcb_image->bit_order;
516 
517     const bool needsByteSwap = xcb_subimage.byte_order != m_xcb_image->byte_order;
518 
519     for (const QRect &rect : qAsConst(rects)) {
520         // We must make sure that each request is not larger than max_req_size.
521         // Each request takes req_size + m_xcb_image->stride * height bytes.
522         static const uint32_t req_size = sizeof(xcb_put_image_request_t);
523         const uint32_t max_req_size = xcb_get_maximum_request_length(xcb_connection());
524         const int rows_per_put = (max_req_size - req_size) / m_xcb_image->stride;
525 
526         // This assert could trigger if a single row has more pixels than fit in
527         // a single PutImage request. However, max_req_size is guaranteed to be
528         // at least 16384 bytes. That should be enough for quite large images.
529         Q_ASSERT(rows_per_put > 0);
530 
531         // If we upload the whole image in a single chunk, the result might be
532         // larger than the server's maximum request size and stuff breaks.
533         // To work around that, we upload the image in chunks where each chunk
534         // is small enough for a single request.
535         const int x = rect.x();
536         int y = rect.y();
537         const int width = rect.width();
538         int height = rect.height();
539 
540         while (height > 0) {
541             const int rows = std::min(height, rows_per_put);
542             const QRect subRect(x, y, width, rows);
543             const quint32 stride = round_up_scanline(width * m_qimage.depth(), xcb_subimage.scanline_pad) >> 3;
544             const QImage subImage = native_sub_image(&m_flushBuffer, stride, m_qimage, subRect, needsByteSwap);
545 
546             xcb_subimage.width = width;
547             xcb_subimage.height = rows;
548             xcb_subimage.data = const_cast<uint8_t *>(subImage.constBits());
549             xcb_image_annotate(&xcb_subimage);
550 
551             xcb_image_put(xcb_connection(),
552                           m_xcb_pixmap,
553                           m_gc,
554                           &xcb_subimage,
555                           x,
556                           y,
557                           0);
558 
559             y += rows;
560             height -= rows;
561         }
562     }
563 }
564 
565 void QXcbShmImage::setClip(const QRegion &region)
566 {
567     if (region.isEmpty()) {
568         static const uint32_t mask = XCB_GC_CLIP_MASK;
569         static const uint32_t values[] = { XCB_NONE };
570         xcb_change_gc(xcb_connection(), m_gc, mask, values);
571     } else {
572         const QVector<QRect> qrects = region.rects();
573         QVector<xcb_rectangle_t> xcb_rects(qrects.size());
574 
575         for (int i = 0; i < qrects.size(); i++) {
576             xcb_rects[i].x = qrects[i].x();
577             xcb_rects[i].y = qrects[i].y();
578             xcb_rects[i].width = qrects[i].width();
579             xcb_rects[i].height = qrects[i].height();
580         }
581 
582         xcb_set_clip_rectangles(xcb_connection(),
583                                 XCB_CLIP_ORDERING_YX_BANDED,
584                                 m_gc,
585                                 0, 0,
586                                 xcb_rects.size(), xcb_rects.constData());
587     }
588 }
589 
590 void QXcbShmImage::put(xcb_drawable_t dst, const QRegion &region, const QPoint &offset)
591 {
592     Q_ASSERT(!m_clientSideScroll);
593 
594     ensureGC(dst);
595     setClip(region);
596 
597     if (hasShm()) {
598         // Copy scrolled area on server-side from pixmap to window
599         const QRegion scrolledRegion = m_scrolledRegion.translated(-offset);
600         for (const QRect &rect : scrolledRegion) {
601             const QPoint source = rect.translated(offset).topLeft();
602             xcb_copy_area(xcb_connection(),
603                           m_xcb_pixmap,
604                           dst,
605                           m_gc,
606                           source.x(), source.y(),
607                           rect.x(), rect.y(),
608                           rect.width(), rect.height());
609         }
610 
611         // Copy non-scrolled image from client-side memory to server-side window
612         const QRegion notScrolledArea = region - scrolledRegion;
613         shmPutImage(dst, notScrolledArea, offset);
614     } else {
615         const QRect bounds = region.boundingRect();
616         const QPoint target = bounds.topLeft();
617         const QRect source = bounds.translated(offset);
618         flushPixmap(region);
619         xcb_copy_area(xcb_connection(),
620                       m_xcb_pixmap,
621                       dst,
622                       m_gc,
623                       source.x(), source.y(),
624                       target.x(), target.y(),
625                       source.width(), source.height());
626     }
627 
628     setClip(QRegion());
629 }
630 
631 void QXcbShmImage::preparePaint(const QRegion &region)
632 {
633     if (hasShm()) {
634         // to prevent X from reading from the image region while we're writing to it
635         if (m_dirtyShm.intersects(region)) {
636             connection()->sync();
637             m_dirtyShm = QRegion();
638         }
639     }
640     m_scrolledRegion -= region;
641     m_pendingFlush |= region;
642 }
643 
644 QXcbBackingStore::QXcbBackingStore(QWindow *window)
645     : QPlatformBackingStore(window)
646     , m_image(0)
647 {
648     QXcbScreen *screen = static_cast<QXcbScreen *>(window->screen()->handle());
649     setConnection(screen->connection());
650 }
651 
652 QXcbBackingStore::~QXcbBackingStore()
653 {
654     delete m_image;
655 }
656 
657 QPaintDevice *QXcbBackingStore::paintDevice()
658 {
659     if (!m_image)
660         return 0;
661     return m_rgbImage.isNull() ? m_image->image() : &m_rgbImage;
662 }
663 
664 void QXcbBackingStore::beginPaint(const QRegion &region)
665 {
666     if (!m_image)
667         return;
668 
669     m_paintRegions.push(region);
670     m_image->preparePaint(region);
671 
672     if (m_image->hasAlpha()) {
673         QPainter p(paintDevice());
674         p.setCompositionMode(QPainter::CompositionMode_Source);
675         const QColor blank = Qt::transparent;
676         for (const QRect &rect : region)
677             p.fillRect(rect, blank);
678     }
679 }
680 
681 void QXcbBackingStore::endPaint()
682 {
683     if (Q_UNLIKELY(m_paintRegions.isEmpty())) {
684         qWarning("%s: paint regions empty!", Q_FUNC_INFO);
685         return;
686     }
687 
688     const QRegion region = m_paintRegions.pop();
689     m_image->preparePaint(region);
690 
691     QXcbWindow *platformWindow = static_cast<QXcbWindow *>(window()->handle());
692     if (!platformWindow || !platformWindow->imageNeedsRgbSwap())
693         return;
694 
695     // Slow path: the paint device was m_rgbImage. Now copy with swapping red
696     // and blue into m_image.
697     auto it = region.begin();
698     const auto end = region.end();
699     if (it == end)
700         return;
701     QPainter p(m_image->image());
702     while (it != end) {
703         const QRect rect = *(it++);
704         p.drawImage(rect.topLeft(), m_rgbImage.copy(rect).rgbSwapped());
705     }
706 }
707 
708 QImage QXcbBackingStore::toImage() const
709 {
710     return m_image && m_image->image() ? *m_image->image() : QImage();
711 }
712 
713 QPlatformGraphicsBuffer *QXcbBackingStore::graphicsBuffer() const
714 {
715     return m_image ? m_image->graphicsBuffer() : nullptr;
716 }
717 
718 void QXcbBackingStore::flush(QWindow *window, const QRegion &region, const QPoint &offset)
719 {
720     if (!m_image || m_image->size().isEmpty())
721         return;
722 
723     m_image->flushScrolledRegion(false);
724 
725     QSize imageSize = m_image->size();
726 
727     QRegion clipped = region;
728     clipped &= QRect(QPoint(), QHighDpi::toNativePixels(window->size(), window));
729     clipped &= QRect(0, 0, imageSize.width(), imageSize.height()).translated(-offset);
730 
731     QRect bounds = clipped.boundingRect();
732 
733     if (bounds.isNull())
734         return;
735 
736     QXcbWindow *platformWindow = static_cast<QXcbWindow *>(window->handle());
737     if (!platformWindow) {
738         qWarning("QXcbBackingStore::flush: QWindow has no platform window (QTBUG-32681)");
739         return;
740     }
741 
742     m_image->put(platformWindow->xcb_window(), clipped, offset);
743 
744     if (platformWindow->needsSync())
745         platformWindow->updateSyncRequestCounter();
746     else
747         xcb_flush(xcb_connection());
748 }
749 
750 #ifndef QT_NO_OPENGL
751 void QXcbBackingStore::composeAndFlush(QWindow *window, const QRegion &region, const QPoint &offset,
752                                        QPlatformTextureList *textures,
753                                        bool translucentBackground)
754 {
755     if (!m_image || m_image->size().isEmpty())
756         return;
757 
758     m_image->flushScrolledRegion(true);
759 
760     QPlatformBackingStore::composeAndFlush(window, region, offset, textures, translucentBackground);
761 
762     QXcbWindow *platformWindow = static_cast<QXcbWindow *>(window->handle());
763     if (platformWindow->needsSync()) {
764         platformWindow->updateSyncRequestCounter();
765     } else {
766         xcb_flush(xcb_connection());
767     }
768 }
769 #endif // QT_NO_OPENGL
770 
771 void QXcbBackingStore::resize(const QSize &size, const QRegion &)
772 {
773     if (m_image && size == m_image->size())
774         return;
775 
776     QPlatformWindow *pw = window()->handle();
777     if (!pw) {
778         window()->create();
779         pw = window()->handle();
780     }
781     QXcbWindow* win = static_cast<QXcbWindow *>(pw);
782 
783     if (m_image) {
784         m_image->resize(size);
785     } else {
786         QXcbScreen *screen = static_cast<QXcbScreen *>(window()->screen()->handle());
787         m_image = new QXcbShmImage(screen, size, win->depth(), win->imageFormat());
788     }
789 
790     // Slow path for bgr888 VNC: Create an additional image, paint into that and
791     // swap R and B while copying to m_image after each paint.
792     if (win->imageNeedsRgbSwap()) {
793         m_rgbImage = QImage(size, win->imageFormat());
794     }
795 }
796 
797 bool QXcbBackingStore::scroll(const QRegion &area, int dx, int dy)
798 {
799     if (m_image)
800         return m_image->scroll(area, dx, dy);
801 
802     return false;
803 }
804 
805 QT_END_NAMESPACE
