Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2018 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 
41 #include "qcolortransform.h"
42 #include "qcolortransform_p.h"
43 
44 #include "qcolormatrix_p.h"
45 #include "qcolorspace_p.h"
46 #include "qcolortrc_p.h"
47 #include "qcolortrclut_p.h"
48 
49 #include <QtCore/qatomic.h>
50 #include <QtCore/qmath.h>
51 #include <QtGui/qcolor.h>
52 #include <QtGui/qtransform.h>
53 #include <QtCore/private/qsimd_p.h>
54 
55 #include <qdebug.h>
56 
57 QT_BEGIN_NAMESPACE
58 
59 QColorTrcLut *lutFromTrc(const QColorTrc &trc)
60 {
61     if (trc.m_type == QColorTrc::Type::Table)
62         return QColorTrcLut::fromTransferTable(trc.m_table);
63     if (trc.m_type == QColorTrc::Type::Function)
64         return QColorTrcLut::fromTransferFunction(trc.m_fun);
65     qWarning() << "TRC uninitialized";
66     return nullptr;
67 }
68 
69 void QColorTransformPrivate::updateLutsIn() const
70 {
71     if (colorSpaceIn->lutsGenerated.loadAcquire())
72         return;
73     for (int i = 0; i < 3; ++i) {
74         if (!colorSpaceIn->trc[i].isValid())
75             return;
76     }
77 
78     if (colorSpaceIn->trc[0] == colorSpaceIn->trc[1] && colorSpaceIn->trc[0] == colorSpaceIn->trc[2]) {
79         colorSpaceIn->lut[0].reset(lutFromTrc(colorSpaceIn->trc[0]));
80         colorSpaceIn->lut[1] = colorSpaceIn->lut[0];
81         colorSpaceIn->lut[2] = colorSpaceIn->lut[0];
82     } else {
83         for (int i = 0; i < 3; ++i)
84             colorSpaceIn->lut[i].reset(lutFromTrc(colorSpaceIn->trc[i]));
85     }
86 
87     colorSpaceIn->lutsGenerated.storeRelease(1);
88 }
89 
90 void QColorTransformPrivate::updateLutsOut() const
91 {
92     if (colorSpaceOut->lutsGenerated.loadAcquire())
93         return;
94     for (int i = 0; i < 3; ++i) {
95         if (!colorSpaceOut->trc[i].isValid())
96             return;
97     }
98 
99     if (colorSpaceOut->trc[0] == colorSpaceOut->trc[1] && colorSpaceOut->trc[0] == colorSpaceOut->trc[2]) {
100         colorSpaceOut->lut[0].reset(lutFromTrc(colorSpaceOut->trc[0]));
101         colorSpaceOut->lut[1] = colorSpaceOut->lut[0];
102         colorSpaceOut->lut[2] = colorSpaceOut->lut[0];
103     } else {
104         for (int i = 0; i < 3; ++i)
105             colorSpaceOut->lut[i].reset(lutFromTrc(colorSpaceOut->trc[i]));
106     }
107 
108     colorSpaceOut->lutsGenerated.storeRelease(1);
109 }
110 
111 /*!
112     \class QColorTransform
113     \brief The QColorTransform class is a transformation between color spaces.
114     \since 5.14
115 
116     \ingroup painting
117     \ingroup appearance
118     \inmodule QtGui
119 
120     QColorTransform is an instantiation of a transformation between color spaces.
121     It can be applied on color and pixels to convert them from one color space to
122     another.
123 
124     Setting up a QColorTransform takes some preprocessing, so keeping around
125     QColorTransforms that you need often is recommended, instead of generating
126     them on the fly.
127 */
128 
129 
130 QColorTransform::~QColorTransform() noexcept
131 {
132 }
133 
134 /*!
135     Applies the color transformation on the QRgb value \a argb.
136 
137     The input should be opaque or unpremultiplied.
138 */
139 QRgb QColorTransform::map(const QRgb &argb) const
140 {
141     if (!d_ptr)
142         return argb;
143     Q_D(const QColorTransform);
144     constexpr float f = 1.0f / 255.0f;
145     QColorVector c = { qRed(argb) * f, qGreen(argb) * f, qBlue(argb) * f };
146     c.x = d->colorSpaceIn->trc[0].apply(c.x);
147     c.y = d->colorSpaceIn->trc[1].apply(c.y);
148     c.z = d->colorSpaceIn->trc[2].apply(c.z);
149     c = d->colorMatrix.map(c);
150     c.x = std::max(0.0f, std::min(1.0f, c.x));
151     c.y = std::max(0.0f, std::min(1.0f, c.y));
152     c.z = std::max(0.0f, std::min(1.0f, c.z));
153     if (d->colorSpaceOut->lutsGenerated.loadAcquire()) {
154         c.x = d->colorSpaceOut->lut[0]->fromLinear(c.x);
155         c.y = d->colorSpaceOut->lut[1]->fromLinear(c.y);
156         c.z = d->colorSpaceOut->lut[2]->fromLinear(c.z);
157     } else {
158         c.x = d->colorSpaceOut->trc[0].applyInverse(c.x);
159         c.y = d->colorSpaceOut->trc[1].applyInverse(c.y);
160         c.z = d->colorSpaceOut->trc[2].applyInverse(c.z);
161     }
162 
163     return qRgba(c.x * 255 + 0.5f, c.y * 255 + 0.5f, c.z * 255 + 0.5f, qAlpha(argb));
164 }
165 
166 /*!
167     Applies the color transformation on the QRgba64 value \a rgba64.
168 
169     The input should be opaque or unpremultiplied.
170 */
171 QRgba64 QColorTransform::map(const QRgba64 &rgba64) const
172 {
173     if (!d_ptr)
174         return rgba64;
175     Q_D(const QColorTransform);
176     constexpr float f = 1.0f / 65535.0f;
177     QColorVector c = { rgba64.red() * f, rgba64.green() * f, rgba64.blue() * f };
178     c.x = d->colorSpaceIn->trc[0].apply(c.x);
179     c.y = d->colorSpaceIn->trc[1].apply(c.y);
180     c.z = d->colorSpaceIn->trc[2].apply(c.z);
181     c = d->colorMatrix.map(c);
182     c.x = std::max(0.0f, std::min(1.0f, c.x));
183     c.y = std::max(0.0f, std::min(1.0f, c.y));
184     c.z = std::max(0.0f, std::min(1.0f, c.z));
185     if (d->colorSpaceOut->lutsGenerated.loadAcquire()) {
186         c.x = d->colorSpaceOut->lut[0]->fromLinear(c.x);
187         c.y = d->colorSpaceOut->lut[1]->fromLinear(c.y);
188         c.z = d->colorSpaceOut->lut[2]->fromLinear(c.z);
189     } else {
190         c.x = d->colorSpaceOut->trc[0].applyInverse(c.x);
191         c.y = d->colorSpaceOut->trc[1].applyInverse(c.y);
192         c.z = d->colorSpaceOut->trc[2].applyInverse(c.z);
193     }
194 
195     return QRgba64::fromRgba64(c.x * 65535, c.y * 65535, c.z * 65535, rgba64.alpha());
196 }
197 
198 /*!
199     Applies the color transformation on the QColor value \a color.
200 
201 */
202 QColor QColorTransform::map(const QColor &color) const
203 {
204     if (!d_ptr)
205         return color;
206     Q_D(const QColorTransform);
207     QColorVector c = { (float)color.redF(), (float)color.greenF(), (float)color.blueF() };
208     c.x = d->colorSpaceIn->trc[0].apply(c.x);
209     c.y = d->colorSpaceIn->trc[1].apply(c.y);
210     c.z = d->colorSpaceIn->trc[2].apply(c.z);
211     c = d->colorMatrix.map(c);
212     if (d_ptr->colorSpaceOut->lutsGenerated.loadAcquire()) {
213         c.x = d->colorSpaceOut->lut[0]->fromLinear(c.x);
214         c.y = d->colorSpaceOut->lut[1]->fromLinear(c.y);
215         c.z = d->colorSpaceOut->lut[2]->fromLinear(c.z);
216     } else {
217         c.x = d->colorSpaceOut->trc[0].applyInverse(c.x);
218         c.y = d->colorSpaceOut->trc[1].applyInverse(c.y);
219         c.z = d->colorSpaceOut->trc[2].applyInverse(c.z);
220     }
221     QColor out;
222     out.setRgbF(c.x, c.y, c.z, color.alphaF());
223     return out;
224 }
225 
226 // Optimized sub-routines for fast block based conversion:
227 
228 static void applyMatrix(QColorVector *buffer, const qsizetype len, const QColorMatrix &colorMatrix)
229 {
230 #if defined(__SSE2__)
231     const __m128 minV = _mm_set1_ps(0.0f);
232     const __m128 maxV = _mm_set1_ps(1.0f);
233     const __m128 xMat = _mm_loadu_ps(&colorMatrix.r.x);
234     const __m128 yMat = _mm_loadu_ps(&colorMatrix.g.x);
235     const __m128 zMat = _mm_loadu_ps(&colorMatrix.b.x);
236     for (qsizetype j = 0; j < len; ++j) {
237         __m128 c = _mm_loadu_ps(&buffer[j].x);
238         __m128 cx = _mm_shuffle_ps(c, c, _MM_SHUFFLE(0, 0, 0, 0));
239         __m128 cy = _mm_shuffle_ps(c, c, _MM_SHUFFLE(1, 1, 1, 1));
240         __m128 cz = _mm_shuffle_ps(c, c, _MM_SHUFFLE(2, 2, 2, 2));
241         cx = _mm_mul_ps(cx, xMat);
242         cy = _mm_mul_ps(cy, yMat);
243         cz = _mm_mul_ps(cz, zMat);
244         cx = _mm_add_ps(cx, cy);
245         cx = _mm_add_ps(cx, cz);
246         // Clamp:
247         cx = _mm_min_ps(cx, maxV);
248         cx = _mm_max_ps(cx, minV);
249         _mm_storeu_ps(&buffer[j].x, cx);
250     }
251 #else
252     for (int j = 0; j < len; ++j) {
253         const QColorVector cv = colorMatrix.map(buffer[j]);
254         buffer[j].x = std::max(0.0f, std::min(1.0f, cv.x));
255         buffer[j].y = std::max(0.0f, std::min(1.0f, cv.y));
256         buffer[j].z = std::max(0.0f, std::min(1.0f, cv.z));
257     }
258 #endif
259 }
260 
261 template<typename T>
262 static void loadPremultiplied(QColorVector *buffer, const T *src, const qsizetype len, const QColorTransformPrivate *d_ptr);
263 template<typename T>
264 static void loadUnpremultiplied(QColorVector *buffer, const T *src, const qsizetype len, const QColorTransformPrivate *d_ptr);
265 
266 #if defined(__SSE2__)
267 // Load to [0-alpha] in 4x32 SIMD
268 template<typename T>
269 static inline void loadP(const T &p, __m128i &v);
270 
271 template<>
272 inline void loadP<QRgb>(const QRgb &p, __m128i &v)
273 {
274     v = _mm_cvtsi32_si128(p);
275 #if defined(__SSE4_1__)
276     v = _mm_cvtepu8_epi32(v);
277 #else
278     v = _mm_unpacklo_epi8(v, _mm_setzero_si128());
279     v = _mm_unpacklo_epi16(v, _mm_setzero_si128());
280 #endif
281 }
282 
283 template<>
284 inline void loadP<QRgba64>(const QRgba64 &p, __m128i &v)
285 {
286     v = _mm_loadl_epi64((const __m128i *)&p);
287 #if defined(__SSE4_1__)
288     v = _mm_cvtepu16_epi32(v);
289 #else
290     v = _mm_unpacklo_epi16(v, _mm_setzero_si128());
291 #endif
292     // Shuffle to ARGB as the template below expects it
293     v = _mm_shuffle_epi32(v, _MM_SHUFFLE(3, 0, 1, 2));
294 }
295 
296 template<typename T>
297 static void loadPremultiplied(QColorVector *buffer, const T *src, const qsizetype len, const QColorTransformPrivate *d_ptr)
298 {
299     const __m128 v4080 = _mm_set1_ps(4080.f);
300     const __m128 iFF00 = _mm_set1_ps(1.0f / (255 * 256));
301     for (qsizetype i = 0; i < len; ++i) {
302         __m128i v;
303         loadP<T>(src[i], v);
304         __m128 vf = _mm_cvtepi32_ps(v);
305         // Approximate 1/a:
306         __m128 va = _mm_shuffle_ps(vf, vf, _MM_SHUFFLE(3, 3, 3, 3));
307         __m128 via = _mm_rcp_ps(va);
308         via = _mm_sub_ps(_mm_add_ps(via, via), _mm_mul_ps(via, _mm_mul_ps(via, va)));
309         // v * (1/a)
310         vf = _mm_mul_ps(vf, via);
311 
312         // Handle zero alpha
313         __m128 vAlphaMask = _mm_cmpeq_ps(va, _mm_set1_ps(0.0f));
314         vf = _mm_andnot_ps(vAlphaMask, vf);
315 
316         // LUT
317         v = _mm_cvtps_epi32(_mm_mul_ps(vf, v4080));
318         const int ridx = _mm_extract_epi16(v, 4);
319         const int gidx = _mm_extract_epi16(v, 2);
320         const int bidx = _mm_extract_epi16(v, 0);
321         v = _mm_insert_epi16(v, d_ptr->colorSpaceIn->lut[0]->m_toLinear[ridx], 0);
322         v = _mm_insert_epi16(v, d_ptr->colorSpaceIn->lut[1]->m_toLinear[gidx], 2);
323         v = _mm_insert_epi16(v, d_ptr->colorSpaceIn->lut[2]->m_toLinear[bidx], 4);
324         vf = _mm_mul_ps(_mm_cvtepi32_ps(v), iFF00);
325 
326         _mm_storeu_ps(&buffer[i].x, vf);
327     }
328 }
329 
330 // Load to [0-4080] in 4x32 SIMD
331 template<typename T>
332 static inline void loadPU(const T &p, __m128i &v);
333 
334 template<>
335 inline void loadPU<QRgb>(const QRgb &p, __m128i &v)
336 {
337     v = _mm_cvtsi32_si128(p);
338 #if defined(__SSE4_1__)
339     v = _mm_cvtepu8_epi32(v);
340 #else
341     v = _mm_unpacklo_epi8(v, _mm_setzero_si128());
342     v = _mm_unpacklo_epi16(v, _mm_setzero_si128());
343 #endif
344     v = _mm_slli_epi32(v, 4);
345 }
346 
347 template<>
348 inline void loadPU<QRgba64>(const QRgba64 &p, __m128i &v)
349 {
350     v = _mm_loadl_epi64((const __m128i *)&p);
351     v = _mm_sub_epi16(v, _mm_srli_epi16(v, 8));
352 #if defined(__SSE4_1__)
353     v = _mm_cvtepu16_epi32(v);
354 #else
355     v = _mm_unpacklo_epi16(v, _mm_setzero_si128());
356 #endif
357     v = _mm_srli_epi32(v, 4);
358     // Shuffle to ARGB as the template below expects it
359     v = _mm_shuffle_epi32(v, _MM_SHUFFLE(3, 0, 1, 2));
360 }
361 
362 template<typename T>
363 void loadUnpremultiplied(QColorVector *buffer, const T *src, const qsizetype len, const QColorTransformPrivate *d_ptr)
364 {
365     const __m128 iFF00 = _mm_set1_ps(1.0f / (255 * 256));
366     for (qsizetype i = 0; i < len; ++i) {
367         __m128i v;
368         loadPU<T>(src[i], v);
369         const int ridx = _mm_extract_epi16(v, 4);
370         const int gidx = _mm_extract_epi16(v, 2);
371         const int bidx = _mm_extract_epi16(v, 0);
372         v = _mm_insert_epi16(v, d_ptr->colorSpaceIn->lut[0]->m_toLinear[ridx], 0);
373         v = _mm_insert_epi16(v, d_ptr->colorSpaceIn->lut[1]->m_toLinear[gidx], 2);
374         v = _mm_insert_epi16(v, d_ptr->colorSpaceIn->lut[2]->m_toLinear[bidx], 4);
375         __m128 vf = _mm_mul_ps(_mm_cvtepi32_ps(v), iFF00);
376         _mm_storeu_ps(&buffer[i].x, vf);
377     }
378 }
379 
380 #else
381 template<>
382 void loadPremultiplied<QRgb>(QColorVector *buffer, const QRgb *src, const qsizetype len, const QColorTransformPrivate *d_ptr)
383 {
384     for (qsizetype i = 0; i < len; ++i) {
385         const uint p = src[i];
386         const int a = qAlpha(p);
387         if (a) {
388             const float ia = 4080.0f / a;
389             const int ridx = int(qRed(p)   * ia + 0.5f);
390             const int gidx = int(qGreen(p) * ia + 0.5f);
391             const int bidx = int(qBlue(p)  * ia + 0.5f);
392             buffer[i].x = d_ptr->colorSpaceIn->lut[0]->m_toLinear[ridx] * (1.0f / (255 * 256));
393             buffer[i].y = d_ptr->colorSpaceIn->lut[1]->m_toLinear[gidx] * (1.0f / (255 * 256));
394             buffer[i].z = d_ptr->colorSpaceIn->lut[2]->m_toLinear[bidx] * (1.0f / (255 * 256));
395         } else {
396             buffer[i].x = buffer[i].y = buffer[i].z = 0.0f;
397         }
398     }
399 }
400 
401 template<>
402 void loadPremultiplied<QRgba64>(QColorVector *buffer, const QRgba64 *src, const qsizetype len, const QColorTransformPrivate *d_ptr)
403 {
404     for (qsizetype i = 0; i < len; ++i) {
405         const QRgba64 &p = src[i];
406         const int a = p.alpha();
407         if (a) {
408             const float ia = 4080.0f / a;
409             const int ridx = int(p.red()   * ia + 0.5f);
410             const int gidx = int(p.green() * ia + 0.5f);
411             const int bidx = int(p.blue()  * ia + 0.5f);
412             buffer[i].x = d_ptr->colorSpaceIn->lut[0]->m_toLinear[ridx] * (1.0f / (255 * 256));
413             buffer[i].y = d_ptr->colorSpaceIn->lut[1]->m_toLinear[gidx] * (1.0f / (255 * 256));
414             buffer[i].z = d_ptr->colorSpaceIn->lut[2]->m_toLinear[bidx] * (1.0f / (255 * 256));
415         } else {
416             buffer[i].x = buffer[i].y = buffer[i].z = 0.0f;
417         }
418     }
419 }
420 
421 template<>
422 void loadUnpremultiplied<QRgb>(QColorVector *buffer, const QRgb *src, const qsizetype len, const QColorTransformPrivate *d_ptr)
423 {
424     for (qsizetype i = 0; i < len; ++i) {
425         const uint p = src[i];
426         buffer[i].x = d_ptr->colorSpaceIn->lut[0]->u8ToLinearF32(qRed(p));
427         buffer[i].y = d_ptr->colorSpaceIn->lut[1]->u8ToLinearF32(qGreen(p));
428         buffer[i].z = d_ptr->colorSpaceIn->lut[2]->u8ToLinearF32(qBlue(p));
429     }
430 }
431 
432 template<>
433 void loadUnpremultiplied<QRgba64>(QColorVector *buffer, const QRgba64 *src, const qsizetype len, const QColorTransformPrivate *d_ptr)
434 {
435     for (qsizetype i = 0; i < len; ++i) {
436         const QRgba64 &p = src[i];
437         buffer[i].x = d_ptr->colorSpaceIn->lut[0]->u16ToLinearF32(p.red());
438         buffer[i].y = d_ptr->colorSpaceIn->lut[1]->u16ToLinearF32(p.green());
439         buffer[i].z = d_ptr->colorSpaceIn->lut[2]->u16ToLinearF32(p.blue());
440     }
441 }
442 #endif
443 
444 static void storePremultiplied(QRgb *dst, const QRgb *src, const QColorVector *buffer, const qsizetype len,
445                                const QColorTransformPrivate *d_ptr)
446 {
447 #if defined(__SSE2__)
448     const __m128 v4080 = _mm_set1_ps(4080.f);
449     const __m128 iFF00 = _mm_set1_ps(1.0f / (255 * 256));
450     for (qsizetype i = 0; i < len; ++i) {
451         const int a = qAlpha(src[i]);
452         __m128 vf = _mm_loadu_ps(&buffer[i].x);
453         __m128i v = _mm_cvtps_epi32(_mm_mul_ps(vf, v4080));
454         __m128 va = _mm_set1_ps(a);
455         va = _mm_mul_ps(va, iFF00);
456         const int ridx = _mm_extract_epi16(v, 0);
457         const int gidx = _mm_extract_epi16(v, 2);
458         const int bidx = _mm_extract_epi16(v, 4);
459         v = _mm_insert_epi16(v, d_ptr->colorSpaceOut->lut[0]->m_fromLinear[ridx], 4);
460         v = _mm_insert_epi16(v, d_ptr->colorSpaceOut->lut[1]->m_fromLinear[gidx], 2);
461         v = _mm_insert_epi16(v, d_ptr->colorSpaceOut->lut[2]->m_fromLinear[bidx], 0);
462         vf = _mm_cvtepi32_ps(v);
463         vf = _mm_mul_ps(vf, va);
464         v = _mm_cvtps_epi32(vf);
465         v = _mm_packs_epi32(v, v);
466         v = _mm_insert_epi16(v, a, 3);
467         v = _mm_packus_epi16(v, v);
468         dst[i] = _mm_cvtsi128_si32(v);
469     }
470 #else
471     for (qsizetype i = 0; i < len; ++i) {
472         const int a = qAlpha(src[i]);
473         const float fa = a / (255.0f * 256.0f);
474         const float r = d_ptr->colorSpaceOut->lut[0]->m_fromLinear[int(buffer[i].x * 4080.0f + 0.5f)];
475         const float g = d_ptr->colorSpaceOut->lut[1]->m_fromLinear[int(buffer[i].y * 4080.0f + 0.5f)];
476         const float b = d_ptr->colorSpaceOut->lut[2]->m_fromLinear[int(buffer[i].z * 4080.0f + 0.5f)];
477         dst[i] = qRgba(r * fa + 0.5f, g * fa + 0.5f, b * fa + 0.5f, a);
478     }
479 #endif
480 }
481 
482 static void storeUnpremultiplied(QRgb *dst, const QRgb *src, const QColorVector *buffer, const qsizetype len,
483                                  const QColorTransformPrivate *d_ptr)
484 {
485 #if defined(__SSE2__)
486     const __m128 v4080 = _mm_set1_ps(4080.f);
487     for (qsizetype i = 0; i < len; ++i) {
488         const int a = qAlpha(src[i]);
489         __m128 vf = _mm_loadu_ps(&buffer[i].x);
490         __m128i v = _mm_cvtps_epi32(_mm_mul_ps(vf, v4080));
491         const int ridx = _mm_extract_epi16(v, 0);
492         const int gidx = _mm_extract_epi16(v, 2);
493         const int bidx = _mm_extract_epi16(v, 4);
494         v = _mm_setzero_si128();
495         v = _mm_insert_epi16(v, d_ptr->colorSpaceOut->lut[0]->m_fromLinear[ridx], 2);
496         v = _mm_insert_epi16(v, d_ptr->colorSpaceOut->lut[1]->m_fromLinear[gidx], 1);
497         v = _mm_insert_epi16(v, d_ptr->colorSpaceOut->lut[2]->m_fromLinear[bidx], 0);
498         v = _mm_add_epi16(v, _mm_set1_epi16(0x80));
499         v = _mm_srli_epi16(v, 8);
500         v = _mm_insert_epi16(v, a, 3);
501         v = _mm_packus_epi16(v, v);
502         dst[i] = _mm_cvtsi128_si32(v);
503     }
504 #else
505     for (qsizetype i = 0; i < len; ++i) {
506         const int r = d_ptr->colorSpaceOut->lut[0]->u8FromLinearF32(buffer[i].x);
507         const int g = d_ptr->colorSpaceOut->lut[1]->u8FromLinearF32(buffer[i].y);
508         const int b = d_ptr->colorSpaceOut->lut[2]->u8FromLinearF32(buffer[i].z);
509         dst[i] = (src[i] & 0xff000000) | (r << 16) | (g << 8) | (b << 0);
510     }
511 #endif
512 }
513 
514 static void storeOpaque(QRgb *dst, const QRgb *src, const QColorVector *buffer, const qsizetype len,
515                         const QColorTransformPrivate *d_ptr)
516 {
517     Q_UNUSED(src);
518 #if defined(__SSE2__)
519     const __m128 v4080 = _mm_set1_ps(4080.f);
520     for (qsizetype i = 0; i < len; ++i) {
521         __m128 vf = _mm_loadu_ps(&buffer[i].x);
522         __m128i v = _mm_cvtps_epi32(_mm_mul_ps(vf, v4080));
523         const int ridx = _mm_extract_epi16(v, 0);
524         const int gidx = _mm_extract_epi16(v, 2);
525         const int bidx = _mm_extract_epi16(v, 4);
526         v = _mm_setzero_si128();
527         v = _mm_insert_epi16(v, d_ptr->colorSpaceOut->lut[0]->m_fromLinear[ridx], 2);
528         v = _mm_insert_epi16(v, d_ptr->colorSpaceOut->lut[1]->m_fromLinear[gidx], 1);
529         v = _mm_insert_epi16(v, d_ptr->colorSpaceOut->lut[2]->m_fromLinear[bidx], 0);
530         v = _mm_add_epi16(v, _mm_set1_epi16(0x80));
531         v = _mm_srli_epi16(v, 8);
532         v = _mm_insert_epi16(v, 255, 3);
533         v = _mm_packus_epi16(v, v);
534         dst[i] = _mm_cvtsi128_si32(v);
535     }
536 #else
537     for (qsizetype i = 0; i < len; ++i) {
538         const int r = d_ptr->colorSpaceOut->lut[0]->u8FromLinearF32(buffer[i].x);
539         const int g = d_ptr->colorSpaceOut->lut[1]->u8FromLinearF32(buffer[i].y);
540         const int b = d_ptr->colorSpaceOut->lut[2]->u8FromLinearF32(buffer[i].z);
541         dst[i] = 0xff000000 | (r << 16) | (g << 8) | (b << 0);
542     }
543 #endif
544 }
545 
546 static void storePremultiplied(QRgba64 *dst, const QRgba64 *src, const QColorVector *buffer, const qsizetype len,
547                                const QColorTransformPrivate *d_ptr)
548 {
549     for (qsizetype i = 0; i < len; ++i) {
550         const int a = src[i].alpha();
551         const float fa = a / (255.0f * 256.0f);
552         const float r = d_ptr->colorSpaceOut->lut[0]->m_fromLinear[int(buffer[i].x * 4080.0f + 0.5f)];
553         const float g = d_ptr->colorSpaceOut->lut[1]->m_fromLinear[int(buffer[i].y * 4080.0f + 0.5f)];
554         const float b = d_ptr->colorSpaceOut->lut[2]->m_fromLinear[int(buffer[i].z * 4080.0f + 0.5f)];
555         dst[i] = qRgba64(r * fa + 0.5f, g * fa + 0.5f, b * fa + 0.5f, a);
556     }
557 }
558 
559 static void storeUnpremultiplied(QRgba64 *dst, const QRgba64 *src, const QColorVector *buffer, const qsizetype len,
560                                  const QColorTransformPrivate *d_ptr)
561 {
562     for (qsizetype i = 0; i < len; ++i) {
563          const int r = d_ptr->colorSpaceOut->lut[0]->u16FromLinearF32(buffer[i].x);
564          const int g = d_ptr->colorSpaceOut->lut[1]->u16FromLinearF32(buffer[i].y);
565          const int b = d_ptr->colorSpaceOut->lut[2]->u16FromLinearF32(buffer[i].z);
566          dst[i] = qRgba64(r, g, b, src[i].alpha());
567     }
568 }
569 
570 static void storeOpaque(QRgba64 *dst, const QRgba64 *src, const QColorVector *buffer, const qsizetype len,
571                         const QColorTransformPrivate *d_ptr)
572 {
573     Q_UNUSED(src);
574     for (qsizetype i = 0; i < len; ++i) {
575         const int r = d_ptr->colorSpaceOut->lut[0]->u16FromLinearF32(buffer[i].x);
576         const int g = d_ptr->colorSpaceOut->lut[1]->u16FromLinearF32(buffer[i].y);
577         const int b = d_ptr->colorSpaceOut->lut[2]->u16FromLinearF32(buffer[i].z);
578         dst[i] = qRgba64(r, g, b, 0xFFFF);
579     }
580 }
581 
582 static constexpr qsizetype WorkBlockSize = 256;
583 
584 template<typename T>
585 void QColorTransformPrivate::apply(T *dst, const T *src, qsizetype count, TransformFlags flags) const
586 {
587     if (!colorMatrix.isValid())
588         return;
589 
590     updateLutsIn();
591     updateLutsOut();
592 
593     bool doApplyMatrix = (colorMatrix != QColorMatrix::identity());
594 
595     QColorVector buffer[WorkBlockSize];
596     qsizetype i = 0;
597     while (i < count) {
598         const qsizetype len = qMin(count - i, WorkBlockSize);
599         if (flags & InputPremultiplied)
600             loadPremultiplied(buffer, src + i, len, this);
601         else
602             loadUnpremultiplied(buffer, src + i, len, this);
603 
604         if (doApplyMatrix)
605             applyMatrix(buffer, len, colorMatrix);
606 
607         if (flags & InputOpaque)
608             storeOpaque(dst + i, src + i, buffer, len, this);
609         else if (flags & OutputPremultiplied)
610             storePremultiplied(dst + i, src + i, buffer, len, this);
611         else
612             storeUnpremultiplied(dst + i, src + i, buffer, len, this);
613 
614         i += len;
615     }
616 }
617 
618 /*!
619     \internal
620     \enum QColorTransformPrivate::TransformFlag
621 
622     Defines how the transform is to be applied.
623 
624     \value Unpremultiplied The input and output should both be unpremultiplied.
625     \value InputOpaque The input is guaranteed to be opaque.
626     \value InputPremultiplied The input is premultiplied.
627     \value OutputPremultiplied The output should be premultiplied.
628     \value Premultiplied Both input and output should both be premultiplied.
629 */
630 
631 /*!
632     \internal
633     Prepares a color transformation for fast application. You do not need to
634     call this explicitly as it will be called implicitly on the first transforms, but
635     if you want predictable performance on the first transforms, you can perform it
636     in advance.
637 
638     \sa QColorTransform::map(), apply()
639 */
640 void QColorTransformPrivate::prepare()
641 {
642     updateLutsIn();
643     updateLutsOut();
644 }
645 
646 /*!
647     \internal
648     Applies the color transformation on \a count QRgb pixels starting from
649     \a src and stores the result in \a dst.
650 
651     Thread-safe if prepare() has been called first.
652 
653     Assumes unpremultiplied data by default. Set \a flags to change defaults.
654 
655     \sa prepare()
656 */
657 void QColorTransformPrivate::apply(QRgb *dst, const QRgb *src, qsizetype count, TransformFlags flags) const
658 {
659     apply<QRgb>(dst, src, count, flags);
660 }
661 
662 /*!
663     \internal
664     Applies the color transformation on \a count QRgba64 pixels starting from
665     \a src and stores the result in \a dst.
666 
667     Thread-safe if prepare() has been called first.
668 
669     Assumes unpremultiplied data by default. Set \a flags to change defaults.
670 
671     \sa prepare()
672 */
673 void QColorTransformPrivate::apply(QRgba64 *dst, const QRgba64 *src, qsizetype count, TransformFlags flags) const
674 {
675     apply<QRgba64>(dst, src, count, flags);
676 }
677 
678 
679 QT_END_NAMESPACE
