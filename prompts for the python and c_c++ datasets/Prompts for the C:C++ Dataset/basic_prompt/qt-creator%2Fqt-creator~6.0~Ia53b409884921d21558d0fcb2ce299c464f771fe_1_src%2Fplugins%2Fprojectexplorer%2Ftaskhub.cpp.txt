Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "taskhub.h"
27 #include "projectexplorerconstants.h"
28 
29 #include <coreplugin/coreicons.h>
30 #include <coreplugin/ioutputpane.h>
31 #include <texteditor/textmark.h>
32 #include <utils/qtcassert.h>
33 #include <utils/theme/theme.h>
34 #include <utils/utilsicons.h>
35 
36 #include <QApplication>
37 
38 using namespace Utils;
39 
40 namespace ProjectExplorer {
41 
42 // Task mark categories
43 const char TASK_MARK_WARNING[] = "Task.Mark.Warning";
44 const char TASK_MARK_ERROR[] = "Task.Mark.Error";
45 
46 static TaskHub *m_instance = nullptr;
47 QVector<Utils::Id> TaskHub::m_registeredCategories;
48 
49 static Utils::Id categoryForType(Task::TaskType type)
50 {
51     switch (type) {
52     case Task::Error:
53         return TASK_MARK_ERROR;
54     case Task::Warning:
55         return TASK_MARK_WARNING;
56     default:
57         return Utils::Id();
58     }
59 }
60 
61 class TaskMark : public TextEditor::TextMark
62 {
63 public:
64     TaskMark(const Task &task) :
65         TextMark(task.file, task.line, categoryForType(task.type)),
66         m_id(task.taskId)
67     {
68         setColor(task.type == Task::Error ? Utils::Theme::ProjectExplorer_TaskError_TextMarkColor
69                                           : Utils::Theme::ProjectExplorer_TaskWarn_TextMarkColor);
70         setDefaultToolTip(task.type == Task::Error ? QApplication::translate("TaskHub", "Error")
71                                                    : QApplication::translate("TaskHub", "Warning"));
72         setPriority(task.type == Task::Error ? TextEditor::TextMark::NormalPriority
73                                              : TextEditor::TextMark::LowPriority);
74         if (task.category == Constants::TASK_CATEGORY_COMPILE) {
75             setToolTip("<html><body><b>" + QApplication::translate("TaskHub", "Build Issue")
76                        + "</b><br/><code style=\"white-space:pre;font-family:monospace\">"
77                        + task.description().toHtmlEscaped() + "</code></body></html>");
78         } else {
79             setToolTip(task.description());
80         }
81         setIcon(task.icon());
82         setVisible(!task.icon().isNull());
83     }
84 
85     bool isClickable() const override;
86     void clicked() override;
87 
88     void updateFileName(const FilePath &fileName) override;
89     void updateLineNumber(int lineNumber) override;
90     void removedFromEditor() override;
91 private:
92     unsigned int m_id;
93 };
94 
95 void TaskMark::updateLineNumber(int lineNumber)
96 {
97     TaskHub::updateTaskLineNumber(m_id, lineNumber);
98     TextMark::updateLineNumber(lineNumber);
99 }
100 
101 void TaskMark::updateFileName(const FilePath &fileName)
102 {
103     TaskHub::updateTaskFileName(m_id, fileName.toString());
104     TextMark::updateFileName(FilePath::fromString(fileName.toString()));
105 }
106 
107 void TaskMark::removedFromEditor()
108 {
109     TaskHub::updateTaskLineNumber(m_id, -1);
110 }
111 
112 bool TaskMark::isClickable() const
113 {
114     return true;
115 }
116 
117 void TaskMark::clicked()
118 {
119     TaskHub::taskMarkClicked(m_id);
120 }
121 
122 TaskHub::TaskHub()
123 {
124     m_instance = this;
125     qRegisterMetaType<ProjectExplorer::Task>("ProjectExplorer::Task");
126     qRegisterMetaType<Tasks >("Tasks");
127 }
128 
129 TaskHub::~TaskHub()
130 {
131     m_instance = nullptr;
132 }
133 
134 void TaskHub::addCategory(Utils::Id categoryId, const QString &displayName, bool visible)
135 {
136     QTC_CHECK(!displayName.isEmpty());
137     QTC_ASSERT(!m_registeredCategories.contains(categoryId), return);
138     m_registeredCategories.push_back(categoryId);
139     emit m_instance->categoryAdded(categoryId, displayName, visible);
140 }
141 
142 TaskHub *TaskHub::instance()
143 {
144     return m_instance;
145 }
146 
147 void TaskHub::addTask(Task::TaskType type, const QString &description, Utils::Id category)
148 {
149     addTask(Task(type, description, {}, -1, category));
150 }
151 
152 void TaskHub::addTask(Task task)
153 {
154     QTC_ASSERT(m_registeredCategories.contains(task.category), return);
155     QTC_ASSERT(!task.description().isEmpty(), return);
156     QTC_ASSERT(!task.isNull(), return);
157 
158     if (task.file.isEmpty() || task.line <= 0)
159         task.line = -1;
160     task.movedLine = task.line;
161 
162     if ((task.options & Task::AddTextMark) && task.line != -1 && task.type != Task::Unknown)
163         new TaskMark(task);
164     emit m_instance->taskAdded(task);
165 }
166 
167 void TaskHub::clearTasks(Utils::Id categoryId)
168 {
169     QTC_ASSERT(!categoryId.isValid() || m_registeredCategories.contains(categoryId), return);
170     emit m_instance->tasksCleared(categoryId);
171 }
172 
173 void TaskHub::removeTask(const Task &task)
174 {
175     emit m_instance->taskRemoved(task);
176 }
177 
178 void TaskHub::updateTaskFileName(unsigned int id, const QString &fileName)
179 {
180     emit m_instance->taskFileNameUpdated(id, fileName);
181 }
182 
183 void TaskHub::updateTaskLineNumber(unsigned int id, int line)
184 {
185     emit m_instance->taskLineNumberUpdated(id, line);
186 }
187 
188 void TaskHub::taskMarkClicked(unsigned int id)
189 {
190     emit m_instance->showTask(id);
191 }
192 
193 void TaskHub::showTaskInEditor(unsigned int id)
194 {
195     emit m_instance->openTask(id);
196 }
197 
198 void TaskHub::setCategoryVisibility(Utils::Id categoryId, bool visible)
199 {
200     QTC_ASSERT(m_registeredCategories.contains(categoryId), return);
201     emit m_instance->categoryVisibilityChanged(categoryId, visible);
202 }
203 
204 void TaskHub::requestPopup()
205 {
206     emit m_instance->popupRequested(Core::IOutputPane::NoModeSwitch);
207 }
208 
209 } // namespace ProjectExplorer
