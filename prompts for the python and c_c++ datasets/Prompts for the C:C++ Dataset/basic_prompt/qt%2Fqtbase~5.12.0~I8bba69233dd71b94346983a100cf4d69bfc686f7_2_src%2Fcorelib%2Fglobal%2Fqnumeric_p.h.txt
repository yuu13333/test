Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Copyright (C) 2018 Intel Corporation.
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the QtCore module of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:LGPL$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU Lesser General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU Lesser
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
22 ** packaging of this file. Please review the following information to
23 ** ensure the GNU Lesser General Public License version 3 requirements
24 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
25 **
26 ** GNU General Public License Usage
27 ** Alternatively, this file may be used under the terms of the GNU
28 ** General Public License version 2.0 or (at your option) the GNU General
29 ** Public license version 3 or any later version approved by the KDE Free
30 ** Qt Foundation. The licenses are as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
32 ** included in the packaging of this file. Please review the following
33 ** information to ensure the GNU General Public License requirements will
34 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
35 ** https://www.gnu.org/licenses/gpl-3.0.html.
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 #ifndef QNUMERIC_P_H
42 #define QNUMERIC_P_H
43 
44 //
45 //  W A R N I N G
46 //  -------------
47 //
48 // This file is not part of the Qt API.  It exists purely as an
49 // implementation detail.  This header file may change from version to
50 // version without notice, or even be removed.
51 //
52 // We mean it.
53 //
54 
55 #include "QtCore/private/qglobal_p.h"
56 #include <cmath>
57 #include <limits>
58 
59 #if defined(Q_CC_MSVC)
60 #  include <intrin.h>
61 #endif
62 
63 #if defined(Q_CC_MSVC)
64 #include <float.h>
65 #endif
66 
67 # if defined(Q_OS_INTEGRITY) && defined(Q_PROCESSOR_ARM_64)
68 #include <arm64_ghs.h>
69 #endif
70 
71 #if !defined(Q_CC_MSVC) && (defined(Q_OS_QNX) || defined(Q_CC_INTEL))
72 #  include <math.h>
73 #  ifdef isnan
74 #    define QT_MATH_H_DEFINES_MACROS
75 QT_BEGIN_NAMESPACE
76 namespace qnumeric_std_wrapper {
77 // the 'using namespace std' below is cases where the stdlib already put the math.h functions in the std namespace and undefined the macros.
78 Q_DECL_CONST_FUNCTION static inline bool math_h_isnan(double d) { using namespace std; return isnan(d); }
79 Q_DECL_CONST_FUNCTION static inline bool math_h_isinf(double d) { using namespace std; return isinf(d); }
80 Q_DECL_CONST_FUNCTION static inline bool math_h_isfinite(double d) { using namespace std; return isfinite(d); }
81 Q_DECL_CONST_FUNCTION static inline bool math_h_isnan(float f) { using namespace std; return isnan(f); }
82 Q_DECL_CONST_FUNCTION static inline bool math_h_isinf(float f) { using namespace std; return isinf(f); }
83 Q_DECL_CONST_FUNCTION static inline bool math_h_isfinite(float f) { using namespace std; return isfinite(f); }
84 }
85 QT_END_NAMESPACE
86 // These macros from math.h conflict with the real functions in the std namespace.
87 #    undef signbit
88 #    undef isnan
89 #    undef isinf
90 #    undef isfinite
91 #  endif // defined(isnan)
92 #endif
93 
94 QT_BEGIN_NAMESPACE
95 
96 namespace qnumeric_std_wrapper {
97 #if defined(QT_MATH_H_DEFINES_MACROS)
98 #  undef QT_MATH_H_DEFINES_MACROS
99 Q_DECL_CONST_FUNCTION static inline bool isnan(double d) { return math_h_isnan(d); }
100 Q_DECL_CONST_FUNCTION static inline bool isinf(double d) { return math_h_isinf(d); }
101 Q_DECL_CONST_FUNCTION static inline bool isfinite(double d) { return math_h_isfinite(d); }
102 Q_DECL_CONST_FUNCTION static inline bool isnan(float f) { return math_h_isnan(f); }
103 Q_DECL_CONST_FUNCTION static inline bool isinf(float f) { return math_h_isinf(f); }
104 Q_DECL_CONST_FUNCTION static inline bool isfinite(float f) { return math_h_isfinite(f); }
105 #else
106 Q_DECL_CONST_FUNCTION static inline bool isnan(double d) { return std::isnan(d); }
107 Q_DECL_CONST_FUNCTION static inline bool isinf(double d) { return std::isinf(d); }
108 Q_DECL_CONST_FUNCTION static inline bool isfinite(double d) { return std::isfinite(d); }
109 Q_DECL_CONST_FUNCTION static inline bool isnan(float f) { return std::isnan(f); }
110 Q_DECL_CONST_FUNCTION static inline bool isinf(float f) { return std::isinf(f); }
111 Q_DECL_CONST_FUNCTION static inline bool isfinite(float f) { return std::isfinite(f); }
112 #endif
113 }
114 
115 Q_DECL_CONSTEXPR Q_DECL_CONST_FUNCTION static inline double qt_inf() Q_DECL_NOEXCEPT
116 {
117     Q_STATIC_ASSERT_X(std::numeric_limits<double>::has_infinity,
118                       "platform has no definition for infinity for type double");
119     return std::numeric_limits<double>::infinity();
120 }
121 
122 // Signaling NaN
123 Q_DECL_CONSTEXPR Q_DECL_CONST_FUNCTION static inline double qt_snan() Q_DECL_NOEXCEPT
124 {
125     Q_STATIC_ASSERT_X(std::numeric_limits<double>::has_signaling_NaN,
126                       "platform has no definition for signaling NaN for type double");
127     return std::numeric_limits<double>::signaling_NaN();
128 }
129 
130 // Quiet NaN
131 Q_DECL_CONSTEXPR Q_DECL_CONST_FUNCTION static inline double qt_qnan() Q_DECL_NOEXCEPT
132 {
133     Q_STATIC_ASSERT_X(std::numeric_limits<double>::has_quiet_NaN,
134                       "platform has no definition for quiet NaN for type double");
135     return std::numeric_limits<double>::quiet_NaN();
136 }
137 
138 Q_DECL_CONST_FUNCTION static inline bool qt_is_inf(double d)
139 {
140     return qnumeric_std_wrapper::isinf(d);
141 }
142 
143 Q_DECL_CONST_FUNCTION static inline bool qt_is_nan(double d)
144 {
145     return qnumeric_std_wrapper::isnan(d);
146 }
147 
148 Q_DECL_CONST_FUNCTION static inline bool qt_is_finite(double d)
149 {
150     return qnumeric_std_wrapper::isfinite(d);
151 }
152 
153 Q_DECL_CONST_FUNCTION static inline bool qt_is_inf(float f)
154 {
155     return qnumeric_std_wrapper::isinf(f);
156 }
157 
158 Q_DECL_CONST_FUNCTION static inline bool qt_is_nan(float f)
159 {
160     return qnumeric_std_wrapper::isnan(f);
161 }
162 
163 Q_DECL_CONST_FUNCTION static inline bool qt_is_finite(float f)
164 {
165     return qnumeric_std_wrapper::isfinite(f);
166 }
167 
168 #ifndef Q_CLANG_QDOC
169 namespace {
170 /*!
171     Returns true if the double \a v can be converted to type \c T, false if
172     it's out of range. If the conversion is successful, the converted value is
173     stored in \a value; if it was not successful, \a value will contain the
174     minimum or maximum of T, depending on the sign of \a d. If \c T is
175     unsigned, then \a value contains the absolute value of \a v.
176 
177     This function works for v containing infinities, but not NaN. It's the
178     caller's responsibility to exclude that possibility before calling it.
179 */
180 template <typename T> static inline bool convertDoubleTo(double v, T *value)
181 {
182     Q_STATIC_ASSERT(std::numeric_limits<T>::is_integer);
183 
184     // The [conv.fpint] (7.10 Floating-integral conversions) section of the C++
185     // standard says only exact conversions are guaranteed. Converting
186     // integrals to floating-point with loss of precision has implementation-
187     // defined behavior whether the next higher or next lower is returned;
188     // converting FP to integral is UB if it can't be represented.
189     //
190     // That means we can't write UINT64_MAX+1. Writing ldexp(1, 64) would be
191     // correct, but Clang, ICC and MSVC don't realize that it's a constant and
192     // the math call stays in the compiled code.
193 
194     double supremum;
195     if (std::numeric_limits<T>::is_signed) {
196         supremum = -1.0 * std::numeric_limits<T>::min();    // -1 * (-2^63) = 2^63, exact (for T = qint64)
197         *value = std::numeric_limits<T>::min();
198         if (v < std::numeric_limits<T>::min())
199             return false;
200     } else {
201         using ST = typename std::make_signed<T>::type;
202         supremum = -2.0 * std::numeric_limits<ST>::min();   // -2 * (-2^63) = 2^64, exact (for T = quint64)
203         v = fabs(v);
204     }
205 
206     *value = std::numeric_limits<T>::max();
207     if (v >= supremum)
208         return false;
209 
210     // Now we can convert, these two conversions cannot be UB
211     *value = T(v);
212 
213 QT_WARNING_PUSH
214 QT_WARNING_DISABLE_GCC("-Wfloat-equal")
215 QT_WARNING_DISABLE_CLANG("-Wfloat-equal")
216 
217     return *value == v;
218 
219 QT_WARNING_POP
220 }
221 
222 // Overflow math.
223 // This provides efficient implementations for int, unsigned, qsizetype and
224 // size_t. Implementations for 8- and 16-bit types will work but may not be as
225 // efficient. Implementations for 64-bit may be missing on 32-bit platforms.
226 
227 #if (defined(Q_CC_GNU) && (Q_CC_GNU >= 500) || (defined(Q_CC_INTEL) && !defined(Q_OS_WIN))) || QT_HAS_BUILTIN(__builtin_add_overflowx)
228 // GCC 5, ICC 18, and Clang 3.8 have builtins to detect overflows
229 
230 template <typename T> inline
231 typename std::enable_if<std::is_unsigned<T>::value || std::is_signed<T>::value, bool>::type
232 add_overflow(T v1, T v2, T *r)
233 { return __builtin_add_overflow(v1, v2, r); }
234 
235 template <typename T> inline
236 typename std::enable_if<std::is_unsigned<T>::value || std::is_signed<T>::value, bool>::type
237 sub_overflow(T v1, T v2, T *r)
238 { return __builtin_sub_overflow(v1, v2, r); }
239 
240 template <typename T> inline
241 typename std::enable_if<std::is_unsigned<T>::value || std::is_signed<T>::value, bool>::type
242 mul_overflow(T v1, T v2, T *r)
243 { return __builtin_mul_overflow(v1, v2, r); }
244 
245 #else
246 // Generic implementations
247 
248 template <typename T> inline typename std::enable_if<std::is_unsigned<T>::value, bool>::type
249 add_overflow(T v1, T v2, T *r)
250 {
251     // unsigned additions are well-defined
252     *r = v1 + v2;
253     return v1 > T(v1 + v2);
254 }
255 
256 template <typename T> inline typename std::enable_if<std::is_signed<T>::value, bool>::type
257 add_overflow(T v1, T v2, T *r)
258 {
259     // Here's how we calculate the overflow:
260     // 1) unsigned addition is well-defined, so we can always execute it
261     // 2) conversion from unsigned back to signed is implementation-
262     //    defined and in the implementations we use, it's a no-op.
263     // 3) signed integer overflow happens if the sign of the two input operands
264     //    is the same but the sign of the result is different. In other words,
265     //    the sign of the result must be the same as the sign of either
266     //    operand.
267 
268     using U = typename std::make_unsigned<T>::type;
269     *r = T(U(v1) + U(v2));
270 
271     // If int is two's complement, assume all integer types are too.
272     if (std::is_same<int32_t, int>::value) {
273         // Two's complement equivalent (generates slightly shorter code):
274         //  x ^ y             is negative if x and y have different signs
275         //  x & y             is negative if x and y are negative
276         // (x ^ z) & (y ^ z)  is negative if x and z have different signs
277         //                    AND y and z have different signs
278         return ((v1 ^ *r) & (v2 ^ *r)) < 0;
279     }
280 
281     bool s1 = (v1 < 0);
282     bool s2 = (v2 < 0);
283     bool sr = (*r < 0);
284     return s1 != sr && s2 != sr;
285     // also: return s1 == s2 && s1 != sr;
286 }
287 
288 template <typename T> inline typename std::enable_if<std::is_unsigned<T>::value, bool>::type
289 sub_overflow(T v1, T v2, T *r)
290 {
291     // unsigned subtractions are well-defined
292     *r = v1 - v2;
293     return v1 < v2;
294 }
295 
296 template <typename T> inline typename std::enable_if<std::is_signed<T>::value, bool>::type
297 sub_overflow(T v1, T v2, T *r)
298 {
299     // See above for explanation. This is the same with some signs reversed.
300     // We can't use add_overflow(v1, -v2, r) because it would be UB if
301     // v2 == std::numeric_limits<T>::min().
302 
303     using U = typename std::make_unsigned<T>::type;
304     *r = T(U(v1) - U(v2));
305 
306     if (std::is_same<int32_t, int>::value)
307         return ((v1 ^ *r) & (~v2 ^ *r)) < 0;
308 
309     bool s1 = (v1 < 0);
310     bool s2 = !(v2 < 0);
311     bool sr = (*r < 0);
312     return s1 != sr && s2 != sr;
313     // also: return s1 == s2 && s1 != sr;
314 }
315 
316 template <typename T> inline
317 typename std::enable_if<std::is_unsigned<T>::value || std::is_signed<T>::value, bool>::type
318 mul_overflow(T v1, T v2, T *r)
319 {
320     // use the next biggest type
321     // Note: for 64-bit systems where __int128 isn't supported, this will cause an error.
322     using LargerInt = QIntegerForSize<sizeof(T) * 2>;
323     using Larger = typename std::conditional<std::is_signed<T>::value,
324             typename LargerInt::Signed, typename LargerInt::Unsigned>::type;
325     Larger lr = Larger(v1) * Larger(v2);
326     *r = T(lr);
327     return lr > std::numeric_limits<T>::max() || lr < std::numeric_limits<T>::min();
328 }
329 
330 # if defined(Q_OS_INTEGRITY) && defined(Q_PROCESSOR_ARM_64)
331 template <> inline bool mul_overflow(uint64_t v1, uint64_t v2, uint64_t *r)
332 {
333     *r = v1 * v2;
334     return __MULUH64(v1, v2);
335 }
336 template <> inline bool mul_overflow(int64_t v1, int64_t v2, int64_t *r)
337 {
338     *r = v1 * v2;
339     qint64 high;
340     high = __MULSH64(v1, v2);
341     if (high == 0)
342         return *r < 0;
343     if (high == -1)
344         return *r >= 0;
345     return true;
346 }
347 #endif
348 
349 #  if defined(Q_CC_MSVC) && defined(Q_PROCESSOR_X86)
350 // We can use intrinsics for the unsigned operations with MSVC
351 template <> inline bool add_overflow(unsigned v1, unsigned v2, unsigned *r)
352 { return _addcarry_u32(0, v1, v2, r); }
353 
354 // 32-bit mul_overflow is fine with the generic code above
355 
356 #    if defined(Q_PROCESSOR_X86_64)
357 template <> inline bool add_overflow(quint64 v1, quint64 v2, quint64 *r)
358 { return _addcarry_u64(0, v1, v2, reinterpret_cast<unsigned __int64 *>(r)); }
359 
360 #    pragma intrinsic(_umul128)
361 template <> inline bool mul_overflow(quint64 v1, quint64 v2, quint64 *r)
362 {
363     // use 128-bit multiplication with the _umul128 intrinsic
364     // https://msdn.microsoft.com/en-us/library/3dayytw9.aspx
365     quint64 high;
366     *r = _umul128(v1, v2, &high);
367     return high;
368 }
369 
370 #    pragma intrinsic(_mul128)
371 template <> inline bool mul_overflow(qint64 v1, qint64 v2, qint64 *r)
372 {
373     // Use 128-bit multiplication with the _mul128 intrinsic
374     // https://msdn.microsoft.com/en-us/library/82cxdw50.aspx
375 
376     // This is slightly more complex than the unsigned case above: the sign bit
377     // of 'low' must be replicated as the entire 'high', so the only valid
378     // values for 'high' are 0 and -1.
379 
380     qint64 high;
381     *r = _mul128(v1, v2, &high);
382     if (high == 0)
383         return *r < 0;
384     if (high == -1)
385         return *r >= 0;
386     return true;
387 }
388 #    endif // x86-64
389 #  endif // MSVC x86
390 #endif // !GCC
391 }
392 #endif // Q_CLANG_QDOC
393 
394 QT_END_NAMESPACE
395 
396 #endif // QNUMERIC_P_H
