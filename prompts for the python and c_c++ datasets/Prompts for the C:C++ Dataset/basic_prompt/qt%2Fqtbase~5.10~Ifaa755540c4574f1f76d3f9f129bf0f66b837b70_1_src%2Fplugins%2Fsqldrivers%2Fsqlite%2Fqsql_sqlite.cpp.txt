Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtSql module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qsql_sqlite_p.h"
41 
42 #include <qcoreapplication.h>
43 #include <qdatetime.h>
44 #include <qvariant.h>
45 #include <qsqlerror.h>
46 #include <qsqlfield.h>
47 #include <qsqlindex.h>
48 #include <qsqlquery.h>
49 #include <QtSql/private/qsqlcachedresult_p.h>
50 #include <QtSql/private/qsqldriver_p.h>
51 #include <qstringlist.h>
52 #include <qvector.h>
53 #include <qdebug.h>
54 #ifndef QT_NO_REGULAREXPRESSION
55 #include <qcache.h>
56 #include <qregularexpression.h>
57 #endif
58 #include <QTimeZone>
59 
60 #if defined Q_OS_WIN
61 # include <qt_windows.h>
62 #else
63 # include <unistd.h>
64 #endif
65 
66 #include <sqlite3.h>
67 #include <functional>
68 
69 Q_DECLARE_OPAQUE_POINTER(sqlite3*)
70 Q_DECLARE_METATYPE(sqlite3*)
71 
72 Q_DECLARE_OPAQUE_POINTER(sqlite3_stmt*)
73 Q_DECLARE_METATYPE(sqlite3_stmt*)
74 
75 QT_BEGIN_NAMESPACE
76 
77 static QString _q_escapeIdentifier(const QString &identifier)
78 {
79     QString res = identifier;
80     if (!identifier.isEmpty() && !identifier.startsWith(QLatin1Char('"')) && !identifier.endsWith(QLatin1Char('"'))) {
81         res.replace(QLatin1Char('"'), QLatin1String("\"\""));
82         res.prepend(QLatin1Char('"')).append(QLatin1Char('"'));
83         res.replace(QLatin1Char('.'), QLatin1String("\".\""));
84     }
85     return res;
86 }
87 
88 static QVariant::Type qGetColumnType(const QString &tpName)
89 {
90     const QString typeName = tpName.toLower();
91 
92     if (typeName == QLatin1String("integer")
93         || typeName == QLatin1String("int"))
94         return QVariant::Int;
95     if (typeName == QLatin1String("double")
96         || typeName == QLatin1String("float")
97         || typeName == QLatin1String("real")
98         || typeName.startsWith(QLatin1String("numeric")))
99         return QVariant::Double;
100     if (typeName == QLatin1String("blob"))
101         return QVariant::ByteArray;
102     if (typeName == QLatin1String("boolean")
103         || typeName == QLatin1String("bool"))
104         return QVariant::Bool;
105     return QVariant::String;
106 }
107 
108 static QSqlError qMakeError(sqlite3 *access, const QString &descr, QSqlError::ErrorType type,
109                             int errorCode = -1)
110 {
111     return QSqlError(descr,
112                      QString(reinterpret_cast<const QChar *>(sqlite3_errmsg16(access))),
113                      type, QString::number(errorCode));
114 }
115 
116 class QSQLiteResultPrivate;
117 
118 class QSQLiteResult : public QSqlCachedResult
119 {
120     Q_DECLARE_PRIVATE(QSQLiteResult)
121     friend class QSQLiteDriver;
122 
123 public:
124     explicit QSQLiteResult(const QSQLiteDriver* db);
125     ~QSQLiteResult();
126     QVariant handle() const override;
127 
128 protected:
129     bool gotoNext(QSqlCachedResult::ValueCache& row, int idx) override;
130     bool reset(const QString &query) override;
131     bool prepare(const QString &query) override;
132     bool exec() override;
133     int size() override;
134     int numRowsAffected() override;
135     QVariant lastInsertId() const override;
136     QSqlRecord record() const override;
137     void detachFromResultSet() override;
138     void virtual_hook(int id, void *data) override;
139 };
140 
141 class QSQLiteDriverPrivate : public QSqlDriverPrivate
142 {
143     Q_DECLARE_PUBLIC(QSQLiteDriver)
144 
145 public:
146     inline QSQLiteDriverPrivate() : QSqlDriverPrivate(), access(0) { dbmsType = QSqlDriver::SQLite; }
147     sqlite3 *access;
148     QList <QSQLiteResult *> results;
149     QStringList notificationid;
150 };
151 
152 
153 class QSQLiteResultPrivate: public QSqlCachedResultPrivate
154 {
155     Q_DECLARE_PUBLIC(QSQLiteResult)
156 
157 public:
158     Q_DECLARE_SQLDRIVER_PRIVATE(QSQLiteDriver)
159     QSQLiteResultPrivate(QSQLiteResult *q, const QSQLiteDriver *drv);
160     void cleanup();
161     bool fetchNext(QSqlCachedResult::ValueCache &values, int idx, bool initialFetch);
162     // initializes the recordInfo and the cache
163     void initColumns(bool emptyResultset);
164     void finalize();
165 
166     sqlite3_stmt *stmt;
167 
168     bool skippedStatus; // the status of the fetchNext() that's skipped
169     bool skipRow; // skip the next fetchNext()?
170     QSqlRecord rInf;
171     QVector<QVariant> firstRow;
172 };
173 
174 QSQLiteResultPrivate::QSQLiteResultPrivate(QSQLiteResult *q, const QSQLiteDriver *drv)
175     : QSqlCachedResultPrivate(q, drv),
176       stmt(0),
177       skippedStatus(false),
178       skipRow(false)
179 {
180 }
181 
182 void QSQLiteResultPrivate::cleanup()
183 {
184     Q_Q(QSQLiteResult);
185     finalize();
186     rInf.clear();
187     skippedStatus = false;
188     skipRow = false;
189     q->setAt(QSql::BeforeFirstRow);
190     q->setActive(false);
191     q->cleanup();
192 }
193 
194 void QSQLiteResultPrivate::finalize()
195 {
196     if (!stmt)
197         return;
198 
199     sqlite3_finalize(stmt);
200     stmt = 0;
201 }
202 
203 void QSQLiteResultPrivate::initColumns(bool emptyResultset)
204 {
205     Q_Q(QSQLiteResult);
206     int nCols = sqlite3_column_count(stmt);
207     if (nCols <= 0)
208         return;
209 
210     q->init(nCols);
211 
212     for (int i = 0; i < nCols; ++i) {
213         QString colName = QString(reinterpret_cast<const QChar *>(
214                     sqlite3_column_name16(stmt, i))
215                     ).remove(QLatin1Char('"'));
216         const QString tableName = QString(reinterpret_cast<const QChar *>(
217                             sqlite3_column_table_name16(stmt, i))
218                             ).remove(QLatin1Char('"'));
219         // must use typeName for resolving the type to match QSqliteDriver::record
220         QString typeName = QString(reinterpret_cast<const QChar *>(
221                     sqlite3_column_decltype16(stmt, i)));
222         // sqlite3_column_type is documented to have undefined behavior if the result set is empty
223         int stp = emptyResultset ? -1 : sqlite3_column_type(stmt, i);
224 
225         QVariant::Type fieldType;
226 
227         if (!typeName.isEmpty()) {
228             fieldType = qGetColumnType(typeName);
229         } else {
230             // Get the proper type for the field based on stp value
231             switch (stp) {
232             case SQLITE_INTEGER:
233                 fieldType = QVariant::Int;
234                 break;
235             case SQLITE_FLOAT:
236                 fieldType = QVariant::Double;
237                 break;
238             case SQLITE_BLOB:
239                 fieldType = QVariant::ByteArray;
240                 break;
241             case SQLITE_TEXT:
242                 fieldType = QVariant::String;
243                 break;
244             case SQLITE_NULL:
245             default:
246                 fieldType = QVariant::Invalid;
247                 break;
248             }
249         }
250 
251         QSqlField fld(colName, fieldType, tableName);
252         fld.setSqlType(stp);
253         rInf.append(fld);
254     }
255 }
256 
257 bool QSQLiteResultPrivate::fetchNext(QSqlCachedResult::ValueCache &values, int idx, bool initialFetch)
258 {
259     Q_Q(QSQLiteResult);
260     int res;
261     int i;
262 
263     if (skipRow) {
264         // already fetched
265         Q_ASSERT(!initialFetch);
266         skipRow = false;
267         for(int i=0;i<firstRow.count();i++)
268             values[i]=firstRow[i];
269         return skippedStatus;
270     }
271     skipRow = initialFetch;
272 
273     if(initialFetch) {
274         firstRow.clear();
275         firstRow.resize(sqlite3_column_count(stmt));
276     }
277 
278     if (!stmt) {
279         q->setLastError(QSqlError(QCoreApplication::translate("QSQLiteResult", "Unable to fetch row"),
280                                   QCoreApplication::translate("QSQLiteResult", "No query"), QSqlError::ConnectionError));
281         q->setAt(QSql::AfterLastRow);
282         return false;
283     }
284     res = sqlite3_step(stmt);
285 
286     switch(res) {
287     case SQLITE_ROW:
288         // check to see if should fill out columns
289         if (rInf.isEmpty())
290             // must be first call.
291             initColumns(false);
292         if (idx < 0 && !initialFetch)
293             return true;
294         for (i = 0; i < rInf.count(); ++i) {
295             switch (sqlite3_column_type(stmt, i)) {
296             case SQLITE_BLOB:
297                 values[i + idx] = QByteArray(static_cast<const char *>(
298                             sqlite3_column_blob(stmt, i)),
299                             sqlite3_column_bytes(stmt, i));
300                 break;
301             case SQLITE_INTEGER:
302                 values[i + idx] = sqlite3_column_int64(stmt, i);
303                 break;
304             case SQLITE_FLOAT:
305                 switch(q->numericalPrecisionPolicy()) {
306                     case QSql::LowPrecisionInt32:
307                         values[i + idx] = sqlite3_column_int(stmt, i);
308                         break;
309                     case QSql::LowPrecisionInt64:
310                         values[i + idx] = sqlite3_column_int64(stmt, i);
311                         break;
312                     case QSql::LowPrecisionDouble:
313                     case QSql::HighPrecision:
314                     default:
315                         values[i + idx] = sqlite3_column_double(stmt, i);
316                         break;
317                 };
318                 break;
319             case SQLITE_NULL:
320                 values[i + idx] = QVariant(QVariant::String);
321                 break;
322             default:
323                 values[i + idx] = QString(reinterpret_cast<const QChar *>(
324                             sqlite3_column_text16(stmt, i)),
325                             sqlite3_column_bytes16(stmt, i) / sizeof(QChar));
326                 break;
327             }
328         }
329         return true;
330     case SQLITE_DONE:
331         if (rInf.isEmpty())
332             // must be first call.
333             initColumns(true);
334         q->setAt(QSql::AfterLastRow);
335         sqlite3_reset(stmt);
336         return false;
337     case SQLITE_CONSTRAINT:
338     case SQLITE_ERROR:
339         // SQLITE_ERROR is a generic error code and we must call sqlite3_reset()
340         // to get the specific error message.
341         res = sqlite3_reset(stmt);
342         q->setLastError(qMakeError(drv_d_func()->access, QCoreApplication::translate("QSQLiteResult",
343                         "Unable to fetch row"), QSqlError::ConnectionError, res));
344         q->setAt(QSql::AfterLastRow);
345         return false;
346     case SQLITE_MISUSE:
347     case SQLITE_BUSY:
348     default:
349         // something wrong, don't get col info, but still return false
350         q->setLastError(qMakeError(drv_d_func()->access, QCoreApplication::translate("QSQLiteResult",
351                         "Unable to fetch row"), QSqlError::ConnectionError, res));
352         sqlite3_reset(stmt);
353         q->setAt(QSql::AfterLastRow);
354         return false;
355     }
356     return false;
357 }
358 
359 QSQLiteResult::QSQLiteResult(const QSQLiteDriver* db)
360     : QSqlCachedResult(*new QSQLiteResultPrivate(this, db))
361 {
362     Q_D(QSQLiteResult);
363     const_cast<QSQLiteDriverPrivate*>(d->drv_d_func())->results.append(this);
364 }
365 
366 QSQLiteResult::~QSQLiteResult()
367 {
368     Q_D(QSQLiteResult);
369     if (d->drv_d_func())
370         const_cast<QSQLiteDriverPrivate*>(d->drv_d_func())->results.removeOne(this);
371     d->cleanup();
372 }
373 
374 void QSQLiteResult::virtual_hook(int id, void *data)
375 {
376     QSqlCachedResult::virtual_hook(id, data);
377 }
378 
379 bool QSQLiteResult::reset(const QString &query)
380 {
381     if (!prepare(query))
382         return false;
383     return exec();
384 }
385 
386 bool QSQLiteResult::prepare(const QString &query)
387 {
388     Q_D(QSQLiteResult);
389     if (!driver() || !driver()->isOpen() || driver()->isOpenError())
390         return false;
391 
392     d->cleanup();
393 
394     setSelect(false);
395 
396     const void *pzTail = NULL;
397 
398 #if (SQLITE_VERSION_NUMBER >= 3003011)
399     int res = sqlite3_prepare16_v2(d->drv_d_func()->access, query.constData(), (query.size() + 1) * sizeof(QChar),
400                                    &d->stmt, &pzTail);
401 #else
402     int res = sqlite3_prepare16(d->access, query.constData(), (query.size() + 1) * sizeof(QChar),
403                                 &d->stmt, &pzTail);
404 #endif
405 
406     if (res != SQLITE_OK) {
407         setLastError(qMakeError(d->drv_d_func()->access, QCoreApplication::translate("QSQLiteResult",
408                      "Unable to execute statement"), QSqlError::StatementError, res));
409         d->finalize();
410         return false;
411     } else if (pzTail && !QString(reinterpret_cast<const QChar *>(pzTail)).trimmed().isEmpty()) {
412         setLastError(qMakeError(d->drv_d_func()->access, QCoreApplication::translate("QSQLiteResult",
413             "Unable to execute multiple statements at a time"), QSqlError::StatementError, SQLITE_MISUSE));
414         d->finalize();
415         return false;
416     }
417     return true;
418 }
419 
420 static QString secondsToOffset(int seconds)
421 {
422     const QChar sign = ushort(seconds < 0 ? '-' : '+');
423     seconds = qAbs(seconds);
424     const int hours = seconds / 3600;
425     const int minutes = (seconds % 3600) / 60;
426 
427     return QString(QStringLiteral("%1%2:%3")).arg(sign).arg(hours, 2, 10, QLatin1Char('0')).arg(minutes, 2, 10, QLatin1Char('0'));
428 }
429 
430 static QString timespecToString(const QDateTime &dateTime)
431 {
432     switch (dateTime.timeSpec()) {
433     case Qt::LocalTime:
434         return QString();
435     case Qt::UTC:
436         return QStringLiteral("Z");
437     case Qt::OffsetFromUTC:
438         return secondsToOffset(dateTime.offsetFromUtc());
439     case Qt::TimeZone:
440         return secondsToOffset(dateTime.timeZone().offsetFromUtc(dateTime));
441     default:
442         return QString();
443     }
444 }
445 
446 bool QSQLiteResult::exec()
447 {
448     Q_D(QSQLiteResult);
449     const QVector<QVariant> values = boundValues();
450 
451     d->skippedStatus = false;
452     d->skipRow = false;
453     d->rInf.clear();
454     clearValues();
455     setLastError(QSqlError());
456 
457     int res = sqlite3_reset(d->stmt);
458     if (res != SQLITE_OK) {
459         setLastError(qMakeError(d->drv_d_func()->access, QCoreApplication::translate("QSQLiteResult",
460                      "Unable to reset statement"), QSqlError::StatementError, res));
461         d->finalize();
462         return false;
463     }
464 
465     int paramCount = sqlite3_bind_parameter_count(d->stmt);
466     bool paramCountIsValid = paramCount == values.count();
467 
468 #if (SQLITE_VERSION_NUMBER >= 3003011)
469     // In the case of the reuse of a named placeholder
470     if (!paramCountIsValid && values.count() > 0) {
471         const auto countIndexes = [](int counter, const QList<int>& indexList) {
472                                       return counter + indexList.length();
473                                   };
474 
475         const int bindParamCount = std::accumulate(d->indexes.cbegin(),
476                                                    d->indexes.cend(),
477                                                    0,
478                                                    countIndexes);
479 
480         paramCountIsValid = bindParamCount == values.count();
481     }
482 #endif
483 
484     if (paramCountIsValid) {
485         for (int i = 0; i < paramCount; ++i) {
486             res = SQLITE_OK;
487             const QVariant value = values.at(i);
488 
489             if (value.isNull()) {
490                 res = sqlite3_bind_null(d->stmt, i + 1);
491             } else {
492                 switch (value.type()) {
493                 case QVariant::ByteArray: {
494                     const QByteArray *ba = static_cast<const QByteArray*>(value.constData());
495                     res = sqlite3_bind_blob(d->stmt, i + 1, ba->constData(),
496                                             ba->size(), SQLITE_STATIC);
497                     break; }
498                 case QVariant::Int:
499                 case QVariant::Bool:
500                     res = sqlite3_bind_int(d->stmt, i + 1, value.toInt());
501                     break;
502                 case QVariant::Double:
503                     res = sqlite3_bind_double(d->stmt, i + 1, value.toDouble());
504                     break;
505                 case QVariant::UInt:
506                 case QVariant::LongLong:
507                     res = sqlite3_bind_int64(d->stmt, i + 1, value.toLongLong());
508                     break;
509                 case QVariant::DateTime: {
510                     const QDateTime dateTime = value.toDateTime();
511                     const QString str = dateTime.toString(QLatin1String("yyyy-MM-ddThh:mm:ss.zzz") + timespecToString(dateTime));
512                     res = sqlite3_bind_text16(d->stmt, i + 1, str.utf16(),
513                                               str.size() * sizeof(ushort), SQLITE_TRANSIENT);
514                     break;
515                 }
516                 case QVariant::Time: {
517                     const QTime time = value.toTime();
518                     const QString str = time.toString(QStringViewLiteral("hh:mm:ss.zzz"));
519                     res = sqlite3_bind_text16(d->stmt, i + 1, str.utf16(),
520                                               str.size() * sizeof(ushort), SQLITE_TRANSIENT);
521                     break;
522                 }
523                 case QVariant::String: {
524                     // lifetime of string == lifetime of its qvariant
525                     const QString *str = static_cast<const QString*>(value.constData());
526                     res = sqlite3_bind_text16(d->stmt, i + 1, str->utf16(),
527                                               (str->size()) * sizeof(QChar), SQLITE_STATIC);
528                     break; }
529                 default: {
530                     QString str = value.toString();
531                     // SQLITE_TRANSIENT makes sure that sqlite buffers the data
532                     res = sqlite3_bind_text16(d->stmt, i + 1, str.utf16(),
533                                               (str.size()) * sizeof(QChar), SQLITE_TRANSIENT);
534                     break; }
535                 }
536             }
537             if (res != SQLITE_OK) {
538                 setLastError(qMakeError(d->drv_d_func()->access, QCoreApplication::translate("QSQLiteResult",
539                              "Unable to bind parameters"), QSqlError::StatementError, res));
540                 d->finalize();
541                 return false;
542             }
543         }
544     } else {
545         setLastError(QSqlError(QCoreApplication::translate("QSQLiteResult",
546                         "Parameter count mismatch"), QString(), QSqlError::StatementError));
547         return false;
548     }
549     d->skippedStatus = d->fetchNext(d->firstRow, 0, true);
550     if (lastError().isValid()) {
551         setSelect(false);
552         setActive(false);
553         return false;
554     }
555     setSelect(!d->rInf.isEmpty());
556     setActive(true);
557     return true;
558 }
559 
560 bool QSQLiteResult::gotoNext(QSqlCachedResult::ValueCache& row, int idx)
561 {
562     Q_D(QSQLiteResult);
563     return d->fetchNext(row, idx, false);
564 }
565 
566 int QSQLiteResult::size()
567 {
568     return -1;
569 }
570 
571 int QSQLiteResult::numRowsAffected()
572 {
573     Q_D(const QSQLiteResult);
574     return sqlite3_changes(d->drv_d_func()->access);
575 }
576 
577 QVariant QSQLiteResult::lastInsertId() const
578 {
579     Q_D(const QSQLiteResult);
580     if (isActive()) {
581         qint64 id = sqlite3_last_insert_rowid(d->drv_d_func()->access);
582         if (id)
583             return id;
584     }
585     return QVariant();
586 }
587 
588 QSqlRecord QSQLiteResult::record() const
589 {
590     Q_D(const QSQLiteResult);
591     if (!isActive() || !isSelect())
592         return QSqlRecord();
593     return d->rInf;
594 }
595 
596 void QSQLiteResult::detachFromResultSet()
597 {
598     Q_D(QSQLiteResult);
599     if (d->stmt)
600         sqlite3_reset(d->stmt);
601 }
602 
603 QVariant QSQLiteResult::handle() const
604 {
605     Q_D(const QSQLiteResult);
606     return QVariant::fromValue(d->stmt);
607 }
608 
609 /////////////////////////////////////////////////////////
610 
611 #ifndef QT_NO_REGULAREXPRESSION
612 static void _q_regexp(sqlite3_context* context, int argc, sqlite3_value** argv)
613 {
614     if (Q_UNLIKELY(argc != 2)) {
615         sqlite3_result_int(context, 0);
616         return;
617     }
618 
619     const QString pattern = QString::fromUtf8(
620         reinterpret_cast<const char*>(sqlite3_value_text(argv[0])));
621     const QString subject = QString::fromUtf8(
622         reinterpret_cast<const char*>(sqlite3_value_text(argv[1])));
623 
624     auto cache = static_cast<QCache<QString, QRegularExpression>*>(sqlite3_user_data(context));
625     auto regexp = cache->object(pattern);
626     const bool wasCached = regexp;
627 
628     if (!wasCached)
629         regexp = new QRegularExpression(pattern, QRegularExpression::DontCaptureOption | QRegularExpression::OptimizeOnFirstUsageOption);
630 
631     const bool found = subject.contains(*regexp);
632 
633     if (!wasCached)
634         cache->insert(pattern, regexp);
635 
636     sqlite3_result_int(context, int(found));
637 }
638 
639 static void _q_regexp_cleanup(void *cache)
640 {
641     delete static_cast<QCache<QString, QRegularExpression>*>(cache);
642 }
643 #endif
644 
645 QSQLiteDriver::QSQLiteDriver(QObject * parent)
646     : QSqlDriver(*new QSQLiteDriverPrivate, parent)
647 {
648 }
649 
650 QSQLiteDriver::QSQLiteDriver(sqlite3 *connection, QObject *parent)
651     : QSqlDriver(*new QSQLiteDriverPrivate, parent)
652 {
653     Q_D(QSQLiteDriver);
654     d->access = connection;
655     setOpen(true);
656     setOpenError(false);
657 }
658 
659 
660 QSQLiteDriver::~QSQLiteDriver()
661 {
662     close();
663 }
664 
665 bool QSQLiteDriver::hasFeature(DriverFeature f) const
666 {
667     switch (f) {
668     case BLOB:
669     case Transactions:
670     case Unicode:
671     case LastInsertId:
672     case PreparedQueries:
673     case PositionalPlaceholders:
674     case SimpleLocking:
675     case FinishQuery:
676     case LowPrecisionNumbers:
677     case EventNotifications:
678         return true;
679     case QuerySize:
680     case BatchOperations:
681     case MultipleResultSets:
682     case CancelQuery:
683         return false;
684     case NamedPlaceholders:
685 #if (SQLITE_VERSION_NUMBER < 3003011)
686         return false;
687 #else
688         return true;
689 #endif
690 
691     }
692     return false;
693 }
694 
695 /*
696    SQLite dbs have no user name, passwords, hosts or ports.
697    just file names.
698 */
699 bool QSQLiteDriver::open(const QString & db, const QString &, const QString &, const QString &, int, const QString &conOpts)
700 {
701     Q_D(QSQLiteDriver);
702     if (isOpen())
703         close();
704 
705 
706     int timeOut = 5000;
707     bool sharedCache = false;
708     bool openReadOnlyOption = false;
709     bool openUriOption = false;
710 #ifndef QT_NO_REGULAREXPRESSION
711     static const QLatin1String regexpConnectOption = QLatin1String("QSQLITE_ENABLE_REGEXP");
712     bool defineRegexp = false;
713     int regexpCacheSize = 25;
714 #endif
715 
716     const auto opts = conOpts.splitRef(QLatin1Char(';'));
717     for (auto option : opts) {
718         option = option.trimmed();
719         if (option.startsWith(QLatin1String("QSQLITE_BUSY_TIMEOUT"))) {
720             option = option.mid(20).trimmed();
721             if (option.startsWith(QLatin1Char('='))) {
722                 bool ok;
723                 const int nt = option.mid(1).trimmed().toInt(&ok);
724                 if (ok)
725                     timeOut = nt;
726             }
727         } else if (option == QLatin1String("QSQLITE_OPEN_READONLY")) {
728             openReadOnlyOption = true;
729         } else if (option == QLatin1String("QSQLITE_OPEN_URI")) {
730             openUriOption = true;
731         } else if (option == QLatin1String("QSQLITE_ENABLE_SHARED_CACHE")) {
732             sharedCache = true;
733         }
734 #ifndef QT_NO_REGULAREXPRESSION
735         else if (option.startsWith(regexpConnectOption)) {
736             option = option.mid(regexpConnectOption.size()).trimmed();
737             if (option.isEmpty()) {
738                 defineRegexp = true;
739             } else if (option.startsWith(QLatin1Char('='))) {
740                 bool ok = false;
741                 const int cacheSize = option.mid(1).trimmed().toInt(&ok);
742                 if (ok) {
743                     defineRegexp = true;
744                     if (cacheSize > 0)
745                         regexpCacheSize = cacheSize;
746                 }
747             }
748         }
749 #endif
750     }
751 
752     int openMode = (openReadOnlyOption ? SQLITE_OPEN_READONLY : (SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE));
753     openMode |= (sharedCache ? SQLITE_OPEN_SHAREDCACHE : SQLITE_OPEN_PRIVATECACHE);
754     if (openUriOption)
755         openMode |= SQLITE_OPEN_URI;
756 
757     openMode |= SQLITE_OPEN_NOMUTEX;
758 
759     if (sqlite3_open_v2(db.toUtf8().constData(), &d->access, openMode, NULL) == SQLITE_OK) {
760         sqlite3_busy_timeout(d->access, timeOut);
761         setOpen(true);
762         setOpenError(false);
763 #ifndef QT_NO_REGULAREXPRESSION
764         if (defineRegexp) {
765             auto cache = new QCache<QString, QRegularExpression>(regexpCacheSize);
766             sqlite3_create_function_v2(d->access, "regexp", 2, SQLITE_UTF8, cache, &_q_regexp, NULL,
767                                        NULL, &_q_regexp_cleanup);
768         }
769 #endif
770         return true;
771     } else {
772         if (d->access) {
773             sqlite3_close(d->access);
774             d->access = 0;
775         }
776 
777         setLastError(qMakeError(d->access, tr("Error opening database"),
778                      QSqlError::ConnectionError));
779         setOpenError(true);
780         return false;
781     }
782 }
783 
784 void QSQLiteDriver::close()
785 {
786     Q_D(QSQLiteDriver);
787     if (isOpen()) {
788         for (QSQLiteResult *result : qAsConst(d->results))
789             result->d_func()->finalize();
790 
791         if (d->access && (d->notificationid.count() > 0)) {
792             d->notificationid.clear();
793             sqlite3_update_hook(d->access, NULL, NULL);
794         }
795 
796         if (sqlite3_close(d->access) != SQLITE_OK)
797             setLastError(qMakeError(d->access, tr("Error closing database"), QSqlError::ConnectionError));
798         d->access = 0;
799         setOpen(false);
800         setOpenError(false);
801     }
802 }
803 
804 QSqlResult *QSQLiteDriver::createResult() const
805 {
806     return new QSQLiteResult(this);
807 }
808 
809 bool QSQLiteDriver::beginTransaction()
810 {
811     if (!isOpen() || isOpenError())
812         return false;
813 
814     QSqlQuery q(createResult());
815     if (!q.exec(QLatin1String("BEGIN"))) {
816         setLastError(QSqlError(tr("Unable to begin transaction"),
817                                q.lastError().databaseText(), QSqlError::TransactionError));
818         return false;
819     }
820 
821     return true;
822 }
823 
824 bool QSQLiteDriver::commitTransaction()
825 {
826     if (!isOpen() || isOpenError())
827         return false;
828 
829     QSqlQuery q(createResult());
830     if (!q.exec(QLatin1String("COMMIT"))) {
831         setLastError(QSqlError(tr("Unable to commit transaction"),
832                                q.lastError().databaseText(), QSqlError::TransactionError));
833         return false;
834     }
835 
836     return true;
837 }
838 
839 bool QSQLiteDriver::rollbackTransaction()
840 {
841     if (!isOpen() || isOpenError())
842         return false;
843 
844     QSqlQuery q(createResult());
845     if (!q.exec(QLatin1String("ROLLBACK"))) {
846         setLastError(QSqlError(tr("Unable to rollback transaction"),
847                                q.lastError().databaseText(), QSqlError::TransactionError));
848         return false;
849     }
850 
851     return true;
852 }
853 
854 QStringList QSQLiteDriver::tables(QSql::TableType type) const
855 {
856     QStringList res;
857     if (!isOpen())
858         return res;
859 
860     QSqlQuery q(createResult());
861     q.setForwardOnly(true);
862 
863     QString sql = QLatin1String("SELECT name FROM sqlite_master WHERE %1 "
864                                 "UNION ALL SELECT name FROM sqlite_temp_master WHERE %1");
865     if ((type & QSql::Tables) && (type & QSql::Views))
866         sql = sql.arg(QLatin1String("type='table' OR type='view'"));
867     else if (type & QSql::Tables)
868         sql = sql.arg(QLatin1String("type='table'"));
869     else if (type & QSql::Views)
870         sql = sql.arg(QLatin1String("type='view'"));
871     else
872         sql.clear();
873 
874     if (!sql.isEmpty() && q.exec(sql)) {
875         while(q.next())
876             res.append(q.value(0).toString());
877     }
878 
879     if (type & QSql::SystemTables) {
880         // there are no internal tables beside this one:
881         res.append(QLatin1String("sqlite_master"));
882     }
883 
884     return res;
885 }
886 
887 static QSqlIndex qGetTableInfo(QSqlQuery &q, const QString &tableName, bool onlyPIndex = false)
888 {
889     QString schema;
890     QString table(tableName);
891     int indexOfSeparator = tableName.indexOf(QLatin1Char('.'));
892     if (indexOfSeparator > -1) {
893         schema = tableName.left(indexOfSeparator).append(QLatin1Char('.'));
894         table = tableName.mid(indexOfSeparator + 1);
895     }
896     q.exec(QLatin1String("PRAGMA ") + schema + QLatin1String("table_info (") + _q_escapeIdentifier(table) + QLatin1Char(')'));
897 
898     QSqlIndex ind;
899     while (q.next()) {
900         bool isPk = q.value(5).toInt();
901         if (onlyPIndex && !isPk)
902             continue;
903         QString typeName = q.value(2).toString().toLower();
904         QSqlField fld(q.value(1).toString(), qGetColumnType(typeName), tableName);
905         if (isPk && (typeName == QLatin1String("integer")))
906             // INTEGER PRIMARY KEY fields are auto-generated in sqlite
907             // INT PRIMARY KEY is not the same as INTEGER PRIMARY KEY!
908             fld.setAutoValue(true);
909         fld.setRequired(q.value(3).toInt() != 0);
910         fld.setDefaultValue(q.value(4));
911         ind.append(fld);
912     }
913     return ind;
914 }
915 
916 QSqlIndex QSQLiteDriver::primaryIndex(const QString &tblname) const
917 {
918     if (!isOpen())
919         return QSqlIndex();
920 
921     QString table = tblname;
922     if (isIdentifierEscaped(table, QSqlDriver::TableName))
923         table = stripDelimiters(table, QSqlDriver::TableName);
924 
925     QSqlQuery q(createResult());
926     q.setForwardOnly(true);
927     return qGetTableInfo(q, table, true);
928 }
929 
930 QSqlRecord QSQLiteDriver::record(const QString &tbl) const
931 {
932     if (!isOpen())
933         return QSqlRecord();
934 
935     QString table = tbl;
936     if (isIdentifierEscaped(table, QSqlDriver::TableName))
937         table = stripDelimiters(table, QSqlDriver::TableName);
938 
939     QSqlQuery q(createResult());
940     q.setForwardOnly(true);
941     return qGetTableInfo(q, table);
942 }
943 
944 QVariant QSQLiteDriver::handle() const
945 {
946     Q_D(const QSQLiteDriver);
947     return QVariant::fromValue(d->access);
948 }
949 
950 QString QSQLiteDriver::escapeIdentifier(const QString &identifier, IdentifierType type) const
951 {
952     Q_UNUSED(type);
953     return _q_escapeIdentifier(identifier);
954 }
955 
956 static void handle_sqlite_callback(void *qobj,int aoperation, char const *adbname, char const *atablename,
957                                    sqlite3_int64 arowid)
958 {
959     Q_UNUSED(aoperation);
960     Q_UNUSED(adbname);
961     QSQLiteDriver *driver = static_cast<QSQLiteDriver *>(qobj);
962     if (driver) {
963         QMetaObject::invokeMethod(driver, "handleNotification", Qt::QueuedConnection,
964                                   Q_ARG(QString, QString::fromUtf8(atablename)), Q_ARG(qint64, arowid));
965     }
966 }
967 
968 bool QSQLiteDriver::subscribeToNotification(const QString &name)
969 {
970     Q_D(QSQLiteDriver);
971     if (!isOpen()) {
972         qWarning("Database not open.");
973         return false;
974     }
975 
976     if (d->notificationid.contains(name)) {
977         qWarning("Already subscribing to '%s'.", qPrintable(name));
978         return false;
979     }
980 
981     //sqlite supports only one notification callback, so only the first is registered
982     d->notificationid << name;
983     if (d->notificationid.count() == 1)
984         sqlite3_update_hook(d->access, &handle_sqlite_callback, reinterpret_cast<void *> (this));
985 
986     return true;
987 }
988 
989 bool QSQLiteDriver::unsubscribeFromNotification(const QString &name)
990 {
991     Q_D(QSQLiteDriver);
992     if (!isOpen()) {
993         qWarning("Database not open.");
994         return false;
995     }
996 
997     if (!d->notificationid.contains(name)) {
998         qWarning("Not subscribed to '%s'.", qPrintable(name));
999         return false;
1000     }
1001 
1002     d->notificationid.removeAll(name);
1003     if (d->notificationid.isEmpty())
1004         sqlite3_update_hook(d->access, NULL, NULL);
1005 
1006     return true;
1007 }
1008 
1009 QStringList QSQLiteDriver::subscribedToNotifications() const
1010 {
1011     Q_D(const QSQLiteDriver);
1012     return d->notificationid;
1013 }
1014 
1015 void QSQLiteDriver::handleNotification(const QString &tableName, qint64 rowid)
1016 {
1017     Q_D(const QSQLiteDriver);
1018     if (d->notificationid.contains(tableName)) {
1019         emit notification(tableName);
1020         emit notification(tableName, QSqlDriver::UnknownSource, QVariant(rowid));
1021     }
1022 }
1023 
1024 QT_END_NAMESPACE
