Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "windowsupport.h"
27 
28 #include "actionmanager/actioncontainer.h"
29 #include "actionmanager/actionmanager.h"
30 #include "actionmanager/command.h"
31 #include "coreconstants.h"
32 #include "icore.h"
33 
34 #include <app/app_version.h>
35 #include <utils/hostosinfo.h>
36 #include <utils/qtcassert.h>
37 
38 #include <QAction>
39 #include <QEvent>
40 #include <QMenu>
41 #include <QWidget>
42 
43 namespace Core {
44 namespace Internal {
45 
46 
47 QMenu *WindowList::m_dockMenu = 0;
48 QList<QWidget *> WindowList::m_windows;
49 QList<QAction *> WindowList::m_windowActions;
50 QList<Id> WindowList::m_windowActionIds;
51 
52 WindowSupport::WindowSupport(QWidget *window, const Context &context)
53     : QObject(window),
54       m_window(window)
55 {
56     m_window->installEventFilter(this);
57 
58     m_contextObject = new IContext(this);
59     m_contextObject->setWidget(window);
60     m_contextObject->setContext(context);
61     ICore::addContextObject(m_contextObject);
62 
63     if (useMacShortcuts) {
64         m_minimizeAction = new QAction(this);
65         ActionManager::registerAction(m_minimizeAction, Constants::MINIMIZE_WINDOW, context);
66         connect(m_minimizeAction, &QAction::triggered, m_window, &QWidget::showMinimized);
67 
68         m_zoomAction = new QAction(this);
69         ActionManager::registerAction(m_zoomAction, Constants::ZOOM_WINDOW, context);
70         connect(m_zoomAction, &QAction::triggered, m_window, &QWidget::showMaximized);
71 
72         m_closeAction = new QAction(this);
73         ActionManager::registerAction(m_closeAction, Constants::CLOSE_WINDOW, context);
74         connect(m_closeAction, &QAction::triggered, m_window, &QWidget::close, Qt::QueuedConnection);
75     }
76 
77     m_toggleFullScreenAction = new QAction(this);
78     updateFullScreenAction();
79     ActionManager::registerAction(m_toggleFullScreenAction, Constants::TOGGLE_FULLSCREEN, context);
80     connect(m_toggleFullScreenAction, &QAction::triggered, this, &WindowSupport::toggleFullScreen);
81 
82     WindowList::addWindow(window);
83 
84     connect(ICore::instance(), &ICore::coreAboutToClose, this, [this]() { m_shutdown = true; });
85 }
86 
87 WindowSupport::~WindowSupport()
88 {
89     if (!m_shutdown) { // don't update all that stuff if we are shutting down anyhow
90         if (useMacShortcuts) {
91             ActionManager::unregisterAction(m_minimizeAction, Constants::MINIMIZE_WINDOW);
92             ActionManager::unregisterAction(m_zoomAction, Constants::ZOOM_WINDOW);
93             ActionManager::unregisterAction(m_closeAction, Constants::CLOSE_WINDOW);
94         }
95         ActionManager::unregisterAction(m_toggleFullScreenAction, Constants::TOGGLE_FULLSCREEN);
96         ICore::removeContextObject(m_contextObject);
97         WindowList::removeWindow(m_window);
98     }
99 }
100 
101 void WindowSupport::setCloseActionEnabled(bool enabled)
102 {
103     if (useMacShortcuts)
104         m_closeAction->setEnabled(enabled);
105 }
106 
107 bool WindowSupport::eventFilter(QObject *obj, QEvent *event)
108 {
109     if (obj != m_window)
110         return false;
111     if (event->type() == QEvent::WindowStateChange) {
112         if (Utils::HostOsInfo::isMacHost()) {
113             bool minimized = m_window->isMinimized();
114             m_minimizeAction->setEnabled(!minimized);
115             m_zoomAction->setEnabled(!minimized);
116         }
117         updateFullScreenAction();
118     } else if (event->type() == QEvent::WindowActivate) {
119         WindowList::setActiveWindow(m_window);
120     } else if (event->type() == QEvent::Hide) {
121         // minimized windows are hidden, but we still want to show them
122         WindowList::setWindowVisible(m_window, m_window->isMinimized());
123     } else if (event->type() == QEvent::Show) {
124         WindowList::setWindowVisible(m_window, true);
125     }
126     return false;
127 }
128 
129 void WindowSupport::toggleFullScreen()
130 {
131     if (m_window->isFullScreen()) {
132         m_window->setWindowState(m_window->windowState() & ~Qt::WindowFullScreen);
133     } else {
134         m_window->setWindowState(m_window->windowState() | Qt::WindowFullScreen);
135     }
136 }
137 
138 void WindowSupport::updateFullScreenAction()
139 {
140     if (m_window->isFullScreen()) {
141         if (Utils::HostOsInfo::isMacHost())
142             m_toggleFullScreenAction->setText(tr("Exit Full Screen"));
143         else
144             m_toggleFullScreenAction->setChecked(true);
145     } else {
146         if (Utils::HostOsInfo::isMacHost())
147             m_toggleFullScreenAction->setText(tr("Enter Full Screen"));
148         else
149             m_toggleFullScreenAction->setChecked(false);
150     }
151 }
152 
153 void WindowList::addWindow(QWidget *window)
154 {
155 #ifdef Q_OS_OSX
156     if (!m_dockMenu) {
157         m_dockMenu = new QMenu;
158         m_dockMenu->setAsDockMenu();
159     }
160 #endif
161 
162     m_windows.append(window);
163     Id id = Id("QtCreator.Window.").withSuffix(m_windows.size());
164     m_windowActionIds.append(id);
165     auto action = new QAction(window->windowTitle(), window);
166     m_windowActions.append(action);
167     QObject::connect(action, &QAction::triggered, [action]() { WindowList::activateWindow(action); });
168     action->setCheckable(true);
169     action->setChecked(false);
170     Command *cmd = ActionManager::registerAction(action, id);
171     cmd->setAttribute(Command::CA_UpdateText);
172     ActionManager::actionContainer(Constants::M_WINDOW)->addAction(cmd, Constants::G_WINDOW_LIST);
173     action->setVisible(window->isVisible() || window->isMinimized()); // minimized windows are hidden but should be shown
174     QObject::connect(window, &QWidget::windowTitleChanged, [window]() { WindowList::updateTitle(window); });
175     if (m_dockMenu)
176         m_dockMenu->addAction(action);
177     if (window->isActiveWindow())
178         setActiveWindow(window);
179 }
180 
181 void WindowList::activateWindow(QAction *action)
182 {
183     int index = m_windowActions.indexOf(action);
184     QTC_ASSERT(index >= 0, return);
185     QTC_ASSERT(index < m_windows.size(), return);
186     ICore::raiseWindow(m_windows.at(index));
187 }
188 
189 void WindowList::updateTitle(QWidget *window)
190 {
191     int index = m_windows.indexOf(window);
192     QTC_ASSERT(index >= 0, return);
193     QTC_ASSERT(index < m_windowActions.size(), return);
194     QString title = window->windowTitle();
195     if (title.endsWith(QStringLiteral("- ") + Constants::IDE_DISPLAY_NAME))
196         title.chop(12);
197     m_windowActions.at(index)->setText(title.trimmed());
198 }
199 
200 void WindowList::removeWindow(QWidget *window)
201 {
202     // remove window from list,
203     // remove last action from menu(s)
204     // and update all action titles, starting with the index where the window was
205     int index = m_windows.indexOf(window);
206     QTC_ASSERT(index >= 0, return);
207 
208     ActionManager::unregisterAction(m_windowActions.last(), m_windowActionIds.last());
209     delete m_windowActions.takeLast();
210     m_windowActionIds.removeLast();
211 
212     m_windows.removeOne(window);
213 
214     for (int i = index; i < m_windows.size(); ++i)
215         updateTitle(m_windows.at(i));
216 }
217 
218 void WindowList::setActiveWindow(QWidget *window)
219 {
220     for (int i = 0; i < m_windows.size(); ++i)
221         m_windowActions.at(i)->setChecked(m_windows.at(i) == window);
222 }
223 
224 void WindowList::setWindowVisible(QWidget *window, bool visible)
225 {
226     int index = m_windows.indexOf(window);
227     QTC_ASSERT(index >= 0, return);
228     QTC_ASSERT(index < m_windowActions.size(), return);
229     m_windowActions.at(index)->setVisible(visible);
230 }
231 
232 } // Internal
233 } // Core
