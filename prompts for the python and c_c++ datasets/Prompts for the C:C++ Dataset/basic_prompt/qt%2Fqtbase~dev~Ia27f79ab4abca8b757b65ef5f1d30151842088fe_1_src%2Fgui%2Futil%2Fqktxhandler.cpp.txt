Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2017 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "qktxhandler_p.h"
41 #include "qtexturefiledata_p.h"
42 #include <QtEndian>
43 #include <QSize>
44 #include <QtCore/qiodevice.h>
45 
46 //#define KTX_DEBUG
47 #ifdef KTX_DEBUG
48 #include <QDebug>
49 #include <QMetaEnum>
50 #include <QOpenGLTexture>
51 #endif
52 
53 QT_BEGIN_NAMESPACE
54 
55 #define KTX_IDENTIFIER_LENGTH 12
56 static const char ktxIdentifier[KTX_IDENTIFIER_LENGTH] = { '\xAB', 'K', 'T', 'X', ' ', '1', '1', '\xBB', '\r', '\n', '\x1A', '\n' };
57 static const quint32 platformEndianIdentifier = 0x04030201;
58 static const quint32 inversePlatformEndianIdentifier = 0x01020304;
59 
60 struct KTXHeader {
61     quint8 identifier[KTX_IDENTIFIER_LENGTH]; // Must match ktxIdentifier
62     quint32 endianness; // Either platformEndianIdentifier or inversePlatformEndianIdentifier, other values not allowed.
63     quint32 glType;
64     quint32 glTypeSize;
65     quint32 glFormat;
66     quint32 glInternalFormat;
67     quint32 glBaseInternalFormat;
68     quint32 pixelWidth;
69     quint32 pixelHeight;
70     quint32 pixelDepth;
71     quint32 numberOfArrayElements;
72     quint32 numberOfFaces;
73     quint32 numberOfMipmapLevels;
74     quint32 bytesOfKeyValueData;
75 };
76 
77 static const quint32 headerSize = sizeof(KTXHeader);
78 
79 // Currently unused, declared for future reference
80 struct KTXKeyValuePairItem {
81     quint32   keyAndValueByteSize;
82     /*
83     quint8 keyAndValue[keyAndValueByteSize];
84     quint8 valuePadding[3 - ((keyAndValueByteSize + 3) % 4)];
85     */
86 };
87 
88 struct KTXMipmapLevel {
89     quint32 imageSize;
90     /*
91     for each array_element in numberOfArrayElements*
92         for each face in numberOfFaces
93             for each z_slice in pixelDepth*
94                 for each row or row_of_blocks in pixelHeight*
95                     for each pixel or block_of_pixels in pixelWidth
96                         Byte data[format-specific-number-of-bytes]**
97                     end
98                 end
99             end
100             Byte cubePadding[0-3]
101         end
102     end
103     quint8 mipPadding[3 - ((imageSize + 3) % 4)]
104     */
105 };
106 
107 // Returns the nearest multiple of 'rounding' greater than or equal to 'value'
108 constexpr quint32 withPadding(quint32 value, quint32 rounding)
109 {
110     Q_ASSERT(rounding > 1);
111     return value + (rounding - 1) - ((value + (rounding - 1)) % rounding);
112 }
113 
114 bool QKtxHandler::canRead(const QByteArray &suffix, const QByteArray &block)
115 {
116     Q_UNUSED(suffix);
117 
118     return (qstrncmp(block.constData(), ktxIdentifier, KTX_IDENTIFIER_LENGTH) == 0);
119 }
120 
121 QTextureFileData QKtxHandler::read()
122 {
123     if (!device())
124         return QTextureFileData();
125 
126     QByteArray buf = device()->readAll();
127     const quint32 dataSize = quint32(buf.size());
128     if (dataSize < headerSize || !canRead(QByteArray(), buf)) {
129         qCDebug(lcQtGuiTextureIO, "Invalid KTX file %s", logName().constData());
130         return QTextureFileData();
131     }
132 
133     const KTXHeader *header = reinterpret_cast<const KTXHeader *>(buf.constData());
134     if (!checkHeader(*header)) {
135         qCDebug(lcQtGuiTextureIO, "Unsupported KTX file format in %s", logName().constData());
136         return QTextureFileData();
137     }
138 
139     QTextureFileData texData;
140     texData.setData(buf);
141 
142     texData.setSize(QSize(decode(header->pixelWidth), decode(header->pixelHeight)));
143     texData.setGLFormat(decode(header->glFormat));
144     texData.setGLInternalFormat(decode(header->glInternalFormat));
145     texData.setGLBaseInternalFormat(decode(header->glBaseInternalFormat));
146 
147     texData.setNumLevels(decode(header->numberOfMipmapLevels));
148     texData.setNumFaces(decode(header->numberOfFaces));
149 
150     const quint32 bytesOfKeyValueData = decode(header->bytesOfKeyValueData);
151     if (headerSize + bytesOfKeyValueData < ulong(buf.length())) // oob check
152         texData.setKeyValueMetadata(
153                 decodeKeyValues(QByteArrayView(buf.data() + headerSize, bytesOfKeyValueData)));
154     quint32 offset = headerSize + bytesOfKeyValueData;
155 
156     constexpr int MAX_ITERATIONS = 32; // cap iterations in case of corrupt data
157 
158     for (int level = 0; level < qMin(texData.numLevels(), MAX_ITERATIONS); level++) {
159         if (offset + sizeof(quint32) > dataSize) // Corrupt file; avoid oob read
160             break;
161 
162         const quint32 imageSize = decode(qFromUnaligned<quint32>(buf.constData() + offset));
163         offset += sizeof(quint32);
164 
165         for (int face = 0; face < qMin(texData.numFaces(), MAX_ITERATIONS); face++) {
166             texData.setDataOffset(offset, level, face);
167             texData.setDataLength(imageSize, level, face);
168 
169             // Add image data and padding to offset
170             offset += withPadding(imageSize, 4);
171         }
172     }
173 
174     if (!texData.isValid()) {
175         qCDebug(lcQtGuiTextureIO, "Invalid values in header of KTX file %s", logName().constData());
176         return QTextureFileData();
177     }
178 
179     texData.setLogName(logName());
180 
181 #ifdef KTX_DEBUG
182     qDebug() << "KTX file handler read" << texData;
183 #endif
184 
185     return texData;
186 }
187 
188 bool QKtxHandler::checkHeader(const KTXHeader &header)
189 {
190     if (header.endianness != platformEndianIdentifier && header.endianness != inversePlatformEndianIdentifier)
191         return false;
192     inverseEndian = (header.endianness == inversePlatformEndianIdentifier);
193 #ifdef KTX_DEBUG
194     QMetaEnum tfme = QMetaEnum::fromType<QOpenGLTexture::TextureFormat>();
195     QMetaEnum ptme = QMetaEnum::fromType<QOpenGLTexture::PixelType>();
196     qDebug("Header of %s:", logName().constData());
197     qDebug("  glType: 0x%x (%s)", decode(header.glType), ptme.valueToKey(decode(header.glType)));
198     qDebug("  glTypeSize: %u", decode(header.glTypeSize));
199     qDebug("  glFormat: 0x%x (%s)", decode(header.glFormat),
200            tfme.valueToKey(decode(header.glFormat)));
201     qDebug("  glInternalFormat: 0x%x (%s)", decode(header.glInternalFormat),
202            tfme.valueToKey(decode(header.glInternalFormat)));
203     qDebug("  glBaseInternalFormat: 0x%x (%s)", decode(header.glBaseInternalFormat),
204            tfme.valueToKey(decode(header.glBaseInternalFormat)));
205     qDebug("  pixelWidth: %u", decode(header.pixelWidth));
206     qDebug("  pixelHeight: %u", decode(header.pixelHeight));
207     qDebug("  pixelDepth: %u", decode(header.pixelDepth));
208     qDebug("  numberOfArrayElements: %u", decode(header.numberOfArrayElements));
209     qDebug("  numberOfFaces: %u", decode(header.numberOfFaces));
210     qDebug("  numberOfMipmapLevels: %u", decode(header.numberOfMipmapLevels));
211     qDebug("  bytesOfKeyValueData: %u", decode(header.bytesOfKeyValueData));
212 #endif
213     const bool isCompressedImage = decode(header.glType) == 0 && decode(header.glFormat) == 0
214             && decode(header.pixelDepth) == 0;
215     const bool isCubeMap = decode(header.numberOfFaces) == 6;
216     const bool is2D = decode(header.pixelDepth) == 0 && decode(header.numberOfArrayElements) == 0;
217 
218     return is2D && (isCubeMap || isCompressedImage);
219 }
220 
221 QMap<QByteArray, QByteArray> QKtxHandler::decodeKeyValues(QByteArrayView view) const
222 {
223     QMap<QByteArray, QByteArray> output;
224     quint32 offset = 0;
225     while (offset < view.size() + sizeof(quint32)) {
226         const quint32 keyAndValueByteSize =
227                 decode(qFromUnaligned<quint32>(view.constData() + offset));
228         offset += sizeof(quint32);
229 
230         if (offset + keyAndValueByteSize > ulong(view.size()))
231             break; // oob read
232 
233         // 'key' is a UTF-8 string ending with a null terminator, 'value' is the rest.
234         // To separate the key and value we convert the complete data to utf-8 and find the first
235         // null terminator from the left, here we split the data into two.
236         const auto str = QString::fromUtf8(view.constData() + offset, keyAndValueByteSize);
237         const int idx = str.indexOf(QLatin1Char('\0'));
238         if (idx == -1)
239             continue;
240 
241         const QByteArray key = str.left(idx).toUtf8();
242         const size_t keySize = key.size() + 1; // Actual data size
243         const QByteArray value = QByteArray::fromRawData(view.constData() + offset + keySize,
244                                                          keyAndValueByteSize - keySize);
245 
246         offset = withPadding(offset + keyAndValueByteSize, 4);
247         output.insert(key, value);
248     }
249 
250     return output;
251 }
252 
253 quint32 QKtxHandler::decode(quint32 val) const
254 {
255     return inverseEndian ? qbswap<quint32>(val) : val;
256 }
257 
258 QT_END_NAMESPACE
