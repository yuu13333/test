Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 Thorben Kroeger <thorbenkroeger@gmail.com>.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "coreconstants.h"
27 #include "icore.h"
28 #include "manhattanstyle.h"
29 #include "themechooser.h"
30 
31 #include <utils/algorithm.h>
32 #include <utils/theme/theme.h>
33 #include <utils/theme/theme_p.h>
34 
35 #include <QAbstractListModel>
36 #include <QComboBox>
37 #include <QCoreApplication>
38 #include <QDebug>
39 #include <QDir>
40 #include <QHBoxLayout>
41 #include <QLabel>
42 #include <QMessageBox>
43 #include <QSettings>
44 #include <QSpacerItem>
45 
46 using namespace Utils;
47 
48 static const char themeNameKey[] = "ThemeName";
49 
50 namespace Core {
51 namespace Internal {
52 
53 ThemeEntry::ThemeEntry(Id id, const QString &filePath)
54     : m_id(id)
55     , m_filePath(filePath)
56 {
57 }
58 
59 Id ThemeEntry::id() const
60 {
61     return m_id;
62 }
63 
64 QString ThemeEntry::displayName() const
65 {
66     if (m_displayName.isEmpty() && !m_filePath.isEmpty()) {
67         QSettings settings(m_filePath, QSettings::IniFormat);
68         m_displayName = settings.value(QLatin1String(themeNameKey),
69                                        QCoreApplication::tr("unnamed")).toString();
70     }
71     return m_displayName;
72 }
73 
74 QString ThemeEntry::filePath() const
75 {
76     return m_filePath;
77 }
78 
79 class ThemeListModel : public QAbstractListModel
80 {
81 public:
82     ThemeListModel(QObject *parent = 0):
83         QAbstractListModel(parent)
84     {
85     }
86 
87     int rowCount(const QModelIndex &parent) const override
88     {
89         return parent.isValid() ? 0 : m_themes.size();
90     }
91 
92     QVariant data(const QModelIndex &index, int role) const override
93     {
94         if (role == Qt::DisplayRole)
95             return m_themes.at(index.row()).displayName();
96         return QVariant();
97     }
98 
99     void removeTheme(int index)
100     {
101         beginRemoveRows(QModelIndex(), index, index);
102         m_themes.removeAt(index);
103         endRemoveRows();
104     }
105 
106     void setThemes(const QList<ThemeEntry> &themes)
107     {
108         beginResetModel();
109         m_themes = themes;
110         endResetModel();
111     }
112 
113     const ThemeEntry &themeAt(int index) const
114     {
115         return m_themes.at(index);
116     }
117 
118 private:
119     QList<ThemeEntry> m_themes;
120 };
121 
122 
123 class ThemeChooserPrivate
124 {
125 public:
126     ThemeChooserPrivate(QWidget *widget);
127     ~ThemeChooserPrivate();
128 
129 public:
130     ThemeListModel *m_themeListModel;
131     QComboBox *m_themeComboBox;
132 };
133 
134 ThemeChooserPrivate::ThemeChooserPrivate(QWidget *widget)
135     : m_themeListModel(new ThemeListModel)
136     , m_themeComboBox(new QComboBox)
137 {
138     QHBoxLayout *layout = new QHBoxLayout(widget);
139     layout->addWidget(m_themeComboBox);
140     auto overriddenLabel = new QLabel;
141     overriddenLabel->setText(ThemeChooser::tr("Current theme: %1")
142                              .arg(creatorTheme()->displayName()));
143     layout->addWidget(overriddenLabel);
144     layout->setMargin(0);
145     auto horizontalSpacer = new QSpacerItem(40, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);
146     layout->addSpacerItem(horizontalSpacer);
147     m_themeComboBox->setModel(m_themeListModel);
148     const QList<ThemeEntry> themes = ThemeEntry::availableThemes();
149     const Id themeSetting = ThemeEntry::themeSetting();
150     const int selected = Utils::indexOf(themes, Utils::equal(&ThemeEntry::id, themeSetting));
151     m_themeListModel->setThemes(themes);
152     if (selected >= 0)
153         m_themeComboBox->setCurrentIndex(selected);
154 }
155 
156 ThemeChooserPrivate::~ThemeChooserPrivate()
157 {
158     delete m_themeListModel;
159 }
160 
161 ThemeChooser::ThemeChooser(QWidget *parent) :
162     QWidget(parent)
163 {
164     d = new ThemeChooserPrivate(this);
165 }
166 
167 ThemeChooser::~ThemeChooser()
168 {
169     delete d;
170 }
171 
172 void ThemeChooser::apply()
173 {
174     const int index = d->m_themeComboBox->currentIndex();
175     if (index == -1)
176         return;
177     const QString themeId = d->m_themeListModel->themeAt(index).id().toString();
178     QSettings *settings = ICore::settings();
179     const QString currentThemeId = ThemeEntry::themeSetting().toString();
180     if (currentThemeId != themeId) {
181         QMessageBox::information(ICore::mainWindow(), tr("Restart Required"),
182                                  tr("The theme change will take effect after a restart of Qt Creator."));
183 
184         // save filename of selected theme in global config
185         settings->setValue(QLatin1String(Constants::SETTINGS_THEME), themeId);
186     }
187 }
188 
189 static void addThemesFromPath(const QString &path, QList<ThemeEntry> *themes)
190 {
191     static const QLatin1String extension("*.creatortheme");
192     QDir themeDir(path);
193     themeDir.setNameFilters({extension});
194     themeDir.setFilter(QDir::Files);
195     const QStringList themeList = themeDir.entryList();
196     foreach (const QString &fileName, themeList) {
197         QString id = QFileInfo(fileName).completeBaseName();
198         themes->append(ThemeEntry(Id::fromString(id), themeDir.absoluteFilePath(fileName)));
199     }
200 }
201 
202 QList<ThemeEntry> ThemeEntry::availableThemes()
203 {
204     QList<ThemeEntry> themes;
205 
206     static const QString installThemeDir = ICore::resourcePath() + QLatin1String("/themes");
207     static const QString userThemeDir = ICore::userResourcePath() + QLatin1String("/themes");
208     addThemesFromPath(installThemeDir, &themes);
209     if (themes.isEmpty())
210         qWarning() << "Warning: No themes found in installation: "
211                    << QDir::toNativeSeparators(installThemeDir);
212     // move default theme to front
213     int defaultIndex = Utils::indexOf(themes, Utils::equal(&ThemeEntry::id, Id(Constants::DEFAULT_THEME)));
214     if (defaultIndex > 0) { // == exists and not at front
215         ThemeEntry defaultEntry = themes.takeAt(defaultIndex);
216         themes.prepend(defaultEntry);
217     }
218     addThemesFromPath(userThemeDir, &themes);
219     return themes;
220 }
221 
222 Id ThemeEntry::themeSetting()
223 {
224     const Id setting =
225             Id::fromSetting(ICore::settings()->value(QLatin1String(Constants::SETTINGS_THEME),
226                                                      QLatin1String(Constants::DEFAULT_THEME)));
227 
228     const QList<ThemeEntry> themes = availableThemes();
229     const bool settingValid = Utils::contains(themes, Utils::equal(&ThemeEntry::id, setting));
230 
231     return settingValid ? setting : themes.first().id();
232 }
233 
234 Theme *ThemeEntry::createTheme(Id id)
235 {
236     if (!id.isValid())
237         return nullptr;
238     const ThemeEntry entry = Utils::findOrDefault(availableThemes(),
239                                                   Utils::equal(&ThemeEntry::id, id));
240     if (!entry.id().isValid())
241         return nullptr;
242     QSettings themeSettings(entry.filePath(), QSettings::IniFormat);
243     Theme *theme = new Theme(entry.id().toString());
244     theme->readSettings(themeSettings);
245     return theme;
246 }
247 
248 } // namespace Internal
249 } // namespace Core
