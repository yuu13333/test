Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2018 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "preseteditor.h"
27 
28 #include "canvas.h"
29 #include "easingcurve.h"
30 #include "timelineicons.h"
31 
32 #include <QAbstractButton>
33 #include <QApplication>
34 #include <QContextMenuEvent>
35 #include <QMenu>
36 #include <QMessageBox>
37 #include <QPainter>
38 #include <QPixmap>
39 #include <QSettings>
40 #include <QStandardItemModel>
41 #include <QString>
42 
43 #include <coreplugin/icore.h>
44 #include <theme.h>
45 
46 namespace QmlDesigner {
47 
48 constexpr int iconWidth = 86;
49 constexpr int iconHeight = 86;
50 constexpr int itemFrame = 3;
51 constexpr int itemWidth = iconWidth + 2 * itemFrame;
52 constexpr int unsavedMarkSize = 18;
53 
54 constexpr int spacingg = 5;
55 
56 const QColor background = Qt::white;
57 
58 const QColor labelBackground = qRgb(0x70, 0x70, 0x70);
59 const QColor canvasBackground = qRgb(0x46, 0x46, 0x46);
60 const QColor curveLine = qRgb(0xe6, 0xe7, 0xe8);
61 
62 PresetItemDelegate::PresetItemDelegate() = default;
63 
64 void PresetItemDelegate::paint(QPainter *painter,
65                                const QStyleOptionViewItem &opt,
66                                const QModelIndex &index) const
67 {
68     QStyleOptionViewItem option = opt;
69     initStyleOption(&option, index);
70 
71     auto *w = option.widget;
72     auto *style = w == nullptr ? qApp->style() : w->style();
73 
74     QSize textSize = QSize(option.rect.width(),
75                            style->subElementRect(QStyle::SE_ItemViewItemText, &option, w).height());
76 
77     auto textRect = QRect(option.rect.topLeft(), textSize);
78     textRect.moveBottom(option.rect.bottom());
79 
80     option.font.setPixelSize(Theme::instance()->smallFontPixelSize());
81 
82     painter->save();
83     painter->fillRect(option.rect, canvasBackground);
84 
85     if (option.text.isEmpty())
86         painter->fillRect(textRect, canvasBackground);
87     else
88         painter->fillRect(textRect, Theme::instance()->qmlDesignerButtonColor());
89 
90     style->drawControl(QStyle::CE_ItemViewItem, &option, painter, option.widget);
91 
92     QVariant dirty = option.index.data(PresetList::ItemRole_Dirty);
93     if (dirty.isValid()) {
94         if (dirty.toBool()) {
95             QRect asteriskRect(option.rect.right() - unsavedMarkSize,
96                                itemFrame,
97                                unsavedMarkSize,
98                                unsavedMarkSize);
99 
100             QFont font = painter->font();
101             font.setPixelSize(unsavedMarkSize);
102             painter->setFont(font);
103 
104             auto pen = painter->pen();
105             pen.setColor(Qt::white);
106             painter->setPen(pen);
107 
108             painter->drawText(asteriskRect, Qt::AlignTop | Qt::AlignRight, "*");
109         }
110     }
111     painter->restore();
112 }
113 
114 QSize PresetItemDelegate::sizeHint(const QStyleOptionViewItem &opt, const QModelIndex &index) const
115 {
116     QSize size = QStyledItemDelegate::sizeHint(opt, index);
117     size.rwidth() = itemWidth;
118     return size;
119 }
120 
121 QIcon paintPreview()
122 {
123     QPixmap pm(iconWidth, iconHeight);
124     pm.fill(canvasBackground);
125     return QIcon(pm);
126 }
127 
128 QIcon paintPreview(const EasingCurve &curve)
129 {
130     QPixmap pm(iconWidth, iconHeight);
131     pm.fill(canvasBackground);
132 
133     QPainter painter(&pm);
134     painter.setRenderHint(QPainter::Antialiasing, true);
135 
136     Canvas canvas(iconWidth, iconHeight, 2, 2, 9, 6, 0, 1);
137     canvas.paintCurve(&painter, curve, curveLine);
138 
139     return QIcon(pm);
140 }
141 
142 namespace Internal {
143 
144 static const char settingsKey[] = "EasingCurveList";
145 static const char settingsFileName[] = "/EasingCurves.ini";
146 
147 QString settingsFullFilePath(const QSettings::Scope &scope)
148 {
149     if (scope == QSettings::SystemScope)
150         return Core::ICore::installerResourcePath() + settingsFileName;
151 
152     return Core::ICore::userResourcePath() + settingsFileName;
153 }
154 
155 } // namespace Internal
156 
157 PresetList::PresetList(QSettings::Scope scope, QWidget *parent)
158     : QListView(parent)
159     , m_scope(scope)
160     , m_index(-1)
161     , m_filename(Internal::settingsFullFilePath(scope))
162 {
163     int magic = 4;
164     int scrollBarWidth = this->style()->pixelMetric(QStyle::PM_ScrollBarExtent);
165     const int width = 3 * itemWidth + 4 * spacingg + scrollBarWidth + magic;
166 
167     setFixedWidth(width);
168 
169     setModel(new QStandardItemModel);
170 
171     setItemDelegate(new PresetItemDelegate);
172 
173     setSpacing(spacingg);
174 
175     setUniformItemSizes(true);
176 
177     setIconSize(QSize(iconWidth, iconHeight));
178 
179     setSelectionMode(QAbstractItemView::SingleSelection);
180 
181     setViewMode(QListView::IconMode);
182 
183     setFlow(QListView::LeftToRight);
184 
185     setMovement(QListView::Static);
186 
187     setWrapping(true);
188 
189     setTextElideMode(Qt::ElideMiddle);
190 
191     setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOn);
192 }
193 
194 void PresetList::selectionChanged(const QItemSelection &selected, const QItemSelection &deselected)
195 {
196     for (const QModelIndex &index : deselected.indexes()) {
197         if (dirty(index)) {
198             QMessageBox msgBox;
199             msgBox.setText("The preset has been modified.");
200             msgBox.setInformativeText("Do you want to save your changes?");
201             msgBox.setStandardButtons(QMessageBox::Save | QMessageBox::Discard
202                                       | QMessageBox::Cancel);
203             msgBox.setDefaultButton(QMessageBox::Save);
204 
205             if (QAbstractButton *button = msgBox.button(QMessageBox::Discard))
206                 button->setText("Discard Changes");
207 
208             if (QAbstractButton *button = msgBox.button(QMessageBox::Cancel))
209                 button->setText("Cancel Selection");
210 
211             int ret = msgBox.exec();
212 
213             switch (ret) {
214             case QMessageBox::Save:
215                 // Save the preset and continue selection.
216                 writePresets();
217                 break;
218             case QMessageBox::Discard:
219                 // Discard changes to the curve and continue selection.
220                 revert(index);
221                 break;
222 
223             case QMessageBox::Cancel:
224                 // Cancel selection operation and leave the curve untouched.
225                 selectionModel()->select(index, QItemSelectionModel::ClearAndSelect);
226                 return;
227 
228             default:
229                 // should never be reachedDiscard
230                 break;
231             }
232         }
233     }
234 
235     for (const auto &index : selected.indexes()) {
236         QVariant curveData = model()->data(index, ItemRole_Data);
237         if (curveData.isValid())
238             emit presetChanged(curveData.value<EasingCurve>());
239     }
240 }
241 
242 bool PresetList::hasSelection() const
243 {
244     return selectionModel()->hasSelection();
245 }
246 
247 bool PresetList::dirty(const QModelIndex &index) const
248 {
249     return model()->data(index, ItemRole_Dirty).toBool();
250 }
251 
252 int PresetList::index() const
253 {
254     return m_index;
255 }
256 
257 bool PresetList::isEditable(const QModelIndex &index) const
258 {
259     QFlags<Qt::ItemFlag> flags(model()->flags(index));
260     return flags.testFlag(Qt::ItemIsEditable);
261 }
262 
263 void PresetList::initialize(int index)
264 {
265     m_index = index;
266 
267     readPresets();
268 }
269 
270 void PresetList::readPresets()
271 {
272     auto *simodel = qobject_cast<QStandardItemModel *>(model());
273 
274     simodel->clear();
275 
276     QList<NamedEasingCurve> curves = storedCurves();
277 
278     for (int i = 0; i < curves.size(); ++i) {
279         QVariant curveData = QVariant::fromValue(curves[i].curve());
280 
281         auto *item = new QStandardItem(paintPreview(curves[i].curve()), curves[i].name());
282         item->setData(curveData, ItemRole_Data);
283         item->setEditable(m_scope == QSettings::UserScope);
284         item->setToolTip(curves[i].name());
285 
286         simodel->setItem(i, item);
287     }
288 }
289 
290 void PresetList::writePresets()
291 {
292     QList<QVariant> presets;
293     for (int i = 0; i < model()->rowCount(); ++i) {
294         QModelIndex index = model()->index(i, 0);
295 
296         QVariant nameData = model()->data(index, Qt::DisplayRole);
297         QVariant curveData = model()->data(index, ItemRole_Data);
298 
299         if (nameData.isValid() && curveData.isValid()) {
300             NamedEasingCurve curve(nameData.toString(), curveData.value<QmlDesigner::EasingCurve>());
301 
302             presets << QVariant::fromValue(curve);
303         }
304 
305         model()->setData(index, false, ItemRole_Dirty);
306     }
307 
308     QSettings settings(m_filename, QSettings::IniFormat);
309     settings.clear();
310     settings.setValue(Internal::settingsKey, QVariant::fromValue(presets));
311 }
312 
313 void PresetList::revert(const QModelIndex &index)
314 {
315     auto *simodel = qobject_cast<QStandardItemModel *>(model());
316     if (auto *item = simodel->itemFromIndex(index)) {
317         QString name = item->data(Qt::DisplayRole).toString();
318         QList<NamedEasingCurve> curves = storedCurves();
319 
320         for (const auto &curve : curves) {
321             if (curve.name() == name) {
322                 item->setData(false, ItemRole_Dirty);
323                 item->setData(paintPreview(curve.curve()), Qt::DecorationRole);
324                 item->setData(QVariant::fromValue(curve.curve()), ItemRole_Data);
325                 item->setToolTip(name);
326                 return;
327             }
328         }
329     }
330 }
331 
332 void PresetList::updateCurve(const EasingCurve &curve)
333 {
334     if (!selectionModel()->hasSelection())
335         return;
336 
337     QVariant icon = QVariant::fromValue(paintPreview(curve));
338     QVariant curveData = QVariant::fromValue(curve);
339 
340     for (const auto &index : selectionModel()->selectedIndexes())
341         setItemData(index, curveData, icon);
342 }
343 
344 void PresetList::contextMenuEvent(QContextMenuEvent *event)
345 {
346     event->accept();
347 
348     if (m_scope == QSettings::SystemScope)
349         return;
350 
351     auto *menu = new QMenu(this);
352 
353     QAction *addAction = menu->addAction(tr("Add Preset"));
354 
355     connect(addAction, &QAction::triggered, [&]() { createItem(); });
356 
357     if (selectionModel()->hasSelection()) {
358         QAction *removeAction = menu->addAction(tr("Delete Selected Preset"));
359         connect(removeAction, &QAction::triggered, [&]() { removeSelectedItem(); });
360     }
361 
362     menu->exec(event->globalPos());
363 }
364 
365 void PresetList::dataChanged(const QModelIndex &topLeft,
366                              const QModelIndex &bottomRight,
367                              const QVector<int> &roles)
368 {
369     if (topLeft == bottomRight && roles.contains(0)) {
370         QVariant name = model()->data(topLeft, 0);
371         model()->setData(topLeft, name, Qt::ToolTipRole);
372     }
373 }
374 
375 void PresetList::createItem()
376 {
377     EasingCurve curve;
378     curve.makeDefault();
379     createItem(createUniqueName(), curve);
380 }
381 
382 void PresetList::createItem(const QString &name, const EasingCurve &curve)
383 {
384     auto *item = new QStandardItem(paintPreview(curve), name);
385     item->setData(QVariant::fromValue(curve), ItemRole_Data);
386     item->setToolTip(name);
387 
388     int row = model()->rowCount();
389     qobject_cast<QStandardItemModel *>(model())->setItem(row, item);
390 
391     QModelIndex index = model()->index(row, 0);
392 
393     // Why is that needed? SingleSelection is specified.
394     selectionModel()->clear();
395     selectionModel()->select(index, QItemSelectionModel::Select);
396 }
397 
398 void PresetList::removeSelectedItem()
399 {
400     for (const auto &index : selectionModel()->selectedIndexes())
401         model()->removeRow(index.row());
402 
403     writePresets();
404 }
405 
406 void PresetList::setItemData(const QModelIndex &index, const QVariant &curve, const QVariant &icon)
407 {
408     if (isEditable(index)) {
409         model()->setData(index, curve, PresetList::ItemRole_Data);
410         model()->setData(index, true, PresetList::ItemRole_Dirty);
411         model()->setData(index, icon, Qt::DecorationRole);
412     }
413 }
414 
415 QString PresetList::createUniqueName() const
416 {
417     QStringList names = allNames();
418     auto nameIsUnique = [&](const QString &name) {
419         auto iter = std::find(names.begin(), names.end(), name);
420         if (iter == names.end())
421             return true;
422         else
423             return false;
424     };
425 
426     int counter = 0;
427     QString tmp("Default");
428     QString name = tmp;
429 
430     while (!nameIsUnique(name))
431         name = tmp + QString(" %1").arg(counter++);
432 
433     return name;
434 }
435 
436 QStringList PresetList::allNames() const
437 {
438     QStringList names;
439     for (int i = 0; i < model()->rowCount(); ++i) {
440         QModelIndex index = model()->index(i, 0);
441         QVariant nameData = model()->data(index, Qt::DisplayRole);
442         if (nameData.isValid())
443             names << nameData.toString();
444     }
445 
446     return names;
447 }
448 
449 QList<NamedEasingCurve> PresetList::storedCurves() const
450 {
451     QSettings settings(m_filename, QSettings::IniFormat);
452     QVariant presetSettings = settings.value(Internal::settingsKey);
453 
454     if (!presetSettings.isValid())
455         return QList<NamedEasingCurve>();
456 
457     QList<QVariant> presets = presetSettings.toList();
458 
459     QList<NamedEasingCurve> out;
460     for (const QVariant &preset : presets)
461         if (preset.isValid())
462             out << preset.value<NamedEasingCurve>();
463 
464     return out;
465 }
466 
467 PresetEditor::PresetEditor(QWidget *parent)
468     : QStackedWidget(parent)
469     , m_presets(new PresetList(QSettings::SystemScope))
470     , m_customs(new PresetList(QSettings::UserScope))
471 {
472     setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Preferred);
473 
474     addWidget(m_presets);
475     addWidget(m_customs);
476 
477     connect(m_presets, &PresetList::presetChanged, this, &PresetEditor::presetChanged);
478     connect(m_customs, &PresetList::presetChanged, this, &PresetEditor::presetChanged);
479 }
480 
481 void PresetEditor::initialize(QTabBar *bar)
482 {
483     m_presets->initialize(bar->addTab("Presets"));
484     m_customs->initialize(bar->addTab("Custom"));
485 
486     connect(bar, &QTabBar::currentChanged, this, &PresetEditor::activate);
487     connect(this, &PresetEditor::currentChanged, bar, &QTabBar::setCurrentIndex);
488 
489     m_presets->selectionModel()->clear();
490     m_customs->selectionModel()->clear();
491 
492     activate(m_presets->index());
493 }
494 
495 void PresetEditor::activate(int id)
496 {
497     if (id == m_presets->index())
498         setCurrentWidget(m_presets);
499     else
500         setCurrentWidget(m_customs);
501 }
502 
503 void PresetEditor::update(const EasingCurve &curve)
504 {
505     if (isCurrent(m_presets))
506         m_presets->selectionModel()->clear();
507     else {
508         if (m_customs->selectionModel()->hasSelection()) {
509             QVariant icon = QVariant::fromValue(paintPreview(curve));
510             QVariant curveData = QVariant::fromValue(curve);
511             for (const QModelIndex &index : m_customs->selectionModel()->selectedIndexes())
512                 m_customs->setItemData(index, curveData, icon);
513         }
514     }
515 }
516 
517 bool PresetEditor::writePresets(const EasingCurve &curve)
518 {
519     if (!curve.isLegal()) {
520         QMessageBox msgBox;
521         msgBox.setText("Attempting to save invalid curve");
522         msgBox.setInformativeText("Please solve the issue before proceeding.");
523         msgBox.setStandardButtons(QMessageBox::Ok);
524         msgBox.exec();
525         return false;
526     }
527 
528     if (auto current = qobject_cast<const PresetList *>(currentWidget())) {
529         if (current->index() == m_presets->index()
530             || (current->index() == m_customs->index() && !m_customs->hasSelection())) {
531             bool ok;
532             QString name = QInputDialog::getText(this,
533                                                  tr("Save Preset"),
534                                                  tr("Name"),
535                                                  QLineEdit::Normal,
536                                                  QString(),
537                                                  &ok);
538 
539             if (ok && !name.isEmpty()) {
540                 activate(m_customs->index());
541                 m_customs->createItem(name, curve);
542             }
543         }
544 
545         m_customs->writePresets();
546         return true;
547     }
548 
549     return false;
550 }
551 
552 bool PresetEditor::isCurrent(PresetList *list)
553 {
554     if (auto current = qobject_cast<const PresetList *>(currentWidget()))
555         return list->index() == current->index();
556 
557     return false;
558 }
559 
560 } // namespace QmlDesigner
