Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Copyright (C) 2016 Intel Corporation.
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the QtCore module of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:LGPL$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU Lesser General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU Lesser
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
22 ** packaging of this file. Please review the following information to
23 ** ensure the GNU Lesser General Public License version 3 requirements
24 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
25 **
26 ** GNU General Public License Usage
27 ** Alternatively, this file may be used under the terms of the GNU
28 ** General Public License version 2.0 or (at your option) the GNU General
29 ** Public license version 3 or any later version approved by the KDE Free
30 ** Qt Foundation. The licenses are as published by the Free Software
31 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
32 ** included in the packaging of this file. Please review the following
33 ** information to ensure the GNU General Public License requirements will
34 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
35 ** https://www.gnu.org/licenses/gpl-3.0.html.
36 **
37 ** $QT_END_LICENSE$
38 **
39 ****************************************************************************/
40 
41 #ifndef QDATETIME_H
42 #define QDATETIME_H
43 
44 #include <QtCore/qstring.h>
45 #include <QtCore/qnamespace.h>
46 #include <QtCore/qshareddata.h>
47 
48 #include <limits>
49 
50 #if defined(Q_OS_DARWIN) || defined(Q_QDOC)
51 Q_FORWARD_DECLARE_CF_TYPE(CFDate);
52 Q_FORWARD_DECLARE_OBJC_CLASS(NSDate);
53 #endif
54 
55 QT_BEGIN_NAMESPACE
56 
57 class QTimeZone;
58 
59 class Q_CORE_EXPORT QDate
60 {
61 public:
62     enum MonthNameType {
63         DateFormat = 0,
64         StandaloneFormat
65     };
66 private:
67     explicit Q_DECL_CONSTEXPR QDate(qint64 julianDay) : jd(julianDay) {}
68 public:
69     Q_DECL_CONSTEXPR QDate() : jd(nullJd()) {}
70     QDate(int y, int m, int d);
71 
72     Q_DECL_CONSTEXPR bool isNull() const { return !isValid(); }
73     Q_DECL_CONSTEXPR bool isValid() const { return jd >= minJd() && jd <= maxJd(); }
74 
75     int year() const;
76     int month() const;
77     int day() const;
78     int dayOfWeek() const;
79     int dayOfYear() const;
80     int daysInMonth() const;
81     int daysInYear() const;
82     int weekNumber(int *yearNum = Q_NULLPTR) const;
83 
84 #ifndef QT_NO_TEXTDATE
85     static QString shortMonthName(int month, MonthNameType type = DateFormat);
86     static QString shortDayName(int weekday, MonthNameType type = DateFormat);
87     static QString longMonthName(int month, MonthNameType type = DateFormat);
88     static QString longDayName(int weekday, MonthNameType type = DateFormat);
89 #endif // QT_NO_TEXTDATE
90 #ifndef QT_NO_DATESTRING
91     QString toString(Qt::DateFormat f = Qt::TextDate) const;
92     QString toString(const QString &format) const;
93 #endif
94 #if QT_DEPRECATED_SINCE(5,0)
95 QT_DEPRECATED inline bool setYMD(int y, int m, int d)
96 { if (uint(y) <= 99) y += 1900; return setDate(y, m, d); }
97 #endif
98 
99     bool setDate(int year, int month, int day);
100 
101 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
102     void getDate(int *year, int *month, int *day); // ### Qt 6: remove
103 #endif // < Qt 6
104     void getDate(int *year, int *month, int *day) const;
105 
106     QDate addDays(qint64 days) const Q_REQUIRED_RESULT;
107     QDate addMonths(int months) const Q_REQUIRED_RESULT;
108     QDate addYears(int years) const Q_REQUIRED_RESULT;
109     qint64 daysTo(const QDate &) const;
110 
111     Q_DECL_CONSTEXPR bool operator==(const QDate &other) const { return jd == other.jd; }
112     Q_DECL_CONSTEXPR bool operator!=(const QDate &other) const { return jd != other.jd; }
113     Q_DECL_CONSTEXPR bool operator< (const QDate &other) const { return jd <  other.jd; }
114     Q_DECL_CONSTEXPR bool operator<=(const QDate &other) const { return jd <= other.jd; }
115     Q_DECL_CONSTEXPR bool operator> (const QDate &other) const { return jd >  other.jd; }
116     Q_DECL_CONSTEXPR bool operator>=(const QDate &other) const { return jd >= other.jd; }
117 
118     static QDate currentDate();
119 #ifndef QT_NO_DATESTRING
120     static QDate fromString(const QString &s, Qt::DateFormat f = Qt::TextDate);
121     static QDate fromString(const QString &s, const QString &format);
122 #endif
123     static bool isValid(int y, int m, int d);
124     static bool isLeapYear(int year);
125 
126     static Q_DECL_CONSTEXPR inline QDate fromJulianDay(qint64 jd)
127     { return jd >= minJd() && jd <= maxJd() ? QDate(jd) : QDate() ; }
128     Q_DECL_CONSTEXPR inline qint64 toJulianDay() const { return jd; }
129 
130 private:
131     // using extra parentheses around min to avoid expanding it if it is a macro
132     static Q_DECL_CONSTEXPR inline qint64 nullJd() { return (std::numeric_limits<qint64>::min)(); }
133     static Q_DECL_CONSTEXPR inline qint64 minJd() { return Q_INT64_C(-784350574879); }
134     static Q_DECL_CONSTEXPR inline qint64 maxJd() { return Q_INT64_C( 784354017364); }
135 
136     qint64 jd;
137 
138     friend class QDateTime;
139     friend class QDateTimePrivate;
140 #ifndef QT_NO_DATASTREAM
141     friend Q_CORE_EXPORT QDataStream &operator<<(QDataStream &, const QDate &);
142     friend Q_CORE_EXPORT QDataStream &operator>>(QDataStream &, QDate &);
143 #endif
144 };
145 Q_DECLARE_TYPEINFO(QDate, Q_MOVABLE_TYPE);
146 
147 class Q_CORE_EXPORT QTime
148 {
149     explicit Q_DECL_CONSTEXPR QTime(int ms) : mds(ms)
150     {}
151 public:
152     Q_DECL_CONSTEXPR QTime(): mds(NullTime)
153     {}
154     QTime(int h, int m, int s = 0, int ms = 0);
155 
156     Q_DECL_CONSTEXPR bool isNull() const { return mds == NullTime; }
157     bool isValid() const;
158 
159     int hour() const;
160     int minute() const;
161     int second() const;
162     int msec() const;
163 #ifndef QT_NO_DATESTRING
164     QString toString(Qt::DateFormat f = Qt::TextDate) const;
165     QString toString(const QString &format) const;
166 #endif
167     bool setHMS(int h, int m, int s, int ms = 0);
168 
169     QTime addSecs(int secs) const Q_REQUIRED_RESULT;
170     int secsTo(const QTime &) const;
171     QTime addMSecs(int ms) const Q_REQUIRED_RESULT;
172     int msecsTo(const QTime &) const;
173 
174     Q_DECL_CONSTEXPR bool operator==(const QTime &other) const { return mds == other.mds; }
175     Q_DECL_CONSTEXPR bool operator!=(const QTime &other) const { return mds != other.mds; }
176     Q_DECL_CONSTEXPR bool operator< (const QTime &other) const { return mds <  other.mds; }
177     Q_DECL_CONSTEXPR bool operator<=(const QTime &other) const { return mds <= other.mds; }
178     Q_DECL_CONSTEXPR bool operator> (const QTime &other) const { return mds >  other.mds; }
179     Q_DECL_CONSTEXPR bool operator>=(const QTime &other) const { return mds >= other.mds; }
180 
181     static Q_DECL_CONSTEXPR inline QTime fromMSecsSinceStartOfDay(int msecs) { return QTime(msecs); }
182     Q_DECL_CONSTEXPR inline int msecsSinceStartOfDay() const { return mds == NullTime ? 0 : mds; }
183 
184     static QTime currentTime();
185 #ifndef QT_NO_DATESTRING
186     static QTime fromString(const QString &s, Qt::DateFormat f = Qt::TextDate);
187     static QTime fromString(const QString &s, const QString &format);
188 #endif
189     static bool isValid(int h, int m, int s, int ms = 0);
190 
191     void start();
192     int restart();
193     int elapsed() const;
194 private:
195     enum TimeFlag { NullTime = -1 };
196     Q_DECL_CONSTEXPR inline int ds() const { return mds == -1 ? 0 : mds; }
197     int mds;
198 
199     friend class QDateTime;
200     friend class QDateTimePrivate;
201 #ifndef QT_NO_DATASTREAM
202     friend Q_CORE_EXPORT QDataStream &operator<<(QDataStream &, const QTime &);
203     friend Q_CORE_EXPORT QDataStream &operator>>(QDataStream &, QTime &);
204 #endif
205 };
206 Q_DECLARE_TYPEINFO(QTime, Q_MOVABLE_TYPE);
207 
208 class QDateTimePrivate;
209 
210 class Q_CORE_EXPORT QDateTime
211 {
212     // ### Qt 6: revisit the optimization
213     struct ShortData {
214 #if Q_BYTE_ORDER == Q_LITTLE_ENDIAN
215         quintptr status : 8;
216 #endif
217         // note: this is only 24 bits on 32-bit systems...
218         qintptr msecs : sizeof(void *) * 8 - 8;
219 
220 #if Q_BYTE_ORDER == Q_BIG_ENDIAN
221         quintptr status : 8;
222 #endif
223     };
224 
225     union Data {
226         enum {
227             // To be of any use, we need at least 60 years around 1970, which
228             // is 1,893,456,000,000 ms. That requires 41 bits to store, plus
229             // the sign bit. With the status byte, the minimum size is 50 bits.
230             CanBeSmall = sizeof(ShortData) * 8 > 50
231         };
232 
233         Data(Qt::TimeSpec);
234         Data(const Data &other);
235         Data &operator=(const Data &other);
236         // no move semantics (would be the same as copy)
237         ~Data();
238 
239         bool isShort() const;
240         void detach();
241 
242         const QDateTimePrivate *operator->() const;
243         QDateTimePrivate *operator->();
244 
245         QDateTimePrivate *d;
246         ShortData data;
247     };
248 
249 public:
250     QDateTime() Q_DECL_NOEXCEPT_EXPR(Data::CanBeSmall);
251     explicit QDateTime(const QDate &);
252     QDateTime(const QDate &, const QTime &, Qt::TimeSpec spec = Qt::LocalTime);
253     // ### Qt 6: Merge with above with default offsetSeconds = 0
254     QDateTime(const QDate &date, const QTime &time, Qt::TimeSpec spec, int offsetSeconds);
255 #ifndef QT_BOOTSTRAPPED
256     QDateTime(const QDate &date, const QTime &time, const QTimeZone &timeZone);
257 #endif // QT_BOOTSTRAPPED
258     QDateTime(const QDateTime &other) Q_DECL_NOTHROW;
259     ~QDateTime();
260 
261 #ifdef Q_COMPILER_RVALUE_REFS
262     QDateTime &operator=(QDateTime &&other) Q_DECL_NOTHROW { swap(other); return *this; }
263 #endif
264     QDateTime &operator=(const QDateTime &other) Q_DECL_NOTHROW;
265 
266     void swap(QDateTime &other) Q_DECL_NOTHROW { qSwap(d.d, other.d.d); }
267 
268     bool isNull() const;
269     bool isValid() const;
270 
271     QDate date() const;
272     QTime time() const;
273     Qt::TimeSpec timeSpec() const;
274     int offsetFromUtc() const;
275 #ifndef QT_BOOTSTRAPPED
276     QTimeZone timeZone() const;
277 #endif // QT_BOOTSTRAPPED
278     QString timeZoneAbbreviation() const;
279     bool isDaylightTime() const;
280 
281     qint64 toMSecsSinceEpoch() const;
282     // ### Qt 6: use quint64 instead of uint
283     uint toTime_t() const;
284 
285     void setDate(const QDate &date);
286     void setTime(const QTime &time);
287     void setTimeSpec(Qt::TimeSpec spec);
288     void setOffsetFromUtc(int offsetSeconds);
289 #ifndef QT_BOOTSTRAPPED
290     void setTimeZone(const QTimeZone &toZone);
291 #endif // QT_BOOTSTRAPPED
292     void setMSecsSinceEpoch(qint64 msecs);
293     // ### Qt 6: use quint64 instead of uint
294     void setTime_t(uint secsSince1Jan1970UTC);
295 
296 #ifndef QT_NO_DATESTRING
297     QString toString(Qt::DateFormat f = Qt::TextDate) const;
298     QString toString(const QString &format) const;
299 #endif
300     QDateTime addDays(qint64 days) const Q_REQUIRED_RESULT;
301     QDateTime addMonths(int months) const Q_REQUIRED_RESULT;
302     QDateTime addYears(int years) const Q_REQUIRED_RESULT;
303     QDateTime addSecs(qint64 secs) const Q_REQUIRED_RESULT;
304     QDateTime addMSecs(qint64 msecs) const Q_REQUIRED_RESULT;
305 
306     QDateTime toTimeSpec(Qt::TimeSpec spec) const;
307     inline QDateTime toLocalTime() const { return toTimeSpec(Qt::LocalTime); }
308     inline QDateTime toUTC() const { return toTimeSpec(Qt::UTC); }
309     QDateTime toOffsetFromUtc(int offsetSeconds) const;
310 #ifndef QT_BOOTSTRAPPED
311     QDateTime toTimeZone(const QTimeZone &toZone) const;
312 #endif // QT_BOOTSTRAPPED
313 
314     qint64 daysTo(const QDateTime &) const;
315     qint64 secsTo(const QDateTime &) const;
316     qint64 msecsTo(const QDateTime &) const;
317 
318     bool operator==(const QDateTime &other) const;
319     inline bool operator!=(const QDateTime &other) const { return !(*this == other); }
320     bool operator<(const QDateTime &other) const;
321     inline bool operator<=(const QDateTime &other) const { return !(other < *this); }
322     inline bool operator>(const QDateTime &other) const { return other < *this; }
323     inline bool operator>=(const QDateTime &other) const { return !(*this < other); }
324 
325 #if QT_DEPRECATED_SINCE(5, 2)
326     QT_DEPRECATED void setUtcOffset(int seconds);
327     QT_DEPRECATED int utcOffset() const;
328 #endif // QT_DEPRECATED_SINCE
329 
330     static QDateTime currentDateTime();
331     static QDateTime currentDateTimeUtc();
332 #ifndef QT_NO_DATESTRING
333     static QDateTime fromString(const QString &s, Qt::DateFormat f = Qt::TextDate);
334     static QDateTime fromString(const QString &s, const QString &format);
335 #endif
336     // ### Qt 6: use quint64 instead of uint
337     static QDateTime fromTime_t(uint secsSince1Jan1970UTC);
338     // ### Qt 6: Merge with above with default spec = Qt::LocalTime
339     static QDateTime fromTime_t(uint secsSince1Jan1970UTC, Qt::TimeSpec spec,
340                                 int offsetFromUtc = 0);
341 #ifndef QT_BOOTSTRAPPED
342     static QDateTime fromTime_t(uint secsSince1Jan1970UTC, const QTimeZone &timeZone);
343 #endif
344     static QDateTime fromMSecsSinceEpoch(qint64 msecs);
345     // ### Qt 6: Merge with above with default spec = Qt::LocalTime
346     static QDateTime fromMSecsSinceEpoch(qint64 msecs, Qt::TimeSpec spec, int offsetFromUtc = 0);
347 #ifndef QT_BOOTSTRAPPED
348     static QDateTime fromMSecsSinceEpoch(qint64 msecs, const QTimeZone &timeZone);
349 #endif
350     static qint64 currentMSecsSinceEpoch() Q_DECL_NOTHROW;
351 
352 #if defined(Q_OS_DARWIN) || defined(Q_QDOC)
353     static QDateTime fromCFDate(CFDateRef date);
354     CFDateRef toCFDate() const Q_DECL_CF_RETURNS_RETAINED;
355     static QDateTime fromNSDate(const NSDate *date);
356     NSDate *toNSDate() const Q_DECL_NS_RETURNS_AUTORELEASED;
357 #endif
358 
359 private:
360     friend class QDateTimePrivate;
361 
362     Data d;
363 
364 #ifndef QT_NO_DATASTREAM
365     friend Q_CORE_EXPORT QDataStream &operator<<(QDataStream &, const QDateTime &);
366     friend Q_CORE_EXPORT QDataStream &operator>>(QDataStream &, QDateTime &);
367 #endif
368 
369 #if !defined(QT_NO_DEBUG_STREAM) && !defined(QT_NO_DATESTRING)
370     friend Q_CORE_EXPORT QDebug operator<<(QDebug, const QDateTime &);
371 #endif
372 };
373 Q_DECLARE_SHARED(QDateTime)
374 
375 #ifndef QT_NO_DATASTREAM
376 Q_CORE_EXPORT QDataStream &operator<<(QDataStream &, const QDate &);
377 Q_CORE_EXPORT QDataStream &operator>>(QDataStream &, QDate &);
378 Q_CORE_EXPORT QDataStream &operator<<(QDataStream &, const QTime &);
379 Q_CORE_EXPORT QDataStream &operator>>(QDataStream &, QTime &);
380 Q_CORE_EXPORT QDataStream &operator<<(QDataStream &, const QDateTime &);
381 Q_CORE_EXPORT QDataStream &operator>>(QDataStream &, QDateTime &);
382 #endif // QT_NO_DATASTREAM
383 
384 #if !defined(QT_NO_DEBUG_STREAM) && !defined(QT_NO_DATESTRING)
385 Q_CORE_EXPORT QDebug operator<<(QDebug, const QDate &);
386 Q_CORE_EXPORT QDebug operator<<(QDebug, const QTime &);
387 Q_CORE_EXPORT QDebug operator<<(QDebug, const QDateTime &);
388 #endif
389 
390 // QDateTime is not noexcept for now -- to be revised once
391 // timezone and calendaring support is added
392 Q_CORE_EXPORT uint qHash(const QDateTime &key, uint seed = 0);
393 Q_CORE_EXPORT uint qHash(const QDate &key, uint seed = 0) Q_DECL_NOTHROW;
394 Q_CORE_EXPORT uint qHash(const QTime &key, uint seed = 0) Q_DECL_NOTHROW;
395 
396 QT_END_NAMESPACE
397 
398 #endif // QDATETIME_H
