Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of Qt Creator.
7 **
8 ** Commercial License Usage
9 ** Licensees holding valid commercial Qt licenses may use this file in
10 ** accordance with the commercial license agreement provided with the
11 ** Software or, alternatively, in accordance with the terms contained in
12 ** a written agreement between you and The Qt Company. For licensing terms
13 ** and conditions see https://www.qt.io/terms-conditions. For further
14 ** information use the contact form at https://www.qt.io/contact-us.
15 **
16 ** GNU General Public License Usage
17 ** Alternatively, this file may be used under the terms of the GNU
18 ** General Public License version 3 as published by the Free Software
19 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 ** included in the packaging of this file. Please review the following
21 ** information to ensure the GNU General Public License requirements will
22 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 **
24 ****************************************************************************/
25 
26 #include "viewmanager.h"
27 
28 #ifndef QMLDESIGNER_TEST
29 
30 #include <abstractview.h>
31 #include <capturingconnectionmanager.h>
32 #include <componentaction.h>
33 #include <componentview.h>
34 #include <crumblebar.h>
35 #include <debugview.h>
36 #include <designeractionmanagerview.h>
37 #include <designmodewidget.h>
38 #include <edit3dview.h>
39 #include <formeditorview.h>
40 #include <itemlibraryview.h>
41 #include <navigatorview.h>
42 #include <nodeinstanceview.h>
43 #include <propertyeditorview.h>
44 #include <rewriterview.h>
45 #include <stateseditorview.h>
46 #include <texteditorview.h>
47 #include <qmldesignerplugin.h>
48 
49 #include <utils/algorithm.h>
50 
51 #include <QElapsedTimer>
52 #include <QLoggingCategory>
53 #include <QTabWidget>
54 
55 namespace QmlDesigner {
56 
57 static Q_LOGGING_CATEGORY(viewBenchmark, "qtc.viewmanager.attach", QtWarningMsg)
58 
59 class ViewManagerData
60 {
61 public:
62     InteractiveConnectionManager connectionManager;
63     CapturingConnectionManager capturingConnectionManager;
64     QmlModelState savedState;
65     Internal::DebugView debugView;
66     DesignerActionManagerView designerActionManagerView;
67     NodeInstanceView nodeInstanceView{
68         QCoreApplication::arguments().contains("-capture-puppet-stream") ? capturingConnectionManager
69                                                                          : connectionManager};
70     ComponentView componentView;
71     Edit3DView edit3DView;
72     FormEditorView formEditorView;
73     TextEditorView textEditorView;
74     ItemLibraryView itemLibraryView;
75     NavigatorView navigatorView;
76     PropertyEditorView propertyEditorView;
77     StatesEditorView statesEditorView;
78 
79     std::vector<std::unique_ptr<AbstractView>> additionalViews;
80     bool disableStandardViews = false;
81 };
82 
83 static CrumbleBar *crumbleBar() {
84     return QmlDesignerPlugin::instance()->mainWidget()->crumbleBar();
85 }
86 
87 ViewManager::ViewManager()
88     : d(std::make_unique<ViewManagerData>())
89 {
90     d->formEditorView.setGotoErrorCallback([this](int line, int column) {
91         d->textEditorView.gotoCursorPosition(line, column);
92         if (Internal::DesignModeWidget *designModeWidget = QmlDesignerPlugin::instance()->mainWidget())
93             designModeWidget->showInternalTextEditor();
94     });
95 }
96 
97 ViewManager::~ViewManager() = default;
98 
99 DesignDocument *ViewManager::currentDesignDocument() const
100 {
101     return QmlDesignerPlugin::instance()->documentManager().currentDesignDocument();
102 }
103 
104 void ViewManager::attachNodeInstanceView()
105 {
106     if (nodeInstanceView()->isAttached())
107         return;
108 
109     QElapsedTimer time;
110     if (viewBenchmark().isInfoEnabled())
111         time.start();
112 
113     qCInfo(viewBenchmark) << Q_FUNC_INFO;
114 
115     setNodeInstanceViewTarget(currentDesignDocument()->currentTarget());
116     currentModel()->setNodeInstanceView(&d->nodeInstanceView);
117 
118      qCInfo(viewBenchmark) << "NodeInstanceView:" << time.elapsed();
119 }
120 
121 void ViewManager::attachRewriterView()
122 {
123     QElapsedTimer time;
124     if (viewBenchmark().isInfoEnabled())
125         time.start();
126 
127     qCInfo(viewBenchmark) << Q_FUNC_INFO;
128 
129     if (RewriterView *view = currentDesignDocument()->rewriterView()) {
130         view->setWidgetStatusCallback([this](bool enable) {
131             if (enable)
132                 enableWidgets();
133             else
134                 disableWidgets();
135         });
136 
137         currentModel()->setRewriterView(view);
138         view->reactivateTextMofifierChangeSignals();
139         view->restoreAuxiliaryData();
140     }
141 
142     qCInfo(viewBenchmark) << "RewriterView:" << time.elapsed();
143 }
144 
145 void ViewManager::detachRewriterView()
146 {
147     if (RewriterView *view = currentDesignDocument()->rewriterView()) {
148         view->deactivateTextMofifierChangeSignals();
149         currentModel()->setRewriterView(nullptr);
150     }
151 }
152 
153 void ViewManager::switchStateEditorViewToBaseState()
154 {
155     if (d->statesEditorView.isAttached()) {
156         d->savedState = d->statesEditorView.currentState();
157         d->statesEditorView.setCurrentState(d->statesEditorView.baseState());
158     }
159 }
160 
161 void ViewManager::switchStateEditorViewToSavedState()
162 {
163     if (d->savedState.isValid() && d->statesEditorView.isAttached())
164         d->statesEditorView.setCurrentState(d->savedState);
165 }
166 
167 QList<AbstractView *> ViewManager::views() const
168 {
169     auto list = Utils::transform<QList<AbstractView *>>(d->additionalViews,
170                                                         [](auto &&view) { return view.get(); });
171     list.append(standardViews());
172     return list;
173 }
174 
175 QList<AbstractView *> ViewManager::standardViews() const
176 {
177     QList<AbstractView *> list = {&d->edit3DView,
178                                   &d->formEditorView,
179                                   &d->textEditorView,
180                                   &d->itemLibraryView,
181                                   &d->navigatorView,
182                                   &d->propertyEditorView,
183                                   &d->statesEditorView,
184                                   &d->designerActionManagerView};
185 
186     if (QmlDesignerPlugin::instance()->settings().value(
187                 DesignerSettingsKey::ENABLE_DEBUGVIEW).toBool())
188          list.append(&d->debugView);
189 
190     return list;
191 }
192 
193 void ViewManager::resetPropertyEditorView()
194 {
195     d->propertyEditorView.resetView();
196 }
197 
198 void ViewManager::registerFormEditorToolTakingOwnership(AbstractCustomTool *tool)
199 {
200     d->formEditorView.registerTool(tool);
201 }
202 
203 void ViewManager::detachViewsExceptRewriterAndComponetView()
204 {
205     switchStateEditorViewToBaseState();
206     detachAdditionalViews();
207 
208     detachStandardViews();
209 
210     currentModel()->setNodeInstanceView(nullptr);
211 }
212 
213 void ViewManager::attachItemLibraryView()
214 {
215     currentModel()->attachView(&d->itemLibraryView);
216 }
217 
218 void ViewManager::attachAdditionalViews()
219 {
220     for (auto &view : d->additionalViews)
221         currentModel()->attachView(view.get());
222 }
223 
224 void ViewManager::detachAdditionalViews()
225 {
226     for (auto &view : d->additionalViews)
227         currentModel()->detachView(view.get());
228 }
229 
230 void ViewManager::detachStandardViews()
231 {
232     for (const auto &view : standardViews()) {
233         if (view->isAttached())
234             currentModel()->detachView(view);
235     }
236 }
237 
238 void ViewManager::attachComponentView()
239 {
240     documentModel()->attachView(&d->componentView);
241     QObject::connect(d->componentView.action(), &ComponentAction::currentComponentChanged,
242                      currentDesignDocument(), &DesignDocument::changeToSubComponent);
243     QObject::connect(d->componentView.action(), &ComponentAction::changedToMaster,
244                      currentDesignDocument(), &DesignDocument::changeToMaster);
245 }
246 
247 void ViewManager::detachComponentView()
248 {
249     QObject::disconnect(d->componentView.action(), &ComponentAction::currentComponentChanged,
250                         currentDesignDocument(), &DesignDocument::changeToSubComponent);
251     QObject::disconnect(d->componentView.action(), &ComponentAction::changedToMaster,
252                         currentDesignDocument(), &DesignDocument::changeToMaster);
253 
254     documentModel()->detachView(&d->componentView);
255 }
256 
257 void ViewManager::attachViewsExceptRewriterAndComponetView()
258 {
259     if (QmlDesignerPlugin::instance()->settings().value(
260             DesignerSettingsKey::ENABLE_DEBUGVIEW).toBool())
261         currentModel()->attachView(&d->debugView);
262 
263     attachNodeInstanceView();
264 
265     QElapsedTimer time;
266     if (viewBenchmark().isInfoEnabled())
267         time.start();
268 
269     qCInfo(viewBenchmark) << Q_FUNC_INFO;
270 
271     int last = time.elapsed();
272     int currentTime = 0;
273     if (!d->disableStandardViews) {
274         for (const auto &view : standardViews()) {
275             currentModel()->attachView(view);
276             currentTime = time.elapsed();
277             qCInfo(viewBenchmark) << view->widgetInfo().uniqueId << currentTime - last;
278             last = currentTime;
279         }
280     }
281 
282     attachAdditionalViews();
283 
284     currentTime = time.elapsed();
285     qCInfo(viewBenchmark) << "AdditionalViews:" << currentTime - last;
286     last = currentTime;
287 
288     currentTime = time.elapsed();
289     qCInfo(viewBenchmark) << "All:" << time.elapsed();
290     last = currentTime;
291 
292     switchStateEditorViewToSavedState();
293 }
294 
295 void ViewManager::setItemLibraryViewResourcePath(const QString &resourcePath)
296 {
297     d->itemLibraryView.setResourcePath(resourcePath);
298 }
299 
300 void ViewManager::setComponentNode(const ModelNode &componentNode)
301 {
302     d->componentView.setComponentNode(componentNode);
303 }
304 
305 void ViewManager::setComponentViewToMaster()
306 {
307     d->componentView.setComponentToMaster();
308 }
309 
310 void ViewManager::setNodeInstanceViewTarget(ProjectExplorer::Target *target)
311 {
312     d->nodeInstanceView.setTarget(target);
313 }
314 
315 QList<WidgetInfo> ViewManager::widgetInfos() const
316 {
317     QList<WidgetInfo> widgetInfoList;
318 
319     widgetInfoList.append(d->edit3DView.widgetInfo());
320     widgetInfoList.append(d->formEditorView.widgetInfo());
321     widgetInfoList.append(d->textEditorView.widgetInfo());
322     widgetInfoList.append(d->itemLibraryView.widgetInfo());
323     widgetInfoList.append(d->navigatorView.widgetInfo());
324     widgetInfoList.append(d->propertyEditorView.widgetInfo());
325     widgetInfoList.append(d->statesEditorView.widgetInfo());
326     if (d->debugView.hasWidget())
327         widgetInfoList.append(d->debugView.widgetInfo());
328 
329     for (auto &view : d->additionalViews) {
330         if (view->hasWidget())
331             widgetInfoList.append(view->widgetInfo());
332     }
333 
334     Utils::sort(widgetInfoList, [](const WidgetInfo &firstWidgetInfo, const WidgetInfo &secondWidgetInfo) {
335         return firstWidgetInfo.placementPriority < secondWidgetInfo.placementPriority;
336     });
337 
338     return widgetInfoList;
339 }
340 
341 QWidget *ViewManager::widget(const QString &uniqueId) const
342 {
343     foreach (const WidgetInfo &widgetInfo, widgetInfos()) {
344         if (widgetInfo.uniqueId == uniqueId)
345             return widgetInfo.widget;
346     }
347     return nullptr;
348 }
349 
350 void ViewManager::disableWidgets()
351 {
352     for (const auto &view : views())
353         view->disableWidget();
354 }
355 
356 void ViewManager::enableWidgets()
357 {
358     for (const auto &view : views())
359         view->enableWidget();
360 }
361 
362 void ViewManager::pushFileOnCrumbleBar(const Utils::FilePath &fileName)
363 {
364     crumbleBar()->pushFile(fileName);
365 }
366 
367 void ViewManager::pushInFileComponentOnCrumbleBar(const ModelNode &modelNode)
368 {
369     crumbleBar()->pushInFileComponent(modelNode);
370 }
371 
372 void ViewManager::nextFileIsCalledInternally()
373 {
374     crumbleBar()->nextFileIsCalledInternally();
375 }
376 
377 NodeInstanceView *ViewManager::nodeInstanceView() const
378 {
379     return &d->nodeInstanceView;
380 }
381 
382 QWidgetAction *ViewManager::componentViewAction() const
383 {
384     return d->componentView.action();
385 }
386 
387 DesignerActionManager &ViewManager::designerActionManager()
388 {
389     return d->designerActionManagerView.designerActionManager();
390 }
391 
392 const DesignerActionManager &ViewManager::designerActionManager() const
393 {
394     return d->designerActionManagerView.designerActionManager();
395 }
396 
397 void ViewManager::toggleStatesViewExpanded()
398 {
399     d->statesEditorView.toggleStatesViewExpanded();
400 }
401 
402 void ViewManager::qmlJSEditorContextHelp(const Core::IContext::HelpCallback &callback) const
403 {
404     d->textEditorView.qmlJSEditorContextHelp(callback);
405 }
406 
407 Model *ViewManager::currentModel() const
408 {
409     return currentDesignDocument()->currentModel();
410 }
411 
412 Model *ViewManager::documentModel() const
413 {
414     return currentDesignDocument()->documentModel();
415 }
416 
417 void ViewManager::exportAsImage()
418 {
419     d->formEditorView.exportAsImage();
420 }
421 
422 void ViewManager::reformatFileUsingTextEditorView()
423 {
424     d->textEditorView.reformatFile();
425 }
426 
427 bool ViewManager::usesRewriterView(RewriterView *rewriterView)
428 {
429     return currentDesignDocument()->rewriterView() == rewriterView;
430 }
431 
432 void ViewManager::disableStandardViews()
433 {
434     d->disableStandardViews = true;
435     detachStandardViews();
436 }
437 
438 void ViewManager::enableStandardViews()
439 {
440     d->disableStandardViews = false;
441     attachViewsExceptRewriterAndComponetView();
442 }
443 
444 AsynchronousImageCache &ViewManager::imageCache()
445 {
446     return d->itemLibraryView.imageCache();
447 }
448 
449 void ViewManager::addView(std::unique_ptr<AbstractView> &&view)
450 {
451     d->additionalViews.push_back(std::move(view));
452 }
453 
454 } // namespace QmlDesigner
455 
456 #endif //QMLDESIGNER_TEST
