Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2016 The Qt Company Ltd.
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the QtGui module of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #ifndef QIMAGE_P_H
41 #define QIMAGE_P_H
42 
43 //
44 //  W A R N I N G
45 //  -------------
46 //
47 // This file is not part of the Qt API.  It exists purely as an
48 // implementation detail.  This header file may change from version to
49 // version without notice, or even be removed.
50 //
51 // We mean it.
52 //
53 
54 #include <QtGui/private/qtguiglobal_p.h>
55 #include <QtCore/private/qnumeric_p.h>
56 
57 #include <QMap>
58 #include <QVector>
59 
60 QT_BEGIN_NAMESPACE
61 
62 class QImageWriter;
63 
64 struct Q_GUI_EXPORT QImageData {        // internal image data
65     QImageData();
66     ~QImageData();
67     static QImageData *create(const QSize &size, QImage::Format format);
68     static QImageData *create(uchar *data, int w, int h,  int bpl, QImage::Format format, bool readOnly, QImageCleanupFunction cleanupFunction = 0, void *cleanupInfo = 0);
69 
70     QAtomicInt ref;
71 
72     int width;
73     int height;
74     int depth;
75     qsizetype nbytes;               // number of bytes data
76     qreal devicePixelRatio;
77     QVector<QRgb> colortable;
78     uchar *data;
79     QImage::Format format;
80     qsizetype bytes_per_line;
81     int ser_no;               // serial number
82     int detach_no;
83 
84     qreal  dpmx;                // dots per meter X (or 0)
85     qreal  dpmy;                // dots per meter Y (or 0)
86     QPoint  offset;           // offset in pixels
87 
88     uint own_data : 1;
89     uint ro_data : 1;
90     uint has_alpha_clut : 1;
91     uint is_cached : 1;
92     uint is_locked : 1;
93 
94     QImageCleanupFunction cleanupFunction;
95     void* cleanupInfo;
96 
97     bool checkForAlphaPixels() const;
98 
99     // Convert the image in-place, minimizing memory reallocation
100     // Return false if the conversion cannot be done in-place.
101     bool convertInPlace(QImage::Format newFormat, Qt::ImageConversionFlags);
102 
103     QMap<QString, QString> text;
104 
105     bool doImageIO(const QImage *image, QImageWriter* io, int quality) const;
106 
107     QPaintEngine *paintEngine;
108 
109     struct ImageSizeParameters {
110         qsizetype bytesPerLine;
111         qsizetype totalSize;
112         bool isValid() const { return bytesPerLine > 0 && totalSize > 0; }
113     };
114     static ImageSizeParameters calculateImageParameters(qsizetype width, qsizetype height, qsizetype depth);
115 };
116 
117 inline QImageData::ImageSizeParameters
118 QImageData::calculateImageParameters(qsizetype width, qsizetype height, qsizetype depth)
119 {
120     ImageSizeParameters invalid = { -1, -1 };
121     if (height <= 0)
122         return invalid;
123 
124     // calculate the size, taking care of overflows
125     qsizetype bytes_per_line;
126     if (mul_overflow(width, depth, &bytes_per_line))
127         return invalid;
128     if (add_overflow(bytes_per_line, qsizetype(31), &bytes_per_line))
129         return invalid;
130     // bytes per scanline (must be multiple of 4)
131     bytes_per_line = (bytes_per_line >> 5) << 2;    // can't overflow
132 
133     qsizetype total_size;
134     if (mul_overflow(height, bytes_per_line, &total_size))
135         return invalid;
136     qsizetype dummy;
137     if (mul_overflow(height, qsizetype(sizeof(uchar *)), &dummy))
138         return invalid;                                 // why is this here?
139 #if QT_VERSION < QT_VERSION_CHECK(6,0,0)
140     // Disallow images where width * depth calculations might overflow
141     if ((width * depth + 31) > INT_MAX)
142         return invalid;
143 #endif
144 
145     return { bytes_per_line, total_size };
146 }
147 
148 typedef void (*Image_Converter)(QImageData *dest, const QImageData *src, Qt::ImageConversionFlags);
149 typedef bool (*InPlace_Image_Converter)(QImageData *data, Qt::ImageConversionFlags);
150 
151 extern Image_Converter qimage_converter_map[QImage::NImageFormats][QImage::NImageFormats];
152 extern InPlace_Image_Converter qimage_inplace_converter_map[QImage::NImageFormats][QImage::NImageFormats];
153 
154 void convert_generic(QImageData *dest, const QImageData *src, Qt::ImageConversionFlags);
155 void convert_generic_to_rgb64(QImageData *dest, const QImageData *src, Qt::ImageConversionFlags);
156 bool convert_generic_inplace(QImageData *data, QImage::Format dst_format, Qt::ImageConversionFlags);
157 
158 void dither_to_Mono(QImageData *dst, const QImageData *src, Qt::ImageConversionFlags flags, bool fromalpha);
159 
160 const uchar *qt_get_bitflip_array();
161 Q_GUI_EXPORT void qGamma_correct_back_to_linear_cs(QImage *image);
162 
163 #if defined(_M_ARM) // QTBUG-42038
164 #pragma optimize("", off)
165 #endif
166 inline int qt_depthForFormat(QImage::Format format)
167 {
168     int depth = 0;
169     switch(format) {
170     case QImage::Format_Invalid:
171     case QImage::NImageFormats:
172         Q_UNREACHABLE();
173     case QImage::Format_Mono:
174     case QImage::Format_MonoLSB:
175         depth = 1;
176         break;
177     case QImage::Format_Indexed8:
178     case QImage::Format_Alpha8:
179     case QImage::Format_Grayscale8:
180         depth = 8;
181         break;
182     case QImage::Format_RGB32:
183     case QImage::Format_ARGB32:
184     case QImage::Format_ARGB32_Premultiplied:
185     case QImage::Format_RGBX8888:
186     case QImage::Format_RGBA8888:
187     case QImage::Format_RGBA8888_Premultiplied:
188     case QImage::Format_BGR30:
189     case QImage::Format_A2BGR30_Premultiplied:
190     case QImage::Format_RGB30:
191     case QImage::Format_A2RGB30_Premultiplied:
192         depth = 32;
193         break;
194     case QImage::Format_RGB555:
195     case QImage::Format_RGB16:
196     case QImage::Format_RGB444:
197     case QImage::Format_ARGB4444_Premultiplied:
198         depth = 16;
199         break;
200     case QImage::Format_RGB666:
201     case QImage::Format_ARGB6666_Premultiplied:
202     case QImage::Format_ARGB8565_Premultiplied:
203     case QImage::Format_ARGB8555_Premultiplied:
204     case QImage::Format_RGB888:
205         depth = 24;
206         break;
207     case QImage::Format_RGBX64:
208     case QImage::Format_RGBA64:
209     case QImage::Format_RGBA64_Premultiplied:
210         depth = 64;
211         break;
212     }
213     return depth;
214 }
215 
216 #if defined(_M_ARM)
217 #pragma optimize("", on)
218 #endif
219 
220 inline QImage::Format qt_opaqueVersion(QImage::Format format)
221 {
222     switch (format) {
223     case QImage::Format_ARGB8565_Premultiplied:
224         return  QImage::Format_RGB16;
225     case QImage::Format_ARGB8555_Premultiplied:
226         return QImage::Format_RGB555;
227     case QImage::Format_ARGB6666_Premultiplied:
228         return  QImage::Format_RGB666;
229     case QImage::Format_ARGB4444_Premultiplied:
230         return QImage::Format_RGB444;
231     case QImage::Format_RGBA8888:
232     case QImage::Format_RGBA8888_Premultiplied:
233         return QImage::Format_RGBX8888;
234     case QImage::Format_A2BGR30_Premultiplied:
235         return QImage::Format_BGR30;
236     case QImage::Format_A2RGB30_Premultiplied:
237         return QImage::Format_RGB30;
238     case QImage::Format_RGBA64:
239     case QImage::Format_RGBA64_Premultiplied:
240         return QImage::Format_RGBX64;
241     case QImage::Format_ARGB32_Premultiplied:
242     case QImage::Format_ARGB32:
243     default:
244         return QImage::Format_RGB32;
245     }
246 }
247 
248 inline QImage::Format qt_alphaVersion(QImage::Format format)
249 {
250     switch (format) {
251     case QImage::Format_RGB16:
252         return QImage::Format_ARGB8565_Premultiplied;
253     case QImage::Format_RGB555:
254         return QImage::Format_ARGB8555_Premultiplied;
255     case QImage::Format_RGB666:
256         return QImage::Format_ARGB6666_Premultiplied;
257     case QImage::Format_RGB444:
258         return QImage::Format_ARGB4444_Premultiplied;
259     case QImage::Format_RGBX8888:
260         return QImage::Format_RGBA8888_Premultiplied;
261     case QImage::Format_BGR30:
262         return QImage::Format_A2BGR30_Premultiplied;
263     case QImage::Format_RGB30:
264         return QImage::Format_A2RGB30_Premultiplied;
265     case QImage::Format_RGBX64:
266         return QImage::Format_RGBA64_Premultiplied;
267     default:
268         break;
269     }
270     return QImage::Format_ARGB32_Premultiplied;
271 }
272 
273 inline QImage::Format qt_maybeAlphaVersionWithSameDepth(QImage::Format format)
274 {
275     const QImage::Format toFormat = qt_alphaVersion(format);
276     return qt_depthForFormat(format) == qt_depthForFormat(toFormat) ? toFormat : format;
277 }
278 
279 inline QImage::Format qt_opaqueVersionForPainting(QImage::Format format)
280 {
281     return qt_opaqueVersion(format);
282 }
283 
284 inline QImage::Format qt_alphaVersionForPainting(QImage::Format format)
285 {
286     QImage::Format toFormat = qt_alphaVersion(format);
287 #if defined(__ARM_NEON__) || defined(__SSE2__)
288     // If we are switching depth anyway and we have optimized ARGB32PM routines, upgrade to that.
289     if (qt_depthForFormat(format) != qt_depthForFormat(toFormat))
290         toFormat = QImage::Format_ARGB32_Premultiplied;
291 #endif
292     return toFormat;
293 }
294 
295 Q_GUI_EXPORT QMap<QString, QString> qt_getImageText(const QImage &image, const QString &description);
296 Q_GUI_EXPORT QMap<QString, QString> qt_getImageTextFromDescription(const QString &description);
297 
298 QT_END_NAMESPACE
299 
300 #endif // QIMAGE_P_H
