Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2017 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Rafael Roquetto <rafael.roquetto@kdab.com>
4 ** Contact: https://www.qt.io/licensing/
5 **
6 ** This file is part of the tools applications of the Qt Toolkit.
7 **
8 ** $QT_BEGIN_LICENSE:LGPL$
9 ** Commercial License Usage
10 ** Licensees holding valid commercial Qt licenses may use this file in
11 ** accordance with the commercial license agreement provided with the
12 ** Software or, alternatively, in accordance with the terms contained in
13 ** a written agreement between you and The Qt Company. For licensing terms
14 ** and conditions see https://www.qt.io/terms-conditions. For further
15 ** information use the contact form at https://www.qt.io/contact-us.
16 **
17 ** GNU Lesser General Public License Usage
18 ** Alternatively, this file may be used under the terms of the GNU Lesser
19 ** General Public License version 3 as published by the Free Software
20 ** Foundation and appearing in the file LICENSE.LGPL3 included in the
21 ** packaging of this file. Please review the following information to
22 ** ensure the GNU Lesser General Public License version 3 requirements
23 ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
24 **
25 ** GNU General Public License Usage
26 ** Alternatively, this file may be used under the terms of the GNU
27 ** General Public License version 2.0 or (at your option) the GNU General
28 ** Public license version 3 or any later version approved by the KDE Free
29 ** Qt Foundation. The licenses are as published by the Free Software
30 ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
31 ** included in the packaging of this file. Please review the following
32 ** information to ensure the GNU General Public License requirements will
33 ** be met: https://www.gnu.org/licenses/gpl-2.0.html and
34 ** https://www.gnu.org/licenses/gpl-3.0.html.
35 **
36 ** $QT_END_LICENSE$
37 **
38 ****************************************************************************/
39 
40 #include "provider.h"
41 
42 #include <qfile.h>
43 #include <qfileinfo.h>
44 #include <qtextstream.h>
45 #include <qregexp.h>
46 
47 #ifdef TRACEGEN_DEBUG
48 #include <qdebug.h>
49 
50 static void dumpTracepoint(const Tracepoint &t)
51 {
52     qDebug() << "=== BEGIN TRACEPOINT ===";
53     qDebug() << "name:" << t.name;
54     qDebug() << "ARGS\n";
55 
56     int j = 0;
57 
58     for (auto i = t.args.constBegin(); i != t.args.constEnd(); ++i) {
59         qDebug() << "ARG[" << j << "] type:" << i->type;
60         qDebug() << "ARG[" << j << "] name:" << i->name;
61         qDebug() << "ARG[" << j << "] arrayLen:" << i->arrayLen;
62         ++j;
63     }
64 
65     qDebug() << "\nFIELDS\n";
66 
67     j = 0;
68 
69     for (auto i = t.fields.constBegin(); i != t.fields.constEnd(); ++i) {
70         qDebug() << "FIELD[" << j << "] backend_type" << static_cast<int>(i->backendType);
71         qDebug() << "FIELD[" << j << "] param_type" << i->paramType;
72         qDebug() << "FIELD[" << j << "] name" << i->name;
73         qDebug() << "FIELD[" << j << "] arrayLen" << i->arrayLen;
74         qDebug() << "FIELD[" << j << "] seqLen" << i->seqLen;
75         ++j;
76     }
77 
78     qDebug() << "=== END TRACEPOINT ===\n";
79 
80 }
81 #endif
82 
83 static inline int arrayLength(const QString &rawType)
84 {
85     QRegExp rx(QStringLiteral(".*\\[([0-9]+)\\].*"));
86 
87     if (!rx.exactMatch(rawType.trimmed()))
88         return 0;
89 
90     return rx.cap(1).toInt();
91 }
92 
93 static inline QString sequenceLength(const QString &rawType)
94 {
95     QRegExp rx(QStringLiteral(".*\\[([A-Za-z_][A-Za-z_0-9]*)\\].*"));
96 
97     if (!rx.exactMatch(rawType.trimmed()))
98         return QString();
99 
100     return rx.cap(1);
101 }
102 
103 static QString decayToPointer(QString type)
104 {
105     QRegExp rx(QStringLiteral("\\[(.+)\\]"));
106     return type.replace(rx, QStringLiteral("*"));
107 }
108 
109 static QString removeBraces(QString type)
110 {
111     QRegExp rx(QStringLiteral("\\[.*\\]"));
112 
113     return type.remove(rx);
114 }
115 
116 static Tracepoint::Field::BackendType backendType(QString rawType)
117 {
118     static const QHash<QString, Tracepoint::Field::BackendType> typeHash = {
119         { QStringLiteral("bool"),                   Tracepoint::Field::Integer },
120         { QStringLiteral("short_int"),              Tracepoint::Field::Integer },
121         { QStringLiteral("signed_short"),           Tracepoint::Field::Integer },
122         { QStringLiteral("signed_short_int"),       Tracepoint::Field::Integer },
123         { QStringLiteral("unsigned_short"),         Tracepoint::Field::Integer },
124         { QStringLiteral("unsigned_short_int"),     Tracepoint::Field::Integer },
125         { QStringLiteral("int"),                    Tracepoint::Field::Integer },
126         { QStringLiteral("signed"),                 Tracepoint::Field::Integer },
127         { QStringLiteral("signed_int"),             Tracepoint::Field::Integer },
128         { QStringLiteral("unsigned"),               Tracepoint::Field::Integer },
129         { QStringLiteral("unsigned_int"),           Tracepoint::Field::Integer },
130         { QStringLiteral("long"),                   Tracepoint::Field::Integer },
131         { QStringLiteral("long_int"),               Tracepoint::Field::Integer },
132         { QStringLiteral("signed_long"),            Tracepoint::Field::Integer },
133         { QStringLiteral("signed_long_int"),        Tracepoint::Field::Integer },
134         { QStringLiteral("unsigned_long"),          Tracepoint::Field::Integer },
135         { QStringLiteral("unsigned_long_int"),      Tracepoint::Field::Integer },
136         { QStringLiteral("long_long"),              Tracepoint::Field::Integer },
137         { QStringLiteral("long_long_int"),          Tracepoint::Field::Integer },
138         { QStringLiteral("signed_long_long"),       Tracepoint::Field::Integer },
139         { QStringLiteral("signed_long_long_int"),   Tracepoint::Field::Integer },
140         { QStringLiteral("unsigned_long_long"),     Tracepoint::Field::Integer },
141         { QStringLiteral("char"),                   Tracepoint::Field::Integer },
142         { QStringLiteral("float"),                  Tracepoint::Field::Float },
143         { QStringLiteral("double"),                 Tracepoint::Field::Float },
144         { QStringLiteral("long_double"),            Tracepoint::Field::Float },
145         { QStringLiteral("char_ptr"),               Tracepoint::Field::String },
146         { QStringLiteral("QString"),                Tracepoint::Field::QtString },
147         { QStringLiteral("QByteArray"),             Tracepoint::Field::QtByteArray },
148         { QStringLiteral("QUrl"),                   Tracepoint::Field::QtUrl },
149         { QStringLiteral("QRect"),                  Tracepoint::Field::QtRect }
150     };
151 
152     if (arrayLength(rawType) > 0)
153         return Tracepoint::Field::Array;
154 
155     if (!sequenceLength(rawType).isNull())
156         return Tracepoint::Field::Sequence;
157 
158     rawType.remove(QRegExp(QStringLiteral("\\s*const\\s*")));
159     rawType.remove(QStringLiteral("&"));
160     rawType.replace(QRegExp(QStringLiteral("\\s*\\*\\s*")), QStringLiteral("_ptr"));
161     rawType = rawType.trimmed();
162     rawType.replace(QStringLiteral(" "), QStringLiteral("_"));
163 
164     return typeHash.value(rawType.trimmed(), Tracepoint::Field::Unknown);
165 }
166 
167 static Tracepoint parseTracepoint(const QString &name, const QStringList &args)
168 {
169     Tracepoint t;
170     t.name = name;
171 
172     if (args.isEmpty())
173         return t;
174 
175     auto i = args.constBegin();
176     auto end = args.constEnd();
177     int argc = 0;
178 
179     QRegExp rx(QStringLiteral("(.*)\\b([A-Za-z_][A-Za-z0-9_]*)$"));
180 
181     while (i != end) {
182         rx.exactMatch(*i);
183 
184         const QString type = rx.cap(1).trimmed();
185 
186         if (type.isNull())
187             qFatal("Missing parameter type for argument %d of %s", argc, qPrintable(name));
188 
189         const QString name = rx.cap(2).trimmed();
190 
191         if (name.isNull())
192             qFatal("Missing parameter name for argument %d of %s", argc, qPrintable(name));
193 
194         int arrayLen = arrayLength(type);
195 
196         Tracepoint::Argument a;
197         a.arrayLen = arrayLen;
198         a.name = name;
199         a.type = decayToPointer(type);
200 
201         t.args << std::move(a);
202 
203         Tracepoint::Field f;
204         f.backendType = backendType(type);
205         f.paramType = removeBraces(type);
206         f.name = name;
207         f.arrayLen = arrayLen;
208         f.seqLen = sequenceLength(type);
209 
210         t.fields << std::move(f);
211 
212         ++i;
213     }
214 
215     return t;
216 }
217 
218 Provider parseProvider(const QString &filename)
219 {
220     QFile f(filename);
221 
222     if (!f.open(QIODevice::ReadOnly | QIODevice::Text))
223         qFatal("Cannot open %s: %s", qPrintable(filename), qPrintable(f.errorString()));
224 
225     QTextStream s(&f);
226 
227     QRegExp tracedef(QStringLiteral("([A-Za-z][A-Za-z0-9_]*)\\((.*)\\)"));
228 
229     int lineNumber = 0;
230 
231     Provider provider;
232     provider.name = QFileInfo(filename).baseName();
233 
234     for (;;) {
235         QString line = s.readLine().trimmed();
236 
237         if (line.isNull())
238             break;
239 
240         if (line.isEmpty() || line.startsWith(QStringLiteral("#"))) {
241             ++lineNumber;
242             continue;
243         }
244 
245         if (tracedef.exactMatch(line)) {
246             const QString name = tracedef.cap(1);
247             QStringList args = tracedef.cap(2).split(QStringLiteral(","));
248 
249             if (args.at(0).isNull())
250                 args.clear();
251 
252             provider.tracepoints << parseTracepoint(name, args);
253         } else {
254             qFatal("Syntax error whilre processing %s on line %d", qPrintable(filename), lineNumber);
255         }
256 
257         ++lineNumber;
258     }
259 
260 #ifdef TRACEGEN_DEBUG
261     for (auto i = provider.tracepoints.constBegin(); i != provider.tracepoints.constEnd(); ++i)
262         dumpTracepoint(*i);
263 #endif
264 
265     return provider;
266 }
