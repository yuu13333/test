Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 /****************************************************************************
2 **
3 ** Copyright (C) 2020 The Qt Company Ltd.
4 ** Copyright (C) 2016 Intel Corporation.
5 ** Contact: https://www.qt.io/licensing/
6 **
7 ** This file is part of the test suite of the Qt Toolkit.
8 **
9 ** $QT_BEGIN_LICENSE:GPL-EXCEPT$
10 ** Commercial License Usage
11 ** Licensees holding valid commercial Qt licenses may use this file in
12 ** accordance with the commercial license agreement provided with the
13 ** Software or, alternatively, in accordance with the terms contained in
14 ** a written agreement between you and The Qt Company. For licensing terms
15 ** and conditions see https://www.qt.io/terms-conditions. For further
16 ** information use the contact form at https://www.qt.io/contact-us.
17 **
18 ** GNU General Public License Usage
19 ** Alternatively, this file may be used under the terms of the GNU
20 ** General Public License version 3 as published by the Free Software
21 ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
22 ** included in the packaging of this file. Please review the following
23 ** information to ensure the GNU General Public License requirements will
24 ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
25 **
26 ** $QT_END_LICENSE$
27 **
28 ****************************************************************************/
29 
30 #include <QtTest/QtTest>
31 #include <time.h>
32 #include <qdatetime.h>
33 #include <private/qdatetime_p.h>
34 
35 #ifdef Q_OS_WIN
36 #   include <qt_windows.h>
37 #endif
38 
39 class tst_QDateTime : public QObject
40 {
41     Q_OBJECT
42 
43 public:
44     tst_QDateTime();
45 
46     static QString str( int y, int month, int d, int h, int min, int s );
47     static QDateTime dt( const QString& str );
48 public Q_SLOTS:
49     void initTestCase();
50 private Q_SLOTS:
51     void ctor();
52     void operator_eq();
53     void isNull();
54     void isValid();
55     void date();
56     void time();
57     void timeSpec();
58     void toSecsSinceEpoch_data();
59     void toSecsSinceEpoch();
60     void daylightSavingsTimeChange_data();
61     void daylightSavingsTimeChange();
62     void springForward_data();
63     void springForward();
64     void setDate();
65     void setTime_data();
66     void setTime();
67     void setTimeSpec_data();
68     void setTimeSpec();
69     void setSecsSinceEpoch();
70     void setMSecsSinceEpoch_data();
71     void setMSecsSinceEpoch();
72     void fromSecsSinceEpoch();
73     void fromMSecsSinceEpoch_data();
74     void fromMSecsSinceEpoch();
75 #if QT_CONFIG(datestring)
76     void toString_isoDate_data();
77     void toString_isoDate();
78     void toString_isoDate_extra();
79     void toString_textDate_data();
80     void toString_textDate();
81     void toString_textDate_extra();
82     void toString_rfcDate_data();
83     void toString_rfcDate();
84     void toString_enumformat();
85     void toString_strformat();
86 #endif
87     void addDays();
88     void addMonths();
89     void addMonths_data();
90     void addYears();
91     void addYears_data();
92     void addSecs_data();
93     void addSecs();
94     void addMSecs_data();
95     void addMSecs();
96     void toTimeSpec_data();
97     void toTimeSpec();
98     void toLocalTime_data();
99     void toLocalTime();
100     void toUTC_data();
101     void toUTC();
102     void daysTo();
103     void secsTo_data();
104     void secsTo();
105     void msecsTo_data();
106     void msecsTo();
107     void operator_eqeq_data();
108     void operator_eqeq();
109     void operator_insert_extract_data();
110     void operator_insert_extract();
111     void currentDateTime();
112     void currentDateTimeUtc();
113     void currentDateTimeUtc2();
114 #if QT_CONFIG(datestring)
115     void fromStringDateFormat_data();
116     void fromStringDateFormat();
117 #  if QT_CONFIG(datetimeparser)
118     void fromStringStringFormat_data();
119     void fromStringStringFormat();
120     void fromStringStringFormat_localTimeZone_data();
121     void fromStringStringFormat_localTimeZone();
122 #  endif
123 #endif
124 
125     void offsetFromUtc();
126     void setOffsetFromUtc();
127     void toOffsetFromUtc();
128 
129     void zoneAtTime_data();
130     void zoneAtTime();
131     void timeZoneAbbreviation();
132 
133     void getDate();
134 
135     void fewDigitsInYear() const;
136     void printNegativeYear() const;
137 #if QT_CONFIG(datetimeparser)
138     void roundtripTextDate() const;
139 #endif
140     void utcOffsetLessThan() const;
141 
142     void isDaylightTime() const;
143     void daylightTransitions() const;
144     void timeZones() const;
145     void systemTimeZoneChange() const;
146 
147     void invalid_data() const;
148     void invalid() const;
149     void range() const;
150 
151     void macTypes();
152 
153 private:
154     enum { LocalTimeIsUtc = 0, LocalTimeAheadOfUtc = 1, LocalTimeBehindUtc = -1} localTimeType;
155     bool zoneIsCET;
156 
157     class TimeZoneRollback
158     {
159         const QByteArray prior;
160     public:
161         // Save the previous timezone so we can restore it afterwards, otherwise
162         // later tests may break:
163         explicit TimeZoneRollback(const QByteArray &zone) : prior(qgetenv("TZ"))
164         { reset(zone); }
165         void reset(const QByteArray &zone)
166         {
167             qputenv("TZ", zone.constData());
168             qTzSet();
169         }
170         ~TimeZoneRollback()
171         {
172             if (prior.isNull())
173                 qunsetenv("TZ");
174             else
175                 qputenv("TZ", prior.constData());
176             qTzSet();
177         }
178     };
179 };
180 
181 Q_DECLARE_METATYPE(Qt::TimeSpec)
182 Q_DECLARE_METATYPE(Qt::DateFormat)
183 
184 tst_QDateTime::tst_QDateTime()
185 {
186     /*
187       Due to some jurisdictions changing their zones and rules, it's possible
188       for a non-CET zone to accidentally match CET at a few tested moments but
189       be different a few years later or earlier.  This would lead to tests
190       failing if run in the partially-aliasing zone (e.g. Algeria, Lybia).  So
191       test thoroughly; ideally at every mid-winter or mid-summer in whose
192       half-year any test below assumes zoneIsCET means what it says.  (Tests at
193       or near a DST transition implicate both of the half-years that meet
194       there.)  Years outside the 1970--2038 range, however, are likely not
195       properly handled by the TZ-database; and QDateTime explicitly handles them
196       differently, so don't probe them here.
197     */
198     const uint day = 24 * 3600; // in seconds
199     zoneIsCET = (QDateTime(QDate(2038, 1, 19), QTime(4, 14, 7)).toSecsSinceEpoch() == 0x7fffffff
200                  // Entries a year apart robustly differ by multiples of day.
201                  && QDate(2015, 7, 1).startOfDay().toSecsSinceEpoch() == 1435701600
202                  && QDate(2015, 1, 1).startOfDay().toSecsSinceEpoch() == 1420066800
203                  && QDate(2013, 7, 1).startOfDay().toSecsSinceEpoch() == 1372629600
204                  && QDate(2013, 1, 1).startOfDay().toSecsSinceEpoch() == 1356994800
205                  && QDate(2012, 7, 1).startOfDay().toSecsSinceEpoch() == 1341093600
206                  && QDate(2012, 1, 1).startOfDay().toSecsSinceEpoch() == 1325372400
207                  && QDate(2008, 7, 1).startOfDay().toSecsSinceEpoch() == 1214863200
208                  && QDate(2004, 1, 1).startOfDay().toSecsSinceEpoch() == 1072911600
209                  && QDate(2000, 1, 1).startOfDay().toSecsSinceEpoch() == 946681200
210                  && QDate(1990, 7, 1).startOfDay().toSecsSinceEpoch() == 646783200
211                  && QDate(1990, 1, 1).startOfDay().toSecsSinceEpoch() == 631148400
212                  && QDate(1979, 1, 1).startOfDay().toSecsSinceEpoch() == 283993200
213                  // .toSecsSinceEpoch() returns -1 for everything before this:
214                  && QDateTime(QDate(1970, 1, 1), QTime(1, 0)).toSecsSinceEpoch() == 0);
215     // Use .toMSecsSinceEpoch() if you really need to test anything earlier.
216 
217     /*
218       Again, rule changes can cause a TZ to look like UTC at some sample dates
219       but deviate at some date relevant to a test using localTimeType.  These
220       tests mostly use years outside the 1970--2038 range for which TZ data is
221       credible, so we can't helpfully be exhaustive.  So scan a sample of years'
222       starts and middles.
223     */
224     const int sampled = 3;
225     // UTC starts of months in 2004, 2038 and 1970:
226     qint64 jans[sampled] = { 12418 * day, 24837 * day, 0 };
227     qint64 juls[sampled] = { 12600 * day, 25018 * day, 181 * day };
228     localTimeType = LocalTimeIsUtc;
229     for (int i = sampled; i-- > 0; ) {
230         QDateTime jan = QDateTime::fromSecsSinceEpoch(jans[i]);
231         QDateTime jul = QDateTime::fromSecsSinceEpoch(juls[i]);
232         if (jan.date().year() < 1970 || jul.date().month() < 7) {
233             localTimeType = LocalTimeBehindUtc;
234             break;
235         } else if (jan.time().hour() > 0 || jul.time().hour() > 0
236                    || jan.date().day() > 1 || jul.date().day() > 1) {
237             localTimeType = LocalTimeAheadOfUtc;
238             break;
239         }
240     }
241     /*
242       Even so, TZ=Africa/Algiers will fail fromMSecsSinceEpoch(-1) because it
243       switched from WET without DST (i.e. UTC) in the late 1960s to WET with DST
244       for all of 1970 - so they had a DST transition *on the epoch*.  They've
245       since switched to CET with no DST, making life simple; but our tests for
246       mistakes around the epoch can't tell the difference between what Algeria
247       really did and the symptoms we can believe a bug might produce: there's
248       not much we can do about that, that wouldn't hide real bugs.
249     */
250 }
251 
252 void tst_QDateTime::initTestCase()
253 {
254     // Never construct a message like this in an i18n context...
255     const char *typemsg1 = "exactly";
256     const char *typemsg2 = "and therefore not";
257     switch (localTimeType) {
258     case LocalTimeIsUtc:
259         break;
260     case LocalTimeBehindUtc:
261         typemsg1 = "behind";
262         break;
263     case LocalTimeAheadOfUtc:
264         typemsg1 = "ahead of";
265         typemsg2 = zoneIsCET ? "and is" : "but isn't";
266         break;
267     }
268 
269     qDebug() << "Current local time detected to be"
270              << typemsg1
271              << "UTC"
272              << typemsg2
273              << "the Central European timezone";
274 }
275 
276 QString tst_QDateTime::str( int y, int month, int d, int h, int min, int s )
277 {
278     return QDateTime( QDate(y, month, d), QTime(h, min, s) ).toString( Qt::ISODate );
279 }
280 
281 QDateTime tst_QDateTime::dt(const QString &text)
282 {
283 #if QT_CONFIG(datestring)
284     if (text != "INVALID")
285         return QDateTime::fromString(text, Qt::ISODate);
286 #endif
287     return QDateTime();
288 }
289 
290 void tst_QDateTime::ctor()
291 {
292     QDateTime dt1(QDate(2004, 1, 2), QTime(1, 2, 3));
293     QCOMPARE(dt1.timeSpec(), Qt::LocalTime);
294     QDateTime dt2(QDate(2004, 1, 2), QTime(1, 2, 3), Qt::LocalTime);
295     QCOMPARE(dt2.timeSpec(), Qt::LocalTime);
296     QDateTime dt3(QDate(2004, 1, 2), QTime(1, 2, 3), Qt::UTC);
297     QCOMPARE(dt3.timeSpec(), Qt::UTC);
298 
299     QVERIFY(dt1 == dt2);
300     if (zoneIsCET) {
301         QVERIFY(dt1 != dt3);
302         QVERIFY(dt1 < dt3);
303         QVERIFY(dt1.addSecs(3600).toUTC() == dt3);
304     }
305 
306     // Test OffsetFromUTC constructors
307     QDate offsetDate(2013, 1, 1);
308     QTime offsetTime(1, 2, 3);
309 
310     QDateTime offset1(offsetDate, offsetTime, Qt::OffsetFromUTC);
311     QCOMPARE(offset1.timeSpec(), Qt::UTC);
312     QCOMPARE(offset1.offsetFromUtc(), 0);
313     QCOMPARE(offset1.date(), offsetDate);
314     QCOMPARE(offset1.time(), offsetTime);
315 
316     QDateTime offset2(offsetDate, offsetTime, Qt::OffsetFromUTC, 0);
317     QCOMPARE(offset2.timeSpec(), Qt::UTC);
318     QCOMPARE(offset2.offsetFromUtc(), 0);
319     QCOMPARE(offset2.date(), offsetDate);
320     QCOMPARE(offset2.time(), offsetTime);
321 
322     QDateTime offset3(offsetDate, offsetTime, Qt::OffsetFromUTC, 60 * 60);
323     QCOMPARE(offset3.timeSpec(), Qt::OffsetFromUTC);
324     QCOMPARE(offset3.offsetFromUtc(), 60 * 60);
325     QCOMPARE(offset3.date(), offsetDate);
326     QCOMPARE(offset3.time(), offsetTime);
327 
328     QDateTime offset4(offsetDate, QTime(0, 0), Qt::OffsetFromUTC, 60 * 60);
329     QCOMPARE(offset4.timeSpec(), Qt::OffsetFromUTC);
330     QCOMPARE(offset4.offsetFromUtc(), 60 * 60);
331     QCOMPARE(offset4.date(), offsetDate);
332     QCOMPARE(offset4.time(), QTime(0, 0));
333 }
334 
335 void tst_QDateTime::operator_eq()
336 {
337     QVERIFY(QDateTime() != QDateTime(QDate(1970, 1, 1), QTime(0, 0))); // QTBUG-79006
338     QDateTime dt1(QDate(2004, 3, 24), QTime(23, 45, 57), Qt::UTC);
339     QDateTime dt2(QDate(2005, 3, 11), QTime(0, 0), Qt::UTC);
340     dt2 = dt1;
341     QVERIFY(dt1 == dt2);
342 }
343 
344 void tst_QDateTime::isNull()
345 {
346     QDateTime dt1;
347     QVERIFY(dt1.isNull());
348     dt1.setDate(QDate());
349     QVERIFY(dt1.isNull());
350     dt1.setTime(QTime());
351     QVERIFY(dt1.isNull());
352     dt1.setTimeSpec(Qt::UTC);
353     QVERIFY(dt1.isNull());   // maybe it should return false?
354 
355     dt1.setDate(QDate(2004, 1, 2));
356     QVERIFY(!dt1.isNull());
357     dt1.setTime(QTime(12, 34, 56));
358     QVERIFY(!dt1.isNull());
359     dt1.setTime(QTime());
360     QVERIFY(!dt1.isNull());
361 }
362 
363 void tst_QDateTime::isValid()
364 {
365     QDateTime dt1;
366     QVERIFY(!dt1.isValid());
367     dt1.setDate(QDate());
368     QVERIFY(!dt1.isValid());
369     dt1.setTime(QTime());
370     QVERIFY(!dt1.isValid());
371     dt1.setTimeSpec(Qt::UTC);
372     QVERIFY(!dt1.isValid());
373 
374     dt1.setDate(QDate(2004, 1, 2));
375     QVERIFY(dt1.isValid());
376     dt1.setDate(QDate());
377     QVERIFY(!dt1.isValid());
378     dt1.setTime(QTime(12, 34, 56));
379     QVERIFY(!dt1.isValid());
380     dt1.setTime(QTime());
381     QVERIFY(!dt1.isValid());
382 }
383 
384 void tst_QDateTime::date()
385 {
386     QDateTime dt1(QDate(2004, 3, 24), QTime(23, 45, 57), Qt::LocalTime);
387     QCOMPARE(dt1.date(), QDate(2004, 3, 24));
388 
389     QDateTime dt2(QDate(2004, 3, 25), QTime(0, 45, 57), Qt::LocalTime);
390     QCOMPARE(dt2.date(), QDate(2004, 3, 25));
391 
392     QDateTime dt3(QDate(2004, 3, 24), QTime(23, 45, 57), Qt::UTC);
393     QCOMPARE(dt3.date(), QDate(2004, 3, 24));
394 
395     QDateTime dt4(QDate(2004, 3, 25), QTime(0, 45, 57), Qt::UTC);
396     QCOMPARE(dt4.date(), QDate(2004, 3, 25));
397 }
398 
399 void tst_QDateTime::time()
400 {
401     QDateTime dt1(QDate(2004, 3, 24), QTime(23, 45, 57), Qt::LocalTime);
402     QCOMPARE(dt1.time(), QTime(23, 45, 57));
403 
404     QDateTime dt2(QDate(2004, 3, 25), QTime(0, 45, 57), Qt::LocalTime);
405     QCOMPARE(dt2.time(), QTime(0, 45, 57));
406 
407     QDateTime dt3(QDate(2004, 3, 24), QTime(23, 45, 57), Qt::UTC);
408     QCOMPARE(dt3.time(), QTime(23, 45, 57));
409 
410     QDateTime dt4(QDate(2004, 3, 25), QTime(0, 45, 57), Qt::UTC);
411     QCOMPARE(dt4.time(), QTime(0, 45, 57));
412 }
413 
414 void tst_QDateTime::timeSpec()
415 {
416     QDateTime dt1(QDate(2004, 1, 24), QTime(23, 45, 57));
417     QCOMPARE(dt1.timeSpec(), Qt::LocalTime);
418     QCOMPARE(dt1.addDays(0).timeSpec(), Qt::LocalTime);
419     QCOMPARE(dt1.addMonths(0).timeSpec(), Qt::LocalTime);
420     QCOMPARE(dt1.addMonths(6).timeSpec(), Qt::LocalTime);
421     QCOMPARE(dt1.addYears(0).timeSpec(), Qt::LocalTime);
422     QCOMPARE(dt1.addSecs(0).timeSpec(), Qt::LocalTime);
423     QCOMPARE(dt1.addSecs(86400 * 185).timeSpec(), Qt::LocalTime);
424     QCOMPARE(dt1.toTimeSpec(Qt::LocalTime).timeSpec(), Qt::LocalTime);
425     QCOMPARE(dt1.toTimeSpec(Qt::UTC).timeSpec(), Qt::UTC);
426 
427     QDateTime dt2(QDate(2004, 1, 24), QTime(23, 45, 57), Qt::LocalTime);
428     QCOMPARE(dt2.timeSpec(), Qt::LocalTime);
429 
430     QDateTime dt3(QDate(2004, 1, 25), QTime(0, 45, 57), Qt::UTC);
431     QCOMPARE(dt3.timeSpec(), Qt::UTC);
432 
433     QDateTime dt4 = QDateTime::currentDateTime();
434     QCOMPARE(dt4.timeSpec(), Qt::LocalTime);
435 }
436 
437 void tst_QDateTime::setDate()
438 {
439     QDateTime dt1(QDate(2004, 3, 25), QTime(0, 45, 57), Qt::UTC);
440     dt1.setDate(QDate(2004, 6, 25));
441     QCOMPARE(dt1.date(), QDate(2004, 6, 25));
442     QCOMPARE(dt1.time(), QTime(0, 45, 57));
443     QCOMPARE(dt1.timeSpec(), Qt::UTC);
444 
445     QDateTime dt2(QDate(2004, 3, 25), QTime(0, 45, 57), Qt::LocalTime);
446     dt2.setDate(QDate(2004, 6, 25));
447     QCOMPARE(dt2.date(), QDate(2004, 6, 25));
448     QCOMPARE(dt2.time(), QTime(0, 45, 57));
449     QCOMPARE(dt2.timeSpec(), Qt::LocalTime);
450 
451     QDateTime dt3(QDate(4004, 3, 25), QTime(0, 45, 57), Qt::UTC);
452     dt3.setDate(QDate(4004, 6, 25));
453     QCOMPARE(dt3.date(), QDate(4004, 6, 25));
454     QCOMPARE(dt3.time(), QTime(0, 45, 57));
455     QCOMPARE(dt3.timeSpec(), Qt::UTC);
456 
457     QDateTime dt4(QDate(4004, 3, 25), QTime(0, 45, 57), Qt::LocalTime);
458     dt4.setDate(QDate(4004, 6, 25));
459     QCOMPARE(dt4.date(), QDate(4004, 6, 25));
460     QCOMPARE(dt4.time(), QTime(0, 45, 57));
461     QCOMPARE(dt4.timeSpec(), Qt::LocalTime);
462 
463     QDateTime dt5(QDate(1760, 3, 25), QTime(0, 45, 57), Qt::UTC);
464     dt5.setDate(QDate(1760, 6, 25));
465     QCOMPARE(dt5.date(), QDate(1760, 6, 25));
466     QCOMPARE(dt5.time(), QTime(0, 45, 57));
467     QCOMPARE(dt5.timeSpec(), Qt::UTC);
468 
469     QDateTime dt6(QDate(1760, 3, 25), QTime(0, 45, 57), Qt::LocalTime);
470     dt6.setDate(QDate(1760, 6, 25));
471     QCOMPARE(dt6.date(), QDate(1760, 6, 25));
472     QCOMPARE(dt6.time(), QTime(0, 45, 57));
473     QCOMPARE(dt6.timeSpec(), Qt::LocalTime);
474 }
475 
476 void tst_QDateTime::setTime_data()
477 {
478     QTest::addColumn<QDateTime>("dateTime");
479     QTest::addColumn<QTime>("newTime");
480 
481     QTest::newRow("data0") << QDateTime(QDate(2004, 3, 25), QTime(0, 45, 57), Qt::UTC) << QTime(23, 11, 22);
482     QTest::newRow("data1") << QDateTime(QDate(2004, 3, 25), QTime(0, 45, 57), Qt::LocalTime) << QTime(23, 11, 22);
483     QTest::newRow("data2") << QDateTime(QDate(4004, 3, 25), QTime(0, 45, 57), Qt::UTC) << QTime(23, 11, 22);
484     QTest::newRow("data3") << QDateTime(QDate(4004, 3, 25), QTime(0, 45, 57), Qt::LocalTime) << QTime(23, 11, 22);
485     QTest::newRow("data4") << QDateTime(QDate(1760, 3, 25), QTime(0, 45, 57), Qt::UTC) << QTime(23, 11, 22);
486     QTest::newRow("data5") << QDateTime(QDate(1760, 3, 25), QTime(0, 45, 57), Qt::LocalTime) << QTime(23, 11, 22);
487 
488     QTest::newRow("set on std/dst") << QDateTime::currentDateTime() << QTime(23, 11, 22);
489 }
490 
491 void tst_QDateTime::setTime()
492 {
493     QFETCH(QDateTime, dateTime);
494     QFETCH(QTime, newTime);
495 
496     const QDate expectedDate(dateTime.date());
497     const Qt::TimeSpec expectedTimeSpec(dateTime.timeSpec());
498 
499     dateTime.setTime(newTime);
500 
501     QCOMPARE(dateTime.date(), expectedDate);
502     QCOMPARE(dateTime.time(), newTime);
503     QCOMPARE(dateTime.timeSpec(), expectedTimeSpec);
504 }
505 
506 void tst_QDateTime::setTimeSpec_data()
507 {
508     QTest::addColumn<QDateTime>("dateTime");
509     QTest::addColumn<Qt::TimeSpec>("newTimeSpec");
510 
511     QTest::newRow("UTC => UTC") << QDateTime(QDate(2004, 3, 25), QTime(0, 45, 57), Qt::UTC) << Qt::UTC;
512     QTest::newRow("UTC => LocalTime") << QDateTime(QDate(2004, 3, 25), QTime(0, 45, 57), Qt::UTC) << Qt::LocalTime;
513     QTest::newRow("UTC => OffsetFromUTC") << QDateTime(QDate(2004, 3, 25), QTime(0, 45, 57), Qt::UTC) << Qt::OffsetFromUTC;
514 }
515 
516 void tst_QDateTime::setTimeSpec()
517 {
518     QFETCH(QDateTime, dateTime);
519     QFETCH(Qt::TimeSpec, newTimeSpec);
520 
521     const QDate expectedDate(dateTime.date());
522     const QTime expectedTime(dateTime.time());
523 
524     dateTime.setTimeSpec(newTimeSpec);
525 
526     QCOMPARE(dateTime.date(), expectedDate);
527     QCOMPARE(dateTime.time(), expectedTime);
528     if (newTimeSpec == Qt::OffsetFromUTC)
529         QCOMPARE(dateTime.timeSpec(), Qt::UTC);
530     else
531         QCOMPARE(dateTime.timeSpec(), newTimeSpec);
532 }
533 
534 void tst_QDateTime::setSecsSinceEpoch()
535 {
536     QDateTime dt1;
537     dt1.setSecsSinceEpoch(0);
538     QCOMPARE(dt1.toUTC(), QDate(1970, 1, 1).startOfDay(Qt::UTC));
539     QCOMPARE(dt1.timeSpec(), Qt::LocalTime);
540 
541     dt1.setTimeSpec(Qt::UTC);
542     dt1.setSecsSinceEpoch(0);
543     QCOMPARE(dt1, QDate(1970, 1, 1).startOfDay(Qt::UTC));
544     QCOMPARE(dt1.timeSpec(), Qt::UTC);
545 
546     dt1.setSecsSinceEpoch(123456);
547     QCOMPARE(dt1, QDateTime(QDate(1970, 1, 2), QTime(10, 17, 36), Qt::UTC));
548     if (zoneIsCET) {
549         QDateTime dt2;
550         dt2.setSecsSinceEpoch(123456);
551         QCOMPARE(dt2, QDateTime(QDate(1970, 1, 2), QTime(11, 17, 36), Qt::LocalTime));
552     }
553 
554     dt1.setSecsSinceEpoch((uint)(quint32)-123456);
555     QCOMPARE(dt1, QDateTime(QDate(2106, 2, 5), QTime(20, 10, 40), Qt::UTC));
556     if (zoneIsCET) {
557         QDateTime dt2;
558         dt2.setSecsSinceEpoch((uint)(quint32)-123456);
559         QCOMPARE(dt2, QDateTime(QDate(2106, 2, 5), QTime(21, 10, 40), Qt::LocalTime));
560     }
561 
562     dt1.setSecsSinceEpoch(1214567890);
563     QCOMPARE(dt1, QDateTime(QDate(2008, 6, 27), QTime(11, 58, 10), Qt::UTC));
564     if (zoneIsCET) {
565         QDateTime dt2;
566         dt2.setSecsSinceEpoch(1214567890);
567         QCOMPARE(dt2, QDateTime(QDate(2008, 6, 27), QTime(13, 58, 10), Qt::LocalTime));
568     }
569 
570     dt1.setSecsSinceEpoch(0x7FFFFFFF);
571     QCOMPARE(dt1, QDateTime(QDate(2038, 1, 19), QTime(3, 14, 7), Qt::UTC));
572     if (zoneIsCET) {
573         QDateTime dt2;
574         dt2.setSecsSinceEpoch(0x7FFFFFFF);
575         QCOMPARE(dt2, QDateTime(QDate(2038, 1, 19), QTime(4, 14, 7), Qt::LocalTime));
576     }
577 
578     dt1 = QDateTime(QDate(2013, 1, 1), QTime(0, 0), Qt::OffsetFromUTC, 60 * 60);
579     dt1.setSecsSinceEpoch(123456);
580     QCOMPARE(dt1, QDateTime(QDate(1970, 1, 2), QTime(10, 17, 36), Qt::UTC));
581     QCOMPARE(dt1.timeSpec(), Qt::OffsetFromUTC);
582     QCOMPARE(dt1.offsetFromUtc(), 60 * 60);
583 }
584 
585 void tst_QDateTime::setMSecsSinceEpoch_data()
586 {
587     QTest::addColumn<qint64>("msecs");
588     QTest::addColumn<QDateTime>("utc");
589     QTest::addColumn<QDateTime>("cet");
590 
591     QTest::newRow("zero")
592             << Q_INT64_C(0)
593             << QDateTime(QDate(1970, 1, 1), QTime(0, 0), Qt::UTC)
594             << QDateTime(QDate(1970, 1, 1), QTime(1, 0));
595     QTest::newRow("-1")
596             << Q_INT64_C(-1)
597             << QDateTime(QDate(1969, 12, 31), QTime(23, 59, 59, 999), Qt::UTC)
598             << QDateTime(QDate(1970, 1, 1), QTime(0, 59, 59, 999));
599     QTest::newRow("123456789")
600             << Q_INT64_C(123456789)
601             << QDateTime(QDate(1970, 1, 2), QTime(10, 17, 36, 789), Qt::UTC)
602             << QDateTime(QDate(1970, 1, 2), QTime(11, 17, 36, 789), Qt::LocalTime);
603     QTest::newRow("-123456789")
604             << Q_INT64_C(-123456789)
605             << QDateTime(QDate(1969, 12, 30), QTime(13, 42, 23, 211), Qt::UTC)
606             << QDateTime(QDate(1969, 12, 30), QTime(14, 42, 23, 211), Qt::LocalTime);
607     QTest::newRow("non-time_t")
608             << (Q_INT64_C(1000) << 32)
609             << QDateTime(QDate(2106, 2, 7), QTime(6, 28, 16), Qt::UTC)
610             << QDateTime(QDate(2106, 2, 7), QTime(7, 28, 16));
611     QTest::newRow("very-large")
612             << (Q_INT64_C(123456) << 32)
613             << QDateTime(QDate(18772, 8, 15), QTime(1, 8, 14, 976), Qt::UTC)
614             << QDateTime(QDate(18772, 8, 15), QTime(3, 8, 14, 976));
615     QTest::newRow("old min (Tue Nov 25 00:00:00 -4714)")
616             << Q_INT64_C(-210866716800000)
617             << QDateTime(QDate::fromJulianDay(1), QTime(0, 0), Qt::UTC)
618             << QDateTime(QDate::fromJulianDay(1), QTime(1, 0));
619     QTest::newRow("old max (Tue Jun 3 21:59:59 5874898)")
620             << Q_INT64_C(185331720376799999)
621             << QDateTime(QDate::fromJulianDay(0x7fffffff), QTime(21, 59, 59, 999), Qt::UTC)
622             << QDateTime(QDate::fromJulianDay(0x7fffffff), QTime(23, 59, 59, 999));
623     QTest::newRow("min")
624             << std::numeric_limits<qint64>::min()
625             << QDateTime(QDate(-292275056, 5, 16), QTime(16, 47, 4, 192), Qt::UTC)
626             << QDateTime(QDate(-292275056, 5, 16), QTime(17, 47, 4, 192), Qt::LocalTime);
627     QTest::newRow("max")
628             << std::numeric_limits<qint64>::max()
629             << QDateTime(QDate(292278994, 8, 17), QTime(7, 12, 55, 807), Qt::UTC)
630             << QDateTime(QDate(292278994, 8, 17), QTime(9, 12, 55, 807), Qt::LocalTime);
631 }
632 
633 void tst_QDateTime::setMSecsSinceEpoch()
634 {
635     QFETCH(qint64, msecs);
636     QFETCH(QDateTime, utc);
637     QFETCH(QDateTime, cet);
638 
639     QDateTime dt;
640     dt.setTimeSpec(Qt::UTC);
641     dt.setMSecsSinceEpoch(msecs);
642 
643     QCOMPARE(dt, utc);
644     QCOMPARE(dt.date(), utc.date());
645     QCOMPARE(dt.time(), utc.time());
646     QCOMPARE(dt.timeSpec(), Qt::UTC);
647 
648     {
649         QDateTime dt1 = QDateTime::fromMSecsSinceEpoch(msecs, Qt::UTC);
650         QCOMPARE(dt1, utc);
651         QCOMPARE(dt1.date(), utc.date());
652         QCOMPARE(dt1.time(), utc.time());
653         QCOMPARE(dt1.timeSpec(), Qt::UTC);
654     }
655     {
656         QDateTime dt1(utc.date(), utc.time(), Qt::UTC);
657         QCOMPARE(dt1, utc);
658         QCOMPARE(dt1.date(), utc.date());
659         QCOMPARE(dt1.time(), utc.time());
660         QCOMPARE(dt1.timeSpec(), Qt::UTC);
661     }
662     {
663         // used to fail to clear the ShortData bit, causing corruption
664         QDateTime dt1 = dt.addDays(0);
665         QCOMPARE(dt1, utc);
666         QCOMPARE(dt1.date(), utc.date());
667         QCOMPARE(dt1.time(), utc.time());
668         QCOMPARE(dt1.timeSpec(), Qt::UTC);
669     }
670 
671     if (zoneIsCET) {
672         QCOMPARE(dt.toLocalTime(), cet);
673 
674         // Test converting from LocalTime to UTC back to LocalTime.
675         QDateTime localDt;
676         localDt.setTimeSpec(Qt::LocalTime);
677         localDt.setMSecsSinceEpoch(msecs);
678 
679         // LocalTime will overflow for max
680         if (msecs != std::numeric_limits<qint64>::max())
681             QCOMPARE(localDt, utc);
682         QCOMPARE(localDt.timeSpec(), Qt::LocalTime);
683 
684         // Compare result for LocalTime to TimeZone
685         QDateTime dt2;
686 #if QT_CONFIG(timezone)
687         QTimeZone europe("Europe/Oslo");
688         dt2.setTimeZone(europe);
689 #endif
690         dt2.setMSecsSinceEpoch(msecs);
691         QCOMPARE(dt2.date(), cet.date());
692 
693         // don't compare the time if the date is too early or too late: prior
694         // to 1916, timezones in Europe were not standardised and some OS APIs
695         // have hard limits. Let's restrict it to the 32-bit Unix range
696         if (dt2.date().year() >= 1970 && dt2.date().year() <= 2037)
697             QCOMPARE(dt2.time(), cet.time());
698 #if QT_CONFIG(timezone)
699         QCOMPARE(dt2.timeSpec(), Qt::TimeZone);
700         QCOMPARE(dt2.timeZone(), europe);
701 #endif
702     }
703 
704     QCOMPARE(dt.toMSecsSinceEpoch(), msecs);
705 
706     if (quint64(msecs / 1000) < 0xFFFFFFFF) {
707         QCOMPARE(qint64(dt.toSecsSinceEpoch()), msecs / 1000);
708     }
709 
710     QDateTime reference(QDate(1970, 1, 1), QTime(0, 0), Qt::UTC);
711     QCOMPARE(dt, reference.addMSecs(msecs));
712 }
713 
714 void tst_QDateTime::fromMSecsSinceEpoch_data()
715 {
716     setMSecsSinceEpoch_data();
717 }
718 
719 void tst_QDateTime::fromMSecsSinceEpoch()
720 {
721     QFETCH(qint64, msecs);
722     QFETCH(QDateTime, utc);
723     QFETCH(QDateTime, cet);
724 
725     QDateTime dtLocal = QDateTime::fromMSecsSinceEpoch(msecs, Qt::LocalTime);
726     QDateTime dtUtc = QDateTime::fromMSecsSinceEpoch(msecs, Qt::UTC);
727     QDateTime dtOffset = QDateTime::fromMSecsSinceEpoch(msecs, Qt::OffsetFromUTC, 60*60);
728     using Bound = std::numeric_limits<qint64>;
729     // LocalTime will overflow for "min" or "max" tests, depending on whether
730     // you're East or West of Greenwich.  In UTC, we won't overflow.
731     const bool localOverflow = (localTimeType == LocalTimeAheadOfUtc ? msecs == Bound::max()
732                                 : localTimeType == LocalTimeBehindUtc ? msecs == Bound::min()
733                                 : false);
734 
735     if (!localOverflow)
736         QCOMPARE(dtLocal, utc);
737 
738     QCOMPARE(dtUtc, utc);
739     QCOMPARE(dtUtc.date(), utc.date());
740     QCOMPARE(dtUtc.time(), utc.time());
741 
742     QCOMPARE(dtOffset, utc);
743     QCOMPARE(dtOffset.offsetFromUtc(), 60*60);
744     if (msecs != Bound::max()) // Offset is positive, so overflows max
745         QCOMPARE(dtOffset.time(), utc.time().addMSecs(60*60*1000));
746 
747     if (zoneIsCET) {
748         QCOMPARE(dtLocal.toLocalTime(), cet);
749         QCOMPARE(dtUtc.toLocalTime(), cet);
750         QCOMPARE(dtOffset.toLocalTime(), cet);
751     }
752 
753     if (!localOverflow)
754         QCOMPARE(dtLocal.toMSecsSinceEpoch(), msecs);
755     QCOMPARE(dtUtc.toMSecsSinceEpoch(), msecs);
756     QCOMPARE(dtOffset.toMSecsSinceEpoch(), msecs);
757 
758     if (quint64(msecs / 1000) < 0xFFFFFFFF) {
759         QCOMPARE(qint64(dtLocal.toSecsSinceEpoch()), msecs / 1000);
760         QCOMPARE(qint64(dtUtc.toSecsSinceEpoch()), msecs / 1000);
761         QCOMPARE(qint64(dtOffset.toSecsSinceEpoch()), msecs / 1000);
762     }
763 
764     QDateTime reference(QDate(1970, 1, 1), QTime(0, 0), Qt::UTC);
765     if (!localOverflow)
766         QCOMPARE(dtLocal, reference.addMSecs(msecs));
767     QCOMPARE(dtUtc, reference.addMSecs(msecs));
768     QCOMPARE(dtOffset, reference.addMSecs(msecs));
769 }
770 
771 void tst_QDateTime::fromSecsSinceEpoch()
772 {
773     const qint64 maxSeconds = std::numeric_limits<qint64>::max() / 1000;
774     const QDateTime early = QDateTime::fromSecsSinceEpoch(-maxSeconds, Qt::UTC);
775     const QDateTime late = QDateTime::fromSecsSinceEpoch(maxSeconds, Qt::UTC);
776 
777     QVERIFY(late.isValid());
778     QVERIFY(!QDateTime::fromSecsSinceEpoch(maxSeconds + 1, Qt::UTC).isValid());
779     QVERIFY(early.isValid());
780     QVERIFY(!QDateTime::fromSecsSinceEpoch(-maxSeconds - 1, Qt::UTC).isValid());
781 
782     // Local time: need to adjust for its zone offset
783     const qint64 last = maxSeconds - qMax(late.addYears(-1).toLocalTime().offsetFromUtc(), 0);
784     QVERIFY(QDateTime::fromSecsSinceEpoch(last).isValid());
785     QVERIFY(!QDateTime::fromSecsSinceEpoch(last + 1).isValid());
786     const qint64 first = -maxSeconds - qMin(early.addYears(1).toLocalTime().offsetFromUtc(), 0);
787     QVERIFY(QDateTime::fromSecsSinceEpoch(first).isValid());
788     QVERIFY(!QDateTime::fromSecsSinceEpoch(first - 1).isValid());
789 
790     // Use an offset for which .toUTC()'s return would flip the validity:
791     QVERIFY(QDateTime::fromSecsSinceEpoch(maxSeconds, Qt::OffsetFromUTC, 7200).isValid());
792     QVERIFY(!QDateTime::fromSecsSinceEpoch(maxSeconds + 1, Qt::OffsetFromUTC, -7200).isValid());
793     QVERIFY(QDateTime::fromSecsSinceEpoch(-maxSeconds, Qt::OffsetFromUTC, -7200).isValid());
794     QVERIFY(!QDateTime::fromSecsSinceEpoch(-maxSeconds - 1, Qt::OffsetFromUTC, 7200).isValid());
795 
796 #if QT_CONFIG(timezone)
797     // As for offset, use zones each side of UTC:
798     const QTimeZone west("UTC+02:00"), east("UTC-02:00");
799     QVERIFY(QDateTime::fromSecsSinceEpoch(maxSeconds, east).isValid());
800     QVERIFY(!QDateTime::fromSecsSinceEpoch(maxSeconds + 1, west).isValid());
801     QVERIFY(QDateTime::fromSecsSinceEpoch(-maxSeconds, west).isValid());
802     QVERIFY(!QDateTime::fromSecsSinceEpoch(-maxSeconds - 1, east).isValid());
803 #endif // timezone
804 }
805 
806 #if QT_CONFIG(datestring) // depends on, so implies, textdate
807 void tst_QDateTime::toString_isoDate_data()
808 {
809     QTest::addColumn<QDateTime>("datetime");
810     QTest::addColumn<Qt::DateFormat>("format");
811     QTest::addColumn<QString>("expected");
812 
813     QTest::newRow("localtime")
814             << QDateTime(QDate(1978, 11, 9), QTime(13, 28, 34))
815             << Qt::ISODate << QString("1978-11-09T13:28:34");
816     QTest::newRow("UTC")
817             << QDateTime(QDate(1978, 11, 9), QTime(13, 28, 34), Qt::UTC)
818             << Qt::ISODate << QString("1978-11-09T13:28:34Z");
819     QDateTime dt(QDate(1978, 11, 9), QTime(13, 28, 34));
820     dt.setOffsetFromUtc(19800);
821     QTest::newRow("positive OffsetFromUTC")
822             << dt << Qt::ISODate
823             << QString("1978-11-09T13:28:34+05:30");
824     dt.setOffsetFromUtc(-7200);
825     QTest::newRow("negative OffsetFromUTC")
826             << dt << Qt::ISODate
827             << QString("1978-11-09T13:28:34-02:00");
828     dt.setOffsetFromUtc(-900);
829     QTest::newRow("negative non-integral OffsetFromUTC")
830             << dt << Qt::ISODate
831             << QString("1978-11-09T13:28:34-00:15");
832     QTest::newRow("invalid")
833             << QDateTime(QDate(-1, 11, 9), QTime(13, 28, 34), Qt::UTC)
834             << Qt::ISODate << QString();
835     QTest::newRow("without-ms")
836             << QDateTime(QDate(1978, 11, 9), QTime(13, 28, 34, 20))
837             << Qt::ISODate << QString("1978-11-09T13:28:34");
838     QTest::newRow("with-ms")
839             << QDateTime(QDate(1978, 11, 9), QTime(13, 28, 34, 20))
840             << Qt::ISODateWithMs << QString("1978-11-09T13:28:34.020");
841 }
842 
843 void tst_QDateTime::toString_isoDate()
844 {
845     QFETCH(QDateTime, datetime);
846     QFETCH(Qt::DateFormat, format);
847     QFETCH(QString, expected);
848 
849     QString result = datetime.toString(format);
850     QCOMPARE(result, expected);
851 
852     QDateTime resultDatetime = QDateTime::fromString(result, format);
853     // If expecting invalid result the datetime may still be valid, i.e. year < 0 or > 9999
854     if (!expected.isEmpty()) {
855         QEXPECT_FAIL("without-ms", "Qt::ISODate truncates milliseconds (QTBUG-56552)", Abort);
856 
857         QCOMPARE(resultDatetime, datetime);
858         QCOMPARE(resultDatetime.date(), datetime.date());
859         QCOMPARE(resultDatetime.time(), datetime.time());
860         QCOMPARE(resultDatetime.timeSpec(), datetime.timeSpec());
861         QCOMPARE(resultDatetime.offsetFromUtc(), datetime.offsetFromUtc());
862     } else {
863         QCOMPARE(resultDatetime, QDateTime());
864     }
865 }
866 
867 void tst_QDateTime::toString_isoDate_extra()
868 {
869     QDateTime dt = QDateTime::fromMSecsSinceEpoch(0, Qt::UTC);
870     QCOMPARE(dt.toString(Qt::ISODate), QLatin1String("1970-01-01T00:00:00Z"));
871 #if QT_CONFIG(timezone)
872     QTimeZone PST("America/Vancouver");
873     if (PST.isValid()) {
874         dt = QDateTime::fromMSecsSinceEpoch(0, PST);
875         QCOMPARE(dt.toString(Qt::ISODate), QLatin1String("1969-12-31T16:00:00-08:00"));
876     } else {
877         qDebug("Missed zone test: no America/Vancouver zone available");
878     }
879     QTimeZone CET("Europe/Berlin");
880     if (CET.isValid()) {
881         dt = QDateTime::fromMSecsSinceEpoch(0, CET);
882         QCOMPARE(dt.toString(Qt::ISODate), QLatin1String("1970-01-01T01:00:00+01:00"));
883     } else {
884         qDebug("Missed zone test: no Europe/Berlin zone available");
885     }
886 #endif // timezone
887 }
888 
889 void tst_QDateTime::toString_textDate_data()
890 {
891     QTest::addColumn<QDateTime>("datetime");
892     QTest::addColumn<QString>("expected");
893 
894     const QString wednesdayJanuary = QLocale::c().dayName(3, QLocale::ShortFormat)
895         + ' ' + QLocale::c().monthName(1, QLocale::ShortFormat);
896 
897     QTest::newRow("localtime")  << QDateTime(QDate(2013, 1, 2), QTime(1, 2, 3), Qt::LocalTime)
898                                 << wednesdayJanuary + QString(" 2 01:02:03 2013");
899     QTest::newRow("utc")        << QDateTime(QDate(2013, 1, 2), QTime(1, 2, 3), Qt::UTC)
900                                 << wednesdayJanuary + QString(" 2 01:02:03 2013 GMT");
901     QTest::newRow("offset+")    << QDateTime(QDate(2013, 1, 2), QTime(1, 2, 3), Qt::OffsetFromUTC,
902                                              10 * 60 * 60)
903                                 << wednesdayJanuary + QString(" 2 01:02:03 2013 GMT+1000");
904     QTest::newRow("offset-")    << QDateTime(QDate(2013, 1, 2), QTime(1, 2, 3), Qt::OffsetFromUTC,
905                                              -10 * 60 * 60)
906                                 << wednesdayJanuary + QString(" 2 01:02:03 2013 GMT-1000");
907     QTest::newRow("invalid")    << QDateTime()
908                                 << QString("");
909 }
910 
911 void tst_QDateTime::toString_textDate()
912 {
913     QFETCH(QDateTime, datetime);
914     QFETCH(QString, expected);
915 
916     QString result = datetime.toString(Qt::TextDate);
917     QCOMPARE(result, expected);
918 
919 #if QT_CONFIG(datetimeparser)
920     QDateTime resultDatetime = QDateTime::fromString(result, Qt::TextDate);
921     QCOMPARE(resultDatetime, datetime);
922     QCOMPARE(resultDatetime.date(), datetime.date());
923     QCOMPARE(resultDatetime.time(), datetime.time());
924     QCOMPARE(resultDatetime.timeSpec(), datetime.timeSpec());
925     QCOMPARE(resultDatetime.offsetFromUtc(), datetime.offsetFromUtc());
926 #endif
927 }
928 
929 void tst_QDateTime::toString_textDate_extra()
930 {
931     auto endsWithGmt = [](const QDateTime &dt) {
932         return dt.toString().endsWith(QLatin1String("GMT"));
933     };
934     QDateTime dt = QDateTime::fromMSecsSinceEpoch(0, Qt::LocalTime);
935     QVERIFY(!endsWithGmt(dt));
936     dt = QDateTime::fromMSecsSinceEpoch(0, Qt::UTC).toLocalTime();
937     QVERIFY(!endsWithGmt(dt));
938 
939 #if QT_CONFIG(timezone)
940 # if defined Q_OS_UNIX && !defined Q_OS_DARWIN && !defined Q_OS_ANDROID
941 #  define CORRECT_ZONE_ABBREV
942 # endif // QTBUG-57320, QTBUG-57298, QTBUG-68833
943     if (QTimeZone::systemTimeZone().offsetFromUtc(dt))
944         QVERIFY(dt.toString() != QLatin1String("Thu Jan 1 00:00:00 1970"));
945     else
946         QCOMPARE(dt.toString(), QLatin1String("Thu Jan 1 00:00:00 1970"));
947 
948     QTimeZone PST("America/Vancouver");
949     if (PST.isValid()) {
950         dt = QDateTime::fromMSecsSinceEpoch(0, PST);
951 # ifdef CORRECT_ZONE_ABBREV
952         QCOMPARE(dt.toString(), QLatin1String("Wed Dec 31 16:00:00 1969 PST"));
953 # else
954         QVERIFY(dt.toString().startsWith(QLatin1String("Wed Dec 31 16:00:00 1969 ")));
955 # endif
956         dt = dt.toLocalTime();
957         QVERIFY(!endsWithGmt(dt));
958     } else {
959         qDebug("Missed zone test: no America/Vancouver zone available");
960     }
961     QTimeZone CET("Europe/Berlin");
962     if (CET.isValid()) {
963         dt = QDateTime::fromMSecsSinceEpoch(0, CET);
964 # ifdef CORRECT_ZONE_ABBREV
965         QCOMPARE(dt.toString(), QLatin1String("Thu Jan 1 01:00:00 1970 CET"));
966 # else
967         QVERIFY(dt.toString().startsWith(QLatin1String("Thu Jan 1 01:00:00 1970 ")));
968 # endif
969         dt = dt.toLocalTime();
970         QVERIFY(!endsWithGmt(dt));
971     } else {
972         qDebug("Missed zone test: no Europe/Berlin zone available");
973     }
974 #else // timezone
975     if (dt.offsetFromUtc())
976         QVERIFY(dt.toString() != QLatin1String("Thu Jan 1 00:00:00 1970"));
977     else
978         QCOMPARE(dt.toString(), QLatin1String("Thu Jan 1 00:00:00 1970"));
979 #endif
980     dt = QDateTime::fromMSecsSinceEpoch(0, Qt::UTC);
981     QVERIFY(endsWithGmt(dt));
982 }
983 
984 void tst_QDateTime::toString_rfcDate_data()
985 {
986     QTest::addColumn<QDateTime>("dt");
987     QTest::addColumn<QString>("formatted");
988 
989     if (zoneIsCET) {
990         QTest::newRow("localtime")
991                 << QDateTime(QDate(1978, 11, 9), QTime(13, 28, 34))
992                 << QString("09 Nov 1978 13:28:34 +0100");
993     }
994     QTest::newRow("UTC")
995             << QDateTime(QDate(1978, 11, 9), QTime(13, 28, 34), Qt::UTC)
996             << QString("09 Nov 1978 13:28:34 +0000");
997     QDateTime dt(QDate(1978, 11, 9), QTime(13, 28, 34));
998     dt.setOffsetFromUtc(19800);
999     QTest::newRow("positive OffsetFromUTC")
1000             << dt
1001             << QString("09 Nov 1978 13:28:34 +0530");
1002     dt.setOffsetFromUtc(-7200);
1003     QTest::newRow("negative OffsetFromUTC")
1004             << dt
1005             << QString("09 Nov 1978 13:28:34 -0200");
1006     QTest::newRow("invalid")
1007             << QDateTime(QDate(1978, 13, 9), QTime(13, 28, 34), Qt::UTC)
1008             << QString();
1009     QTest::newRow("999 milliseconds UTC")
1010             << QDateTime(QDate(2000, 1, 1), QTime(13, 28, 34, 999), Qt::UTC)
1011             << QString("01 Jan 2000 13:28:34 +0000");
1012 }
1013 
1014 void tst_QDateTime::toString_rfcDate()
1015 {
1016     QFETCH(QDateTime, dt);
1017     QFETCH(QString, formatted);
1018 
1019     // Set to non-English locale to confirm still uses English
1020     QLocale oldLocale;
1021     QLocale::setDefault(QLocale("de_DE"));
1022     QString actual(dt.toString(Qt::RFC2822Date));
1023     QLocale::setDefault(oldLocale);
1024     QCOMPARE(actual, formatted);
1025 }
1026 
1027 void tst_QDateTime::toString_enumformat()
1028 {
1029     QDateTime dt1(QDate(1995, 5, 20), QTime(12, 34, 56));
1030 
1031     QString str1 = dt1.toString(Qt::TextDate);
1032     QVERIFY(!str1.isEmpty()); // It's locale-dependent everywhere
1033 
1034     QString str2 = dt1.toString(Qt::ISODate);
1035     QCOMPARE(str2, QString("1995-05-20T12:34:56"));
1036 }
1037 
1038 void tst_QDateTime::toString_strformat()
1039 {
1040     // Most tests are in QLocale, just test that the api works.
1041     QDate testDate(2013, 1, 1);
1042     QTime testTime(1, 2, 3);
1043     QDateTime testDateTime(testDate, testTime, Qt::UTC);
1044     QCOMPARE(testDate.toString("yyyy-MM-dd"), QString("2013-01-01"));
1045     QCOMPARE(testTime.toString("hh:mm:ss"), QString("01:02:03"));
1046     QCOMPARE(testDateTime.toString("yyyy-MM-dd hh:mm:ss t"), QString("2013-01-01 01:02:03 UTC"));
1047 }
1048 #endif // datestring
1049 
1050 void tst_QDateTime::addDays()
1051 {
1052     for (int pass = 0; pass < 2; ++pass) {
1053         QDateTime dt(QDate(2004, 1, 1), QTime(12, 34, 56), pass == 0 ? Qt::LocalTime : Qt::UTC);
1054         dt = dt.addDays(185);
1055         QVERIFY(dt.date().year() == 2004 && dt.date().month() == 7 && dt.date().day() == 4);
1056         QVERIFY(dt.time().hour() == 12 && dt.time().minute() == 34 && dt.time().second() == 56
1057                && dt.time().msec() == 0);
1058         QCOMPARE(dt.timeSpec(), (pass == 0 ? Qt::LocalTime : Qt::UTC));
1059 
1060         dt = dt.addDays(-185);
1061         QCOMPARE(dt.date(), QDate(2004, 1, 1));
1062         QCOMPARE(dt.time(), QTime(12, 34, 56));
1063     }
1064 
1065     QDateTime dt(QDate(1752, 9, 14), QTime(12, 34, 56));
1066     while (dt.date().year() < 8000) {
1067         int year = dt.date().year();
1068         if (QDate::isLeapYear(year + 1))
1069             dt = dt.addDays(366);
1070         else
1071             dt = dt.addDays(365);
1072         QCOMPARE(dt.date(), QDate(year + 1, 9, 14));
1073         QCOMPARE(dt.time(), QTime(12, 34, 56));
1074     }
1075 
1076     // Test preserves TimeSpec
1077     QDateTime dt1(QDate(2013, 1, 1), QTime(0, 0), Qt::UTC);
1078     QDateTime dt2 = dt1.addDays(2);
1079     QCOMPARE(dt2.date(), QDate(2013, 1, 3));
1080     QCOMPARE(dt2.time(), QTime(0, 0));
1081     QCOMPARE(dt2.timeSpec(), Qt::UTC);
1082 
1083     dt1 = QDateTime(QDate(2013, 1, 1), QTime(0, 0), Qt::LocalTime);
1084     dt2 = dt1.addDays(2);
1085     QCOMPARE(dt2.date(), QDate(2013, 1, 3));
1086     QCOMPARE(dt2.time(), QTime(0, 0));
1087     QCOMPARE(dt2.timeSpec(), Qt::LocalTime);
1088 
1089     dt1 = QDateTime(QDate(2013, 1, 1), QTime(0, 0), Qt::OffsetFromUTC, 60*60);
1090     dt2 = dt1.addDays(2);
1091     QCOMPARE(dt2.date(), QDate(2013, 1, 3));
1092     QCOMPARE(dt2.time(), QTime(0, 0));
1093     QCOMPARE(dt2.timeSpec(), Qt::OffsetFromUTC);
1094     QCOMPARE(dt2.offsetFromUtc(), 60 * 60);
1095 
1096     // test last second of 1969 *is* valid (despite being time_t(-1))
1097     dt1 = QDateTime(QDate(1970, 1, 1), QTime(23, 59, 59));
1098     dt2 = dt1.addDays(-1);
1099     QVERIFY(dt2.isValid());
1100 
1101     // ### test invalid QDateTime()
1102 }
1103 
1104 
1105 void tst_QDateTime::addMonths_data()
1106 {
1107     QTest::addColumn<int>("months");
1108     QTest::addColumn<QDate>("resultDate");
1109 
1110     QTest::newRow("-15") << -15 << QDate(2002, 10, 31);
1111     QTest::newRow("-14") << -14 << QDate(2002, 11, 30);
1112     QTest::newRow("-13") << -13 << QDate(2002, 12, 31);
1113     QTest::newRow("-12") << -12 << QDate(2003, 1, 31);
1114 
1115     QTest::newRow("-11") << -11 << QDate(2003, 2, 28);
1116     QTest::newRow("-10") << -10 << QDate(2003, 3, 31);
1117     QTest::newRow("-9") << -9 << QDate(2003, 4, 30);
1118     QTest::newRow("-8") << -8 << QDate(2003, 5, 31);
1119     QTest::newRow("-7") << -7 << QDate(2003, 6, 30);
1120     QTest::newRow("-6") << -6 << QDate(2003, 7, 31);
1121     QTest::newRow("-5") << -5 << QDate(2003, 8, 31);
1122     QTest::newRow("-4") << -4 << QDate(2003, 9, 30);
1123     QTest::newRow("-3") << -3 << QDate(2003, 10, 31);
1124     QTest::newRow("-2") << -2 << QDate(2003, 11, 30);
1125     QTest::newRow("-1") << -1 << QDate(2003, 12, 31);
1126     QTest::newRow("0") << 0 << QDate(2004, 1, 31);
1127     QTest::newRow("1") << 1 << QDate(2004, 2, 29);
1128     QTest::newRow("2") << 2 << QDate(2004, 3, 31);
1129     QTest::newRow("3") << 3 << QDate(2004, 4, 30);
1130     QTest::newRow("4") << 4 << QDate(2004, 5, 31);
1131     QTest::newRow("5") << 5 << QDate(2004, 6, 30);
1132     QTest::newRow("6") << 6 << QDate(2004, 7, 31);
1133     QTest::newRow("7") << 7 << QDate(2004, 8, 31);
1134     QTest::newRow("8") << 8 << QDate(2004, 9, 30);
1135     QTest::newRow("9") << 9 << QDate(2004, 10, 31);
1136     QTest::newRow("10") << 10 << QDate(2004, 11, 30);
1137     QTest::newRow("11") << 11 << QDate(2004, 12, 31);
1138     QTest::newRow("12") << 12 << QDate(2005, 1, 31);
1139     QTest::newRow("13") << 13 << QDate(2005, 2, 28);
1140     QTest::newRow("14") << 14 << QDate(2005, 3, 31);
1141     QTest::newRow("15") << 15 << QDate(2005, 4, 30);
1142 }
1143 
1144 void tst_QDateTime::addMonths()
1145 {
1146     QFETCH(int, months);
1147     QFETCH(QDate, resultDate);
1148 
1149     QDate testDate(2004, 1, 31);
1150     QTime testTime(12, 34, 56);
1151     QDateTime start(testDate, testTime);
1152     QDateTime end = start.addMonths(months);
1153     QCOMPARE(end.date(), resultDate);
1154     QCOMPARE(end.time(), testTime);
1155     QCOMPARE(end.timeSpec(), Qt::LocalTime);
1156 
1157     start = QDateTime(testDate, testTime, Qt::UTC);
1158     end = start.addMonths(months);
1159     QCOMPARE(end.date(), resultDate);
1160     QCOMPARE(end.time(), testTime);
1161     QCOMPARE(end.timeSpec(), Qt::UTC);
1162 
1163     start = QDateTime(testDate, testTime, Qt::OffsetFromUTC, 60 * 60);
1164     end = start.addMonths(months);
1165     QCOMPARE(end.date(), resultDate);
1166     QCOMPARE(end.time(), testTime);
1167     QCOMPARE(end.timeSpec(), Qt::OffsetFromUTC);
1168     QCOMPARE(end.offsetFromUtc(), 60 * 60);
1169 }
1170 
1171 void tst_QDateTime::addYears_data()
1172 {
1173     QTest::addColumn<int>("years1");
1174     QTest::addColumn<int>("years2");
1175     QTest::addColumn<QDate>("startDate");
1176     QTest::addColumn<QDate>("resultDate");
1177 
1178     QTest::newRow("0") << 0 << 0 << QDate(1752, 9, 14) << QDate(1752, 9, 14);
1179     QTest::newRow("4000 - 4000") << 4000 << -4000 << QDate(1752, 9, 14) << QDate(1752, 9, 14);
1180     QTest::newRow("10") << 10 << 0 << QDate(1752, 9, 14) << QDate(1762, 9, 14);
1181     QTest::newRow("0 leap year") << 0 << 0 << QDate(1760, 2, 29) << QDate(1760, 2, 29);
1182     QTest::newRow("1 leap year") << 1 << 0 << QDate(1760, 2, 29) << QDate(1761, 2, 28);
1183     QTest::newRow("2 leap year") << 2 << 0 << QDate(1760, 2, 29) << QDate(1762, 2, 28);
1184     QTest::newRow("3 leap year") << 3 << 0 << QDate(1760, 2, 29) << QDate(1763, 2, 28);
1185     QTest::newRow("4 leap year") << 4 << 0 << QDate(1760, 2, 29) << QDate(1764, 2, 29);
1186 
1187     QTest::newRow("toNegative1") << -2000 << 0 << QDate(1752, 9, 14) << QDate(-249, 9, 14);
1188     QTest::newRow("toNegative2") << -1752 << 0 << QDate(1752, 9, 14) << QDate(-1, 9, 14);
1189     QTest::newRow("toNegative3") << -1751 << 0 << QDate(1752, 9, 14) << QDate(1, 9, 14);
1190     QTest::newRow("toPositive1") << 2000 << 0 << QDate(-1752, 9, 14) << QDate(249, 9, 14);
1191     QTest::newRow("toPositive2") << 1752 << 0 << QDate(-1752, 9, 14) << QDate(1, 9, 14);
1192     QTest::newRow("toPositive3") << 1751 << 0 << QDate(-1752, 9, 14) << QDate(-1, 9, 14);
1193 }
1194 
1195 void tst_QDateTime::addYears()
1196 {
1197     QFETCH(int, years1);
1198     QFETCH(int, years2);
1199     QFETCH(QDate, startDate);
1200     QFETCH(QDate, resultDate);
1201 
1202     QTime testTime(14, 25, 36);
1203     QDateTime start(startDate, testTime);
1204     QDateTime end = start.addYears(years1).addYears(years2);
1205     QCOMPARE(end.date(), resultDate);
1206     QCOMPARE(end.time(), testTime);
1207     QCOMPARE(end.timeSpec(), Qt::LocalTime);
1208 
1209     start = QDateTime(startDate, testTime, Qt::UTC);
1210     end = start.addYears(years1).addYears(years2);
1211     QCOMPARE(end.date(), resultDate);
1212     QCOMPARE(end.time(), testTime);
1213     QCOMPARE(end.timeSpec(), Qt::UTC);
1214 
1215     start = QDateTime(startDate, testTime, Qt::OffsetFromUTC, 60 * 60);
1216     end = start.addYears(years1).addYears(years2);
1217     QCOMPARE(end.date(), resultDate);
1218     QCOMPARE(end.time(), testTime);
1219     QCOMPARE(end.timeSpec(), Qt::OffsetFromUTC);
1220     QCOMPARE(end.offsetFromUtc(), 60 * 60);
1221 }
1222 
1223 void tst_QDateTime::addSecs_data()
1224 {
1225     QTest::addColumn<QDateTime>("dt");
1226     QTest::addColumn<qint64>("nsecs");
1227     QTest::addColumn<QDateTime>("result");
1228 
1229     const QTime standardTime(12, 34, 56);
1230     const QTime daylightTime(13, 34, 56);
1231     const qint64 daySecs(86400);
1232 
1233     QTest::newRow("utc0")
1234         << QDateTime(QDate(2004, 1, 1), standardTime, Qt::UTC) << daySecs
1235         << QDateTime(QDate(2004, 1, 2), standardTime, Qt::UTC);
1236     QTest::newRow("utc1")
1237         << QDateTime(QDate(2004, 1, 1), standardTime, Qt::UTC) << (daySecs * 185)
1238         << QDateTime(QDate(2004, 7, 4), standardTime, Qt::UTC);
1239     QTest::newRow("utc2")
1240         << QDateTime(QDate(2004, 1, 1), standardTime, Qt::UTC) << (daySecs * 366)
1241         << QDateTime(QDate(2005, 1, 1), standardTime, Qt::UTC);
1242     QTest::newRow("utc3")
1243         << QDateTime(QDate(1760, 1, 1), standardTime, Qt::UTC) << daySecs
1244         << QDateTime(QDate(1760, 1, 2), standardTime, Qt::UTC);
1245     QTest::newRow("utc4")
1246         << QDateTime(QDate(1760, 1, 1), standardTime, Qt::UTC) << (daySecs * 185)
1247         << QDateTime(QDate(1760, 7, 4), standardTime, Qt::UTC);
1248     QTest::newRow("utc5")
1249         << QDateTime(QDate(1760, 1, 1), standardTime, Qt::UTC) << (daySecs * 366)
1250         << QDateTime(QDate(1761, 1, 1), standardTime, Qt::UTC);
1251     QTest::newRow("utc6")
1252         << QDateTime(QDate(4000, 1, 1), standardTime, Qt::UTC) << daySecs
1253         << QDateTime(QDate(4000, 1, 2), standardTime, Qt::UTC);
1254     QTest::newRow("utc7")
1255         << QDateTime(QDate(4000, 1, 1), standardTime, Qt::UTC) << (daySecs * 185)
1256         << QDateTime(QDate(4000, 7, 4), standardTime, Qt::UTC);
1257     QTest::newRow("utc8")
1258         << QDateTime(QDate(4000, 1, 1), standardTime, Qt::UTC) << (daySecs * 366)
1259         << QDateTime(QDate(4001, 1, 1), standardTime, Qt::UTC);
1260     QTest::newRow("utc9")
1261         << QDateTime(QDate(4000, 1, 1), standardTime, Qt::UTC) << qint64(0)
1262         << QDateTime(QDate(4000, 1, 1), standardTime, Qt::UTC);
1263 
1264     if (zoneIsCET) {
1265         QTest::newRow("cet0")
1266             << QDateTime(QDate(2004, 1, 1), standardTime, Qt::LocalTime) << daySecs
1267             << QDateTime(QDate(2004, 1, 2), standardTime, Qt::LocalTime);
1268         QTest::newRow("cet1")
1269             << QDateTime(QDate(2004, 1, 1), standardTime, Qt::LocalTime) << (daySecs * 185)
1270             << QDateTime(QDate(2004, 7, 4), daylightTime, Qt::LocalTime);
1271         QTest::newRow("cet2")
1272             << QDateTime(QDate(2004, 1, 1), standardTime, Qt::LocalTime) << (daySecs * 366)
1273             << QDateTime(QDate(2005, 1, 1), standardTime, Qt::LocalTime);
1274         QTest::newRow("cet3")
1275             << QDateTime(QDate(1760, 1, 1), standardTime, Qt::LocalTime) << daySecs
1276             << QDateTime(QDate(1760, 1, 2), standardTime, Qt::LocalTime);
1277         QTest::newRow("cet4")
1278             << QDateTime(QDate(1760, 1, 1), standardTime, Qt::LocalTime) << (daySecs * 185)
1279             << QDateTime(QDate(1760, 7, 4), standardTime, Qt::LocalTime);
1280         QTest::newRow("cet5")
1281             << QDateTime(QDate(1760, 1, 1), standardTime, Qt::LocalTime) << (daySecs * 366)
1282             << QDateTime(QDate(1761, 1, 1), standardTime, Qt::LocalTime);
1283         QTest::newRow("cet6")
1284             << QDateTime(QDate(4000, 1, 1), standardTime, Qt::LocalTime) << daySecs
1285             << QDateTime(QDate(4000, 1, 2), standardTime, Qt::LocalTime);
1286         QTest::newRow("cet7")
1287             << QDateTime(QDate(4000, 1, 1), standardTime, Qt::LocalTime) << (daySecs * 185)
1288             << QDateTime(QDate(4000, 7, 4), daylightTime, Qt::LocalTime);
1289         QTest::newRow("cet8")
1290             << QDateTime(QDate(4000, 1, 1), standardTime, Qt::LocalTime) << (daySecs * 366)
1291             << QDateTime(QDate(4001, 1, 1), standardTime, Qt::LocalTime);
1292         QTest::newRow("cet9")
1293             << QDateTime(QDate(4000, 1, 1), standardTime, Qt::LocalTime) << qint64(0)
1294             << QDateTime(QDate(4000, 1, 1), standardTime, Qt::LocalTime);
1295     }
1296 
1297     // Year sign change
1298     QTest::newRow("toNegative")
1299         << QDateTime(QDate(1, 1, 1), QTime(0, 0), Qt::UTC) << qint64(-1)
1300         << QDateTime(QDate(-1, 12, 31), QTime(23, 59, 59), Qt::UTC);
1301     QTest::newRow("toPositive")
1302         << QDateTime(QDate(-1, 12, 31), QTime(23, 59, 59), Qt::UTC) << qint64(1)
1303                                 << QDateTime(QDate(1, 1, 1), QTime(0, 0), Qt::UTC);
1304 
1305     QTest::newRow("invalid") << QDateTime() << qint64(1) << QDateTime();
1306 
1307     // Check Offset details are preserved
1308     QTest::newRow("offset0")
1309         << QDateTime(QDate(2013, 1, 1), QTime(1, 2, 3), Qt::OffsetFromUTC, 60 * 60)
1310         << qint64(60 * 60)
1311         << QDateTime(QDate(2013, 1, 1), QTime(2, 2, 3), Qt::OffsetFromUTC, 60 * 60);
1312     // Check last second of 1969
1313     QTest::newRow("epoch-1s-utc")
1314         << QDateTime(QDate(1970, 1, 1), QTime(0, 0), Qt::UTC) << qint64(-1)
1315         << QDateTime(QDate(1969, 12, 31), QTime(23, 59, 59), Qt::UTC);
1316     QTest::newRow("epoch-1s-local")
1317         << QDateTime(QDate(1970, 1, 1), QTime(0, 0)) << qint64(-1)
1318         << QDateTime(QDate(1969, 12, 31), QTime(23, 59, 59));
1319 }
1320 
1321 void tst_QDateTime::addSecs()
1322 {
1323     QFETCH(const QDateTime, dt);
1324     QFETCH(const qint64, nsecs);
1325     QFETCH(const QDateTime, result);
1326     QDateTime test = dt.addSecs(nsecs);
1327     QCOMPARE(test, result);
1328     QCOMPARE(test.timeSpec(), dt.timeSpec());
1329     if (test.timeSpec() == Qt::OffsetFromUTC)
1330         QCOMPARE(test.offsetFromUtc(), dt.offsetFromUtc());
1331     QCOMPARE(result.addSecs(-nsecs), dt);
1332 }
1333 
1334 void tst_QDateTime::addMSecs_data()
1335 {
1336     addSecs_data();
1337 }
1338 
1339 void tst_QDateTime::addMSecs()
1340 {
1341     QFETCH(const QDateTime, dt);
1342     QFETCH(const qint64, nsecs);
1343     QFETCH(const QDateTime, result);
1344 
1345     QDateTime test = dt.addMSecs(qint64(nsecs) * 1000);
1346     QCOMPARE(test, result);
1347     QCOMPARE(test.timeSpec(), dt.timeSpec());
1348     if (test.timeSpec() == Qt::OffsetFromUTC)
1349         QCOMPARE(test.offsetFromUtc(), dt.offsetFromUtc());
1350     QCOMPARE(result.addMSecs(qint64(-nsecs) * 1000), dt);
1351 }
1352 
1353 void tst_QDateTime::toTimeSpec_data()
1354 {
1355     QTest::addColumn<QDateTime>("fromUtc");
1356     QTest::addColumn<QDateTime>("fromLocal");
1357 
1358     QTime utcTime(4, 20, 30);
1359     QTime localStandardTime(5, 20, 30);
1360     QTime localDaylightTime(6, 20, 30);
1361 
1362     QTest::newRow("winter1") << QDateTime(QDate(2004, 1, 1), utcTime, Qt::UTC)
1363                           << QDateTime(QDate(2004, 1, 1), localStandardTime, Qt::LocalTime);
1364     QTest::newRow("winter2") << QDateTime(QDate(2004, 2, 29), utcTime, Qt::UTC)
1365                           << QDateTime(QDate(2004, 2, 29), localStandardTime, Qt::LocalTime);
1366     QTest::newRow("winter3") << QDateTime(QDate(1760, 2, 29), utcTime, Qt::UTC)
1367                           << QDateTime(QDate(1760, 2, 29), localStandardTime, Qt::LocalTime);
1368     QTest::newRow("winter4") << QDateTime(QDate(6000, 2, 29), utcTime, Qt::UTC)
1369                           << QDateTime(QDate(6000, 2, 29), localStandardTime, Qt::LocalTime);
1370 
1371     // Test mktime boundaries (1970 - 2038) and adjustDate().
1372     QTest::newRow("1969/12/31 23:00 UTC")
1373         << QDateTime(QDate(1969, 12, 31), QTime(23, 0), Qt::UTC)
1374         << QDateTime(QDate(1970, 1, 1), QTime(0, 0), Qt::LocalTime);
1375     QTest::newRow("2037/12/31 23:00 UTC")
1376         << QDateTime(QDate(2037, 12, 31), QTime(23, 0), Qt::UTC)
1377         << QDateTime(QDate(2038, 1, 1), QTime(0, 0), Qt::LocalTime);
1378 
1379     QTest::newRow("-271821/4/20 00:00 UTC (JavaScript min date, start of day)")
1380         << QDateTime(QDate(-271821, 4, 20), QTime(0, 0), Qt::UTC)
1381         << QDateTime(QDate(-271821, 4, 20), QTime(1, 0), Qt::LocalTime);
1382     QTest::newRow("-271821/4/20 23:00 UTC (JavaScript min date, end of day)")
1383         << QDateTime(QDate(-271821, 4, 20), QTime(23, 0), Qt::UTC)
1384         << QDateTime(QDate(-271821, 4, 21), QTime(0, 0), Qt::LocalTime);
1385 
1386     if (zoneIsCET) {
1387         QTest::newRow("summer1") << QDateTime(QDate(2004, 6, 30), utcTime, Qt::UTC)
1388                                  << QDateTime(QDate(2004, 6, 30), localDaylightTime, Qt::LocalTime);
1389         QTest::newRow("summer2") << QDateTime(QDate(1760, 6, 30), utcTime, Qt::UTC)
1390                                  << QDateTime(QDate(1760, 6, 30), localStandardTime, Qt::LocalTime);
1391         QTest::newRow("summer3") << QDateTime(QDate(4000, 6, 30), utcTime, Qt::UTC)
1392                                  << QDateTime(QDate(4000, 6, 30), localDaylightTime, Qt::LocalTime);
1393 
1394         QTest::newRow("275760/9/23 00:00 UTC (JavaScript max date, start of day)")
1395             << QDateTime(QDate(275760, 9, 23), QTime(0, 0), Qt::UTC)
1396             << QDateTime(QDate(275760, 9, 23), QTime(2, 0), Qt::LocalTime);
1397 
1398         QTest::newRow("275760/9/23 22:00 UTC (JavaScript max date, end of day)")
1399             << QDateTime(QDate(275760, 9, 23), QTime(22, 0), Qt::UTC)
1400             << QDateTime(QDate(275760, 9, 24), QTime(0, 0), Qt::LocalTime);
1401     }
1402 
1403     QTest::newRow("msec") << QDateTime(QDate(4000, 6, 30), utcTime.addMSecs(1), Qt::UTC)
1404                        << QDateTime(QDate(4000, 6, 30), localDaylightTime.addMSecs(1), Qt::LocalTime);
1405 }
1406 
1407 void tst_QDateTime::toTimeSpec()
1408 {
1409     if (zoneIsCET) {
1410         QFETCH(QDateTime, fromUtc);
1411         QFETCH(QDateTime, fromLocal);
1412 
1413         QDateTime utcToUtc = fromUtc.toTimeSpec(Qt::UTC);
1414         QDateTime localToLocal = fromLocal.toTimeSpec(Qt::LocalTime);
1415         QDateTime utcToLocal = fromUtc.toTimeSpec(Qt::LocalTime);
1416         QDateTime localToUtc = fromLocal.toTimeSpec(Qt::UTC);
1417         QDateTime utcToOffset = fromUtc.toTimeSpec(Qt::OffsetFromUTC);
1418         QDateTime localToOffset = fromLocal.toTimeSpec(Qt::OffsetFromUTC);
1419 
1420         QCOMPARE(utcToUtc, fromUtc);
1421         QCOMPARE(utcToUtc.date(), fromUtc.date());
1422         QCOMPARE(utcToUtc.time(), fromUtc.time());
1423         QCOMPARE(utcToUtc.timeSpec(), Qt::UTC);
1424 
1425         QCOMPARE(localToLocal, fromLocal);
1426         QCOMPARE(localToLocal.date(), fromLocal.date());
1427         QCOMPARE(localToLocal.time(), fromLocal.time());
1428         QCOMPARE(localToLocal.timeSpec(), Qt::LocalTime);
1429 
1430         QCOMPARE(utcToLocal, fromLocal);
1431         QCOMPARE(utcToLocal.date(), fromLocal.date());
1432         QCOMPARE(utcToLocal.time(), fromLocal.time());
1433         QCOMPARE(utcToLocal.timeSpec(), Qt::LocalTime);
1434         QCOMPARE(utcToLocal.toTimeSpec(Qt::UTC), fromUtc);
1435 
1436         QCOMPARE(localToUtc, fromUtc);
1437         QCOMPARE(localToUtc.date(), fromUtc.date());
1438         QCOMPARE(localToUtc.time(), fromUtc.time());
1439         QCOMPARE(localToUtc.timeSpec(), Qt::UTC);
1440         QCOMPARE(localToUtc.toTimeSpec(Qt::LocalTime), fromLocal);
1441 
1442         QCOMPARE(utcToUtc, localToUtc);
1443         QCOMPARE(utcToUtc.date(), localToUtc.date());
1444         QCOMPARE(utcToUtc.time(), localToUtc.time());
1445         QCOMPARE(utcToUtc.timeSpec(), Qt::UTC);
1446 
1447         QCOMPARE(utcToLocal, localToLocal);
1448         QCOMPARE(utcToLocal.date(), localToLocal.date());
1449         QCOMPARE(utcToLocal.time(), localToLocal.time());
1450         QCOMPARE(utcToLocal.timeSpec(), Qt::LocalTime);
1451 
1452         // OffsetToUTC becomes UTC
1453         QCOMPARE(utcToOffset, fromUtc);
1454         QCOMPARE(utcToOffset.date(), fromUtc.date());
1455         QCOMPARE(utcToOffset.time(), fromUtc.time());
1456         QCOMPARE(utcToOffset.timeSpec(), Qt::UTC);
1457         QCOMPARE(utcToOffset.toTimeSpec(Qt::UTC), fromUtc);
1458 
1459         QCOMPARE(localToOffset, fromUtc);
1460         QCOMPARE(localToOffset.date(), fromUtc.date());
1461         QCOMPARE(localToOffset.time(), fromUtc.time());
1462         QCOMPARE(localToOffset.timeSpec(), Qt::UTC);
1463         QCOMPARE(localToOffset.toTimeSpec(Qt::LocalTime), fromLocal);
1464     } else {
1465         QSKIP("Not tested with timezone other than Central European (CET/CEST)");
1466     }
1467 }
1468 
1469 void tst_QDateTime::toLocalTime_data()
1470 {
1471     toTimeSpec_data();
1472 }
1473 
1474 void tst_QDateTime::toLocalTime()
1475 {
1476     if (zoneIsCET) {
1477         QFETCH(QDateTime, fromUtc);
1478         QFETCH(QDateTime, fromLocal);
1479 
1480         QCOMPARE(fromLocal.toLocalTime(), fromLocal);
1481         QCOMPARE(fromUtc.toLocalTime(), fromLocal);
1482         QCOMPARE(fromUtc.toLocalTime(), fromLocal.toLocalTime());
1483     } else {
1484         QSKIP("Not tested with timezone other than Central European (CET/CEST)");
1485     }
1486 }
1487 
1488 void tst_QDateTime::toUTC_data()
1489 {
1490     toTimeSpec_data();
1491 }
1492 
1493 void tst_QDateTime::toUTC()
1494 {
1495     if (zoneIsCET) {
1496         QFETCH(QDateTime, fromUtc);
1497         QFETCH(QDateTime, fromLocal);
1498 
1499         QCOMPARE(fromUtc.toUTC(), fromUtc);
1500         QCOMPARE(fromLocal.toUTC(), fromUtc);
1501         QCOMPARE(fromUtc.toUTC(), fromLocal.toUTC());
1502     } else {
1503         QSKIP("Not tested with timezone other than Central European (CET/CEST)");
1504     }
1505 
1506     QDateTime dt = QDateTime::currentDateTime();
1507     if(dt.time().msec() == 0){
1508         dt.setTime(dt.time().addMSecs(1));
1509     }
1510     QString s = dt.toString("zzz");
1511     QString t = dt.toUTC().toString("zzz");
1512     QCOMPARE(s, t);
1513 }
1514 
1515 void tst_QDateTime::daysTo()
1516 {
1517     QDateTime dt1(QDate(1760, 1, 2).startOfDay());
1518     QDateTime dt2(QDate(1760, 2, 2).startOfDay());
1519     QDateTime dt3(QDate(1760, 3, 2).startOfDay());
1520 
1521     QCOMPARE(dt1.daysTo(dt2), (qint64) 31);
1522     QCOMPARE(dt1.addDays(31), dt2);
1523 
1524     QCOMPARE(dt2.daysTo(dt3), (qint64) 29);
1525     QCOMPARE(dt2.addDays(29), dt3);
1526 
1527     QCOMPARE(dt1.daysTo(dt3), (qint64) 60);
1528     QCOMPARE(dt1.addDays(60), dt3);
1529 
1530     QCOMPARE(dt2.daysTo(dt1), (qint64) -31);
1531     QCOMPARE(dt2.addDays(-31), dt1);
1532 
1533     QCOMPARE(dt3.daysTo(dt2), (qint64) -29);
1534     QCOMPARE(dt3.addDays(-29), dt2);
1535 
1536     QCOMPARE(dt3.daysTo(dt1), (qint64) -60);
1537     QCOMPARE(dt3.addDays(-60), dt1);
1538 }
1539 
1540 void tst_QDateTime::secsTo_data()
1541 {
1542     addSecs_data();
1543 
1544     QTest::newRow("disregard milliseconds #1")
1545         << QDateTime(QDate(2012, 3, 7), QTime(0, 58, 0, 0)) << qint64(60)
1546         << QDateTime(QDate(2012, 3, 7), QTime(0, 59, 0, 400));
1547 
1548     QTest::newRow("disregard milliseconds #2")
1549         << QDateTime(QDate(2012, 3, 7), QTime(0, 59, 0, 0)) << qint64(60)
1550         << QDateTime(QDate(2012, 3, 7), QTime(1, 0, 0, 400));
1551 }
1552 
1553 void tst_QDateTime::secsTo()
1554 {
1555     QFETCH(const QDateTime, dt);
1556     QFETCH(const qint64, nsecs);
1557     QFETCH(const QDateTime, result);
1558 
1559     if (dt.isValid()) {
1560         QCOMPARE(dt.secsTo(result), (qint64)nsecs);
1561         QCOMPARE(result.secsTo(dt), (qint64)-nsecs);
1562         QVERIFY((dt == result) == (0 == nsecs));
1563         QVERIFY((dt != result) == (0 != nsecs));
1564         QVERIFY((dt < result) == (0 < nsecs));
1565         QVERIFY((dt <= result) == (0 <= nsecs));
1566         QVERIFY((dt > result) == (0 > nsecs));
1567         QVERIFY((dt >= result) == (0 >= nsecs));
1568     } else {
1569         QVERIFY(dt.secsTo(result) == 0);
1570         QVERIFY(result.secsTo(dt) == 0);
1571     }
1572 }
1573 
1574 void tst_QDateTime::msecsTo_data()
1575 {
1576     addMSecs_data();
1577 }
1578 
1579 void tst_QDateTime::msecsTo()
1580 {
1581     QFETCH(const QDateTime, dt);
1582     QFETCH(const qint64, nsecs);
1583     QFETCH(const QDateTime, result);
1584 
1585     if (dt.isValid()) {
1586         QCOMPARE(dt.msecsTo(result), qint64(nsecs) * 1000);
1587         QCOMPARE(result.msecsTo(dt), -qint64(nsecs) * 1000);
1588         QVERIFY((dt == result) == (0 == (qint64(nsecs) * 1000)));
1589         QVERIFY((dt != result) == (0 != (qint64(nsecs) * 1000)));
1590         QVERIFY((dt < result) == (0 < (qint64(nsecs) * 1000)));
1591         QVERIFY((dt <= result) == (0 <= (qint64(nsecs) * 1000)));
1592         QVERIFY((dt > result) == (0 > (qint64(nsecs) * 1000)));
1593         QVERIFY((dt >= result) == (0 >= (qint64(nsecs) * 1000)));
1594     } else {
1595         QVERIFY(dt.msecsTo(result) == 0);
1596         QVERIFY(result.msecsTo(dt) == 0);
1597     }
1598 }
1599 
1600 void tst_QDateTime::currentDateTime()
1601 {
1602     time_t buf1, buf2;
1603     ::time(&buf1);
1604     QDateTime lowerBound;
1605     lowerBound.setSecsSinceEpoch(buf1);
1606 
1607     QDateTime dt1 = QDateTime::currentDateTime();
1608     QDateTime dt2 = QDateTime::currentDateTime().toLocalTime();
1609     QDateTime dt3 = QDateTime::currentDateTime().toUTC();
1610 
1611     ::time(&buf2);
1612 
1613     QDateTime upperBound;
1614     upperBound.setSecsSinceEpoch(buf2);
1615     // Note we must add 2 seconds here because time() may return up to
1616     // 1 second difference from the more accurate method used by QDateTime::currentDateTime()
1617     upperBound = upperBound.addSecs(2);
1618 
1619     QString details = QString("\n"
1620         "lowerBound: %1\n"
1621         "dt1:        %2\n"
1622         "dt2:        %3\n"
1623         "dt3:        %4\n"
1624         "upperBound: %5\n")
1625         .arg(lowerBound.toSecsSinceEpoch())
1626         .arg(dt1.toSecsSinceEpoch())
1627         .arg(dt2.toSecsSinceEpoch())
1628         .arg(dt3.toSecsSinceEpoch())
1629         .arg(upperBound.toSecsSinceEpoch());
1630 
1631     QVERIFY2(lowerBound < upperBound, qPrintable(details));
1632 
1633     QVERIFY2(lowerBound <= dt1, qPrintable(details));
1634     QVERIFY2(dt1 < upperBound, qPrintable(details));
1635     QVERIFY2(lowerBound <= dt2, qPrintable(details));
1636     QVERIFY2(dt2 < upperBound, qPrintable(details));
1637     QVERIFY2(lowerBound <= dt3, qPrintable(details));
1638     QVERIFY2(dt3 < upperBound, qPrintable(details));
1639 
1640     QVERIFY(dt1.timeSpec() == Qt::LocalTime);
1641     QVERIFY(dt2.timeSpec() == Qt::LocalTime);
1642     QVERIFY(dt3.timeSpec() == Qt::UTC);
1643 }
1644 
1645 void tst_QDateTime::currentDateTimeUtc()
1646 {
1647     time_t buf1, buf2;
1648     ::time(&buf1);
1649 
1650     QDateTime lowerBound;
1651     lowerBound.setSecsSinceEpoch(buf1);
1652 
1653     QDateTime dt1 = QDateTime::currentDateTimeUtc();
1654     QDateTime dt2 = QDateTime::currentDateTimeUtc().toLocalTime();
1655     QDateTime dt3 = QDateTime::currentDateTimeUtc().toUTC();
1656 
1657     ::time(&buf2);
1658 
1659     QDateTime upperBound;
1660     upperBound.setSecsSinceEpoch(buf2);
1661     // Note we must add 2 seconds here because time() may return up to
1662     // 1 second difference from the more accurate method used by QDateTime::currentDateTime()
1663     upperBound = upperBound.addSecs(2);
1664 
1665     QString details = QString("\n"
1666         "lowerBound: %1\n"
1667         "dt1:        %2\n"
1668         "dt2:        %3\n"
1669         "dt3:        %4\n"
1670         "upperBound: %5\n")
1671         .arg(lowerBound.toSecsSinceEpoch())
1672         .arg(dt1.toSecsSinceEpoch())
1673         .arg(dt2.toSecsSinceEpoch())
1674         .arg(dt3.toSecsSinceEpoch())
1675         .arg(upperBound.toSecsSinceEpoch());
1676 
1677     QVERIFY2(lowerBound < upperBound, qPrintable(details));
1678 
1679     QVERIFY2(lowerBound <= dt1, qPrintable(details));
1680     QVERIFY2(dt1 < upperBound, qPrintable(details));
1681     QVERIFY2(lowerBound <= dt2, qPrintable(details));
1682     QVERIFY2(dt2 < upperBound, qPrintable(details));
1683     QVERIFY2(lowerBound <= dt3, qPrintable(details));
1684     QVERIFY2(dt3 < upperBound, qPrintable(details));
1685 
1686     QVERIFY(dt1.timeSpec() == Qt::UTC);
1687     QVERIFY(dt2.timeSpec() == Qt::LocalTime);
1688     QVERIFY(dt3.timeSpec() == Qt::UTC);
1689 }
1690 
1691 void tst_QDateTime::currentDateTimeUtc2()
1692 {
1693     QDateTime local, utc;
1694     qint64 msec;
1695 
1696     // check that we got all down to the same milliseconds
1697     int i = 20;
1698     bool ok = false;
1699     do {
1700         local = QDateTime::currentDateTime();
1701         utc = QDateTime::currentDateTimeUtc();
1702         msec = QDateTime::currentMSecsSinceEpoch();
1703         ok = local.time().msec() == utc.time().msec()
1704             && utc.time().msec() == (msec % 1000);
1705     } while (--i && !ok);
1706 
1707     if (!i)
1708         QSKIP("Failed to get the dates within 1 ms of each other");
1709 
1710     // seconds and milliseconds should be the same:
1711     QCOMPARE(utc.time().second(), local.time().second());
1712     QCOMPARE(utc.time().msec(), local.time().msec());
1713     QCOMPARE(msec % 1000, qint64(local.time().msec()));
1714     QCOMPARE(msec / 1000 % 60, qint64(local.time().second()));
1715 
1716     // the two dates should be equal, actually
1717     QCOMPARE(local.toUTC(), utc);
1718     QCOMPARE(utc.toLocalTime(), local);
1719 
1720     // and finally, the SecsSinceEpoch should equal our number
1721     QCOMPARE(qint64(utc.toSecsSinceEpoch()), msec / 1000);
1722     QCOMPARE(qint64(local.toSecsSinceEpoch()), msec / 1000);
1723     QCOMPARE(utc.toMSecsSinceEpoch(), msec);
1724     QCOMPARE(local.toMSecsSinceEpoch(), msec);
1725 }
1726 
1727 void tst_QDateTime::toSecsSinceEpoch_data()
1728 {
1729     QTest::addColumn<QString>("dateTimeStr");
1730     QTest::addColumn<bool>("valid");
1731 
1732     QTest::newRow( "data1" ) << str( 1800, 1, 1, 12, 0, 0 ) << true;
1733     QTest::newRow( "data2" ) << str( 1969, 1, 1, 12, 0, 0 ) << true;
1734     QTest::newRow( "data3" ) << str( 2002, 1, 1, 12, 0, 0 ) << true;
1735     QTest::newRow( "data4" ) << str( 2002, 6, 1, 12, 0, 0 ) << true;
1736     QTest::newRow( "data5" ) << QString("INVALID") << false;
1737     QTest::newRow( "data6" ) << str( 2038, 1, 1, 12, 0, 0 ) << true;
1738     QTest::newRow( "data7" ) << str( 2063, 4, 5, 12, 0, 0 ) << true; // the day of First Contact
1739     QTest::newRow( "data8" ) << str( 2107, 1, 1, 12, 0, 0 ) << true;
1740 }
1741 
1742 void tst_QDateTime::toSecsSinceEpoch()
1743 {
1744     QFETCH(const QString, dateTimeStr);
1745     const QDateTime datetime = dt(dateTimeStr);
1746     QFETCH(const bool, valid);
1747     QCOMPARE(datetime.isValid(), valid);
1748 
1749     if (valid) {
1750         const qint64 asSecsSinceEpoch = datetime.toSecsSinceEpoch();
1751         QCOMPARE(asSecsSinceEpoch, datetime.toMSecsSinceEpoch() / 1000);
1752         QCOMPARE(QDateTime::fromSecsSinceEpoch(asSecsSinceEpoch), datetime);
1753     }
1754 }
1755 
1756 void tst_QDateTime::daylightSavingsTimeChange_data()
1757 {
1758     QTest::addColumn<QDate>("inDST");
1759     QTest::addColumn<QDate>("outDST");
1760     QTest::addColumn<int>("days"); // from in to out; -ve if reversed
1761     QTest::addColumn<int>("months");
1762 
1763     QTest::newRow("Autumn") << QDate(2006, 8, 1) << QDate(2006, 12, 1)
1764                             << 122 << 4;
1765 
1766     QTest::newRow("Spring") << QDate(2006, 5, 1) << QDate(2006, 2, 1)
1767                             << -89 << -3;
1768 }
1769 
1770 void tst_QDateTime::daylightSavingsTimeChange()
1771 {
1772     // This has grown from a regression test for an old bug where starting with
1773     // a date in DST and then moving to a date outside it (or vice-versa) caused
1774     // 1-hour jumps in time when addSecs() was called.
1775     //
1776     // The bug was caused by QDateTime knowing more than it lets show.
1777     // Internally, if it knows, QDateTime stores a flag indicating if the time is
1778     // DST or not. If it doesn't, it sets to "LocalUnknown".  The problem happened
1779     // because some functions did not reset the flag when moving in or out of DST.
1780 
1781     // WARNING: This only tests anything if there's a Daylight Savings Time change
1782     // in the current time-zone between inDST and outDST.
1783     // This is true for Central European Time and may be elsewhere.
1784 
1785     QFETCH(QDate, inDST);
1786     QFETCH(QDate, outDST);
1787     QFETCH(int, days);
1788     QFETCH(int, months);
1789 
1790     // First with simple construction
1791     QDateTime dt = QDateTime(outDST, QTime(0, 0, 0), Qt::LocalTime);
1792     int outDSTsecs = dt.toSecsSinceEpoch();
1793 
1794     dt.setDate(inDST);
1795     dt = dt.addSecs(1);
1796     QCOMPARE(dt, QDateTime(inDST, QTime(0, 0, 1)));
1797 
1798     // now using addDays:
1799     dt = dt.addDays(days).addSecs(1);
1800     QCOMPARE(dt, QDateTime(outDST, QTime(0, 0, 2)));
1801 
1802     // ... and back again:
1803     dt = dt.addDays(-days).addSecs(1);
1804     QCOMPARE(dt, QDateTime(inDST, QTime(0, 0, 3)));
1805 
1806     // now using addMonths:
1807     dt = dt.addMonths(months).addSecs(1);
1808     QCOMPARE(dt, QDateTime(outDST, QTime(0, 0, 4)));
1809 
1810     // ... and back again:
1811     dt = dt.addMonths(-months).addSecs(1);
1812     QCOMPARE(dt, QDateTime(inDST, QTime(0, 0, 5)));
1813 
1814     // now using fromSecsSinceEpoch
1815     dt = QDateTime::fromSecsSinceEpoch(outDSTsecs);
1816     QCOMPARE(dt, QDateTime(outDST, QTime(0, 0, 0)));
1817 
1818     dt.setDate(inDST);
1819     dt = dt.addSecs(60);
1820     QCOMPARE(dt, QDateTime(inDST, QTime(0, 1, 0)));
1821 
1822     // using addMonths:
1823     dt = dt.addMonths(months).addSecs(60);
1824     QCOMPARE(dt, QDateTime(outDST, QTime(0, 2, 0)));
1825     // back again:
1826     dt = dt.addMonths(-months).addSecs(60);
1827     QCOMPARE(dt, QDateTime(inDST, QTime(0, 3, 0)));
1828 
1829     // using addDays:
1830     dt = dt.addDays(days).addSecs(60);
1831     QCOMPARE(dt, QDateTime(outDST, QTime(0, 4, 0)));
1832     // back again:
1833     dt = dt.addDays(-days).addSecs(60);
1834     QCOMPARE(dt, QDateTime(inDST, QTime(0, 5, 0)));
1835 
1836     // Now use the result of a UTC -> LocalTime conversion
1837     dt = QDateTime(outDST, QTime(0, 0), Qt::LocalTime).toUTC();
1838     dt = QDateTime(dt.date(), dt.time(), Qt::UTC).toLocalTime();
1839     QCOMPARE(dt, QDateTime(outDST, QTime(0, 0)));
1840 
1841     // using addDays:
1842     dt = dt.addDays(-days).addSecs(3600);
1843     QCOMPARE(dt, QDateTime(inDST, QTime(1, 0)));
1844     // back again
1845     dt = dt.addDays(days).addSecs(3600);
1846     QCOMPARE(dt, QDateTime(outDST, QTime(2, 0)));
1847 
1848     // using addMonths:
1849     dt = dt.addMonths(-months).addSecs(3600);
1850     QCOMPARE(dt, QDateTime(inDST, QTime(3, 0)));
1851     // back again:
1852     dt = dt.addMonths(months).addSecs(3600);
1853     QCOMPARE(dt, QDateTime(outDST, QTime(4, 0)));
1854 
1855     // using setDate:
1856     dt.setDate(inDST);
1857     dt = dt.addSecs(3600);
1858     QCOMPARE(dt, QDateTime(inDST, QTime(5, 0)));
1859 }
1860 
1861 void tst_QDateTime::springForward_data()
1862 {
1863     QTest::addColumn<QDate>("day"); // day of DST transition
1864     QTest::addColumn<QTime>("time"); // in the "missing hour"
1865     QTest::addColumn<int>("step"); // days to step; +ve from before, -ve from after
1866     QTest::addColumn<int>("adjust"); // minutes ahead of UTC on day stepped from
1867 
1868     /*
1869       Zone tests compare a summer and winter moment's SecsSinceEpoch to known values.
1870       This could in principle be flawed (two DST-using zones in the same
1871       hemisphere with the same DST and standard times but different transition
1872       times) but no actual example is known where this is a problem.  Please
1873       document any such conflicts, if discovered.
1874 
1875       See http://www.timeanddate.com/time/zones/ for data on more candidates to
1876       test.
1877      */
1878 
1879     uint winter = QDate(2015, 1, 1).startOfDay().toSecsSinceEpoch();
1880     uint summer = QDate(2015, 7, 1).startOfDay().toSecsSinceEpoch();
1881 
1882     if (winter == 1420066800 && summer == 1435701600) {
1883         QTest::newRow("CET from day before") << QDate(2015, 3, 29) << QTime(2, 30, 0) << 1 << 60;
1884         QTest::newRow("CET from day after") << QDate(2015, 3, 29) << QTime(2, 30, 0) << -1 << 120;
1885     } else if (winter == 1420063200 && summer == 1435698000) {
1886         // e.g. Finland, where our CI runs ...
1887         QTest::newRow("EET from day before") << QDate(2015, 3, 29) << QTime(3, 30, 0) << 1 << 120;
1888         QTest::newRow("EET from day after") << QDate(2015, 3, 29) << QTime(3, 30, 0) << -1 << 180;
1889     } else if (winter == 1420070400 && summer == 1435705200) {
1890         // Western European Time, WET/WEST; a.k.a. GMT/BST
1891         QTest::newRow("WET from day before") << QDate(2015, 3, 29) << QTime(1, 30, 0) << 1 << 0;
1892         QTest::newRow("WET from day after") << QDate(2015, 3, 29) << QTime(1, 30, 0) << -1 << 60;
1893     } else if (winter == 1420099200 && summer == 1435734000) {
1894         // Western USA, Canada: Pacific Time (e.g. US/Pacific)
1895         QTest::newRow("PT from day before") << QDate(2015, 3, 8) << QTime(2, 30, 0) << 1 << -480;
1896         QTest::newRow("PT from day after") << QDate(2015, 3, 8) << QTime(2, 30, 0) << -1 << -420;
1897     } else if (winter == 1420088400 && summer == 1435723200) {
1898         // Eastern USA, Canada: Eastern Time (e.g. US/Eastern)
1899         QTest::newRow("ET from day before") << QDate(2015, 3, 8) << QTime(2, 30, 0) << 1 << -300;
1900         QTest::newRow("ET from day after") << QDate(2015, 3, 8) << QTime(2, 30, 0) << -1 << -240;
1901     } else {
1902         // Includes the numbers you need to test for your zone, as above:
1903         QString msg(QString::fromLatin1("No spring forward test data for this TZ (%1, %2)"
1904                         ).arg(winter).arg(summer));
1905         QSKIP(qPrintable(msg));
1906     }
1907 }
1908 
1909 void tst_QDateTime::springForward()
1910 {
1911     QFETCH(QDate, day);
1912     QFETCH(QTime, time);
1913     QFETCH(int, step);
1914     QFETCH(int, adjust);
1915 
1916     QDateTime direct = QDateTime(day.addDays(-step), time, Qt::LocalTime).addDays(step);
1917     if (direct.isValid()) { // mktime() may deem a time in the gap invalid
1918         QCOMPARE(direct.date(), day);
1919         QCOMPARE(direct.time().minute(), time.minute());
1920         QCOMPARE(direct.time().second(), time.second());
1921         int off = direct.time().hour() - time.hour();
1922         QVERIFY(off == 1 || off == -1);
1923         // Note: function doc claims always +1, but this should be reviewed !
1924     }
1925 
1926     // Repeat, but getting there via .toLocalTime():
1927     QDateTime detour = QDateTime(day.addDays(-step),
1928                                  time.addSecs(-60 * adjust),
1929                                  Qt::UTC).toLocalTime();
1930     QCOMPARE(detour.time(), time);
1931     detour = detour.addDays(step);
1932     // Insist on consistency:
1933     if (direct.isValid())
1934         QCOMPARE(detour, direct);
1935     else
1936         QVERIFY(!detour.isValid());
1937 }
1938 
1939 void tst_QDateTime::operator_eqeq_data()
1940 {
1941     QTest::addColumn<QDateTime>("dt1");
1942     QTest::addColumn<QDateTime>("dt2");
1943     QTest::addColumn<bool>("expectEqual");
1944     QTest::addColumn<bool>("checkEuro");
1945 
1946     QDateTime dateTime1(QDate(2012, 6, 20), QTime(14, 33, 2, 500));
1947     QDateTime dateTime1a = dateTime1.addMSecs(1);
1948     QDateTime dateTime2(QDate(2012, 20, 6), QTime(14, 33, 2, 500)); // Invalid
1949     QDateTime dateTime2a = dateTime2.addMSecs(-1); // Still invalid
1950     QDateTime dateTime3(QDate(1970, 1, 1), QTime(0, 0), Qt::UTC); // UTC epoch
1951     QDateTime dateTime3a = dateTime3.addDays(1);
1952     QDateTime dateTime3b = dateTime3.addDays(-1);
1953     // Ensure that different times may be equal when considering timezone.
1954     QDateTime dateTime3c(dateTime3.addSecs(3600));
1955     dateTime3c.setOffsetFromUtc(3600);
1956     QDateTime dateTime3d(dateTime3.addSecs(-3600));
1957     dateTime3d.setOffsetFromUtc(-3600);
1958     QDateTime dateTime3e(dateTime3.date(), dateTime3.time()); // Local time's epoch
1959 
1960     QTest::newRow("data0") << dateTime1 << dateTime1 << true << false;
1961     QTest::newRow("data1") << dateTime2 << dateTime2 << true << false;
1962     QTest::newRow("data2") << dateTime1a << dateTime1a << true << false;
1963     QTest::newRow("data3") << dateTime1 << dateTime2 << false << false;
1964     QTest::newRow("data4") << dateTime1 << dateTime1a << false << false;
1965     QTest::newRow("data5") << dateTime2 << dateTime2a << true << false;
1966     QTest::newRow("data6") << dateTime2 << dateTime3 << false << false;
1967     QTest::newRow("data7") << dateTime3 << dateTime3a << false << false;
1968     QTest::newRow("data8") << dateTime3 << dateTime3b << false << false;
1969     QTest::newRow("data9") << dateTime3a << dateTime3b << false << false;
1970     QTest::newRow("data10") << dateTime3 << dateTime3c << true << false;
1971     QTest::newRow("data11") << dateTime3 << dateTime3d << true << false;
1972     QTest::newRow("data12") << dateTime3c << dateTime3d << true << false;
1973     if (localTimeType == LocalTimeIsUtc)
1974         QTest::newRow("data13") << dateTime3 << dateTime3e << true << false;
1975     // ... but a zone (sometimes) ahead of or behind UTC (e.g. Europe/London)
1976     // might agree with UTC about the epoch, all the same.
1977 
1978     QTest::newRow("invalid == invalid") << QDateTime() << QDateTime() << true << false;
1979     QTest::newRow("invalid == valid #1") << QDateTime() << dateTime1 << false << false;
1980 
1981     if (zoneIsCET) {
1982         QTest::newRow("data14") << QDateTime(QDate(2004, 1, 2), QTime(2, 2, 3), Qt::LocalTime)
1983              << QDateTime(QDate(2004, 1, 2), QTime(1, 2, 3), Qt::UTC) << true << true;
1984     }
1985 }
1986 
1987 void tst_QDateTime::operator_eqeq()
1988 {
1989     QFETCH(QDateTime, dt1);
1990     QFETCH(QDateTime, dt2);
1991     QFETCH(bool, expectEqual);
1992     QFETCH(bool, checkEuro);
1993 
1994     QVERIFY(dt1 == dt1);
1995     QVERIFY(!(dt1 != dt1));
1996 
1997     QVERIFY(dt2 == dt2);
1998     QVERIFY(!(dt2 != dt2));
1999 
2000     QVERIFY(dt1 != QDateTime::currentDateTime());
2001     QVERIFY(dt2 != QDateTime::currentDateTime());
2002 
2003     QVERIFY(dt1.toUTC() == dt1.toUTC());
2004 
2005     bool equal = dt1 == dt2;
2006     QCOMPARE(equal, expectEqual);
2007     bool notEqual = dt1 != dt2;
2008     QCOMPARE(notEqual, !expectEqual);
2009 
2010     if (equal)
2011         QVERIFY(qHash(dt1) == qHash(dt2));
2012 
2013     if (checkEuro && zoneIsCET) {
2014         QVERIFY(dt1.toUTC() == dt2);
2015         QVERIFY(dt1 == dt2.toLocalTime());
2016     }
2017 }
2018 
2019 Q_DECLARE_METATYPE(QDataStream::Version)
2020 
2021 void tst_QDateTime::operator_insert_extract_data()
2022 {
2023     QTest::addColumn<int>("yearNumber");
2024     QTest::addColumn<QByteArray>("serialiseAs");
2025     QTest::addColumn<QByteArray>("deserialiseAs");
2026     QTest::addColumn<QDataStream::Version>("dataStreamVersion");
2027 
2028     const QByteArray westernAustralia("AWST-8AWDT-9,M10.5.0,M3.5.0/03:00:00");
2029     const QByteArray hawaii("HAW10");
2030 
2031     const QDataStream tmpDataStream;
2032     const int thisVersion = tmpDataStream.version();
2033     for (int version = QDataStream::Qt_1_0; version <= thisVersion; ++version) {
2034         const QDataStream::Version dataStreamVersion = static_cast<QDataStream::Version>(version);
2035         const QByteArray vN = QByteArray::number(dataStreamVersion);
2036         QTest::addRow("v%d WA => HAWAII %d", version, 2012)
2037             << 2012 << westernAustralia << hawaii << dataStreamVersion;
2038         QTest::addRow("v%d WA => WA %d", version, 2012)
2039             << 2012 << westernAustralia << westernAustralia << dataStreamVersion;
2040         QTest::addRow("v%d HAWAII => WA %d", version, -2012)
2041             << -2012 << hawaii << westernAustralia << dataStreamVersion;
2042         QTest::addRow("v%d HAWAII => HAWAII %d", version, 2012)
2043             << 2012 << hawaii << hawaii << dataStreamVersion;
2044     }
2045 }
2046 
2047 void tst_QDateTime::operator_insert_extract()
2048 {
2049     QFETCH(int, yearNumber);
2050     QFETCH(QByteArray, serialiseAs);
2051     QFETCH(QByteArray, deserialiseAs);
2052     QFETCH(QDataStream::Version, dataStreamVersion);
2053 
2054     // Start off in a certain timezone.
2055     TimeZoneRollback useZone(serialiseAs);
2056 
2057     // It is important that dateTime is created after the time zone shift
2058     QDateTime dateTime(QDate(yearNumber, 8, 14), QTime(8, 0), Qt::LocalTime);
2059     QDateTime dateTimeAsUTC(dateTime.toUTC());
2060 
2061     QByteArray byteArray;
2062     {
2063         QDataStream dataStream(&byteArray, QIODevice::WriteOnly);
2064         dataStream.setVersion(dataStreamVersion);
2065         if (dataStreamVersion == QDataStream::Qt_5_0) {
2066             // Qt 5 serialises as UTC and converts back to the stored timeSpec when
2067             // deserialising; we don't need to do it ourselves...
2068             dataStream << dateTime << dateTime;
2069         } else {
2070             // ... but other versions don't, so we have to here.
2071             dataStream << dateTimeAsUTC << dateTimeAsUTC;
2072             // We'll also make sure that a deserialised local datetime is the same
2073             // time of day (potentially different UTC time), regardless of which
2074             // timezone it was serialised in. E.g.: Tue Aug 14 08:00:00 2012
2075             // serialised in WST should be deserialised as Tue Aug 14 08:00:00 2012
2076             // HST.
2077             dataStream << dateTime;
2078         }
2079     }
2080 
2081     // Ensure that a change in timezone between serialisation and deserialisation
2082     // still results in identical UTC-converted datetimes.
2083     useZone.reset(deserialiseAs);
2084     QDateTime expectedLocalTime(dateTimeAsUTC.toLocalTime());
2085     {
2086         // Deserialise whole QDateTime at once.
2087         QDataStream dataStream(&byteArray, QIODevice::ReadOnly);
2088         dataStream.setVersion(dataStreamVersion);
2089         QDateTime deserialised;
2090         dataStream >> deserialised;
2091 
2092         if (dataStreamVersion == QDataStream::Qt_5_0) {
2093             // Ensure local time is still correct. Again, Qt 5 handles the timeSpec
2094             // conversion (in this case, UTC => LocalTime) for us when deserialising.
2095             QCOMPARE(deserialised, expectedLocalTime);
2096         } else {
2097             if (dataStreamVersion < QDataStream::Qt_4_0) {
2098                 // Versions lower than Qt 4 don't serialise the timeSpec, instead
2099                 // assuming that everything is LocalTime.
2100                 deserialised.setTimeSpec(Qt::UTC);
2101             }
2102             // Qt 4.* versions do serialise the timeSpec, so we only need to convert from UTC here.
2103             deserialised = deserialised.toLocalTime();
2104 
2105             QCOMPARE(deserialised, expectedLocalTime);
2106         }
2107         // Sanity check UTC times (operator== already converts its operands to UTC before comparing).
2108         QCOMPARE(deserialised.toUTC(), expectedLocalTime.toUTC());
2109 
2110         // Deserialise each component individually.
2111         QDate deserialisedDate;
2112         dataStream >> deserialisedDate;
2113         QTime deserialisedTime;
2114         dataStream >> deserialisedTime;
2115         qint8 deserialisedSpec;
2116         if (dataStreamVersion >= QDataStream::Qt_4_0)
2117             dataStream >> deserialisedSpec;
2118         deserialised = QDateTime(deserialisedDate, deserialisedTime, Qt::UTC);
2119         if (dataStreamVersion >= QDataStream::Qt_4_0)
2120             deserialised = deserialised.toTimeSpec(static_cast<Qt::TimeSpec>(deserialisedSpec));
2121         // Ensure local time is still correct.
2122         QCOMPARE(deserialised, expectedLocalTime);
2123         // Sanity check UTC times.
2124         QCOMPARE(deserialised.toUTC(), expectedLocalTime.toUTC());
2125 
2126         if (dataStreamVersion != QDataStream::Qt_5_0) {
2127             // Deserialised local datetime should be the same time of day,
2128             // regardless of which timezone it was serialised in.
2129             QDateTime localDeserialized;
2130             dataStream >> localDeserialized;
2131             QCOMPARE(localDeserialized, dateTime);
2132         }
2133     }
2134 }
2135 
2136 #if QT_CONFIG(datestring)
2137 void tst_QDateTime::fromStringDateFormat_data()
2138 {
2139     QTest::addColumn<QString>("dateTimeStr");
2140     QTest::addColumn<Qt::DateFormat>("dateFormat");
2141     QTest::addColumn<QDateTime>("expected");
2142 
2143     // Test Qt::TextDate format.
2144     QTest::newRow("text date") << QString::fromLatin1("Tue Jun 17 08:00:10 2003")
2145         << Qt::TextDate << QDateTime(QDate(2003, 6, 17), QTime(8, 0, 10, 0), Qt::LocalTime);
2146     QTest::newRow("text date Year 0999") << QString::fromLatin1("Tue Jun 17 08:00:10 0999")
2147         << Qt::TextDate << QDateTime(QDate(999, 6, 17), QTime(8, 0, 10, 0), Qt::LocalTime);
2148     QTest::newRow("text date Year 999") << QString::fromLatin1("Tue Jun 17 08:00:10 999")
2149         << Qt::TextDate << QDateTime(QDate(999, 6, 17), QTime(8, 0, 10, 0), Qt::LocalTime);
2150     QTest::newRow("text date Year 12345") << QString::fromLatin1("Tue Jun 17 08:00:10 12345")
2151         << Qt::TextDate << QDateTime(QDate(12345, 6, 17), QTime(8, 0, 10, 0), Qt::LocalTime);
2152     QTest::newRow("text date Year -4712") << QString::fromLatin1("Tue Jan 1 00:01:02 -4712")
2153         << Qt::TextDate << QDateTime(QDate(-4712, 1, 1), QTime(0, 1, 2, 0), Qt::LocalTime);
2154     QTest::newRow("text data0") << QString::fromLatin1("Thu Jan 1 00:00:00 1970")
2155         << Qt::TextDate << QDateTime(QDate(1970, 1, 1), QTime(0, 0), Qt::LocalTime);
2156     QTest::newRow("text data1") << QString::fromLatin1("Thu Jan 2 12:34 1970")
2157         << Qt::TextDate << QDateTime(QDate(1970, 1, 2), QTime(12, 34, 0), Qt::LocalTime);
2158     QTest::newRow("text data2") << QString::fromLatin1("Thu Jan 1 00 1970")
2159         << Qt::TextDate << QDateTime();
2160     QTest::newRow("text data3") << QString::fromLatin1("Thu Jan 1 00:00:00:00 1970")
2161         << Qt::TextDate << QDateTime();
2162     QTest::newRow("text data4") << QString::fromLatin1("Thu 1. Jan 00:00:00 1970")
2163         << Qt::TextDate << QDateTime(QDate(1970, 1, 1), QTime(0, 0), Qt::LocalTime);
2164     QTest::newRow("text data5") << QString::fromLatin1(" Thu   Jan   1    00:00:00    1970  ")
2165         << Qt::TextDate << QDateTime(QDate(1970, 1, 1), QTime(0, 0), Qt::LocalTime);
2166     QTest::newRow("text data6") << QString::fromLatin1("Thu Jan 1 00:00:00")
2167         << Qt::TextDate << QDateTime();
2168     QTest::newRow("text data7") << QString::fromLatin1("Thu Jan 1 1970 00:00:00")
2169         << Qt::TextDate << QDateTime(QDate(1970, 1, 1), QTime(0, 0), Qt::LocalTime);
2170     QTest::newRow("text data8") << QString::fromLatin1("Thu Jan 1 00:12:34 1970 GMT+foo")
2171         << Qt::TextDate << QDateTime();
2172     QTest::newRow("text data9") << QString::fromLatin1("Thu Jan 1 00:12:34 1970 GMT")
2173         << Qt::TextDate << QDateTime(QDate(1970, 1, 1), QTime(0, 12, 34), Qt::UTC);
2174     QTest::newRow("text data10") << QString::fromLatin1("Thu Jan 1 00:12:34 1970 GMT-0300")
2175         << Qt::TextDate << QDateTime(QDate(1970, 1, 1), QTime(3, 12, 34), Qt::UTC);
2176     QTest::newRow("text data11") << QString::fromLatin1("Thu Jan 1 00:12:34 1970 GMT+0300")
2177         << Qt::TextDate << QDateTime(QDate(1969, 12, 31), QTime(21, 12, 34), Qt::UTC);
2178     QTest::newRow("text data12") << QString::fromLatin1("Thu Jan 1 00:12:34 1970 gmt")
2179         << Qt::TextDate << QDateTime(QDate(1970, 1, 1), QTime(0, 12, 34), Qt::UTC);
2180     QTest::newRow("text data13") << QString::fromLatin1("Thu Jan 1 1970 00:12:34 GMT+0100")
2181         << Qt::TextDate << QDateTime(QDate(1969, 12, 31), QTime(23, 12, 34), Qt::UTC);
2182     QTest::newRow("text empty") << QString::fromLatin1("")
2183         << Qt::TextDate << QDateTime();
2184     QTest::newRow("text too many parts") << QString::fromLatin1("Thu Jan 1 00:12:34 1970 gmt +0100")
2185         << Qt::TextDate << QDateTime();
2186     QTest::newRow("text invalid month name") << QString::fromLatin1("Thu Jaz 1 1970 00:12:34")
2187         << Qt::TextDate << QDateTime();
2188     QTest::newRow("text invalid date") << QString::fromLatin1("Thu Jan 32 1970 00:12:34")
2189         << Qt::TextDate << QDateTime();
2190     QTest::newRow("text invalid day #1") << QString::fromLatin1("Thu Jan XX 1970 00:12:34")
2191         << Qt::TextDate << QDateTime();
2192     QTest::newRow("text invalid day #2") << QString::fromLatin1("Thu X. Jan 00:00:00 1970")
2193         << Qt::TextDate << QDateTime();
2194     QTest::newRow("text invalid day #3") << QString::fromLatin1("Thu 1 Jan 00:00:00 1970")
2195         << Qt::TextDate << QDateTime();
2196     QTest::newRow("text invalid year #1") << QString::fromLatin1("Thu 1. Jan 00:00:00 19X0")
2197         << Qt::TextDate << QDateTime();
2198     QTest::newRow("text invalid year #2") << QString::fromLatin1("Thu 1. Jan 19X0 00:00:00")
2199         << Qt::TextDate << QDateTime();
2200     QTest::newRow("text invalid hour") << QString::fromLatin1("Thu 1. Jan 1970 0X:00:00")
2201         << Qt::TextDate << QDateTime();
2202     QTest::newRow("text invalid minute") << QString::fromLatin1("Thu 1. Jan 1970 00:0X:00")
2203         << Qt::TextDate << QDateTime();
2204     QTest::newRow("text invalid second") << QString::fromLatin1("Thu 1. Jan 1970 00:00:0X")
2205         << Qt::TextDate << QDateTime();
2206     QTest::newRow("text invalid gmt specifier #1") << QString::fromLatin1("Thu 1. Jan 1970 00:00:00 DMT")
2207         << Qt::TextDate << QDateTime();
2208     QTest::newRow("text invalid gmt specifier #2") << QString::fromLatin1("Thu 1. Jan 1970 00:00:00 GMTx0200")
2209         << Qt::TextDate << QDateTime();
2210     QTest::newRow("text invalid gmt hour") << QString::fromLatin1("Thu 1. Jan 1970 00:00:00 GMT+0X00")
2211         << Qt::TextDate << QDateTime();
2212     QTest::newRow("text invalid gmt minute") << QString::fromLatin1("Thu 1. Jan 1970 00:00:00 GMT+000X")
2213         << Qt::TextDate << QDateTime();
2214     QTest::newRow("text second fraction") << QString::fromLatin1("Mon 6. May 2013 01:02:03.456")
2215         << Qt::TextDate << QDateTime(QDate(2013, 5, 6), QTime(1, 2, 3, 456));
2216 
2217     const QDateTime ref(QDate(1974, 12, 1), QTime(13, 2));
2218     QTest::newRow("day:,:month")
2219         << QStringLiteral("Sun 1. Dec 13:02:00 1974") << Qt::TextDate << ref;
2220     QTest::newRow("month:day")
2221         << QStringLiteral("Sun Dec 1 13:02:00 1974") << Qt::TextDate << ref;
2222 
2223     // Test Qt::ISODate format.
2224     QTest::newRow("trailing space") // QTBUG-80445
2225         << QString("2000-01-02 03:04:05.678 ")
2226         << Qt::ISODate << QDateTime(QDate(2000, 1, 2), QTime(3, 4, 5, 678));
2227 
2228     // Invalid spaces (but keeping field widths correct):
2229     QTest::newRow("space before millis")
2230         << QString("2000-01-02 03:04:05. 678") << Qt::ISODate << QDateTime();
2231     QTest::newRow("space after seconds")
2232         << QString("2000-01-02 03:04:5 .678") << Qt::ISODate << QDateTime();
2233     QTest::newRow("space before seconds")
2234         << QString("2000-01-02 03:04: 5.678") << Qt::ISODate << QDateTime();
2235     QTest::newRow("space after minutes")
2236         << QString("2000-01-02 03:4 :05.678") << Qt::ISODate << QDateTime();
2237     QTest::newRow("space before minutes")
2238         << QString("2000-01-02 03: 4:05.678") << Qt::ISODate << QDateTime();
2239     QTest::newRow("space after hour")
2240         << QString("2000-01-02 3 :04:05.678") << Qt::ISODate << QDateTime();
2241     QTest::newRow("space before hour")
2242         << QString("2000-01-02  3:04:05.678") << Qt::ISODate << QDateTime();
2243     QTest::newRow("space after day")
2244         << QString("2000-01-2  03:04:05.678") << Qt::ISODate << QDateTime();
2245     QTest::newRow("space before day")
2246         << QString("2000-01- 2 03:04:05.678") << Qt::ISODate << QDateTime();
2247     QTest::newRow("space after month")
2248         << QString("2000-1 -02 03:04:05.678") << Qt::ISODate << QDateTime();
2249     QTest::newRow("space before month")
2250         << QString("2000- 1-02 03:04:05.678") << Qt::ISODate << QDateTime();
2251     QTest::newRow("space after year")
2252         << QString("200 -01-02 03:04:05.678") << Qt::ISODate << QDateTime();
2253 
2254     // Spaces as separators:
2255     QTest::newRow("sec-milli space")
2256         << QString("2000-01-02 03:04:05 678") << Qt::ISODate
2257         << QDateTime();
2258     QTest::newRow("min-sec space")
2259         << QString("2000-01-02 03:04 05.678") << Qt::ISODate << QDateTime();
2260     QTest::newRow("hour-min space")
2261         << QString("2000-01-02 03 04:05.678") << Qt::ISODate << QDateTime();
2262     QTest::newRow("mon-day space")
2263         << QString("2000-01 02 03:04:05.678") << Qt::ISODate << QDateTime();
2264     QTest::newRow("year-mon space")
2265         << QString("2000 01-02 03:04:05.678") << Qt::ISODate << QDateTime();
2266 
2267     // Normal usage:
2268     QTest::newRow("ISO +01:00") << QString::fromLatin1("1987-02-13T13:24:51+01:00")
2269         << Qt::ISODate << QDateTime(QDate(1987, 2, 13), QTime(12, 24, 51), Qt::UTC);
2270     QTest::newRow("ISO +00:01") << QString::fromLatin1("1987-02-13T13:24:51+00:01")
2271         << Qt::ISODate << QDateTime(QDate(1987, 2, 13), QTime(13, 23, 51), Qt::UTC);
2272     QTest::newRow("ISO -01:00") << QString::fromLatin1("1987-02-13T13:24:51-01:00")
2273         << Qt::ISODate << QDateTime(QDate(1987, 2, 13), QTime(14, 24, 51), Qt::UTC);
2274     QTest::newRow("ISO -00:01") << QString::fromLatin1("1987-02-13T13:24:51-00:01")
2275         << Qt::ISODate << QDateTime(QDate(1987, 2, 13), QTime(13, 25, 51), Qt::UTC);
2276     QTest::newRow("ISO +0000") << QString::fromLatin1("1970-01-01T00:12:34+0000")
2277         << Qt::ISODate << QDateTime(QDate(1970, 1, 1), QTime(0, 12, 34), Qt::UTC);
2278     QTest::newRow("ISO +00:00") << QString::fromLatin1("1970-01-01T00:12:34+00:00")
2279         << Qt::ISODate << QDateTime(QDate(1970, 1, 1), QTime(0, 12, 34), Qt::UTC);
2280     QTest::newRow("ISO -03") << QString::fromLatin1("2014-12-15T12:37:09-03")
2281         << Qt::ISODate << QDateTime(QDate(2014, 12, 15), QTime(15, 37, 9), Qt::UTC);
2282     QTest::newRow("ISO zzz-03") << QString::fromLatin1("2014-12-15T12:37:09.745-03")
2283         << Qt::ISODate << QDateTime(QDate(2014, 12, 15), QTime(15, 37, 9, 745), Qt::UTC);
2284     QTest::newRow("ISO -3") << QString::fromLatin1("2014-12-15T12:37:09-3")
2285         << Qt::ISODate << QDateTime(QDate(2014, 12, 15), QTime(15, 37, 9), Qt::UTC);
2286     QTest::newRow("ISO zzz-3") << QString::fromLatin1("2014-12-15T12:37:09.745-3")
2287         << Qt::ISODate << QDateTime(QDate(2014, 12, 15), QTime(15, 37, 9, 745), Qt::UTC);
2288     QTest::newRow("ISO lower-case") << QString::fromLatin1("2005-06-28T07:57:30.002z")
2289         << Qt::ISODate << QDateTime(QDate(2005, 6, 28), QTime(7, 57, 30, 2), Qt::UTC);
2290     // No time specified - defaults to Qt::LocalTime.
2291     QTest::newRow("ISO data3") << QString::fromLatin1("2002-10-01")
2292         << Qt::ISODate << QDateTime(QDate(2002, 10, 1), QTime(0, 0), Qt::LocalTime);
2293     // Excess digits in milliseconds, round correctly:
2294     QTest::newRow("ISO") << QString::fromLatin1("2005-06-28T07:57:30.0010000000Z")
2295         << Qt::ISODate << QDateTime(QDate(2005, 6, 28), QTime(7, 57, 30, 1), Qt::UTC);
2296     QTest::newRow("ISO rounding") << QString::fromLatin1("2005-06-28T07:57:30.0015Z")
2297         << Qt::ISODate << QDateTime(QDate(2005, 6, 28), QTime(7, 57, 30, 2), Qt::UTC);
2298     // ... and accept comma as separator:
2299     QTest::newRow("ISO with comma 1") << QString::fromLatin1("2005-06-28T07:57:30,0040000000Z")
2300         << Qt::ISODate << QDateTime(QDate(2005, 6, 28), QTime(7, 57, 30, 4), Qt::UTC);
2301     QTest::newRow("ISO with comma 2") << QString::fromLatin1("2005-06-28T07:57:30,0015Z")
2302         << Qt::ISODate << QDateTime(QDate(2005, 6, 28), QTime(7, 57, 30, 2), Qt::UTC);
2303     QTest::newRow("ISO with comma 3") << QString::fromLatin1("2005-06-28T07:57:30,0014Z")
2304         << Qt::ISODate << QDateTime(QDate(2005, 6, 28), QTime(7, 57, 30, 1), Qt::UTC);
2305     QTest::newRow("ISO with comma 4") << QString::fromLatin1("2005-06-28T07:57:30,1Z")
2306         << Qt::ISODate << QDateTime(QDate(2005, 6, 28), QTime(7, 57, 30, 100), Qt::UTC);
2307     QTest::newRow("ISO with comma 5") << QString::fromLatin1("2005-06-28T07:57:30,11")
2308         << Qt::ISODate << QDateTime(QDate(2005, 6, 28), QTime(7, 57, 30, 110), Qt::LocalTime);
2309     // 24:00:00 Should be next day according to ISO 8601 section 4.2.3.
2310     QTest::newRow("ISO 24:00") << QString::fromLatin1("2012-06-04T24:00:00")
2311         << Qt::ISODate << QDateTime(QDate(2012, 6, 5), QTime(0, 0), Qt::LocalTime);
2312     QTest::newRow("ISO 24:00 end of month") << QString::fromLatin1("2012-06-30T24:00:00")
2313         << Qt::ISODate << QDateTime(QDate(2012, 7, 1), QTime(0, 0), Qt::LocalTime);
2314     QTest::newRow("ISO 24:00 end of year") << QString::fromLatin1("2012-12-31T24:00:00")
2315         << Qt::ISODate << QDateTime(QDate(2013, 1, 1), QTime(0, 0), Qt::LocalTime);
2316     QTest::newRow("ISO 24:00, fract ms") << QString::fromLatin1("2012-01-01T24:00:00.000")
2317         << Qt::ISODate << QDateTime(QDate(2012, 1, 2), QTime(0, 0), Qt::LocalTime);
2318     QTest::newRow("ISO 24:00 end of year, fract ms") << QString::fromLatin1("2012-12-31T24:00:00.000")
2319         << Qt::ISODate << QDateTime(QDate(2013, 1, 1), QTime(0, 0), Qt::LocalTime);
2320     // Test fractional seconds.
2321     QTest::newRow("ISO .0 of a second (period)") << QString::fromLatin1("2012-01-01T08:00:00.0")
2322         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 0, 0), Qt::LocalTime);
2323     QTest::newRow("ISO .00 of a second (period)") << QString::fromLatin1("2012-01-01T08:00:00.00")
2324         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 0, 0), Qt::LocalTime);
2325     QTest::newRow("ISO .000 of a second (period)") << QString::fromLatin1("2012-01-01T08:00:00.000")
2326         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 0, 0), Qt::LocalTime);
2327     QTest::newRow("ISO .1 of a second (comma)") << QString::fromLatin1("2012-01-01T08:00:00,1")
2328         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 0, 100), Qt::LocalTime);
2329     QTest::newRow("ISO .99 of a second (comma)") << QString::fromLatin1("2012-01-01T08:00:00,99")
2330         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 0, 990), Qt::LocalTime);
2331     QTest::newRow("ISO .998 of a second (comma)") << QString::fromLatin1("2012-01-01T08:00:00,998")
2332         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 0, 998), Qt::LocalTime);
2333     QTest::newRow("ISO .999 of a second (comma)") << QString::fromLatin1("2012-01-01T08:00:00,999")
2334         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 0, 999), Qt::LocalTime);
2335     QTest::newRow("ISO .3335 of a second (comma)") << QString::fromLatin1("2012-01-01T08:00:00,3335")
2336         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 0, 334), Qt::LocalTime);
2337     QTest::newRow("ISO .333333 of a second (comma)") << QString::fromLatin1("2012-01-01T08:00:00,333333")
2338         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 0, 333), Qt::LocalTime);
2339     QTest::newRow("ISO .00009 of a second (period)") << QString::fromLatin1("2012-01-01T08:00:00.00009")
2340         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 0, 0), Qt::LocalTime);
2341     QTest::newRow("ISO no fract specified") << QString::fromLatin1("2012-01-01T08:00:00.")
2342         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 0, 0), Qt::LocalTime);
2343     // Test invalid characters (should ignore invalid characters at end of string).
2344     QTest::newRow("ISO invalid character at end") << QString::fromLatin1("2012-01-01T08:00:00!")
2345         << Qt::ISODate << QDateTime();
2346     QTest::newRow("ISO invalid character at front") << QString::fromLatin1("!2012-01-01T08:00:00")
2347         << Qt::ISODate << QDateTime();
2348     QTest::newRow("ISO invalid character both ends") << QString::fromLatin1("!2012-01-01T08:00:00!")
2349         << Qt::ISODate << QDateTime();
2350     QTest::newRow("ISO invalid character at front, 2 at back") << QString::fromLatin1("!2012-01-01T08:00:00..")
2351         << Qt::ISODate << QDateTime();
2352     QTest::newRow("ISO invalid character 2 at front") << QString::fromLatin1("!!2012-01-01T08:00:00")
2353         << Qt::ISODate << QDateTime();
2354     // Test fractional minutes.
2355     QTest::newRow("ISO .0 of a minute (period)") << QString::fromLatin1("2012-01-01T08:00.0")
2356         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 0, 0), Qt::LocalTime);
2357     QTest::newRow("ISO .8 of a minute (period)") << QString::fromLatin1("2012-01-01T08:00.8")
2358         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 48, 0), Qt::LocalTime);
2359     QTest::newRow("ISO .99999 of a minute (period)") << QString::fromLatin1("2012-01-01T08:00.99999")
2360         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 59, 999), Qt::LocalTime);
2361     QTest::newRow("ISO .0 of a minute (comma)") << QString::fromLatin1("2012-01-01T08:00,0")
2362         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 0, 0), Qt::LocalTime);
2363     QTest::newRow("ISO .8 of a minute (comma)") << QString::fromLatin1("2012-01-01T08:00,8")
2364         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 48, 0), Qt::LocalTime);
2365     QTest::newRow("ISO .99999 of a minute (comma)") << QString::fromLatin1("2012-01-01T08:00,99999")
2366         << Qt::ISODate << QDateTime(QDate(2012, 1, 1), QTime(8, 0, 59, 999), Qt::LocalTime);
2367     QTest::newRow("ISO empty") << QString::fromLatin1("") << Qt::ISODate << QDateTime();
2368     QTest::newRow("ISO short") << QString::fromLatin1("2017-07-01T") << Qt::ISODate << QDateTime();
2369     QTest::newRow("ISO zoned date")
2370         << QString::fromLatin1("2017-07-01Z") << Qt::ISODate << QDateTime();
2371     QTest::newRow("ISO zoned empty time")
2372         << QString::fromLatin1("2017-07-01TZ") << Qt::ISODate << QDateTime();
2373     QTest::newRow("ISO mis-punctuated")
2374         << QString::fromLatin1("2018/01/30 ") << Qt::ISODate << QDateTime();
2375 
2376     // Test Qt::RFC2822Date format (RFC 2822).
2377     QTest::newRow("RFC 2822 +0100") << QString::fromLatin1("13 Feb 1987 13:24:51 +0100")
2378         << Qt::RFC2822Date << QDateTime(QDate(1987, 2, 13), QTime(12, 24, 51), Qt::UTC);
2379     QTest::newRow("RFC 2822 after space +0100")
2380         << QString::fromLatin1(" 13 Feb 1987 13:24:51 +0100")
2381         << Qt::RFC2822Date << QDateTime(QDate(1987, 2, 13), QTime(12, 24, 51), Qt::UTC);
2382     QTest::newRow("RFC 2822 with day +0100") << QString::fromLatin1("Fri, 13 Feb 1987 13:24:51 +0100")
2383         << Qt::RFC2822Date << QDateTime(QDate(1987, 2, 13), QTime(12, 24, 51), Qt::UTC);
2384     QTest::newRow("RFC 2822 with day after space +0100")
2385         << QString::fromLatin1(" Fri, 13 Feb 1987 13:24:51 +0100")
2386         << Qt::RFC2822Date << QDateTime(QDate(1987, 2, 13), QTime(12, 24, 51), Qt::UTC);
2387     QTest::newRow("RFC 2822 -0100") << QString::fromLatin1("13 Feb 1987 13:24:51 -0100")
2388         << Qt::RFC2822Date << QDateTime(QDate(1987, 2, 13), QTime(14, 24, 51), Qt::UTC);
2389     QTest::newRow("RFC 2822 with day -0100") << QString::fromLatin1("Fri, 13 Feb 1987 13:24:51 -0100")
2390         << Qt::RFC2822Date << QDateTime(QDate(1987, 2, 13), QTime(14, 24, 51), Qt::UTC);
2391     QTest::newRow("RFC 2822 +0000") << QString::fromLatin1("01 Jan 1970 00:12:34 +0000")
2392         << Qt::RFC2822Date << QDateTime(QDate(1970, 1, 1), QTime(0, 12, 34), Qt::UTC);
2393     QTest::newRow("RFC 2822 with day +0000") << QString::fromLatin1("Thu, 01 Jan 1970 00:12:34 +0000")
2394         << Qt::RFC2822Date << QDateTime(QDate(1970, 1, 1), QTime(0, 12, 34), Qt::UTC);
2395     QTest::newRow("RFC 2822 +0000") << QString::fromLatin1("01 Jan 1970 00:12:34 +0000")
2396         << Qt::RFC2822Date << QDateTime(QDate(1970, 1, 1), QTime(0, 12, 34), Qt::UTC);
2397     QTest::newRow("RFC 2822 with day +0000") << QString::fromLatin1("Thu, 01 Jan 1970 00:12:34 +0000")
2398         << Qt::RFC2822Date << QDateTime(QDate(1970, 1, 1), QTime(0, 12, 34), Qt::UTC);
2399     QTest::newRow("RFC 2822 missing space before +0100")
2400         << QString::fromLatin1("Thu, 01 Jan 1970 00:12:34+0100") << Qt::RFC2822Date << QDateTime();
2401     // No timezone assume UTC
2402     QTest::newRow("RFC 2822 no timezone") << QString::fromLatin1("01 Jan 1970 00:12:34")
2403         << Qt::RFC2822Date << QDateTime(QDate(1970, 1, 1), QTime(0, 12, 34), Qt::UTC);
2404     // No time specified
2405     QTest::newRow("RFC 2822 date only") << QString::fromLatin1("01 Nov 2002")
2406         << Qt::RFC2822Date << QDateTime();
2407     QTest::newRow("RFC 2822 with day date only") << QString::fromLatin1("Fri, 01 Nov 2002")
2408         << Qt::RFC2822Date << QDateTime();
2409     // Test invalid month, day, year
2410     QTest::newRow("RFC 2822 invalid month name") << QString::fromLatin1("13 Fev 1987 13:24:51 +0100")
2411         << Qt::RFC2822Date << QDateTime();
2412     QTest::newRow("RFC 2822 invalid day") << QString::fromLatin1("36 Fev 1987 13:24:51 +0100")
2413         << Qt::RFC2822Date << QDateTime();
2414     QTest::newRow("RFC 2822 invalid year") << QString::fromLatin1("13 Fev 0000 13:24:51 +0100")
2415         << Qt::RFC2822Date << QDateTime();
2416     // Test invalid characters.
2417     QTest::newRow("RFC 2822 invalid character at end")
2418         << QString::fromLatin1("01 Jan 2012 08:00:00 +0100!")
2419         << Qt::RFC2822Date << QDateTime();
2420     QTest::newRow("RFC 2822 invalid character at front")
2421         << QString::fromLatin1("!01 Jan 2012 08:00:00 +0100")
2422         << Qt::RFC2822Date << QDateTime();
2423     QTest::newRow("RFC 2822 invalid character both ends")
2424         << QString::fromLatin1("!01 Jan 2012 08:00:00 +0100!")
2425         << Qt::RFC2822Date << QDateTime();
2426     QTest::newRow("RFC 2822 invalid character at front, 2 at back")
2427         << QString::fromLatin1("!01 Jan 2012 08:00:00 +0100..")
2428         << Qt::RFC2822Date << QDateTime();
2429     QTest::newRow("RFC 2822 invalid character 2 at front")
2430         << QString::fromLatin1("!!01 Jan 2012 08:00:00 +0100")
2431         << Qt::RFC2822Date << QDateTime();
2432     // The common date text used by the "invalid character" tests, just to be
2433     // sure *it's* not what's invalid:
2434     QTest::newRow("RFC 2822 (not invalid)")
2435         << QString::fromLatin1("01 Jan 2012 08:00:00 +0100")
2436         << Qt::RFC2822Date << QDateTime(QDate(2012, 1, 1), QTime(7, 0), Qt::UTC);
2437 
2438     // Test Qt::RFC2822Date format (RFC 850 and 1036, permissive).
2439     QTest::newRow("RFC 850 and 1036 +0100") << QString::fromLatin1("Fri Feb 13 13:24:51 1987 +0100")
2440         << Qt::RFC2822Date << QDateTime(QDate(1987, 2, 13), QTime(12, 24, 51), Qt::UTC);
2441     QTest::newRow("RFC 1036 after space +0100")
2442         << QString::fromLatin1(" Fri Feb 13 13:24:51 1987 +0100")
2443         << Qt::RFC2822Date << QDateTime(QDate(1987, 2, 13), QTime(12, 24, 51), Qt::UTC);
2444     QTest::newRow("RFC 850 and 1036 -0100") << QString::fromLatin1("Fri Feb 13 13:24:51 1987 -0100")
2445         << Qt::RFC2822Date << QDateTime(QDate(1987, 2, 13), QTime(14, 24, 51), Qt::UTC);
2446     QTest::newRow("RFC 850 and 1036 +0000") << QString::fromLatin1("Thu Jan 01 00:12:34 1970 +0000")
2447         << Qt::RFC2822Date << QDateTime(QDate(1970, 1, 1), QTime(0, 12, 34), Qt::UTC);
2448     QTest::newRow("RFC 850 and 1036 +0000") << QString::fromLatin1("Thu Jan 01 00:12:34 1970 +0000")
2449         << Qt::RFC2822Date << QDateTime(QDate(1970, 1, 1), QTime(0, 12, 34), Qt::UTC);
2450     // No timezone assume UTC
2451     QTest::newRow("RFC 850 and 1036 no timezone") << QString::fromLatin1("Thu Jan 01 00:12:34 1970")
2452         << Qt::RFC2822Date << QDateTime(QDate(1970, 1, 1), QTime(0, 12, 34), Qt::UTC);
2453     // No time specified
2454     QTest::newRow("RFC 850 and 1036 date only")
2455         << QString::fromLatin1("Fri Nov 01 2002")
2456         << Qt::RFC2822Date << QDateTime();
2457     // Test invalid characters.
2458     QTest::newRow("RFC 850 and 1036 invalid character at end")
2459         << QString::fromLatin1("Sun Jan 01 08:00:00 2012 +0100!")
2460         << Qt::RFC2822Date << QDateTime();
2461     QTest::newRow("RFC 850 and 1036 invalid character at front")
2462         << QString::fromLatin1("!Sun Jan 01 08:00:00 2012 +0100")
2463         << Qt::RFC2822Date << QDateTime();
2464     QTest::newRow("RFC 850 and 1036 invalid character both ends")
2465         << QString::fromLatin1("!Sun Jan 01 08:00:00 2012 +0100!")
2466         << Qt::RFC2822Date << QDateTime();
2467     QTest::newRow("RFC 850 and 1036 invalid character at front, 2 at back")
2468         << QString::fromLatin1("!Sun Jan 01 08:00:00 2012 +0100..")
2469         << Qt::RFC2822Date << QDateTime();
2470     QTest::newRow("RFC 850 and 1036 invalid character 2 at front")
2471         << QString::fromLatin1("!!Sun Jan 01 08:00:00 2012 +0100")
2472         << Qt::RFC2822Date << QDateTime();
2473     // Again, check the text in the "invalid character" tests isn't the source of invalidity:
2474     QTest::newRow("RFC 850 and 1036 (not invalid)")
2475         << QString::fromLatin1("Sun Jan 01 08:00:00 2012 +0100")
2476         << Qt::RFC2822Date << QDateTime(QDate(2012, 1, 1), QTime(7, 0), Qt::UTC);
2477 
2478     QTest::newRow("RFC empty") << QString::fromLatin1("") << Qt::RFC2822Date << QDateTime();
2479 }
2480 
2481 void tst_QDateTime::fromStringDateFormat()
2482 {
2483     QFETCH(QString, dateTimeStr);
2484     QFETCH(Qt::DateFormat, dateFormat);
2485     QFETCH(QDateTime, expected);
2486 
2487     QDateTime dateTime = QDateTime::fromString(dateTimeStr, dateFormat);
2488     QCOMPARE(dateTime, expected);
2489 }
2490 
2491 # if QT_CONFIG(datetimeparser)
2492 void tst_QDateTime::fromStringStringFormat_data()
2493 {
2494     QTest::addColumn<QString>("string");
2495     QTest::addColumn<QString>("format");
2496     QTest::addColumn<QDateTime>("expected");
2497 
2498     const QDate defDate(1900, 1, 1);
2499     QTest::newRow("data0")
2500         << QString("101010") << QString("dMyy") << QDate(1910, 10, 10).startOfDay();
2501     QTest::newRow("data1") << QString("1020") << QString("sss") << QDateTime();
2502     QTest::newRow("data2")
2503         << QString("1010") << QString("sss") << QDateTime(defDate, QTime(0, 0, 10));
2504     QTest::newRow("data3") << QString("10hello20") << QString("ss'hello'ss") << QDateTime();
2505     QTest::newRow("data4") << QString("10") << QString("''") << QDateTime();
2506     QTest::newRow("data5") << QString("10") << QString("'") << QDateTime();
2507     QTest::newRow("data6") << QString("pm") << QString("ap") << QDateTime(defDate, QTime(12, 0));
2508     QTest::newRow("data7") << QString("foo") << QString("ap") << QDateTime();
2509     // Day non-conflict should not hide earlier year conflict (1963-03-01 was a
2510     // Friday; asking for Thursday moves this, without conflict, to the 7th):
2511     QTest::newRow("data8")
2512         << QString("77 03 1963 Thu") << QString("yy MM yyyy ddd") << QDateTime();
2513     QTest::newRow("data9")
2514         << QString("101010") << QString("dMyy") << QDate(1910, 10, 10).startOfDay();
2515     QTest::newRow("data10")
2516         << QString("101010") << QString("dMyy") << QDate(1910, 10, 10).startOfDay();
2517     QTest::newRow("data11")
2518         << QString("10 Oct 10") << QString("dd MMM yy") << QDate(1910, 10, 10).startOfDay();
2519     QTest::newRow("data12")
2520         << QString("Fri December 3 2004") << QString("ddd MMMM d yyyy")
2521         << QDate(2004, 12, 3).startOfDay();
2522     QTest::newRow("data13") << QString("30.02.2004") << QString("dd.MM.yyyy") << QDateTime();
2523     QTest::newRow("data14") << QString("32.01.2004") << QString("dd.MM.yyyy") << QDateTime();
2524     QTest::newRow("data15")
2525         << QString("Thu January 2004") << QString("ddd MMMM yyyy")
2526         << QDate(2004, 1, 1).startOfDay();
2527     QTest::newRow("data16") << QString("2005-06-28T07:57:30.001Z")
2528                             << QString("yyyy-MM-ddThh:mm:ss.zt")
2529                             << QDateTime(QDate(2005, 06, 28), QTime(07, 57, 30, 1), Qt::UTC);
2530     QTest::newRow("utc-time-spec-as:UTC+0")
2531         << QString("2005-06-28T07:57:30.001UTC+0") << QString("yyyy-MM-ddThh:mm:ss.zt")
2532         << QDateTime(QDate(2005, 6, 28), QTime(7, 57, 30, 1), Qt::UTC);
2533     QTest::newRow("utc-time-spec-as:UTC-0")
2534         << QString("2005-06-28T07:57:30.001UTC-0") << QString("yyyy-MM-ddThh:mm:ss.zt")
2535         << QDateTime(QDate(2005, 6, 28), QTime(7, 57, 30, 1), Qt::UTC);
2536     QTest::newRow("offset-from-utc:UTC+1")
2537         << QString("2001-09-13T07:33:01.001 UTC+1") << QString("yyyy-MM-ddThh:mm:ss.z t")
2538         << QDateTime(QDate(2001, 9, 13), QTime(7, 33, 1, 1), Qt::OffsetFromUTC, 3600);
2539     QTest::newRow("offset-from-utc:UTC-11:01")
2540         << QString("2008-09-13T07:33:01.001 UTC-11:01") << QString("yyyy-MM-ddThh:mm:ss.z t")
2541         << QDateTime(QDate(2008, 9, 13), QTime(7, 33, 1, 1), Qt::OffsetFromUTC, -39660);
2542     QTest::newRow("offset-from-utc:UTC+02:57")
2543         << QString("2001-09-15T09:33:01.001UTC+02:57") << QString("yyyy-MM-ddThh:mm:ss.zt")
2544         << QDateTime(QDate(2001, 9, 15), QTime(9, 33, 1, 1), Qt::OffsetFromUTC, 10620);
2545     QTest::newRow("offset-from-utc:-03:00")  // RFC 3339 offset format
2546         << QString("2001-09-15T09:33:01.001-03:00") << QString("yyyy-MM-ddThh:mm:ss.zt")
2547         << QDateTime(QDate(2001, 9, 15), QTime(9, 33, 1, 1), Qt::OffsetFromUTC, -10800);
2548     QTest::newRow("offset-from-utc:+0205")  // ISO 8601 basic offset format
2549         << QString("2001-09-15T09:33:01.001+0205") << QString("yyyy-MM-ddThh:mm:ss.zt")
2550         << QDateTime(QDate(2001, 9, 15), QTime(9, 33, 1, 1), Qt::OffsetFromUTC, 7500);
2551     QTest::newRow("offset-from-utc:-0401")  // ISO 8601 basic offset format
2552         << QString("2001-09-15T09:33:01.001-0401") << QString("yyyy-MM-ddThh:mm:ss.zt")
2553         << QDateTime(QDate(2001, 9, 15), QTime(9, 33, 1, 1), Qt::OffsetFromUTC, -14460);
2554     QTest::newRow("offset-from-utc:+10")  // ISO 8601 basic (hour-only) offset format
2555         << QString("2001-09-15T09:33:01.001 +10") << QString("yyyy-MM-ddThh:mm:ss.z t")
2556         << QDateTime(QDate(2001, 9, 15), QTime(9, 33, 1, 1), Qt::OffsetFromUTC, 36000);
2557     QTest::newRow("offset-from-utc:UTC+10:00")  // Time-spec specifier at the beginning
2558         << QString("UTC+10:00 2008-10-13T07:33") << QString("t yyyy-MM-ddThh:mm")
2559         << QDateTime(QDate(2008, 10, 13), QTime(7, 33), Qt::OffsetFromUTC, 36000);
2560     QTest::newRow("offset-from-utc:UTC-03:30")  // Time-spec specifier in the middle
2561         << QString("2008-10-13 UTC-03:30 11.50") << QString("yyyy-MM-dd t hh.mm")
2562         << QDateTime(QDate(2008, 10, 13), QTime(11, 50), Qt::OffsetFromUTC, -12600);
2563     QTest::newRow("offset-from-utc:UTC-2")  // Time-spec specifier joined with text/time
2564         << QString("2008-10-13 UTC-2Z11.50") << QString("yyyy-MM-dd tZhh.mm")
2565         << QDateTime(QDate(2008, 10, 13), QTime(11, 50), Qt::OffsetFromUTC, -7200);
2566     QTest::newRow("offset-from-utc:followed-by-colon")
2567         << QString("2008-10-13 UTC-0100:11.50") << QString("yyyy-MM-dd t:hh.mm")
2568         << QDateTime(QDate(2008, 10, 13), QTime(11, 50), Qt::OffsetFromUTC, -3600);
2569     QTest::newRow("offset-from-utc:late-colon")
2570         << QString("2008-10-13 UTC+05T:11.50") << QString("yyyy-MM-dd tT:hh.mm")
2571         << QDateTime(QDate(2008, 10, 13), QTime(11, 50), Qt::OffsetFromUTC, 18000);
2572     QTest::newRow("offset-from-utc:merged-with-time")
2573         << QString("2008-10-13 UTC+010011.50") << QString("yyyy-MM-dd thh.mm")
2574         << QDateTime(QDate(2008, 10, 13), QTime(11, 50), Qt::OffsetFromUTC, 3600);
2575     QTest::newRow("offset-from-utc:double-colon-delimiter")
2576         << QString("2008-10-13 UTC+12::11.50") << QString("yyyy-MM-dd t::hh.mm")
2577         << QDateTime(QDate(2008, 10, 13), QTime(11, 50), Qt::OffsetFromUTC, 43200);
2578     QTest::newRow("offset-from-utc:3-digit-with-colon")
2579         << QString("2008-10-13 -4:30 11.50") << QString("yyyy-MM-dd t hh.mm")
2580         << QDateTime(QDate(2008, 10, 13), QTime(11, 50), Qt::OffsetFromUTC, -16200);
2581     QTest::newRow("offset-from-utc:merged-with-time")
2582         << QString("2008-10-13 UTC+010011.50") << QString("yyyy-MM-dd thh.mm")
2583         << QDateTime(QDate(2008, 10, 13), QTime(11, 50), Qt::OffsetFromUTC, 3600);
2584     QTest::newRow("offset-from-utc:with-colon-merged-with-time")
2585         << QString("2008-10-13 UTC+01:0011.50") << QString("yyyy-MM-dd thh.mm")
2586         << QDateTime(QDate(2008, 10, 13), QTime(11, 50), Qt::OffsetFromUTC, 3600);
2587     QTest::newRow("invalid-offset-from-utc:out-of-range")
2588         << QString("2001-09-15T09:33:01.001-50") << QString("yyyy-MM-ddThh:mm:ss.zt")
2589         << QDateTime();
2590     QTest::newRow("invalid-offset-from-utc:single-digit-format")
2591         << QString("2001-09-15T09:33:01.001+5") << QString("yyyy-MM-ddThh:mm:ss.zt")
2592         << QDateTime();
2593     QTest::newRow("invalid-offset-from-utc:three-digit-format")
2594         << QString("2001-09-15T09:33:01.001-701") << QString("yyyy-MM-ddThh:mm:ss.zt")
2595         << QDateTime();
2596     QTest::newRow("invalid-offset-from-utc:three-digit-minutes")
2597         << QString("2001-09-15T09:33:01.001+11:570") << QString("yyyy-MM-ddThh:mm:ss.zt")
2598         << QDateTime();
2599     QTest::newRow("invalid-offset-from-utc:single-digit-minutes")
2600         << QString("2001-09-15T09:33:01.001+11:5") << QString("yyyy-MM-ddThh:mm:ss.zt")
2601         << QDateTime();
2602     QTest::newRow("invalid-offset-from-utc:invalid-sign-symbol")
2603         << QString("2001-09-15T09:33:01.001 ~11:30") << QString("yyyy-MM-ddThh:mm:ss.z t")
2604         << QDateTime();
2605     QTest::newRow("invalid-offset-from-utc:symbol-in-hours")
2606         << QString("2001-09-15T09:33:01.001 UTC+o8:30") << QString("yyyy-MM-ddThh:mm:ss.z t")
2607         << QDateTime();
2608     QTest::newRow("invalid-offset-from-utc:symbol-in-minutes")
2609         << QString("2001-09-15T09:33:01.001 UTC+08:3i") << QString("yyyy-MM-ddThh:mm:ss.z t")
2610         << QDateTime();
2611     QTest::newRow("invalid-offset-from-utc:UTC+123")  // Invalid offset (UTC and 3 digit format)
2612         << QString("2001-09-15T09:33:01.001 UTC+123") << QString("yyyy-MM-ddThh:mm:ss.z t")
2613         << QDateTime();
2614     QTest::newRow("invalid-offset-from-utc:UTC+00005")  // Invalid offset with leading zeroes
2615         << QString("2001-09-15T09:33:01.001 UTC+00005") << QString("yyyy-MM-ddThh:mm:ss.z t")
2616         << QDateTime();
2617     QTest::newRow("invalid-offset-from-utc:three-digit-with-colon-delimiter")
2618         << QString("2008-10-13 +123:11.50") << QString("yyyy-MM-dd t:hh.mm")
2619         << QDateTime();
2620     QTest::newRow("invalid-offset-from-utc:double-colon-as-part-of-offset")
2621         << QString("2008-10-13 UTC+12::11.50") << QString("yyyy-MM-dd thh.mm")
2622         << QDateTime();
2623     QTest::newRow("invalid-offset-from-utc:single-colon-as-part-of-offset")
2624         << QString("2008-10-13 UTC+12::11.50") << QString("yyyy-MM-dd t:hh.mm")
2625         << QDateTime();
2626     QTest::newRow("invalid-offset-from-utc:starts-with-colon")
2627         << QString("2008-10-13 UTC+:59 11.50") << QString("yyyy-MM-dd t hh.mm")
2628         << QDateTime();
2629     QTest::newRow("invalid-offset-from-utc:empty-offset")
2630         << QString("2008-10-13 UTC+ 11.50") << QString("yyyy-MM-dd t hh.mm")
2631         << QDateTime();
2632     QTest::newRow("invalid-offset-from-utc:time-section-instead-of-offset")
2633         << QString("2008-10-13 UTC+11.50") << QString("yyyy-MM-dd thh.mm")
2634         << QDateTime();
2635     QTest::newRow("invalid-offset-from-utc:missing-minutes-if-colon")
2636         << QString("2008-10-13 +05: 11.50") << QString("yyyy-MM-dd t hh.mm")
2637         << QDateTime();
2638     QTest::newRow("invalid-offset-from-utc:1-digit-minutes-if-colon")
2639         << QString("2008-10-13 UTC+05:1 11.50") << QString("yyyy-MM-dd t hh.mm")
2640         << QDateTime();
2641     QTest::newRow("invalid-time-spec:random-symbol")
2642         << QString("2001-09-15T09:33:01.001 $") << QString("yyyy-MM-ddThh:mm:ss.z t")
2643         << QDateTime();
2644     QTest::newRow("invalid-time-spec:random-digit")
2645         << QString("2001-09-15T09:33:01.001 1") << QString("yyyy-MM-ddThh:mm:ss.z t")
2646         << QDateTime();
2647     QTest::newRow("invalid-offset-from-utc:merged-with-time")
2648         << QString("2008-10-13 UTC+0111.50") << QString("yyyy-MM-dd thh.mm")
2649         << QDateTime();
2650     QTest::newRow("invalid-offset-from-utc:with-colon-3-digit-merged-with-time")
2651         << QString("2008-10-13 UTC+01:011.50") << QString("yyyy-MM-dd thh.mm")
2652         << QDateTime();
2653     QTest::newRow("invalid-time-spec:empty")
2654         << QString("2001-09-15T09:33:01.001 ") << QString("yyyy-MM-ddThh:mm:ss.z t")
2655         << QDateTime();
2656 #if QT_CONFIG(timezone)
2657     QTimeZone southBrazil("America/Sao_Paulo");
2658     if (southBrazil.isValid()) {
2659         QTest::newRow("spring-forward-midnight")
2660             << QString("2008-10-19 23:45.678 America/Sao_Paulo") << QString("yyyy-MM-dd mm:ss.zzz t")
2661             // That's in the hour skipped - expect the matching time after the spring-forward, in DST:
2662             << QDateTime(QDate(2008, 10, 19), QTime(1, 23, 45, 678), southBrazil);
2663     }
2664 #endif
2665     QTest::newRow("late") << QString("9999-12-31T23:59:59.999Z")
2666                           << QString("yyyy-MM-ddThh:mm:ss.zZ")
2667                           << QDateTime(QDate(9999, 12, 31), QTime(23, 59, 59, 999));
2668     // Separators match /([^aAdhHMmstyz]*)/
2669     QTest::newRow("oddly-separated") // To show broken-separator's format is valid.
2670         << QStringLiteral("2018 wilful long working block relief 12-19T21:09 cruel blurb encore flux")
2671         << QStringLiteral("yyyy wilful long working block relief MM-ddThh:mm cruel blurb encore flux")
2672         << QDateTime(QDate(2018, 12, 19), QTime(21, 9));
2673     QTest::newRow("broken-separator")
2674         << QStringLiteral("2018 wilful")
2675         << QStringLiteral("yyyy wilful long working block relief MM-ddThh:mm cruel blurb encore flux")
2676         << QDateTime();
2677     QTest::newRow("broken-terminator")
2678         << QStringLiteral("2018 wilful long working block relief 12-19T21:09 cruel")
2679         << QStringLiteral("yyyy wilful long working block relief MM-ddThh:mm cruel blurb encore flux")
2680         << QDateTime();
2681 }
2682 
2683 void tst_QDateTime::fromStringStringFormat()
2684 {
2685     QFETCH(QString, string);
2686     QFETCH(QString, format);
2687     QFETCH(QDateTime, expected);
2688 
2689     QDateTime dt = QDateTime::fromString(string, format);
2690 
2691     QCOMPARE(dt, expected);
2692     if (expected.isValid()) {
2693         QCOMPARE(dt.timeSpec(), expected.timeSpec());
2694 #if QT_CONFIG(timezone)
2695         if (expected.timeSpec() == Qt::TimeZone)
2696             QCOMPARE(dt.timeZone(), expected.timeZone());
2697 #endif
2698         // OffsetFromUTC needs an offset check - we may as well do it for all:
2699         QCOMPARE(dt.offsetFromUtc(), expected.offsetFromUtc());
2700     }
2701 }
2702 
2703 void tst_QDateTime::fromStringStringFormat_localTimeZone_data()
2704 {
2705     QTest::addColumn<QByteArray>("localTimeZone");
2706     QTest::addColumn<QString>("string");
2707     QTest::addColumn<QString>("format");
2708     QTest::addColumn<QDateTime>("expected");
2709 
2710 #if QT_CONFIG(timezone)
2711     QTimeZone etcGmtWithOffset("Etc/GMT+3");
2712     if (etcGmtWithOffset.isValid()) {
2713         QTest::newRow("local-timezone-with-offset:Etc/GMT+3") << QByteArrayLiteral("GMT")
2714             << QString("2008-10-13 Etc/GMT+3 11.50") << QString("yyyy-MM-dd t hh.mm")
2715             << QDateTime(QDate(2008, 10, 13), QTime(11, 50), etcGmtWithOffset);
2716     }
2717     QTimeZone gmtWithOffset("GMT-2");
2718     if (gmtWithOffset.isValid()) {
2719         QTest::newRow("local-timezone-with-offset:GMT-2") << QByteArrayLiteral("GMT")
2720             << QString("2008-10-13 GMT-2 11.50") << QString("yyyy-MM-dd t hh.mm")
2721             << QDateTime(QDate(2008, 10, 13), QTime(11, 50), gmtWithOffset);
2722     }
2723     QTimeZone gmt("GMT");
2724     if (gmt.isValid()) {
2725         QTest::newRow("local-timezone-with-offset:GMT") << QByteArrayLiteral("GMT")
2726             << QString("2008-10-13 GMT 11.50") << QString("yyyy-MM-dd t hh.mm")
2727             << QDateTime(QDate(2008, 10, 13), QTime(11, 50), gmt);
2728     }
2729 #endif
2730 }
2731 
2732 void tst_QDateTime::fromStringStringFormat_localTimeZone()
2733 {
2734     QFETCH(QByteArray, localTimeZone);
2735     TimeZoneRollback useZone(localTimeZone);  // enforce test's time zone
2736     fromStringStringFormat();  // call basic fromStringStringFormat test
2737 }
2738 # endif // datetimeparser
2739 #endif // datestring
2740 
2741 void tst_QDateTime::offsetFromUtc()
2742 {
2743     /* Check default value. */
2744     QCOMPARE(QDateTime().offsetFromUtc(), 0);
2745 
2746     // Offset constructor
2747     QDateTime dt1(QDate(2013, 1, 1), QTime(1, 0), Qt::OffsetFromUTC, 60 * 60);
2748     QCOMPARE(dt1.offsetFromUtc(), 60 * 60);
2749 #if QT_CONFIG(timezone)
2750     QVERIFY(dt1.timeZone().isValid());
2751 #endif
2752     dt1 = QDateTime(QDate(2013, 1, 1), QTime(1, 0), Qt::OffsetFromUTC, -60 * 60);
2753     QCOMPARE(dt1.offsetFromUtc(), -60 * 60);
2754 
2755     // UTC should be 0 offset
2756     QDateTime dt2(QDate(2013, 1, 1), QTime(0, 0), Qt::UTC);
2757     QCOMPARE(dt2.offsetFromUtc(), 0);
2758 
2759     // LocalTime should vary
2760     if (zoneIsCET) {
2761         // Time definitely in Standard Time so 1 hour ahead
2762         QDateTime dt3(QDate(2013, 1, 1), QTime(0, 0), Qt::LocalTime);
2763         QCOMPARE(dt3.offsetFromUtc(), 1 * 60 * 60);
2764         // Time definitely in Daylight Time so 2 hours ahead
2765         QDateTime dt4(QDate(2013, 6, 1), QTime(0, 0), Qt::LocalTime);
2766         QCOMPARE(dt4.offsetFromUtc(), 2 * 60 * 60);
2767      } else {
2768          QSKIP("You must test using Central European (CET/CEST) time zone, e.g. TZ=Europe/Oslo");
2769      }
2770 
2771 #if QT_CONFIG(timezone)
2772     QDateTime dt5(QDate(2013, 1, 1), QTime(0, 0), QTimeZone("Pacific/Auckland"));
2773     QCOMPARE(dt5.offsetFromUtc(), 46800);
2774 
2775     QDateTime dt6(QDate(2013, 6, 1), QTime(0, 0), QTimeZone("Pacific/Auckland"));
2776     QCOMPARE(dt6.offsetFromUtc(), 43200);
2777 #endif
2778 }
2779 
2780 void tst_QDateTime::setOffsetFromUtc()
2781 {
2782     /* Basic tests. */
2783     {
2784         QDateTime dt(QDateTime::currentDateTime());
2785         dt.setTimeSpec(Qt::LocalTime);
2786 
2787         dt.setOffsetFromUtc(0);
2788         QCOMPARE(dt.offsetFromUtc(), 0);
2789         QCOMPARE(dt.timeSpec(), Qt::UTC);
2790 
2791         dt.setOffsetFromUtc(-100);
2792         QCOMPARE(dt.offsetFromUtc(), -100);
2793         QCOMPARE(dt.timeSpec(), Qt::OffsetFromUTC);
2794     }
2795 
2796     /* Test detaching. */
2797     {
2798         QDateTime dt(QDateTime::currentDateTime());
2799         QDateTime dt2(dt);
2800         int offset2 = dt2.offsetFromUtc();
2801 
2802         dt.setOffsetFromUtc(501);
2803 
2804         QCOMPARE(dt.offsetFromUtc(), 501);
2805         QCOMPARE(dt2.offsetFromUtc(), offset2);
2806     }
2807 
2808     /* Check copying. */
2809     {
2810         QDateTime dt(QDateTime::currentDateTime());
2811         dt.setOffsetFromUtc(502);
2812         QCOMPARE(dt.offsetFromUtc(), 502);
2813 
2814         QDateTime dt2(dt);
2815         QCOMPARE(dt2.offsetFromUtc(), 502);
2816     }
2817 
2818     /* Check assignment. */
2819     {
2820         QDateTime dt(QDateTime::currentDateTime());
2821         dt.setOffsetFromUtc(502);
2822         QDateTime dt2;
2823         dt2 = dt;
2824 
2825         QCOMPARE(dt2.offsetFromUtc(), 502);
2826     }
2827 
2828     // Check spec persists
2829     QDateTime dt1(QDate(2013, 1, 1), QTime(0, 0), Qt::OffsetFromUTC, 60 * 60);
2830     dt1.setMSecsSinceEpoch(123456789);
2831     QCOMPARE(dt1.timeSpec(), Qt::OffsetFromUTC);
2832     QCOMPARE(dt1.offsetFromUtc(), 60 * 60);
2833     dt1.setSecsSinceEpoch(123456789);
2834     QCOMPARE(dt1.timeSpec(), Qt::OffsetFromUTC);
2835     QCOMPARE(dt1.offsetFromUtc(), 60 * 60);
2836 
2837     // Check datastream serialises the offset seconds
2838     QByteArray tmp;
2839     {
2840         QDataStream ds(&tmp, QIODevice::WriteOnly);
2841         ds << dt1;
2842     }
2843     QDateTime dt2;
2844     {
2845         QDataStream ds(&tmp, QIODevice::ReadOnly);
2846         ds >> dt2;
2847     }
2848     QCOMPARE(dt2, dt1);
2849     QCOMPARE(dt2.timeSpec(), Qt::OffsetFromUTC);
2850     QCOMPARE(dt2.offsetFromUtc(), 60 * 60);
2851 }
2852 
2853 void tst_QDateTime::toOffsetFromUtc()
2854 {
2855     QDateTime dt1(QDate(2013, 1, 1), QTime(0, 0), Qt::UTC);
2856 
2857     QDateTime dt2 = dt1.toOffsetFromUtc(60 * 60);
2858     QCOMPARE(dt2, dt1);
2859     QCOMPARE(dt2.timeSpec(), Qt::OffsetFromUTC);
2860     QCOMPARE(dt2.date(), QDate(2013, 1, 1));
2861     QCOMPARE(dt2.time(), QTime(1, 0));
2862 
2863     dt2 = dt1.toOffsetFromUtc(0);
2864     QCOMPARE(dt2, dt1);
2865     QCOMPARE(dt2.timeSpec(), Qt::UTC);
2866     QCOMPARE(dt2.date(), QDate(2013, 1, 1));
2867     QCOMPARE(dt2.time(), QTime(0, 0));
2868 
2869     dt2 = dt1.toTimeSpec(Qt::OffsetFromUTC);
2870     QCOMPARE(dt2, dt1);
2871     QCOMPARE(dt2.timeSpec(), Qt::UTC);
2872     QCOMPARE(dt2.date(), QDate(2013, 1, 1));
2873     QCOMPARE(dt2.time(), QTime(0, 0));
2874 }
2875 
2876 void tst_QDateTime::zoneAtTime_data()
2877 {
2878     QTest::addColumn<QByteArray>("ianaID");
2879     QTest::addColumn<QDate>("date");
2880     QTest::addColumn<int>("offset");
2881 #define ADDROW(name, zone, date, offset) \
2882     QTest::newRow(name) << QByteArray(zone) << (date) << (offset)
2883 
2884     // Check DST handling around epoch:
2885     {
2886         QDate epoch(1970, 1, 1);
2887         ADDROW("epoch:UTC", "UTC", epoch, 0);
2888         // Paris and Berlin skipped DST around 1970; but Rome used it.
2889         ADDROW("epoch:CET", "Europe/Rome", epoch, 3600);
2890         ADDROW("epoch:PST", "America/Vancouver", epoch, -8 * 3600);
2891         ADDROW("epoch:EST", "America/New_York", epoch, -5 * 3600);
2892     }
2893     {
2894         // QDateTime deliberately ignores DST before the epoch.
2895         QDate summer69(1969, 8, 15); // Woodstock started
2896         ADDROW("summer69:UTC", "UTC", summer69, 0);
2897         ADDROW("summer69:CET", "Europe/Rome", summer69, 3600);
2898         ADDROW("summer69:PST", "America/Vancouver", summer69, -8 * 3600);
2899         ADDROW("summer69:EST", "America/New_York", summer69, -5 * 3600);
2900     }
2901     {
2902         // ... but takes it into account after:
2903         QDate summer70(1970, 8, 26); // Isle of Wight festival
2904         ADDROW("summer70:UTC", "UTC", summer70, 0);
2905         ADDROW("summer70:CET", "Europe/Rome", summer70, 2 * 3600);
2906         ADDROW("summer70:PST", "America/Vancouver", summer70, -7 * 3600);
2907         ADDROW("summer70:EST", "America/New_York", summer70, -4 * 3600);
2908     }
2909 
2910 #ifdef Q_OS_ANDROID // QTBUG-68835; gets offset 0 for the affected tests.
2911 # define NONANDROIDROW(name, zone, date, offset)
2912 #else
2913 # define NONANDROIDROW(name, zone, date, offset) ADDROW(name, zone, date, offset)
2914 #endif
2915 
2916 #ifndef Q_OS_WIN
2917     // Bracket a few noteworthy transitions:
2918     ADDROW("before:ACWST", "Australia/Eucla", QDate(1974, 10, 26), 31500); // 8:45
2919     NONANDROIDROW("after:ACWST", "Australia/Eucla", QDate(1974, 10, 27), 35100); // 9:45
2920     NONANDROIDROW("before:NPT", "Asia/Kathmandu", QDate(1985, 12, 31), 19800); // 5:30
2921     ADDROW("after:NPT", "Asia/Kathmandu", QDate(1986, 1, 1), 20700); // 5:45
2922     // The two that have skipped a day (each):
2923     NONANDROIDROW("before:LINT", "Pacific/Kiritimati", QDate(1994, 12, 30), -36000);
2924     ADDROW("after:LINT", "Pacific/Kiritimati", QDate(1995, 1, 2), 14 * 3600);
2925     ADDROW("after:WST", "Pacific/Apia", QDate(2011, 12, 31), 14 * 3600);
2926 #endif // MS lacks ACWST, NPT; doesn't grok date-line crossings; and Windows 7 lacks LINT.
2927     ADDROW("before:WST", "Pacific/Apia", QDate(2011, 12, 29), -36000);
2928 #undef ADDROW
2929 }
2930 
2931 void tst_QDateTime::zoneAtTime()
2932 {
2933 #if QT_CONFIG(timezone)
2934     QFETCH(QByteArray, ianaID);
2935     QFETCH(QDate, date);
2936     QFETCH(int, offset);
2937     const QTime noon(12, 0);
2938 
2939     QTimeZone zone(ianaID);
2940     QVERIFY(zone.isValid());
2941     QCOMPARE(QDateTime(date, noon, zone).offsetFromUtc(), offset);
2942     if (date.year() < 1970)
2943         QCOMPARE(zone.standardTimeOffset(QDateTime(date, noon, zone)), offset);
2944     else // zone.offsetFromUtc *does* include DST, even before epoch
2945         QCOMPARE(zone.offsetFromUtc(QDateTime(date, noon, zone)), offset);
2946 #else
2947     QSKIP("Needs timezone feature enabled");
2948 #endif
2949 }
2950 
2951 void tst_QDateTime::timeZoneAbbreviation()
2952 {
2953     QDateTime dt1(QDate(2013, 1, 1), QTime(1, 0), Qt::OffsetFromUTC, 60 * 60);
2954     QCOMPARE(dt1.timeZoneAbbreviation(), QString("UTC+01:00"));
2955     QDateTime dt2(QDate(2013, 1, 1), QTime(1, 0), Qt::OffsetFromUTC, -60 * 60);
2956     QCOMPARE(dt2.timeZoneAbbreviation(), QString("UTC-01:00"));
2957 
2958     QDateTime dt3(QDate(2013, 1, 1), QTime(0, 0), Qt::UTC);
2959     QCOMPARE(dt3.timeZoneAbbreviation(), QString("UTC"));
2960 
2961     // LocalTime should vary
2962     if (zoneIsCET) {
2963         // Time definitely in Standard Time
2964         QDateTime dt4(QDate(2013, 1, 1), QTime(0, 0), Qt::LocalTime);
2965 #ifdef Q_OS_WIN
2966         QEXPECT_FAIL("", "Windows only reports long name (QTBUG-32759)", Continue);
2967 #endif
2968         QCOMPARE(dt4.timeZoneAbbreviation(), QStringLiteral("CET"));
2969         // Time definitely in Daylight Time
2970         QDateTime dt5(QDate(2013, 6, 1), QTime(0, 0), Qt::LocalTime);
2971 #ifdef Q_OS_WIN
2972         QEXPECT_FAIL("", "Windows only reports long name (QTBUG-32759)", Continue);
2973 #endif
2974         QCOMPARE(dt5.timeZoneAbbreviation(), QStringLiteral("CEST"));
2975     } else {
2976         qDebug("(Skipped some CET-only tests)");
2977     }
2978 
2979 #if QT_CONFIG(timezone)
2980     const QTimeZone berlin("Europe/Berlin");
2981     const QDateTime jan(QDate(2013, 1, 1).startOfDay(berlin));
2982     const QDateTime jul(QDate(2013, 7, 1).startOfDay(berlin));
2983 
2984     QCOMPARE(jan.timeZoneAbbreviation(), berlin.abbreviation(jan));
2985     QCOMPARE(jul.timeZoneAbbreviation(), berlin.abbreviation(jul));
2986 #endif
2987 }
2988 
2989 void tst_QDateTime::getDate()
2990 {
2991     {
2992     int y = -33, m = -44, d = -55;
2993     QDate date;
2994     date.getDate(&y, &m, &d);
2995     QCOMPARE(date.year(), y);
2996     QCOMPARE(date.month(), m);
2997     QCOMPARE(date.day(), d);
2998 
2999     date.getDate(0, 0, 0);
3000     }
3001 
3002     {
3003     int y = -33, m = -44, d = -55;
3004     QDate date(1998, 5, 24);
3005     date.getDate(0, &m, 0);
3006     date.getDate(&y, 0, 0);
3007     date.getDate(0, 0, &d);
3008 
3009     QCOMPARE(date.year(), y);
3010     QCOMPARE(date.month(), m);
3011     QCOMPARE(date.day(), d);
3012     }
3013 }
3014 
3015 void tst_QDateTime::fewDigitsInYear() const
3016 {
3017     const QDateTime three(QDate(300, 10, 11).startOfDay());
3018     QCOMPARE(three.toString(QLatin1String("yyyy-MM-dd")), QString::fromLatin1("0300-10-11"));
3019 
3020     const QDateTime two(QDate(20, 10, 11).startOfDay());
3021     QCOMPARE(two.toString(QLatin1String("yyyy-MM-dd")), QString::fromLatin1("0020-10-11"));
3022 
3023     const QDateTime yyTwo(QDate(30, 10, 11).startOfDay());
3024     QCOMPARE(yyTwo.toString(QLatin1String("yy-MM-dd")), QString::fromLatin1("30-10-11"));
3025 
3026     const QDateTime yyOne(QDate(4, 10, 11).startOfDay());
3027     QCOMPARE(yyOne.toString(QLatin1String("yy-MM-dd")), QString::fromLatin1("04-10-11"));
3028 }
3029 
3030 void tst_QDateTime::printNegativeYear() const
3031 {
3032     {
3033         QDateTime date(QDate(-20, 10, 11).startOfDay());
3034         QVERIFY(date.isValid());
3035         QCOMPARE(date.toString(QLatin1String("yyyy")), QString::fromLatin1("-0020"));
3036     }
3037 
3038     {
3039         QDateTime date(QDate(-3, 10, 11).startOfDay());
3040         QVERIFY(date.isValid());
3041         QCOMPARE(date.toString(QLatin1String("yyyy")), QString::fromLatin1("-0003"));
3042     }
3043 
3044     {
3045         QDateTime date(QDate(-400, 10, 11).startOfDay());
3046         QVERIFY(date.isValid());
3047         QCOMPARE(date.toString(QLatin1String("yyyy")), QString::fromLatin1("-0400"));
3048     }
3049 }
3050 
3051 #if QT_CONFIG(datetimeparser)
3052 void tst_QDateTime::roundtripTextDate() const
3053 {
3054     /* This code path should not result in warnings. */
3055     const QDateTime now(QDateTime::currentDateTime());
3056     // TextDate drops millis:
3057     const QDateTime theDateTime(now.addMSecs(-now.time().msec()));
3058     QCOMPARE(QDateTime::fromString(theDateTime.toString(Qt::TextDate), Qt::TextDate), theDateTime);
3059 }
3060 #endif
3061 
3062 void tst_QDateTime::utcOffsetLessThan() const
3063 {
3064     QDateTime dt1(QDate(2002, 10, 10), QTime(0, 0));
3065     QDateTime dt2(dt1);
3066 
3067     dt1.setOffsetFromUtc(-(2 * 60 * 60)); // Minus two hours.
3068     dt2.setOffsetFromUtc(-(3 * 60 * 60)); // Minus three hours.
3069 
3070     QVERIFY(dt1 != dt2);
3071     QVERIFY(!(dt1 == dt2));
3072     QVERIFY(dt1 < dt2);
3073     QVERIFY(!(dt2 < dt1));
3074 }
3075 
3076 void tst_QDateTime::isDaylightTime() const
3077 {
3078     QDateTime utc1(QDate(2012, 1, 1), QTime(0, 0), Qt::UTC);
3079     QVERIFY(!utc1.isDaylightTime());
3080     QDateTime utc2(QDate(2012, 6, 1), QTime(0, 0), Qt::UTC);
3081     QVERIFY(!utc2.isDaylightTime());
3082 
3083     QDateTime offset1(QDate(2012, 1, 1), QTime(0, 0), Qt::OffsetFromUTC, 1 * 60 * 60);
3084     QVERIFY(!offset1.isDaylightTime());
3085     QDateTime offset2(QDate(2012, 6, 1), QTime(0, 0), Qt::OffsetFromUTC, 1 * 60 * 60);
3086     QVERIFY(!offset2.isDaylightTime());
3087 
3088     if (zoneIsCET) {
3089         QDateTime cet1(QDate(2012, 1, 1), QTime(0, 0));
3090         QVERIFY(!cet1.isDaylightTime());
3091         QDateTime cet2(QDate(2012, 6, 1), QTime(0, 0));
3092         QVERIFY(cet2.isDaylightTime());
3093     } else {
3094         QSKIP("You must test using Central European (CET/CEST) time zone, e.g. TZ=Europe/Oslo");
3095     }
3096 }
3097 
3098 void tst_QDateTime::daylightTransitions() const
3099 {
3100     if (zoneIsCET) {
3101         // CET transitions occur at 01:00:00 UTC on last Sunday in March and October
3102         // 2011-03-27 02:00:00 CET  became 03:00:00 CEST at msecs = 1301187600000
3103         // 2011-10-30 03:00:00 CEST became 02:00:00 CET  at msecs = 1319936400000
3104         // 2012-03-25 02:00:00 CET  became 03:00:00 CEST at msecs = 1332637200000
3105         // 2012-10-28 03:00:00 CEST became 02:00:00 CET  at msecs = 1351386000000
3106         const qint64 daylight2012 = 1332637200000;
3107         const qint64 standard2012 = 1351386000000;
3108         const qint64 msecsOneHour = 3600000;
3109 
3110         // Test for correct behviour for StandardTime -> DaylightTime transition, i.e. missing hour
3111 
3112         // Test setting date, time in missing hour will be invalid
3113 
3114         QDateTime before(QDate(2012, 3, 25), QTime(1, 59, 59, 999));
3115         QVERIFY(before.isValid());
3116         QCOMPARE(before.date(), QDate(2012, 3, 25));
3117         QCOMPARE(before.time(), QTime(1, 59, 59, 999));
3118         QCOMPARE(before.toMSecsSinceEpoch(), daylight2012 - 1);
3119 
3120         QDateTime missing(QDate(2012, 3, 25), QTime(2, 0));
3121         QVERIFY(!missing.isValid());
3122         QCOMPARE(missing.date(), QDate(2012, 3, 25));
3123         QCOMPARE(missing.time(), QTime(2, 0));
3124 
3125         QDateTime after(QDate(2012, 3, 25), QTime(3, 0));
3126         QVERIFY(after.isValid());
3127         QCOMPARE(after.date(), QDate(2012, 3, 25));
3128         QCOMPARE(after.time(), QTime(3, 0));
3129         QCOMPARE(after.toMSecsSinceEpoch(), daylight2012);
3130 
3131         // Test round-tripping of msecs
3132 
3133         before.setMSecsSinceEpoch(daylight2012 - 1);
3134         QVERIFY(before.isValid());
3135         QCOMPARE(before.date(), QDate(2012, 3, 25));
3136         QCOMPARE(before.time(), QTime(1, 59, 59, 999));
3137         QCOMPARE(before.toMSecsSinceEpoch(), daylight2012 -1);
3138 
3139         after.setMSecsSinceEpoch(daylight2012);
3140         QVERIFY(after.isValid());
3141         QCOMPARE(after.date(), QDate(2012, 3, 25));
3142         QCOMPARE(after.time(), QTime(3, 0));
3143         QCOMPARE(after.toMSecsSinceEpoch(), daylight2012);
3144 
3145         // Test changing time spec re-validates the date/time
3146 
3147         QDateTime utc(QDate(2012, 3, 25), QTime(2, 00, 0), Qt::UTC);
3148         QVERIFY(utc.isValid());
3149         QCOMPARE(utc.date(), QDate(2012, 3, 25));
3150         QCOMPARE(utc.time(), QTime(2, 0));
3151         utc.setTimeSpec(Qt::LocalTime);
3152         QVERIFY(!utc.isValid());
3153         QCOMPARE(utc.date(), QDate(2012, 3, 25));
3154         QCOMPARE(utc.time(), QTime(2, 0));
3155         utc.setTimeSpec(Qt::UTC);
3156         QVERIFY(utc.isValid());
3157         QCOMPARE(utc.date(), QDate(2012, 3, 25));
3158         QCOMPARE(utc.time(), QTime(2, 0));
3159 
3160         // Test date maths, if result falls in missing hour then becomes next
3161         // hour (or is always invalid; mktime() may reject gap-times).
3162 
3163         QDateTime test(QDate(2011, 3, 25), QTime(2, 0));
3164         QVERIFY(test.isValid());
3165         test = test.addYears(1);
3166         const bool handled = test.isValid();
3167 #define CHECK_SPRING_FORWARD(test) \
3168             if (test.isValid()) { \
3169                 QCOMPARE(test.date(), QDate(2012, 3, 25)); \
3170                 QCOMPARE(test.time(), QTime(3, 0)); \
3171             } else { \
3172                 QVERIFY(!handled); \
3173             }
3174         CHECK_SPRING_FORWARD(test);
3175 
3176         test = QDateTime(QDate(2012, 2, 25), QTime(2, 0));
3177         QVERIFY(test.isValid());
3178         test = test.addMonths(1);
3179         CHECK_SPRING_FORWARD(test);
3180 
3181         test = QDateTime(QDate(2012, 3, 24), QTime(2, 0));
3182         QVERIFY(test.isValid());
3183         test = test.addDays(1);
3184         CHECK_SPRING_FORWARD(test);
3185 
3186         test = QDateTime(QDate(2012, 3, 25), QTime(1, 0));
3187         QVERIFY(test.isValid());
3188         QCOMPARE(test.toMSecsSinceEpoch(), daylight2012 - msecsOneHour);
3189         test = test.addMSecs(msecsOneHour);
3190         CHECK_SPRING_FORWARD(test);
3191         if (handled)
3192             QCOMPARE(test.toMSecsSinceEpoch(), daylight2012);
3193 #undef CHECK_SPRING_FORWARD
3194 
3195         // Test for correct behviour for DaylightTime -> StandardTime transition, i.e. second occurrence
3196 
3197         // Test setting date and time in first and second occurrence will be valid
3198 
3199         // 1 hour before transition is 2:00:00 FirstOccurrence
3200         QDateTime hourBefore(QDate(2012, 10, 28), QTime(2, 0));
3201         QVERIFY(hourBefore.isValid());
3202         QCOMPARE(hourBefore.date(), QDate(2012, 10, 28));
3203         QCOMPARE(hourBefore.time(), QTime(2, 0));
3204 #ifdef Q_OS_WIN
3205         // Windows uses SecondOccurrence
3206         QEXPECT_FAIL("", "QDateTime doesn't properly support Daylight Transitions", Continue);
3207 #endif // Q_OS_WIN
3208         QCOMPARE(hourBefore.toMSecsSinceEpoch(), standard2012 - msecsOneHour);
3209 
3210         // 1 msec before transition is 2:59:59.999 FirstOccurrence
3211         QDateTime msecBefore(QDate(2012, 10, 28), QTime(2, 59, 59, 999));
3212         QVERIFY(msecBefore.isValid());
3213         QCOMPARE(msecBefore.date(), QDate(2012, 10, 28));
3214         QCOMPARE(msecBefore.time(), QTime(2, 59, 59, 999));
3215 #if defined(Q_OS_DARWIN) || defined(Q_OS_WIN) || defined(Q_OS_QNX) || defined(Q_OS_ANDROID)
3216         // Win and Mac uses SecondOccurrence here
3217         QEXPECT_FAIL("", "QDateTime doesn't properly support Daylight Transitions", Continue);
3218 #endif // Q_OS_MAC
3219         QCOMPARE(msecBefore.toMSecsSinceEpoch(), standard2012 - 1);
3220 
3221         // At transition is 2:00:00 SecondOccurrence
3222         QDateTime atTran(QDate(2012, 10, 28), QTime(2, 0));
3223         QVERIFY(atTran.isValid());
3224         QCOMPARE(atTran.date(), QDate(2012, 10, 28));
3225         QCOMPARE(atTran.time(), QTime(2, 0));
3226 #ifndef Q_OS_WIN
3227         // Windows uses SecondOccurrence
3228         QEXPECT_FAIL("", "QDateTime doesn't properly support Daylight Transitions", Continue);
3229 #endif // Q_OS_WIN
3230         QCOMPARE(atTran.toMSecsSinceEpoch(), standard2012);
3231 
3232         // 59:59.999 after transition is 2:59:59.999 SecondOccurrence
3233         QDateTime afterTran(QDate(2012, 10, 28), QTime(2, 59, 59, 999));
3234         QVERIFY(afterTran.isValid());
3235         QCOMPARE(afterTran.date(), QDate(2012, 10, 28));
3236         QCOMPARE(afterTran.time(), QTime(2, 59, 59, 999));
3237 #ifdef __GLIBCXX__
3238         // Linux (i.e. glibc) mktime bug reuses last calculation
3239         QEXPECT_FAIL("", "QDateTime doesn't properly support Daylight Transitions", Continue);
3240 #endif // Q_OS_UNIX
3241         QCOMPARE(afterTran.toMSecsSinceEpoch(), standard2012 + msecsOneHour - 1);
3242 
3243         // 1 hour after transition is 3:00:00 FirstOccurrence
3244         QDateTime hourAfter(QDate(2012, 10, 28), QTime(3, 0));
3245         QVERIFY(hourAfter.isValid());
3246         QCOMPARE(hourAfter.date(), QDate(2012, 10, 28));
3247         QCOMPARE(hourAfter.time(), QTime(3, 0));
3248         QCOMPARE(hourAfter.toMSecsSinceEpoch(), standard2012 + msecsOneHour);
3249 
3250         // Test round-tripping of msecs
3251 
3252         // 1 hour before transition is 2:00:00 FirstOccurrence
3253         hourBefore.setMSecsSinceEpoch(standard2012 - msecsOneHour);
3254         QVERIFY(hourBefore.isValid());
3255         QCOMPARE(hourBefore.date(), QDate(2012, 10, 28));
3256         QCOMPARE(hourBefore.time(), QTime(2, 0));
3257         QCOMPARE(hourBefore.toMSecsSinceEpoch(), standard2012 - msecsOneHour);
3258 
3259         // 1 msec before transition is 2:59:59.999 FirstOccurrence
3260         msecBefore.setMSecsSinceEpoch(standard2012 - 1);
3261         QVERIFY(msecBefore.isValid());
3262         QCOMPARE(msecBefore.date(), QDate(2012, 10, 28));
3263         QCOMPARE(msecBefore.time(), QTime(2, 59, 59, 999));
3264         QCOMPARE(msecBefore.toMSecsSinceEpoch(), standard2012 - 1);
3265 
3266         // At transition is 2:00:00 SecondOccurrence
3267         atTran.setMSecsSinceEpoch(standard2012);
3268         QVERIFY(atTran.isValid());
3269         QCOMPARE(atTran.date(), QDate(2012, 10, 28));
3270         QCOMPARE(atTran.time(), QTime(2, 0));
3271         QCOMPARE(atTran.toMSecsSinceEpoch(), standard2012);
3272 
3273         // 59:59.999 after transition is 2:59:59.999 SecondOccurrence
3274         afterTran.setMSecsSinceEpoch(standard2012 + msecsOneHour - 1);
3275         QVERIFY(afterTran.isValid());
3276         QCOMPARE(afterTran.date(), QDate(2012, 10, 28));
3277         QCOMPARE(afterTran.time(), QTime(2, 59, 59, 999));
3278         QCOMPARE(afterTran.toMSecsSinceEpoch(), standard2012 + msecsOneHour - 1);
3279 
3280         // 1 hour after transition is 3:00:00 FirstOccurrence
3281         hourAfter.setMSecsSinceEpoch(standard2012 + msecsOneHour);
3282         QVERIFY(hourAfter.isValid());
3283         QCOMPARE(hourAfter.date(), QDate(2012, 10, 28));
3284         QCOMPARE(hourAfter.time(), QTime(3, 0));
3285         QCOMPARE(hourAfter.toMSecsSinceEpoch(), standard2012 + msecsOneHour);
3286 
3287         // Test date maths, result is always FirstOccurrence
3288 
3289         // Add year to get to tran FirstOccurrence
3290         test = QDateTime(QDate(2011, 10, 28), QTime(2, 0));
3291         test = test.addYears(1);
3292         QVERIFY(test.isValid());
3293         QCOMPARE(test.date(), QDate(2012, 10, 28));
3294         QCOMPARE(test.time(), QTime(2, 0));
3295 #ifdef Q_OS_WIN
3296         // Windows uses SecondOccurrence
3297         QEXPECT_FAIL("", "QDateTime doesn't properly support Daylight Transitions", Continue);
3298 #endif // Q_OS_WIN
3299         QCOMPARE(test.toMSecsSinceEpoch(), standard2012 - msecsOneHour);
3300 
3301         // Add year to get to after tran FirstOccurrence
3302         test = QDateTime(QDate(2011, 10, 28), QTime(3, 0));
3303         test = test.addYears(1);
3304         QVERIFY(test.isValid());
3305         QCOMPARE(test.date(), QDate(2012, 10, 28));
3306         QCOMPARE(test.time(), QTime(3, 0));
3307         QCOMPARE(test.toMSecsSinceEpoch(), standard2012 + msecsOneHour);
3308 
3309         // Add year to tran FirstOccurrence
3310         test = QDateTime(QDate(2011, 10, 30), QTime(2, 0));
3311         test = test.addYears(1);
3312         QVERIFY(test.isValid());
3313         QCOMPARE(test.date(), QDate(2012, 10, 30));
3314         QCOMPARE(test.time(), QTime(2, 0));
3315 
3316         // Add year to tran SecondOccurrence
3317         test = QDateTime(QDate(2011, 10, 30), QTime(2, 0)); // TODO SecondOccurrence
3318         test = test.addYears(1);
3319         QVERIFY(test.isValid());
3320         QCOMPARE(test.date(), QDate(2012, 10, 30));
3321         QCOMPARE(test.time(), QTime(2, 0));
3322 
3323         // Add year to after tran FirstOccurrence
3324         test = QDateTime(QDate(2011, 10, 30), QTime(3, 0));
3325         test = test.addYears(1);
3326         QVERIFY(test.isValid());
3327         QCOMPARE(test.date(), QDate(2012, 10, 30));
3328         QCOMPARE(test.time(), QTime(3, 0));
3329 
3330 
3331         // Add month to get to tran FirstOccurrence
3332         test = QDateTime(QDate(2012, 9, 28), QTime(2, 0));
3333         test = test.addMonths(1);
3334         QVERIFY(test.isValid());
3335         QCOMPARE(test.date(), QDate(2012, 10, 28));
3336         QCOMPARE(test.time(), QTime(2, 0));
3337 #ifdef Q_OS_WIN
3338         // Windows uses SecondOccurrence
3339         QEXPECT_FAIL("", "QDateTime doesn't properly support Daylight Transitions", Continue);
3340 #endif // Q_OS_WIN
3341         QCOMPARE(test.toMSecsSinceEpoch(), standard2012 - msecsOneHour);
3342 
3343         // Add month to get to after tran FirstOccurrence
3344         test = QDateTime(QDate(2012, 9, 28), QTime(3, 0));
3345         test = test.addMonths(1);
3346         QVERIFY(test.isValid());
3347         QCOMPARE(test.date(), QDate(2012, 10, 28));
3348         QCOMPARE(test.time(), QTime(3, 0));
3349         QCOMPARE(test.toMSecsSinceEpoch(), standard2012 + msecsOneHour);
3350 
3351         // Add month to tran FirstOccurrence
3352         test = QDateTime(QDate(2011, 10, 30), QTime(2, 0));
3353         test = test.addMonths(1);
3354         QVERIFY(test.isValid());
3355         QCOMPARE(test.date(), QDate(2011, 11, 30));
3356         QCOMPARE(test.time(), QTime(2, 0));
3357 
3358         // Add month to tran SecondOccurrence
3359         test = QDateTime(QDate(2011, 10, 30), QTime(2, 0)); // TODO SecondOccurrence
3360         test = test.addMonths(1);
3361         QVERIFY(test.isValid());
3362         QCOMPARE(test.date(), QDate(2011, 11, 30));
3363         QCOMPARE(test.time(), QTime(2, 0));
3364 
3365         // Add month to after tran FirstOccurrence
3366         test = QDateTime(QDate(2011, 10, 30), QTime(3, 0));
3367         test = test.addMonths(1);
3368         QVERIFY(test.isValid());
3369         QCOMPARE(test.date(), QDate(2011, 11, 30));
3370         QCOMPARE(test.time(), QTime(3, 0));
3371 
3372 
3373         // Add day to get to tran FirstOccurrence
3374         test = QDateTime(QDate(2012, 10, 27), QTime(2, 0));
3375         test = test.addDays(1);
3376         QVERIFY(test.isValid());
3377         QCOMPARE(test.date(), QDate(2012, 10, 28));
3378         QCOMPARE(test.time(), QTime(2, 0));
3379 #ifdef Q_OS_WIN
3380         // Windows uses SecondOccurrence
3381         QEXPECT_FAIL("", "QDateTime doesn't properly support Daylight Transitions", Continue);
3382 #endif // Q_OS_WIN
3383         QCOMPARE(test.toMSecsSinceEpoch(), standard2012 - msecsOneHour);
3384 
3385         // Add day to get to after tran FirstOccurrence
3386         test = QDateTime(QDate(2012, 10, 27), QTime(3, 0));
3387         test = test.addDays(1);
3388         QVERIFY(test.isValid());
3389         QCOMPARE(test.date(), QDate(2012, 10, 28));
3390         QCOMPARE(test.time(), QTime(3, 0));
3391         QCOMPARE(test.toMSecsSinceEpoch(), standard2012 + msecsOneHour);
3392 
3393         // Add day to tran FirstOccurrence
3394         test = QDateTime(QDate(2011, 10, 30), QTime(2, 0));
3395         test = test.addDays(1);
3396         QVERIFY(test.isValid());
3397         QCOMPARE(test.date(), QDate(2011, 10, 31));
3398         QCOMPARE(test.time(), QTime(2, 0));
3399 
3400         // Add day to tran SecondOccurrence
3401         test = QDateTime(QDate(2011, 10, 30), QTime(2, 0)); // TODO SecondOccurrence
3402         test = test.addDays(1);
3403         QVERIFY(test.isValid());
3404         QCOMPARE(test.date(), QDate(2011, 10, 31));
3405         QCOMPARE(test.time(), QTime(2, 0));
3406 
3407         // Add day to after tran FirstOccurrence
3408         test = QDateTime(QDate(2011, 10, 30), QTime(3, 0));
3409         test = test.addDays(1);
3410         QVERIFY(test.isValid());
3411         QCOMPARE(test.date(), QDate(2011, 10, 31));
3412         QCOMPARE(test.time(), QTime(3, 0));
3413 
3414 
3415         // Add hour to get to tran FirstOccurrence
3416         test = QDateTime(QDate(2012, 10, 28), QTime(1, 0));
3417         test = test.addMSecs(msecsOneHour);
3418         QVERIFY(test.isValid());
3419         QCOMPARE(test.date(), QDate(2012, 10, 28));
3420         QCOMPARE(test.time(), QTime(2, 0));
3421         QCOMPARE(test.toMSecsSinceEpoch(), standard2012 - msecsOneHour);
3422 
3423         // Add hour to tran FirstOccurrence to get to tran SecondOccurrence
3424         test = QDateTime(QDate(2012, 10, 28), QTime(2, 0));
3425         test = test.addMSecs(msecsOneHour);
3426         QVERIFY(test.isValid());
3427         QCOMPARE(test.date(), QDate(2012, 10, 28));
3428 #ifdef Q_OS_WIN
3429         // Windows uses SecondOccurrence
3430         QEXPECT_FAIL("", "QDateTime doesn't properly support Daylight Transitions", Continue);
3431 #endif // Q_OS_WIN
3432         QCOMPARE(test.time(), QTime(2, 0));
3433 #ifdef Q_OS_WIN
3434         // Windows uses SecondOccurrence
3435         QEXPECT_FAIL("", "QDateTime doesn't properly support Daylight Transitions", Continue);
3436 #endif // Q_OS_WIN
3437         QCOMPARE(test.toMSecsSinceEpoch(), standard2012);
3438 
3439         // Add hour to tran SecondOccurrence to get to after tran FirstOccurrence
3440         test = QDateTime(QDate(2012, 10, 28), QTime(2, 0)); // TODO SecondOccurrence
3441         test = test.addMSecs(msecsOneHour);
3442         QVERIFY(test.isValid());
3443         QCOMPARE(test.date(), QDate(2012, 10, 28));
3444 #if defined(Q_OS_DARWIN) || defined(Q_OS_QNX) || defined(Q_OS_ANDROID)
3445         // Mac uses FirstOccurrence, Windows uses SecondOccurrence, Linux uses last calculation
3446         QEXPECT_FAIL("", "QDateTime doesn't properly support Daylight Transitions", Continue);
3447 #endif // Q_OS_WIN
3448         QCOMPARE(test.time(), QTime(3, 0));
3449 #if defined(Q_OS_DARWIN) || defined(Q_OS_QNX) || defined(Q_OS_ANDROID)
3450         // Mac uses FirstOccurrence, Windows uses SecondOccurrence, Linux uses last calculation
3451         QEXPECT_FAIL("", "QDateTime doesn't properly support Daylight Transitions", Continue);
3452 #endif // Q_OS_WIN
3453         QCOMPARE(test.toMSecsSinceEpoch(), standard2012 + msecsOneHour);
3454 
3455     } else {
3456         QSKIP("You must test using Central European (CET/CEST) time zone, e.g. TZ=Europe/Oslo");
3457     }
3458 }
3459 
3460 void tst_QDateTime::timeZones() const
3461 {
3462 #if QT_CONFIG(timezone)
3463     QTimeZone invalidTz = QTimeZone("Vulcan/ShiKahr");
3464     QCOMPARE(invalidTz.isValid(), false);
3465     QDateTime invalidDateTime = QDateTime(QDate(2000, 1, 1), QTime(0, 0), invalidTz);
3466     QCOMPARE(invalidDateTime.isValid(), false);
3467     QCOMPARE(invalidDateTime.date(), QDate(2000, 1, 1));
3468     QCOMPARE(invalidDateTime.time(), QTime(0, 0));
3469 
3470     QTimeZone nzTz = QTimeZone("Pacific/Auckland");
3471     QTimeZone nzTzOffset = QTimeZone(12 * 3600);
3472 
3473     // During Standard Time NZ is +12:00
3474     QDateTime utcStd(QDate(2012, 6, 1), QTime(0, 0), Qt::UTC);
3475     QDateTime nzStd(QDate(2012, 6, 1), QTime(12, 0), nzTz);
3476     QDateTime nzStdOffset(QDate(2012, 6, 1), QTime(12, 0), nzTzOffset);
3477 
3478     QCOMPARE(nzStd.isValid(), true);
3479     QCOMPARE(nzStd.timeSpec(), Qt::TimeZone);
3480     QCOMPARE(nzStd.date(), QDate(2012, 6, 1));
3481     QCOMPARE(nzStd.time(), QTime(12, 0));
3482     QVERIFY(nzStd.timeZone() == nzTz);
3483     QCOMPARE(nzStd.timeZone().id(), QByteArray("Pacific/Auckland"));
3484     QCOMPARE(nzStd.offsetFromUtc(), 43200);
3485     QCOMPARE(nzStd.isDaylightTime(), false);
3486     QCOMPARE(nzStd.toMSecsSinceEpoch(), utcStd.toMSecsSinceEpoch());
3487 
3488     QCOMPARE(nzStdOffset.isValid(), true);
3489     QCOMPARE(nzStdOffset.timeSpec(), Qt::TimeZone);
3490     QCOMPARE(nzStdOffset.date(), QDate(2012, 6, 1));
3491     QCOMPARE(nzStdOffset.time(), QTime(12, 0));
3492     QVERIFY(nzStdOffset.timeZone() == nzTzOffset);
3493     QCOMPARE(nzStdOffset.timeZone().id(), QByteArray("UTC+12:00"));
3494     QCOMPARE(nzStdOffset.offsetFromUtc(), 43200);
3495     QCOMPARE(nzStdOffset.isDaylightTime(), false);
3496     QCOMPARE(nzStdOffset.toMSecsSinceEpoch(), utcStd.toMSecsSinceEpoch());
3497 
3498     // During Daylight Time NZ is +13:00
3499     QDateTime utcDst(QDate(2012, 1, 1), QTime(0, 0), Qt::UTC);
3500     QDateTime nzDst(QDate(2012, 1, 1), QTime(13, 0), nzTz);
3501 
3502     QCOMPARE(nzDst.isValid(), true);
3503     QCOMPARE(nzDst.date(), QDate(2012, 1, 1));
3504     QCOMPARE(nzDst.time(), QTime(13, 0));
3505     QCOMPARE(nzDst.offsetFromUtc(), 46800);
3506     QCOMPARE(nzDst.isDaylightTime(), true);
3507     QCOMPARE(nzDst.toMSecsSinceEpoch(), utcDst.toMSecsSinceEpoch());
3508 
3509     QDateTime utc = nzStd.toUTC();
3510     QCOMPARE(utc.date(), utcStd.date());
3511     QCOMPARE(utc.time(), utcStd.time());
3512 
3513     utc = nzDst.toUTC();
3514     QCOMPARE(utc.date(), utcDst.date());
3515     QCOMPARE(utc.time(), utcDst.time());
3516 
3517     // Crash test, QTBUG-80146:
3518     QVERIFY(!nzStd.toTimeZone(QTimeZone()).isValid());
3519 
3520     // Sydney is 2 hours behind New Zealand
3521     QTimeZone ausTz = QTimeZone("Australia/Sydney");
3522     QDateTime aus = nzStd.toTimeZone(ausTz);
3523     QCOMPARE(aus.date(), QDate(2012, 6, 1));
3524     QCOMPARE(aus.time(), QTime(10, 0));
3525 
3526     QDateTime dt1(QDate(2012, 6, 1), QTime(0, 0), Qt::UTC);
3527     QCOMPARE(dt1.timeSpec(), Qt::UTC);
3528     dt1.setTimeZone(nzTz);
3529     QCOMPARE(dt1.timeSpec(), Qt::TimeZone);
3530     QCOMPARE(dt1.date(), QDate(2012, 6, 1));
3531     QCOMPARE(dt1.time(), QTime(0, 0));
3532     QCOMPARE(dt1.timeZone(), nzTz);
3533 
3534     QDateTime dt2 = QDateTime::fromSecsSinceEpoch(1338465600, nzTz);
3535     QCOMPARE(dt2.date(), dt1.date());
3536     QCOMPARE(dt2.time(), dt1.time());
3537     QCOMPARE(dt2.timeSpec(), dt1.timeSpec());
3538     QCOMPARE(dt2.timeZone(), dt1.timeZone());
3539 
3540     QDateTime dt3 = QDateTime::fromMSecsSinceEpoch(1338465600000, nzTz);
3541     QCOMPARE(dt3.date(), dt1.date());
3542     QCOMPARE(dt3.time(), dt1.time());
3543     QCOMPARE(dt3.timeSpec(), dt1.timeSpec());
3544     QCOMPARE(dt3.timeZone(), dt1.timeZone());
3545 
3546     // The start of year 1 should be *describable* in any zone (QTBUG-78051)
3547     dt3 = QDateTime(QDate(1, 1, 1), QTime(0, 0), ausTz);
3548     QVERIFY(dt3.isValid());
3549     // Likewise the end of year -1 (a.k.a. 1 BCE).
3550     dt3 = dt3.addMSecs(-1);
3551     QVERIFY(dt3.isValid());
3552     QCOMPARE(dt3, QDateTime(QDate(-1, 12, 31), QTime(23, 59, 59, 999), ausTz));
3553 
3554     // Check datastream serialises the time zone
3555     QByteArray tmp;
3556     {
3557         QDataStream ds(&tmp, QIODevice::WriteOnly);
3558         ds << dt1;
3559     }
3560     QDateTime dt4;
3561     {
3562         QDataStream ds(&tmp, QIODevice::ReadOnly);
3563         ds >> dt4;
3564     }
3565     QCOMPARE(dt4, dt1);
3566     QCOMPARE(dt4.timeSpec(), Qt::TimeZone);
3567     QCOMPARE(dt4.timeZone(), nzTz);
3568 
3569     // Check handling of transition times
3570     QTimeZone cet("Europe/Oslo");
3571 
3572     // Standard Time to Daylight Time 2013 on 2013-03-31 is 2:00 local time / 1:00 UTC
3573     qint64 stdToDstMSecs = 1364691600000;
3574 
3575     // Test MSecs to local
3576     // - Test 1 msec before tran = 01:59:59.999
3577     QDateTime beforeDst = QDateTime::fromMSecsSinceEpoch(stdToDstMSecs - 1, cet);
3578     QCOMPARE(beforeDst.date(), QDate(2013, 3, 31));
3579     QCOMPARE(beforeDst.time(), QTime(1, 59, 59, 999));
3580     // - Test at tran = 03:00:00
3581     QDateTime atDst = QDateTime::fromMSecsSinceEpoch(stdToDstMSecs, cet);
3582     QCOMPARE(atDst.date(), QDate(2013, 3, 31));
3583     QCOMPARE(atDst.time(), QTime(3, 0));
3584 
3585     // Test local to MSecs
3586     // - Test 1 msec before tran = 01:59:59.999
3587     beforeDst = QDateTime(QDate(2013, 3, 31), QTime(1, 59, 59, 999), cet);
3588     QCOMPARE(beforeDst.toMSecsSinceEpoch(), stdToDstMSecs - 1);
3589     // - Test at tran = 03:00:00
3590     atDst = QDateTime(QDate(2013, 3, 31), QTime(3, 0), cet);
3591     QCOMPARE(atDst.toMSecsSinceEpoch(), stdToDstMSecs);
3592     // - Test transition hole, setting 03:00:00 is valid
3593     atDst = QDateTime(QDate(2013, 3, 31), QTime(3, 0), cet);
3594     QVERIFY(atDst.isValid());
3595     QCOMPARE(atDst.date(), QDate(2013, 3, 31));
3596     QCOMPARE(atDst.time(), QTime(3, 0));
3597     QCOMPARE(atDst.toMSecsSinceEpoch(), stdToDstMSecs);
3598     // - Test transition hole, setting 02:00:00 is invalid
3599     atDst = QDateTime(QDate(2013, 3, 31), QTime(2, 0), cet);
3600     QVERIFY(!atDst.isValid());
3601     QCOMPARE(atDst.date(), QDate(2013, 3, 31));
3602     QCOMPARE(atDst.time(), QTime(2, 0));
3603     // - Test transition hole, setting 02:59:59.999 is invalid
3604     atDst = QDateTime(QDate(2013, 3, 31), QTime(2, 59, 59, 999), cet);
3605     QVERIFY(!atDst.isValid());
3606     QCOMPARE(atDst.date(), QDate(2013, 3, 31));
3607     QCOMPARE(atDst.time(), QTime(2, 59, 59, 999));
3608 
3609     // Standard Time to Daylight Time 2013 on 2013-10-27 is 3:00 local time / 1:00 UTC
3610     qint64 dstToStdMSecs = 1382835600000;
3611 
3612     // Test MSecs to local
3613     // - Test 1 hour before tran = 02:00:00 local first occurrence
3614     QDateTime hourBeforeStd = QDateTime::fromMSecsSinceEpoch(dstToStdMSecs - 3600000, cet);
3615     QCOMPARE(hourBeforeStd.date(), QDate(2013, 10, 27));
3616     QCOMPARE(hourBeforeStd.time(), QTime(2, 0));
3617     // - Test 1 msec before tran = 02:59:59.999 local first occurrence
3618     QDateTime msecBeforeStd = QDateTime::fromMSecsSinceEpoch(dstToStdMSecs - 1, cet);
3619     QCOMPARE(msecBeforeStd.date(), QDate(2013, 10, 27));
3620     QCOMPARE(msecBeforeStd.time(), QTime(2, 59, 59, 999));
3621     // - Test at tran = 03:00:00 local becomes 02:00:00 local second occurrence
3622     QDateTime atStd = QDateTime::fromMSecsSinceEpoch(dstToStdMSecs, cet);
3623     QCOMPARE(atStd.date(), QDate(2013, 10, 27));
3624     QCOMPARE(atStd.time(), QTime(2, 0));
3625     // - Test 59 mins after tran = 02:59:59.999 local second occurrence
3626     QDateTime afterStd = QDateTime::fromMSecsSinceEpoch(dstToStdMSecs + 3600000 -1, cet);
3627     QCOMPARE(afterStd.date(), QDate(2013, 10, 27));
3628     QCOMPARE(afterStd.time(), QTime(2, 59, 59, 999));
3629     // - Test 1 hour after tran = 03:00:00 local
3630     QDateTime hourAfterStd = QDateTime::fromMSecsSinceEpoch(dstToStdMSecs + 3600000, cet);
3631     QCOMPARE(hourAfterStd.date(), QDate(2013, 10, 27));
3632     QCOMPARE(hourAfterStd.time(), QTime(3, 00, 00));
3633 
3634     // Test local to MSecs
3635     // - Test first occurrence 02:00:00 = 1 hour before tran
3636     hourBeforeStd = QDateTime(QDate(2013, 10, 27), QTime(2, 0), cet);
3637     QEXPECT_FAIL("", "QDateTime doesn't properly support Daylight Transitions", Continue);
3638     QCOMPARE(hourBeforeStd.toMSecsSinceEpoch(), dstToStdMSecs - 3600000);
3639     // - Test first occurrence 02:59:59.999 = 1 msec before tran
3640     msecBeforeStd = QDateTime(QDate(2013, 10, 27), QTime(2, 59, 59, 999), cet);
3641     QEXPECT_FAIL("", "QDateTime doesn't properly support Daylight Transitions", Continue);
3642     QCOMPARE(msecBeforeStd.toMSecsSinceEpoch(), dstToStdMSecs - 1);
3643     // - Test second occurrence 02:00:00 = at tran
3644     atStd = QDateTime(QDate(2013, 10, 27), QTime(2, 0), cet);
3645     QCOMPARE(atStd.toMSecsSinceEpoch(), dstToStdMSecs);
3646     // - Test second occurrence 03:00:00 = 59 mins after tran
3647     afterStd = QDateTime(QDate(2013, 10, 27), QTime(2, 59, 59, 999), cet);
3648     QCOMPARE(afterStd.toMSecsSinceEpoch(), dstToStdMSecs + 3600000 - 1);
3649     // - Test 03:00:00 = 1 hour after tran
3650     hourAfterStd = QDateTime(QDate(2013, 10, 27), QTime(3, 0), cet);
3651     QCOMPARE(hourAfterStd.toMSecsSinceEpoch(), dstToStdMSecs + 3600000);
3652 
3653     // Test Time Zone that has transitions but no future transitions afer a given date
3654     QTimeZone sgt("Asia/Singapore");
3655     QDateTime future(QDate(2015, 1, 1), QTime(0, 0), sgt);
3656     QVERIFY(future.isValid());
3657     QCOMPARE(future.offsetFromUtc(), 28800);
3658 #else
3659     QSKIP("Needs timezone feature enabled");
3660 #endif
3661 }
3662 
3663 void tst_QDateTime::systemTimeZoneChange() const
3664 {
3665     // Set the timezone to Brisbane time
3666     TimeZoneRollback useZone(QByteArray("AEST-10:00"));
3667 
3668     QDateTime localDate = QDateTime(QDate(2012, 6, 1), QTime(2, 15, 30), Qt::LocalTime);
3669     QDateTime utcDate = QDateTime(QDate(2012, 6, 1), QTime(2, 15, 30), Qt::UTC);
3670 #if QT_CONFIG(timezone)
3671     QDateTime tzDate = QDateTime(QDate(2012, 6, 1), QTime(2, 15, 30), QTimeZone("Australia/Brisbane"));
3672 #endif
3673     qint64 localMsecs = localDate.toMSecsSinceEpoch();
3674     qint64 utcMsecs = utcDate.toMSecsSinceEpoch();
3675 #if QT_CONFIG(timezone)
3676     qint64 tzMsecs = tzDate.toMSecsSinceEpoch();
3677 
3678     // check that Australia/Brisbane is known
3679     QVERIFY(tzDate.timeZone().isValid());
3680 #endif
3681 
3682     // Change to Indian time
3683     useZone.reset(QByteArray("IST-05:30"));
3684 
3685     QCOMPARE(localDate, QDateTime(QDate(2012, 6, 1), QTime(2, 15, 30), Qt::LocalTime));
3686     QVERIFY(localMsecs != localDate.toMSecsSinceEpoch());
3687     QCOMPARE(utcDate, QDateTime(QDate(2012, 6, 1), QTime(2, 15, 30), Qt::UTC));
3688     QCOMPARE(utcDate.toMSecsSinceEpoch(), utcMsecs);
3689 #if QT_CONFIG(timezone)
3690     QCOMPARE(tzDate, QDateTime(QDate(2012, 6, 1), QTime(2, 15, 30), QTimeZone("Australia/Brisbane")));
3691     QCOMPARE(tzDate.toMSecsSinceEpoch(), tzMsecs);
3692 #endif
3693 }
3694 
3695 void tst_QDateTime::invalid_data() const
3696 {
3697     QTest::addColumn<QDateTime>("when");
3698     QTest::addColumn<Qt::TimeSpec>("spec");
3699     QTest::addColumn<bool>("goodZone");
3700     QTest::newRow("default") << QDateTime() << Qt::LocalTime << true;
3701 
3702     QDateTime invalidDate = QDateTime(QDate(0, 0, 0), QTime(-1, -1, -1));
3703     QTest::newRow("simple") << invalidDate << Qt::LocalTime << true;
3704     QTest::newRow("UTC") << invalidDate.toUTC() << Qt::UTC << true;
3705     QTest::newRow("offset")
3706         << invalidDate.toOffsetFromUtc(3600) << Qt::OffsetFromUTC << true;
3707 #if QT_CONFIG(timezone)
3708     QTest::newRow("CET")
3709         << invalidDate.toTimeZone(QTimeZone("Europe/Oslo")) << Qt::TimeZone << true;
3710 
3711     // Crash tests, QTBUG-80146:
3712     QTest::newRow("nozone+construct")
3713         << QDateTime(QDate(1970, 1, 1), QTime(12, 0), QTimeZone()) << Qt::TimeZone << false;
3714     QTest::newRow("nozone+fromMSecs")
3715         << QDateTime::fromMSecsSinceEpoch(42, QTimeZone()) << Qt::TimeZone << false;
3716     QDateTime valid(QDate(1970, 1, 1), QTime(12, 0), Qt::UTC);
3717     QTest::newRow("tonozone") << valid.toTimeZone(QTimeZone()) << Qt::TimeZone << false;
3718 #endif
3719 }
3720 
3721 void tst_QDateTime::invalid() const
3722 {
3723     QFETCH(QDateTime, when);
3724     QFETCH(Qt::TimeSpec, spec);
3725     QFETCH(bool, goodZone);
3726     QVERIFY(!when.isValid());
3727     QCOMPARE(when.timeSpec(), spec);
3728     QCOMPARE(when.timeZoneAbbreviation(), QString());
3729     if (!goodZone)
3730         QCOMPARE(when.toMSecsSinceEpoch(), 0);
3731     QVERIFY(!when.isDaylightTime());
3732 #if QT_CONFIG(timezone)
3733     QCOMPARE(when.timeZone().isValid(), goodZone);
3734 #endif
3735 }
3736 
3737 void tst_QDateTime::range() const
3738 {
3739     using Bounds = std::numeric_limits<qint64>;
3740     QCOMPARE(QDateTime::fromMSecsSinceEpoch(Bounds::min() + 1, Qt::UTC).date().year(),
3741              int(QDateTime::YearRange::First));
3742     QCOMPARE(QDateTime::fromMSecsSinceEpoch(Bounds::max() - 1, Qt::UTC).date().year(),
3743              int(QDateTime::YearRange::Last));
3744     constexpr qint64 millisPerDay = 24 * 3600 * 1000;
3745     constexpr qint64 wholeDays = Bounds::max() / millisPerDay;
3746     constexpr qint64 millisRemainder = Bounds::max() % millisPerDay;
3747     QVERIFY(QDateTime(QDate(1970, 1, 1).addDays(wholeDays),
3748                       QTime::fromMSecsSinceStartOfDay(millisRemainder),
3749                       Qt::UTC).isValid());
3750     QVERIFY(!QDateTime(QDate(1970, 1, 1).addDays(wholeDays),
3751                        QTime::fromMSecsSinceStartOfDay(millisRemainder + 1),
3752                        Qt::UTC).isValid());
3753     QVERIFY(QDateTime(QDate(1970, 1, 1).addDays(-wholeDays - 1),
3754                       QTime::fromMSecsSinceStartOfDay(3600 * 24000 - millisRemainder - 1),
3755                       Qt::UTC).isValid());
3756     QVERIFY(!QDateTime(QDate(1970, 1, 1).addDays(-wholeDays - 1),
3757                        QTime::fromMSecsSinceStartOfDay(3600 * 24000 - millisRemainder - 2),
3758                        Qt::UTC).isValid());
3759 }
3760 
3761 void tst_QDateTime::macTypes()
3762 {
3763 #ifndef Q_OS_MAC
3764     QSKIP("This is a Apple-only test");
3765 #else
3766     extern void tst_QDateTime_macTypes(); // in qdatetime_mac.mm
3767     tst_QDateTime_macTypes();
3768 #endif
3769 }
3770 
3771 QTEST_APPLESS_MAIN(tst_QDateTime)
3772 #include "tst_qdatetime.moc"
