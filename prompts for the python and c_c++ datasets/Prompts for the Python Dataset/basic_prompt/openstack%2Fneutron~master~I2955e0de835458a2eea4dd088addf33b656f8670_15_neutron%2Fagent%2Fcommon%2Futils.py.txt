Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 # Copyright 2015 Cloudbase Solutions.
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 
16 import os
17 import time
18 
19 import eventlet
20 from oslo_config import cfg
21 from oslo_log import log as logging
22 from oslo_utils import timeutils
23 
24 from neutron._i18n import _LE
25 from neutron.agent.common import config
26 from neutron.common import utils as neutron_utils
27 from neutron.conf.agent.database import agents_db
28 
29 
30 if os.name == 'nt':
31     from neutron.agent.windows import utils
32 else:
33     from neutron.agent.linux import utils
34 
35 
36 LOG = logging.getLogger(__name__)
37 config.register_root_helper(cfg.CONF)
38 agents_db.register_agent_opts()
39 
40 INTERFACE_NAMESPACE = 'neutron.interface_drivers'
41 
42 
43 execute = utils.execute
44 
45 
46 class Throttler(object):
47     """Throttle number of calls to a function to only once per 'threshold'.
48 
49     :param threshold: minimum time betwen 2 'function' calls, in seconds.
50     """
51     def __init__(self, threshold=0):
52         self.threshold = threshold
53         self.last_time_called = time.time() - threshold
54 
55         # Is the function already running and should future calls be deferred?
56         self.is_deferred = False
57 
58     def call(self, function, *args, **kwargs):
59         # Check if another thread hasn't already scheduled 'function' to run.
60         # If it has been, then it will do so in less than 'self.threshold'
61         # seconds.
62         if not self.is_deferred:
63 
64             time_since_last_call = (
65                 time.time() - self.last_time_called)
66             if time_since_last_call < self.threshold:
67                 # We're in timeout, so we should throttle future calls.
68                 self.is_deferred = True
69                 time_to_wait = self.threshold - time_since_last_call
70                 eventlet.sleep(time_to_wait)
71 
72             self.last_time_called = time.time()
73             try:
74                 function(*args, **kwargs)
75             finally:
76                 self.is_deferred = False
77 
78 
79 def load_interface_driver(conf):
80     """Load interface driver for agents like DHCP or L3 agent.
81 
82     :param conf: driver configuration object
83     :raises SystemExit of 1 if driver cannot be loaded
84     """
85 
86     try:
87         loaded_class = neutron_utils.load_class_by_alias_or_classname(
88                 INTERFACE_NAMESPACE, conf.interface_driver)
89         return loaded_class(conf)
90     except ImportError:
91         LOG.error(_LE("Error loading interface driver '%s'"),
92                   conf.interface_driver)
93         raise SystemExit(1)
94 
95 
96 def is_agent_down(heart_beat_time):
97     return timeutils.is_older_than(heart_beat_time,
98                                    cfg.CONF.agent_down_time)
