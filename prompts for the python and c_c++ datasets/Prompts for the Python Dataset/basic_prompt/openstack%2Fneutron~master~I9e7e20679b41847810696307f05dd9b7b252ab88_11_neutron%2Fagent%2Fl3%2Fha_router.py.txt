Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 # Copyright (c) 2015 OpenStack Foundation
2 #
3 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
4 #    not use this file except in compliance with the License. You may obtain
5 #    a copy of the License at
6 #
7 #         http://www.apache.org/licenses/LICENSE-2.0
8 #
9 #    Unless required by applicable law or agreed to in writing, software
10 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 #    License for the specific language governing permissions and limitations
13 #    under the License.
14 
15 import os
16 import shutil
17 import signal
18 
19 import netaddr
20 from neutron_lib.api.definitions import portbindings
21 from neutron_lib import constants as n_consts
22 from neutron_lib.utils import runtime
23 from oslo_log import log as logging
24 
25 from neutron.agent.l3 import namespaces
26 from neutron.agent.l3 import router_info as router
27 from neutron.agent.linux import external_process
28 from neutron.agent.linux import ip_lib
29 from neutron.agent.linux import keepalived
30 from neutron.common import utils as common_utils
31 from neutron.extensions import revisions
32 from neutron.extensions import timestamp
33 
34 LOG = logging.getLogger(__name__)
35 HA_DEV_PREFIX = 'ha-'
36 IP_MONITOR_PROCESS_SERVICE = 'ip_monitor'
37 SIGTERM_TIMEOUT = 10
38 KEEPALIVED_STATE_CHANGE_MONITOR_SERVICE_NAME = (
39     "neutron-keepalived-state-change-monitor")
40 
41 # TODO(liuyulong): move to neutron-lib?
42 STATE_CHANGE_PROC_NAME = 'neutron-keepalived-state-change'
43 
44 # The multiplier is used to compensate execution time of function sending
45 # SIGHUP to keepalived process. The constant multiplies ha_vrrp_advert_int
46 # config option and the result is the throttle delay.
47 THROTTLER_MULTIPLIER = 1.5
48 
49 
50 class HaRouterNamespace(namespaces.RouterNamespace):
51     """Namespace for HA router.
52 
53     This namespace sets the ip_nonlocal_bind to 0 for HA router namespaces.
54     It does so to prevent sending gratuitous ARPs for interfaces that got VIP
55     removed in the middle of processing.
56     It also disables ipv6 forwarding by default. Forwarding will be
57     enabled during router configuration processing only for the master node.
58     It has to be disabled on all other nodes to avoid sending MLD packets
59     which cause lost connectivity to Floating IPs.
60     """
61     def create(self):
62         super(HaRouterNamespace, self).create(ipv6_forwarding=False)
63         # HA router namespaces should not have ip_nonlocal_bind enabled
64         ip_lib.set_ip_nonlocal_bind_for_namespace(self.name, 0)
65 
66 
67 class HaRouter(router.RouterInfo):
68     def __init__(self, state_change_callback, *args, **kwargs):
69         super(HaRouter, self).__init__(*args, **kwargs)
70 
71         self.ha_port = None
72         self.keepalived_manager = None
73         self.state_change_callback = state_change_callback
74         self._ha_state = None
75         self._ha_state_path = None
76 
77     def create_router_namespace_object(
78             self, router_id, agent_conf, iface_driver, use_ipv6):
79         return HaRouterNamespace(
80             router_id, agent_conf, iface_driver, use_ipv6)
81 
82     @property
83     def ha_state_path(self):
84         if not self._ha_state_path and self.keepalived_manager:
85             self._ha_state_path = (self.keepalived_manager.
86                                    get_full_config_file_path('state'))
87         return self._ha_state_path
88 
89     @property
90     def ha_priority(self):
91         return self.router.get('priority', keepalived.HA_DEFAULT_PRIORITY)
92 
93     @property
94     def ha_vr_id(self):
95         return self.router.get('ha_vr_id')
96 
97     @property
98     def ha_state(self):
99         if self._ha_state:
100             return self._ha_state
101         try:
102             with open(self.ha_state_path, 'r') as f:
103                 self._ha_state = f.read()
104         except (OSError, IOError):
105             LOG.debug('Error while reading HA state for %s', self.router_id)
106         return self._ha_state or 'unknown'
107 
108     @ha_state.setter
109     def ha_state(self, new_state):
110         self._ha_state = new_state
111         try:
112             with open(self.ha_state_path, 'w') as f:
113                 f.write(new_state)
114         except (OSError, IOError):
115             LOG.error('Error while writing HA state for %s',
116                       self.router_id)
117 
118     @property
119     def ha_namespace(self):
120         return self.ns_name
121 
122     def is_router_master(self):
123         """this method is normally called before the ha_router object is fully
124         initialized
125         """
126         if self.router.get('_ha_state') == 'active':
127             return True
128         else:
129             return False
130 
131     def initialize(self, process_monitor):
132         ha_port = self.router.get(n_consts.HA_INTERFACE_KEY)
133         if not ha_port:
134             msg = ("Unable to process HA router %s without HA port" %
135                    self.router_id)
136             LOG.exception(msg)
137             raise Exception(msg)
138         super(HaRouter, self).initialize(process_monitor)
139 
140         self.set_ha_port()
141         self._init_keepalived_manager(process_monitor)
142         self.ha_network_added()
143         self.update_initial_state(self.state_change_callback)
144         self.spawn_state_change_monitor(process_monitor)
145 
146     def _init_keepalived_manager(self, process_monitor):
147         self.keepalived_manager = keepalived.KeepalivedManager(
148             self.router['id'],
149             keepalived.KeepalivedConf(),
150             process_monitor,
151             conf_path=self.agent_conf.ha_confs_path,
152             namespace=self.ha_namespace,
153             throttle_restart_value=(
154                 self.agent_conf.ha_vrrp_advert_int * THROTTLER_MULTIPLIER))
155 
156         config = self.keepalived_manager.config
157 
158         interface_name = self.get_ha_device_name()
159         subnets = self.ha_port.get('subnets', [])
160         ha_port_cidrs = [subnet['cidr'] for subnet in subnets]
161         instance = keepalived.KeepalivedInstance(
162             'BACKUP',
163             interface_name,
164             self.ha_vr_id,
165             ha_port_cidrs,
166             nopreempt=True,
167             advert_int=self.agent_conf.ha_vrrp_advert_int,
168             priority=self.ha_priority,
169             vrrp_health_check_interval=(
170                 self.agent_conf.ha_vrrp_health_check_interval),
171             ha_conf_dir=self.keepalived_manager.get_conf_dir())
172         instance.track_interfaces.append(interface_name)
173 
174         if self.agent_conf.ha_vrrp_auth_password:
175             # TODO(safchain): use oslo.config types when it will be available
176             # in order to check the validity of ha_vrrp_auth_type
177             instance.set_authentication(self.agent_conf.ha_vrrp_auth_type,
178                                         self.agent_conf.ha_vrrp_auth_password)
179 
180         config.add_instance(instance)
181 
182     def enable_keepalived(self):
183         self.keepalived_manager.spawn()
184 
185     def disable_keepalived(self):
186         if not self.keepalived_manager:
187             LOG.debug('Error while disabling keepalived for %s - no manager',
188                       self.router_id)
189             return
190         self.keepalived_manager.disable()
191         conf_dir = self.keepalived_manager.get_conf_dir()
192         shutil.rmtree(conf_dir)
193 
194     def _get_keepalived_instance(self):
195         return self.keepalived_manager.config.get_instance(self.ha_vr_id)
196 
197     def _get_primary_vip(self):
198         return self._get_keepalived_instance().get_primary_vip()
199 
200     def get_ha_device_name(self):
201         return (HA_DEV_PREFIX + self.ha_port['id'])[:self.driver.DEV_NAME_LEN]
202 
203     def ha_network_added(self):
204         interface_name = self.get_ha_device_name()
205 
206         self.driver.plug(self.ha_port['network_id'],
207                          self.ha_port['id'],
208                          interface_name,
209                          self.ha_port['mac_address'],
210                          namespace=self.ha_namespace,
211                          prefix=HA_DEV_PREFIX,
212                          mtu=self.ha_port.get('mtu'))
213         ip_cidrs = common_utils.fixed_ip_cidrs(self.ha_port['fixed_ips'])
214         self.driver.init_l3(interface_name, ip_cidrs,
215                             namespace=self.ha_namespace,
216                             preserve_ips=[self._get_primary_vip()])
217 
218     def ha_network_removed(self):
219         if not self.ha_port:
220             LOG.debug('Error while removing HA network for %s - no port',
221                       self.router_id)
222             return
223         self.driver.unplug(self.get_ha_device_name(),
224                            namespace=self.ha_namespace,
225                            prefix=HA_DEV_PREFIX)
226         self.ha_port = None
227 
228     def _add_vips(self, port, interface_name):
229         for ip_cidr in common_utils.fixed_ip_cidrs(port['fixed_ips']):
230             self._add_vip(ip_cidr, interface_name)
231 
232     def _add_vip(self, ip_cidr, interface, scope=None):
233         instance = self._get_keepalived_instance()
234         instance.add_vip(ip_cidr, interface, scope)
235 
236     def _remove_vip(self, ip_cidr):
237         instance = self._get_keepalived_instance()
238         instance.remove_vip_by_ip_address(ip_cidr)
239 
240     def _clear_vips(self, interface):
241         instance = self._get_keepalived_instance()
242         instance.remove_vips_vroutes_by_interface(interface)
243 
244     def _get_cidrs_from_keepalived(self, interface_name):
245         instance = self._get_keepalived_instance()
246         return instance.get_existing_vip_ip_addresses(interface_name)
247 
248     def get_router_cidrs(self, device):
249         return set(self._get_cidrs_from_keepalived(device.name))
250 
251     def routes_updated(self, old_routes, new_routes):
252         instance = self._get_keepalived_instance()
253         instance.virtual_routes.extra_routes = [
254             keepalived.KeepalivedVirtualRoute(
255                 route['destination'], route['nexthop'])
256             for route in new_routes]
257         super(HaRouter, self).routes_updated(old_routes, new_routes)
258 
259     def _add_default_gw_virtual_route(self, ex_gw_port, interface_name):
260         gateway_ips = self._get_external_gw_ips(ex_gw_port)
261 
262         default_gw_rts = []
263         instance = self._get_keepalived_instance()
264         for gw_ip in gateway_ips:
265             # TODO(Carl) This is repeated everywhere.  A method would
266             # be nice.
267             default_gw = n_consts.IP_ANY[netaddr.IPAddress(gw_ip).version]
268             default_gw_rts.append(keepalived.KeepalivedVirtualRoute(
269                 default_gw, gw_ip, interface_name))
270         instance.virtual_routes.gateway_routes = default_gw_rts
271 
272     def _add_extra_subnet_onlink_routes(self, ex_gw_port, interface_name):
273         extra_subnets = ex_gw_port.get('extra_subnets', [])
274         instance = self._get_keepalived_instance()
275         onlink_route_cidrs = set(s['cidr'] for s in extra_subnets)
276         instance.virtual_routes.extra_subnets = [
277             keepalived.KeepalivedVirtualRoute(
278                 onlink_route_cidr, None, interface_name, scope='link') for
279             onlink_route_cidr in onlink_route_cidrs]
280 
281     def _should_delete_ipv6_lladdr(self, ipv6_lladdr):
282         """Only the master should have any IP addresses configured.
283         Let keepalived manage IPv6 link local addresses, the same way we let
284         it manage IPv4 addresses. If the router is not in the master state,
285         we must delete the address first as it is autoconfigured by the kernel.
286         """
287         manager = self.keepalived_manager
288         if manager.get_process().active:
289             if self.ha_state != 'master':
290                 conf = manager.get_conf_on_disk()
291                 managed_by_keepalived = conf and ipv6_lladdr in conf
292                 if managed_by_keepalived:
293                     return False
294             else:
295                 return False
296         return True
297 
298     def _disable_ipv6_addressing_on_interface(self, interface_name):
299         """Disable IPv6 link local addressing on the device and add it as
300         a VIP to keepalived. This means that the IPv6 link local address
301         will only be present on the master.
302         """
303         device = ip_lib.IPDevice(interface_name, namespace=self.ha_namespace)
304         ipv6_lladdr = ip_lib.get_ipv6_lladdr(device.link.address)
305 
306         if self._should_delete_ipv6_lladdr(ipv6_lladdr):
307             self.driver.configure_ipv6_ra(self.ha_namespace, interface_name,
308                                           n_consts.ACCEPT_RA_DISABLED)
309             device.addr.flush(n_consts.IP_VERSION_6)
310         else:
311             self.driver.configure_ipv6_ra(
312                 self.ha_namespace, interface_name,
313                 n_consts.ACCEPT_RA_WITHOUT_FORWARDING)
314 
315         self._remove_vip(ipv6_lladdr)
316         self._add_vip(ipv6_lladdr, interface_name, scope='link')
317 
318     def _add_gateway_vip(self, ex_gw_port, interface_name):
319         self._add_vips(ex_gw_port, interface_name)
320         self._add_default_gw_virtual_route(ex_gw_port, interface_name)
321         self._add_extra_subnet_onlink_routes(ex_gw_port, interface_name)
322 
323     def add_floating_ip(self, fip, interface_name, device):
324         fip_ip = fip['floating_ip_address']
325         ip_cidr = common_utils.ip_to_cidr(fip_ip)
326         self._add_vip(ip_cidr, interface_name)
327         return n_consts.FLOATINGIP_STATUS_ACTIVE
328 
329     def remove_floating_ip(self, device, ip_cidr):
330         self._remove_vip(ip_cidr)
331         to = common_utils.cidr_to_ip(ip_cidr)
332         if device.addr.list(to=to):
333             super(HaRouter, self).remove_floating_ip(device, ip_cidr)
334 
335     def internal_network_updated(self, interface_name, ip_cidrs, mtu):
336         self.driver.set_mtu(interface_name, mtu, namespace=self.ns_name,
337                             prefix=router.INTERNAL_DEV_PREFIX)
338         self._clear_vips(interface_name)
339         self._disable_ipv6_addressing_on_interface(interface_name)
340         for ip_cidr in ip_cidrs:
341             self._add_vip(ip_cidr, interface_name)
342 
343     def _plug_ha_router_port(self, port, name_getter, prefix):
344         port_id = port['id']
345         interface_name = name_getter(port_id)
346         self.driver.plug(port['network_id'],
347                          port_id,
348                          interface_name,
349                          port['mac_address'],
350                          namespace=self.ha_namespace,
351                          prefix=prefix,
352                          mtu=port.get('mtu'))
353 
354         self._disable_ipv6_addressing_on_interface(interface_name)
355         self._add_vips(port, interface_name)
356 
357     def internal_network_added(self, port):
358         self._plug_ha_router_port(
359             port, self.get_internal_device_name, router.INTERNAL_DEV_PREFIX)
360 
361     def internal_network_removed(self, port):
362         super(HaRouter, self).internal_network_removed(port)
363 
364         interface_name = self.get_internal_device_name(port['id'])
365         self._clear_vips(interface_name)
366 
367     def _get_state_change_monitor_process_manager(self):
368         return external_process.ProcessManager(
369             self.agent_conf,
370             '%s.monitor' % self.router_id,
371             None,
372             service=KEEPALIVED_STATE_CHANGE_MONITOR_SERVICE_NAME,
373             default_cmd_callback=self._get_state_change_monitor_callback(),
374             run_as_root=True)
375 
376     def _get_state_change_monitor_callback(self):
377         ha_device = self.get_ha_device_name()
378         ha_cidr = self._get_primary_vip()
379         config_dir = self.keepalived_manager.get_conf_dir()
380         state_change_log = (
381             "%s/neutron-keepalived-state-change.log") % config_dir
382 
383         def callback(pid_file):
384             cmd = [
385                 STATE_CHANGE_PROC_NAME,
386                 '--router_id=%s' % self.router_id,
387                 '--namespace=%s' % self.ha_namespace,
388                 '--conf_dir=%s' % config_dir,
389                 '--log-file=%s' % state_change_log,
390                 '--monitor_interface=%s' % ha_device,
391                 '--monitor_cidr=%s' % ha_cidr,
392                 '--pid_file=%s' % pid_file,
393                 '--state_path=%s' % self.agent_conf.state_path,
394                 '--user=%s' % os.geteuid(),
395                 '--group=%s' % os.getegid()]
396             return cmd
397 
398         return callback
399 
400     def spawn_state_change_monitor(self, process_monitor):
401         pm = self._get_state_change_monitor_process_manager()
402         pm.enable()
403         process_monitor.register(
404             self.router_id, IP_MONITOR_PROCESS_SERVICE, pm)
405         LOG.debug("Router %(router_id)s %(process)s pid %(pid)d",
406                   {"router_id": self.router_id,
407                    "process": KEEPALIVED_STATE_CHANGE_MONITOR_SERVICE_NAME,
408                    "pid": pm.pid})
409 
410     def destroy_state_change_monitor(self, process_monitor):
411         if not self.ha_port:
412             LOG.debug('Error while destroying state change monitor for %s - '
413                       'no port', self.router_id)
414             return
415         pm = self._get_state_change_monitor_process_manager()
416         process_monitor.unregister(
417             self.router_id, IP_MONITOR_PROCESS_SERVICE)
418         pm.disable(sig=str(int(signal.SIGTERM)))
419         try:
420             common_utils.wait_until_true(lambda: not pm.active,
421                                          timeout=SIGTERM_TIMEOUT)
422         except common_utils.WaitTimeout:
423             pm.disable(sig=str(int(signal.SIGKILL)))
424 
425     def update_initial_state(self, callback):
426         addresses = ip_lib.get_devices_with_ip(self.ha_namespace,
427                                                name=self.get_ha_device_name())
428         cidrs = (address['cidr'] for address in addresses)
429         ha_cidr = self._get_primary_vip()
430         state = 'master' if ha_cidr in cidrs else 'backup'
431         self.ha_state = state
432         callback(self.router_id, state)
433 
434     @staticmethod
435     def _gateway_ports_equal(port1, port2):
436         def _get_filtered_dict(d, ignore):
437             return {k: v for k, v in d.items() if k not in ignore}
438 
439         keys_to_ignore = set([portbindings.HOST_ID, timestamp.UPDATED,
440                               revisions.REVISION])
441         port1_filtered = _get_filtered_dict(port1, keys_to_ignore)
442         port2_filtered = _get_filtered_dict(port2, keys_to_ignore)
443         return port1_filtered == port2_filtered
444 
445     def external_gateway_added(self, ex_gw_port, interface_name):
446         self._plug_external_gateway(
447             ex_gw_port, interface_name, self.ns_name, device_active=False)
448         self._add_gateway_vip(ex_gw_port, interface_name)
449         self._disable_ipv6_addressing_on_interface(interface_name)
450 
451         # Enable RA and IPv6 forwarding only for master instances. This will
452         # prevent backup routers from sending packets to the upstream switch
453         # and disrupt connections.
454         enable = self.ha_state == 'master'
455         self._configure_ipv6_params_on_gw(ex_gw_port, self.ns_name,
456                                           interface_name, enable)
457         # After IPv6 addressing is disabled on the interface, it can be set to
458         # be "active" so L2 agent can finish provisioning this port and not
459         # drop traffic to/from this interface anymore.
460         # If this would be done before disable IPv6 addressing, it would cause
461         # sending MLDv2 packets to unsubsribe from multicast group and that can
462         # lead to the break of dataplane traffic, see bug
463         # https://bugs.launchpad.net/neutron/+bug/1859832 for details
464         self.driver.set_device_internal_status(
465             interface_name, active=True, namespace=self.ns_name)
466 
467     def external_gateway_updated(self, ex_gw_port, interface_name):
468         self._plug_external_gateway(
469             ex_gw_port, interface_name, self.ha_namespace)
470         ip_cidrs = common_utils.fixed_ip_cidrs(self.ex_gw_port['fixed_ips'])
471         for old_gateway_cidr in ip_cidrs:
472             self._remove_vip(old_gateway_cidr)
473         self._add_gateway_vip(ex_gw_port, interface_name)
474 
475     def external_gateway_removed(self, ex_gw_port, interface_name):
476         self._clear_vips(interface_name)
477 
478         if self.ha_state == 'master':
479             super(HaRouter, self).external_gateway_removed(ex_gw_port,
480                                                            interface_name)
481         else:
482             # We are not the master node, so no need to delete ip addresses.
483             self.driver.unplug(interface_name,
484                                namespace=self.ns_name,
485                                prefix=router.EXTERNAL_DEV_PREFIX)
486 
487     def delete(self):
488         if self.process_monitor:
489             self.destroy_state_change_monitor(self.process_monitor)
490         self.disable_keepalived()
491         self.ha_network_removed()
492         super(HaRouter, self).delete()
493 
494     def set_ha_port(self):
495         ha_port = self.router.get(n_consts.HA_INTERFACE_KEY)
496         if not ha_port:
497             return
498         # NOTE: once HA port is set, it MUST remain this value no matter what
499         # the server return. Because there is race condition between l3-agent
500         # side sync router info for processing and server side router deleting.
501         # TODO(liuyulong): make sure router HA ports never change.
502         if not self.ha_port or (self.ha_port and
503                                 self.ha_port['status'] != ha_port['status']):
504             self.ha_port = ha_port
505 
506     def process(self):
507         super(HaRouter, self).process()
508 
509         self.set_ha_port()
510         LOG.debug("Processing HA router with HA port: %s", self.ha_port)
511         if (self.ha_port and
512                 self.ha_port['status'] == n_consts.PORT_STATUS_ACTIVE):
513             self.enable_keepalived()
514 
515     @runtime.synchronized('enable_radvd')
516     def enable_radvd(self, internal_ports=None):
517         if (self.keepalived_manager.get_process().active and
518                 self.ha_state == 'master'):
519             super(HaRouter, self).enable_radvd(internal_ports)
