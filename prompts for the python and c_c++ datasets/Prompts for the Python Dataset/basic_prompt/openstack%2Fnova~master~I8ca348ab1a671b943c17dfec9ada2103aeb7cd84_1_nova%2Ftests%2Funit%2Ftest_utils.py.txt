Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 #    Copyright 2011 Justin Santa Barbara
2 #
3 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
4 #    not use this file except in compliance with the License. You may obtain
5 #    a copy of the License at
6 #
7 #         http://www.apache.org/licenses/LICENSE-2.0
8 #
9 #    Unless required by applicable law or agreed to in writing, software
10 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 #    License for the specific language governing permissions and limitations
13 #    under the License.
14 
15 import datetime
16 import hashlib
17 import os
18 import os.path
19 import tempfile
20 
21 import eventlet
22 from keystoneauth1 import adapter as ks_adapter
23 from keystoneauth1 import exceptions as ks_exc
24 from keystoneauth1.identity import base as ks_identity
25 from keystoneauth1 import session as ks_session
26 import mock
27 import netaddr
28 from oslo_concurrency import processutils
29 from oslo_config import cfg
30 from oslo_context import context as common_context
31 from oslo_context import fixture as context_fixture
32 from oslo_log import log as logging
33 from oslo_utils import encodeutils
34 from oslo_utils import fixture as utils_fixture
35 from oslo_utils import units
36 import six
37 
38 from nova import context
39 from nova import exception
40 from nova.objects import base as obj_base
41 from nova.objects import instance as instance_obj
42 from nova import test
43 from nova.tests.unit.objects import test_objects
44 from nova.tests.unit import utils as test_utils
45 from nova import utils
46 
47 CONF = cfg.CONF
48 
49 
50 class GenericUtilsTestCase(test.NoDBTestCase):
51     def test_parse_server_string(self):
52         result = utils.parse_server_string('::1')
53         self.assertEqual(('::1', ''), result)
54         result = utils.parse_server_string('[::1]:8773')
55         self.assertEqual(('::1', '8773'), result)
56         result = utils.parse_server_string('2001:db8::192.168.1.1')
57         self.assertEqual(('2001:db8::192.168.1.1', ''), result)
58         result = utils.parse_server_string('[2001:db8::192.168.1.1]:8773')
59         self.assertEqual(('2001:db8::192.168.1.1', '8773'), result)
60         result = utils.parse_server_string('192.168.1.1')
61         self.assertEqual(('192.168.1.1', ''), result)
62         result = utils.parse_server_string('192.168.1.2:8773')
63         self.assertEqual(('192.168.1.2', '8773'), result)
64         result = utils.parse_server_string('192.168.1.3')
65         self.assertEqual(('192.168.1.3', ''), result)
66         result = utils.parse_server_string('www.example.com:8443')
67         self.assertEqual(('www.example.com', '8443'), result)
68         result = utils.parse_server_string('www.example.com')
69         self.assertEqual(('www.example.com', ''), result)
70         # error case
71         result = utils.parse_server_string('www.exa:mple.com:8443')
72         self.assertEqual(('', ''), result)
73         result = utils.parse_server_string('')
74         self.assertEqual(('', ''), result)
75 
76     def test_hostname_unicode_sanitization(self):
77         hostname = u"\u7684.test.example.com"
78         self.assertEqual("test.example.com",
79                          utils.sanitize_hostname(hostname))
80 
81     def test_hostname_sanitize_periods(self):
82         hostname = "....test.example.com..."
83         self.assertEqual("test.example.com",
84                          utils.sanitize_hostname(hostname))
85 
86     def test_hostname_sanitize_dashes(self):
87         hostname = "----test.example.com---"
88         self.assertEqual("test.example.com",
89                          utils.sanitize_hostname(hostname))
90 
91     def test_hostname_sanitize_characters(self):
92         hostname = "(#@&$!(@*--#&91)(__=+--test-host.example!!.com-0+"
93         self.assertEqual("91----test-host.example.com-0",
94                          utils.sanitize_hostname(hostname))
95 
96     def test_hostname_translate(self):
97         hostname = "<}\x1fh\x10e\x08l\x02l\x05o\x12!{>"
98         self.assertEqual("hello", utils.sanitize_hostname(hostname))
99 
100     def test_hostname_has_default(self):
101         hostname = u"\u7684hello"
102         defaultname = "Server-1"
103         self.assertEqual("hello", utils.sanitize_hostname(hostname,
104                                                           defaultname))
105 
106     def test_hostname_empty_has_default(self):
107         hostname = u"\u7684"
108         defaultname = "Server-1"
109         self.assertEqual(defaultname, utils.sanitize_hostname(hostname,
110                                                               defaultname))
111 
112     def test_hostname_empty_has_default_too_long(self):
113         hostname = u"\u7684"
114         defaultname = "a" * 64
115         self.assertEqual("a" * 63, utils.sanitize_hostname(hostname,
116                                                            defaultname))
117 
118     def test_hostname_empty_no_default(self):
119         hostname = u"\u7684"
120         self.assertEqual("", utils.sanitize_hostname(hostname))
121 
122     def test_hostname_empty_minus_period(self):
123         hostname = "---..."
124         self.assertEqual("", utils.sanitize_hostname(hostname))
125 
126     def test_hostname_with_space(self):
127         hostname = " a b c "
128         self.assertEqual("a-b-c", utils.sanitize_hostname(hostname))
129 
130     def test_hostname_too_long(self):
131         hostname = "a" * 64
132         self.assertEqual(63, len(utils.sanitize_hostname(hostname)))
133 
134     def test_hostname_truncated_no_hyphen(self):
135         hostname = "a" * 62
136         hostname = hostname + '-' + 'a'
137         res = utils.sanitize_hostname(hostname)
138         # we trim to 63 and then trim the trailing dash
139         self.assertEqual(62, len(res))
140         self.assertFalse(res.endswith('-'), 'The hostname ends with a -')
141 
142     def test_generate_password(self):
143         password = utils.generate_password()
144         self.assertTrue([c for c in password if c in '0123456789'])
145         self.assertTrue([c for c in password
146                          if c in 'abcdefghijklmnopqrstuvwxyz'])
147         self.assertTrue([c for c in password
148                          if c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'])
149 
150     @mock.patch('nova.privsep.path.chown')
151     def test_temporary_chown(self, mock_chown):
152         with tempfile.NamedTemporaryFile() as f:
153             with utils.temporary_chown(f.name, owner_uid=2):
154                 mock_chown.assert_called_once_with(f.name, uid=2)
155                 mock_chown.reset_mock()
156             mock_chown.assert_called_once_with(f.name, uid=os.getuid())
157 
158     def test_get_shortened_ipv6(self):
159         self.assertEqual("abcd:ef01:2345:6789:abcd:ef01:c0a8:fefe",
160                          utils.get_shortened_ipv6(
161                             "abcd:ef01:2345:6789:abcd:ef01:192.168.254.254"))
162         self.assertEqual("::1", utils.get_shortened_ipv6(
163                                     "0000:0000:0000:0000:0000:0000:0000:0001"))
164         self.assertEqual("caca::caca:0:babe:201:102",
165                          utils.get_shortened_ipv6(
166                                     "caca:0000:0000:caca:0000:babe:0201:0102"))
167         self.assertRaises(netaddr.AddrFormatError, utils.get_shortened_ipv6,
168                           "127.0.0.1")
169         self.assertRaises(netaddr.AddrFormatError, utils.get_shortened_ipv6,
170                           "failure")
171 
172     def test_get_shortened_ipv6_cidr(self):
173         self.assertEqual("2600::/64", utils.get_shortened_ipv6_cidr(
174                 "2600:0000:0000:0000:0000:0000:0000:0000/64"))
175         self.assertEqual("2600::/64", utils.get_shortened_ipv6_cidr(
176                 "2600::1/64"))
177         self.assertRaises(netaddr.AddrFormatError,
178                           utils.get_shortened_ipv6_cidr,
179                           "127.0.0.1")
180         self.assertRaises(netaddr.AddrFormatError,
181                           utils.get_shortened_ipv6_cidr,
182                           "failure")
183 
184     def test_safe_ip_format(self):
185         self.assertEqual("[::1]", utils.safe_ip_format("::1"))
186         self.assertEqual("127.0.0.1", utils.safe_ip_format("127.0.0.1"))
187         self.assertEqual("[::ffff:127.0.0.1]", utils.safe_ip_format(
188                          "::ffff:127.0.0.1"))
189         self.assertEqual("localhost", utils.safe_ip_format("localhost"))
190 
191     def test_format_remote_path(self):
192         self.assertEqual("[::1]:/foo/bar",
193                          utils.format_remote_path("::1", "/foo/bar"))
194         self.assertEqual("127.0.0.1:/foo/bar",
195                          utils.format_remote_path("127.0.0.1", "/foo/bar"))
196         self.assertEqual("[::ffff:127.0.0.1]:/foo/bar",
197                          utils.format_remote_path("::ffff:127.0.0.1",
198                                                   "/foo/bar"))
199         self.assertEqual("localhost:/foo/bar",
200                          utils.format_remote_path("localhost", "/foo/bar"))
201         self.assertEqual("/foo/bar", utils.format_remote_path(None,
202                                                               "/foo/bar"))
203 
204     def test_get_hash_str(self):
205         base_str = b"foo"
206         base_unicode = u"foo"
207         value = hashlib.md5(base_str).hexdigest()
208         self.assertEqual(
209             value, utils.get_hash_str(base_str))
210         self.assertEqual(
211             value, utils.get_hash_str(base_unicode))
212 
213     def test_get_obj_repr_unicode(self):
214         instance = instance_obj.Instance()
215         instance.display_name = u'\u00CD\u00F1st\u00E1\u00F1c\u00E9'
216         # should be a bytes string if python2 before conversion
217         self.assertIs(str, type(repr(instance)))
218         self.assertIs(six.text_type,
219                       type(utils.get_obj_repr_unicode(instance)))
220 
221     def test_use_rootwrap(self):
222         self.flags(disable_rootwrap=False, group='workarounds')
223         self.flags(rootwrap_config='foo')
224         cmd = utils.get_root_helper()
225         self.assertEqual('sudo nova-rootwrap foo', cmd)
226 
227     def test_use_sudo(self):
228         self.flags(disable_rootwrap=True, group='workarounds')
229         cmd = utils.get_root_helper()
230         self.assertEqual('sudo', cmd)
231 
232     def test_ssh_execute(self):
233         expected_args = ('ssh', '-o', 'BatchMode=yes',
234                          'remotehost', 'ls', '-l')
235         with mock.patch('nova.utils.execute') as mock_method:
236             utils.ssh_execute('remotehost', 'ls', '-l')
237         mock_method.assert_called_once_with(*expected_args)
238 
239     def test_generate_hostid(self):
240         host = 'host'
241         project_id = '9b9e3c847e904b0686e8ffb20e4c6381'
242         hostId = 'fa123c6f74efd4aad95f84096f9e187caa0625925a9e7837b2b46792'
243         self.assertEqual(hostId, utils.generate_hostid(host, project_id))
244 
245     def test_generate_hostid_with_none_host(self):
246         project_id = '9b9e3c847e904b0686e8ffb20e4c6381'
247         self.assertEqual('', utils.generate_hostid(None, project_id))
248 
249 
250 class TestCachedFile(test.NoDBTestCase):
251     @mock.patch('os.path.getmtime', return_value=1)
252     def test_read_cached_file(self, getmtime):
253         utils._FILE_CACHE = {
254             '/this/is/a/fake': {"data": 1123, "mtime": 1}
255         }
256         fresh, data = utils.read_cached_file("/this/is/a/fake")
257         fdata = utils._FILE_CACHE['/this/is/a/fake']["data"]
258         self.assertEqual(fdata, data)
259 
260     @mock.patch('os.path.getmtime', return_value=2)
261     def test_read_modified_cached_file(self, getmtime):
262 
263         utils._FILE_CACHE = {
264             '/this/is/a/fake': {"data": 1123, "mtime": 1}
265         }
266 
267         fake_contents = "lorem ipsum"
268 
269         with mock.patch('six.moves.builtins.open',
270                         mock.mock_open(read_data=fake_contents)):
271             fresh, data = utils.read_cached_file("/this/is/a/fake")
272 
273         self.assertEqual(data, fake_contents)
274         self.assertTrue(fresh)
275 
276     def test_delete_cached_file(self):
277         filename = '/this/is/a/fake/deletion/of/cached/file'
278         utils._FILE_CACHE = {
279             filename: {"data": 1123, "mtime": 1}
280         }
281         self.assertIn(filename, utils._FILE_CACHE)
282         utils.delete_cached_file(filename)
283         self.assertNotIn(filename, utils._FILE_CACHE)
284 
285     def test_delete_cached_file_not_exist(self):
286         # We expect that if cached file does not exist no Exception raised.
287         filename = '/this/is/a/fake/deletion/attempt/of/not/cached/file'
288         self.assertNotIn(filename, utils._FILE_CACHE)
289         utils.delete_cached_file(filename)
290         self.assertNotIn(filename, utils._FILE_CACHE)
291 
292 
293 class RootwrapDaemonTestCase(test.NoDBTestCase):
294     @mock.patch('oslo_rootwrap.client.Client')
295     def test_get_client(self, mock_client):
296         mock_conf = mock.MagicMock()
297         utils.RootwrapDaemonHelper(mock_conf)
298         mock_client.assert_called_once_with(
299             ["sudo", "nova-rootwrap-daemon", mock_conf])
300 
301     @mock.patch('nova.utils.LOG.info')
302     def test_execute(self, mock_info):
303         mock_conf = mock.MagicMock()
304         daemon = utils.RootwrapDaemonHelper(mock_conf)
305         daemon.client = mock.MagicMock()
306         daemon.client.execute = mock.Mock(return_value=(0, None, None))
307 
308         daemon.execute('a', 1, foo='bar', run_as_root=True)
309         daemon.client.execute.assert_called_once_with(['a', '1'], None)
310         mock_info.assert_has_calls([mock.call(
311             u'Executing RootwrapDaemonHelper.execute cmd=[%(cmd)r] '
312             u'kwargs=[%(kwargs)r]',
313             {'cmd': u'a 1', 'kwargs': {'run_as_root': True, 'foo': 'bar'}})])
314 
315     def test_execute_with_kwargs(self):
316         mock_conf = mock.MagicMock()
317         daemon = utils.RootwrapDaemonHelper(mock_conf)
318         daemon.client = mock.MagicMock()
319         daemon.client.execute = mock.Mock(return_value=(0, None, None))
320 
321         daemon.execute('a', 1, foo='bar', run_as_root=True, process_input=True)
322         daemon.client.execute.assert_called_once_with(['a', '1'], True)
323 
324     def test_execute_fail(self):
325         mock_conf = mock.MagicMock()
326         daemon = utils.RootwrapDaemonHelper(mock_conf)
327         daemon.client = mock.MagicMock()
328         daemon.client.execute = mock.Mock(return_value=(-2, None, None))
329 
330         self.assertRaises(processutils.ProcessExecutionError,
331                           daemon.execute, 'b', 2)
332 
333     def test_execute_pass_with_check_exit_code(self):
334         mock_conf = mock.MagicMock()
335         daemon = utils.RootwrapDaemonHelper(mock_conf)
336         daemon.client = mock.MagicMock()
337         daemon.client.execute = mock.Mock(return_value=(-2, None, None))
338         daemon.execute('b', 2, check_exit_code=[-2])
339 
340     @mock.patch('time.sleep', new=mock.Mock())
341     def test_execute_fail_with_retry(self):
342         mock_conf = mock.MagicMock()
343         daemon = utils.RootwrapDaemonHelper(mock_conf)
344         daemon.client = mock.MagicMock()
345         daemon.client.execute = mock.Mock(return_value=(-2, None, None))
346 
347         self.assertRaises(processutils.ProcessExecutionError,
348                           daemon.execute, 'b', 2, attempts=2)
349         daemon.client.execute.assert_has_calls(
350             [mock.call(['b', '2'], None),
351              mock.call(['b', '2'], None)])
352 
353     @mock.patch('time.sleep', new=mock.Mock())
354     @mock.patch('nova.utils.LOG.log')
355     def test_execute_fail_and_logging(self, mock_log):
356         mock_conf = mock.MagicMock()
357         daemon = utils.RootwrapDaemonHelper(mock_conf)
358         daemon.client = mock.MagicMock()
359         daemon.client.execute = mock.Mock(return_value=(-2, None, None))
360 
361         self.assertRaises(processutils.ProcessExecutionError,
362                           daemon.execute, 'b', 2,
363                           attempts=2,
364                           loglevel=logging.CRITICAL,
365                           log_errors=processutils.LOG_ALL_ERRORS)
366         mock_log.assert_has_calls(
367             [
368                 mock.call(logging.CRITICAL, u'Running cmd (subprocess): %s',
369                           u'b 2'),
370                 mock.call(logging.CRITICAL,
371                           'CMD "%(sanitized_cmd)s" returned: %(return_code)s '
372                           'in %(end_time)0.3fs',
373                           {'sanitized_cmd': u'b 2', 'return_code': -2,
374                            'end_time': mock.ANY}),
375                 mock.call(logging.CRITICAL,
376                           u'%(desc)r\ncommand: %(cmd)r\nexit code: %(code)r'
377                           u'\nstdout: %(stdout)r\nstderr: %(stderr)r',
378                           {'code': -2, 'cmd': u'b 2', 'stdout': u'None',
379                            'stderr': u'None', 'desc': None}),
380                 mock.call(logging.CRITICAL, u'%r failed. Retrying.', u'b 2'),
381                 mock.call(logging.CRITICAL, u'Running cmd (subprocess): %s',
382                           u'b 2'),
383                 mock.call(logging.CRITICAL,
384                           'CMD "%(sanitized_cmd)s" returned: %(return_code)s '
385                           'in %(end_time)0.3fs',
386                           {'sanitized_cmd': u'b 2', 'return_code': -2,
387                            'end_time': mock.ANY}),
388                 mock.call(logging.CRITICAL,
389                           u'%(desc)r\ncommand: %(cmd)r\nexit code: %(code)r'
390                           u'\nstdout: %(stdout)r\nstderr: %(stderr)r',
391                           {'code': -2, 'cmd': u'b 2', 'stdout': u'None',
392                            'stderr': u'None', 'desc': None}),
393                 mock.call(logging.CRITICAL, u'%r failed. Not Retrying.',
394                           u'b 2')]
395         )
396 
397     def test_trycmd(self):
398         mock_conf = mock.MagicMock()
399         daemon = utils.RootwrapDaemonHelper(mock_conf)
400         daemon.client = mock.MagicMock()
401         daemon.client.execute = mock.Mock(return_value=(0, None, None))
402 
403         daemon.trycmd('a', 1, foo='bar', run_as_root=True)
404         daemon.client.execute.assert_called_once_with(['a', '1'], None)
405 
406     def test_trycmd_with_kwargs(self):
407         mock_conf = mock.MagicMock()
408         daemon = utils.RootwrapDaemonHelper(mock_conf)
409         daemon.execute = mock.Mock(return_value=('out', 'err'))
410 
411         daemon.trycmd('a', 1, foo='bar', run_as_root=True,
412                       loglevel=logging.WARN,
413                       log_errors=True,
414                       process_input=True,
415                       delay_on_retry=False,
416                       attempts=5,
417                       check_exit_code=[200])
418         daemon.execute.assert_called_once_with('a', 1, attempts=5,
419                                                check_exit_code=[200],
420                                                delay_on_retry=False, foo='bar',
421                                                log_errors=True, loglevel=30,
422                                                process_input=True,
423                                                run_as_root=True)
424 
425     def test_trycmd_fail(self):
426         mock_conf = mock.MagicMock()
427         daemon = utils.RootwrapDaemonHelper(mock_conf)
428         daemon.client = mock.MagicMock()
429         daemon.client.execute = mock.Mock(return_value=(-2, None, None))
430 
431         expected_err = six.text_type('''\
432 Unexpected error while running command.
433 Command: a 1
434 Exit code: -2''')
435 
436         out, err = daemon.trycmd('a', 1, foo='bar', run_as_root=True)
437         daemon.client.execute.assert_called_once_with(['a', '1'], None)
438         self.assertIn(expected_err, err)
439 
440     @mock.patch('time.sleep', new=mock.Mock())
441     def test_trycmd_fail_with_retry(self):
442         mock_conf = mock.MagicMock()
443         daemon = utils.RootwrapDaemonHelper(mock_conf)
444         daemon.client = mock.MagicMock()
445         daemon.client.execute = mock.Mock(return_value=(-2, None, None))
446 
447         expected_err = six.text_type('''\
448 Unexpected error while running command.
449 Command: a 1
450 Exit code: -2''')
451 
452         out, err = daemon.trycmd('a', 1, foo='bar', run_as_root=True,
453                                  attempts=3)
454         self.assertIn(expected_err, err)
455         daemon.client.execute.assert_has_calls(
456             [mock.call(['a', '1'], None),
457              mock.call(['a', '1'], None),
458              mock.call(['a', '1'], None)])
459 
460 
461 class AuditPeriodTest(test.NoDBTestCase):
462 
463     def setUp(self):
464         super(AuditPeriodTest, self).setUp()
465         # a fairly random time to test with
466         self.useFixture(utils_fixture.TimeFixture(
467             datetime.datetime(second=23,
468                               minute=12,
469                               hour=8,
470                               day=5,
471                               month=3,
472                               year=2012)))
473 
474     def test_hour(self):
475         begin, end = utils.last_completed_audit_period(unit='hour')
476         self.assertEqual(begin, datetime.datetime(
477                                            hour=7,
478                                            day=5,
479                                            month=3,
480                                            year=2012))
481         self.assertEqual(end, datetime.datetime(
482                                            hour=8,
483                                            day=5,
484                                            month=3,
485                                            year=2012))
486 
487     def test_hour_with_offset_before_current(self):
488         begin, end = utils.last_completed_audit_period(unit='hour@10')
489         self.assertEqual(begin, datetime.datetime(
490                                            minute=10,
491                                            hour=7,
492                                            day=5,
493                                            month=3,
494                                            year=2012))
495         self.assertEqual(end, datetime.datetime(
496                                            minute=10,
497                                            hour=8,
498                                            day=5,
499                                            month=3,
500                                            year=2012))
501 
502     def test_hour_with_offset_after_current(self):
503         begin, end = utils.last_completed_audit_period(unit='hour@30')
504         self.assertEqual(begin, datetime.datetime(
505                                            minute=30,
506                                            hour=6,
507                                            day=5,
508                                            month=3,
509                                            year=2012))
510         self.assertEqual(end, datetime.datetime(
511                                            minute=30,
512                                            hour=7,
513                                            day=5,
514                                            month=3,
515                                            year=2012))
516 
517     def test_day(self):
518         begin, end = utils.last_completed_audit_period(unit='day')
519         self.assertEqual(begin, datetime.datetime(
520                                            day=4,
521                                            month=3,
522                                            year=2012))
523         self.assertEqual(end, datetime.datetime(
524                                            day=5,
525                                            month=3,
526                                            year=2012))
527 
528     def test_day_with_offset_before_current(self):
529         begin, end = utils.last_completed_audit_period(unit='day@6')
530         self.assertEqual(begin, datetime.datetime(
531                                            hour=6,
532                                            day=4,
533                                            month=3,
534                                            year=2012))
535         self.assertEqual(end, datetime.datetime(
536                                            hour=6,
537                                            day=5,
538                                            month=3,
539                                            year=2012))
540 
541     def test_day_with_offset_after_current(self):
542         begin, end = utils.last_completed_audit_period(unit='day@10')
543         self.assertEqual(begin, datetime.datetime(
544                                            hour=10,
545                                            day=3,
546                                            month=3,
547                                            year=2012))
548         self.assertEqual(end, datetime.datetime(
549                                            hour=10,
550                                            day=4,
551                                            month=3,
552                                            year=2012))
553 
554     def test_month(self):
555         begin, end = utils.last_completed_audit_period(unit='month')
556         self.assertEqual(begin, datetime.datetime(
557                                            day=1,
558                                            month=2,
559                                            year=2012))
560         self.assertEqual(end, datetime.datetime(
561                                            day=1,
562                                            month=3,
563                                            year=2012))
564 
565     def test_month_with_offset_before_current(self):
566         begin, end = utils.last_completed_audit_period(unit='month@2')
567         self.assertEqual(begin, datetime.datetime(
568                                            day=2,
569                                            month=2,
570                                            year=2012))
571         self.assertEqual(end, datetime.datetime(
572                                            day=2,
573                                            month=3,
574                                            year=2012))
575 
576     def test_month_with_offset_after_current(self):
577         begin, end = utils.last_completed_audit_period(unit='month@15')
578         self.assertEqual(begin, datetime.datetime(
579                                            day=15,
580                                            month=1,
581                                            year=2012))
582         self.assertEqual(end, datetime.datetime(
583                                            day=15,
584                                            month=2,
585                                            year=2012))
586 
587     def test_year(self):
588         begin, end = utils.last_completed_audit_period(unit='year')
589         self.assertEqual(begin, datetime.datetime(
590                                            day=1,
591                                            month=1,
592                                            year=2011))
593         self.assertEqual(end, datetime.datetime(
594                                            day=1,
595                                            month=1,
596                                            year=2012))
597 
598     def test_year_with_offset_before_current(self):
599         begin, end = utils.last_completed_audit_period(unit='year@2')
600         self.assertEqual(begin, datetime.datetime(
601                                            day=1,
602                                            month=2,
603                                            year=2011))
604         self.assertEqual(end, datetime.datetime(
605                                            day=1,
606                                            month=2,
607                                            year=2012))
608 
609     def test_year_with_offset_after_current(self):
610         begin, end = utils.last_completed_audit_period(unit='year@6')
611         self.assertEqual(begin, datetime.datetime(
612                                            day=1,
613                                            month=6,
614                                            year=2010))
615         self.assertEqual(end, datetime.datetime(
616                                            day=1,
617                                            month=6,
618                                            year=2011))
619 
620 
621 class MetadataToDictTestCase(test.NoDBTestCase):
622     def test_metadata_to_dict(self):
623         self.assertEqual(utils.metadata_to_dict(
624                 [{'key': 'foo1', 'value': 'bar'},
625                  {'key': 'foo2', 'value': 'baz'}]),
626                          {'foo1': 'bar', 'foo2': 'baz'})
627 
628     def test_metadata_to_dict_with_include_deleted(self):
629         metadata = [{'key': 'foo1', 'value': 'bar', 'deleted': 1442875429,
630                      'other': 'stuff'},
631                     {'key': 'foo2', 'value': 'baz', 'deleted': 0,
632                      'other': 'stuff2'}]
633         self.assertEqual({'foo1': 'bar', 'foo2': 'baz'},
634                          utils.metadata_to_dict(metadata,
635                                                 include_deleted=True))
636         self.assertEqual({'foo2': 'baz'},
637                          utils.metadata_to_dict(metadata,
638                                                 include_deleted=False))
639         # verify correct default behavior
640         self.assertEqual(utils.metadata_to_dict(metadata),
641                          utils.metadata_to_dict(metadata,
642                                                 include_deleted=False))
643 
644     def test_metadata_to_dict_empty(self):
645         self.assertEqual({}, utils.metadata_to_dict([]))
646         self.assertEqual({}, utils.metadata_to_dict([], include_deleted=True))
647         self.assertEqual({}, utils.metadata_to_dict([], include_deleted=False))
648 
649     def test_dict_to_metadata(self):
650         def sort_key(adict):
651             return sorted(adict.items())
652 
653         metadata = utils.dict_to_metadata(dict(foo1='bar1', foo2='bar2'))
654         expected = [{'key': 'foo1', 'value': 'bar1'},
655                     {'key': 'foo2', 'value': 'bar2'}]
656         self.assertEqual(sorted(metadata, key=sort_key),
657                          sorted(expected, key=sort_key))
658 
659     def test_dict_to_metadata_empty(self):
660         self.assertEqual(utils.dict_to_metadata({}), [])
661 
662 
663 class ExpectedArgsTestCase(test.NoDBTestCase):
664     def test_passes(self):
665         @utils.expects_func_args('foo', 'baz')
666         def dec(f):
667             return f
668 
669         @dec
670         def func(foo, bar, baz="lol"):
671             pass
672 
673         # Call to ensure nothing errors
674         func(None, None)
675 
676     def test_raises(self):
677         @utils.expects_func_args('foo', 'baz')
678         def dec(f):
679             return f
680 
681         def func(bar, baz):
682             pass
683 
684         self.assertRaises(TypeError, dec, func)
685 
686     def test_var_no_of_args(self):
687         @utils.expects_func_args('foo')
688         def dec(f):
689             return f
690 
691         @dec
692         def func(bar, *args, **kwargs):
693             pass
694 
695         # Call to ensure nothing errors
696         func(None)
697 
698     def test_more_layers(self):
699         @utils.expects_func_args('foo', 'baz')
700         def dec(f):
701             return f
702 
703         def dec_2(f):
704             def inner_f(*a, **k):
705                 return f()
706             return inner_f
707 
708         @dec_2
709         def func(bar, baz):
710             pass
711 
712         self.assertRaises(TypeError, dec, func)
713 
714 
715 class StringLengthTestCase(test.NoDBTestCase):
716     def test_check_string_length(self):
717         self.assertIsNone(utils.check_string_length(
718                           'test', 'name', max_length=255))
719         self.assertRaises(exception.InvalidInput,
720                           utils.check_string_length,
721                           11, 'name', max_length=255)
722         self.assertRaises(exception.InvalidInput,
723                           utils.check_string_length,
724                           '', 'name', min_length=1)
725         self.assertRaises(exception.InvalidInput,
726                           utils.check_string_length,
727                           'a' * 256, 'name', max_length=255)
728 
729     def test_check_string_length_noname(self):
730         self.assertIsNone(utils.check_string_length(
731                           'test', max_length=255))
732         self.assertRaises(exception.InvalidInput,
733                           utils.check_string_length,
734                           11, max_length=255)
735         self.assertRaises(exception.InvalidInput,
736                           utils.check_string_length,
737                           '', min_length=1)
738         self.assertRaises(exception.InvalidInput,
739                           utils.check_string_length,
740                           'a' * 256, max_length=255)
741 
742 
743 class ValidateIntegerTestCase(test.NoDBTestCase):
744     def test_exception_converted(self):
745         self.assertRaises(exception.InvalidInput,
746                           utils.validate_integer,
747                           "im-not-an-int", "not-an-int")
748         self.assertRaises(exception.InvalidInput,
749                           utils.validate_integer,
750                           3.14, "Pie")
751         self.assertRaises(exception.InvalidInput,
752                           utils.validate_integer,
753                           "299", "Sparta no-show",
754                           min_value=300, max_value=300)
755         self.assertRaises(exception.InvalidInput,
756                           utils.validate_integer,
757                           55, "doing 55 in a 54",
758                           max_value=54)
759         self.assertRaises(exception.InvalidInput,
760                           utils.validate_integer,
761                           six.unichr(129), "UnicodeError",
762                           max_value=1000)
763 
764 
765 class ValidateNeutronConfiguration(test.NoDBTestCase):
766     def test_nova_network(self):
767         self.flags(use_neutron=False)
768         self.assertFalse(utils.is_neutron())
769 
770     def test_neutron(self):
771         self.flags(use_neutron=True)
772         self.assertTrue(utils.is_neutron())
773 
774 
775 class AutoDiskConfigUtilTestCase(test.NoDBTestCase):
776     def test_is_auto_disk_config_disabled(self):
777         self.assertTrue(utils.is_auto_disk_config_disabled("Disabled "))
778 
779     def test_is_auto_disk_config_disabled_none(self):
780         self.assertFalse(utils.is_auto_disk_config_disabled(None))
781 
782     def test_is_auto_disk_config_disabled_false(self):
783         self.assertFalse(utils.is_auto_disk_config_disabled("false"))
784 
785 
786 class GetSystemMetadataFromImageTestCase(test.NoDBTestCase):
787     def get_image(self):
788         image_meta = {
789             "id": "fake-image",
790             "name": "fake-name",
791             "min_ram": 1,
792             "min_disk": 1,
793             "disk_format": "raw",
794             "container_format": "bare",
795         }
796 
797         return image_meta
798 
799     def get_flavor(self):
800         flavor = {
801             "id": "fake.flavor",
802             "root_gb": 10,
803         }
804 
805         return flavor
806 
807     def test_base_image_properties(self):
808         image = self.get_image()
809 
810         # Verify that we inherit all the needed keys
811         sys_meta = utils.get_system_metadata_from_image(image)
812         for key in utils.SM_INHERITABLE_KEYS:
813             sys_key = "%s%s" % (utils.SM_IMAGE_PROP_PREFIX, key)
814             self.assertEqual(image[key], sys_meta.get(sys_key))
815 
816         # Verify that everything else is ignored
817         self.assertEqual(len(sys_meta), len(utils.SM_INHERITABLE_KEYS))
818 
819     def test_inherit_image_properties(self):
820         image = self.get_image()
821         image["properties"] = {"foo1": "bar", "foo2": "baz"}
822 
823         sys_meta = utils.get_system_metadata_from_image(image)
824 
825         # Verify that we inherit all the image properties
826         for key, expected in image["properties"].items():
827             sys_key = "%s%s" % (utils.SM_IMAGE_PROP_PREFIX, key)
828             self.assertEqual(sys_meta[sys_key], expected)
829 
830     def test_skip_image_properties(self):
831         image = self.get_image()
832         image["properties"] = {
833             "foo1": "bar", "foo2": "baz",
834             "mappings": "wizz", "img_block_device_mapping": "eek",
835         }
836 
837         sys_meta = utils.get_system_metadata_from_image(image)
838 
839         # Verify that we inherit all the image properties
840         for key, expected in image["properties"].items():
841             sys_key = "%s%s" % (utils.SM_IMAGE_PROP_PREFIX, key)
842 
843             if key in utils.SM_SKIP_KEYS:
844                 self.assertNotIn(sys_key, sys_meta)
845             else:
846                 self.assertEqual(sys_meta[sys_key], expected)
847 
848     def test_vhd_min_disk_image(self):
849         image = self.get_image()
850         flavor = self.get_flavor()
851 
852         image["disk_format"] = "vhd"
853 
854         sys_meta = utils.get_system_metadata_from_image(image, flavor)
855 
856         # Verify that the min_disk property is taken from
857         # flavor's root_gb when using vhd disk format
858         sys_key = "%s%s" % (utils.SM_IMAGE_PROP_PREFIX, "min_disk")
859         self.assertEqual(sys_meta[sys_key], flavor["root_gb"])
860 
861     def test_dont_inherit_empty_values(self):
862         image = self.get_image()
863 
864         for key in utils.SM_INHERITABLE_KEYS:
865             image[key] = None
866 
867         sys_meta = utils.get_system_metadata_from_image(image)
868 
869         # Verify that the empty properties have not been inherited
870         for key in utils.SM_INHERITABLE_KEYS:
871             sys_key = "%s%s" % (utils.SM_IMAGE_PROP_PREFIX, key)
872             self.assertNotIn(sys_key, sys_meta)
873 
874 
875 class GetImageFromSystemMetadataTestCase(test.NoDBTestCase):
876     def get_system_metadata(self):
877         sys_meta = {
878             "image_min_ram": 1,
879             "image_min_disk": 1,
880             "image_disk_format": "raw",
881             "image_container_format": "bare",
882         }
883 
884         return sys_meta
885 
886     def test_image_from_system_metadata(self):
887         sys_meta = self.get_system_metadata()
888         sys_meta["%soo1" % utils.SM_IMAGE_PROP_PREFIX] = "bar"
889         sys_meta["%soo2" % utils.SM_IMAGE_PROP_PREFIX] = "baz"
890         sys_meta["%simg_block_device_mapping" %
891                  utils.SM_IMAGE_PROP_PREFIX] = "eek"
892 
893         image = utils.get_image_from_system_metadata(sys_meta)
894 
895         # Verify that we inherit all the needed keys
896         for key in utils.SM_INHERITABLE_KEYS:
897             sys_key = "%s%s" % (utils.SM_IMAGE_PROP_PREFIX, key)
898             self.assertEqual(image[key], sys_meta.get(sys_key))
899 
900         # Verify that we inherit the rest of metadata as properties
901         self.assertIn("properties", image)
902 
903         for key in image["properties"]:
904             sys_key = "%s%s" % (utils.SM_IMAGE_PROP_PREFIX, key)
905             self.assertEqual(image["properties"][key], sys_meta[sys_key])
906 
907         self.assertNotIn("img_block_device_mapping", image["properties"])
908 
909     def test_dont_inherit_empty_values(self):
910         sys_meta = self.get_system_metadata()
911 
912         for key in utils.SM_INHERITABLE_KEYS:
913             sys_key = "%s%s" % (utils.SM_IMAGE_PROP_PREFIX, key)
914             sys_meta[sys_key] = None
915 
916         image = utils.get_image_from_system_metadata(sys_meta)
917 
918         # Verify that the empty properties have not been inherited
919         for key in utils.SM_INHERITABLE_KEYS:
920             self.assertNotIn(key, image)
921 
922 
923 class GetImageMetadataFromVolumeTestCase(test.NoDBTestCase):
924     def test_inherit_image_properties(self):
925         properties = {"fake_prop": "fake_value"}
926         volume = {"volume_image_metadata": properties}
927         image_meta = utils.get_image_metadata_from_volume(volume)
928         self.assertEqual(properties, image_meta["properties"])
929 
930     def test_image_size(self):
931         volume = {"size": 10}
932         image_meta = utils.get_image_metadata_from_volume(volume)
933         self.assertEqual(10 * units.Gi, image_meta["size"])
934 
935     def test_image_status(self):
936         volume = {}
937         image_meta = utils.get_image_metadata_from_volume(volume)
938         self.assertEqual("active", image_meta["status"])
939 
940     def test_values_conversion(self):
941         properties = {"min_ram": "5", "min_disk": "7"}
942         volume = {"volume_image_metadata": properties}
943         image_meta = utils.get_image_metadata_from_volume(volume)
944         self.assertEqual(5, image_meta["min_ram"])
945         self.assertEqual(7, image_meta["min_disk"])
946 
947     def test_suppress_not_image_properties(self):
948         properties = {"min_ram": "256", "min_disk": "128",
949                       "image_id": "fake_id", "image_name": "fake_name",
950                       "container_format": "ami", "disk_format": "ami",
951                       "size": "1234", "checksum": "fake_checksum"}
952         volume = {"volume_image_metadata": properties}
953         image_meta = utils.get_image_metadata_from_volume(volume)
954         self.assertEqual({}, image_meta["properties"])
955         self.assertEqual(0, image_meta["size"])
956         # volume's properties should not be touched
957         self.assertNotEqual({}, properties)
958 
959 
960 class ResourceFilterTestCase(test.NoDBTestCase):
961     def _assert_filtering(self, res_list, filts, expected_tags):
962         actual_tags = utils.filter_and_format_resource_metadata('instance',
963                 res_list, filts, 'metadata')
964         self.assertJsonEqual(expected_tags, actual_tags)
965 
966     def test_filter_and_format_resource_metadata(self):
967         # Create some tags
968         # One overlapping pair, and one different key value pair
969         # i1 : foo=bar, bax=wibble
970         # i2 : foo=bar, baz=quux
971 
972         # resources
973         i1 = {
974                 'uuid': '1',
975                 'metadata': {'foo': 'bar', 'bax': 'wibble'},
976             }
977         i2 = {
978                 'uuid': '2',
979                 'metadata': {'foo': 'bar', 'baz': 'quux'},
980             }
981 
982         # Resources list
983         rl = [i1, i2]
984 
985         # tags
986         i11 = {'instance_id': '1', 'key': 'foo', 'value': 'bar'}
987         i12 = {'instance_id': '1', 'key': 'bax', 'value': 'wibble'}
988         i21 = {'instance_id': '2', 'key': 'foo', 'value': 'bar'}
989         i22 = {'instance_id': '2', 'key': 'baz', 'value': 'quux'}
990 
991         # No filter
992         self._assert_filtering(rl, [], [i11, i12, i21, i22])
993         self._assert_filtering(rl, {}, [i11, i12, i21, i22])
994 
995         # Key search
996 
997         # Both should have tags with key 'foo' and value 'bar'
998         self._assert_filtering(rl, {'key': 'foo', 'value': 'bar'}, [i11, i21])
999 
1000         # Both should have tags with key 'foo'
1001         self._assert_filtering(rl, {'key': 'foo'}, [i11, i21])
1002 
1003         # Only i2 should have tags with key 'baz' and value 'quux'
1004         self._assert_filtering(rl, {'key': 'baz', 'value': 'quux'}, [i22])
1005 
1006         # Only i2 should have tags with value 'quux'
1007         self._assert_filtering(rl, {'value': 'quux'}, [i22])
1008 
1009         # Empty list should be returned when no tags match
1010         self._assert_filtering(rl, {'key': 'split', 'value': 'banana'}, [])
1011 
1012         # Multiple values
1013 
1014         # Only i2 should have tags with key 'baz' and values in the set
1015         # ['quux', 'wibble']
1016         self._assert_filtering(rl, {'key': 'baz', 'value': ['quux', 'wibble']},
1017                 [i22])
1018 
1019         # But when specified as two different filters, no tags should be
1020         # returned. This is because, the filter will mean "return tags which
1021         # have (key=baz AND value=quux) AND (key=baz AND value=wibble)
1022         self._assert_filtering(rl, [{'key': 'baz', 'value': 'quux'},
1023             {'key': 'baz', 'value': 'wibble'}], [])
1024 
1025         # Test for regex
1026         self._assert_filtering(rl, {'value': '\\Aqu..*\\Z(?s)'}, [i22])
1027 
1028         # Make sure bug #1365887 is fixed
1029         i1['metadata']['key3'] = 'a'
1030         self._assert_filtering(rl, {'value': 'banana'}, [])
1031 
1032 
1033 class SafeTruncateTestCase(test.NoDBTestCase):
1034     def test_exception_to_dict_with_long_message_3_bytes(self):
1035         # Generate Chinese byte string whose length is 300. This Chinese UTF-8
1036         # character occupies 3 bytes. After truncating, the byte string length
1037         # should be 255.
1038         msg = u'\u8d75' * 100
1039         truncated_msg = utils.safe_truncate(msg, 255)
1040         byte_message = encodeutils.safe_encode(truncated_msg)
1041         self.assertEqual(255, len(byte_message))
1042 
1043     def test_exception_to_dict_with_long_message_2_bytes(self):
1044         # Generate Russian byte string whose length is 300. This Russian UTF-8
1045         # character occupies 2 bytes. After truncating, the byte string length
1046         # should be 254.
1047         msg = encodeutils.safe_decode('\xd0\x92' * 150)
1048         truncated_msg = utils.safe_truncate(msg, 255)
1049         byte_message = encodeutils.safe_encode(truncated_msg)
1050         self.assertEqual(254, len(byte_message))
1051 
1052 
1053 class SpawnNTestCase(test.NoDBTestCase):
1054     def setUp(self):
1055         super(SpawnNTestCase, self).setUp()
1056         self.useFixture(context_fixture.ClearRequestContext())
1057         self.spawn_name = 'spawn_n'
1058 
1059     def test_spawn_n_no_context(self):
1060         self.assertIsNone(common_context.get_current())
1061 
1062         def _fake_spawn(func, *args, **kwargs):
1063             # call the method to ensure no error is raised
1064             func(*args, **kwargs)
1065             self.assertEqual('test', args[0])
1066 
1067         def fake(arg):
1068             pass
1069 
1070         with mock.patch.object(eventlet, self.spawn_name, _fake_spawn):
1071             getattr(utils, self.spawn_name)(fake, 'test')
1072         self.assertIsNone(common_context.get_current())
1073 
1074     def test_spawn_n_context(self):
1075         self.assertIsNone(common_context.get_current())
1076         ctxt = context.RequestContext('user', 'project')
1077 
1078         def _fake_spawn(func, *args, **kwargs):
1079             # call the method to ensure no error is raised
1080             func(*args, **kwargs)
1081             self.assertEqual(ctxt, args[0])
1082             self.assertEqual('test', kwargs['kwarg1'])
1083 
1084         def fake(context, kwarg1=None):
1085             pass
1086 
1087         with mock.patch.object(eventlet, self.spawn_name, _fake_spawn):
1088             getattr(utils, self.spawn_name)(fake, ctxt, kwarg1='test')
1089         self.assertEqual(ctxt, common_context.get_current())
1090 
1091     def test_spawn_n_context_different_from_passed(self):
1092         self.assertIsNone(common_context.get_current())
1093         ctxt = context.RequestContext('user', 'project')
1094         ctxt_passed = context.RequestContext('user', 'project',
1095                 overwrite=False)
1096         self.assertEqual(ctxt, common_context.get_current())
1097 
1098         def _fake_spawn(func, *args, **kwargs):
1099             # call the method to ensure no error is raised
1100             func(*args, **kwargs)
1101             self.assertEqual(ctxt_passed, args[0])
1102             self.assertEqual('test', kwargs['kwarg1'])
1103 
1104         def fake(context, kwarg1=None):
1105             pass
1106 
1107         with mock.patch.object(eventlet, self.spawn_name, _fake_spawn):
1108             getattr(utils, self.spawn_name)(fake, ctxt_passed, kwarg1='test')
1109         self.assertEqual(ctxt, common_context.get_current())
1110 
1111 
1112 class SpawnTestCase(SpawnNTestCase):
1113     def setUp(self):
1114         super(SpawnTestCase, self).setUp()
1115         self.spawn_name = 'spawn'
1116 
1117 
1118 class UT8TestCase(test.NoDBTestCase):
1119     def test_none_value(self):
1120         self.assertIsInstance(utils.utf8(None), type(None))
1121 
1122     def test_bytes_value(self):
1123         some_value = b"fake data"
1124         return_value = utils.utf8(some_value)
1125         # check that type of returned value doesn't changed
1126         self.assertIsInstance(return_value, type(some_value))
1127         self.assertEqual(some_value, return_value)
1128 
1129     def test_not_text_type(self):
1130         return_value = utils.utf8(1)
1131         self.assertEqual(b"1", return_value)
1132         self.assertIsInstance(return_value, six.binary_type)
1133 
1134     def test_text_type_with_encoding(self):
1135         some_value = 'test\u2026config'
1136         self.assertEqual(some_value, utils.utf8(some_value).decode("utf-8"))
1137 
1138 
1139 class TestObjectCallHelpers(test.NoDBTestCase):
1140     def test_with_primitives(self):
1141         tester = mock.Mock()
1142         tester.foo(1, 'two', three='four')
1143         self.assertTrue(
1144             test_utils.obj_called_with(tester.foo, 1, 'two', three='four'))
1145         self.assertFalse(
1146             test_utils.obj_called_with(tester.foo, 42, 'two', three='four'))
1147 
1148     def test_with_object(self):
1149         obj_base.NovaObjectRegistry.register(test_objects.MyObj)
1150         obj = test_objects.MyObj(foo=1, bar='baz')
1151         tester = mock.Mock()
1152         tester.foo(1, obj)
1153         self.assertTrue(
1154             test_utils.obj_called_with(
1155                 tester.foo, 1,
1156                 test_objects.MyObj(foo=1, bar='baz')))
1157         self.assertFalse(
1158             test_utils.obj_called_with(
1159                 tester.foo, 1,
1160                 test_objects.MyObj(foo=2, bar='baz')))
1161 
1162     def test_with_object_multiple(self):
1163         obj_base.NovaObjectRegistry.register(test_objects.MyObj)
1164         obj1 = test_objects.MyObj(foo=1, bar='baz')
1165         obj2 = test_objects.MyObj(foo=3, bar='baz')
1166         tester = mock.Mock()
1167         tester.foo(1, obj1)
1168         tester.foo(1, obj1)
1169         tester.foo(3, obj2)
1170 
1171         # Called at all
1172         self.assertTrue(
1173             test_utils.obj_called_with(
1174                 tester.foo, 1,
1175                 test_objects.MyObj(foo=1, bar='baz')))
1176 
1177         # Called once (not true)
1178         self.assertFalse(
1179             test_utils.obj_called_once_with(
1180                 tester.foo, 1,
1181                 test_objects.MyObj(foo=1, bar='baz')))
1182 
1183         # Not called with obj.foo=2
1184         self.assertFalse(
1185             test_utils.obj_called_with(
1186                 tester.foo, 1,
1187                 test_objects.MyObj(foo=2, bar='baz')))
1188 
1189         # Called with obj.foo.3
1190         self.assertTrue(
1191             test_utils.obj_called_with(
1192                 tester.foo, 3,
1193                 test_objects.MyObj(foo=3, bar='baz')))
1194 
1195         # Called once with obj.foo.3
1196         self.assertTrue(
1197             test_utils.obj_called_once_with(
1198                 tester.foo, 3,
1199                 test_objects.MyObj(foo=3, bar='baz')))
1200 
1201 
1202 class GetKSAAdapterTestCase(test.NoDBTestCase):
1203     """Tests for nova.utils.get_endpoint_data()."""
1204     def setUp(self):
1205         super(GetKSAAdapterTestCase, self).setUp()
1206         self.sess = mock.create_autospec(ks_session.Session, instance=True)
1207         self.auth = mock.create_autospec(ks_identity.BaseIdentityPlugin,
1208                                          instance=True)
1209 
1210         load_sess_p = mock.patch(
1211             'keystoneauth1.loading.load_session_from_conf_options')
1212         self.addCleanup(load_sess_p.stop)
1213         self.load_sess = load_sess_p.start()
1214         self.load_sess.return_value = self.sess
1215 
1216         load_adap_p = mock.patch(
1217             'keystoneauth1.loading.load_adapter_from_conf_options')
1218         self.addCleanup(load_adap_p.stop)
1219         self.load_adap = load_adap_p.start()
1220 
1221         load_auth_p = mock.patch(
1222             'keystoneauth1.loading.load_auth_from_conf_options')
1223         self.addCleanup(load_auth_p.stop)
1224         self.load_auth = load_auth_p.start()
1225         self.load_auth.return_value = self.auth
1226 
1227     def test_bogus_service_type(self):
1228         self.assertRaises(exception.ConfGroupForServiceTypeNotFound,
1229                           utils.get_ksa_adapter, 'bogus')
1230         self.load_auth.assert_not_called()
1231         self.load_sess.assert_not_called()
1232         self.load_adap.assert_not_called()
1233 
1234     def test_all_params(self):
1235         ret = utils.get_ksa_adapter(
1236             'image', ksa_auth='auth', ksa_session='sess',
1237             min_version='min', max_version='max')
1238         # Returned the result of load_adapter_from_conf_options
1239         self.assertEqual(self.load_adap.return_value, ret)
1240         # Because we supplied ksa_auth, load_auth* not called
1241         self.load_auth.assert_not_called()
1242         # Ditto ksa_session/load_session*
1243         self.load_sess.assert_not_called()
1244         # load_adapter* called with what we passed in (and the right group)
1245         self.load_adap.assert_called_once_with(
1246             utils.CONF, 'glance', session='sess', auth='auth',
1247             min_version='min', max_version='max', raise_exc=False)
1248 
1249     def test_auth_from_session(self):
1250         self.sess.auth = 'auth'
1251         ret = utils.get_ksa_adapter('baremetal', ksa_session=self.sess)
1252         # Returned the result of load_adapter_from_conf_options
1253         self.assertEqual(self.load_adap.return_value, ret)
1254         # Because ksa_auth found in ksa_session, load_auth* not called
1255         self.load_auth.assert_not_called()
1256         # Because we supplied ksa_session, load_session* not called
1257         self.load_sess.assert_not_called()
1258         # load_adapter* called with the auth from the session
1259         self.load_adap.assert_called_once_with(
1260             utils.CONF, 'ironic', session=self.sess, auth='auth',
1261             min_version=None, max_version=None, raise_exc=False)
1262 
1263     def test_load_auth_and_session(self):
1264         ret = utils.get_ksa_adapter('volumev3')
1265         # Returned the result of load_adapter_from_conf_options
1266         self.assertEqual(self.load_adap.return_value, ret)
1267         # Had to load the auth
1268         self.load_auth.assert_called_once_with(utils.CONF, 'cinder')
1269         # Had to load the session, passed in the loaded auth
1270         self.load_sess.assert_called_once_with(utils.CONF, 'cinder',
1271                                                auth=self.auth)
1272         # load_adapter* called with the loaded auth & session
1273         self.load_adap.assert_called_once_with(
1274             utils.CONF, 'cinder', session=self.sess, auth=self.auth,
1275             min_version=None, max_version=None, raise_exc=False)
1276 
1277 
1278 class GetEndpointTestCase(test.NoDBTestCase):
1279     def setUp(self):
1280         super(GetEndpointTestCase, self).setUp()
1281         self.adap = mock.create_autospec(ks_adapter.Adapter, instance=True)
1282         self.adap.endpoint_override = None
1283         self.adap.service_type = 'stype'
1284         self.adap.interface = ['admin', 'public']
1285 
1286     def test_endpoint_override(self):
1287         self.adap.endpoint_override = 'foo'
1288         self.assertEqual('foo', utils.get_endpoint(self.adap))
1289         self.adap.get_endpoint_data.assert_not_called()
1290         self.adap.get_endpoint.assert_not_called()
1291 
1292     def test_image_good(self):
1293         self.adap.service_type = 'image'
1294         self.adap.get_endpoint_data.return_value.catalog_url = 'url'
1295         self.assertEqual('url', utils.get_endpoint(self.adap))
1296         self.adap.get_endpoint_data.assert_called_once_with()
1297         self.adap.get_endpoint.assert_not_called()
1298 
1299     def test_image_bad(self):
1300         self.adap.service_type = 'image'
1301         self.adap.get_endpoint_data.side_effect = AttributeError
1302         self.adap.get_endpoint.return_value = 'url'
1303         self.assertEqual('url', utils.get_endpoint(self.adap))
1304         self.adap.get_endpoint_data.assert_called_once_with()
1305         self.adap.get_endpoint.assert_called_once_with()
1306 
1307     def test_nonimage_good(self):
1308         self.adap.get_endpoint.return_value = 'url'
1309         self.assertEqual('url', utils.get_endpoint(self.adap))
1310         self.adap.get_endpoint_data.assert_not_called()
1311         self.adap.get_endpoint.assert_called_once_with()
1312 
1313     def test_nonimage_try_interfaces(self):
1314         self.adap.get_endpoint.side_effect = (ks_exc.EndpointNotFound, 'url')
1315         self.assertEqual('url', utils.get_endpoint(self.adap))
1316         self.adap.get_endpoint_data.assert_not_called()
1317         self.assertEqual(2, self.adap.get_endpoint.call_count)
1318         self.assertEqual('admin', self.adap.interface)
1319 
1320     def test_nonimage_try_interfaces_fail(self):
1321         self.adap.get_endpoint.side_effect = ks_exc.EndpointNotFound
1322         self.assertRaises(ks_exc.EndpointNotFound,
1323                           utils.get_endpoint, self.adap)
1324         self.adap.get_endpoint_data.assert_not_called()
1325         self.assertEqual(3, self.adap.get_endpoint.call_count)
1326         self.assertEqual('public', self.adap.interface)
1327 
1328 
1329 class RunOnceTests(test.NoDBTestCase):
1330 
1331     fake_logger = mock.MagicMock()
1332 
1333     @utils.run_once("already ran once", fake_logger)
1334     def dummy_test_func(self, fail=False):
1335         if fail:
1336             raise ValueError()
1337         return True
1338 
1339     def setUp(self):
1340         super(RunOnceTests, self).setUp()
1341         self.dummy_test_func.reset()
1342         RunOnceTests.fake_logger.reset_mock()
1343 
1344     def test_wrapped_funtions_called_once(self):
1345         self.assertFalse(self.dummy_test_func.called)
1346         result = self.dummy_test_func()
1347         self.assertTrue(result)
1348         self.assertTrue(self.dummy_test_func.called)
1349 
1350         # assert that on second invocation no result
1351         # is returned and that the logger is invoked.
1352         result = self.dummy_test_func()
1353         RunOnceTests.fake_logger.assert_called_once()
1354         self.assertIsNone(result)
1355 
1356     def test_wrapped_funtions_called_once_raises(self):
1357         self.assertFalse(self.dummy_test_func.called)
1358         self.assertRaises(ValueError, self.dummy_test_func, fail=True)
1359         self.assertTrue(self.dummy_test_func.called)
1360 
1361         # assert that on second invocation no result
1362         # is returned and that the logger is invoked.
1363         result = self.dummy_test_func()
1364         RunOnceTests.fake_logger.assert_called_once()
1365         self.assertIsNone(result)
1366 
1367     def test_wrapped_funtions_can_be_reset(self):
1368         # assert we start with a clean state
1369         self.assertFalse(self.dummy_test_func.called)
1370         result = self.dummy_test_func()
1371         self.assertTrue(result)
1372 
1373         self.dummy_test_func.reset()
1374         # assert we restored a clean state
1375         self.assertFalse(self.dummy_test_func.called)
1376         result = self.dummy_test_func()
1377         self.assertTrue(result)
1378 
1379         # assert that we never called the logger
1380         RunOnceTests.fake_logger.assert_not_called()
1381 
1382     def test_reset_calls_cleanup(self):
1383         mock_clean = mock.Mock()
1384 
1385         @utils.run_once("already ran once", self.fake_logger,
1386                         cleanup=mock_clean)
1387         def f():
1388             pass
1389 
1390         f()
1391         self.assertTrue(f.called)
1392 
1393         f.reset()
1394         self.assertFalse(f.called)
1395         mock_clean.assert_called_once_with()
1396 
1397     def test_clean_is_not_called_at_reset_if_wrapped_not_called(self):
1398         mock_clean = mock.Mock()
1399 
1400         @utils.run_once("already ran once", self.fake_logger,
1401                         cleanup=mock_clean)
1402         def f():
1403             pass
1404 
1405         self.assertFalse(f.called)
1406 
1407         f.reset()
1408         self.assertFalse(f.called)
1409         self.assertFalse(mock_clean.called)
1410 
1411     def test_reset_works_even_if_cleanup_raises(self):
1412         mock_clean = mock.Mock(side_effect=ValueError())
1413 
1414         @utils.run_once("already ran once", self.fake_logger,
1415                         cleanup=mock_clean)
1416         def f():
1417             pass
1418 
1419         f()
1420         self.assertTrue(f.called)
1421 
1422         self.assertRaises(ValueError, f.reset)
1423         self.assertFalse(f.called)
1424         mock_clean.assert_called_once_with()
1425 
1426 
1427 class TestResourceClassNormalize(test.NoDBTestCase):
1428 
1429     def test_normalize_name(self):
1430         values = [
1431             ("foo", "CUSTOM_FOO"),
1432             ("VCPU", "CUSTOM_VCPU"),
1433             ("CUSTOM_BOB", "CUSTOM_CUSTOM_BOB"),
1434             ("CUSTM_BOB", "CUSTOM_CUSTM_BOB"),
1435         ]
1436         for test_value, expected in values:
1437             result = utils.normalize_rc_name(test_value)
1438             self.assertEqual(expected, result)
1439 
1440     def test_normalize_name_bug_1762789(self):
1441         """The .upper() builtin treats sharp S (\xdf) differently in py2 vs.
1442         py3.  Make sure normalize_name handles it properly.
1443         """
1444         name = u'Fu\xdfball'
1445         self.assertEqual(u'CUSTOM_FU_BALL', utils.normalize_rc_name(name))
