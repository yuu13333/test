Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 # Copyright (c) 2012 OpenStack Foundation
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 
16 '''
17 Websocket proxy that is compatible with OpenStack Nova.
18 Leverages websockify.py by Joel Martin
19 '''
20 
21 import socket
22 import sys
23 
24 from oslo_log import log as logging
25 from oslo_utils import strutils
26 from six.moves import http_cookies as Cookie
27 import six.moves.urllib.parse as urlparse
28 import websockify
29 
30 import nova.conf
31 from nova.consoleauth import rpcapi as consoleauth_rpcapi
32 from nova import context
33 from nova import exception
34 from nova.i18n import _
35 from nova.i18n import _LW
36 from nova import utils
37 
38 LOG = logging.getLogger(__name__)
39 
40 CONF = nova.conf.CONF
41 
42 
43 class NovaProxyRequestHandlerBase(object):
44     def address_string(self):
45         # NOTE(rpodolyaka): override the superclass implementation here and
46         # explicitly disable the reverse DNS lookup, which might fail on some
47         # deployments due to DNS configuration and break VNC access completely
48         return str(self.client_address[0])
49 
50     def verify_origin_proto(self, connection_info, origin_proto):
51         access_url = connection_info.get('access_url')
52         if not access_url:
53             detail = _("No access_url in connection_info. "
54                         "Cannot validate protocol")
55             raise exception.ValidationError(detail=detail)
56         expected_protos = [urlparse.urlparse(access_url).scheme]
57         # NOTE: For serial consoles the expected protocol could be ws or
58         # wss which correspond to http and https respectively in terms of
59         # security.
60         if 'ws' in expected_protos:
61             expected_protos.append('http')
62         if 'wss' in expected_protos:
63             expected_protos.append('https')
64 
65         return origin_proto in expected_protos
66 
67     def new_websocket_client(self):
68         """Called after a new WebSocket connection has been established."""
69         # Reopen the eventlet hub to make sure we don't share an epoll
70         # fd with parent and/or siblings, which would be bad
71         from eventlet import hubs
72         hubs.use_hub()
73 
74         # The nova expected behavior is to have token
75         # passed to the method GET of the request
76         parse = urlparse.urlparse(self.path)
77         if parse.scheme not in ('http', 'https'):
78             # From a bug in urlparse in Python < 2.7.4 we cannot support
79             # special schemes (cf: http://bugs.python.org/issue9374)
80             if sys.version_info < (2, 7, 4):
81                 raise exception.NovaException(
82                     _("We do not support scheme '%s' under Python < 2.7.4, "
83                       "please use http or https") % parse.scheme)
84 
85         query = parse.query
86         token = urlparse.parse_qs(query).get("token", [""]).pop()
87         if not token:
88             # NoVNC uses it's own convention that forward token
89             # from the request to a cookie header, we should check
90             # also for this behavior
91             hcookie = self.headers.get('cookie')
92             if hcookie:
93                 cookie = Cookie.SimpleCookie()
94                 for hcookie_part in hcookie.split(';'):
95                     hcookie_part = hcookie_part.lstrip()
96                     try:
97                         cookie.load(hcookie_part)
98                     except Cookie.CookieError:
99                         # NOTE(stgleb): Do not print out cookie content
100                         # for security reasons.
101                         LOG.warning(_LW('Found malformed cookie'))
102                     else:
103                         if 'token' in cookie:
104                             token = cookie['token'].value
105 
106         ctxt = context.get_admin_context()
107         rpcapi = consoleauth_rpcapi.ConsoleAuthAPI()
108         connect_info = rpcapi.check_token(ctxt, token=token)
109         secret = utils.mask_token(token)
110 
111         if not connect_info:
112             raise exception.InvalidToken(token=secret)
113 
114         # Verify Origin
115         expected_origin_hostname = self.headers.get('Host')
116         if ':' in expected_origin_hostname:
117             e = expected_origin_hostname
118             if '[' in e and ']' in e:
119                 expected_origin_hostname = e.split(']')[0][1:]
120             else:
121                 expected_origin_hostname = e.split(':')[0]
122         expected_origin_hostnames = CONF.console.allowed_origins
123         expected_origin_hostnames.append(expected_origin_hostname)
124         origin_url = self.headers.get('Origin')
125         # missing origin header indicates non-browser client which is OK
126         if origin_url is not None:
127             origin = urlparse.urlparse(origin_url)
128             origin_hostname = origin.hostname
129             origin_scheme = origin.scheme
130             if origin_hostname == '' or origin_scheme == '':
131                 detail = _("Origin header not valid.")
132                 raise exception.ValidationError(detail=detail)
133             if origin_hostname not in expected_origin_hostnames:
134                 detail = _("Origin header does not match this host.")
135                 raise exception.ValidationError(detail=detail)
136             if not self.verify_origin_proto(connect_info, origin_scheme):
137                 detail = _("Origin header protocol does not match this host.")
138                 raise exception.ValidationError(detail=detail)
139 
140         self.msg(_('connect info: %s'),
141                  str(strutils.mask_password(str(connect_info), secret)))
142         host = connect_info['host']
143         port = int(connect_info['port'])
144 
145         # Connect to the target
146         self.msg(_("connecting to: %(host)s:%(port)s") % {'host': host,
147                                                           'port': port})
148         tsock = self.socket(host, port, connect=True)
149 
150         # Handshake as necessary
151         if connect_info.get('internal_access_path'):
152             tsock.send("CONNECT %s HTTP/1.1\r\n\r\n" %
153                         connect_info['internal_access_path'])
154             while True:
155                 data = tsock.recv(4096, socket.MSG_PEEK)
156                 if data.find("\r\n\r\n") != -1:
157                     if data.split("\r\n")[0].find("200") == -1:
158                         raise exception.InvalidConnectionInfo()
159                     tsock.recv(len(data))
160                     break
161 
162         # Start proxying
163         try:
164             self.do_proxy(tsock)
165         except Exception:
166             if tsock:
167                 tsock.shutdown(socket.SHUT_RDWR)
168                 tsock.close()
169                 self.vmsg(_("%(host)s:%(port)s: "
170                           "Websocket client or target closed") %
171                           {'host': host, 'port': port})
172             raise
173 
174 
175 class NovaProxyRequestHandler(NovaProxyRequestHandlerBase,
176                               websockify.ProxyRequestHandler):
177     def __init__(self, *args, **kwargs):
178         websockify.ProxyRequestHandler.__init__(self, *args, **kwargs)
179 
180     def socket(self, *args, **kwargs):
181         return websockify.WebSocketServer.socket(*args, **kwargs)
182 
183 
184 class NovaWebSocketProxy(websockify.WebSocketProxy):
185     @staticmethod
186     def get_logger():
187         return LOG
