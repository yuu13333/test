Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
2 #    not use this file except in compliance with the License. You may obtain
3 #    a copy of the License at
4 #
5 #         http://www.apache.org/licenses/LICENSE-2.0
6 #
7 #    Unless required by applicable law or agreed to in writing, software
8 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
9 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
10 #    License for the specific language governing permissions and limitations
11 #    under the License.
12 """Aggregate handlers for Placement API."""
13 
14 from oslo_serialization import jsonutils
15 from oslo_utils import encodeutils
16 from oslo_utils import timeutils
17 import webob
18 
19 from nova.api.openstack.placement import microversion
20 from nova.api.openstack.placement.objects import resource_provider as rp_obj
21 from nova.api.openstack.placement.schemas import aggregate as schema
22 from nova.api.openstack.placement import util
23 from nova.api.openstack.placement import wsgi_wrapper
24 from nova.i18n import _
25 
26 
27 _INCLUDE_GENERATION_VERSION = (1, 19)
28 
29 
30 def _send_aggregates(req, resource_provider, aggregate_uuids):
31     want_version = req.environ[microversion.MICROVERSION_ENVIRON]
32     response = req.response
33     response.status = 200
34     payload = _serialize_aggregates(aggregate_uuids)
35     if want_version.matches(min_version=_INCLUDE_GENERATION_VERSION):
36         payload['resource_provider_generation'] = resource_provider.generation
37     response.body = encodeutils.to_utf8(
38         jsonutils.dumps(payload))
39     response.content_type = 'application/json'
40     if want_version.matches((1, 15)):
41         req.response.cache_control = 'no-cache'
42         # We never get an aggregate itself, we get the list of aggregates
43         # that are associated with a resource provider. We don't record the
44         # time when that association was made and the time when an aggregate
45         # uuid was created is not relevant, so here we punt and use utcnow.
46         req.response.last_modified = timeutils.utcnow(with_timezone=True)
47     return response
48 
49 
50 def _serialize_aggregates(aggregate_uuids):
51     return {'aggregates': aggregate_uuids}
52 
53 
54 @wsgi_wrapper.PlacementWsgify
55 @util.check_accept('application/json')
56 @microversion.version_handler('1.1')
57 def get_aggregates(req):
58     """GET a list of aggregates associated with a resource provider.
59 
60     If the resource provider does not exist return a 404.
61 
62     On success return a 200 with an application/json body containing a
63     list of aggregate uuids.
64     """
65     context = req.environ['placement.context']
66     uuid = util.wsgi_path_item(req.environ, 'uuid')
67     resource_provider = rp_obj.ResourceProvider.get_by_uuid(
68         context, uuid)
69     aggregate_uuids = resource_provider.get_aggregates()
70 
71     return _send_aggregates(req, resource_provider, aggregate_uuids)
72 
73 
74 @wsgi_wrapper.PlacementWsgify
75 @util.require_content('application/json')
76 @microversion.version_handler('1.1')
77 def set_aggregates(req):
78     context = req.environ['placement.context']
79     want_version = req.environ[microversion.MICROVERSION_ENVIRON]
80     consider_generation = want_version.matches(
81         min_version=_INCLUDE_GENERATION_VERSION)
82     put_schema = schema.PUT_AGGREGATES_SCHEMA_V1_1
83     if consider_generation:
84         put_schema = schema.PUT_AGGREGATES_SCHEMA_V1_19
85     uuid = util.wsgi_path_item(req.environ, 'uuid')
86     resource_provider = rp_obj.ResourceProvider.get_by_uuid(
87         context, uuid)
88     data = util.extract_json(req.body, put_schema)
89     if consider_generation:
90         # Check for generation conflict
91         rp_gen = data['resource_provider_generation']
92         if resource_provider.generation != rp_gen:
93             raise webob.exc.HTTPConflict(
94                 _("Resource provider's generation already changed. Please "
95                   "update the generation and try again."))
96         aggregate_uuids = data['aggregates']
97     else:
98         aggregate_uuids = data
99     resource_provider.set_aggregates(
100         aggregate_uuids, increment_generation=consider_generation)
101 
102     return _send_aggregates(req, resource_provider, aggregate_uuids)
