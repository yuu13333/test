Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 #    Copyright 2010 United States Government as represented by the
2 #    Administrator of the National Aeronautics and Space Administration.
3 #    All Rights Reserved.
4 #    Copyright (c) 2010 Citrix Systems, Inc.
5 #    Copyright (c) 2011 Piston Cloud Computing, Inc
6 #    Copyright (c) 2011 OpenStack Foundation
7 #    (c) Copyright 2013 Hewlett-Packard Development Company, L.P.
8 #
9 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
10 #    not use this file except in compliance with the License. You may obtain
11 #    a copy of the License at
12 #
13 #         http://www.apache.org/licenses/LICENSE-2.0
14 #
15 #    Unless required by applicable law or agreed to in writing, software
16 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
17 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
18 #    License for the specific language governing permissions and limitations
19 #    under the License.
20 
21 import errno
22 import os
23 import re
24 import typing as ty
25 import uuid
26 
27 import os_traits
28 from oslo_concurrency import processutils
29 from oslo_log import log as logging
30 from oslo_utils import fileutils
31 
32 import nova.conf
33 from nova import context as nova_context
34 from nova import exception
35 from nova.i18n import _
36 from nova import objects
37 from nova.objects import fields as obj_fields
38 import nova.privsep.fs
39 import nova.privsep.idmapshift
40 import nova.privsep.libvirt
41 import nova.privsep.path
42 from nova.scheduler import utils as scheduler_utils
43 from nova import utils
44 from nova.virt import images
45 from nova.virt.libvirt import config as vconfig
46 from nova.virt.libvirt.volume import remotefs
47 
48 if ty.TYPE_CHECKING:
49     from nova.virt.libvirt import guest as libvirt_guest
50 
51 CONF = nova.conf.CONF
52 LOG = logging.getLogger(__name__)
53 
54 RESIZE_SNAPSHOT_NAME = 'nova-resize'
55 
56 # Mapping used to convert libvirt cpu features to traits, for more details, see
57 # https://github.com/libvirt/libvirt/blob/master/src/cpu_map/
58 CPU_TRAITS_MAPPING = {
59     '3dnow': os_traits.HW_CPU_X86_3DNOW,
60     'abm': os_traits.HW_CPU_X86_ABM,
61     'aes': os_traits.HW_CPU_X86_AESNI,
62     'avx': os_traits.HW_CPU_X86_AVX,
63     'avx2': os_traits.HW_CPU_X86_AVX2,
64     'avx512bw': os_traits.HW_CPU_X86_AVX512BW,
65     'avx512cd': os_traits.HW_CPU_X86_AVX512CD,
66     'avx512dq': os_traits.HW_CPU_X86_AVX512DQ,
67     'avx512er': os_traits.HW_CPU_X86_AVX512ER,
68     'avx512f': os_traits.HW_CPU_X86_AVX512F,
69     'avx512pf': os_traits.HW_CPU_X86_AVX512PF,
70     'avx512vl': os_traits.HW_CPU_X86_AVX512VL,
71     'avx512vnni': os_traits.HW_CPU_X86_AVX512VNNI,
72     'avx512vbmi': os_traits.HW_CPU_X86_AVX512VBMI,
73     'avx512ifma': os_traits.HW_CPU_X86_AVX512IFMA,
74     'avx512vbmi2': os_traits.HW_CPU_X86_AVX512VBMI2,
75     'avx512bitalg': os_traits.HW_CPU_X86_AVX512BITALG,
76     'vaes': os_traits.HW_CPU_X86_AVX512VAES,
77     'gfni': os_traits.HW_CPU_X86_AVX512GFNI,
78     'vpclmulqdq': os_traits.HW_CPU_X86_AVX512VPCLMULQDQ,
79     'avx512-vpopcntdq': os_traits.HW_CPU_X86_AVX512VPOPCNTDQ,
80     'bmi1': os_traits.HW_CPU_X86_BMI,
81     'bmi2': os_traits.HW_CPU_X86_BMI2,
82     'pclmuldq': os_traits.HW_CPU_X86_CLMUL,
83     'f16c': os_traits.HW_CPU_X86_F16C,
84     'fma': os_traits.HW_CPU_X86_FMA3,
85     'fma4': os_traits.HW_CPU_X86_FMA4,
86     'mmx': os_traits.HW_CPU_X86_MMX,
87     'mpx': os_traits.HW_CPU_X86_MPX,
88     'sha-ni': os_traits.HW_CPU_X86_SHA,
89     'sse': os_traits.HW_CPU_X86_SSE,
90     'sse2': os_traits.HW_CPU_X86_SSE2,
91     'sse3': os_traits.HW_CPU_X86_SSE3,
92     'sse4.1': os_traits.HW_CPU_X86_SSE41,
93     'sse4.2': os_traits.HW_CPU_X86_SSE42,
94     'sse4a': os_traits.HW_CPU_X86_SSE4A,
95     'ssse3': os_traits.HW_CPU_X86_SSSE3,
96     'svm': os_traits.HW_CPU_X86_SVM,
97     'tbm': os_traits.HW_CPU_X86_TBM,
98     'vmx': os_traits.HW_CPU_X86_VMX,
99     'xop': os_traits.HW_CPU_X86_XOP
100 }
101 
102 # Reverse CPU_TRAITS_MAPPING
103 TRAITS_CPU_MAPPING = {v: k for k, v in CPU_TRAITS_MAPPING.items()}
104 
105 # global directory for emulated TPM
106 VTPM_DIR = '/var/lib/libvirt/swtpm/'
107 
108 
109 def create_image(
110     disk_format: str, path: str, size: ty.Union[str, int],
111 ) -> None:
112     """Create a disk image
113 
114     :param disk_format: Disk image format (as known by qemu-img)
115     :param path: Desired location of the disk image
116     :param size: Desired size of disk image. May be given as an int or
117                  a string. If given as an int, it will be interpreted
118                  as bytes. If it's a string, it should consist of a number
119                  with an optional suffix ('K' for Kibibytes,
120                  M for Mebibytes, 'G' for Gibibytes, 'T' for Tebibytes).
121                  If no suffix is given, it will be interpreted as bytes.
122     """
123     processutils.execute('qemu-img', 'create', '-f', disk_format, path, size)
124 
125 
126 def create_cow_image(
127     backing_file: ty.Optional[str], path: str, size: ty.Optional[int] = None,
128 ) -> None:
129     """Create COW image
130 
131     Creates a COW image with the given backing file
132 
133     :param backing_file: Existing image on which to base the COW image
134     :param path: Desired location of the COW image
135     """
136     base_cmd = ['qemu-img', 'create', '-f', 'qcow2']
137     cow_opts = []
138     if backing_file:
139         base_details = images.qemu_img_info(backing_file)
140         cow_opts += ['backing_file=%s' % backing_file]
141         cow_opts += ['backing_fmt=%s' % base_details.file_format]
142     else:
143         base_details = None
144     # Explicitly inherit the value of 'cluster_size' property of a qcow2
145     # overlay image from its backing file. This can be useful in cases
146     # when people create a base image with a non-default 'cluster_size'
147     # value or cases when images were created with very old QEMU
148     # versions which had a different default 'cluster_size'.
149     if base_details and base_details.cluster_size is not None:
150         cow_opts += ['cluster_size=%s' % base_details.cluster_size]
151     if size is not None:
152         cow_opts += ['size=%s' % size]
153     if cow_opts:
154         # Format as a comma separated list
155         csv_opts = ",".join(cow_opts)
156         cow_opts = ['-o', csv_opts]
157     cmd = base_cmd + cow_opts + [path]
158     processutils.execute(*cmd)
159 
160 
161 def create_ploop_image(
162     disk_format: str, path: str, size: ty.Union[int, str], fs_type: str,
163 ) -> None:
164     """Create ploop image
165 
166     :param disk_format: Disk image format (as known by ploop)
167     :param path: Desired location of the ploop image
168     :param size: Desired size of ploop image. May be given as an int or
169                  a string. If given as an int, it will be interpreted
170                  as bytes. If it's a string, it should consist of a number
171                  with an optional suffix ('K' for Kibibytes,
172                  M for Mebibytes, 'G' for Gibibytes, 'T' for Tebibytes).
173                  If no suffix is given, it will be interpreted as bytes.
174     :param fs_type: Filesystem type
175     """
176     if not fs_type:
177         fs_type = CONF.default_ephemeral_format or \
178                   nova.privsep.fs.FS_FORMAT_EXT4
179     fileutils.ensure_tree(path)
180     disk_path = os.path.join(path, 'root.hds')
181     nova.privsep.libvirt.ploop_init(size, disk_format, fs_type, disk_path)
182 
183 
184 def pick_disk_driver_name(
185     hypervisor_version: int, is_block_dev: bool = False,
186 ) -> ty.Optional[str]:
187     """Pick the libvirt primary backend driver name
188 
189     If the hypervisor supports multiple backend drivers we have to tell libvirt
190     which one should be used.
191 
192     Xen supports the following drivers: "tap", "tap2", "phy", "file", or
193     "qemu", being "qemu" the preferred one. Qemu only supports "qemu".
194 
195     :param is_block_dev:
196     :returns: driver_name or None
197     """
198     if CONF.libvirt.virt_type == "xen":
199         if is_block_dev:
200             return "phy"
201         else:
202             # 4002000 == 4.2.0
203             if hypervisor_version >= 4002000:
204                 try:
205                     nova.privsep.libvirt.xend_probe()
206                 except OSError as exc:
207                     if exc.errno == errno.ENOENT:
208                         LOG.debug("xend is not found")
209                         # libvirt will try to use libxl toolstack
210                         return 'qemu'
211                     else:
212                         raise
213                 except processutils.ProcessExecutionError:
214                     LOG.debug("xend is not started")
215                     # libvirt will try to use libxl toolstack
216                     return 'qemu'
217             # libvirt will use xend/xm toolstack
218             try:
219                 out, err = processutils.execute('tap-ctl', 'check',
220                                                 check_exit_code=False)
221                 if out == 'ok\n':
222                     # 4000000 == 4.0.0
223                     if hypervisor_version > 4000000:
224                         return "tap2"
225                     else:
226                         return "tap"
227                 else:
228                     LOG.info("tap-ctl check: %s", out)
229             except OSError as exc:
230                 if exc.errno == errno.ENOENT:
231                     LOG.debug("tap-ctl tool is not installed")
232                 else:
233                     raise
234             return "file"
235     elif CONF.libvirt.virt_type in ('kvm', 'qemu'):
236         return "qemu"
237     else:
238         # UML doesn't want a driver_name set
239         return None
240 
241 
242 def get_disk_size(path: str, format: ty.Optional[str] = None) -> int:
243     """Get the (virtual) size of a disk image
244 
245     :param path: Path to the disk image
246     :param format: the on-disk format of path
247     :returns: Size (in bytes) of the given disk image as it would be seen
248               by a virtual machine.
249     """
250     size = images.qemu_img_info(path, format).virtual_size
251     return int(size)
252 
253 
254 def get_disk_backing_file(
255     path: str, basename: bool = True, format: ty.Optional[str] = None,
256 ) -> ty.Optional[str]:
257     """Get the backing file of a disk image
258 
259     :param path: Path to the disk image
260     :returns: a path to the image's backing store
261     """
262     backing_file = images.qemu_img_info(path, format).backing_file
263     if backing_file and basename:
264         backing_file = os.path.basename(backing_file)
265 
266     return backing_file
267 
268 
269 def copy_image(
270     src: str,
271     dest: str,
272     host: ty.Optional[str] = None,
273     receive: bool = False,
274     on_execute: ty.Callable = None,
275     on_completion: ty.Callable = None,
276     compression: bool = True,
277 ) -> None:
278     """Copy a disk image to an existing directory
279 
280     :param src: Source image
281     :param dest: Destination path
282     :param host: Remote host
283     :param receive: Reverse the rsync direction
284     :param on_execute: Callback method to store pid of process in cache
285     :param on_completion: Callback method to remove pid of process from cache
286     :param compression: Allows to use rsync operation with or without
287                         compression
288     """
289 
290     if not host:
291         # We shell out to cp because that will intelligently copy
292         # sparse files.  I.E. holes will not be written to DEST,
293         # rather recreated efficiently.  In addition, since
294         # coreutils 8.11, holes can be read efficiently too.
295         # we add '-r' argument because ploop disks are directories
296         processutils.execute('cp', '-r', src, dest)
297     else:
298         if receive:
299             src = "%s:%s" % (utils.safe_ip_format(host), src)
300         else:
301             dest = "%s:%s" % (utils.safe_ip_format(host), dest)
302 
303         remote_filesystem_driver = remotefs.RemoteFilesystem()
304         remote_filesystem_driver.copy_file(src, dest,
305             on_execute=on_execute, on_completion=on_completion,
306             compression=compression)
307 
308 
309 # TODO(stephenfin): This is dumb; remove it.
310 def write_to_file(path: str, contents: str) -> None:
311     """Write the given contents to a file
312 
313     :param path: Destination file
314     :param contents: Desired contents of the file
315     """
316     with open(path, 'w') as f:
317         f.write(contents)
318 
319 
320 def chown_for_id_maps(
321     path: str, id_maps: ty.List[vconfig.LibvirtConfigGuestIDMap],
322 ) -> None:
323     """Change ownership of file or directory for an id mapped
324     environment
325 
326     :param path: File or directory whose ownership to change
327     :param id_maps: List of type LibvirtConfigGuestIDMap
328     """
329     uid_maps = [id_map for id_map in id_maps if
330                 isinstance(id_map, vconfig.LibvirtConfigGuestUIDMap)]
331     gid_maps = [id_map for id_map in id_maps if
332                 isinstance(id_map, vconfig.LibvirtConfigGuestGIDMap)]
333     nova.privsep.idmapshift.shift(path, uid_maps, gid_maps)
334 
335 
336 def extract_snapshot(
337     disk_path: str, source_fmt: str, out_path: str, dest_fmt: str,
338 ) -> None:
339     """Extract a snapshot from a disk image.
340     Note that nobody should write to the disk image during this operation.
341 
342     :param disk_path: Path to disk image
343     :param out_path: Desired path of extracted snapshot
344     """
345     # NOTE(markmc): ISO is just raw to qemu-img
346     if dest_fmt == 'iso':
347         dest_fmt = 'raw'
348     if dest_fmt == 'ploop':
349         dest_fmt = 'parallels'
350 
351     compress = CONF.libvirt.snapshot_compression and dest_fmt == "qcow2"
352     images.convert_image(disk_path, out_path, source_fmt, dest_fmt,
353                          compress=compress)
354 
355 
356 # TODO(stephenfin): This is dumb; remove it.
357 def load_file(path: str) -> str:
358     """Read contents of file
359 
360     :param path: File to read
361     """
362     with open(path, 'r') as fp:
363         return fp.read()
364 
365 
366 # TODO(stephenfin): Remove this; we have suitably powerful mocking abilities
367 # nowadays
368 def file_open(*args, **kwargs):
369     """Open file
370 
371     see built-in open() documentation for more details
372 
373     Note: The reason this is kept in a separate module is to easily
374           be able to provide a stub module that doesn't alter system
375           state at all (for unit tests)
376     """
377     return open(*args, **kwargs)
378 
379 
380 def find_disk(guest: 'libvirt_guest.Guest') -> ty.Tuple[str, ty.Optional[str]]:
381     """Find root device path for instance
382 
383     May be file or device
384     """
385     guest_config = guest.get_config()
386 
387     disk_format = None
388     if guest_config.virt_type == 'lxc':
389         filesystem = next(d for d in guest_config.devices
390                           if isinstance(d, vconfig.LibvirtConfigGuestFilesys))
391         disk_path = filesystem.source_dir
392         disk_path = disk_path[0:disk_path.rfind('rootfs')]
393         disk_path = os.path.join(disk_path, 'disk')
394     elif (guest_config.virt_type == 'parallels' and
395           guest_config.os_type == obj_fields.VMMode.EXE):
396         filesystem = next(d for d in guest_config.devices
397                           if isinstance(d, vconfig.LibvirtConfigGuestFilesys))
398         disk_format = filesystem.driver_type
399         disk_path = filesystem.source_file
400     else:
401         disk = next(d for d in guest_config.devices
402                     if isinstance(d, vconfig.LibvirtConfigGuestDisk))
403         disk_format = disk.driver_format
404         disk_path = disk.source_path if disk.source_type != 'mount' else None
405         if not disk_path and disk.source_protocol == 'rbd':
406             disk_path = disk.source_name
407             if disk_path:
408                 disk_path = 'rbd:' + disk_path
409 
410     if not disk_path:
411         raise RuntimeError(_("Can't retrieve root device path "
412                              "from instance libvirt configuration"))
413 
414     # This is a legacy quirk of libvirt/xen. Everything else should
415     # report the on-disk format in type.
416     if disk_format == 'aio':
417         disk_format = 'raw'
418     return (disk_path, disk_format)
419 
420 
421 def get_disk_type_from_path(path: str) -> ty.Optional[str]:
422     """Retrieve disk type (raw, qcow2, lvm, ploop) for given file."""
423     if path.startswith('/dev'):
424         return 'lvm'
425     elif path.startswith('rbd:'):
426         return 'rbd'
427     elif (os.path.isdir(path) and
428           os.path.exists(os.path.join(path, "DiskDescriptor.xml"))):
429         return 'ploop'
430 
431     # We can't reliably determine the type from this path
432     return None
433 
434 
435 def get_fs_info(path: str) -> ty.Dict[str, int]:
436     """Get free/used/total space info for a filesystem
437 
438     :param path: Any dirent on the filesystem
439     :returns: A dict containing:
440 
441              :free: How much space is free (in bytes)
442              :used: How much space is used (in bytes)
443              :total: How big the filesystem is (in bytes)
444     """
445     hddinfo = os.statvfs(path)
446     total = hddinfo.f_frsize * hddinfo.f_blocks
447     free = hddinfo.f_frsize * hddinfo.f_bavail
448     used = hddinfo.f_frsize * (hddinfo.f_blocks - hddinfo.f_bfree)
449     return {'total': total, 'free': free, 'used': used}
450 
451 
452 def fetch_image(
453     context: nova_context.RequestContext,
454     target: str,
455     image_id: str,
456     trusted_certs: ty.Optional['objects.TrustedCerts'] = None,
457 ) -> None:
458     """Grab image.
459 
460     :param context: nova.context.RequestContext auth request context
461     :param target: target path to put the image
462     :param image_id: id of the image to fetch
463     :param trusted_certs: optional objects.TrustedCerts for image validation
464     """
465     images.fetch_to_raw(context, image_id, target, trusted_certs)
466 
467 
468 def fetch_raw_image(
469     context: nova_context.RequestContext,
470     target: str,
471     image_id: str,
472     trusted_certs: ty.Optional['objects.TrustedCerts'] = None,
473 ) -> None:
474     """Grab initrd or kernel image.
475 
476     This function does not attempt raw conversion, as these images will
477     already be in raw format.
478 
479     :param context: nova.context.RequestContext auth request context
480     :param target: target path to put the image
481     :param image_id: id of the image to fetch
482     :param trusted_certs: optional objects.TrustedCerts for image validation
483     """
484     images.fetch(context, image_id, target, trusted_certs)
485 
486 
487 def get_instance_path(
488     instance: 'objects.Instance', relative: bool = False,
489 ) -> str:
490     """Determine the correct path for instance storage.
491 
492     This method determines the directory name for instance storage.
493 
494     :param instance: the instance we want a path for
495     :param relative: if True, just the relative path is returned
496 
497     :returns: a path to store information about that instance
498     """
499     if relative:
500         return instance.uuid
501     return os.path.join(CONF.instances_path, instance.uuid)
502 
503 
504 def get_instance_path_at_destination(
505     instance: 'objects.Instance',
506     migrate_data: ty.Optional['objects.LibvirtLiveMigrateData'] = None,
507 ) -> str:
508     """Get the instance path on destination node while live migration.
509 
510     This method determines the directory name for instance storage on
511     destination node, while live migration.
512 
513     :param instance: the instance we want a path for
514     :param migrate_data: if not None, it is a dict which holds data
515                          required for live migration without shared
516                          storage.
517 
518     :returns: a path to store information about that instance
519     """
520     instance_relative_path = None
521     if migrate_data:
522         instance_relative_path = migrate_data.instance_relative_path
523     # NOTE(mikal): this doesn't use libvirt_utils.get_instance_path
524     # because we are ensuring that the same instance directory name
525     # is used as was at the source
526     if instance_relative_path:
527         instance_dir = os.path.join(CONF.instances_path,
528                                     instance_relative_path)
529     else:
530         instance_dir = get_instance_path(instance)
531     return instance_dir
532 
533 
534 def get_arch(image_meta: 'objects.ImageMeta') -> str:
535     """Determine the architecture of the guest (or host).
536 
537     This method determines the CPU architecture that must be supported by
538     the hypervisor. It gets the (guest) arch info from image_meta properties,
539     and it will fallback to the nova-compute (host) arch if no architecture
540     info is provided in image_meta.
541 
542     :param image_meta: the metadata associated with the instance image
543 
544     :returns: guest (or host) architecture
545     """
546     if image_meta:
547         image_arch = image_meta.properties.get('hw_architecture')
548         if image_arch is not None:
549             return image_arch
550 
551     return obj_fields.Architecture.from_host()
552 
553 
554 def is_mounted(mount_path: str, source: ty.Optional[str] = None) -> bool:
555     """Check if the given source is mounted at given destination point."""
556     if not os.path.ismount(mount_path):
557         return False
558 
559     if source is None:
560         return True
561 
562     with open('/proc/mounts', 'r') as proc_mounts:
563         mounts = [mount.split() for mount in proc_mounts.readlines()]
564         return any(mnt[0] == source and mnt[1] == mount_path for mnt in mounts)
565 
566 
567 def is_valid_hostname(hostname: str) -> bool:
568     return bool(re.match(r"^[\w\-\.:]+$", hostname))
569 
570 
571 def version_to_string(version: ty.Tuple[int, int, int]) -> str:
572     """Returns string version based on tuple"""
573     return '.'.join([str(x) for x in version])
574 
575 
576 def cpu_features_to_traits(features: ty.Set[str]) -> ty.Dict[str, bool]:
577     """Returns this driver's CPU traits dict where keys are trait names from
578     CPU_TRAITS_MAPPING, values are boolean indicates whether the trait should
579     be set in the provider tree.
580     """
581     traits = {trait_name: False for trait_name in CPU_TRAITS_MAPPING.values()}
582     for f in features:
583         if f in CPU_TRAITS_MAPPING:
584             traits[CPU_TRAITS_MAPPING[f]] = True
585 
586     return traits
587 
588 
589 def get_cpu_model_from_arch(arch: str) -> str:
590     mode = 'qemu64'
591     if arch == obj_fields.Architecture.I686:
592         mode = 'qemu32'
593     elif arch == obj_fields.Architecture.PPC64LE:
594         mode = 'POWER8'
595     # NOTE(kevinz): In aarch64, cpu model 'max' will offer the capabilities
596     # that all the stuff it can currently emulate, both for "TCG" and "KVM"
597     elif arch == obj_fields.Architecture.AARCH64:
598         mode = 'max'
599     return mode
600 
601 
602 def get_machine_type(image_meta: 'objects.ImageMeta') -> ty.Optional[str]:
603     """The guest machine type can be set as an image metadata property, or
604     otherwise based on architecture-specific defaults. If no defaults are
605     found then None will be returned. This will ultimately lead to QEMU using
606     its own default which is currently the 'pc' machine type.
607     """
608     if image_meta.properties.get('hw_machine_type') is not None:
609         return image_meta.properties.hw_machine_type
610 
611     # If set in the config, use that as the default.
612     return get_default_machine_type(get_arch(image_meta))
613 
614 
615 def get_default_machine_type(arch: str) -> ty.Optional[str]:
616     # NOTE(lyarwood): Values defined in [libvirt]/hw_machine_type take
617     # precedence here if available for the provided arch.
618     for mapping in CONF.libvirt.hw_machine_type or {}:
619         host_arch, _, machine_type = mapping.partition('=')
620         if machine_type == '':
621             LOG.warning("Invalid hw_machine_type config value %s", mapping)
622         elif host_arch == arch:
623             return machine_type
624     # NOTE(kchamart): For ARMv7 and AArch64, use the 'virt' board as the
625     # default machine type.  It is the recommended board, which is designed
626     # to be used with virtual machines.  The 'virt' board is more flexible,
627     # supports PCI, 'virtio', has decent RAM limits, etc.
628     #
629     # NOTE(sean-k-mooney): Nova's default for x86 is still 'pc', so
630     # use that, not 'q35', for x86_64 and i686.
631     #
632     # NOTE(aspiers): If you change this, don't forget to update the
633     # docs and metadata for hw_machine_type in glance.
634     default_mtypes = {
635         obj_fields.Architecture.ARMV7: "virt",
636         obj_fields.Architecture.AARCH64: "virt",
637         obj_fields.Architecture.S390: "s390-ccw-virtio",
638         obj_fields.Architecture.S390X: "s390-ccw-virtio",
639         obj_fields.Architecture.I686: "pc",
640         obj_fields.Architecture.X86_64: "pc",
641     }
642     return default_mtypes.get(arch)
643 
644 
645 def mdev_name2uuid(mdev_name: str) -> str:
646     """Convert an mdev name (of the form mdev_<uuid_with_underscores>) to a
647     uuid (of the form 8-4-4-4-12).
648     """
649     return str(uuid.UUID(mdev_name[5:].replace('_', '-')))
650 
651 
652 def mdev_uuid2name(mdev_uuid: str) -> str:
653     """Convert an mdev uuid (of the form 8-4-4-4-12) to a name (of the form
654     mdev_<uuid_with_underscores>).
655     """
656     return "mdev_" + mdev_uuid.replace('-', '_')
657 
658 
659 def get_flags_by_flavor_specs(flavor: 'objects.Flavor') -> ty.Set[str]:
660     req_spec = objects.RequestSpec(flavor=flavor)
661     resource_request = scheduler_utils.ResourceRequest(req_spec)
662     required_traits = resource_request.all_required_traits
663 
664     flags = [TRAITS_CPU_MAPPING[trait] for trait in required_traits
665              if trait in TRAITS_CPU_MAPPING]
666 
667     return set(flags)
668 
669 
670 def save_and_migrate_vtpm_dir(
671     instance_uuid: str,
672     inst_base_resize: str,
673     inst_base: str,
674     dest: str,
675     on_execute: ty.Any,
676     on_completion: ty.Any,
677 ) -> None:
678     """Save vTPM data to instance directory and migrate to the destination.
679 
680     If the instance has vTPM enabled, then we need to save its vTPM data
681     locally (to allow for revert) and then migrate the data to the dest node.
682     Do so by copying vTPM data from the swtpm data directory to a resize
683     working directory, $inst_base_resize, and then copying this to the remote
684     directory at $dest:$inst_base.
685 
686     :param instance_uuid: The instance's UUID.
687     :param inst_base_resize: The instance's base resize working directory.
688     :param inst_base: The instances's base directory.
689     :param dest: Destination host.
690     :param on_execute: Callback method to store PID of process in cache.
691     :param on_completion: Callback method to remove PID of process from cache.
692     :returns: None.
693     """
694     vtpm_dir = os.path.join(VTPM_DIR, instance_uuid)
695     if not os.path.exists(vtpm_dir):
696         return
697 
698     # We likely need to create the instance swtpm directory on the dest node
699     # with ownership that is not the user running nova. We only have
700     # permissions to copy files to <instance_path> on the dest node so we need
701     # to get creative.
702 
703     # First, make a new directory in the local instance directory
704     swtpm_dir = os.path.join(inst_base_resize, 'swtpm')
705     fileutils.ensure_tree(swtpm_dir)
706     # Now move the per-instance swtpm persistent files into the
707     # local instance directory.
708     nova.privsep.path.move_tree(vtpm_dir, swtpm_dir)
709     # Now adjust ownership.
710     nova.privsep.path.chown(
711         swtpm_dir, os.geteuid(), os.getegid(), recursive=True)
712     # Copy the swtpm subtree to the remote instance directory
713     copy_image(
714         swtpm_dir, inst_base, host=dest, on_execute=on_execute,
715         on_completion=on_completion)
716 
717 
718 def restore_vtpm_dir(swtpm_dir: str) -> None:
719     """Given a saved TPM directory, restore it where libvirt can find it.
720 
721     :path swtpm_dir: Path to swtpm directory.
722     :returns: None
723     """
724     # Ensure global swtpm dir exists with suitable
725     # permissions/ownership
726     if not os.path.exists(VTPM_DIR):
727         nova.privsep.path.makedirs(VTPM_DIR)
728         nova.privsep.path.chmod(VTPM_DIR, 0o711)
729     elif not os.path.isdir(VTPM_DIR):
730         msg = _(
731             'Guest wants emulated TPM but host path %s is not a directory.')
732         raise exception.Invalid(msg % VTPM_DIR)
733 
734     # Set ownership of instance-specific files
735     nova.privsep.path.chown(
736         swtpm_dir,
737         CONF.libvirt.swtpm_user,
738         CONF.libvirt.swtpm_group,
739         recursive=True)
740     # Move instance-specific directory to global dir
741     nova.privsep.path.move_tree(swtpm_dir, VTPM_DIR)
