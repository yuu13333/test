Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 # Copyright (c) 2017 Fujitsu Limited
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 
16 from neutron.agent.linux import utils as linux_utils
17 from neutron.privileged.agent.linux import netlink_lib as nl_lib
18 from neutron.tests.functional import base as functional_base
19 
20 
21 MAX_CONNTRACK_ZONE_ID = 65535
22 
23 
24 class NetlinkLibTestCase(functional_base.BaseSudoTestCase):
25     """Functional test for netlink_lib: List, delete, flush conntrack entries.
26 
27     For each function, first we add a specific namespace, then create real
28     conntrack entries. netlink_lib function will do list, delete and flush
29     these entries. This class will test this netlink_lib function work
30     as expected.
31     """
32 
33     def _create_entries(self, zone):
34         conntrack_cmds = (
35             ['conntrack', '-I', '-p', 'tcp',
36              '-s', '1.1.1.1', '-d', '2.2.2.2',
37              '--sport', '1', '--dport', '2',
38              '--state', 'ESTABLISHED', '--timeout', '1234', '-w', zone],
39             ['conntrack', '-I', '-p', 'udp',
40              '-s', '1.1.1.1', '-d', '2.2.2.2',
41              '--sport', '4', '--dport', '5',
42              '--timeout', '1234', '-w', zone],
43             ['conntrack', '-I', '-p', 'icmp',
44              '-s', '1.1.1.1', '-d', '2.2.2.2',
45              '--icmp-type', '8', '--icmp-code', '0', '--icmp-id', '3333',
46              '--timeout', '1234', '-w', zone],
47         )
48 
49         for cmd in conntrack_cmds:
50             try:
51                 linux_utils.execute(cmd,
52                                     run_as_root=True,
53                                     check_exit_code=True,
54                                     extra_ok_codes=[1])
55             except RuntimeError:
56                 raise Exception('Error while creating entry')
57 
58     def _delete_entry(self, delete_entries, remain_entries, zone):
59         nl_lib.delete_entries(entries=delete_entries)
60         entries_list = nl_lib.list_entries(zone=zone)
61         self.assertEqual(remain_entries, entries_list)
62 
63     @staticmethod
64     def _create_zone_id(zone_id):
65         """Creates non existed zone_id
66         """
67         if zone_id > MAX_CONNTRACK_ZONE_ID:
68             raise Exception('Invalid zone_id')
69         while zone_id < MAX_CONNTRACK_ZONE_ID:
70             cmd = ['conntrack', '-L', '-w', zone_id]
71             try:
72                 current_entries = linux_utils.execute(cmd,
73                                                       run_as_root=True,
74                                                       check_exit_code=True,
75                                                       extra_ok_codes=[1])
76             except RuntimeError:
77                 raise Exception('Error while listing entries')
78             if not current_entries:
79                 return zone_id
80             else:
81                 # increase zone_id by 1 and recheck
82                 zone_id += 1
83 
84     def test_list_entries(self):
85         _zone = self._create_zone_id(10)
86         self._create_entries(zone=_zone)
87         expected = (
88             (4, 'icmp', 8, 0, '1.1.1.1', '2.2.2.2', 3333, _zone),
89             (4, 'tcp', 1, 2, '1.1.1.1', '2.2.2.2', _zone),
90             (4, 'udp', 4, 5, '1.1.1.1', '2.2.2.2', _zone)
91         )
92         entries_list = nl_lib.list_entries(zone=_zone)
93         self.assertEqual(expected, entries_list)
94 
95     def test_delete_icmp_entry(self):
96         _zone = self._create_zone_id(20)
97         self._create_entries(zone=_zone)
98         icmp_entry = [(4, 'icmp', 8, 0, '1.1.1.1', '2.2.2.2', 3333, _zone)]
99         remain_entries = (
100             (4, 'tcp', 1, 2, '1.1.1.1', '2.2.2.2', _zone),
101             (4, 'udp', 4, 5, '1.1.1.1', '2.2.2.2', _zone),
102         )
103         self._delete_entry(icmp_entry, remain_entries, _zone)
104 
105     def test_delete_tcp_entry(self):
106         _zone = self._create_zone_id(30)
107         self._create_entries(zone=_zone)
108         tcp_entry = [(4, 'tcp', 1, 2, '1.1.1.1', '2.2.2.2', _zone)]
109         remain_entries = (
110             (4, 'icmp', 8, 0, '1.1.1.1', '2.2.2.2', 3333, _zone),
111             (4, 'udp', 4, 5, '1.1.1.1', '2.2.2.2', _zone)
112         )
113         self._delete_entry(tcp_entry, remain_entries, _zone)
114 
115     def test_delete_udp_entry(self):
116         _zone = self._create_zone_id(40)
117         self._create_entries(zone=_zone)
118         udp_entry = [(4, 'udp', 4, 5, '1.1.1.1', '2.2.2.2', _zone)]
119         remain_entries = (
120             (4, 'icmp', 8, 0, '1.1.1.1', '2.2.2.2', 3333, _zone),
121             (4, 'tcp', 1, 2, '1.1.1.1', '2.2.2.2', _zone)
122         )
123         self._delete_entry(udp_entry, remain_entries, _zone)
124 
125     def test_delete_multiple_entries(self):
126         _zone = self._create_zone_id(50)
127         self._create_entries(zone=_zone)
128         delete_entries = (
129             (4, 'icmp', 8, 0, '1.1.1.1', '2.2.2.2', 3333, _zone),
130             (4, 'tcp', 1, 2, '1.1.1.1', '2.2.2.2', _zone),
131             (4, 'udp', 4, 5, '1.1.1.1', '2.2.2.2', _zone)
132         )
133         remain_entries = ()
134         self._delete_entry(delete_entries, remain_entries, _zone)
