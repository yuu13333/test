Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 #!/usr/bin/env python
2 
3 #############################################################################
4 ##
5 ## Copyright (C) 2018 The Qt Company Ltd.
6 ## Contact: https://www.qt.io/licensing/
7 ##
8 ## This file is part of the test suite of the Qt Toolkit.
9 ##
10 ## $QT_BEGIN_LICENSE:LGPL$
11 ## Commercial License Usage
12 ## Licensees holding valid commercial Qt licenses may use this file in
13 ## accordance with the commercial license agreement provided with the
14 ## Software or, alternatively, in accordance with the terms contained in
15 ## a written agreement between you and The Qt Company. For licensing terms
16 ## and conditions see https://www.qt.io/terms-conditions. For further
17 ## information use the contact form at https://www.qt.io/contact-us.
18 ##
19 ## GNU Lesser General Public License Usage
20 ## Alternatively, this file may be used under the terms of the GNU Lesser
21 ## General Public License version 3 as published by the Free Software
22 ## Foundation and appearing in the file LICENSE.LGPL3 included in the
23 ## packaging of this file. Please review the following information to
24 ## ensure the GNU Lesser General Public License version 3 requirements
25 ## will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
26 ##
27 ## GNU General Public License Usage
28 ## Alternatively, this file may be used under the terms of the GNU
29 ## General Public License version 2.0 or (at your option) the GNU General
30 ## Public license version 3 or any later version approved by the KDE Free
31 ## Qt Foundation. The licenses are as published by the Free Software
32 ## Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
33 ## included in the packaging of this file. Please review the following
34 ## information to ensure the GNU General Public License requirements will
35 ## be met: https://www.gnu.org/licenses/gpl-2.0.html and
36 ## https://www.gnu.org/licenses/gpl-3.0.html.
37 ##
38 ## $QT_END_LICENSE$
39 ##
40 #############################################################################
41 
42 import logging
43 import socket
44 import os
45 from subprocess import Popen, PIPE, check_call, check_output
46 from tools import SERVER_NAME, DOMAIN_NAME, JsonConfig
47 from tools.utility import str_encode_hex
48 
49 class DockerConfig(JsonConfig):
50     """ Docker config items """
51 
52     def __init__(self, server):
53         JsonConfig.__init__(self, server)
54 
55     @property
56     def docker_file(self):
57         """ build server configurations """
58         config_list = []
59 
60         # NOTE: FROM must be the first command of DockerFile
61         build_version = self.version
62         if build_version:
63             config_list.append("FROM ubuntu:%s" % build_version)
64 
65         maintainer = self.maintainer
66         if maintainer:
67             config_list.append("MAINTAINER %s" % maintainer)
68 
69         if self.update:
70             config_list.append('RUN apt-get update')
71 
72         install_list = self.install
73         if install_list:
74             config_list.append("RUN apt-get install %s -y" % install_list)
75 
76         config_list.extend(self.copy_commands)
77         config_list.extend(self.get_config('docker_build_command'))
78         return config_list
79 
80     @property
81     def nwk_links(self):
82         """ add link to another container (--link) """
83         links = ''
84         for link_server in self.link:
85             links += "--link %s " % self.get_server_name(link_server)
86 
87         link_backend = self.backend
88         if link_backend:
89             dummy_id = self.get_server_name(link_backend)
90             dummy_alias = socket.getfqdn()
91             return '{links} --link {dummy_id}:{dummy_alias}'.format(**locals())
92         else:
93             return links
94 
95     @property
96     def export_ports(self):
97         """ publish a container's port to the host (-p) """
98         port_str = ''
99         if os.environ.has_key("TESTSERVER_BIND_LOCAL"):
100             for dummy_port in self.port:
101                 port_str += '-p {dummy_port}:{dummy_port} '.format(**locals())
102         else:
103             for dummy_port in self.port:
104                 port_str += '-p {dummy_port} '.format(**locals())
105         return port_str
106 
107     @property
108     def copy_commands(self):
109         """ copy files from the host to a container """
110         copy_cmd = []
111         for copy_file in self.copy:
112             dummy_str = str_encode_hex(open(copy_file.src, 'r').read())
113             copy_cmd.append(('RUN echo "\'{dummy_str}\'" | xargs echo -e > {copy_file.dst};'
114                              'chmod {copy_file.mode} {copy_file.dst}').format(**locals()))
115         return copy_cmd
116 
117     @property
118     def image_name(self):
119         """ get image name """
120         return self.get_image_name(self.module)
121 
122     @property
123     def server_name(self):
124         """ get server name """
125         return self.get_server_name(self.module)
126 
127     @property
128     def host_name(self):
129         """ get server hostname """
130         return self.get_host_name(self.module)
131 
132     @staticmethod
133     def get_image_name(server):
134         """ static get image name """
135         return '{0}:{1}'.format(SERVER_NAME, server)
136 
137     @staticmethod
138     def get_server_name(server):
139         """ static get server name """
140         return '{0}-{1}'.format(SERVER_NAME, server)
141 
142     @staticmethod
143     def get_host_name(server):
144         """ static get server hostname """
145         return '{0}.{1}'.format(server, DOMAIN_NAME)
146 
147 def docker_build(server_list):
148     """ build up server images """
149     base_file = DockerConfig('.').docker_file
150 
151     for server in server_list:
152         config = DockerConfig(server)
153         logging.info('[docker_build] (%s)', config.server_name)
154 
155         docker_pipe = Popen(("docker build - --quiet -t %s" % config.image_name).split(),
156                             stdin=PIPE, stdout=PIPE, stderr=PIPE)
157 
158         docker_file = '\n'.join(base_file + config.docker_file)
159         _, stderr = docker_pipe.communicate(input=docker_file)
160 
161         if stderr:
162             print stderr
163             exit(-1) # terminate if docker build fail
164 
165 def docker_run(server_list):
166     """ bring up all the server containers for testing """
167     docker_rm(server_list) # remove existed container for a clean test
168 
169     for server in server_list:
170         config = DockerConfig(server)
171         logging.info('[docker_run] (%s) %s', config.server_name, config.host_name)
172 
173         docker_pipe = Popen(('docker run -d -h {config.host_name} {config.export_ports} '
174                              '{config.nwk_links} --name {config.server_name} '
175                              '{config.image_name}'.format(**locals())).split(),
176                             stdout=PIPE, stderr=PIPE)
177 
178         _, stderr = docker_pipe.communicate()
179 
180         if stderr:
181             print stderr
182             exit(-1) # terminate if docker build fail
183 
184 def docker_exec(server_list):
185     """ make sure the server containers are ready for testing """
186     script = '/post_startup.py'
187     retry = 60
188 
189     for server in server_list:
190         config = DockerConfig(server)
191         logging.info('[docker_exec] (%s) %s, %d', config.server_name, script, retry)
192 
193         # Note:
194         # Do not use stdout=PIPE or stderr=PIPE with this function as that can
195         # deadlock based on the child process output volume. Use Popen with the
196         # communicate() method when you need pipes.
197         check_call(('docker exec {config.server_name} {script} '
198                     '{config.ensure} -c {retry}'.format(**locals())).split())
199 
200 def docker_rm(server_list):
201     """ delete all the server containers for a clean test """
202     for server in server_list:
203         logging.info('[docker_rm] (%s)', DockerConfig.get_server_name(server))
204 
205         docker_pipe = Popen(("docker rm -f %s" % DockerConfig.get_server_name(server)).split(),
206                             stdout=PIPE, stderr=PIPE)
207 
208         docker_pipe.communicate() # ignore docker remove container error
209 
210 def docker_rmi(server_list):
211     """ delete all the server image for a clean build """
212     docker_rm(server_list) # stop depending containers then remove images
213 
214     for server in server_list:
215         logging.info('[docker_rmi] (%s)', DockerConfig.get_image_name(server))
216 
217         docker_pipe = Popen(("docker rmi %s" % DockerConfig.get_image_name(server)).split(),
218                             stdout=PIPE, stderr=PIPE)
219 
220         docker_pipe.communicate() # ignore docker remove image error
221 
222 def docker_version():
223     """ retrieve docker version """
224     try:
225         return check_output(['docker', '-v'])
226     except OSError:
227         logging.error('[docker_version] not executable')
228         return ''
