Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 #    Copyright 2018 NTT Corporation
2 #
3 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
4 #    not use this file except in compliance with the License. You may obtain
5 #    a copy of the License at
6 #
7 #         http://www.apache.org/licenses/LICENSE-2.0
8 #
9 #    Unless required by applicable law or agreed to in writing, software
10 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 #    License for the specific language governing permissions and limitations
13 #    under the License.
14 
15 from nova.notifications.objects import base
16 from nova.notifications.objects import flavor as flavor_payload
17 from nova.notifications.objects import image as image_payload
18 from nova.notifications.objects import server_group as server_group_payload
19 from nova.objects import base as nova_base
20 from nova.objects import fields
21 
22 
23 @nova_base.NovaObjectRegistry.register_notification
24 class RequestSpecPayload(base.NotificationPayloadBase):
25     # Version 1.0: Initial version
26     # Version 1.1: Add force_hosts, force_nodes, ignore_hosts, image_meta,
27     #              instance_group, requested_destination, retry,
28     #              scheduler_hints and security_groups fields
29     VERSION = '1.1'
30 
31     SCHEMA = {
32         'ignore_hosts': ('request_spec', 'ignore_hosts'),
33         'instance_uuid': ('request_spec', 'instance_uuid'),
34         'project_id': ('request_spec', 'project_id'),
35         'user_id': ('request_spec', 'user_id'),
36         'availability_zone': ('request_spec', 'availability_zone'),
37         'num_instances': ('request_spec', 'num_instances'),
38         'scheduler_hints': ('request_spec', 'scheduler_hints'),
39     }
40 
41     fields = {
42         'instance_uuid': fields.UUIDField(),
43         'project_id': fields.StringField(nullable=True),
44         'user_id': fields.StringField(nullable=True),
45         'availability_zone': fields.StringField(nullable=True),
46         'flavor': fields.ObjectField('FlavorPayload', nullable=True),
47         'force_hosts': fields.StringField(nullable=True),
48         'force_nodes': fields.StringField(nullable=True),
49         'ignore_hosts': fields.ListOfStringsField(nullable=True),
50         'image_meta': fields.ObjectField('ImageMetaPayload', nullable=True),
51         'instance_group': fields.ObjectField('ServerGroupPayload',
52             nullable=True),
53         'image': fields.ObjectField('ImageMetaPayload', nullable=True),
54         'numa_topology': fields.ObjectField('InstanceNUMATopologyPayload',
55                                             nullable=True),
56         'pci_requests': fields.ObjectField('InstancePCIRequestsPayload',
57                                            nullable=True),
58         'num_instances': fields.IntegerField(default=1),
59         'requested_destination': fields.ObjectField('DestinationPayload',
60             nullable=True),
61         'retry': fields.ObjectField('SchedulerRetriesPayload', nullable=True),
62         'scheduler_hints': fields.DictOfListOfStringsField(nullable=True),
63         'security_groups': fields.ListOfStringsField(),
64     }
65 
66     def __init__(self, request_spec):
67         super(RequestSpecPayload, self).__init__()
68         self.flavor = flavor_payload.FlavorPayload(
69             request_spec.flavor) if request_spec.obj_attr_is_set(
70                 'flavor') else None
71         self.image = image_payload.ImageMetaPayload(
72             request_spec.image) if request_spec.image else None
73         if request_spec.numa_topology is not None:
74             if not request_spec.numa_topology.obj_attr_is_set('instance_uuid'):
75                 request_spec.numa_topology.instance_uuid = (
76                     request_spec.instance_uuid)
77             self.numa_topology = InstanceNUMATopologyPayload(
78                 request_spec.numa_topology)
79         else:
80             self.numa_topology = None
81         if request_spec.pci_requests is not None:
82             if not request_spec.pci_requests.obj_attr_is_set('instance_uuid'):
83                 request_spec.pci_requests.instance_uuid = (
84                     request_spec.instance_uuid)
85             self.pci_requests = InstancePCIRequestsPayload(
86                 request_spec.pci_requests)
87         else:
88             self.pci_requests = None
89         if 'requested_destination' in request_spec \
90                 and request_spec.requested_destination:
91             self.requested_destination = DestinationPayload(
92                 destination=request_spec.requested_destination)
93         else:
94             self.requested_destination = None
95         if 'retry' in request_spec and request_spec.retry:
96             self.retry = SchedulerRetriesPayload(
97                 retry=request_spec.retry)
98         else:
99             self.retry = None
100         self.security_groups = [
101             sec_group.identifier for sec_group in request_spec.security_groups]
102         if 'instance_group' in request_spec and request_spec.instance_group:
103             self.instance_group = server_group_payload.ServerGroupPayload(
104                 group=request_spec.instance_group)
105         else:
106             self.instance_group = None
107         if 'force_hosts' in request_spec and request_spec.force_hosts:
108             self.force_hosts = request_spec.force_hosts[0]
109         else:
110             self.force_hosts = None
111         if 'force_nodes' in request_spec and request_spec.force_nodes:
112             self.force_nodes = request_spec.force_nodes[0]
113         else:
114             self.force_nodes = None
115         self.populate_schema(request_spec=request_spec)
116 
117 
118 @nova_base.NovaObjectRegistry.register_notification
119 class InstanceNUMATopologyPayload(base.NotificationPayloadBase):
120     # Version 1.0: Initial version
121     VERSION = '1.0'
122 
123     SCHEMA = {
124         'instance_uuid': ('numa_topology', 'instance_uuid'),
125         'emulator_threads_policy': ('numa_topology',
126                                     'emulator_threads_policy')
127     }
128 
129     fields = {
130         'instance_uuid': fields.UUIDField(),
131         'cells': fields.ListOfObjectsField('InstanceNUMACellPayload'),
132         'emulator_threads_policy': fields.CPUEmulatorThreadsPolicyField(
133             nullable=True)
134     }
135 
136     def __init__(self, numa_topology):
137         super(InstanceNUMATopologyPayload, self).__init__()
138         self.cells = InstanceNUMACellPayload.from_numa_cell_list_obj(
139             numa_topology.cells)
140         self.populate_schema(numa_topology=numa_topology)
141 
142 
143 @nova_base.NovaObjectRegistry.register_notification
144 class InstanceNUMACellPayload(base.NotificationPayloadBase):
145     # Version 1.0: Initial version
146     VERSION = '1.0'
147 
148     SCHEMA = {
149         'id': ('numa_cell', 'id'),
150         'cpuset': ('numa_cell', 'cpuset'),
151         'memory': ('numa_cell', 'memory'),
152         'pagesize': ('numa_cell', 'pagesize'),
153         'cpu_pinning_raw': ('numa_cell', 'cpu_pinning_raw'),
154         'cpu_policy': ('numa_cell', 'cpu_policy'),
155         'cpu_thread_policy': ('numa_cell', 'cpu_thread_policy'),
156         'cpuset_reserved': ('numa_cell', 'cpuset_reserved'),
157     }
158 
159     fields = {
160         'id': fields.IntegerField(),
161         'cpuset': fields.SetOfIntegersField(),
162         'memory': fields.IntegerField(),
163         'pagesize': fields.IntegerField(nullable=True),
164         'cpu_topology': fields.ObjectField('VirtCPUTopologyPayload',
165                                            nullable=True),
166         'cpu_pinning_raw': fields.DictOfIntegersField(nullable=True),
167         'cpu_policy': fields.CPUAllocationPolicyField(nullable=True),
168         'cpu_thread_policy': fields.CPUThreadAllocationPolicyField(
169             nullable=True),
170         'cpuset_reserved': fields.SetOfIntegersField(nullable=True)
171     }
172 
173     def __init__(self, numa_cell):
174         super(InstanceNUMACellPayload, self).__init__()
175         if (numa_cell.obj_attr_is_set('cpu_topology') and
176                 numa_cell.cpu_topology is not None):
177             self.cpu_topology = VirtCPUTopologyPayload(numa_cell.cpu_topology)
178         else:
179             self.cpu_topology = None
180         self.populate_schema(numa_cell=numa_cell)
181 
182     @classmethod
183     def from_numa_cell_list_obj(cls, numa_cell_list):
184         """Returns a list of InstanceNUMACellPayload objects
185         based on the passed list of InstanceNUMACell objects.
186         """
187         payloads = []
188         for numa_cell in numa_cell_list:
189             payloads.append(cls(numa_cell))
190         return payloads
191 
192 
193 @nova_base.NovaObjectRegistry.register_notification
194 class VirtCPUTopologyPayload(base.NotificationPayloadBase):
195     # Version 1.0: Initial version
196     VERSION = '1.0'
197 
198     SCHEMA = {
199         'sockets': ('virt_cpu_topology', 'sockets'),
200         'cores': ('virt_cpu_topology', 'cores'),
201         'threads': ('virt_cpu_topology', 'threads'),
202     }
203 
204     fields = {
205         'sockets': fields.IntegerField(nullable=True, default=1),
206         'cores': fields.IntegerField(nullable=True, default=1),
207         'threads': fields.IntegerField(nullable=True, default=1),
208     }
209 
210     def __init__(self, virt_cpu_topology):
211         super(VirtCPUTopologyPayload, self).__init__()
212         self.populate_schema(virt_cpu_topology=virt_cpu_topology)
213 
214 
215 @nova_base.NovaObjectRegistry.register_notification
216 class InstancePCIRequestsPayload(base.NotificationPayloadBase):
217     # Version 1.0: Initial version
218     VERSION = '1.0'
219 
220     SCHEMA = {
221         'instance_uuid': ('pci_requests', 'instance_uuid')
222     }
223 
224     fields = {
225         'instance_uuid': fields.UUIDField(),
226         'requests': fields.ListOfObjectsField('InstancePCIRequestPayload')
227     }
228 
229     def __init__(self, pci_requests):
230         super(InstancePCIRequestsPayload, self).__init__()
231         self.requests = InstancePCIRequestPayload.from_pci_request_list_obj(
232             pci_requests.requests)
233         self.populate_schema(pci_requests=pci_requests)
234 
235 
236 @nova_base.NovaObjectRegistry.register_notification
237 class InstancePCIRequestPayload(base.NotificationPayloadBase):
238     # Version 1.0: Initial version
239     VERSION = '1.0'
240 
241     SCHEMA = {
242         'count': ('pci_request', 'count'),
243         'spec': ('pci_request', 'spec'),
244         'alias_name': ('pci_request', 'alias_name'),
245         'request_id': ('pci_request', 'request_id'),
246         'numa_policy': ('pci_request', 'numa_policy')
247     }
248 
249     fields = {
250         'count': fields.IntegerField(),
251         'spec': fields.ListOfDictOfNullableStringsField(),
252         'alias_name': fields.StringField(nullable=True),
253         'request_id': fields.UUIDField(nullable=True),
254         'numa_policy': fields.PCINUMAAffinityPolicyField(nullable=True)
255     }
256 
257     def __init__(self, pci_request):
258         super(InstancePCIRequestPayload, self).__init__()
259         self.populate_schema(pci_request=pci_request)
260 
261     @classmethod
262     def from_pci_request_list_obj(cls, pci_request_list):
263         """Returns a list of InstancePCIRequestPayload objects
264         based on the passed list of InstancePCIRequest objects.
265         """
266         payloads = []
267         for pci_request in pci_request_list:
268             payloads.append(cls(pci_request))
269         return payloads
270 
271 
272 @nova_base.NovaObjectRegistry.register_notification
273 class DestinationPayload(base.NotificationPayloadBase):
274     # Version 1.0: Initial version
275     VERSION = '1.0'
276 
277     SCHEMA = {
278         'aggregates': ('destination', 'aggregates'),
279     }
280 
281     fields = {
282         'host': fields.StringField(),
283         'node': fields.StringField(nullable=True),
284         'cell': fields.ObjectField('CellMappingPayload', nullable=True),
285         'aggregates': fields.ListOfStringsField(nullable=True,
286                                                 default=None),
287     }
288 
289     def __init__(self, destination):
290         super(DestinationPayload, self).__init__()
291         if (destination.obj_attr_is_set('host') and
292                 destination.host is not None):
293             self.host = destination.host
294         if (destination.obj_attr_is_set('node') and
295                 destination.node is not None):
296             self.node = destination.node
297         if (destination.obj_attr_is_set('cell') and
298                 destination.cell is not None):
299             self.cell = CellMappingPayload(destination.cell)
300         self.populate_schema(destination=destination)
301 
302 
303 @nova_base.NovaObjectRegistry.register_notification
304 class SchedulerRetriesPayload(base.NotificationPayloadBase):
305     # Version 1.0: Initial version
306     VERSION = '1.0'
307 
308     SCHEMA = {
309         'num_attempts': ('retry', 'num_attempts'),
310     }
311 
312     fields = {
313         'num_attempts': fields.IntegerField(),
314         'hosts': fields.ListOfStringsField(),
315     }
316 
317     def __init__(self, retry):
318         super(SchedulerRetriesPayload, self).__init__()
319         self.hosts = []
320         for compute_node in retry.hosts:
321             self.hosts.append(compute_node.hypervisor_hostname)
322         self.populate_schema(retry=retry)
323 
324 
325 @nova_base.NovaObjectRegistry.register_notification
326 class CellMappingPayload(base.NotificationPayloadBase):
327     # Version 1.0: Initial version
328     VERSION = '1.0'
329 
330     SCHEMA = {
331         'uuid': ('cell', 'uuid'),
332         'name': ('cell', 'name'),
333         'transport_url': ('cell', 'transport_url'),
334         'database_connection': ('cell', 'database_connection'),
335         'disabled': ('cell', 'disabled'),
336     }
337 
338     fields = {
339         'uuid': fields.UUIDField(),
340         'name': fields.StringField(nullable=True),
341         'transport_url': fields.StringField(),
342         'database_connection': fields.StringField(),
343         'disabled': fields.BooleanField(default=False),
344     }
345 
346     def __init__(self, cell):
347         super(CellMappingPayload, self).__init__()
348         self.populate_schema(cell=cell)
