Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 # Licensed under the Apache License, Version 2.0 (the "License");
2 # you may not use this file except in compliance with the License.
3 # You may obtain a copy of the License at
4 #
5 #    http://www.apache.org/licenses/LICENSE-2.0
6 #
7 # Unless required by applicable law or agreed to in writing, software
8 # distributed under the License is distributed on an "AS IS" BASIS,
9 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
10 # See the License for the specific language governing permissions and
11 # limitations under the License.
12 
13 from nova import test
14 from nova.tests import fixtures as nova_fixtures
15 from nova.tests.functional import integrated_helpers
16 from nova.tests.unit import fake_network
17 import nova.tests.unit.image.fake
18 from nova.tests.unit import policy_fixture
19 from nova.virt import fake
20 
21 
22 class TestLiveMigrateOneOfConcurrentlyCreatedInstances(
23         test.TestCase, integrated_helpers.InstanceHelperMixin):
24     """Regression tests for bug #1718455
25 
26     When creating multiple instances at the same time, the RequestSpec record
27     is persisting the number of concurrent instances.
28     Once we want to move or rebuild one of them, the scheduler shouldn't
29     lookup that specific record unless we don't pass a list of instance UUIDs
30     to move. It was partially fixed by bug #1708961 but we forgot to amend
31     some place in the scheduler so that the right number of hosts was returned
32     to the scheduler method calling both the Placement API and filters/weighers
33     but we were verifying that returned size of hosts against a wrong number,
34     which is the number of instances created concurrently.
35 
36     That test will create 2 concurrent instances and verify that when
37     live-migrating one of them, we end up with a NoValidHost exception.
38     """
39 
40     microversion = 'latest'
41 
42     def setUp(self):
43         super(TestLiveMigrateOneOfConcurrentlyCreatedInstances, self).setUp()
44 
45         self.useFixture(policy_fixture.RealPolicyFixture())
46         self.useFixture(nova_fixtures.NeutronFixture(self))
47         self.useFixture(nova_fixtures.PlacementFixture())
48 
49         api_fixture = self.useFixture(nova_fixtures.OSAPIFixture(
50             api_version='v2.1'))
51 
52         self.api = api_fixture.admin_api
53         self.api.microversion = self.microversion
54 
55         nova.tests.unit.image.fake.stub_out_image_service(self)
56 
57         self.start_service('conductor')
58         self.start_service('scheduler')
59 
60         self.addCleanup(nova.tests.unit.image.fake.FakeImageService_reset)
61 
62         # set_nodes() is needed to have each compute service return a
63         # different nodename, so we get two hosts in the list of candidates
64         # for scheduling. Otherwise both hosts will have the same default
65         # nodename "fake-mini". The host passed to start_service controls the
66         # "host" attribute and set_nodes() sets the "nodename" attribute.
67         # We set_nodes() to make host and nodename the same for each compute.
68         fake.set_nodes(['host1'])
69         self.addCleanup(fake.restore_nodes)
70         self.start_service('compute', host='host1')
71         fake.set_nodes(['host2'])
72         self.addCleanup(fake.restore_nodes)
73         self.start_service('compute', host='host2')
74 
75         fake_network.set_stub_network_methods(self)
76 
77         flavors = self.api.get_flavors()
78         self.flavor1 = flavors[0]
79 
80     def _boot_servers(self, num_servers=1):
81         server_req = self._build_minimal_create_server_request(
82             self.api, 'some-server', flavor_id=self.flavor1['id'],
83             image_uuid='155d900f-4e14-4e4c-a73d-069cbf4541e6',
84             networks='none')
85         if num_servers > 1:
86             server_req.update({'min_count': str(num_servers)})
87         created_server_1 = self.api.post_server({'server': server_req})
88         return self._wait_for_state_change(
89             self.api, created_server_1, 'ACTIVE')
90 
91     def test_live_migrate_one_instance(self):
92         # Boot a server
93         self._boot_servers(num_servers=2)
94 
95         servers = self.api.get_servers()
96 
97         # Take the first instance and verify which host the instance is there
98         server = servers[0]
99         original_host = server['OS-EXT-SRV-ATTR:host']
100         target_host = 'host1' if original_host == 'host2' else 'host2'
101 
102         # Initiate live migration for that instance by targeting the other host
103         post = {'os-migrateLive': {'block_migration': 'auto',
104                                    'host': target_host}}
105         self.api.post_server_action(server['id'], post)
106 
107         server = self._wait_for_state_change(self.api, server, 'ACTIVE')
108 
109         # Verify that the migration failed as the instance is still on the
110         # source node.
111         self.assertEqual(original_host, server['OS-EXT-SRV-ATTR:host'])
112         # Check the migration by itself
113         migrations = self.api.get_migrations()
114         self.assertEqual(1, len(migrations))
115         self.assertEqual('live-migration', migrations[0]['migration_type'])
116         self.assertEqual(server['id'], migrations[0]['instance_uuid'])
117         self.assertEqual(original_host, migrations[0]['source_compute'])
118         self.assertEqual('error', migrations[0]['status'])
