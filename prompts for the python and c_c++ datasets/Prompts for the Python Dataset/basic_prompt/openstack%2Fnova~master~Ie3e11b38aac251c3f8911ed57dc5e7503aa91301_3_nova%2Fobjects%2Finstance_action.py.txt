Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 #    Copyright 2013 IBM Corp.
2 #
3 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
4 #    not use this file except in compliance with the License. You may obtain
5 #    a copy of the License at
6 #
7 #         http://www.apache.org/licenses/LICENSE-2.0
8 #
9 #    Unless required by applicable law or agreed to in writing, software
10 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 #    License for the specific language governing permissions and limitations
13 #    under the License.
14 
15 from oslo_utils import timeutils
16 from oslo_utils import versionutils
17 import six
18 
19 from nova.compute import utils as compute_utils
20 from nova.db import api as db
21 from nova import exception
22 from nova import objects
23 from nova.objects import base
24 from nova.objects import fields
25 
26 
27 # TODO(berrange): Remove NovaObjectDictCompat
28 @base.NovaObjectRegistry.register
29 class InstanceAction(base.NovaPersistentObject, base.NovaObject,
30                      base.NovaObjectDictCompat):
31     # Version 1.0: Initial version
32     # Version 1.1: String attributes updated to support unicode
33     # Version 1.2: Add create() method.
34     VERSION = '1.2'
35 
36     fields = {
37         'id': fields.IntegerField(),
38         'action': fields.StringField(nullable=True),
39         'instance_uuid': fields.UUIDField(nullable=True),
40         'request_id': fields.StringField(nullable=True),
41         'user_id': fields.StringField(nullable=True),
42         'project_id': fields.StringField(nullable=True),
43         'start_time': fields.DateTimeField(nullable=True),
44         'finish_time': fields.DateTimeField(nullable=True),
45         'message': fields.StringField(nullable=True),
46         }
47 
48     @staticmethod
49     def _from_db_object(context, action, db_action):
50         for field in action.fields:
51             action[field] = db_action[field]
52         action._context = context
53         action.obj_reset_changes()
54         return action
55 
56     @staticmethod
57     def pack_action_start(context, instance_uuid, action_name):
58         values = {'request_id': context.request_id,
59                   'instance_uuid': instance_uuid,
60                   'user_id': context.user_id,
61                   'project_id': context.project_id,
62                   'action': action_name,
63                   'start_time': context.timestamp,
64                   'updated_at': context.timestamp}
65         return values
66 
67     @staticmethod
68     def pack_action_finish(context, instance_uuid):
69         utcnow = timeutils.utcnow()
70         values = {'request_id': context.request_id,
71                   'instance_uuid': instance_uuid,
72                   'finish_time': utcnow,
73                   'updated_at': utcnow}
74         return values
75 
76     @base.remotable_classmethod
77     def get_by_request_id(cls, context, instance_uuid, request_id):
78         db_action = db.action_get_by_request_id(context, instance_uuid,
79                                                 request_id)
80         if db_action:
81             return cls._from_db_object(context, cls(), db_action)
82 
83     @base.remotable_classmethod
84     def action_start(cls, context, instance_uuid, action_name,
85                      want_result=True):
86         values = cls.pack_action_start(context, instance_uuid, action_name)
87         db_action = db.action_start(context, values)
88         if want_result:
89             return cls._from_db_object(context, cls(), db_action)
90 
91     @base.remotable_classmethod
92     def action_finish(cls, context, instance_uuid, want_result=True):
93         values = cls.pack_action_finish(context, instance_uuid)
94         db_action = db.action_finish(context, values)
95         if want_result:
96             return cls._from_db_object(context, cls(), db_action)
97 
98     @base.remotable
99     def finish(self):
100         values = self.pack_action_finish(self._context, self.instance_uuid)
101         db_action = db.action_finish(self._context, values)
102         self._from_db_object(self._context, self, db_action)
103 
104     # NOTE(mriedem): In most cases, the action_start() method should be used
105     # to create new InstanceAction records. This method should only be used
106     # in specific exceptional cases like when cloning actions from one cell
107     # database to another.
108     @base.remotable
109     def create(self):
110         if 'id' in self:
111             raise exception.ObjectActionError(action='create',
112                                               reason='already created')
113         updates = self.obj_get_changes()
114         db_action = db.action_start(self._context, updates)
115         self._from_db_object(self._context, self, db_action)
116 
117 
118 @base.NovaObjectRegistry.register
119 class InstanceActionList(base.ObjectListBase, base.NovaObject):
120     # Version 1.0: Initial version
121     # Version 1.1: get_by_instance_uuid added pagination and filters support
122     VERSION = '1.1'
123     fields = {
124         'objects': fields.ListOfObjectsField('InstanceAction'),
125         }
126 
127     @base.remotable_classmethod
128     def get_by_instance_uuid(cls, context, instance_uuid, limit=None,
129                              marker=None, filters=None):
130         db_actions = db.actions_get(
131             context, instance_uuid, limit, marker, filters)
132         return base.obj_make_list(context, cls(), InstanceAction, db_actions)
133 
134 
135 # TODO(berrange): Remove NovaObjectDictCompat
136 @base.NovaObjectRegistry.register
137 class InstanceActionEvent(base.NovaPersistentObject, base.NovaObject,
138                           base.NovaObjectDictCompat):
139     # Version 1.0: Initial version
140     # Version 1.1: event_finish_with_failure decorated with serialize_args
141     # Version 1.2: Add 'host' field
142     # Version 1.3: Add create() method.
143     # Version 1.4: Added 'details' field.
144     VERSION = '1.4'
145     fields = {
146         'id': fields.IntegerField(),
147         'event': fields.StringField(nullable=True),
148         'action_id': fields.IntegerField(nullable=True),
149         'start_time': fields.DateTimeField(nullable=True),
150         'finish_time': fields.DateTimeField(nullable=True),
151         'result': fields.StringField(nullable=True),
152         'traceback': fields.StringField(nullable=True),
153         'host': fields.StringField(nullable=True),
154         'details': fields.StringField(nullable=True)
155         }
156 
157     def obj_make_compatible(self, primitive, target_version):
158         target_version = versionutils.convert_version_to_tuple(target_version)
159         if target_version < (1, 4) and 'details' in primitive:
160             del primitive['details']
161         if target_version < (1, 2) and 'host' in primitive:
162             del primitive['host']
163 
164     @staticmethod
165     def _from_db_object(context, event, db_event):
166         for field in event.fields:
167             event[field] = db_event[field]
168         event._context = context
169         event.obj_reset_changes()
170         return event
171 
172     @staticmethod
173     def pack_action_event_start(context, instance_uuid, event_name,
174                                 host=None):
175         values = {'event': event_name,
176                   'instance_uuid': instance_uuid,
177                   'request_id': context.request_id,
178                   'start_time': timeutils.utcnow(),
179                   'host': host}
180         return values
181 
182     @staticmethod
183     def pack_action_event_finish(context, instance_uuid, event_name,
184                                  exc_val=None, exc_tb=None):
185         values = {'event': event_name,
186                   'instance_uuid': instance_uuid,
187                   'request_id': context.request_id,
188                   'finish_time': timeutils.utcnow()}
189         if exc_tb is None:
190             values['result'] = 'Success'
191         else:
192             values['result'] = 'Error'
193             # Store the details using the same logic as storing an instance
194             # fault message.
195             if exc_val:
196                 # If we got a string for exc_val it's probably because of
197                 # the serialize_args decorator on event_finish_with_failure
198                 # so pass that as the message to exception_to_dict otherwise
199                 # the details will just be "str" since it cannot format the
200                 # message as a NovaException.
201                 # FIXME(mriedem): This is likely not the behavior we want
202                 # because it could mean leaking non-nova error details which
203                 # is why exception_to_dict just uses the exception type as
204                 # the message if it cannot format the value. Need to change
205                 # the serialize_args decorator to pass a format_exc_val kwarg.
206                 message = (
207                     exc_val if isinstance(exc_val, six.string_types) else None)
208                 values['details'] = compute_utils.exception_to_dict(
209                     exc_val, message=message)['message']
210             values['traceback'] = exc_tb
211         return values
212 
213     @base.remotable_classmethod
214     def get_by_id(cls, context, action_id, event_id):
215         db_event = db.action_event_get_by_id(context, action_id, event_id)
216         return cls._from_db_object(context, cls(), db_event)
217 
218     @base.remotable_classmethod
219     def event_start(cls, context, instance_uuid, event_name, want_result=True,
220                     host=None):
221         values = cls.pack_action_event_start(context, instance_uuid,
222                                              event_name, host=host)
223         db_event = db.action_event_start(context, values)
224         if want_result:
225             return cls._from_db_object(context, cls(), db_event)
226 
227     @base.serialize_args
228     @base.remotable_classmethod
229     def event_finish_with_failure(cls, context, instance_uuid, event_name,
230                                   exc_val=None, exc_tb=None, want_result=None):
231         values = cls.pack_action_event_finish(context, instance_uuid,
232                                               event_name, exc_val=exc_val,
233                                               exc_tb=exc_tb)
234         db_event = db.action_event_finish(context, values)
235         if want_result:
236             return cls._from_db_object(context, cls(), db_event)
237 
238     @base.remotable_classmethod
239     def event_finish(cls, context, instance_uuid, event_name,
240                      want_result=True):
241         return cls.event_finish_with_failure(context, instance_uuid,
242                                              event_name, exc_val=None,
243                                              exc_tb=None,
244                                              want_result=want_result)
245 
246     @base.remotable
247     def finish_with_failure(self, exc_val, exc_tb):
248         values = self.pack_action_event_finish(self._context,
249                                                self.instance_uuid,
250                                                self.event, exc_val=exc_val,
251                                                exc_tb=exc_tb)
252         db_event = db.action_event_finish(self._context, values)
253         self._from_db_object(self._context, self, db_event)
254 
255     @base.remotable
256     def finish(self):
257         self.finish_with_failure(self._context, exc_val=None, exc_tb=None)
258 
259     # NOTE(mriedem): In most cases, the event_start() method should be used
260     # to create new InstanceActionEvent records. This method should only be
261     # used in specific exceptional cases like when cloning events from one cell
262     # database to another.
263     @base.remotable
264     def create(self, instance_uuid, request_id):
265         if 'id' in self:
266             raise exception.ObjectActionError(action='create',
267                                               reason='already created')
268         updates = self.obj_get_changes()
269         # The instance_uuid and request_id uniquely identify the "parent"
270         # InstanceAction for this event and are used in action_event_start().
271         # TODO(mriedem): This could be optimized if we just didn't use
272         # db.action_event_start and inserted the record ourselves and passed
273         # in the action_id.
274         updates['instance_uuid'] = instance_uuid
275         updates['request_id'] = request_id
276         db_event = db.action_event_start(self._context, updates)
277         self._from_db_object(self._context, self, db_event)
278 
279 
280 @base.NovaObjectRegistry.register
281 class InstanceActionEventList(base.ObjectListBase, base.NovaObject):
282     # Version 1.0: Initial version
283     # Version 1.1: InstanceActionEvent <= 1.1
284     VERSION = '1.1'
285     fields = {
286         'objects': fields.ListOfObjectsField('InstanceActionEvent'),
287         }
288 
289     @base.remotable_classmethod
290     def get_by_action(cls, context, action_id):
291         db_events = db.action_events_get(context, action_id)
292         return base.obj_make_list(context, cls(context),
293                                   objects.InstanceActionEvent, db_events)
