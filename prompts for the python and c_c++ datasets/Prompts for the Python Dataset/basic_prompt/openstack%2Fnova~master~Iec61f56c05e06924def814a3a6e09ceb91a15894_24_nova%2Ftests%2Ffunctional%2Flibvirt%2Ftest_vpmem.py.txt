Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 #
2 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
3 #    not use this file except in compliance with the License. You may obtain
4 #    a copy of the License at
5 #
6 #         http://www.apache.org/licenses/LICENSE-2.0
7 #
8 #    Unless required by applicable law or agreed to in writing, software
9 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
10 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
11 #    License for the specific language governing permissions and limitations
12 #    under the License.
13 
14 import fixtures
15 import time
16 
17 from oslo_config import cfg
18 from oslo_log import log as logging
19 
20 from nova import objects
21 from nova.tests.functional.libvirt import integrated_helpers
22 from nova.tests.unit.virt.libvirt import fake_imagebackend
23 from nova.tests.unit.virt.libvirt import fakelibvirt
24 
25 
26 CONF = cfg.CONF
27 LOG = logging.getLogger(__name__)
28 
29 
30 class VPMEMTestBase(integrated_helpers.LibvirtProviderUsageBaseTestCase):
31 
32     FAKE_LIBVIRT_VERSION = 5000000
33     FAKE_QEMU_VERSION = 3001000
34 
35     def setUp(self):
36         super(VPMEMTestBase, self).setUp()
37 
38         self.flags(pmem_namespaces="4GB:ns_0,SMALL:ns_1|ns_2",
39                    group='libvirt')
40         self.fake_pmem_namespaces = '''
41             [{"dev":"namespace0.0",
42             "mode":"devdax",
43             "map":"mem",
44             "size":4292870144,
45             "uuid":"24ffd5e4-2b39-4f28-88b3-d6dc1ec44863",
46             "daxregion":{"id": 0, "size": 4292870144,"align": 2097152,
47             "devices":[{"chardev":"dax0.0",
48             "size":4292870144}]},
49             "name":"ns_0",
50             "numa_node":0},
51             {"dev":"namespace0.1",
52             "mode":"devdax",
53             "map":"mem",
54             "size":4292870144,
55             "uuid":"ac64fe52-de38-465b-b32b-947a6773ac66",
56             "daxregion":{"id": 0, "size": 4292870144,"align": 2097152,
57             "devices":[{"chardev":"dax0.1",
58             "size":4292870144}]},
59             "name":"ns_1",
60             "numa_node":0},
61             {"dev":"namespace0.2",
62             "mode":"devdax",
63             "map":"mem",
64             "size":4292870144,
65             "uuid":"2ff41eba-db9c-4bb9-a959-31d992568a3e",
66             "raw_uuid":"0b61823b-5668-4856-842d-c644dae83410",
67             "daxregion":{"id":0, "size":4292870144, "align":2097152,
68             "devices":[{"chardev":"dax0.2",
69             "size":4292870144}]},
70             "name":"ns_2",
71             "numa_node":0}]'''
72 
73         self.useFixture(fixtures.MockPatch(
74             'nova.privsep.libvirt.cleanup_vpmem'))
75         self.useFixture(fixtures.MockPatch(
76             'nova.privsep.libvirt.get_pmem_namespaces',
77             return_value=self.fake_pmem_namespaces))
78         self.useFixture(fake_imagebackend.ImageBackendFixture())
79         self.useFixture(fixtures.MockPatch(
80             'nova.virt.libvirt.LibvirtDriver._get_local_gb_info',
81             return_value={'total': 128,
82                           'used': 44,
83                           'free': 84}))
84         self.mock_conn = self.useFixture(fixtures.MockPatch(
85             'nova.virt.libvirt.host.Host._get_new_connection')).mock
86 
87     def _get_connection(self, host_info, hostname=None):
88         fake_connection = fakelibvirt.Connection(
89             'qemu:///system',
90             version=self.FAKE_LIBVIRT_VERSION,
91             hv_version=self.FAKE_QEMU_VERSION,
92             host_info=host_info,
93             hostname=hostname)
94         return fake_connection
95 
96     def _start_compute_service(self, hostname):
97         fake_connection = self._get_connection(
98             # Need a host to support creating more servers.
99             host_info=fakelibvirt.HostInfo(kB_mem=8192, cpu_cores=8),
100             hostname=hostname)
101         self.mock_conn.return_value = fake_connection
102         compute = self._start_compute(host=hostname)
103 
104         # Ensure populating the existing pmems correctly.
105         vpmems = compute.driver._vpmems_by_name
106         expected_vpmems = {
107             'ns_0': objects.LibvirtVPMEMDevice(
108                 label='4GB', name='ns_0', devpath='/dev/dax0.0',
109                 size=4292870144, align=2097152),
110             'ns_1': objects.LibvirtVPMEMDevice(
111                 label='SMALL', name='ns_1', devpath='/dev/dax0.1',
112                 size=4292870144, align=2097152),
113             'ns_2': objects.LibvirtVPMEMDevice(
114                 label='SMALL', name='ns_2', devpath='/dev/dax0.2',
115                 size=4292870144, align=2097152)}
116         self.assertDictEqual(expected_vpmems, vpmems)
117 
118         # Ensure reporting vpmems resources correctly
119         rp_uuid = self._get_provider_uuid_by_host(compute.host)
120         inventory = self._get_provider_inventory(rp_uuid)
121         self.assertEqual(1, inventory['CUSTOM_PMEM_NAMESPACE_4GB']['total'])
122         self.assertEqual(2, inventory['CUSTOM_PMEM_NAMESPACE_SMALL']['total'])
123 
124         return compute
125 
126     def _wait_for_state_change(self, server, expected_status):
127         for i in range(0, 50):
128             server = self.api.get_server(server['id'])
129             if server['status'] == expected_status:
130                 return server
131             time.sleep(.1)
132         self.assertEqual(expected_status, server['status'])
133         return server
134 
135     def _create_server(self, flavor_id, hostname):
136         server_req = self._build_minimal_create_server_request(
137             self.api, 'some-server', flavor_id=flavor_id,
138             image_uuid='155d900f-4e14-4e4c-a73d-069cbf4541e6',
139             networks='none')
140         server_req['availability_zone'] = 'nova:%s' % hostname
141         LOG.info('booting on %s', hostname)
142         created_server = self.api.post_server({'server': server_req})
143         return created_server
144 
145     def _delete_server(self, server):
146         self.api.delete_server(server['id'])
147 
148     def _create_flavor(self, extra_spec=None):
149         flv_name, flv_id = self.get_unused_flavor_name_id()
150         flavor_body = {'flavor':
151                            {'name': flv_name,
152                             'id': flv_id,
153                             'ram': 1024,
154                             'vcpus': 1,
155                             'disk': 1,
156                             }}
157         self.api.post_flavor(flavor_body)
158         if extra_spec:
159             spec = {"extra_specs": extra_spec}
160             self.api.post_extra_spec(flv_id, spec)
161         return flv_id
162 
163     def _check_vpmem_allocations(self, vpmem_allocs, server_id):
164         allocs = self._get_allocations_by_server_uuid(server_id)
165         for alloc in allocs.values():
166             alloc_resources = alloc['resources']
167             if set(vpmem_allocs.keys()) < set(alloc_resources.keys()):
168                 for vpmem_rc in vpmem_allocs:
169                     self.assertEqual(vpmem_allocs[vpmem_rc],
170                                      alloc_resources[vpmem_rc])
171                 return
172         self.fail("Check vpmem allocations failed")
173 
174 
175 class VPMEMTests(VPMEMTestBase):
176 
177     def setUp(self):
178         super(VPMEMTests, self).setUp()
179         extra_spec = {"hw:pmem": "SMALL"}
180         self.flavor = self._create_flavor(extra_spec=extra_spec)
181 
182     def test_create_servers_with_vpmem(self):
183         # Start one compute service
184         self.compute1 = self._start_compute_service('host1')
185 
186         # Boot two servers with pmem
187         server1 = self._create_server(self.flavor, self.compute1.host)
188         self._wait_for_state_change(server1, 'ACTIVE')
189         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
190                                       server1['id'])
191         server2 = self._create_server(self.flavor, self.compute1.host)
192         self._wait_for_state_change(server2, 'ACTIVE')
193         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
194                                       server2['id'])
195 
196         # 'SMALL' VPMEM resource has used up
197         server3 = self._create_server(self.flavor, self.compute1.host)
198         self._wait_for_state_change(server3, 'ERROR')
199 
200         # Delete server2, one 'SMALL' VPMEM will be released
201         self._delete_server(server2)
202         server3 = self._create_server(self.flavor, self.compute1.host)
203         self._wait_for_state_change(server3, 'ACTIVE')
204         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
205                                       server3['id'])
206 
207 
208 class VPMEMResizeTests(VPMEMTestBase):
209 
210     def setUp(self):
211         super(VPMEMResizeTests, self).setUp()
212 
213         self.useFixture(fixtures.MockPatch(
214             'nova.virt.libvirt.LibvirtDriver._get_instance_disk_info',
215              return_value=[]))
216         self.useFixture(fixtures.MockPatch('os.rename'))
217 
218         extra_spec = {"hw:pmem": "SMALL"}
219         self.flavor1 = self._create_flavor(extra_spec=extra_spec)
220         extra_spec = {"hw:pmem": "4GB,SMALL"}
221         self.flavor2 = self._create_flavor(extra_spec=extra_spec)
222 
223     def _resize_server(self, server, flavor):
224         resize_req = {
225             'resize': {
226                 'flavorRef': flavor
227             }
228         }
229         self.api.api_post('/servers/%s/action' % server['id'],
230                           resize_req)
231 
232     def _confirm_resize(self, server):
233         confirm_resize_req = {'confirmResize': None}
234         self.api.api_post('/servers/%s/action' % server['id'],
235                           confirm_resize_req)
236 
237     def _revert_resize(self, server):
238         revert_resize_req = {'revertResize': None}
239         self.api.api_post('/servers/%s/action' % server['id'],
240                           revert_resize_req)
241 
242     def test_resize(self):
243         self.flags(allow_resize_to_same_host=False)
244         # Start two compute nodes
245         self.compute1 = self._start_compute_service('host1')
246         self.compute2 = self._start_compute_service('host2')
247 
248         # Boot one server with pmem, then resize the server
249         server = self._create_server(self.flavor1, self.compute1.host)
250         self._wait_for_state_change(server, 'ACTIVE')
251         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
252                                       server['id'])
253 
254         # Revert resize
255         self._resize_server(server, self.flavor2)
256         self._wait_for_state_change(server, 'VERIFY_RESIZE')
257         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_4GB': 1,
258                                        'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
259                                       server['id'])
260         self._revert_resize(server)
261         self._wait_for_state_change(server, 'ACTIVE')
262         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
263                                       server['id'])
264 
265         # Confirm resize
266         self._resize_server(server, self.flavor2)
267         self._wait_for_state_change(server, 'VERIFY_RESIZE')
268         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_4GB': 1,
269                                        'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
270                                       server['id'])
271         self._confirm_resize(server)
272         self._wait_for_state_change(server, 'ACTIVE')
273         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_4GB': 1,
274                                        'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
275                                       server['id'])
276 
277     def test_resize_same_host(self):
278         self.flags(allow_resize_to_same_host=True)
279         # Start one compute nodes
280         self.compute1 = self._start_compute_service('host1')
281 
282         # Boot one server with pmem, then resize the server
283         server = self._create_server(self.flavor1, self.compute1.host)
284         self._wait_for_state_change(server, 'ACTIVE')
285         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
286                                       server['id'])
287 
288         # Revert resize
289         self._resize_server(server, self.flavor2)
290         self._wait_for_state_change(server, 'VERIFY_RESIZE')
291         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_4GB': 1,
292                                        'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
293                                       server['id'])
294         self._revert_resize(server)
295         self._wait_for_state_change(server, 'ACTIVE')
296         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
297                                       server['id'])
298 
299         # Confirm resize
300         self._resize_server(server, self.flavor2)
301         self._wait_for_state_change(server, 'VERIFY_RESIZE')
302         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_4GB': 1,
303                                        'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
304                                       server['id'])
305         self._confirm_resize(server)
306         self._wait_for_state_change(server, 'ACTIVE')
307         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_4GB': 1,
308                                        'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
309                                       server['id'])
