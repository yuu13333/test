I want you to act as a code reviewer of Nova in OpenStack. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 # Licensed under the Apache License, Version 2.0 (the "License"); you may
2 # not use this file except in compliance with the License. You may obtain
3 # a copy of the License at
4 #
5 #      http://www.apache.org/licenses/LICENSE-2.0
6 #
7 # Unless required by applicable law or agreed to in writing, software
8 # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
9 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
10 # License for the specific language governing permissions and limitations
11 # under the License.
12 
13 from nova import test
14 from nova.tests import fixtures as nova_fixtures
15 from nova.tests.functional import integrated_helpers
16 from nova.tests.unit import cast_as_call
17 import nova.tests.unit.image.fake
18 from nova.tests.unit import policy_fixture
19 
20 
21 class TestLocalDeleteAllocations(test.TestCase,
22                                  integrated_helpers.InstanceHelperMixin):
23     def setUp(self):
24         super(TestLocalDeleteAllocations, self).setUp()
25         self.useFixture(policy_fixture.RealPolicyFixture())
26         # The NeutronFixture is needed to show security groups for a server.
27         self.useFixture(nova_fixtures.NeutronFixture(self))
28         # We need the computes reporting into placement for the filter
29         # scheduler to pick a host.
30         placement = self.useFixture(nova_fixtures.PlacementFixture())
31         self.placement_api = placement.api
32         api_fixture = self.useFixture(nova_fixtures.OSAPIFixture(
33             api_version='v2.1'))
34         self.api = api_fixture.api
35         self.admin_api = api_fixture.admin_api
36         # We need the latest microversion to disable the compute service
37         self.admin_api.microversion = 'latest'
38         # the image fake backend needed for image discovery
39         nova.tests.unit.image.fake.stub_out_image_service(self)
40 
41         self.start_service('conductor')
42         self.start_service('consoleauth')
43 
44         self.flags(group='scheduler', driver='chance_scheduler')
45         self.start_service('scheduler')
46 
47         self.compute = self.start_service('compute')
48 
49         self.useFixture(cast_as_call.CastAsCall(self.stubs))
50 
51         self.image_id = self.api.get_images()[0]['id']
52         self.flavor_id = self.api.get_flavors()[0]['id']
53 
54     def _get_usages(self, rp_uuid):
55         fmt = '/resource_providers/%(uuid)s/usages'
56         resp = self.placement_api.get(fmt % {'uuid': rp_uuid})
57         return resp.body['usages']
58 
59     def test_local_delete_removes_allocations(self):
60         """Tests that allocations are removed after a local delete.
61 
62         This tests the scenario where a server is local deleted (because the
63         compute host is down) and we want to make sure that its allocations
64         have been cleaned up.
65         """
66         # Get allocations, make sure they are 0.
67         resp = self.placement_api.get('/resource_providers')
68         rp_uuid = resp.body['resource_providers'][0]['uuid']
69         usages_before = self._get_usages(rp_uuid)
70         for usage in usages_before.values():
71             self.assertEqual(0, usage)
72 
73         # Create a server.
74         server = self._build_minimal_create_server_request(self.api,
75             'local-delete-test', self.image_id, self.flavor_id, 'none')
76         server = self.admin_api.post_server({'server': server})
77         server = self._wait_for_state_change(self.api, server, 'ACTIVE')
78 
79         # Assert usages are non zero now.
80         usages_during = self._get_usages(rp_uuid)
81         for usage in usages_during.values():
82             self.assertNotEqual(0, usage)
83 
84         # Disable compute to trigger local delete.
85         compute_service_id = self.admin_api.get_services(
86             host=self.compute.host, binary='nova-compute')[0]['id']
87         self.admin_api.put_service(compute_service_id, {'status': 'disabled'})
88 
89         # Delete the server (will be a local delete because compute is down).
90         self.api.delete_server(server['id'])
91 
92         # Enable the compute service again. When it comes up, it will call the
93         # update_available_resource code in the ResourceTracker which is what
94         # eventually "heals" the allocations for the deleted instance.
95         self.admin_api.put_service(compute_service_id, {'status': 'enabled'})
96 
97         # Get the allocations again to check against the original.
98         usages_after = self._get_usages(rp_uuid)
99 
100         # They should match.
101         self.assertEqual(usages_before, usages_after)
