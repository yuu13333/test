I want you to act as a code reviewer of Neutron in OpenStack. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 # Copyright 2016 Hewlett Packard Enterprise Development, LP
2 #
3 # All Rights Reserved.
4 #
5 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
6 #    not use this file except in compliance with the License. You may obtain
7 #    a copy of the License at
8 #
9 #         http://www.apache.org/licenses/LICENSE-2.0
10 #
11 #    Unless required by applicable law or agreed to in writing, software
12 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
13 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
14 #    License for the specific language governing permissions and limitations
15 #    under the License.
16 
17 
18 from neutron_lib import constants
19 from neutron_lib import exceptions as n_exc
20 from neutron_lib.plugins import directory
21 from oslo_db import exception as db_exc
22 from oslo_log import helpers as log_helpers
23 from oslo_utils import uuidutils
24 
25 from neutron.callbacks import events
26 from neutron.callbacks import registry
27 from neutron.callbacks import resources
28 from neutron.common import _deprecate
29 from neutron.db import _utils as db_utils
30 from neutron.db import api as db_api
31 from neutron.db import common_db_mixin
32 from neutron.db.models import segment as segment_model
33 from neutron.db import segments_db as db
34 from neutron.extensions import segment as extension
35 from neutron import manager
36 from neutron.objects import base as base_obj
37 from neutron.objects import network
38 from neutron.services.segments import exceptions
39 
40 _deprecate._moved_global('SegmentHostMapping', new_module=segment_model)
41 
42 
43 class SegmentDbMixin(common_db_mixin.CommonDbMixin):
44     """Mixin class to add segment."""
45 
46     @staticmethod
47     def _make_segment_dict(segment_db, fields=None):
48         res = {'id': segment_db['id'],
49                'network_id': segment_db['network_id'],
50                'name': segment_db['name'],
51                'description': segment_db['description'],
52                db.PHYSICAL_NETWORK: segment_db[db.PHYSICAL_NETWORK],
53                db.NETWORK_TYPE: segment_db[db.NETWORK_TYPE],
54                db.SEGMENTATION_ID: segment_db[db.SEGMENTATION_ID],
55                'hosts': [mapping.host for mapping in
56                          segment_db.segment_host_mapping],
57                'segment_index': segment_db['segment_index']}
58         return db_utils.resource_fields(res, fields)
59 
60     def _get_segment(self, context, segment_id):
61         segment = network.NetworkSegment.get_object(context, id=segment_id)
62         if not segment:
63             raise exceptions.SegmentNotFound(segment_id=segment_id)
64         return segment
65 
66     @log_helpers.log_method_call
67     def create_segment(self, context, segment):
68         """Create a segment."""
69         segment = segment['segment']
70         segment_id = segment.get('id') or uuidutils.generate_uuid()
71         try:
72             new_segment = self._create_segment_db(context, segment_id, segment)
73         except db_exc.DBReferenceError:
74             raise n_exc.NetworkNotFound(net_id=segment['network_id'])
75         registry.notify(resources.SEGMENT, events.AFTER_CREATE, self,
76                         context=context, segment=new_segment)
77         return self._make_segment_dict(new_segment)
78 
79     def _create_segment_db(self, context, segment_id, segment):
80         with context.session.begin(subtransactions=True):
81             network_id = segment['network_id']
82             physical_network = segment[extension.PHYSICAL_NETWORK]
83             if physical_network == constants.ATTR_NOT_SPECIFIED:
84                 physical_network = None
85             network_type = segment[extension.NETWORK_TYPE]
86             segmentation_id = segment[extension.SEGMENTATION_ID]
87             if segmentation_id == constants.ATTR_NOT_SPECIFIED:
88                 segmentation_id = None
89             name = segment['name']
90             if name == constants.ATTR_NOT_SPECIFIED:
91                 name = None
92             description = segment['description']
93             if description == constants.ATTR_NOT_SPECIFIED:
94                 description = None
95             args = {'id': segment_id,
96                     'network_id': network_id,
97                     'name': name,
98                     'description': description,
99                     db.PHYSICAL_NETWORK: physical_network,
100                     db.NETWORK_TYPE: network_type,
101                     db.SEGMENTATION_ID: segmentation_id}
102             # Calculate the index of segment
103             segment_index = 0
104             segments = self.get_segments(
105                 context,
106                 filters={'network_id': [network_id]},
107                 fields=['segment_index'],
108                 sorts=[('segment_index', True)])
109             if segments:
110                 # NOTE(xiaohhui): The new index is the last index + 1, this
111                 # may cause discontinuous segment_index. But segment_index
112                 # can functionally work as the order index for segments.
113                 segment_index = (segments[-1].get('segment_index') + 1)
114             args['segment_index'] = segment_index
115 
116             new_segment = network.NetworkSegment(context, **args)
117             new_segment.create()
118             # Do some preliminary operations before committing the segment to
119             # db
120             registry.notify(resources.SEGMENT, events.PRECOMMIT_CREATE, self,
121                             context=context, segment=new_segment)
122             return new_segment
123 
124     @log_helpers.log_method_call
125     def update_segment(self, context, uuid, segment):
126         """Update an existing segment."""
127         segment = segment['segment']
128         with context.session.begin(subtransactions=True):
129             curr_segment = self._get_segment(context, uuid)
130             curr_segment.update_fields(segment)
131             curr_segment.update()
132         return self._make_segment_dict(curr_segment)
133 
134     @log_helpers.log_method_call
135     def get_segment(self, context, uuid, fields=None):
136         segment_db = self._get_segment(context, uuid)
137         return self._make_segment_dict(segment_db, fields)
138 
139     @log_helpers.log_method_call
140     def get_segments(self, context, filters=None, fields=None,
141                      sorts=None, limit=None, marker=None,
142                      page_reverse=False):
143         pager = base_obj.Pager(sorts, limit, page_reverse, marker)
144         return network.NetworkSegment.get_objects(context, pager, **filters)
145 
146     @log_helpers.log_method_call
147     def get_segments_count(self, context, filters=None):
148         return network.NetworkSegment.count(context, **filters)
149 
150     @log_helpers.log_method_call
151     def get_segments_by_hosts(self, context, hosts):
152         if not hosts:
153             return []
154         segment_host_mapping = network.SegmentHostMapping.get_objects(
155             context, host=hosts)
156         return list({mapping.segment_id for mapping in segment_host_mapping})
157 
158     @log_helpers.log_method_call
159     def delete_segment(self, context, uuid):
160         """Delete an existing segment."""
161         segment = self.get_segment(context, uuid)
162         # Do some preliminary operations before deleting the segment
163         registry.notify(resources.SEGMENT, events.BEFORE_DELETE,
164                         self.delete_segment, context=context,
165                         segment=segment)
166 
167         # Delete segment in DB
168         with context.session.begin(subtransactions=True):
169             segment = network.NetworkSegment.get_object(context, id=uuid)
170             if not segment:
171                 raise exceptions.SegmentNotFound(segment_id=uuid)
172             segment.delete()
173             # Do some preliminary operations before deleting segment in db
174             registry.notify(resources.SEGMENT, events.PRECOMMIT_DELETE,
175                             self.delete_segment, context=context,
176                             segment=segment)
177 
178         registry.notify(resources.SEGMENT, events.AFTER_DELETE,
179                         self.delete_segment, context=context,
180                         segment=segment)
181 
182 
183 def update_segment_host_mapping(context, host, current_segment_ids):
184     with context.session.begin(subtransactions=True):
185         segment_host_mapping = network.SegmentHostMapping.get_objects(
186             context, host=host)
187         previous_segment_ids = {
188             seg_host['segment_id'] for seg_host in segment_host_mapping}
189         for segment_id in current_segment_ids - previous_segment_ids:
190             network.SegmentHostMapping(
191                 context, segment_id=segment_id, host=host).create()
192         stale_segment_ids = previous_segment_ids - current_segment_ids
193         if stale_segment_ids:
194             for entry in segment_host_mapping:
195                 if entry.segment_id in stale_segment_ids:
196                     entry.delete()
197 
198 
199 def get_hosts_mapped_with_segments(context):
200     """Get hosts that are mapped with segments.
201 
202     L2 providers can use this method to get an overview of SegmentHostMapping,
203     and then delete the stale SegmentHostMapping.
204     """
205     segment_host_mapping = network.SegmentHostMapping.get_objects(context)
206     return {row.host for row in segment_host_mapping}
207 
208 
209 def _get_phys_nets(agent):
210     configurations_dict = agent.get('configurations', {})
211     mappings = configurations_dict.get('bridge_mappings', {})
212     mappings.update(configurations_dict.get('interface_mappings', {}))
213     mappings.update(configurations_dict.get('device_mappings', {}))
214     return mappings.keys()
215 
216 
217 reported_hosts = set()
218 
219 # NOTE: Module level variable of segments plugin. It should be removed once
220 # segments becomes a default plugin.
221 segments_plugin = None
222 
223 
224 def get_segments_with_phys_nets(context, phys_nets):
225     """Get segments from physical networks.
226 
227     L2 providers usually have information of hostname and physical networks.
228     They could use this method to get related segments and then update
229     SegmentHostMapping.
230     """
231     if not phys_nets:
232         return []
233 
234     return network.NetworkSegment.get_objects(context,
235                                               physical_network=list(phys_nets))
236 
237 
238 def map_segment_to_hosts(context, segment_id, hosts):
239     """Map segment to a collection of hosts."""
240     with db_api.autonested_transaction(context.session):
241         for host in hosts:
242             network.SegmentHostMapping(
243                 context, segment_id=segment_id, host=host).create()
244 
245 
246 def _update_segment_host_mapping_for_agent(resource, event, trigger,
247                                            context, host, plugin, agent):
248     check_segment_for_agent = getattr(plugin, 'check_segment_for_agent', None)
249     if not check_segment_for_agent:
250         return
251     phys_nets = _get_phys_nets(agent)
252     if not phys_nets:
253         return
254     start_flag = agent.get('start_flag', None)
255     if host in reported_hosts and not start_flag:
256         return
257     reported_hosts.add(host)
258     segments = get_segments_with_phys_nets(context, phys_nets)
259     current_segment_ids = {
260         segment['id'] for segment in segments
261         if check_segment_for_agent(segment, agent)}
262     update_segment_host_mapping(context, host, current_segment_ids)
263 
264 
265 def _add_segment_host_mapping_for_segment(resource, event, trigger,
266                                           context, segment):
267     if not context.session.is_active:
268         # The session might be in partial rollback state, due to errors in
269         # peer callback. In that case, there is no need to add the mapping.
270         # Just return here.
271         return
272 
273     if not segment.physical_network:
274         return
275     cp = directory.get_plugin()
276     check_segment_for_agent = getattr(cp, 'check_segment_for_agent', None)
277     if not hasattr(cp, 'get_agents') or not check_segment_for_agent:
278         # not an agent-supporting plugin
279         registry.unsubscribe(_add_segment_host_mapping_for_segment,
280                              resources.SEGMENT, events.PRECOMMIT_CREATE)
281         return
282     hosts = {agent['host'] for agent in cp.get_agents(context)
283              if check_segment_for_agent(segment, agent)}
284     map_segment_to_hosts(context, segment.id, hosts)
285 
286 
287 def _delete_segments_for_network(resource, event, trigger,
288                                  context, network_id):
289     admin_ctx = context.elevated()
290     global segments_plugin
291     if not segments_plugin:
292         segments_plugin = manager.NeutronManager.load_class_for_provider(
293             'neutron.service_plugins', 'segments')()
294     segments = segments_plugin.get_segments(
295         admin_ctx, filters={'network_id': [network_id]})
296     for segment in segments:
297         segments_plugin.delete_segment(admin_ctx, segment['id'])
298 
299 
300 def subscribe():
301     registry.subscribe(_update_segment_host_mapping_for_agent,
302                        resources.AGENT,
303                        events.AFTER_CREATE)
304     registry.subscribe(_update_segment_host_mapping_for_agent,
305                        resources.AGENT,
306                        events.AFTER_UPDATE)
307     registry.subscribe(_add_segment_host_mapping_for_segment,
308                        resources.SEGMENT, events.PRECOMMIT_CREATE)
309     registry.subscribe(_delete_segments_for_network,
310                        resources.NETWORK,
311                        events.PRECOMMIT_DELETE)
312 
313 subscribe()
314 
315 
316 _deprecate._MovedGlobals()
