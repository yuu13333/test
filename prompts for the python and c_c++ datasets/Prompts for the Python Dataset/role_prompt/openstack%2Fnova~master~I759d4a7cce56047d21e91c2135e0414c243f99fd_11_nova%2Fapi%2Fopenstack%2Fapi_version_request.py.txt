I want you to act as a code reviewer of Nova in OpenStack. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 # Copyright 2014 IBM Corp.
2 #
3 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
4 #    not use this file except in compliance with the License. You may obtain
5 #    a copy of the License at
6 #
7 #         http://www.apache.org/licenses/LICENSE-2.0
8 #
9 #    Unless required by applicable law or agreed to in writing, software
10 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 #    License for the specific language governing permissions and limitations
13 #    under the License.
14 
15 import re
16 
17 from nova import exception
18 from nova.i18n import _
19 
20 # Define the minimum and maximum version of the API across all of the
21 # REST API. The format of the version is:
22 # X.Y where:
23 #
24 # - X will only be changed if a significant backwards incompatible API
25 # change is made which affects the API as whole. That is, something
26 # that is only very very rarely incremented.
27 #
28 # - Y when you make any change to the API. Note that this includes
29 # semantic changes which may not affect the input or output formats or
30 # even originate in the API code layer. We are not distinguishing
31 # between backwards compatible and backwards incompatible changes in
32 # the versioning system. It must be made clear in the documentation as
33 # to what is a backwards compatible change and what is a backwards
34 # incompatible one.
35 
36 #
37 # You must update the API version history string below with a one or
38 # two line description as well as update rest_api_version_history.rst
39 REST_API_VERSION_HISTORY = """REST API Version History:
40 
41     * 2.1 - Initial version. Equivalent to v2.0 code
42     * 2.2 - Adds (keypair) type parameter for os-keypairs plugin
43             Fixes success status code for create/delete a keypair method
44     * 2.3 - Exposes additional os-extended-server-attributes
45             Exposes delete_on_termination for os-extended-volumes
46     * 2.4 - Exposes reserved field in os-fixed-ips.
47     * 2.5 - Allow server search option ip6 for non-admin
48     * 2.6 - Consolidate the APIs for getting remote consoles
49     * 2.7 - Check flavor type before add tenant access.
50     * 2.8 - Add new protocol for VM console (mks)
51     * 2.9 - Exposes lock information in server details.
52     * 2.10 - Allow admins to query, create and delete keypairs owned by any
53              user.
54     * 2.11 - Exposes forced_down attribute for os-services
55     * 2.12 - Exposes VIF net_id in os-virtual-interfaces
56     * 2.13 - Add project id and user id information for os-server-groups API
57     * 2.14 - Remove onSharedStorage from evacuate request body and remove
58              adminPass from the response body
59     * 2.15 - Add soft-affinity and soft-anti-affinity policies
60     * 2.16 - Exposes host_status for servers/detail and servers/{server_id}
61     * 2.17 - Add trigger_crash_dump to server actions
62     * 2.18 - Makes project_id optional in v2.1
63     * 2.19 - Allow user to set and get the server description
64     * 2.20 - Add attach and detach volume operations for instances in shelved
65              and shelved_offloaded state
66     * 2.21 - Make os-instance-actions read deleted instances
67     * 2.22 - Add API to force live migration to complete
68     * 2.23 - Add index/show API for server migrations.
69              Also add migration_type for /os-migrations and add ref link for it
70              when the migration is an in progress live migration.
71     * 2.24 - Add API to cancel a running live migration
72     * 2.25 - Make block_migration support 'auto' and remove
73              disk_over_commit for os-migrateLive.
74     * 2.26 - Adds support of server tags
75     * 2.27 - Adds support for new-style microversion headers while
76              keeping support for the original style.
77     * 2.28 - Changes compute_node.cpu_info from string to object
78     * 2.29 - Add a force flag in evacuate request body and change the
79              behaviour for the host flag by calling the scheduler.
80     * 2.30 - Add a force flag in live-migrate request body and change the
81              behaviour for the host flag by calling the scheduler.
82     * 2.31 - Fix os-console-auth-tokens to work for all console types.
83     * 2.32 - Add tag to networks and block_device_mapping_v2 in server boot
84              request body.
85     * 2.33 - Add pagination support for hypervisors.
86     * 2.34 - Checks before live-migration are made in asynchronous way.
87              os-Migratelive Action does not throw badRequest in case of
88              pre-checks failure. Verification result is available over
89              instance-actions.
90     * 2.35 - Adds keypairs pagination support.
91     * 2.36 - Deprecates all the API which proxy to another service and fping
92              API.
93     * 2.37 - Adds support for auto-allocating networking, otherwise known as
94              "Get me a Network". Also enforces server.networks.uuid to be in
95              UUID format.
96     * 2.38 - Add a condition to return HTTPBadRequest if invalid status is
97              provided for listing servers.
98     * 2.39 - Deprecates image-metadata proxy API
99     * 2.40 - Adds simple tenant usage pagination support.
100     * 2.41 - Return uuid attribute for aggregates.
101     * 2.42 - In the context of device tagging at instance boot time,
102              re-introduce the tag attribute that, due to bugs, was lost
103              starting with version 2.33 for block devices and starting with
104              version 2.37 for network interfaces.
105     * 2.43 - Deprecate os-hosts API
106     * 2.44 - The servers action addFixedIp, removeFixedIp, addFloatingIp,
107              removeFloatingIp and os-virtual-interfaces APIs are deprecated.
108     * 2.45 - The createImage and createBackup APIs no longer return a Location
109              header in the response for the snapshot image, they now return a
110              json dict in the response body with an image_id key and uuid
111              value.
112     * 2.46 - Return ``X-OpenStack-Request-ID`` header on requests.
113     * 2.47 - When displaying server details, display the flavor as a dict
114              rather than a link.  If the user is prevented from retrieving
115              the flavor extra-specs by policy, simply omit the field from
116              the output.
117     * 2.48 - Standardize VM diagnostics info.
118     * 2.49 - Support tagged attachment of network interfaces and block devices.
119     * 2.50 - Exposes ``server_groups`` and ``server_group_members`` keys in
120              GET & PUT ``os-quota-class-sets`` APIs response.
121              Also filter out Network related quotas from
122              ``os-quota-class-sets`` API
123     * 2.51 - Adds new event name to external-events (volume-extended). Also,
124              non-admins can see instance action event details except for the
125              traceback field.
126     * 2.52 - Adds support for applying tags when creating a server.
127     * 2.53 - Service and compute node (hypervisor) database ids are hidden.
128              The os-services and os-hypervisors APIs now return a uuid in the
129              id field, and takes a uuid in requests. PUT and GET requests
130              and responses are also changed.
131     * 2.54 - Enable reset key pair while rebuilding instance.
132     * 2.55 - Added flavor.description to GET/POST/PUT flavors APIs.
133     * 2.56 - Add a host parameter in migrate request body in order to
134              enable users to specify a target host in cold migration.
135              The target host is checked by the scheduler.
136     * 2.57 - Deprecated personality files from POST /servers and the rebuild
137              server action APIs. Added the ability to pass new user_data to
138              the rebuild server action API. Personality / file injection
139              related limits and quota resources are also removed.
140     * 2.58 - Add pagination support and changes-since filter for
141              os-instance-actions API.
142     * 2.59 - Add pagination support and changes-since filter for os-migrations
143              API. And the os-migrations API now returns both the id and the
144              uuid in response.
145     * 2.60 - Add support for attaching a single volume to multiple instances.
146     * 2.61 - Exposes flavor extra_specs in the flavor representation. Flavor
147              extra_specs will be included in Response body of GET, POST, PUT
148              /flavors APIs.
149     * 2.62 - Add ``host`` and ``hostId`` fields to instance action detail API
150              responses.
151     * 2.63 - Add support for applying trusted certificates when creating or
152              rebuilding a server.
153     * 2.64 - Add support for the "max_server_per_host" policy rule for
154              ``anti-affinity`` server group policy, the ``policies`` and
155              ``metadata`` fields are removed and the ``policy`` (required)
156              and ``rules`` (optional) fields are added in response body of
157              GET, POST /os-server-groups APIs and GET
158              /os-server-groups/{group_id} API.
159     * 2.65 - Add support for abort live migrations in ``queued`` and
160              ``preparing`` status.
161     * 2.66 - Add ``changes-before`` to support users to specify the
162              ``updated_at`` time to filter nova resources, the resources
163              include the servers API, os-instance-action API and
164              os-migrations API.
165     * 2.67 - Adds the optional ``volume_type`` field to the
166              ``block_device_mapping_v2`` parameter when creating a server.
167     * 2.68 - Remove support for forced live migration and evacuate server
168              actions.
169     * 2.69 - Add support for returning minimal constructs for ``GET /servers``,
170              ``GET /servers/detail``, ``GET /servers/{server_id}`` and
171              ``GET /os-services`` when there is a transient unavailability
172              condition in the deployment like an infrastructure failure.
173     * 2.70 - Allowed detaching a root volume, allowed to attach a root volume
174              by specify ``is_root=True`` when attaching. These actions will
175              be only allowed to perform on instances in ``STOPPED``,
176              ``SHELVED`` and ``SHELVED_OFFLOADED`` status.
177              Add support for including the ``boot_index`` field in
178              ``GET /servers/{server_id}/os-volume_attachments`` and
179              ``GET /servers/{server_id}/os-volume_attachments/{volume_id}``.
180 """
181 
182 # The minimum and maximum versions of the API supported
183 # The default api version request is defined to be the
184 # minimum version of the API supported.
185 # Note(cyeoh): This only applies for the v2.1 API once microversions
186 # support is fully merged. It does not affect the V2 API.
187 _MIN_API_VERSION = "2.1"
188 _MAX_API_VERSION = "2.70"
189 DEFAULT_API_VERSION = _MIN_API_VERSION
190 
191 # Almost all proxy APIs which are related to network, images and baremetal
192 # were deprecated from 2.36.
193 MAX_PROXY_API_SUPPORT_VERSION = '2.35'
194 MIN_WITHOUT_PROXY_API_SUPPORT_VERSION = '2.36'
195 
196 # Starting from microversion 2.39 also image-metadata proxy API is deprecated.
197 MAX_IMAGE_META_PROXY_API_VERSION = '2.38'
198 MIN_WITHOUT_IMAGE_META_PROXY_API_VERSION = '2.39'
199 
200 
201 # NOTE(cyeoh): min and max versions declared as functions so we can
202 # mock them for unittests. Do not use the constants directly anywhere
203 # else.
204 def min_api_version():
205     return APIVersionRequest(_MIN_API_VERSION)
206 
207 
208 def max_api_version():
209     return APIVersionRequest(_MAX_API_VERSION)
210 
211 
212 def is_supported(req, min_version=_MIN_API_VERSION,
213                  max_version=_MAX_API_VERSION):
214     """Check if API request version satisfies version restrictions.
215 
216     :param req: request object
217     :param min_version: minimal version of API needed for correct
218            request processing
219     :param max_version: maximum version of API needed for correct
220            request processing
221 
222     :returns: True if request satisfies minimal and maximum API version
223              requirements. False in other case.
224     """
225 
226     return (APIVersionRequest(max_version) >= req.api_version_request >=
227             APIVersionRequest(min_version))
228 
229 
230 class APIVersionRequest(object):
231     """This class represents an API Version Request with convenience
232     methods for manipulation and comparison of version
233     numbers that we need to do to implement microversions.
234     """
235 
236     def __init__(self, version_string=None):
237         """Create an API version request object.
238 
239         :param version_string: String representation of APIVersionRequest.
240             Correct format is 'X.Y', where 'X' and 'Y' are int values.
241             None value should be used to create Null APIVersionRequest,
242             which is equal to 0.0
243         """
244         self.ver_major = 0
245         self.ver_minor = 0
246 
247         if version_string is not None:
248             match = re.match(r"^([1-9]\d*)\.([1-9]\d*|0)$",
249                              version_string)
250             if match:
251                 self.ver_major = int(match.group(1))
252                 self.ver_minor = int(match.group(2))
253             else:
254                 raise exception.InvalidAPIVersionString(version=version_string)
255 
256     def __str__(self):
257         """Debug/Logging representation of object."""
258         return ("API Version Request Major: %s, Minor: %s"
259                 % (self.ver_major, self.ver_minor))
260 
261     def is_null(self):
262         return self.ver_major == 0 and self.ver_minor == 0
263 
264     def _format_type_error(self, other):
265         return TypeError(_("'%(other)s' should be an instance of '%(cls)s'") %
266                          {"other": other, "cls": self.__class__})
267 
268     def __lt__(self, other):
269         if not isinstance(other, APIVersionRequest):
270             raise self._format_type_error(other)
271 
272         return ((self.ver_major, self.ver_minor) <
273                 (other.ver_major, other.ver_minor))
274 
275     def __eq__(self, other):
276         if not isinstance(other, APIVersionRequest):
277             raise self._format_type_error(other)
278 
279         return ((self.ver_major, self.ver_minor) ==
280                 (other.ver_major, other.ver_minor))
281 
282     def __gt__(self, other):
283         if not isinstance(other, APIVersionRequest):
284             raise self._format_type_error(other)
285 
286         return ((self.ver_major, self.ver_minor) >
287                 (other.ver_major, other.ver_minor))
288 
289     def __le__(self, other):
290         return self < other or self == other
291 
292     def __ne__(self, other):
293         return not self.__eq__(other)
294 
295     def __ge__(self, other):
296         return self > other or self == other
297 
298     def matches(self, min_version, max_version):
299         """Returns whether the version object represents a version
300         greater than or equal to the minimum version and less than
301         or equal to the maximum version.
302 
303         @param min_version: Minimum acceptable version.
304         @param max_version: Maximum acceptable version.
305         @returns: boolean
306 
307         If min_version is null then there is no minimum limit.
308         If max_version is null then there is no maximum limit.
309         If self is null then raise ValueError
310         """
311 
312         if self.is_null():
313             raise ValueError
314         if max_version.is_null() and min_version.is_null():
315             return True
316         elif max_version.is_null():
317             return min_version <= self
318         elif min_version.is_null():
319             return self <= max_version
320         else:
321             return min_version <= self <= max_version
322 
323     def get_string(self):
324         """Converts object to string representation which if used to create
325         an APIVersionRequest object results in the same version request.
326         """
327         if self.is_null():
328             raise ValueError
329         return "%s.%s" % (self.ver_major, self.ver_minor)
