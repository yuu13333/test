I want you to act as a code reviewer of Nova in OpenStack. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 # Licensed under the Apache License, Version 2.0 (the "License"); you may
2 # not use this file except in compliance with the License. You may obtain
3 # a copy of the License at
4 #
5 #      http://www.apache.org/licenses/LICENSE-2.0
6 #
7 # Unless required by applicable law or agreed to in writing, software
8 # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
9 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
10 # License for the specific language governing permissions and limitations
11 # under the License.
12 
13 from nova.tests.functional import integrated_helpers
14 
15 
16 class FinishResizeErrorAllocationCleanupTestCase(
17         integrated_helpers.ProviderUsageBaseTestCase):
18     """Test for bug 1825537 introduced in Rocky and backported down to Pike.
19 
20     Tests a scenario where finish_resize fails on the dest compute during a
21     resize and ensures resource provider allocations are properly cleaned up
22     in placement.
23     """
24 
25     compute_driver = 'fake.FakeFinishMigrationFailDriver'
26 
27     def setUp(self):
28         super(FinishResizeErrorAllocationCleanupTestCase, self).setUp()
29         # Get the flavors we're going to use.
30         flavors = self.api.get_flavors()
31         self.flavor1 = flavors[0]
32         self.flavor2 = flavors[1]
33 
34     def _resize_and_assert_error(self, server, dest_host):
35         # Now resize the server and wait for it to go to ERROR status because
36         # the finish_migration virt driver method in host2 should fail.
37         req = {'resize': {'flavorRef': self.flavor2['id']}}
38         self.api.post_server_action(server['id'], req)
39         server = self._wait_for_state_change(self.admin_api, server, 'ERROR')
40         # The server should be pointing at $dest_host because resize_instance
41         # will have updated the host/node value on the instance before casting
42         # to the finish_resize method on the dest compute.
43         self.assertEqual(dest_host, server['OS-EXT-SRV-ATTR:host'])
44         # The instance is set to ERROR status before the fault is recorded so
45         # to avoid a race we need to wait for the migration status to change
46         # to 'error' which happens after the fault is recorded.
47         self._wait_for_migration_status(server, ['error'])
48         # In this case the FakeFinishMigrationFailDriver.finish_migration
49         # method raises VirtualInterfaceCreateException.
50         self.assertIn('Virtual Interface creation failed',
51                       server['fault']['message'])
52 
53     def test_finish_resize_fails_allocation_cleanup(self):
54         # Start two computes so we can resize across hosts.
55         self._start_compute('host1')
56         self._start_compute('host2')
57 
58         # Create a server on host1.
59         server = self._boot_and_check_allocations(self.flavor1, 'host1')
60 
61         # Resize to host2 which should fail.
62         self._resize_and_assert_error(server, 'host2')
63 
64         # Check the resource provider allocations. Since the server is pointed
65         # at the dest host in the DB now, the dest node resource provider
66         # allocations should still exist with the new flavor.
67         source_rp_uuid = self._get_provider_uuid_by_host('host1')
68         dest_rp_uuid = self._get_provider_uuid_by_host('host2')
69         # FIXME(mriedem): This is bug 1825537 where the allocations are
70         # reverted when finish_resize fails so the dest node resource provider
71         # does not have any allocations and the instance allocations are for
72         # the old flavor on the source node resource provider even though the
73         # instance is not running on the source host nor pointed at the source
74         # host in the DB.
75         # self.assertFlavorMatchesAllocation(
76         #     self.flavor2, server['id'], dest_rp_uuid)
77         dest_rp_usages = self._get_provider_usages(dest_rp_uuid)
78         no_usage = {'VCPU': 0, 'MEMORY_MB': 0, 'DISK_GB': 0}
79         self.assertEqual(no_usage, dest_rp_usages)
80         self.assertFlavorMatchesAllocation(
81             self.flavor1, server['id'], source_rp_uuid)
