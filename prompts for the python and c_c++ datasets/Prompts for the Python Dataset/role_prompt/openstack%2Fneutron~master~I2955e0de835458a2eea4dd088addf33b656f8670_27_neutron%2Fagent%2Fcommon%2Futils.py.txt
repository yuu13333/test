I want you to act as a code reviewer of Neutron in OpenStack. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 # Copyright 2015 Cloudbase Solutions.
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 
16 import contextlib
17 import functools
18 import os
19 import time
20 
21 import eventlet
22 from oslo_config import cfg
23 from oslo_log import log as logging
24 from oslo_utils import timeutils
25 
26 from neutron._i18n import _LE
27 from neutron.agent.common import config
28 from neutron.common import utils as neutron_utils
29 from neutron.conf.agent.database import agents_db
30 
31 
32 if os.name == 'nt':
33     from neutron.agent.windows import utils
34 else:
35     from neutron.agent.linux import utils
36 
37 # Should match cfg.CONF.ha_vrrp_advert_int.
38 #TODO(jschwarz): using cfg.CONF.ha_vrrp_advert_int necessitates an import,
39 # which results in a recursive import. This should be fixed into being the
40 # actual config value.
41 DEFAULT_THROTTLER_VALUE = 2
42 DEFAULT_THROTTLER_MULTIPLIER = 1.2
43 
44 LOG = logging.getLogger(__name__)
45 config.register_root_helper(cfg.CONF)
46 agents_db.register_agent_opts()
47 
48 INTERFACE_NAMESPACE = 'neutron.interface_drivers'
49 
50 
51 execute = utils.execute
52 
53 
54 class throttler(object):
55     """Throttle number of calls to a function to only once per 'threshold'."""
56 
57     def __init__(self, func):
58         """Decorate a function with throttler."""
59         self._threshold = DEFAULT_THROTTLER_VALUE
60 
61         self._last_time_called = time.time() - self.throttle_threshold
62         self._func = func
63         # Is the function already running and should future calls be deferred?
64         self._is_deferred = False
65 
66     @property
67     def throttle_threshold(self):
68         return self._threshold
69 
70     @throttle_threshold.setter
71     def throttle_threshold(self, value):
72         self._last_time_called += self._threshold - value
73         self._threshold = value
74 
75     @contextlib.contextmanager
76     def defer_call(self):
77         self._is_deferred = True
78         try:
79             yield
80         finally:
81             self._is_deferred = False
82 
83     def sleep(self):
84         while True:
85             time_to_wait = (self._last_time_called - time.time()
86                             + self.throttle_threshold)
87             if time_to_wait < 0:
88                 break
89 
90             eventlet.sleep(time_to_wait)
91 
92     def __call__(self, *args, **kwargs):
93         """Check if another thread hasn't already scheduled 'function' to run.
94 
95         If it has been, then it will do so in less than
96         'self.throttle_threshold' seconds.
97         """
98         #NOTE(jschwarz): If we ever stop using greenthreads, we'd need some
99         # sort of a locking mechanism here.
100         if not self._is_deferred:
101             time_since_last_call = time.time() - self._last_time_called
102             if time_since_last_call < self.throttle_threshold:
103                 # We're in timeout, so we should throttle future calls.
104                 with self.defer_call():
105                     self.sleep()
106                     self._last_time_called = time.time()
107                     return self._func(*args, **kwargs)
108 
109             else:
110                 self._last_time_called = time.time()
111                 return self._func(*args, **kwargs)
112 
113     def __get__(self, obj, objtype):
114         return functools.partial(self.__call__, obj)
115 
116 
117 def load_interface_driver(conf):
118     """Load interface driver for agents like DHCP or L3 agent.
119 
120     :param conf: driver configuration object
121     :raises SystemExit of 1 if driver cannot be loaded
122     """
123 
124     try:
125         loaded_class = neutron_utils.load_class_by_alias_or_classname(
126                 INTERFACE_NAMESPACE, conf.interface_driver)
127         return loaded_class(conf)
128     except ImportError:
129         LOG.error(_LE("Error loading interface driver '%s'"),
130                   conf.interface_driver)
131         raise SystemExit(1)
132 
133 
134 def is_agent_down(heart_beat_time):
135     return timeutils.is_older_than(heart_beat_time,
136                                    cfg.CONF.agent_down_time)
