I want you to act as a code reviewer of Neutron in OpenStack. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 # All rights reserved.
2 #
3 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
4 #    not use this file except in compliance with the License. You may obtain
5 #    a copy of the License at
6 #
7 #         http://www.apache.org/licenses/LICENSE-2.0
8 #
9 #    Unless required by applicable law or agreed to in writing, software
10 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 #    License for the specific language governing permissions and limitations
13 #    under the License.
14 #
15 
16 import netaddr
17 from neutron_lib import constants
18 from neutron_lib import context as nctx
19 from neutron_lib.plugins import directory
20 from oslo_utils import uuidutils
21 
22 from neutron.db import models_v2
23 from neutron.objects import ports as port_obj
24 from neutron.plugins.ml2 import config
25 from neutron.tests.unit.plugins.ml2 import test_plugin
26 
27 
28 class TestRevisionPlugin(test_plugin.Ml2PluginV2TestCase):
29 
30     l3_plugin = ('neutron.tests.unit.extensions.test_extraroute.'
31                  'TestExtraRouteL3NatServicePlugin')
32 
33     _extension_drivers = ['qos']
34 
35     def get_additional_service_plugins(self):
36         p = super(TestRevisionPlugin, self).get_additional_service_plugins()
37         p.update({'revision_plugin_name': 'revisions',
38                   'qos_plugin_name': 'qos',
39                   'tag_name': 'tag'})
40         return p
41 
42     def setUp(self):
43         config.cfg.CONF.set_override('extension_drivers',
44                                      self._extension_drivers,
45                                      group='ml2')
46         super(TestRevisionPlugin, self).setUp()
47         self.cp = directory.get_plugin()
48         self.l3p = directory.get_plugin(constants.L3)
49         self._ctx = nctx.get_admin_context()
50 
51     @property
52     def ctx(self):
53         # TODO(kevinbenton): return ctx without expire_all after switch to
54         # enginefacade complete. We expire_all here because the switch to
55         # the new engine facade is resulting in changes being spread over
56         # other sessions so we can end up getting stale reads in the parent
57         # session if objects remain in the identity map.
58         if not self._ctx.session.is_active:
59             self._ctx.session.expire_all()
60         return self._ctx
61 
62     def test_handle_expired_object(self):
63         rp = directory.get_plugin('revision_plugin')
64         with self.port():
65             with self.ctx.session.begin():
66                 ipal_objs = port_obj.IPAllocation.get_objects(self.ctx)
67                 if ipal_objs:
68                     ipal_obj = ipal_objs[0]
69                 # load port into our session
70                 port = self.ctx.session.query(models_v2.Port).one()
71                 # simulate concurrent delete in another session
72                 other_ctx = nctx.get_admin_context()
73                 other_ctx.session.delete(
74                     other_ctx.session.query(models_v2.Port).first()
75                 )
76                 # expire the port so the revision bumping code will trigger a
77                 # lookup on its attributes and encounter an ObjectDeletedError
78                 self.ctx.session.expire(port)
79                 rp._bump_related_revisions(self.ctx.session, ipal_obj)
80 
81     def test_port_name_update_revises(self):
82         with self.port() as port:
83             rev = port['port']['revision_number']
84             new = {'port': {'name': 'seaweed'}}
85             response = self._update('ports', port['port']['id'], new)
86             new_rev = response['port']['revision_number']
87             self.assertGreater(new_rev, rev)
88 
89     def test_port_ip_update_revises(self):
90         with self.port() as port:
91             rev = port['port']['revision_number']
92             new = {'port': {'fixed_ips': port['port']['fixed_ips']}}
93             # ensure adding an IP allocation updates the port
94             next_ip = str(netaddr.IPAddress(
95                   new['port']['fixed_ips'][0]['ip_address']) + 1)
96             new['port']['fixed_ips'].append({'ip_address': next_ip})
97             response = self._update('ports', port['port']['id'], new)
98             self.assertEqual(2, len(response['port']['fixed_ips']))
99             new_rev = response['port']['revision_number']
100             self.assertGreater(new_rev, rev)
101             # ensure deleting an IP allocation updates the port
102             rev = new_rev
103             new['port']['fixed_ips'].pop()
104             response = self._update('ports', port['port']['id'], new)
105             self.assertEqual(1, len(response['port']['fixed_ips']))
106             new_rev = response['port']['revision_number']
107             self.assertGreater(new_rev, rev)
108 
109     def test_security_group_rule_ops_bump_security_group(self):
110         s = {'security_group': {'tenant_id': 'some_tenant', 'name': '',
111                                 'description': 's'}}
112         sg = self.cp.create_security_group(self.ctx, s)
113         s['security_group']['name'] = 'hello'
114         updated = self.cp.update_security_group(self.ctx, sg['id'], s)
115         self.assertGreater(updated['revision_number'], sg['revision_number'])
116         # ensure rule changes bump parent SG
117         r = {'security_group_rule': {'tenant_id': 'some_tenant',
118                                      'port_range_min': 80, 'protocol': 6,
119                                      'port_range_max': 90,
120                                      'remote_ip_prefix': '0.0.0.0/0',
121                                      'ethertype': 'IPv4',
122                                      'remote_group_id': None,
123                                      'direction': 'ingress',
124                                      'security_group_id': sg['id']}}
125         rule = self.cp.create_security_group_rule(self.ctx, r)
126         sg = updated
127         updated = self.cp.get_security_group(self.ctx, sg['id'])
128         self.assertGreater(updated['revision_number'], sg['revision_number'])
129         self.cp.delete_security_group_rule(self.ctx, rule['id'])
130         sg = updated
131         updated = self.cp.get_security_group(self.ctx, sg['id'])
132         self.assertGreater(updated['revision_number'], sg['revision_number'])
133 
134     def test_router_interface_ops_bump_router(self):
135         r = {'router': {'name': 'myrouter', 'tenant_id': 'some_tenant',
136                         'admin_state_up': True}}
137         router = self.l3p.create_router(self.ctx, r)
138         r['router']['name'] = 'yourrouter'
139         updated = self.l3p.update_router(self.ctx, router['id'], r)
140         self.assertGreater(updated['revision_number'],
141                            router['revision_number'])
142         # add an intf and make sure it bumps rev
143         with self.subnet(tenant_id='some_tenant', cidr='10.0.1.0/24') as s:
144             interface_info = {'subnet_id': s['subnet']['id']}
145         self.l3p.add_router_interface(self.ctx, router['id'],
146                                       interface_info)
147         router = updated
148         updated = self.l3p.get_router(self.ctx, router['id'])
149         self.assertGreater(updated['revision_number'],
150                            router['revision_number'])
151         # Add a route and make sure it bumps revision number
152         router = updated
153         body = {'router': {'routes': [{'destination': '192.168.2.0/24',
154                                        'nexthop': '10.0.1.3'}]}}
155         self.l3p.update_router(self.ctx, router['id'], body)
156         updated = self.l3p.get_router(self.ctx, router['id'])
157         self.assertGreater(updated['revision_number'],
158                            router['revision_number'])
159         router = updated
160         body['router']['routes'] = []
161         self.l3p.update_router(self.ctx, router['id'], body)
162         updated = self.l3p.get_router(self.ctx, router['id'])
163         self.assertGreater(updated['revision_number'],
164                            router['revision_number'])
165         self.l3p.remove_router_interface(self.ctx, router['id'],
166                                          interface_info)
167         router = updated
168         updated = self.l3p.get_router(self.ctx, router['id'])
169         self.assertGreater(updated['revision_number'],
170                            router['revision_number'])
171 
172     def test_qos_policy_bump_port_revision(self):
173         with self.port() as port:
174             rev = port['port']['revision_number']
175             qos_plugin = directory.get_plugin('QOS')
176             qos_policy = {'policy': {'name': "policy1",
177                                      'project_id': uuidutils.generate_uuid()}}
178             qos_obj = qos_plugin.create_policy(self.ctx, qos_policy)
179             data = {'port': {'qos_policy_id': qos_obj['id']}}
180             response = self._update('ports', port['port']['id'], data)
181             new_rev = response['port']['revision_number']
182             self.assertGreater(new_rev, rev)
183 
184     def test_qos_policy_bump_network_revision(self):
185         with self.network() as network:
186             rev = network['network']['revision_number']
187             qos_plugin = directory.get_plugin('QOS')
188             qos_policy = {'policy': {'name': "policy1",
189                                      'project_id': uuidutils.generate_uuid()}}
190             qos_obj = qos_plugin.create_policy(self.ctx, qos_policy)
191             data = {'network': {'qos_policy_id': qos_obj['id']}}
192             response = self._update('networks', network['network']['id'], data)
193             new_rev = response['network']['revision_number']
194             self.assertGreater(new_rev, rev)
195 
196     def test_net_tag_bumps_net_revision(self):
197         with self.network() as network:
198             rev = network['network']['revision_number']
199             tag_plugin = directory.get_plugin('TAG')
200             tag_plugin.update_tag(self.ctx, 'networks',
201                                   network['network']['id'], 'mytag')
202             updated = directory.get_plugin().get_network(
203                 self.ctx, network['network']['id'])
204             self.assertGreater(updated['revision_number'], rev)
205             tag_plugin.delete_tag(self.ctx, 'networks',
206                                   network['network']['id'], 'mytag')
207             rev = updated['revision_number']
208             updated = directory.get_plugin().get_network(
209                 self.ctx, network['network']['id'])
210             self.assertGreater(updated['revision_number'], rev)
