I want you to act as a code reviewer of Nova in OpenStack. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 # Copyright 2012 Nebula, Inc.
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 
16 import six
17 from six.moves import range
18 from webob import exc
19 
20 from nova import context
21 from nova import exception
22 from nova.i18n import _
23 from nova import objects
24 from nova import utils
25 
26 
27 CHUNKS = 4
28 CHUNK_LENGTH = 255
29 MAX_SIZE = CHUNKS * CHUNK_LENGTH
30 
31 
32 def extract_password(instance):
33     result = ''
34     sys_meta = utils.instance_sys_meta(instance)
35     for key in sorted(sys_meta.keys()):
36         if key.startswith('password_'):
37             result += sys_meta[key]
38     return result or None
39 
40 
41 def convert_password(context, password):
42     """Stores password as system_metadata items.
43 
44     Password is stored with the keys 'password_0' -> 'password_3'.
45     """
46     password = password or ''
47     if six.PY3 and isinstance(password, bytes):
48         password = password.decode('utf-8')
49 
50     meta = {}
51     for i in range(CHUNKS):
52         meta['password_%d' % i] = password[:CHUNK_LENGTH]
53         password = password[CHUNK_LENGTH:]
54     return meta
55 
56 
57 def handle_password(req, meta_data):
58     ctxt = context.get_admin_context()
59     if req.method == 'GET':
60         return meta_data.password
61     elif req.method == 'POST':
62         # NOTE(vish): The conflict will only happen once the metadata cache
63         #             updates, but it isn't a huge issue if it can be set for
64         #             a short window.
65         if meta_data.password:
66             raise exc.HTTPConflict()
67         if (req.content_length > MAX_SIZE or len(req.body) > MAX_SIZE):
68             msg = _("Request is too large.")
69             raise exc.HTTPBadRequest(explanation=msg)
70 
71         im = objects.InstanceMapping.get_by_instance_uuid(ctxt, meta_data.uuid)
72         with context.target_cell(ctxt, im.cell_mapping) as cctxt:
73             try:
74                 instance = objects.Instance.get_by_uuid(
75                     cctxt, meta_data.uuid, expected_attrs=['system_metadata'])
76             except exception.InstanceNotFound as e:
77                 raise exc.HTTPBadRequest(explanation=e.format_message())
78         instance.system_metadata.update(convert_password(ctxt, req.body))
79         instance.save()
80     else:
81         msg = _("GET and POST only are supported.")
82         raise exc.HTTPBadRequest(explanation=msg)
