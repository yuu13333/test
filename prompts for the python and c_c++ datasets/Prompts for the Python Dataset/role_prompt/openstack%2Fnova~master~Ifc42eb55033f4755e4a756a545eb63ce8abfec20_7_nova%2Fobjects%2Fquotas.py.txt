I want you to act as a code reviewer of Nova in OpenStack. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 #    Copyright 2013 Rackspace Hosting.
2 #
3 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
4 #    not use this file except in compliance with the License. You may obtain
5 #    a copy of the License at
6 #
7 #         http://www.apache.org/licenses/LICENSE-2.0
8 #
9 #    Unless required by applicable law or agreed to in writing, software
10 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 #    License for the specific language governing permissions and limitations
13 #    under the License.
14 
15 from oslo_db import exception as db_exc
16 
17 from nova import db
18 from nova.db.sqlalchemy import api as db_api
19 from nova.db.sqlalchemy import api_models
20 from nova import exception
21 from nova.objects import base
22 from nova.objects import fields
23 from nova import quota
24 
25 
26 def ids_from_instance(context, instance):
27     if (context.is_admin and
28             context.project_id != instance['project_id']):
29         project_id = instance['project_id']
30     else:
31         project_id = context.project_id
32     if context.user_id != instance['user_id']:
33         user_id = instance['user_id']
34     else:
35         user_id = context.user_id
36     return project_id, user_id
37 
38 
39 # TODO(lyj): This method needs to be cleaned up once the
40 # ids_from_instance helper method is renamed or some common
41 # method is added for objects.quotas.
42 def ids_from_security_group(context, security_group):
43     return ids_from_instance(context, security_group)
44 
45 
46 # TODO(PhilD): This method needs to be cleaned up once the
47 # ids_from_instance helper method is renamed or some common
48 # method is added for objects.quotas.
49 def ids_from_server_group(context, server_group):
50     return ids_from_instance(context, server_group)
51 
52 
53 @base.NovaObjectRegistry.register
54 class Quotas(base.NovaObject):
55     # Version 1.0: initial version
56     # Version 1.1: Added create_limit() and update_limit()
57     # Version 1.2: Added limit_check() and count()
58     # Version 1.3: Added get(), get_all(), get_all_by_project(),
59     #              get_all_by_project_and_user(), destroy_all_by_project(),
60     #              destroy_all_by_project_and_user(), get_class(),
61     #              get_default_class(), get_all_class_by_name(),
62     #              create_class(), update_class()
63     VERSION = '1.3'
64 
65     fields = {
66         'reservations': fields.ListOfStringsField(nullable=True),
67         'project_id': fields.StringField(nullable=True),
68         'user_id': fields.StringField(nullable=True),
69     }
70 
71     def __init__(self, *args, **kwargs):
72         super(Quotas, self).__init__(*args, **kwargs)
73         # Set up defaults.
74         self.reservations = []
75         self.project_id = None
76         self.user_id = None
77         self.obj_reset_changes()
78 
79     @staticmethod
80     @db_api.api_context_manager.reader
81     def _get_from_db(context, project_id, resource, user_id=None):
82         model = api_models.ProjectUserQuota if user_id else api_models.Quota
83         query = context.session.query(model).\
84                         filter_by(project_id=project_id).\
85                         filter_by(resource=resource)
86         if user_id:
87             query = query.filter_by(user_id=user_id)
88         result = query.first()
89         if not result:
90             if user_id:
91                 raise exception.ProjectUserQuotaNotFound(project_id=project_id,
92                                                          user_id=user_id)
93             else:
94                 raise exception.ProjectQuotaNotFound(project_id=project_id)
95         return result
96 
97     @staticmethod
98     @db_api.api_context_manager.reader
99     def _get_all_from_db(context, project_id):
100         return context.session.query(api_models.ProjectUserQuota).\
101                         filter_by(project_id=project_id).\
102                         all()
103 
104     @staticmethod
105     @db_api.api_context_manager.reader
106     def _get_all_from_db_by_project(context, project_id):
107         # by_project refers to the result that is a dict with a project_id key
108         rows = context.session.query(api_models.Quota).\
109                         filter_by(project_id=project_id).\
110                         all()
111         result = {'project_id': project_id}
112         for row in rows:
113             result[row.resource] = row.hard_limit
114         return result
115 
116     @staticmethod
117     @db_api.api_context_manager.reader
118     def _get_all_from_db_by_project_and_user(context, project_id, user_id):
119         # by_project_and_user refers to the result that is a dict with
120         # project_id and user_id keys
121         columns = (api_models.ProjectUserQuota.resource,
122                    api_models.ProjectUserQuota.hard_limit)
123         user_quotas = context.session.query(*columns).\
124                         filter_by(project_id=project_id).\
125                         filter_by(user_id=user_id).\
126                         all()
127         result = {'project_id': project_id, 'user_id': user_id}
128         for user_quota in user_quotas:
129             result[user_quota.resource] = user_quota.hard_limit
130         return result
131 
132     @staticmethod
133     @db_api.api_context_manager.writer
134     def _destroy_all_in_db_by_project(context, project_id):
135         per_project = context.session.query(api_models.Quota).\
136                             filter_by(project_id=project_id).\
137                             delete(synchronize_session=False)
138         per_user = context.session.query(api_models.ProjectUserQuota).\
139                             filter_by(project_id=project_id).\
140                             delete(synchronize_session=False)
141         if not per_project and not per_user:
142             raise exception.ProjectQuotaNotFound(project_id=project_id)
143 
144     @staticmethod
145     @db_api.api_context_manager.writer
146     def _destroy_all_in_db_by_project_and_user(context, project_id, user_id):
147         result = context.session.query(api_models.ProjectUserQuota).\
148                         filter_by(project_id=project_id).\
149                         filter_by(user_id=user_id).\
150                         delete(synchronize_session=False)
151         if not result:
152             raise exception.ProjectUserQuotaNotFound(project_id=project_id,
153                                                      user_id=user_id)
154 
155     @staticmethod
156     @db_api.api_context_manager.reader
157     def _get_class_from_db(context, class_name, resource):
158         result = context.session.query(api_models.QuotaClass).\
159                         filter_by(class_name=class_name).\
160                         filter_by(resource=resource).\
161                         first()
162         if not result:
163             raise exception.QuotaClassNotFound(class_name=class_name)
164         return result
165 
166     @staticmethod
167     @db_api.api_context_manager.reader
168     def _get_all_class_from_db_by_name(context, class_name):
169         # by_name refers to the result that is a dict with a class_name key
170         rows = context.session.query(api_models.QuotaClass).\
171                         filter_by(class_name=class_name).\
172                         all()
173         result = {'class_name': class_name}
174         for row in rows:
175             result[row.resource] = row.hard_limit
176         return result
177 
178     @staticmethod
179     @db_api.api_context_manager.writer
180     def _create_limit_in_db(context, project_id, resource, limit,
181                             user_id=None):
182         # TODO(melwitt): We won't need PER_PROJECT_QUOTAS after nova-network
183         # is removed.
184         per_user = user_id and resource not in db_api.PER_PROJECT_QUOTAS
185         quota_ref = (api_models.ProjectUserQuota() if per_user
186                      else api_models.Quota())
187         if per_user:
188             quota_ref.user_id = user_id
189         quota_ref.project_id = project_id
190         quota_ref.resource = resource
191         quota_ref.hard_limit = limit
192         try:
193             quota_ref.save(context.session)
194         except db_exc.DBDuplicateEntry:
195             raise exception.QuotaExists(project_id=project_id,
196                                         resource=resource)
197         return quota_ref
198 
199     @staticmethod
200     @db_api.api_context_manager.writer
201     def _update_limit_in_db(context, project_id, resource, limit,
202                             user_id=None):
203         # TODO(melwitt): We won't need PER_PROJECT_QUOTAS after nova-network
204         # is removed.
205         per_user = user_id and resource not in db_api.PER_PROJECT_QUOTAS
206         model = api_models.ProjectUserQuota if per_user else api_models.Quota
207         query = context.session.query(model).\
208                         filter_by(project_id=project_id).\
209                         filter_by(resource=resource)
210         if per_user:
211             query = query.filter_by(user_id=user_id)
212 
213         result = query.update({'hard_limit': limit})
214         if not result:
215             if per_user:
216                 raise exception.ProjectUserQuotaNotFound(project_id=project_id,
217                                                          user_id=user_id)
218             else:
219                 raise exception.ProjectQuotaNotFound(project_id=project_id)
220 
221     @staticmethod
222     @db_api.api_context_manager.writer
223     def _create_class_in_db(context, class_name, resource, limit):
224         quota_class_ref = api_models.QuotaClass()
225         quota_class_ref.class_name = class_name
226         quota_class_ref.resource = resource
227         quota_class_ref.hard_limit = limit
228         quota_class_ref.save(context.session)
229         return quota_class_ref
230 
231     @staticmethod
232     @db_api.api_context_manager.writer
233     def _update_class_in_db(context, class_name, resource, limit):
234         result = context.session.query(api_models.QuotaClass).\
235                         filter_by(class_name=class_name).\
236                         filter_by(resource=resource).\
237                         update({'hard_limit': limit})
238         if not result:
239             raise exception.QuotaClassNotFound(class_name=class_name)
240 
241     @classmethod
242     def from_reservations(cls, context, reservations, instance=None):
243         """Transitional for compatibility."""
244         if instance is None:
245             project_id = None
246             user_id = None
247         else:
248             project_id, user_id = ids_from_instance(context, instance)
249         quotas = cls()
250         quotas._context = context
251         quotas.reservations = reservations
252         quotas.project_id = project_id
253         quotas.user_id = user_id
254         quotas.obj_reset_changes()
255         return quotas
256 
257     @base.remotable
258     def reserve(self, expire=None, project_id=None, user_id=None,
259                 **deltas):
260         reservations = quota.QUOTAS.reserve(self._context, expire=expire,
261                                             project_id=project_id,
262                                             user_id=user_id,
263                                             **deltas)
264         self.reservations = reservations
265         self.project_id = project_id
266         self.user_id = user_id
267         self.obj_reset_changes()
268 
269     @base.remotable
270     def commit(self):
271         if not self.reservations:
272             return
273         quota.QUOTAS.commit(self._context, self.reservations,
274                             project_id=self.project_id,
275                             user_id=self.user_id)
276         self.reservations = None
277         self.obj_reset_changes()
278 
279     @base.remotable
280     def rollback(self):
281         """Rollback quotas."""
282         if not self.reservations:
283             return
284         quota.QUOTAS.rollback(self._context, self.reservations,
285                               project_id=self.project_id,
286                               user_id=self.user_id)
287         self.reservations = None
288         self.obj_reset_changes()
289 
290     @base.remotable_classmethod
291     def limit_check(cls, context, project_id=None, user_id=None, **values):
292         """Check quota limits."""
293         return quota.QUOTAS.limit_check(
294             context, project_id=project_id, user_id=user_id, **values)
295 
296     @base.remotable_classmethod
297     def count(cls, context, resource, *args, **kwargs):
298         """Count a resource."""
299         return quota.QUOTAS.count(
300             context, resource, *args, **kwargs)
301 
302     @base.remotable_classmethod
303     def create_limit(cls, context, project_id, resource, limit, user_id=None):
304         # NOTE(danms,comstud): Quotas likely needs an overhaul and currently
305         # doesn't map very well to objects. Since there is quite a bit of
306         # logic in the db api layer for this, just duplicate it for now.
307         cls._create_limit_in_db(context, project_id, resource, limit,
308                                 user_id=user_id)
309 
310     @base.remotable_classmethod
311     def update_limit(cls, context, project_id, resource, limit, user_id=None):
312         # NOTE(danms,comstud): Quotas likely needs an overhaul and currently
313         # doesn't map very well to objects. Since there is quite a bit of
314         # logic in the db api layer for this, just duplicate it for now.
315         try:
316             cls._update_limit_in_db(context, project_id, resource, limit,
317                                     user_id=user_id)
318         except exception.QuotaNotFound:
319             db.quota_update(context, project_id, resource, limit,
320                             user_id=user_id)
321 
322     @base.remotable_classmethod
323     def get(cls, context, project_id, resource, user_id=None):
324         try:
325             quota = cls._get_from_db(context, project_id, resource,
326                                      user_id=user_id)
327         except exception.QuotaNotFound:
328             quota = db.quota_get(context, project_id, resource,
329                                  user_id=user_id)
330         return quota
331 
332     @base.remotable_classmethod
333     def get_all(cls, context, project_id):
334         api_db_quotas = cls._get_all_from_db(context, project_id)
335         main_db_quotas = db.quota_get_all(context, project_id)
336         return api_db_quotas + main_db_quotas
337 
338     @base.remotable_classmethod
339     def get_all_by_project(cls, context, project_id):
340         api_db_quotas_dict = cls._get_all_from_db_by_project(context,
341                                                              project_id)
342         main_db_quotas_dict = db.quota_get_all_by_project(context, project_id)
343         # If any keys are duplicated, favor the API key during merge.
344         for k, v in api_db_quotas_dict.items():
345             main_db_quotas_dict[k] = v
346         return main_db_quotas_dict
347 
348     @base.remotable_classmethod
349     def get_all_by_project_and_user(cls, context, project_id, user_id):
350         api_db_quotas_dict = cls._get_all_from_db_by_project_and_user(
351                 context, project_id, user_id)
352         main_db_quotas_dict = db.quota_get_all_by_project_and_user(
353                 context, project_id, user_id)
354         # If any keys are duplicated, favor the API key during merge.
355         for k, v in api_db_quotas_dict.items():
356             main_db_quotas_dict[k] = v
357         return main_db_quotas_dict
358 
359     @base.remotable_classmethod
360     def destroy_all_by_project(cls, context, project_id):
361         try:
362             cls._destroy_all_in_db_by_project(context, project_id)
363         except exception.ProjectQuotaNotFound:
364             db.quota_destroy_all_by_project(context, project_id)
365 
366     @base.remotable_classmethod
367     def destroy_all_by_project_and_user(cls, context, project_id, user_id):
368         try:
369             cls._destroy_all_in_db_by_project_and_user(context, project_id,
370                                                        user_id)
371         except exception.ProjectUserQuotaNotFound:
372             db.quota_destroy_all_by_project_and_user(context, project_id,
373                                                      user_id)
374 
375     @base.remotable_classmethod
376     def get_class(cls, context, class_name, resource):
377         try:
378             qclass = cls._get_class_from_db(context, class_name, resource)
379         except exception.QuotaClassNotFound:
380             qclass = db.quota_class_get(context, class_name, resource)
381         return qclass
382 
383     @base.remotable_classmethod
384     def get_default_class(cls, context):
385         try:
386             qclass = cls._get_all_class_from_db_by_name(
387                     context, db_api._DEFAULT_QUOTA_NAME)
388         except exception.QuotaClassNotFound:
389             qclass = db.quota_class_get_default(context)
390         return qclass
391 
392     @base.remotable_classmethod
393     def get_all_class_by_name(cls, context, class_name):
394         api_db_quotas_dict = cls._get_all_class_from_db_by_name(context,
395                                                                 class_name)
396         main_db_quotas_dict = db.quota_class_get_all_by_name(context,
397                                                              class_name)
398         # If any keys are duplicated, favor the API key during merge.
399         for k, v in api_db_quotas_dict.items():
400             main_db_quotas_dict[k] = v
401         return main_db_quotas_dict
402 
403     @base.remotable_classmethod
404     def create_class(cls, context, class_name, resource, limit):
405         cls._create_class_in_db(context, class_name, resource, limit)
406 
407     @base.remotable_classmethod
408     def update_class(cls, context, class_name, resource, limit):
409         try:
410             cls._update_class_in_db(context, class_name, resource, limit)
411         except exception.QuotaClassNotFound:
412             db.quota_class_update(context, class_name, resource, limit)
413 
414 
415 @base.NovaObjectRegistry.register
416 class QuotasNoOp(Quotas):
417     def reserve(context, expire=None, project_id=None, user_id=None,
418                 **deltas):
419         pass
420 
421     def commit(self, context=None):
422         pass
423 
424     def rollback(self, context=None):
425         pass
