I want you to act as a code reviewer of Neutron in OpenStack. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 # Copyright 2015 Red Hat, Inc.
2 #
3 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
4 #    not use this file except in compliance with the License. You may obtain
5 #    a copy of the License at
6 #
7 #         http://www.apache.org/licenses/LICENSE-2.0
8 #
9 #    Unless required by applicable law or agreed to in writing, software
10 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 #    License for the specific language governing permissions and limitations
13 #    under the License.
14 
15 import functools
16 import os
17 import time
18 
19 import netaddr
20 from neutron_lib import constants
21 from oslo_utils import uuidutils
22 
23 from neutron.agent.l3 import ha_router
24 from neutron.agent.l3 import namespaces
25 from neutron.agent.linux import ip_lib
26 from neutron.agent.linux import l3_tc_lib
27 from neutron.common import utils as common_utils
28 from neutron.tests.common.exclusive_resources import ip_network
29 from neutron.tests.fullstack import base
30 from neutron.tests.fullstack.resources import environment
31 from neutron.tests.fullstack.resources import machine
32 from neutron.tests.unit import testlib_api
33 
34 load_tests = testlib_api.module_load_tests
35 
36 
37 class TestL3Agent(base.BaseFullStackTestCase):
38 
39     def _create_external_network_and_subnet(self, tenant_id):
40         network = self.safe_client.create_network(
41             tenant_id, name='public', external=True)
42         cidr = self.useFixture(
43             ip_network.ExclusiveIPNetwork(
44                 "240.0.0.0", "240.255.255.255", "24")).network
45         subnet = self.safe_client.create_subnet(tenant_id, network['id'], cidr)
46         return network, subnet
47 
48     def block_until_port_status_active(self, port_id):
49         def is_port_status_active():
50             port = self.client.show_port(port_id)
51             return port['port']['status'] == 'ACTIVE'
52         common_utils.wait_until_true(lambda: is_port_status_active(), sleep=1)
53 
54     def _create_and_attach_subnet(
55             self, tenant_id, subnet_cidr, network_id, router_id):
56         subnet = self.safe_client.create_subnet(
57             tenant_id, network_id, subnet_cidr)
58 
59         router_interface_info = self.safe_client.add_router_interface(
60             router_id, subnet['id'])
61         self.block_until_port_status_active(
62             router_interface_info['port_id'])
63 
64     def _boot_fake_vm_in_network(self, host, tenant_id, network_id, wait=True):
65         vm = self.useFixture(
66             machine.FakeFullstackMachine(
67                 host, network_id, tenant_id, self.safe_client, use_dhcp=True))
68         if wait:
69             vm.block_until_boot()
70         return vm
71 
72     def _create_net_subnet_and_vm(self, tenant_id, subnet_cidrs, host, router):
73         network = self.safe_client.create_network(tenant_id)
74         for cidr in subnet_cidrs:
75             self._create_and_attach_subnet(
76                 tenant_id, cidr, network['id'], router['id'])
77 
78         return self._boot_fake_vm_in_network(host, tenant_id, network['id'])
79 
80     def _test_gateway_ip_changed(self):
81         tenant_id = uuidutils.generate_uuid()
82         ext_net, ext_sub = self._create_external_network_and_subnet(tenant_id)
83         external_vm = self._create_external_vm(ext_net, ext_sub)
84 
85         router = self.safe_client.create_router(tenant_id,
86                                                 external_network=ext_net['id'])
87 
88         vm = self._create_net_subnet_and_vm(
89             tenant_id, ['20.0.0.0/24', '2001:db8:aaaa::/64'],
90             self.environment.hosts[1], router)
91         # ping external vm to test snat
92         vm.block_until_ping(external_vm.ip)
93 
94         fip = self.safe_client.create_floatingip(
95             tenant_id, ext_net['id'], vm.ip, vm.neutron_port['id'])
96         # ping floating ip from external vm
97         external_vm.block_until_ping(fip['floating_ip_address'])
98 
99         # ping router gateway IP
100         old_gw_ip = router['external_gateway_info'][
101             'external_fixed_ips'][0]['ip_address']
102         external_vm.block_until_ping(old_gw_ip)
103 
104         gateway_port = self.safe_client.list_ports(
105             device_id=router['id'],
106             device_owner=constants.DEVICE_OWNER_ROUTER_GW)[0]
107         ip_1, ip_2 = self._find_available_ips(ext_net, ext_sub, 2)
108         self.safe_client.update_port(gateway_port['id'], fixed_ips=[
109             {'ip_address': ip_1},
110             {'ip_address': ip_2}])
111         # ping router gateway new IPs
112         external_vm.block_until_ping(ip_1)
113         external_vm.block_until_ping(ip_2)
114 
115         # ping router old gateway IP, should fail now
116         external_vm.block_until_no_ping(old_gw_ip)
117 
118     def _router_fip_qos_after_admin_state_down_up(self):
119         tenant_id = uuidutils.generate_uuid()
120         ext_net, ext_sub = self._create_external_network_and_subnet(tenant_id)
121         external_vm = self._create_external_vm(ext_net, ext_sub)
122 
123         router = self.safe_client.create_router(tenant_id,
124                                                 external_network=ext_net['id'])
125 
126         vm = self._create_net_subnet_and_vm(
127             tenant_id, ['20.0.0.0/24', '2001:db8:aaaa::/64'],
128             self.environment.hosts[1], router)
129         # ping external vm to test snat
130         vm.block_until_ping(external_vm.ip)
131 
132         qos_policy = self.safe_client.create_qos_policy(
133             tenant_id, 'fs_policy', 'Fullstack testing policy',
134             shared='False', is_default='False')
135         self.safe_client.create_bandwidth_limit_rule(
136             tenant_id, qos_policy['id'], 1111, 2222,
137             constants.INGRESS_DIRECTION)
138         self.safe_client.create_bandwidth_limit_rule(
139             tenant_id, qos_policy['id'], 3333, 4444,
140             constants.EGRESS_DIRECTION)
141 
142         fip = self.safe_client.create_floatingip(
143             tenant_id, ext_net['id'], vm.ip, vm.neutron_port['id'],
144             qos_policy_id=qos_policy['id'])
145         # ping floating ip from external vm
146         external_vm.block_until_ping(fip['floating_ip_address'])
147 
148         self.safe_client.update_router(router['id'], admin_state_up=False)
149         external_vm.block_until_no_ping(fip['floating_ip_address'])
150 
151         self.safe_client.update_router(router['id'], admin_state_up=True)
152         external_vm.block_until_ping(fip['floating_ip_address'])
153 
154         qrouter_ns = namespaces.build_ns_name(namespaces.NS_PREFIX,
155                                               router['id'])
156         gateway_port = self.safe_client.list_ports(
157             device_id=router['id'],
158             device_owner=constants.DEVICE_OWNER_ROUTER_GW)[0]
159         interface_name = ('qg-%s' % gateway_port['id'])[:14]
160 
161         tc_wrapper = l3_tc_lib.FloatingIPTcCommand(
162             interface_name,
163             namespace=qrouter_ns)
164 
165         filter_ids = tc_wrapper.get_existing_filter_ids(
166             constants.INGRESS_DIRECTION)
167         self.assertEqual(1, len(filter_ids))
168         filter_ids = tc_wrapper.get_existing_filter_ids(
169             constants.EGRESS_DIRECTION)
170         self.assertEqual(1, len(filter_ids))
171 
172 
173 class TestLegacyL3Agent(TestL3Agent):
174 
175     def setUp(self):
176         host_descriptions = [
177             environment.HostDescription(l3_agent=True, dhcp_agent=True),
178             environment.HostDescription()]
179         env = environment.Environment(
180             environment.EnvironmentDescription(
181                 network_type='vlan', l2_pop=False),
182             host_descriptions)
183         super(TestLegacyL3Agent, self).setUp(env)
184 
185     def _get_namespace(self, router_id):
186         return namespaces.build_ns_name(namespaces.NS_PREFIX, router_id)
187 
188     def test_namespace_exists(self):
189         tenant_id = uuidutils.generate_uuid()
190 
191         router = self.safe_client.create_router(tenant_id)
192         network = self.safe_client.create_network(tenant_id)
193         subnet = self.safe_client.create_subnet(
194             tenant_id, network['id'], '20.0.0.0/24', gateway_ip='20.0.0.1')
195         self.safe_client.add_router_interface(router['id'], subnet['id'])
196 
197         namespace = "%s@%s" % (
198             self._get_namespace(router['id']),
199             self.environment.hosts[0].l3_agent.get_namespace_suffix(), )
200         self.assert_namespace_exists(namespace)
201 
202     def test_mtu_update(self):
203         tenant_id = uuidutils.generate_uuid()
204 
205         router = self.safe_client.create_router(tenant_id)
206         network = self.safe_client.create_network(tenant_id)
207         subnet = self.safe_client.create_subnet(
208             tenant_id, network['id'], '20.0.0.0/24', gateway_ip='20.0.0.1')
209         self.safe_client.add_router_interface(router['id'], subnet['id'])
210 
211         namespace = "%s@%s" % (
212             self._get_namespace(router['id']),
213             self.environment.hosts[0].l3_agent.get_namespace_suffix(), )
214         self.assert_namespace_exists(namespace)
215 
216         ip = ip_lib.IPWrapper(namespace)
217         common_utils.wait_until_true(lambda: ip.get_devices())
218 
219         devices = ip.get_devices()
220         self.assertEqual(1, len(devices))
221 
222         ri_dev = devices[0]
223         mtu = ri_dev.link.mtu
224         self.assertEqual(1500, mtu)
225 
226         mtu -= 1
227         network = self.safe_client.update_network(network['id'], mtu=mtu)
228         common_utils.wait_until_true(lambda: ri_dev.link.mtu == mtu)
229 
230     def test_east_west_traffic(self):
231         tenant_id = uuidutils.generate_uuid()
232         router = self.safe_client.create_router(tenant_id)
233 
234         vm1 = self._create_net_subnet_and_vm(
235             tenant_id, ['20.0.0.0/24', '2001:db8:aaaa::/64'],
236             self.environment.hosts[0], router)
237         vm2 = self._create_net_subnet_and_vm(
238             tenant_id, ['21.0.0.0/24', '2001:db8:bbbb::/64'],
239             self.environment.hosts[1], router)
240 
241         vm1.block_until_ping(vm2.ip)
242         # Verify ping6 from vm2 to vm1 IPv6 Address
243         vm2.block_until_ping(vm1.ipv6)
244 
245     def test_north_south_traffic(self):
246         # This function creates an external network which is connected to
247         # central_bridge and spawns an external_vm on it.
248         # The external_vm is configured with the gateway_ip (both v4 & v6
249         # addresses) of external subnet. Later, it creates a tenant router,
250         # a tenant network and two tenant subnets (v4 and v6). The tenant
251         # router is associated with tenant network and external network to
252         # provide north-south connectivity to the VMs.
253         # We validate the following in this testcase.
254         # 1. SNAT support: using ping from tenant VM to external_vm
255         # 2. Floating IP support: using ping from external_vm to VM floating ip
256         # 3. IPv6 ext connectivity: using ping6 from tenant vm to external_vm.
257         tenant_id = uuidutils.generate_uuid()
258         ext_net, ext_sub = self._create_external_network_and_subnet(tenant_id)
259         external_vm = self._create_external_vm(ext_net, ext_sub)
260         # Create an IPv6 subnet in the external network
261         v6network = self.useFixture(
262             ip_network.ExclusiveIPNetwork(
263                 "2001:db8:1234::1", "2001:db8:1234::10", "64")).network
264         ext_v6sub = self.safe_client.create_subnet(
265             tenant_id, ext_net['id'], v6network)
266 
267         router = self.safe_client.create_router(tenant_id,
268                                                 external_network=ext_net['id'])
269 
270         # Configure the gateway_ip of external v6subnet on the external_vm.
271         external_vm.ipv6_cidr = common_utils.ip_to_cidr(
272             ext_v6sub['gateway_ip'], 64)
273 
274         # Configure an IPv6 downstream route to the v6Address of router gw port
275         for fixed_ip in router['external_gateway_info']['external_fixed_ips']:
276             if netaddr.IPNetwork(fixed_ip['ip_address']).version == 6:
277                 external_vm.set_default_gateway(fixed_ip['ip_address'])
278 
279         vm = self._create_net_subnet_and_vm(
280             tenant_id, ['20.0.0.0/24', '2001:db8:aaaa::/64'],
281             self.environment.hosts[1], router)
282 
283         # ping external vm to test snat
284         vm.block_until_ping(external_vm.ip)
285 
286         fip = self.safe_client.create_floatingip(
287             tenant_id, ext_net['id'], vm.ip, vm.neutron_port['id'])
288 
289         # ping floating ip from external vm
290         external_vm.block_until_ping(fip['floating_ip_address'])
291 
292         # Verify VM is able to reach the router interface.
293         vm.block_until_ping(vm.gateway_ipv6)
294         # Verify north-south connectivity using ping6 to external_vm.
295         vm.block_until_ping(external_vm.ipv6)
296 
297         # Now let's remove and create again phys bridge and check connectivity
298         # once again
299         br_phys = self.environment.hosts[0].br_phys
300         br_phys.destroy()
301         br_phys.create()
302         self.environment.hosts[0].connect_to_central_network_via_vlans(
303             br_phys)
304 
305         # ping floating ip from external vm
306         external_vm.block_until_ping(fip['floating_ip_address'])
307 
308         # Verify VM is able to reach the router interface.
309         vm.block_until_ping(vm.gateway_ipv6)
310         # Verify north-south connectivity using ping6 to external_vm.
311         vm.block_until_ping(external_vm.ipv6)
312 
313     def test_gateway_ip_changed(self):
314         self._test_gateway_ip_changed()
315 
316     def test_router_fip_qos_after_admin_state_down_up(self):
317         self._router_fip_qos_after_admin_state_down_up()
318 
319 
320 class TestHAL3Agent(TestL3Agent):
321 
322     def setUp(self):
323         host_descriptions = [
324             environment.HostDescription(l3_agent=True, dhcp_agent=True)
325             for _ in range(2)]
326         env = environment.Environment(
327             environment.EnvironmentDescription(
328                 network_type='vlan', l2_pop=True),
329             host_descriptions)
330         super(TestHAL3Agent, self).setUp(env)
331 
332     def _is_ha_router_active_on_one_agent(self, router_id):
333         agents = self.client.list_l3_agent_hosting_routers(router_id)
334         return (
335             agents['agents'][0]['ha_state'] != agents['agents'][1]['ha_state'])
336 
337     def test_ha_router(self):
338         # TODO(amuller): Test external connectivity before and after a
339         # failover, see: https://review.opendev.org/#/c/196393/
340 
341         tenant_id = uuidutils.generate_uuid()
342         router = self.safe_client.create_router(tenant_id, ha=True)
343 
344         common_utils.wait_until_true(
345             lambda:
346             len(self.client.list_l3_agent_hosting_routers(
347                 router['id'])['agents']) == 2,
348             timeout=90)
349 
350         common_utils.wait_until_true(
351             functools.partial(
352                 self._is_ha_router_active_on_one_agent,
353                 router['id']),
354             timeout=90)
355 
356     def _get_keepalived_state(self, keepalived_state_file):
357         with open(keepalived_state_file, "r") as fd:
358             return fd.read()
359 
360     def _get_state_file_for_master_agent(self, router_id):
361         for host in self.environment.hosts:
362             keepalived_state_file = os.path.join(
363                 host.neutron_config.state_path, "ha_confs", router_id, "state")
364 
365             if self._get_keepalived_state(keepalived_state_file) == "master":
366                 return keepalived_state_file
367 
368     def _get_l3_agents_with_ha_state(self, l3_agents, router_id, ha_state):
369         found_agents = []
370         agents_hosting_router = self.client.list_l3_agent_hosting_routers(
371             router_id)['agents']
372         for agent in l3_agents:
373             agent_host = agent.neutron_cfg_fixture.get_host()
374             for agent_hosting_router in agents_hosting_router:
375                 if (agent_hosting_router['host'] == agent_host and
376                         agent_hosting_router['ha_state'] == ha_state):
377                     found_agents.append(agent)
378                     break
379         return found_agents
380 
381     def test_keepalived_multiple_sighups_does_not_forfeit_mastership(self):
382         """Setup a complete "Neutron stack" - both an internal and an external
383            network+subnet, and a router connected to both.
384         """
385         tenant_id = uuidutils.generate_uuid()
386         ext_net, ext_sub = self._create_external_network_and_subnet(tenant_id)
387         router = self.safe_client.create_router(tenant_id, ha=True,
388                                                 external_network=ext_net['id'])
389         common_utils.wait_until_true(
390             lambda:
391             len(self.client.list_l3_agent_hosting_routers(
392                 router['id'])['agents']) == 2,
393             timeout=90)
394         common_utils.wait_until_true(
395             functools.partial(
396                 self._is_ha_router_active_on_one_agent,
397                 router['id']),
398             timeout=90)
399         keepalived_state_file = self._get_state_file_for_master_agent(
400             router['id'])
401         self.assertIsNotNone(keepalived_state_file)
402         network = self.safe_client.create_network(tenant_id)
403         self._create_and_attach_subnet(
404             tenant_id, '13.37.0.0/24', network['id'], router['id'])
405 
406         # Create 10 fake VMs, each with a floating ip. Each floating ip
407         # association should send a SIGHUP to the keepalived's parent process,
408         # unless the Throttler works.
409         host = self.environment.hosts[0]
410         vms = [self._boot_fake_vm_in_network(host, tenant_id, network['id'],
411                                              wait=False)
412                for i in range(10)]
413         for vm in vms:
414             self.safe_client.create_floatingip(
415                 tenant_id, ext_net['id'], vm.ip, vm.neutron_port['id'])
416 
417         # Check that the keepalived's state file has not changed and is still
418         # master. This will indicate that the Throttler works. We want to check
419         # for ha_vrrp_advert_int (the default is 2 seconds), plus a bit more.
420         time_to_stop = (time.time() +
421                         (common_utils.DEFAULT_THROTTLER_VALUE *
422                          ha_router.THROTTLER_MULTIPLIER * 1.3))
423         while True:
424             if time.time() > time_to_stop:
425                 break
426             self.assertEqual(
427                 "master",
428                 self._get_keepalived_state(keepalived_state_file))
429 
430     def test_ha_router_restart_agents_no_packet_lost(self):
431         tenant_id = uuidutils.generate_uuid()
432         ext_net, ext_sub = self._create_external_network_and_subnet(tenant_id)
433         router = self.safe_client.create_router(tenant_id, ha=True,
434                                                 external_network=ext_net['id'])
435 
436         external_vm = self._create_external_vm(ext_net, ext_sub)
437 
438         common_utils.wait_until_true(
439             lambda:
440             len(self.client.list_l3_agent_hosting_routers(
441                 router['id'])['agents']) == 2,
442             timeout=90)
443 
444         common_utils.wait_until_true(
445             functools.partial(
446                 self._is_ha_router_active_on_one_agent,
447                 router['id']),
448             timeout=90)
449 
450         router_ip = router['external_gateway_info'][
451             'external_fixed_ips'][0]['ip_address']
452         # Let's check first if connectivity from external_vm to router's
453         # external gateway IP is possible before we restart agents
454         external_vm.block_until_ping(router_ip)
455 
456         l3_agents = [host.agents['l3'] for host in self.environment.hosts]
457         l3_standby_agents = self._get_l3_agents_with_ha_state(
458             l3_agents, router['id'], 'standby')
459         l3_active_agents = self._get_l3_agents_with_ha_state(
460             l3_agents, router['id'], 'active')
461 
462         self._assert_ping_during_agents_restart(
463             l3_standby_agents, external_vm.namespace, [router_ip], count=60)
464 
465         self._assert_ping_during_agents_restart(
466             l3_active_agents, external_vm.namespace, [router_ip], count=60)
467 
468     def test_gateway_ip_changed(self):
469         self._test_gateway_ip_changed()
470 
471     def test_router_fip_qos_after_admin_state_down_up(self):
472         self._router_fip_qos_after_admin_state_down_up()
