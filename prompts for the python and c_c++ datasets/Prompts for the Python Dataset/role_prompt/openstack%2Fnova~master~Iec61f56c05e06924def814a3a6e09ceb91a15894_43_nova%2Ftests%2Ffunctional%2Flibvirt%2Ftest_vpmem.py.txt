I want you to act as a code reviewer of Nova in OpenStack. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 #
2 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
3 #    not use this file except in compliance with the License. You may obtain
4 #    a copy of the License at
5 #
6 #         http://www.apache.org/licenses/LICENSE-2.0
7 #
8 #    Unless required by applicable law or agreed to in writing, software
9 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
10 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
11 #    License for the specific language governing permissions and limitations
12 #    under the License.
13 
14 import fixtures
15 
16 from oslo_config import cfg
17 from oslo_log import log as logging
18 
19 from nova import objects
20 from nova.tests.functional.libvirt import integrated_helpers
21 from nova.tests.unit.virt.libvirt import fake_imagebackend
22 from nova.tests.unit.virt.libvirt import fakelibvirt
23 
24 
25 CONF = cfg.CONF
26 LOG = logging.getLogger(__name__)
27 
28 
29 class VPMEMTestBase(integrated_helpers.LibvirtProviderUsageBaseTestCase):
30 
31     FAKE_LIBVIRT_VERSION = 5000000
32     FAKE_QEMU_VERSION = 3001000
33 
34     def setUp(self):
35         super(VPMEMTestBase, self).setUp()
36 
37         self.flags(pmem_namespaces="4GB:ns_0,SMALL:ns_1|ns_2",
38                    group='libvirt')
39         self.fake_pmem_namespaces = '''
40             [{"dev":"namespace0.0",
41             "mode":"devdax",
42             "map":"mem",
43             "size":4292870144,
44             "uuid":"24ffd5e4-2b39-4f28-88b3-d6dc1ec44863",
45             "daxregion":{"id": 0, "size": 4292870144,"align": 2097152,
46             "devices":[{"chardev":"dax0.0",
47             "size":4292870144}]},
48             "name":"ns_0",
49             "numa_node":0},
50             {"dev":"namespace0.1",
51             "mode":"devdax",
52             "map":"mem",
53             "size":4292870144,
54             "uuid":"ac64fe52-de38-465b-b32b-947a6773ac66",
55             "daxregion":{"id": 0, "size": 4292870144,"align": 2097152,
56             "devices":[{"chardev":"dax0.1",
57             "size":4292870144}]},
58             "name":"ns_1",
59             "numa_node":0},
60             {"dev":"namespace0.2",
61             "mode":"devdax",
62             "map":"mem",
63             "size":4292870144,
64             "uuid":"2ff41eba-db9c-4bb9-a959-31d992568a3e",
65             "raw_uuid":"0b61823b-5668-4856-842d-c644dae83410",
66             "daxregion":{"id":0, "size":4292870144, "align":2097152,
67             "devices":[{"chardev":"dax0.2",
68             "size":4292870144}]},
69             "name":"ns_2",
70             "numa_node":0}]'''
71 
72         self.useFixture(fixtures.MockPatch(
73             'nova.privsep.libvirt.cleanup_vpmem'))
74         self.useFixture(fixtures.MockPatch(
75             'nova.privsep.libvirt.get_pmem_namespaces',
76             return_value=self.fake_pmem_namespaces))
77         self.useFixture(fake_imagebackend.ImageBackendFixture())
78         self.useFixture(fixtures.MockPatch(
79             'nova.virt.libvirt.LibvirtDriver._get_local_gb_info',
80             return_value={'total': 128,
81                           'used': 44,
82                           'free': 84}))
83         self.mock_conn = self.useFixture(fixtures.MockPatch(
84             'nova.virt.libvirt.host.Host._get_new_connection')).mock
85 
86     def _get_connection(self, host_info, hostname=None):
87         fake_connection = fakelibvirt.Connection(
88             'qemu:///system',
89             version=self.FAKE_LIBVIRT_VERSION,
90             hv_version=self.FAKE_QEMU_VERSION,
91             host_info=host_info,
92             hostname=hostname)
93         return fake_connection
94 
95     def _start_compute_service(self, hostname):
96         fake_connection = self._get_connection(
97             # Need a host to support creating more servers with vpmems
98             host_info=fakelibvirt.HostInfo(cpu_nodes=2, cpu_sockets=1,
99                                            cpu_cores=2, cpu_threads=2,
100                                            kB_mem=15740000),
101             hostname=hostname)
102         self.mock_conn.return_value = fake_connection
103         compute = self._start_compute(host=hostname)
104 
105         # Ensure populating the existing pmems correctly.
106         vpmems = compute.driver._vpmems_by_name
107         expected_vpmems = {
108             'ns_0': objects.LibvirtVPMEMDevice(
109                 label='4GB', name='ns_0', devpath='/dev/dax0.0',
110                 size=4292870144, align=2097152),
111             'ns_1': objects.LibvirtVPMEMDevice(
112                 label='SMALL', name='ns_1', devpath='/dev/dax0.1',
113                 size=4292870144, align=2097152),
114             'ns_2': objects.LibvirtVPMEMDevice(
115                 label='SMALL', name='ns_2', devpath='/dev/dax0.2',
116                 size=4292870144, align=2097152)}
117         self.assertDictEqual(expected_vpmems, vpmems)
118 
119         # Ensure reporting vpmems resources correctly
120         rp_uuid = self._get_provider_uuid_by_host(compute.host)
121         inventory = self._get_provider_inventory(rp_uuid)
122         self.assertEqual(1, inventory['CUSTOM_PMEM_NAMESPACE_4GB']['total'])
123         self.assertEqual(2, inventory['CUSTOM_PMEM_NAMESPACE_SMALL']['total'])
124 
125         return compute
126 
127     def _create_server(self, flavor_id, hostname):
128         server_req = self._build_minimal_create_server_request(
129             self.api, 'some-server', flavor_id=flavor_id,
130             image_uuid='155d900f-4e14-4e4c-a73d-069cbf4541e6',
131             networks='none')
132         server_req['availability_zone'] = 'nova:%s' % hostname
133         LOG.info('booting on %s', hostname)
134         created_server = self.api.post_server({'server': server_req})
135         return created_server
136 
137     def _delete_server(self, server):
138         self.api.delete_server(server['id'])
139 
140     def _create_flavor(self, extra_spec=None):
141         flv_name, flv_id = self.get_unused_flavor_name_id()
142         flavor_body = {'flavor':
143                            {'name': flv_name,
144                             'id': flv_id,
145                             'ram': 1024,
146                             'vcpus': 1,
147                             'disk': 1,
148                             }}
149         self.api.post_flavor(flavor_body)
150         if extra_spec:
151             spec = {"extra_specs": extra_spec}
152             self.api.post_extra_spec(flv_id, spec)
153         return flv_id
154 
155     def _check_vpmem_allocations(self, vpmem_allocs, server_id, cn_uuid):
156         cn_allocs = self._get_allocations_by_server_uuid(
157             server_id)[cn_uuid]['resources']
158         for rc, amount in vpmem_allocs.items():
159             self.assertEqual(amount, cn_allocs[rc])
160 
161 
162 class VPMEMTests(VPMEMTestBase):
163 
164     def setUp(self):
165         super(VPMEMTests, self).setUp()
166         extra_spec = {"hw:pmem": "SMALL"}
167         self.flavor = self._create_flavor(extra_spec=extra_spec)
168 
169     def test_create_servers_with_vpmem(self):
170         # Start one compute service
171         self.compute1 = self._start_compute_service('host1')
172         cn1_uuid = self._get_provider_uuid_by_host(self.compute1.host)
173 
174         # Boot two servers with pmem
175         server1 = self._create_server(self.flavor, self.compute1.host)
176         self._wait_for_state_change(self.api, server1, 'ACTIVE')
177         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
178                                       server1['id'], cn1_uuid)
179         server2 = self._create_server(self.flavor, self.compute1.host)
180         self._wait_for_state_change(self.api, server2, 'ACTIVE')
181         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
182                                       server2['id'], cn1_uuid)
183 
184         # 'SMALL' VPMEM resource has used up
185         server3 = self._create_server(self.flavor, self.compute1.host)
186         self._wait_for_state_change(self.api, server3, 'ERROR')
187 
188         # Delete server2, one 'SMALL' VPMEM will be released
189         self._delete_server(server2)
190         server3 = self._create_server(self.flavor, self.compute1.host)
191         self._wait_for_state_change(self.api, server3, 'ACTIVE')
192         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
193                                       server3['id'], cn1_uuid)
194 
195 
196 class VPMEMResizeTests(VPMEMTestBase):
197 
198     def setUp(self):
199         super(VPMEMResizeTests, self).setUp()
200 
201         self.useFixture(fixtures.MockPatch(
202             'nova.virt.libvirt.LibvirtDriver._get_instance_disk_info',
203              return_value=[]))
204         self.useFixture(fixtures.MockPatch('os.rename'))
205 
206         extra_spec = {"hw:pmem": "SMALL"}
207         self.flavor1 = self._create_flavor(extra_spec=extra_spec)
208         extra_spec = {"hw:pmem": "4GB,SMALL"}
209         self.flavor2 = self._create_flavor(extra_spec=extra_spec)
210 
211     def _resize_server(self, server, flavor):
212         resize_req = {
213             'resize': {
214                 'flavorRef': flavor
215             }
216         }
217         self.api.api_post('/servers/%s/action' % server['id'],
218                           resize_req)
219 
220     def _confirm_resize(self, server):
221         confirm_resize_req = {'confirmResize': None}
222         self.api.api_post('/servers/%s/action' % server['id'],
223                           confirm_resize_req)
224 
225     def _revert_resize(self, server):
226         revert_resize_req = {'revertResize': None}
227         self.api.api_post('/servers/%s/action' % server['id'],
228                           revert_resize_req)
229 
230     def test_resize(self):
231         self.flags(allow_resize_to_same_host=False)
232         # Start two compute nodes
233         self.compute1 = self._start_compute_service('host1')
234         self.compute2 = self._start_compute_service('host2')
235         cn1_uuid = self._get_provider_uuid_by_host(self.compute1.host)
236         cn2_uuid = self._get_provider_uuid_by_host(self.compute2.host)
237 
238         # Boot one server with pmem, then resize the server
239         server = self._create_server(self.flavor1, self.compute1.host)
240         self._wait_for_state_change(self.api, server, 'ACTIVE')
241         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
242                                       server['id'], cn1_uuid)
243 
244         # Revert resize
245         self._resize_server(server, self.flavor2)
246         self._wait_for_state_change(self.api, server, 'VERIFY_RESIZE')
247         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_4GB': 1,
248                                        'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
249                                       server['id'], cn2_uuid)
250         self._revert_resize(server)
251         self._wait_for_state_change(self.api, server, 'ACTIVE')
252         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
253                                       server['id'], cn1_uuid)
254 
255         # Confirm resize
256         self._resize_server(server, self.flavor2)
257         self._wait_for_state_change(self.api, server, 'VERIFY_RESIZE')
258         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_4GB': 1,
259                                        'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
260                                       server['id'], cn2_uuid)
261         self._confirm_resize(server)
262         self._wait_for_state_change(self.api, server, 'ACTIVE')
263         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_4GB': 1,
264                                        'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
265                                       server['id'], cn2_uuid)
266 
267     def test_resize_same_host(self):
268         self.flags(allow_resize_to_same_host=True)
269         # Start one compute nodes
270         self.compute1 = self._start_compute_service('host1')
271         cn1_uuid = self._get_provider_uuid_by_host(self.compute1.host)
272 
273         # Boot one server with pmem, then resize the server
274         server = self._create_server(self.flavor1, self.compute1.host)
275         self._wait_for_state_change(self.api, server, 'ACTIVE')
276         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
277                                       server['id'], cn1_uuid)
278 
279         # Revert resize
280         self._resize_server(server, self.flavor2)
281         self._wait_for_state_change(self.api, server, 'VERIFY_RESIZE')
282         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_4GB': 1,
283                                        'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
284                                       server['id'], cn1_uuid)
285         self._revert_resize(server)
286         self._wait_for_state_change(self.api, server, 'ACTIVE')
287         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
288                                       server['id'], cn1_uuid)
289 
290         # Confirm resize
291         self._resize_server(server, self.flavor2)
292         self._wait_for_state_change(self.api, server, 'VERIFY_RESIZE')
293         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_4GB': 1,
294                                        'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
295                                       server['id'], cn1_uuid)
296         self._confirm_resize(server)
297         self._wait_for_state_change(self.api, server, 'ACTIVE')
298         self._check_vpmem_allocations({'CUSTOM_PMEM_NAMESPACE_4GB': 1,
299                                        'CUSTOM_PMEM_NAMESPACE_SMALL': 1},
300                                       server['id'], cn1_uuid)
