I want you to act as a code reviewer of Nova in OpenStack. Please review the code below to detect security defects. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are found, please state '''No security defects are detected in the code'''.

1 # Copyright (c) 2014-2016 Red Hat, Inc
2 #
3 # Licensed under the Apache License, Version 2.0 (the "License"); you may
4 # not use this file except in compliance with the License. You may obtain
5 # a copy of the License at
6 #
7 #      http://www.apache.org/licenses/LICENSE-2.0
8 #
9 # Unless required by applicable law or agreed to in writing, software
10 # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 # License for the specific language governing permissions and limitations
13 # under the License.
14 
15 import enum
16 import ssl
17 import struct
18 
19 from oslo_config import cfg
20 from oslo_log import log as logging
21 import six
22 
23 from nova.console.rfb import auth
24 from nova import exception
25 from nova.i18n import _
26 
27 LOG = logging.getLogger(__name__)
28 CONF = cfg.CONF
29 
30 
31 class AuthVeNCryptSubtype(enum.IntEnum):
32     """Possible VeNCrypt subtypes.
33 
34     From https://github.com/rfbproto/rfbproto/blob/master/rfbproto.rst
35     """
36 
37     PLAIN = 256
38     TLSNONE = 257
39     TLSVNC = 258
40     TLSPLAIN = 259
41     X509NONE = 260
42     X509VNC = 261
43     X509PLAIN = 262
44     X509SASL = 263
45     TLSSASL = 264
46 
47 
48 class RFBAuthSchemeVeNCrypt(auth.RFBAuthScheme):
49     """A security proxy helper which uses VeNCrypt.
50 
51     This security proxy helper uses the VeNCrypt security
52     type to achieve SSL/TLS-secured VNC.  It supports both
53     standard SSL/TLS encryption and SSL/TLS encryption with
54     x509 authentication.
55 
56     Refer to https://www.berrange.com/~dan/vencrypt.txt for
57     a brief overview of the protocol.
58     """
59 
60     def security_type(self):
61         return auth.AuthType.VENCRYPT
62 
63     def security_handshake(self, compute_sock):
64         def recv(num):
65             b = compute_sock.recv(num)
66             if len(b) != num:
67                 reason = _("Short read from compute socket, wanted "
68                            "%(wanted)d bytes but got %(got)d") % {
69                                'wanted': num, 'got': len(b)}
70                 raise exception.RFBAuthHandshakeFailed(reason=reason)
71             return b
72 
73         # get the VeNCrypt version from the server
74         maj_ver = ord(recv(1))
75         min_ver = ord(recv(1))
76 
77         LOG.debug("Server sent VeNCrypt version "
78                   "%(maj)s.%(min)s", {'maj': maj_ver, 'min': min_ver})
79 
80         if maj_ver != 0 or min_ver != 2:
81             reason = _("Only VeNCrypt version 0.2 is supported by this "
82                        "proxy, but the server wanted to use version "
83                        "%(maj)s.%(min)s") % {'maj': maj_ver, 'min': min_ver}
84             raise exception.RFBAuthHandshakeFailed(reason=reason)
85 
86         # use version 0.2
87         compute_sock.sendall(b"\x00\x02")
88 
89         can_use_version = ord(recv(1))
90 
91         if can_use_version > 0:
92             reason = _("Server could not use VeNCrypt version 0.2")
93             raise exception.RFBAuthHandshakeFailed(reason=reason)
94 
95         # get the supported sub-auth types
96         sub_types_cnt = ord(recv(1))
97         sub_types_raw = recv(sub_types_cnt * auth.SUBTYPE_LENGTH)
98         sub_types = struct.unpack('!' + str(sub_types_cnt) + 'I',
99                                   sub_types_raw)
100 
101         LOG.debug("Server supports VeNCrypt sub-types %s", sub_types)
102 
103         # We use X509None as we're only seeking to encrypt the channel (ruling
104         # out PLAIN) and prevent MITM (ruling out TLS*, which uses trivially
105         # MITM'd Anonymous Diffie Hellmann (DH) cyphers)
106         if AuthVeNCryptSubtype.X509NONE not in sub_types:
107             reason = _("Server does not support the x509None (%s) VeNCrypt"
108                        " sub-auth type") % \
109                        AuthVeNCryptSubtype.X509NONE
110             raise exception.RFBAuthHandshakeFailed(reason=reason)
111 
112         LOG.debug("Attempting to use the x509None (%s) auth sub-type",
113                   AuthVeNCryptSubtype.X509NONE)
114 
115         compute_sock.sendall(struct.pack(
116             '!I', AuthVeNCryptSubtype.X509NONE))
117 
118         # NB(sross): the spec is missing a U8 here that's used in
119         # multiple implementations (e.g. QEMU, GTK-VNC).  1 means
120         # acceptance, 0 means failure (unlike the rest of RFB)
121         auth_accepted = ord(recv(1))
122         if auth_accepted == 0:
123             reason = _("Server didn't accept the requested auth sub-type")
124             raise exception.RFBAuthHandshakeFailed(reason=reason)
125 
126         LOG.debug("Server accepted the requested sub-auth type")
127 
128         if (CONF.vnc.vencrypt_client_key and
129                 CONF.vnc.vencrypt_client_cert):
130             client_key = CONF.vnc.vencrypt_client_key
131             client_cert = CONF.vnc.vencrypt_client_cert
132         else:
133             client_key = None
134             client_cert = None
135 
136         try:
137             wrapped_sock = ssl.wrap_socket(
138                 compute_sock,
139                 keyfile=client_key,
140                 certfile=client_cert,
141                 server_side=False,
142                 cert_reqs=ssl.CERT_REQUIRED,
143                 ca_certs=CONF.vnc.vencrypt_ca_certs,
144                 ssl_version=ssl.PROTOCOL_TLSv1_2)
145 
146             LOG.info("VeNCrypt security handshake accepted")
147             return wrapped_sock
148 
149         except ssl.SSLError as e:
150             reason = _("Error establishing TLS connection to server: %s") % (
151                 six.text_type(e))
152             raise exception.RFBAuthHandshakeFailed(reason=reason)
