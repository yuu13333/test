Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 # Copyright (c) 2013 OpenStack Foundation
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 import abc
16 
17 from neutron.common import exceptions as exc
18 from neutron.common import topics
19 from neutron.i18n import _LI, _LW
20 from neutron.openstack.common import log
21 from neutron.plugins.common import utils as plugin_utils
22 from neutron.plugins.ml2 import driver_api as api
23 from neutron.plugins.ml2.drivers import helpers
24 
25 LOG = log.getLogger(__name__)
26 
27 TUNNEL = 'tunnel'
28 
29 
30 class TunnelTypeDriver(helpers.TypeDriverHelper):
31     """Define stable abstract interface for ML2 type drivers.
32 
33     tunnel type networks rely on tunnel endpoints. This class defines abstract
34     methods to manage these endpoints.
35     """
36 
37     def __init__(self, model):
38         super(TunnelTypeDriver, self).__init__(model)
39         self.segmentation_key = iter(self.primary_keys).next()
40 
41     @abc.abstractmethod
42     def sync_allocations(self):
43         """Synchronize type_driver allocation table with configured ranges."""
44 
45     @abc.abstractmethod
46     def add_endpoint(self, ip, host, udp_port=None):
47         """Register the endpoint in the type_driver database.
48 
49         param ip: the IP address of the endpoint
50         param host: the Host name of the endpoint
51         param udp_port: udp port number for vxlan endpoint
52         """
53         pass
54 
55     @abc.abstractmethod
56     def get_endpoints(self):
57         """Get every endpoint managed by the type_driver
58 
59         :returns a list of dict [{ip_address:endpoint_ip, host:endpoint_host},
60         ..]
61         """
62         pass
63 
64     @abc.abstractmethod
65     def get_endpoint_by_host(self, host):
66         """Get endpoint for a given host managed by the type_driver
67 
68         param host: the Host name of the endpoint
69 
70         if host found in type_driver database
71            :returns db object for that particular host
72         else
73            :returns None
74         """
75         pass
76 
77     @abc.abstractmethod
78     def get_endpoint_by_ip(self, ip):
79         """Get endpoint for a given tunnel ip managed by the type_driver
80 
81         param ip: the IP address of the endpoint
82 
83         if ip found in type_driver database
84            :returns db object for that particular ip
85         else
86            :returns None
87         """
88         pass
89 
90     @abc.abstractmethod
91     def delete_endpoint(self, ip):
92         """Delete the endpoint in the type_driver database.
93 
94         param ip: the IP address of the endpoint
95         """
96         pass
97 
98     def update_endpoint(self, ip, host=None, udp_port=None):
99         """Update the endpoint in the type_driver database.
100 
101         param ip: the IP address of the endpoint
102         param host: the Host name of the endpoint
103         param udp_port: udp port number for vxlan endpoint
104         """
105         pass
106 
107     def _initialize(self, raw_tunnel_ranges):
108         self.tunnel_ranges = []
109         self._parse_tunnel_ranges(raw_tunnel_ranges, self.tunnel_ranges)
110         self.sync_allocations()
111 
112     def _parse_tunnel_ranges(self, tunnel_ranges, current_range):
113         for entry in tunnel_ranges:
114             entry = entry.strip()
115             try:
116                 tun_min, tun_max = entry.split(':')
117                 tun_min = tun_min.strip()
118                 tun_max = tun_max.strip()
119                 tunnel_range = int(tun_min), int(tun_max)
120             except ValueError as ex:
121                 raise exc.NetworkTunnelRangeError(tunnel_range=entry, error=ex)
122             plugin_utils.verify_tunnel_range(tunnel_range, self.get_type())
123             current_range.append(tunnel_range)
124         LOG.info(_LI("%(type)s ID ranges: %(range)s"),
125                  {'type': self.get_type(), 'range': current_range})
126 
127     def is_partial_segment(self, segment):
128         return segment.get(api.SEGMENTATION_ID) is None
129 
130     def validate_provider_segment(self, segment):
131         physical_network = segment.get(api.PHYSICAL_NETWORK)
132         if physical_network:
133             msg = _("provider:physical_network specified for %s "
134                     "network") % segment.get(api.NETWORK_TYPE)
135             raise exc.InvalidInput(error_message=msg)
136 
137         for key, value in segment.items():
138             if value and key not in [api.NETWORK_TYPE,
139                                      api.SEGMENTATION_ID]:
140                 msg = (_("%(key)s prohibited for %(tunnel)s provider network"),
141                        {'key': key, 'tunnel': segment.get(api.NETWORK_TYPE)})
142                 raise exc.InvalidInput(error_message=msg)
143 
144     def reserve_provider_segment(self, session, segment):
145         if self.is_partial_segment(segment):
146             alloc = self.allocate_partially_specified_segment(session)
147             if not alloc:
148                 raise exc.NoNetworkAvailable()
149         else:
150             segmentation_id = segment.get(api.SEGMENTATION_ID)
151             alloc = self.allocate_fully_specified_segment(
152                 session, **{self.segmentation_key: segmentation_id})
153             if not alloc:
154                 raise exc.TunnelIdInUse(tunnel_id=segmentation_id)
155         return {api.NETWORK_TYPE: self.get_type(),
156                 api.PHYSICAL_NETWORK: None,
157                 api.SEGMENTATION_ID: getattr(alloc, self.segmentation_key)}
158 
159     def allocate_tenant_segment(self, session):
160         alloc = self.allocate_partially_specified_segment(session)
161         if not alloc:
162             return
163         return {api.NETWORK_TYPE: self.get_type(),
164                 api.PHYSICAL_NETWORK: None,
165                 api.SEGMENTATION_ID: getattr(alloc, self.segmentation_key)}
166 
167     def release_segment(self, session, segment):
168         tunnel_id = segment[api.SEGMENTATION_ID]
169 
170         inside = any(lo <= tunnel_id <= hi for lo, hi in self.tunnel_ranges)
171 
172         info = {'type': self.get_type(), 'id': tunnel_id}
173         with session.begin(subtransactions=True):
174             query = (session.query(self.model).
175                      filter_by(**{self.segmentation_key: tunnel_id}))
176             if inside:
177                 count = query.update({"allocated": False})
178                 if count:
179                     LOG.debug("Releasing %(type)s tunnel %(id)s to pool",
180                               info)
181             else:
182                 count = query.delete()
183                 if count:
184                     LOG.debug("Releasing %(type)s tunnel %(id)s outside pool",
185                               info)
186 
187         if not count:
188             LOG.warning(_LW("%(type)s tunnel %(id)s not found"), info)
189 
190     def get_allocation(self, session, tunnel_id):
191         return (session.query(self.model).
192                 filter_by(**{self.segmentation_key: tunnel_id}).
193                 first())
194 
195 
196 class TunnelRpcCallbackMixin(object):
197 
198     def setup_tunnel_callback_mixin(self, notifier, type_manager):
199         self._notifier = notifier
200         self._type_manager = type_manager
201 
202     def tunnel_sync(self, rpc_context, **kwargs):
203         """Update new tunnel.
204 
205         Updates the database with the tunnel IP. All listening agents will also
206         be notified about the new tunnel IP.
207         """
208         tunnel_ip = kwargs.get('tunnel_ip')
209         if not tunnel_ip:
210             msg = _("Tunnel IP value needed by the ML2 plugin")
211             raise exc.InvalidInput(error_message=msg)
212 
213         tunnel_type = kwargs.get('tunnel_type')
214         if not tunnel_type:
215             msg = _("Network type value needed by the ML2 plugin")
216             raise exc.InvalidInput(error_message=msg)
217 
218         udp_port = kwargs.get('udp_port')
219         host = kwargs.get('host')
220         driver = self._type_manager.drivers.get(tunnel_type)
221         if driver:
222             # The given conditional statements will verify the following
223             # things:
224             # 1. If host is not passed from an agent, it is a legacy mode.
225             # 2. If passed host and tunnel_ip are not found in the DB,
226             #    it is a new endpoint.
227             # 3. If host is passed from an agent and it is not found in DB
228             #    but the passed tunnel_ip is found, delete the endpoint
229             #    from DB and add the endpoint with (tunnel_ip, host),
230             #    it is an upgrade case.
231             # 4. If passed host is found in DB and passed tunnel ip is not
232             #    found, delete the endpoint belonging to that host and
233             #    add endpoint with latest (tunnel_ip, host), it is a case
234             #    where local_ip of an agent got changed.
235             if host:
236                 host_endpoint = driver.obj.get_endpoint_by_host(host)
237                 ip_endpoint = driver.obj.get_endpoint_by_ip(tunnel_ip)
238 
239                 if (ip_endpoint and ip_endpoint.host is None
240                     and host_endpoint is None):
241                     driver.obj.delete_endpoint(ip_endpoint.ip_address)
242                 elif (ip_endpoint and ip_endpoint.host != host):
243                     msg = (_("Tunnel IP %(ip)s in use with host %(host)s"),
244                            {'ip': ip_endpoint.ip_address,
245                             'host': ip_endpoint.host})
246                     raise exc.InvalidInput(error_message=msg)
247                 elif (host_endpoint and host_endpoint.ip_address != tunnel_ip):
248                     # Notify all other listening agents to delete stale tunnels
249                     self._notifier.tunnel_delete(rpc_context,
250                         host_endpoint.ip_address, tunnel_type)
251                     driver.obj.delete_endpoint(host_endpoint.ip_address)
252             # If udp_port is not passed from an agent it is a legacy mode.
253             # If udp_port is passed for VXLAN tunnel type, check if there is
254             # change in UDP port value, update the endpoint with updated
255             # UDP port value.
256             if udp_port:
257                 ip_endpoint = driver.obj.get_endpoint_by_ip(tunnel_ip)
258                 if ip_endpoint and ip_endpoint.udp_port != udp_port:
259                     driver.obj.update_endpoint(tunnel_ip, udp_port)
260                 tunnel = driver.obj.add_endpoint(tunnel_ip, host, udp_port)
261             else:
262                 tunnel = driver.obj.add_endpoint(tunnel_ip, host)
263             tunnels = driver.obj.get_endpoints()
264             entry = {'tunnels': tunnels}
265             # Notify all other listening agents
266             self._notifier.tunnel_update(rpc_context, tunnel.ip_address,
267                                          tunnel_type)
268             # Return the list of tunnels IP's to the agent
269             return entry
270         else:
271             msg = _("Network type value '%s' not supported") % tunnel_type
272             raise exc.InvalidInput(error_message=msg)
273 
274 
275 class TunnelAgentRpcApiMixin(object):
276 
277     def _get_tunnel_update_topic(self):
278         return topics.get_topic_name(self.topic,
279                                      TUNNEL,
280                                      topics.UPDATE)
281 
282     def tunnel_update(self, context, tunnel_ip, tunnel_type):
283         cctxt = self.client.prepare(topic=self._get_tunnel_update_topic(),
284                                     fanout=True)
285         cctxt.cast(context, 'tunnel_update', tunnel_ip=tunnel_ip,
286                    tunnel_type=tunnel_type)
287 
288     def _get_tunnel_delete_topic(self):
289         return topics.get_topic_name(self.topic,
290                                      TUNNEL,
291                                      topics.DELETE)
292 
293     def tunnel_delete(self, context, tunnel_ip, tunnel_type):
294         cctxt = self.client.prepare(topic=self._get_tunnel_delete_topic(),
295                                     fanout=True)
296         cctxt.cast(context, 'tunnel_delete', tunnel_ip=tunnel_ip,
297                    tunnel_type=tunnel_type)
