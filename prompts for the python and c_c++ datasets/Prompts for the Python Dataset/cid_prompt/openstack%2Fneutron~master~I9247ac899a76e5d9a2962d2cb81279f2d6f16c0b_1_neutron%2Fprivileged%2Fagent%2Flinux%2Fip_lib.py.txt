Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 # Licensed under the Apache License, Version 2.0 (the "License"); you may
2 # not use this file except in compliance with the License. You may obtain
3 # a copy of the License at
4 #
5 #      http://www.apache.org/licenses/LICENSE-2.0
6 #
7 # Unless required by applicable law or agreed to in writing, software
8 # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
9 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
10 # License for the specific language governing permissions and limitations
11 # under the License.
12 
13 import errno
14 import socket
15 
16 from neutron_lib import constants
17 import pyroute2
18 from pyroute2.netlink import rtnl
19 from pyroute2.netlink.rtnl import ndmsg
20 from pyroute2 import NetlinkError
21 from pyroute2 import netns
22 
23 from neutron._i18n import _
24 from neutron import privileged
25 
26 
27 _IP_VERSION_FAMILY_MAP = {4: socket.AF_INET, 6: socket.AF_INET6}
28 
29 
30 def _get_scope_name(scope):
31     """Return the name of the scope (given as a number), or the scope number
32     if the name is unknown.
33 
34     For backward compatibility (with "ip" tool) "global" scope is converted to
35     "universe" before converting to number
36     """
37     scope = 'universe' if scope == 'global' else scope
38     return rtnl.rt_scope.get(scope, scope)
39 
40 
41 class NetworkNamespaceNotFound(RuntimeError):
42     message = _("Network namespace %(netns_name)s could not be found.")
43 
44     def __init__(self, netns_name):
45         super(NetworkNamespaceNotFound, self).__init__(
46             self.message % {'netns_name': netns_name})
47 
48 
49 class NetworkInterfaceNotFound(RuntimeError):
50     pass
51 
52 
53 @privileged.default.entrypoint
54 def get_routing_table(ip_version, namespace=None):
55     """Return a list of dictionaries, each representing a route.
56 
57     :param ip_version: IP version of routes to return, for example 4
58     :param namespace: The name of the namespace from which to get the routes
59     :return: a list of dictionaries, each representing a route.
60     The dictionary format is: {'destination': cidr,
61                                'nexthop': ip,
62                                'device': device_name,
63                                'scope': scope}
64     """
65     family = _IP_VERSION_FAMILY_MAP[ip_version]
66     try:
67         netns = pyroute2.NetNS(namespace, flags=0) if namespace else None
68     except OSError as e:
69         if e.errno == errno.ENOENT:
70             raise NetworkNamespaceNotFound(netns_name=namespace)
71         raise
72     with pyroute2.IPDB(nl=netns) as ipdb:
73         ipdb_routes = ipdb.routes
74         ipdb_interfaces = ipdb.interfaces
75         routes = [{'destination': route['dst'],
76                    'nexthop': route.get('gateway'),
77                    'device': ipdb_interfaces[route['oif']]['ifname'],
78                    'scope': _get_scope_name(route['scope'])}
79                   for route in ipdb_routes if route['family'] == family]
80     return routes
81 
82 
83 def _get_iproute(namespace):
84     # From iproute.py:
85     # `IPRoute` -- RTNL API to the current network namespace
86     # `NetNS` -- RTNL API to another network namespace
87     if namespace:
88         # do not try and create the namespace
89         return pyroute2.NetNS(namespace, flags=0)
90     else:
91         return pyroute2.IPRoute()
92 
93 
94 def _get_link_id(device, namespace):
95     try:
96         with _get_iproute(namespace) as ip:
97             return ip.link_lookup(ifname=device)[0]
98     except IndexError:
99         msg = _("Network interface %(device)s not found in namespace "
100                 "%(namespace)s.") % {'device': device,
101                                      'namespace': namespace}
102         raise NetworkInterfaceNotFound(msg)
103 
104 
105 def _run_iproute_link(command, device, namespace, **kwargs):
106     try:
107         with _get_iproute(namespace) as ip:
108             idx = _get_link_id(device, namespace)
109             return ip.link(command, index=idx, **kwargs)
110     except OSError as e:
111         if e.errno == errno.ENOENT:
112             raise NetworkNamespaceNotFound(netns_name=namespace)
113         raise
114 
115 
116 def _run_iproute_neigh(command, device, namespace, **kwargs):
117     try:
118         with _get_iproute(namespace) as ip:
119             idx = _get_link_id(device, namespace)
120             return ip.neigh(command, ifindex=idx, **kwargs)
121     except OSError as e:
122         if e.errno == errno.ENOENT:
123             raise NetworkNamespaceNotFound(netns_name=namespace)
124         raise
125 
126 
127 def _run_iproute_addr(command, device, namespace, **kwargs):
128     try:
129         with _get_iproute(namespace) as ip:
130             idx = _get_link_id(device, namespace)
131             return ip.addr(command, index=idx, **kwargs)
132     except OSError as e:
133         if e.errno == errno.ENOENT:
134             raise NetworkNamespaceNotFound(netns_name=namespace)
135         raise
136 
137 
138 @privileged.default.entrypoint
139 def add_ip_address(ip_version, ip, prefixlen, device, namespace, scope,
140                    broadcast=None):
141     family = _IP_VERSION_FAMILY_MAP[ip_version]
142     _run_iproute_addr('add',
143                       device,
144                       namespace,
145                       address=ip,
146                       mask=prefixlen,
147                       family=family,
148                       broadcast=broadcast,
149                       scope=_get_scope_name(scope))
150 
151 
152 @privileged.default.entrypoint
153 def delete_ip_address(ip_version, ip, prefixlen, device, namespace):
154     family = _IP_VERSION_FAMILY_MAP[ip_version]
155     try:
156         _run_iproute_addr("delete",
157                           device,
158                           namespace,
159                           address=ip,
160                           mask=prefixlen,
161                           family=family)
162     except NetlinkError as e:
163         # when trying to delete a non-existent IP address, pyroute2 raises
164         # NetlinkError with code EADDRNOTAVAIL (99, 'Cannot assign requested
165         # address')
166         # this shouldn't raise an error
167         if e.code == errno.EADDRNOTAVAIL:
168             return
169         raise
170 
171 
172 @privileged.default.entrypoint
173 def flush_ip_addresses(ip_version, device, namespace):
174     family = _IP_VERSION_FAMILY_MAP[ip_version]
175     try:
176         with _get_iproute(namespace) as ip:
177             idx = _get_link_id(device, namespace)
178             ip.flush_addr(index=idx, family=family)
179     except OSError as e:
180         if e.errno == errno.ENOENT:
181             raise NetworkNamespaceNotFound(netns_name=namespace)
182         raise
183 
184 
185 @privileged.default.entrypoint
186 def create_interface(ifname, namespace, kind, **kwargs):
187     ifname = ifname[:constants.DEVICE_NAME_MAX_LEN]
188     try:
189         with _get_iproute(namespace) as ip:
190             physical_interface = kwargs.pop("physical_interface", None)
191             if physical_interface:
192                 link_key = "vxlan_link" if kind == "vxlan" else "link"
193                 kwargs[link_key] = _get_link_id(physical_interface, namespace)
194             return ip.link("add", ifname=ifname, kind=kind, **kwargs)
195     except OSError as e:
196         if e.errno == errno.ENOENT:
197             raise NetworkNamespaceNotFound(netns_name=namespace)
198         raise
199 
200 
201 @privileged.default.entrypoint
202 def delete_interface(ifname, namespace, **kwargs):
203     _run_iproute_link("del", ifname, namespace, **kwargs)
204 
205 
206 @privileged.default.entrypoint
207 def interface_exists(ifname, namespace):
208     try:
209         idx = _get_link_id(ifname, namespace)
210         return bool(idx)
211     except NetworkInterfaceNotFound:
212         return False
213     except OSError as e:
214         if e.errno == errno.ENOENT:
215             return False
216         raise
217 
218 
219 @privileged.default.entrypoint
220 def add_neigh_entry(ip_version, ip_address, mac_address, device, namespace,
221                     **kwargs):
222     """Add a neighbour entry.
223 
224     :param ip_address: IP address of entry to add
225     :param mac_address: MAC address of entry to add
226     :param device: Device name to use in adding entry
227     :param namespace: The name of the namespace in which to add the entry
228     """
229     family = _IP_VERSION_FAMILY_MAP[ip_version]
230     state = kwargs.get('nud_state', 'permanent')
231     _run_iproute_neigh('replace',
232                        device,
233                        namespace,
234                        dst=ip_address,
235                        lladdr=mac_address,
236                        family=family,
237                        state=ndmsg.states[state],
238                        **kwargs)
239 
240 
241 @privileged.default.entrypoint
242 def delete_neigh_entry(ip_version, ip_address, mac_address, device, namespace,
243                        **kwargs):
244     """Delete a neighbour entry.
245 
246     :param ip_address: IP address of entry to delete
247     :param mac_address: MAC address of entry to delete
248     :param device: Device name to use in deleting entry
249     :param namespace: The name of the namespace in which to delete the entry
250     """
251     family = _IP_VERSION_FAMILY_MAP[ip_version]
252     try:
253         _run_iproute_neigh('delete',
254                            device,
255                            namespace,
256                            dst=ip_address,
257                            lladdr=mac_address,
258                            family=family,
259                            **kwargs)
260     except NetlinkError as e:
261         # trying to delete a non-existent entry shouldn't raise an error
262         if e.code == errno.ENOENT:
263             return
264         raise
265 
266 
267 @privileged.default.entrypoint
268 def dump_neigh_entries(ip_version, device, namespace, **kwargs):
269     """Dump all neighbour entries.
270 
271     :param ip_version: IP version of entries to show (4 or 6)
272     :param device: Device name to use in dumping entries
273     :param namespace: The name of the namespace in which to dump the entries
274     :param kwargs: Callers add any filters they use as kwargs
275     :return: a list of dictionaries, each representing a neighbour.
276     The dictionary format is: {'dst': ip_address,
277                                'lladdr': mac_address,
278                                'device': device_name}
279     """
280     family = _IP_VERSION_FAMILY_MAP[ip_version]
281     entries = []
282     dump = _run_iproute_neigh('dump',
283                               device,
284                               namespace,
285                               family=family,
286                               **kwargs)
287 
288     for entry in dump:
289         attrs = dict(entry['attrs'])
290         entries += [{'dst': attrs['NDA_DST'],
291                      'lladdr': attrs.get('NDA_LLADDR'),
292                      'device': device}]
293     return entries
294 
295 
296 @privileged.default.entrypoint
297 def create_netns(name, **kwargs):
298     """Create a network namespace.
299 
300     :param name: The name of the namespace to create
301     """
302     try:
303         netns.create(name, **kwargs)
304     except OSError as e:
305         if e.errno != errno.EEXIST:
306             raise
307 
308 
309 @privileged.default.entrypoint
310 def remove_netns(name, **kwargs):
311     """Remove a network namespace.
312 
313     :param name: The name of the namespace to remove
314     """
315     netns.remove(name, **kwargs)
316 
317 
318 @privileged.default.entrypoint
319 def list_netns(**kwargs):
320     """List network namespaces.
321 
322     Caller requires raised priveleges to list namespaces
323     """
324     return netns.listnetns(**kwargs)
