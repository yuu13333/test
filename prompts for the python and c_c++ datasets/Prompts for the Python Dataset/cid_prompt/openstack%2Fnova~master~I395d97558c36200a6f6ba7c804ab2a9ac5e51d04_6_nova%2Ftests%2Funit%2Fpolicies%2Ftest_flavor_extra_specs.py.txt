Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
2 #    not use this file except in compliance with the License. You may obtain
3 #    a copy of the License at
4 #
5 #         http://www.apache.org/licenses/LICENSE-2.0
6 #
7 #    Unless required by applicable law or agreed to in writing, software
8 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
9 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
10 #    License for the specific language governing permissions and limitations
11 #    under the License.
12 
13 import fixtures
14 import mock
15 from oslo_utils.fixture import uuidsentinel as uuids
16 
17 from nova.api.openstack.compute import flavor_manage
18 from nova.api.openstack.compute import flavors
19 from nova.api.openstack.compute import flavors_extraspecs
20 from nova.api.openstack.compute import servers
21 from nova.compute import vm_states
22 from nova import objects
23 from nova.policies import flavor_extra_specs as policies
24 from nova.policies import flavor_manage as fm_policies
25 from nova.policies import servers as s_policies
26 from nova.tests.unit.api.openstack import fakes
27 from nova.tests.unit import fake_flavor
28 from nova.tests.unit import fake_instance
29 from nova.tests.unit.policies import base
30 
31 
32 class FlavorExtraSpecsPolicyTest(base.BasePolicyTest):
33     """Test Flavor Extra Specs APIs policies with all possible context.
34     This class defines the set of context with different roles
35     which are allowed and not allowed to pass the policy checks.
36     With those set of context, it will call the API operation and
37     verify the expected behaviour.
38     """
39 
40     def setUp(self):
41         super(FlavorExtraSpecsPolicyTest, self).setUp()
42         self.controller = flavors_extraspecs.FlavorExtraSpecsController()
43         self.flavor_ctrl = flavors.FlavorsController()
44         self.fm_ctrl = flavor_manage.FlavorManageController()
45         self.server_ctrl = servers.ServersController()
46         self.req = fakes.HTTPRequest.blank('')
47         self.server_ctrl._view_builder._add_security_grps = mock.MagicMock()
48         self.server_ctrl._view_builder._get_metadata = mock.MagicMock()
49         self.server_ctrl._view_builder._get_addresses = mock.MagicMock()
50         self.server_ctrl._view_builder._get_host_id = mock.MagicMock()
51         self.server_ctrl._view_builder._get_fault = mock.MagicMock()
52         self.server_ctrl._view_builder._add_host_status = mock.MagicMock()
53 
54         self.instance = fake_instance.fake_instance_obj(
55                 self.project_member_context,
56                 id=1, uuid=uuids.fake_id, project_id=self.project_id,
57                 vm_state=vm_states.ACTIVE)
58 
59         self.mock_get = self.useFixture(
60             fixtures.MockPatch('nova.api.openstack.common.get_instance')).mock
61         self.mock_get.return_value = self.instance
62 
63         fakes.stub_out_secgroup_api(
64             self, security_groups=[{'name': 'default'}])
65         self.mock_get_all = self.useFixture(fixtures.MockPatchObject(
66             self.server_ctrl.compute_api, 'get_all')).mock
67         self.mock_get_all.return_value = objects.InstanceList(
68             objects=[self.instance])
69 
70         def get_flavor_extra_specs(context, flavor_id):
71             return fake_flavor.fake_flavor_obj(
72                 self.project_member_context,
73                 id=1, uuid=uuids.fake_id, project_id=self.project_id,
74                 is_public=False, extra_specs={'hw:cpu_policy': 'shared'},
75                 expected_attrs='extra_specs')
76 
77         self.stub_out('nova.api.openstack.common.get_flavor',
78                       get_flavor_extra_specs)
79 
80         # In the base/legacy case, all project and system contexts are
81         # authorized in the "anyone" case.
82         self.all_authorized_contexts = (self.all_project_contexts |
83                                         self.all_system_contexts)
84 
85         # In the base/legacy case, all project and system contexts are
86         # authorized in the case of things that distinguish between
87         # scopes, since scope checking is disabled.
88         self.all_system_authorized_contexts = (self.all_project_contexts |
89                                                self.all_system_contexts)
90         self.all_project_authorized_contexts = (self.all_project_contexts |
91                                                self.all_system_contexts)
92 
93         # In the base/legacy case, any admin is an admin.
94         self.admin_authorized_contexts = [self.project_admin_context,
95                                           self.system_admin_context,
96                                           self.legacy_admin_context]
97 
98     @mock.patch('nova.objects.Flavor.save')
99     def test_create_flavor_extra_specs_policy(self, mock_save):
100         body = {'extra_specs': {'hw:numa_nodes': '1'}}
101         rule_name = policies.POLICY_ROOT % 'create'
102         self.common_policy_auth(self.admin_authorized_contexts,
103                                 rule_name,
104                                 self.controller.create,
105                                 self.req, '1234',
106                                 body=body)
107 
108     @mock.patch('nova.objects.Flavor._flavor_extra_specs_del')
109     @mock.patch('nova.objects.Flavor.save')
110     def test_delete_flavor_extra_specs_policy(self, mock_save, mock_delete):
111         rule_name = policies.POLICY_ROOT % 'delete'
112         self.common_policy_auth(self.admin_authorized_contexts,
113                                 rule_name,
114                                 self.controller.delete,
115                                 self.req, '1234', 'hw:cpu_policy')
116 
117     @mock.patch('nova.objects.Flavor.save')
118     def test_update_flavor_extra_specs_policy(self, mock_save):
119         body = {'hw:cpu_policy': 'shared'}
120         rule_name = policies.POLICY_ROOT % 'update'
121         self.common_policy_auth(self.admin_authorized_contexts,
122                                 rule_name,
123                                 self.controller.update,
124                                 self.req, '1234', 'hw:cpu_policy',
125                                 body=body)
126 
127     def test_show_flavor_extra_specs_policy(self):
128         rule_name = policies.POLICY_ROOT % 'show'
129         self.common_policy_auth(self.all_authorized_contexts,
130                                 rule_name,
131                                 self.controller.show,
132                                 self.req, '1234',
133                                 'hw:cpu_policy')
134 
135     def test_index_flavor_extra_specs_policy(self):
136         rule_name = policies.POLICY_ROOT % 'index'
137         self.common_policy_auth(self.all_authorized_contexts,
138                                 rule_name,
139                                 self.controller.index,
140                                 self.req, '1234')
141 
142     def test_flavor_detail_with_extra_specs_policy(self):
143         fakes.stub_out_flavor_get_all(self)
144         rule_name = policies.POLICY_ROOT % 'index'
145         req = fakes.HTTPRequest.blank('', version='2.61')
146         authorize_res, unauthorize_res = self.common_policy_auth(
147             self.all_authorized_contexts,
148             rule_name, self.flavor_ctrl.detail, req,
149             fatal=False)
150         for resp in authorize_res:
151             self.assertIn('extra_specs', resp['flavors'][0])
152         for resp in unauthorize_res:
153             self.assertNotIn('extra_specs', resp['flavors'][0])
154 
155     def test_flavor_show_with_extra_specs_policy(self):
156         fakes.stub_out_flavor_get_by_flavor_id(self)
157         rule_name = policies.POLICY_ROOT % 'index'
158         req = fakes.HTTPRequest.blank('', version='2.61')
159         authorize_res, unauthorize_res = self.common_policy_auth(
160             self.all_authorized_contexts,
161             rule_name, self.flavor_ctrl.show, req, '1',
162             fatal=False)
163         for resp in authorize_res:
164             self.assertIn('extra_specs', resp['flavor'])
165         for resp in unauthorize_res:
166             self.assertNotIn('extra_specs', resp['flavor'])
167 
168     def test_flavor_create_with_extra_specs_policy(self):
169         rule_name = policies.POLICY_ROOT % 'index'
170         # 'create' policy is checked before flavor extra specs 'index' policy
171         # so we have to allow it for everyone otherwise it will fail first
172         # for unauthorized contexts.
173         rule = fm_policies.POLICY_ROOT % 'create'
174         self.policy.set_rules({rule: "@"}, overwrite=False)
175         req = fakes.HTTPRequest.blank('', version='2.61')
176 
177         def fake_create(newflavor):
178             newflavor['flavorid'] = uuids.fake_id
179             newflavor["name"] = 'test'
180             newflavor["memory_mb"] = 512
181             newflavor["vcpus"] = 2
182             newflavor["root_gb"] = 1
183             newflavor["ephemeral_gb"] = 1
184             newflavor["swap"] = 512
185             newflavor["rxtx_factor"] = 1.0
186             newflavor["is_public"] = True
187             newflavor["disabled"] = False
188             newflavor["extra_specs"] = {}
189 
190         self.stub_out("nova.objects.Flavor.create", fake_create)
191         body = {
192             "flavor": {
193                 "name": "test",
194                 "ram": 512,
195                 "vcpus": 2,
196                 "disk": 1,
197             }
198         }
199         authorize_res, unauthorize_res = self.common_policy_auth(
200             self.all_system_authorized_contexts,
201             rule_name, self.fm_ctrl._create, req, body=body,
202             fatal=False)
203         for resp in authorize_res:
204             self.assertIn('extra_specs', resp['flavor'])
205         for resp in unauthorize_res:
206             self.assertNotIn('extra_specs', resp['flavor'])
207 
208     @mock.patch('nova.objects.Flavor.save')
209     def test_flavor_update_with_extra_specs_policy(self, mock_save):
210         fakes.stub_out_flavor_get_by_flavor_id(self)
211         rule_name = policies.POLICY_ROOT % 'index'
212         # 'update' policy is checked before flavor extra specs 'index' policy
213         # so we have to allow it for everyone otherwise it will fail first
214         # for unauthorized contexts.
215         rule = fm_policies.POLICY_ROOT % 'update'
216         self.policy.set_rules({rule: "@"}, overwrite=False)
217         req = fakes.HTTPRequest.blank('', version='2.61')
218 
219         authorize_res, unauthorize_res = self.common_policy_auth(
220             self.all_system_authorized_contexts,
221             rule_name, self.fm_ctrl._update, req, '1',
222             body={'flavor': {'description': None}},
223             fatal=False)
224         for resp in authorize_res:
225             self.assertIn('extra_specs', resp['flavor'])
226         for resp in unauthorize_res:
227             self.assertNotIn('extra_specs', resp['flavor'])
228 
229     def test_server_detail_with_extra_specs_policy(self):
230         rule = s_policies.SERVERS % 'detail'
231         # server 'detail' policy is checked before flavor extra specs 'index'
232         # policy so we have to allow it for everyone otherwise it will fail
233         # first for unauthorized contexts.
234         self.policy.set_rules({rule: "@"}, overwrite=False)
235         req = fakes.HTTPRequest.blank('', version='2.47')
236         rule_name = policies.POLICY_ROOT % 'index'
237         authorize_res, unauthorize_res = self.common_policy_auth(
238             self.all_project_authorized_contexts,
239             rule_name, self.server_ctrl.detail, req,
240             fatal=False)
241         for resp in authorize_res:
242             self.assertIn('extra_specs', resp['servers'][0]['flavor'])
243         for resp in unauthorize_res:
244             self.assertNotIn('extra_specs', resp['servers'][0]['flavor'])
245 
246     @mock.patch('nova.objects.BlockDeviceMappingList.bdms_by_instance_uuid')
247     @mock.patch('nova.compute.api.API.get_instance_host_status')
248     def test_server_show_with_extra_specs_policy(self, mock_get, mock_block):
249         rule = s_policies.SERVERS % 'show'
250         # server 'show' policy is checked before flavor extra specs 'index'
251         # policy so we have to allow it for everyone otherwise it will fail
252         # first for unauthorized contexts.
253         self.policy.set_rules({rule: "@"}, overwrite=False)
254         req = fakes.HTTPRequest.blank('', version='2.47')
255         rule_name = policies.POLICY_ROOT % 'index'
256         authorize_res, unauthorize_res = self.common_policy_auth(
257             self.all_project_authorized_contexts,
258             rule_name, self.server_ctrl.show, req, 'fake',
259             fatal=False)
260         for resp in authorize_res:
261             self.assertIn('extra_specs', resp['server']['flavor'])
262         for resp in unauthorize_res:
263             self.assertNotIn('extra_specs', resp['server']['flavor'])
264 
265     @mock.patch('nova.objects.BlockDeviceMappingList.bdms_by_instance_uuid')
266     @mock.patch('nova.compute.api.API.get_instance_host_status')
267     @mock.patch('nova.compute.api.API.rebuild')
268     def test_server_rebuild_with_extra_specs_policy(self, mock_rebuild,
269         mock_get, mock_bdm):
270         rule = s_policies.SERVERS % 'rebuild'
271         # server 'rebuild' policy is checked before flavor extra specs 'index'
272         # policy so we have to allow it for everyone otherwise it will fail
273         # first for unauthorized contexts.
274         self.policy.set_rules({rule: "@"}, overwrite=False)
275         req = fakes.HTTPRequest.blank('', version='2.47')
276         rule_name = policies.POLICY_ROOT % 'index'
277         authorize_res, unauthorize_res = self.common_policy_auth(
278             self.all_project_authorized_contexts,
279             rule_name, self.server_ctrl._action_rebuild,
280             req, self.instance.uuid,
281             body={'rebuild': {"imageRef": uuids.fake_id}},
282             fatal=False)
283         for resp in authorize_res:
284             self.assertIn('extra_specs', resp.obj['server']['flavor'])
285         for resp in unauthorize_res:
286             self.assertNotIn('extra_specs', resp.obj['server']['flavor'])
287 
288     @mock.patch('nova.compute.api.API.update_instance')
289     def test_server_update_with_extra_specs_policy(self, mock_update):
290         rule = s_policies.SERVERS % 'update'
291         # server 'update' policy is checked before flavor extra specs 'index'
292         # policy so we have to allow it for everyone otherwise it will fail
293         # first for unauthorized contexts.
294         self.policy.set_rules({rule: "@"}, overwrite=False)
295         req = fakes.HTTPRequest.blank('', version='2.47')
296         rule_name = policies.POLICY_ROOT % 'index'
297         authorize_res, unauthorize_res = self.common_policy_auth(
298             self.all_project_authorized_contexts,
299             rule_name, self.server_ctrl.update,
300             req, self.instance.uuid,
301             body={'server': {'name': 'test'}},
302             fatal=False)
303         for resp in authorize_res:
304             self.assertIn('extra_specs', resp['server']['flavor'])
305         for resp in unauthorize_res:
306             self.assertNotIn('extra_specs', resp['server']['flavor'])
307 
308 
309 class FlavorExtraSpecsScopeTypePolicyTest(FlavorExtraSpecsPolicyTest):
310     """Test Flavor Extra Specs APIs policies with system scope enabled.
311     This class set the nova.conf [oslo_policy] enforce_scope to True
312     so that we can switch on the scope checking on oslo policy side.
313     It defines the set of context with scoped token
314     which are allowed and not allowed to pass the policy checks.
315     With those set of context, it will run the API operation and
316     verify the expected behaviour.
317     """
318 
319     def setUp(self):
320         super(FlavorExtraSpecsScopeTypePolicyTest, self).setUp()
321         self.flags(enforce_scope=True, group="oslo_policy")
322 
323         # Only system users are authorized for system APIs
324         self.all_system_authorized_contexts = self.all_system_contexts
325 
326         # Only system_admin can do system admin things
327         self.admin_authorized_contexts = [self.system_admin_context]
328 
329         # Scope checking is in effect, so break apart project/system
330         # authorization. Note that even for the server tests above, we
331         # are technically authorizing against a server-embedded flavor
332         # (which has no project affiliation like the actual flavor it
333         # came from) and thus the other_project_* contexts are
334         # technically valid here. In reality, failure for
335         # other_project_* to get the server itself would prevent those
336         # projects from seeing the flavor extra_specs for it.
337         self.all_project_authorized_contexts = self.all_project_contexts
338         self.all_system_authorized_contexts = self.all_system_contexts
339 
340 
341 class FlavorExtraSpecsNoLegacyNoScopeTest(FlavorExtraSpecsPolicyTest):
342     """Test Flavor Extra Specs API policies with deprecated rules
343     disabled, but scope checking still disabled.
344     """
345     without_deprecated_rules = True
346 
347     def setUp(self):
348         super(FlavorExtraSpecsNoLegacyNoScopeTest, self).setUp()
349 
350         # Disabling legacy rules means that random roles no longer
351         # have power.
352         self.all_authorized_contexts.remove(self.system_foo_context)
353         self.all_authorized_contexts.remove(self.project_foo_context)
354         self.all_project_authorized_contexts -= set([
355             self.system_foo_context,
356             self.project_foo_context,
357         ])
358         self.all_system_authorized_contexts -= set([
359             self.system_foo_context,
360             self.project_foo_context,
361         ])
362 
363         # Disabling legacy rules means we have system_scope:all in the
364         # check string, which means we hard-fail with non-system admin
365         # contexts, even without scope checking enabled.
366         self.admin_authorized_contexts = [self.system_admin_context]
367 
368 
369 class FlavorExtraSpecsNoLegacyPolicyTest(FlavorExtraSpecsScopeTypePolicyTest):
370     """Test Flavor Extra Specs APIs policies with system scope enabled,
371     and no more deprecated rules that allow the legacy admin API to
372     access system_admin_or_owner APIs.
373     """
374     without_deprecated_rules = True
375 
376     def setUp(self):
377         super(FlavorExtraSpecsNoLegacyPolicyTest, self).setUp()
378         # Non-legacy rules do not imply random roles have any
379         # access. Same note as above, regarding other_project_*
380         # contexts.
381         self.all_authorized_contexts.remove(self.system_foo_context)
382         self.all_authorized_contexts.remove(self.project_foo_context)
383         self.all_system_authorized_contexts.remove(self.system_foo_context)
384         self.all_project_authorized_contexts.remove(self.project_foo_context)
