Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 #   Copyright 2013 Rackspace Hosting
2 #
3 #   Licensed under the Apache License, Version 2.0 (the "License"); you may
4 #   not use this file except in compliance with the License. You may obtain
5 #   a copy of the License at
6 #
7 #       http://www.apache.org/licenses/LICENSE-2.0
8 #
9 #   Unless required by applicable law or agreed to in writing, software
10 #   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 #   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 #   License for the specific language governing permissions and limitations
13 #   under the License.
14 
15 """The shelved mode extension."""
16 
17 from webob import exc
18 
19 from nova.api.openstack import common
20 from nova.api.openstack import wsgi
21 from nova import compute
22 from nova.compute import vm_states
23 from nova import exception
24 from nova.i18n import _
25 from nova import network
26 from nova.policies import shelve as shelve_policies
27 
28 
29 class ShelveController(wsgi.Controller):
30     def __init__(self, *args, **kwargs):
31         super(ShelveController, self).__init__(*args, **kwargs)
32         self.compute_api = compute.API()
33         self.network_api = network.API()
34 
35     @wsgi.response(202)
36     @wsgi.expected_errors((404, 409))
37     @wsgi.action('shelve')
38     def _shelve(self, req, id, body):
39         """Move an instance into shelved mode."""
40         context = req.environ["nova.context"]
41 
42         instance = common.get_instance(self.compute_api, context, id)
43         context.can(shelve_policies.POLICY_ROOT % 'shelve',
44                     target={'user_id': instance.user_id,
45                             'project_id': instance.project_id})
46         try:
47             self.compute_api.shelve(context, instance)
48         except exception.InstanceUnknownCell as e:
49             raise exc.HTTPNotFound(explanation=e.format_message())
50         except exception.InstanceIsLocked as e:
51             raise exc.HTTPConflict(explanation=e.format_message())
52         except exception.InstanceInvalidState as state_error:
53             common.raise_http_conflict_for_instance_invalid_state(state_error,
54                                                                   'shelve', id)
55 
56     @wsgi.response(202)
57     @wsgi.expected_errors((404, 409))
58     @wsgi.action('shelveOffload')
59     def _shelve_offload(self, req, id, body):
60         """Force removal of a shelved instance from the compute node."""
61         context = req.environ["nova.context"]
62         context.can(shelve_policies.POLICY_ROOT % 'shelve_offload')
63 
64         instance = common.get_instance(self.compute_api, context, id)
65         try:
66             self.compute_api.shelve_offload(context, instance)
67         except exception.InstanceUnknownCell as e:
68             raise exc.HTTPNotFound(explanation=e.format_message())
69         except exception.InstanceIsLocked as e:
70             raise exc.HTTPConflict(explanation=e.format_message())
71         except exception.InstanceInvalidState as state_error:
72             common.raise_http_conflict_for_instance_invalid_state(state_error,
73                                                               'shelveOffload',
74                                                               id)
75 
76     @wsgi.response(202)
77     @wsgi.expected_errors((400, 404, 409))
78     @wsgi.action('unshelve')
79     def _unshelve(self, req, id, body):
80         """Restore an instance from shelved mode."""
81         context = req.environ["nova.context"]
82         context.can(shelve_policies.POLICY_ROOT % 'unshelve')
83         instance = common.get_instance(self.compute_api, context, id)
84 
85         if (instance.vm_state == vm_states.SHELVED_OFFLOADED
86                 and common.instance_has_port_with_resource_request(
87                     context, instance.uuid, self.network_api)
88                 and not common.supports_port_resource_request_during_move(
89                     req)):
90             msg = _("The unshelve server operation on a shelve offloaded "
91                     "server with port having QoS policy is not supported.")
92             raise exc.HTTPBadRequest(explanation=msg)
93 
94         try:
95             self.compute_api.unshelve(context, instance)
96         except exception.InstanceUnknownCell as e:
97             raise exc.HTTPNotFound(explanation=e.format_message())
98         except exception.InstanceIsLocked as e:
99             raise exc.HTTPConflict(explanation=e.format_message())
100         except exception.InstanceInvalidState as state_error:
101             common.raise_http_conflict_for_instance_invalid_state(state_error,
102                                                                   'unshelve',
103                                                                   id)
