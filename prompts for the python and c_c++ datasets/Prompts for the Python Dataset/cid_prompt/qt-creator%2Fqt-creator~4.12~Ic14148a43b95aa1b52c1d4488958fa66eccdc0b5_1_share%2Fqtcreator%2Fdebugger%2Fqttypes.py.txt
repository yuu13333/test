Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 ############################################################################
2 #
3 # Copyright (C) 2016 The Qt Company Ltd.
4 # Contact: https://www.qt.io/licensing/
5 #
6 # This file is part of Qt Creator.
7 #
8 # Commercial License Usage
9 # Licensees holding valid commercial Qt licenses may use this file in
10 # accordance with the commercial license agreement provided with the
11 # Software or, alternatively, in accordance with the terms contained in
12 # a written agreement between you and The Qt Company. For licensing terms
13 # and conditions see https://www.qt.io/terms-conditions. For further
14 # information use the contact form at https://www.qt.io/contact-us.
15 #
16 # GNU General Public License Usage
17 # Alternatively, this file may be used under the terms of the GNU
18 # General Public License version 3 as published by the Free Software
19 # Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
20 # included in the packaging of this file. Please review the following
21 # information to ensure the GNU General Public License requirements will
22 # be met: https://www.gnu.org/licenses/gpl-3.0.html.
23 #
24 ############################################################################
25 
26 import platform
27 import re
28 from dumper import Children, SubItem, UnnamedSubItem, toInteger
29 from utils import DisplayFormat
30 
31 
32 def qdump__QAtomicInt(d, value):
33     d.putValue(value.integer())
34     d.putNumChild(0)
35 
36 
37 def qdump__QBasicAtomicInt(d, value):
38     d.putValue(value.integer())
39     d.putNumChild(0)
40 
41 
42 def qdump__QAtomicPointer(d, value):
43     d.putItem(value.cast(value.type[0].pointer()))
44     d.putBetterType(value.type)
45 
46 
47 def qform__QByteArray():
48     return [DisplayFormat.Latin1String, DisplayFormat.SeparateLatin1String,
49             DisplayFormat.Utf8String, DisplayFormat.SeparateUtf8String]
50 
51 
52 def qedit__QByteArray(d, value, data):
53     d.call('void', value, 'resize', str(len(data)))
54     (base, size, alloc) = d.stringData(value)
55     d.setValues(base, 'char', [ord(c) for c in data])
56 
57 
58 def qdump__QByteArray(d, value):
59     data, size, alloc = d.byteArrayData(value)
60     d.check(alloc == 0 or (0 <= size and size <= alloc and alloc <= 100000000))
61     d.putNumChild(size)
62     elided, p = d.encodeByteArrayHelper(d.extractPointer(value), d.displayStringLimit)
63     displayFormat = d.currentItemFormat()
64     if displayFormat == DisplayFormat.Automatic or displayFormat == DisplayFormat.Latin1String:
65         d.putValue(p, 'latin1', elided=elided)
66     elif displayFormat == DisplayFormat.SeparateLatin1String:
67         d.putValue(p, 'latin1', elided=elided)
68         d.putDisplay('latin1:separate', d.encodeByteArray(value, limit=100000))
69     elif displayFormat == DisplayFormat.Utf8String:
70         d.putValue(p, 'utf8', elided=elided)
71     elif displayFormat == DisplayFormat.SeparateUtf8String:
72         d.putValue(p, 'utf8', elided=elided)
73         d.putDisplay('utf8:separate', d.encodeByteArray(value, limit=100000))
74     if d.isExpanded():
75         d.putArrayData(data, size, d.charType())
76 
77 
78 def qdump__QArrayData(d, value):
79     data, size, alloc = d.byteArrayDataHelper(value.address())
80     d.check(alloc == 0 or (0 <= size and size <= alloc and alloc <= 100000000))
81     d.putValue(d.readMemory(data, size), 'latin1')
82     d.putNumChild(1)
83     d.putPlainChildren(value)
84 
85 
86 def qdump__QByteArrayData(d, value):
87     qdump__QArrayData(d, value)
88 
89 
90 def qdump__QBitArray(d, value):
91     data, basize, alloc = d.byteArrayDataHelper(d.extractPointer(value['d']))
92     unused = d.extractByte(data)
93     size = basize * 8 - unused
94     d.putItemCount(size)
95     if d.isExpanded():
96         with Children(d, size, maxNumChild=10000):
97             for i in d.childRange():
98                 q = data + 1 + int(i / 8)
99                 with SubItem(d, i):
100                     d.putValue((int(d.extractPointer(q)) >> (i % 8)) & 1)
101                     d.putType('bool')
102                     d.putNumChild(0)
103 
104 
105 def qdump__QChar(d, value):
106     d.putValue(d.extractUShort(value))
107     d.putNumChild(0)
108 
109 
110 def qform_X_QAbstractItemModel():
111     return [DisplayFormat.Simple, DisplayFormat.Enhanced]
112 
113 
114 def qdump_X_QAbstractItemModel(d, value):
115     displayFormat = d.currentItemFormat()
116     if displayFormat == DisplayFormat.Simple:
117         d.putPlainChildren(value)
118         return
119     #displayFormat == Enhanced:
120     # Create a default-constructed QModelIndex on the stack.
121     try:
122         ri = d.pokeValue(d.qtNamespace() + 'QModelIndex', '-1, -1, 0, 0')
123         this_ = d.makeExpression(value)
124         ri_ = d.makeExpression(ri)
125         rowCount = int(d.parseAndEvaluate('%s.rowCount(%s)' % (this_, ri_)))
126         columnCount = int(d.parseAndEvaluate('%s.columnCount(%s)' % (this_, ri_)))
127     except:
128         d.putPlainChildren(value)
129         return
130     d.putValue('%d x %d' % (rowCount, columnCount))
131     d.putNumChild(rowCount * columnCount)
132     if d.isExpanded():
133         with Children(d, numChild=rowCount * columnCount, childType=ri.type):
134             i = 0
135             for row in range(rowCount):
136                 for column in range(columnCount):
137                     with SubItem(d, i):
138                         d.putName('[%s, %s]' % (row, column))
139                         mi = d.parseAndEvaluate('%s.index(%d,%d,%s)'
140                                                 % (this_, row, column, ri_))
141                         d.putItem(mi)
142                         i = i + 1
143     #gdb.execute('call free($ri)')
144 
145 
146 def qform_X_QModelIndex():
147     return [DisplayFormat.Simple, DisplayFormat.Enhanced]
148 
149 
150 def qdump_X_QModelIndex(d, value):
151     displayFormat = d.currentItemFormat()
152     if displayFormat == DisplayFormat.Simple:
153         d.putPlainChildren(value)
154         return
155     r = value['r']
156     c = value['c']
157     try:
158         p = value['p']
159     except:
160         p = value['i']
161     m = value['m']
162     if m.pointer() == 0 or r < 0 or c < 0:
163         d.putValue('(invalid)')
164         d.putPlainChildren(value)
165         return
166 
167     mm = m.dereference()
168     mm = mm.cast(mm.type.unqualified())
169     ns = d.qtNamespace()
170     try:
171         mi = d.pokeValue(ns + 'QModelIndex', '%s,%s,%s,%s' % (r, c, p, m))
172         mm_ = d.makeExpression(mm)
173         mi_ = d.makeExpression(mi)
174         rowCount = int(d.parseAndEvaluate('%s.rowCount(%s)' % (mm_, mi_)))
175         columnCount = int(d.parseAndEvaluate('%s.columnCount(%s)' % (mm_, mi_)))
176     except:
177         d.putPlainChildren(value)
178         return
179 
180     try:
181         # Access DisplayRole as value
182         val = d.parseAndEvaluate('%s.data(%s, 0)' % (mm_, mi_))
183         v = val['d']['data']['ptr']
184         d.putStringValue(d.pokeValue(ns + 'QString', v))
185     except:
186         d.putValue('')
187 
188     d.putNumChild(1)
189     if d.isExpanded():
190         with Children(d):
191             d.putFields(value, False)
192             i = 0
193             for row in range(rowCount):
194                 for column in range(columnCount):
195                     with UnnamedSubItem(d, i):
196                         d.putName('[%s, %s]' % (row, column))
197                         mi2 = d.parseAndEvaluate('%s.index(%d,%d,%s)'
198                                                  % (mm_, row, column, mi_))
199                         d.putItem(mi2)
200                         i = i + 1
201             d.putCallItem('parent', '@QModelIndex', value, 'parent')
202     #gdb.execute('call free($mi)')
203 
204 
205 def qdump__Qt__ItemDataRole(d, value):
206     d.putEnumValue(value.integer(), {
207         0:      "Qt::DisplayRole",
208         1:      "Qt::DecorationRole",
209         2:      "Qt::EditRole",
210         3:      "Qt::ToolTipRole",
211         4:      "Qt::StatusTipRole",
212         5:      "Qt::WhatsThisRole",
213         6:      "Qt::FontRole",
214         7:      "Qt::TextAlignmentRole",
215         # obsolete: 8  : "Qt::BackgroundColorRole",
216         8:      "Qt::BackgroundRole",
217         # obsolete: 9  : "Qt::TextColorRole",
218         9:      "Qt::ForegroundRole",
219         10:     "Qt::CheckStateRole",
220         11:     "Qt::AccessibleTextRole",
221         12:     "Qt::AccessibleDescriptionRole",
222         13:     "Qt::SizeHintRole",
223         14:     "Qt::InitialSortOrderRole",
224         # 27-31 Qt4 ItemDataRoles
225         27:     "Qt::DisplayPropertyRole",
226         28:     "Qt::DecorationPropertyRole",
227         29:     "Qt::ToolTipPropertyRole",
228         30:     "Qt::StatusTipPropertyRole",
229         31:     "Qt::WhatsThisPropertyRole",
230         0x100:  "Qt::UserRole"
231     })
232 
233 
234 def qdump__QStandardItemData(d, value):
235     role, pad, val = value.split('{@Qt::ItemDataRole}@{QVariant}')
236     d.putPairContents(role.value(), (role, val), 'role', 'value')
237 
238 
239 def qdump__QStandardItem(d, value):
240     vtable, dptr = value.split('pp')
241     # There used to be a virtual destructor that got removed in
242     # 88b6abcebf29b455438 on Apr 18 17:01:22 2017
243     if d.qtVersion() >= 0x050900 or d.isMsvcTarget():
244         model, parent, values, children, rows, cols, item = d.split('ppPPIIp', dptr)
245     else:
246         vtable1, model, parent, values, children, rows, cols, item = d.split('pppPPIIp', dptr)
247     d.putValue(' ')
248     d.putNumChild(1)
249     if d.isExpanded():
250         with Children(d):
251             d.putSubItem('[model]', d.createValue(model, '@QStandardItemModel'))
252             d.putSubItem('[values]', d.createVectorItem(values, '@QStandardItemData'))
253             d.putSubItem('[children]', d.createVectorItem(children,
254                                                           d.createPointerType(value.type)))
255 
256 
257 def qdump__QDate(d, value):
258     jd = value.pointer()
259     if jd:
260         d.putValue(jd, 'juliandate')
261         d.putNumChild(1)
262         if d.isExpanded():
263             with Children(d):
264                 if d.canCallLocale():
265                     d.putCallItem('toString', '@QString', value, 'toString',
266                                   d.enumExpression('DateFormat', 'TextDate'))
267                     d.putCallItem('(ISO)', '@QString', value, 'toString',
268                                   d.enumExpression('DateFormat', 'ISODate'))
269                     d.putCallItem('(SystemLocale)', '@QString', value, 'toString',
270                                   d.enumExpression('DateFormat', 'SystemLocaleDate'))
271                     d.putCallItem('(Locale)', '@QString', value, 'toString',
272                                   d.enumExpression('DateFormat', 'LocaleDate'))
273                 d.putFields(value)
274     else:
275         d.putValue('(invalid)')
276         d.putNumChild(0)
277 
278 
279 def qdump__QTime(d, value):
280     mds = value.split('i')[0]
281     if mds == -1:
282         d.putValue('(invalid)')
283         d.putNumChild(0)
284         return
285     d.putValue(mds, 'millisecondssincemidnight')
286     if d.isExpanded():
287         with Children(d):
288             d.putCallItem('toString', '@QString', value, 'toString',
289                           d.enumExpression('DateFormat', 'TextDate'))
290             d.putCallItem('(ISO)', '@QString', value, 'toString',
291                           d.enumExpression('DateFormat', 'ISODate'))
292             if d.canCallLocale():
293                 d.putCallItem('(SystemLocale)', '@QString', value, 'toString',
294                               d.enumExpression('DateFormat', 'SystemLocaleDate'))
295                 d.putCallItem('(Locale)', '@QString', value, 'toString',
296                               d.enumExpression('DateFormat', 'LocaleDate'))
297             d.putFields(value)
298 
299 
300 def qdump__QTimeZone(d, value):
301     base = d.extractPointer(value)
302     if base == 0:
303         d.putValue('(null)')
304         d.putNumChild(0)
305         return
306     idAddr = base + 2 * d.ptrSize()  # [QSharedData] + [vptr]
307     d.putByteArrayValue(idAddr)
308     d.putPlainChildren(value['d'])
309 
310 
311 def qdump__QDateTime(d, value):
312     qtVersion = d.qtVersion()
313     isValid = False
314     # This relies on the Qt4/Qt5 internal structure layout:
315     # {sharedref(4), ...
316     base = d.extractPointer(value)
317     is32bit = d.ptrSize() == 4
318     if qtVersion >= 0x050200:
319         tiVersion = d.qtTypeInfoVersion()
320         #DumperBase.warn('TI VERSION: %s' % tiVersion)
321         if tiVersion is None:
322             tiVersion = 4
323         if tiVersion > 10:
324             status = d.extractByte(value)
325             #DumperBase.warn('STATUS: %s' % status)
326             if status & 0x01:
327                 # Short data
328                 msecs = d.extractUInt64(value) >> 8
329                 spec = (status & 0x30) >> 4
330                 offsetFromUtc = 0
331                 timeZone = 0
332                 isValid = status & 0x08
333             else:
334                 dptr = d.extractPointer(value)
335                 (msecs, status, offsetFromUtc, ref, timeZone) = d.split('qIIIp', dptr)
336                 spec = (status & 0x30) >> 4
337                 isValid = True
338 
339             d.putValue(
340                 '%s/%s/%s/%s/%s/%s' %
341                 (msecs,
342                  spec,
343                  offsetFromUtc,
344                  timeZone,
345                  status,
346                  tiVersion),
347                 'datetimeinternal')
348         else:
349             if d.isWindowsTarget():
350                 msecsOffset = 8
351                 specOffset = 16
352                 offsetFromUtcOffset = 20
353                 timeZoneOffset = 24
354                 statusOffset = 28 if is32bit else 32
355             else:
356                 msecsOffset = 4 if is32bit else 8
357                 specOffset = 12 if is32bit else 16
358                 offsetFromUtcOffset = 16 if is32bit else 20
359                 timeZoneOffset = 20 if is32bit else 24
360                 statusOffset = 24 if is32bit else 32
361             status = d.extractInt(base + statusOffset)
362             if int(status & 0x0c == 0x0c):  # ValidDate and ValidTime
363                 isValid = True
364                 msecs = d.extractInt64(base + msecsOffset)
365                 spec = d.extractInt(base + specOffset)
366                 offset = d.extractInt(base + offsetFromUtcOffset)
367                 tzp = d.extractPointer(base + timeZoneOffset)
368                 if tzp == 0:
369                     tz = ''
370                 else:
371                     idBase = tzp + 2 * d.ptrSize()  # [QSharedData] + [vptr]
372                     elided, tz = d.encodeByteArrayHelper(d.extractPointer(idBase), limit=100)
373                 d.putValue('%s/%s/%s/%s/%s/%s' % (msecs, spec, offset, tz, status, 0),
374                            'datetimeinternal')
375     else:
376         # This relies on the Qt4/Qt5 internal structure layout:
377         # {sharedref(4), date(8), time(4+x)}
378         # QDateTimePrivate:
379         # - QAtomicInt ref;    (padded on 64 bit)
380         # -     [QDate date;]
381         # -      -  uint jd in Qt 4,  qint64 in Qt 5.0 and Qt 5.1; padded on 64 bit
382         # -     [QTime time;]
383         # -      -  uint mds;
384         # -  Spec spec;
385         dateSize = 8 if qtVersion >= 0x050000 else 4  # Qt5: qint64, Qt4 uint
386         # 4 byte padding after 4 byte QAtomicInt if we are on 64 bit and QDate is 64 bit
387         refPlusPadding = 8 if qtVersion >= 0x050000 and d.ptrSize() == 8 else 4
388         dateBase = base + refPlusPadding
389         timeBase = dateBase + dateSize
390         mds = d.extractInt(timeBase)
391         isValid = mds > 0
392         if isValid:
393             jd = d.extractInt(dateBase)
394             d.putValue('%s/%s' % (jd, mds), 'juliandateandmillisecondssincemidnight')
395 
396     if not isValid:
397         d.putValue('(invalid)')
398         d.putNumChild(0)
399         return
400 
401     d.putNumChild(1)
402     if d.isExpanded():
403         with Children(d):
404             d.putCallItem('toTime_t', 'unsigned int', value, 'toTime_t')
405             if d.canCallLocale():
406                 d.putCallItem('toString', '@QString', value, 'toString',
407                               d.enumExpression('DateFormat', 'TextDate'))
408                 d.putCallItem('(ISO)', '@QString', value, 'toString',
409                               d.enumExpression('DateFormat', 'ISODate'))
410                 d.putCallItem('toUTC', '@QDateTime', value, 'toTimeSpec',
411                               d.enumExpression('TimeSpec', 'UTC'))
412                 d.putCallItem('(SystemLocale)', '@QString', value, 'toString',
413                               d.enumExpression('DateFormat', 'SystemLocaleDate'))
414                 d.putCallItem('(Locale)', '@QString', value, 'toString',
415                               d.enumExpression('DateFormat', 'LocaleDate'))
416                 d.putCallItem('toLocalTime', '@QDateTime', value, 'toTimeSpec',
417                               d.enumExpression('TimeSpec', 'LocalTime'))
418             d.putFields(value)
419 
420 
421 def qdump__QDir(d, value):
422     d.putNumChild(1)
423     privAddress = d.extractPointer(value)
424     bit32 = d.ptrSize() == 4
425     qt5 = d.qtVersion() >= 0x050000
426 
427     # Change 9fc0965 reorders members again.
428     #   bool fileListsInitialized
429     #   QStringList files
430     #   QFileInfoList fileInfos
431     #   QStringList nameFilters
432     #   QDir::SortFlags sort
433     #   QDir::Filters filters
434 
435     # Before 9fc0965:
436     # QDirPrivate:
437     #   QAtomicInt ref
438     #   QStringList nameFilters;
439     #   QDir::SortFlags sort;
440     #   QDir::Filters filters;
441     #   // qt3support:
442     #   QChar filterSepChar;
443     #   bool matchAllDirs;
444     #   // end qt3support
445     #   QScopedPointer<QAbstractFileEngine> fileEngine;
446     #   bool fileListsInitialized;
447     #   QStringList files;
448     #   QFileInfoList fileInfos;
449     #   QFileSystemEntry dirEntry;
450     #   QFileSystemEntry absoluteDirEntry;
451 
452     # QFileSystemEntry:
453     #   QString m_filePath
454     #   QByteArray m_nativeFilePath
455     #   qint16 m_lastSeparator
456     #   qint16 m_firstDotInFileName
457     #   qint16 m_lastDotInFileName
458     #   + 2 byte padding
459     fileSystemEntrySize = 2 * d.ptrSize() + 8
460 
461     if d.qtVersion() < 0x050200:
462         case = 0
463     elif d.qtVersion() >= 0x050300:
464         case = 1
465     else:
466         # Try to distinguish bool vs QStringList at the first item
467         # after the (padded) refcount. If it looks like a bool assume
468         # this is after 9fc0965. This is not safe.
469         firstValue = d.extractInt(privAddress + d.ptrSize())
470         case = 1 if firstValue == 0 or firstValue == 1 else 0
471 
472     if case == 1:
473         if bit32:
474             filesOffset = 4
475             fileInfosOffset = 8
476             dirEntryOffset = 0x20
477             absoluteDirEntryOffset = 0x30
478         else:
479             filesOffset = 0x08
480             fileInfosOffset = 0x10
481             dirEntryOffset = 0x30
482             absoluteDirEntryOffset = 0x48
483     else:
484         # Assume this is before 9fc0965.
485         qt3support = d.isQt3Support()
486         qt3SupportAddition = d.ptrSize() if qt3support else 0
487         filesOffset = (24 if bit32 else 40) + qt3SupportAddition
488         fileInfosOffset = filesOffset + d.ptrSize()
489         dirEntryOffset = fileInfosOffset + d.ptrSize()
490         absoluteDirEntryOffset = dirEntryOffset + fileSystemEntrySize
491 
492     d.putStringValue(privAddress + dirEntryOffset)
493     if d.isExpanded():
494         with Children(d):
495             if not d.isMsvcTarget():
496                 ns = d.qtNamespace()
497                 try:
498                     d.call('int', value, 'count')  # Fill cache.
499                 except:
500                     pass
501                 #d.putCallItem('absolutePath', '@QString', value, 'absolutePath')
502                 #d.putCallItem('canonicalPath', '@QString', value, 'canonicalPath')
503                 with SubItem(d, 'absolutePath'):
504                     typ = d.lookupType(ns + 'QString')
505                     d.putItem(d.createValue(privAddress + absoluteDirEntryOffset, typ))
506                 with SubItem(d, 'entryInfoList'):
507                     typ = d.lookupType(ns + 'QFileInfo')
508                     qdumpHelper_QList(d, privAddress + fileInfosOffset, typ)
509                 with SubItem(d, 'entryList'):
510                     typ = d.lookupType(ns + 'QStringList')
511                     d.putItem(d.createValue(privAddress + filesOffset, typ))
512             d.putFields(value)
513 
514 
515 def qdump__QEvent(d, value):
516     d.putNumChild(1)
517     if d.isExpanded():
518         with Children(d):
519             # Add a sub-item with the event type.
520             with SubItem(d, '[type]'):
521                 (vtable, privateD, t, flags) = value.split("pp{short}{short}")
522                 event_type_name = d.qtNamespace() + "QEvent::Type"
523                 type_value = t.cast(event_type_name)
524                 d.putValue(type_value.displayEnum('0x%04x', bitsize=16))
525                 d.putType(event_type_name)
526                 d.putNumChild(0)
527 
528             # Show the rest of the class fields as usual.
529             d.putFields(value)
530 
531 
532 def qdump__QKeyEvent(d, value):
533     # QEvent fields
534     #   virtual table pointer
535     #   QEventPrivate *d;
536     #   ushort t;
537     #   ushort posted : 1;
538     #   ushort spont : 1;
539     #   ushort m_accept : 1;
540     #   ushort reserved : 13;
541     # QInputEvent fields
542     #   Qt::KeyboardModifiers modState;
543     #   ulong ts;
544     # QKeyEvent fields
545     #   QString txt;
546     #   int k;
547     #   quint32 nScanCode;
548     #   quint32 nVirtualKey;
549     #   quint32 nModifiers; <- nativeModifiers
550     #   ushort c;
551     #   ushort autor:1;
552     #   ushort reserved:15;
553     (vtable, privateD, t, flags, modState, ts, txt, k, scanCode,
554      virtualKey, modifiers,
555      c, autor) = value.split("ppHHiQ{QString}{int}IIIHH")
556 
557     #d.putStringValue(txt)
558     #data = d.encodeString(txt)
559     key_txt_utf8 = d.encodeStringUtf8(txt)
560 
561     k_type_name = d.qtNamespace() + "Qt::Key"
562     k_cast_to_enum_value = k.cast(k_type_name)
563     k_name = k_cast_to_enum_value.displayEnum(bitsize=32)
564     matches = re.search(r'Key_(\w+)', k_name)
565     if matches:
566         k_name = matches.group(1)
567 
568     if t == 6:
569         key_event_type = "Pressed"
570     elif t == 7:
571         key_event_type = "Released"
572     else:
573         key_event_type = ""
574 
575     data = ""
576 
577     if key_event_type:
578         data += "{} ".format(key_event_type)
579 
580     # Try to use the name of the enum value, otherwise the value
581     # of txt in QKeyEvent.
582     if k_name:
583         data += "'{}'".format(k_name)
584     elif key_txt_utf8:
585         data += "'{}'".format(key_txt_utf8)
586     else:
587         data += "<non-ascii>"
588 
589     k_int = k.integer()
590     data += " (key:{} vKey:{}".format(k_int, virtualKey)
591 
592     modifier_list = []
593     modifier_list.append(("Shift", 0x02000000))
594     modifier_list.append(("Control", 0x04000000))
595     modifier_list.append(("Alt", 0x08000000))
596     modifier_list.append(("Meta", 0x10000000))
597     # modifier_map.append(("KeyPad", 0x20000000)) Is this useful?
598     modifier_list.append(("Grp", 0x40000000))
599 
600     modifiers = []
601     for modifier_name, mask in modifier_list:
602         if modState & mask:
603             modifiers.append(modifier_name)
604 
605     if modifiers:
606         data += " mods:" + "+".join(modifiers)
607 
608     data += ")"
609 
610     d.putValue(d.hexencode(data), 'utf8')
611 
612     d.putNumChild(1)
613     if d.isExpanded():
614         with Children(d):
615             # Add a sub-item with the enum name and value.
616             with SubItem(d, '[{}]'.format(k_type_name)):
617                 k_cast_to_enum_value = k.cast(k_type_name)
618                 d.putValue(k_cast_to_enum_value.displayEnum('0x%04x', bitsize=32))
619                 d.putType(k_type_name)
620                 d.putNumChild(0)
621 
622             # Show the rest of the class fields as usual.
623             d.putFields(value, dumpBase=True)
624 
625 
626 def qdump__QFile(d, value):
627     # 9fc0965 and a373ffcd change the layout of the private structure
628     qtVersion = d.qtVersion()
629     is32bit = d.ptrSize() == 4
630     if qtVersion >= 0x050600 and d.qtTypeInfoVersion() >= 17:
631         # Some QRingBuffer member got removed in 8f92baf5c9
632         if d.isWindowsTarget():
633             if d.isMsvcTarget():
634                 offset = 164 if is32bit else 224
635             else:
636                 offset = 160 if is32bit else 224
637         else:
638             offset = 156 if is32bit else 224
639     elif qtVersion >= 0x050700:
640         if d.isWindowsTarget():
641             if d.isMsvcTarget():
642                 offset = 176 if is32bit else 248
643             else:
644                 offset = 172 if is32bit else 248
645         else:
646             offset = 168 if is32bit else 248
647     elif qtVersion >= 0x050600:
648         if d.isWindowsTarget():
649             if d.isMsvcTarget():
650                 offset = 184 if is32bit else 248
651             else:
652                 offset = 180 if is32bit else 248
653         else:
654             offset = 168 if is32bit else 248
655     elif qtVersion >= 0x050500:
656         if d.isWindowsTarget():
657             offset = 164 if is32bit else 248
658         else:
659             offset = 164 if is32bit else 248
660     elif qtVersion >= 0x050400:
661         if d.isWindowsTarget():
662             offset = 188 if is32bit else 272
663         else:
664             offset = 180 if is32bit else 272
665     elif qtVersion > 0x050200:
666         if d.isWindowsTarget():
667             offset = 180 if is32bit else 272
668         else:
669             offset = 176 if is32bit else 272
670     elif qtVersion >= 0x050000:
671         offset = 176 if is32bit else 280
672     else:
673         if d.isWindowsTarget():
674             offset = 144 if is32bit else 232
675         else:
676             offset = 140 if is32bit else 232
677     vtable, privAddress = value.split('pp')
678     fileNameAddress = privAddress + offset
679     d.putStringValue(fileNameAddress)
680     d.putNumChild(1)
681     if d.isExpanded():
682         with Children(d):
683             d.putCallItem('exists', 'bool', value, 'exists')
684             d.putFields(value)
685 
686 
687 def qdump__QFileInfo(d, value):
688     privAddress = d.extractPointer(value)
689     #bit32 = d.ptrSize() == 4
690     #qt5 = d.qtVersion() >= 0x050000
691     #try:
692     #    d.putStringValue(value['d_ptr']['d'].dereference()['fileNames'][3])
693     #except:
694     #    d.putPlainChildren(value)
695     #    return
696     filePathAddress = privAddress + d.ptrSize()
697     d.putStringValue(filePathAddress)
698     d.putNumChild(1)
699     if d.isExpanded():
700         ns = d.qtNamespace()
701         with Children(d):
702             stype = '@QString'
703             d.putCallItem('absolutePath', stype, value, 'absolutePath')
704             d.putCallItem('absoluteFilePath', stype, value, 'absoluteFilePath')
705             d.putCallItem('canonicalPath', stype, value, 'canonicalPath')
706             d.putCallItem('canonicalFilePath', stype, value, 'canonicalFilePath')
707             d.putCallItem('completeBaseName', stype, value, 'completeBaseName')
708             d.putCallItem('completeSuffix', stype, value, 'completeSuffix')
709             d.putCallItem('baseName', stype, value, 'baseName')
710             if platform.system() == 'Darwin':
711                 d.putCallItem('isBundle', stype, value, 'isBundle')
712                 d.putCallItem('bundleName', stype, value, 'bundleName')
713             d.putCallItem('fileName', stype, value, 'fileName')
714             d.putCallItem('filePath', stype, value, 'filePath')
715             # Crashes gdb (archer-tromey-python, at dad6b53fe)
716             #d.putCallItem('group', value, 'group')
717             #d.putCallItem('owner', value, 'owner')
718             d.putCallItem('path', stype, value, 'path')
719 
720             d.putCallItem('groupid', 'unsigned int', value, 'groupId')
721             d.putCallItem('ownerid', 'unsigned int', value, 'ownerId')
722 
723             #QFile::Permissions permissions () const
724             try:
725                 perms = d.call('int', value, 'permissions')
726             except:
727                 perms = None
728 
729             if perms is None:
730                 with SubItem(d, 'permissions'):
731                     d.putSpecialValue('notcallable')
732                     d.putType(ns + 'QFile::Permissions')
733                     d.putNumChild(0)
734             else:
735                 with SubItem(d, 'permissions'):
736                     d.putEmptyValue()
737                     d.putType(ns + 'QFile::Permissions')
738                     d.putNumChild(10)
739                     if d.isExpanded():
740                         with Children(d, 10):
741                             perms = perms['i']
742                             d.putBoolItem('ReadOwner',  perms & 0x4000)
743                             d.putBoolItem('WriteOwner', perms & 0x2000)
744                             d.putBoolItem('ExeOwner',   perms & 0x1000)
745                             d.putBoolItem('ReadUser',   perms & 0x0400)
746                             d.putBoolItem('WriteUser',  perms & 0x0200)
747                             d.putBoolItem('ExeUser',    perms & 0x0100)
748                             d.putBoolItem('ReadGroup',  perms & 0x0040)
749                             d.putBoolItem('WriteGroup', perms & 0x0020)
750                             d.putBoolItem('ExeGroup',   perms & 0x0010)
751                             d.putBoolItem('ReadOther',  perms & 0x0004)
752                             d.putBoolItem('WriteOther', perms & 0x0002)
753                             d.putBoolItem('ExeOther',   perms & 0x0001)
754 
755             #QDir absoluteDir () const
756             #QDir dir () const
757             d.putCallItem('caching', 'bool', value, 'caching')
758             d.putCallItem('exists', 'bool', value, 'exists')
759             d.putCallItem('isAbsolute', 'bool', value, 'isAbsolute')
760             d.putCallItem('isDir', 'bool', value, 'isDir')
761             d.putCallItem('isExecutable', 'bool', value, 'isExecutable')
762             d.putCallItem('isFile', 'bool', value, 'isFile')
763             d.putCallItem('isHidden', 'bool', value, 'isHidden')
764             d.putCallItem('isReadable', 'bool', value, 'isReadable')
765             d.putCallItem('isRelative', 'bool', value, 'isRelative')
766             d.putCallItem('isRoot', 'bool', value, 'isRoot')
767             d.putCallItem('isSymLink', 'bool', value, 'isSymLink')
768             d.putCallItem('isWritable', 'bool', value, 'isWritable')
769             d.putCallItem('created', 'bool', value, 'created')
770             d.putCallItem('lastModified', 'bool', value, 'lastModified')
771             d.putCallItem('lastRead', 'bool', value, 'lastRead')
772             d.putFields(value)
773 
774 
775 def qdump__QFixed(d, value):
776     v = value.split('i')[0]
777     d.putValue('%s/64 = %s' % (v, v / 64.0))
778     d.putNumChild(0)
779 
780 
781 def qform__QFiniteStack():
782     return [DisplayFormat.ArrayPlot]
783 
784 
785 def qdump__QFiniteStack(d, value):
786     array, alloc, size = value.split('pii')
787     d.check(0 <= size and size <= alloc and alloc <= 1000 * 1000 * 1000)
788     d.putItemCount(size)
789     d.putPlotData(array, size, value.type[0])
790 
791 
792 def qdump__QFlags(d, value):
793     i = value.split('{int}')[0]
794     enumType = value.type[0]
795     v = i.cast(enumType.name)
796     d.putValue(v.displayEnum('0x%04x', bitsize=32))
797     d.putNumChild(0)
798 
799 
800 def qform__QHash():
801     return [DisplayFormat.CompactMap]
802 
803 
804 def qdump__QHash(d, value):
805     qdumpHelper_QHash(d, value, value.type[0], value.type[1])
806 
807 
808 def qdump__QVariantHash(d, value):
809     qdumpHelper_QHash(d, value, d.createType('QString'), d.createType('QVariant'))
810 
811 
812 def qdumpHelper_QHash(d, value, keyType, valueType):
813     def hashDataFirstNode():
814         b = buckets
815         n = numBuckets
816         while n:
817             n -= 1
818             bb = d.extractPointer(b)
819             if bb != dptr:
820                 return bb
821             b += ptrSize
822         return dptr
823 
824     def hashDataNextNode(node):
825         (nextp, h) = d.split('pI', node)
826         if d.extractPointer(nextp):
827             return nextp
828         start = (h % numBuckets) + 1
829         b = buckets + start * ptrSize
830         n = numBuckets - start
831         while n:
832             n -= 1
833             bb = d.extractPointer(b)
834             if bb != nextp:
835                 return bb
836             b += ptrSize
837         return nextp
838 
839     ptrSize = d.ptrSize()
840     dptr = d.extractPointer(value)
841     (fakeNext, buckets, ref, size, nodeSize, userNumBits, numBits, numBuckets) = \
842         d.split('ppiiihhi', dptr)
843 
844     d.check(0 <= size and size <= 100 * 1000 * 1000)
845     d.check(-1 <= ref and ref < 100000)
846 
847     d.putItemCount(size)
848     if d.isExpanded():
849         isShort = d.qtVersion() < 0x050000 and keyType.name == 'int'
850         with Children(d, size):
851             node = hashDataFirstNode()
852             for i in d.childRange():
853                 if isShort:
854                     typeCode = 'P{%s}@{%s}' % (keyType.name, valueType.name)
855                     (pnext, key, padding2, val) = d.split(typeCode, node)
856                 else:
857                     typeCode = 'Pi@{%s}@{%s}' % (keyType.name, valueType.name)
858                     (pnext, hashval, padding1, key, padding2, val) = d.split(typeCode, node)
859                 d.putPairItem(i, (key, val), 'key', 'value')
860                 node = hashDataNextNode(node)
861 
862 
863 def qform__QHashNode():
864     return [DisplayFormat.CompactMap]
865 
866 
867 def qdump__QHashNode(d, value):
868     d.putPairItem(None, value)
869 
870 
871 def qHashIteratorHelper(d, value):
872     typeName = value.type.name
873     hashTypeName = typeName[0:typeName.rfind('::')]
874     hashType = d.lookupType(hashTypeName)
875     keyType = hashType[0]
876     valueType = hashType[1]
877     d.putNumChild(1)
878     d.putEmptyValue()
879     if d.isExpanded():
880         with Children(d):
881             node = d.extractPointer(value)
882             isShort = d.qtVersion() < 0x050000 and keyType.name == 'int'
883             if isShort:
884                 typeCode = 'P{%s}@{%s}' % (keyType.name, valueType.name)
885                 (pnext, key, padding2, val) = d.split(typeCode, node)
886             else:
887                 typeCode = 'Pi@{%s}@{%s}' % (keyType.name, valueType.name)
888                 (pnext, hashval, padding1, key, padding2, val) = d.split(typeCode, node)
889             d.putSubItem('key', key)
890             d.putSubItem('value', val)
891 
892 
893 def qdump__QHash__const_iterator(d, value):
894     qHashIteratorHelper(d, value)
895 
896 
897 def qdump__QHash__iterator(d, value):
898     qHashIteratorHelper(d, value)
899 
900 
901 def qdump__QHostAddress(d, value):
902     dd = d.extractPointer(value)
903     qtVersion = d.qtVersion()
904     tiVersion = d.qtTypeInfoVersion()
905     #DumperBase.warn('QT: %x, TI: %s' % (qtVersion, tiVersion))
906     mayNeedParse = True
907     if tiVersion is not None:
908         if tiVersion >= 16:
909             # After a6cdfacf
910             p, scopeId, a6, a4, protocol = d.split('p{QString}16s{quint32}B', dd)
911             mayNeedParse = False
912         elif tiVersion >= 5:
913             # Branch 5.8.0 at f70b4a13  TI: 15
914             # Branch 5.7.0 at b6cf0418  TI: 5
915             (ipString, scopeId, a6, a4, protocol, isParsed) \
916                 = d.split('{QString}{QString}16s{quint32}B{bool}', dd)
917         else:
918             (ipString, scopeId, a4, pad, a6, protocol, isParsed) \
919                 = d.split('{QString}{QString}{quint32}I16sI{bool}', dd)
920     elif qtVersion >= 0x050600:  # 5.6.0 at f3aabb42
921         if d.ptrSize() == 8 or d.isWindowsTarget():
922             (ipString, scopeId, a4, pad, a6, protocol, isParsed) \
923                 = d.split('{QString}{QString}{quint32}I16sI{bool}', dd)
924         else:
925             (ipString, scopeId, a4, a6, protocol, isParsed) \
926                 = d.split('{QString}{QString}{quint32}16sI{bool}', dd)
927     elif qtVersion >= 0x050000:  # 5.2.0 at 62feb088
928         (ipString, scopeId, a4, a6, protocol, isParsed) \
929             = d.split('{QString}{QString}{quint32}16sI{bool}', dd)
930     else:  # 4.8.7 at b05d05f
931         (a4, a6, protocol, pad, ipString, isParsed, pad, scopeId) \
932             = d.split('{quint32}16sB@{QString}{bool}@{QString}', dd)
933 
934     if mayNeedParse:
935         ipStringData, ipStringSize, ipStringAlloc = d.stringData(ipString)
936     if mayNeedParse and isParsed.integer() and ipStringSize > 0:
937         d.putStringValue(ipString)
938     else:
939         # value.d.d->protocol:
940         #  QAbstractSocket::IPv4Protocol = 0
941         #  QAbstractSocket::IPv6Protocol = 1
942         if protocol == 1:
943             # value.d.d->a6
944             data = d.hexencode(a6)
945             address = ':'.join('%x' % int(data[i:i + 4], 16) for i in range(0, 32, 4))
946             d.putValue(address)
947         elif protocol == 0:
948             # value.d.d->a
949             a = a4.integer()
950             a, n4 = divmod(a, 256)
951             a, n3 = divmod(a, 256)
952             a, n2 = divmod(a, 256)
953             a, n1 = divmod(a, 256)
954             d.putValue('%d.%d.%d.%d' % (n1, n2, n3, n4))
955         else:
956             d.putValue('<unspecified protocol %s>' % protocol)
957 
958     d.putNumChild(4)
959     if d.isExpanded():
960         with Children(d):
961             if mayNeedParse:
962                 d.putSubItem('ipString', ipString)
963                 d.putSubItem('isParsed', isParsed)
964             d.putSubItem('scopeId', scopeId)
965             d.putSubItem('a', a4)
966 
967 
968 def qdump__QIPv6Address(d, value):
969     raw = d.split('16s', value)[0]
970     data = d.hexencode(raw)
971     d.putValue(':'.join('%x' % int(data[i:i + 4], 16) for i in range(0, 32, 4)))
972     d.putArrayData(value.address(), 16, d.lookupType('unsigned char'))
973 
974 
975 def qform__QList():
976     return [DisplayFormat.DirectQListStorage, DisplayFormat.IndirectQListStorage]
977 
978 
979 def qdump__QList(d, value):
980     return qdumpHelper_QList(d, value, value.type[0])
981 
982 
983 def qdump__QVariantList(d, value):
984     qdumpHelper_QList(d, value, d.createType('QVariant'))
985 
986 
987 def qdumpHelper_QList(d, value, innerType):
988     base = d.extractPointer(value)
989     (ref, alloc, begin, end) = d.split('IIII', base)
990     array = base + 16
991     if d.qtVersion() < 0x50000:
992         array += d.ptrSize()
993     d.check(begin >= 0 and end >= 0 and end <= 1000 * 1000 * 1000)
994     size = end - begin
995     d.check(size >= 0)
996     #d.checkRef(private['ref'])
997 
998     d.putItemCount(size)
999     if d.isExpanded():
1000         innerSize = innerType.size()
1001         stepSize = d.ptrSize()
1002         addr = array + begin * stepSize
1003         # The exact condition here is:
1004         #  QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic
1005         # but this data is available neither in the compiled binary nor
1006         # in the frontend.
1007         # So as first approximation only do the 'isLarge' check:
1008         displayFormat = d.currentItemFormat()
1009         if displayFormat == DisplayFormat.DirectQListStorage:
1010             isInternal = True
1011         elif displayFormat == DisplayFormat.IndirectQListStorage:
1012             isInternal = False
1013         else:
1014             isInternal = innerSize <= stepSize and innerType.isMovableType()
1015         if isInternal:
1016             if innerSize == stepSize:
1017                 d.putArrayData(addr, size, innerType)
1018             else:
1019                 with Children(d, size, childType=innerType):
1020                     for i in d.childRange():
1021                         p = d.createValue(addr + i * stepSize, innerType)
1022                         d.putSubItem(i, p)
1023         else:
1024             # about 0.5s / 1000 items
1025             with Children(d, size, maxNumChild=2000, childType=innerType):
1026                 for i in d.childRange():
1027                     p = d.extractPointer(addr + i * stepSize)
1028                     x = d.createValue(p, innerType)
1029                     d.putSubItem(i, x)
1030 
1031 
1032 def qform__QImage():
1033     return [DisplayFormat.Simple, DisplayFormat.Separate]
1034 
1035 
1036 def qdump__QImage(d, value):
1037     if d.qtVersion() < 0x050000:
1038         (vtbl, painters, imageData) = value.split('ppp')
1039     else:
1040         (vtbl, painters, reserved, imageData) = value.split('pppp')
1041 
1042     if imageData == 0:
1043         d.putValue('(invalid)')
1044         return
1045 
1046     (ref, width, height, depth, nbytes, padding, devicePixelRatio, colorTable,
1047         bits, iformat) = d.split('iiiii@dppi', imageData)
1048 
1049     d.putValue('(%dx%d)' % (width, height))
1050     d.putNumChild(1)
1051     if d.isExpanded():
1052         with Children(d):
1053             d.putIntItem('width', width)
1054             d.putIntItem('height', height)
1055             d.putIntItem('nbytes', nbytes)
1056             d.putIntItem('format', iformat)
1057             with SubItem(d, 'data'):
1058                 d.putValue('0x%x' % bits)
1059                 d.putNumChild(0)
1060                 d.putType('void *')
1061 
1062     displayFormat = d.currentItemFormat()
1063     if displayFormat == DisplayFormat.Separate:
1064         d.putDisplay('imagedata:separate', '%08x%08x%08x%08x' % (width, height, nbytes, iformat)
1065                      + d.readMemory(bits, nbytes))
1066 
1067 
1068 def qdump__QLinkedList(d, value):
1069     dd = d.extractPointer(value)
1070     ptrSize = d.ptrSize()
1071     n = d.extractInt(dd + 4 + 2 * ptrSize)
1072     ref = d.extractInt(dd + 2 * ptrSize)
1073     d.check(0 <= n and n <= 100 * 1000 * 1000)
1074     d.check(-1 <= ref and ref <= 1000)
1075     d.putItemCount(n)
1076     if d.isExpanded():
1077         innerType = value.type[0]
1078         with Children(d, n, maxNumChild=1000, childType=innerType):
1079             pp = d.extractPointer(dd)
1080             for i in d.childRange():
1081                 d.putSubItem(i, d.createValue(pp + 2 * ptrSize, innerType))
1082                 pp = d.extractPointer(pp)
1083 
1084 
1085 qqLocalesCount = None
1086 
1087 
1088 def qdump__QLocale(d, value):
1089     # Check for uninitialized 'index' variable. Retrieve size of
1090     # QLocale data array from variable in qlocale.cpp.
1091     # Default is 368 in Qt 4.8, 438 in Qt 5.0.1, the last one
1092     # being 'System'.
1093     #global qqLocalesCount
1094     #if qqLocalesCount is None:
1095     #    #try:
1096     #        qqLocalesCount = int(value(ns + 'locale_data_size'))
1097     #    #except:
1098     #        qqLocalesCount = 438
1099     #try:
1100     #    index = int(value['p']['index'])
1101     #except:
1102     #    try:
1103     #        index = int(value['d']['d']['m_index'])
1104     #    except:
1105     #        index = int(value['d']['d']['m_data']...)
1106     #d.check(index >= 0)
1107     #d.check(index <= qqLocalesCount)
1108     if d.qtVersion() < 0x50000:
1109         d.putStringValue(d.call('const char *', value, 'name'))
1110         d.putPlainChildren(value)
1111         return
1112 
1113     ns = d.qtNamespace()
1114     dd = value.extractPointer()
1115     (data, ref, numberOptions) = d.split('pi4s', dd)
1116     (languageId, scriptId, countryId,
1117      decimal, group, listt, percent, zero,
1118      minus, plus, exponential) \
1119         = d.split('2s{short}2s'
1120                   + '{QChar}{QChar}{short}{QChar}{QChar}'
1121                   + '{QChar}{QChar}{QChar}', data)
1122     try:
1123         name = d.call('const char *', value, 'name')
1124     except:
1125         name = ''
1126     d.putStringValue(name)
1127     d.putNumChild(1)
1128     if d.isExpanded():
1129         with Children(d):
1130             prefix = ns + 'QLocale::'
1131             d.putSubItem('country', d.createValue(countryId, prefix + 'Country'))
1132             d.putSubItem('language', d.createValue(languageId, prefix + 'Language'))
1133             d.putSubItem('numberOptions', d.createValue(numberOptions, prefix + 'NumberOptions'))
1134             d.putSubItem('decimalPoint', decimal)
1135             d.putSubItem('exponential', exponential)
1136             d.putSubItem('percent', percent)
1137             d.putSubItem('zeroDigit', zero)
1138             d.putSubItem('groupSeparator', group)
1139             d.putSubItem('negativeSign', minus)
1140             d.putSubItem('positiveSign', plus)
1141             d.putCallItem('measurementSystem', '@QLocale::MeasurementSystem',
1142                           value, 'measurementSystem')
1143             d.putCallItem('timeFormat_(short)', '@QString',
1144                           value, 'timeFormat', ns + 'QLocale::ShortFormat')
1145             d.putCallItem('timeFormat_(long)', '@QString',
1146                           value, 'timeFormat', ns + 'QLocale::LongFormat')
1147             d.putFields(value)
1148 
1149 
1150 def qdump__QMapNode(d, value):
1151     d.putEmptyValue()
1152     d.putNumChild(2)
1153     if d.isExpanded():
1154         with Children(d):
1155             d.putSubItem('key', value['key'])
1156             d.putSubItem('value', value['value'])
1157 
1158 
1159 def qdumpHelper_Qt4_QMap(d, value, keyType, valueType):
1160     dd = value.extractPointer()
1161     (dummy, it, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11,
1162         ref, toplevel, n) = d.split('p' * 13 + 'iii', dd)
1163     d.check(0 <= n and n <= 100 * 1000 * 1000)
1164     d.checkRef(ref)
1165     d.putItemCount(n)
1166     if d.isExpanded():
1167         if n > 10000:
1168             n = 10000
1169 
1170         typeCode = '{%s}@{%s}' % (keyType.name, valueType.name)
1171         pp, payloadSize, fields = d.describeStruct(typeCode)
1172 
1173         with Children(d, n):
1174             for i in d.childRange():
1175                 key, pad, value = d.split(typeCode, it - payloadSize)
1176                 d.putPairItem(i, (key, value), 'key', 'value')
1177                 dummy, it = d.split('Pp', it)
1178 
1179 
1180 def qdumpHelper_Qt5_QMap(d, value, keyType, valueType):
1181     dptr = d.extractPointer(value)
1182     (ref, n) = d.split('ii', dptr)
1183     d.check(0 <= n and n <= 100 * 1000 * 1000)
1184     d.check(-1 <= ref and ref < 100000)
1185 
1186     d.putItemCount(n)
1187     if d.isExpanded():
1188         if n > 10000:
1189             n = 10000
1190 
1191         typeCode = 'ppp@{%s}@{%s}' % (keyType.name, valueType.name)
1192 
1193         def helper(node):
1194             (p, left, right, padding1, key, padding2, value) = d.split(typeCode, node)
1195             if left:
1196                 for res in helper(left):
1197                     yield res
1198             yield (key, value)
1199             if right:
1200                 for res in helper(right):
1201                     yield res
1202 
1203         with Children(d, n):
1204             for (pair, i) in zip(helper(dptr + 8), range(n)):
1205                 d.putPairItem(i, pair, 'key', 'value')
1206 
1207 
1208 def qform__QMap():
1209     return [DisplayFormat.CompactMap]
1210 
1211 
1212 def qdump__QMap(d, value):
1213     qdumpHelper_QMap(d, value, value.type[0], value.type[1])
1214 
1215 
1216 def qdumpHelper_QMap(d, value, keyType, valueType):
1217     if d.qtVersion() < 0x50000:
1218         qdumpHelper_Qt4_QMap(d, value, keyType, valueType)
1219     else:
1220         qdumpHelper_Qt5_QMap(d, value, keyType, valueType)
1221 
1222 
1223 def qform__QMultiMap():
1224     return [DisplayFormat.CompactMap]
1225 
1226 
1227 def qdump__QMultiMap(d, value):
1228     qdump__QMap(d, value)
1229 
1230 
1231 def qform__QVariantMap():
1232     return [DisplayFormat.CompactMap]
1233 
1234 
1235 def qdump__QVariantMap(d, value):
1236     qdumpHelper_QMap(d, value, d.createType('QString'), d.createType('QVariant'))
1237 
1238 
1239 def qdump__QMetaMethod(d, value):
1240     d.putQMetaStuff(value, 'QMetaMethod')
1241 
1242 
1243 def qdump__QMetaEnum(d, value):
1244     d.putQMetaStuff(value, 'QMetaEnum')
1245 
1246 
1247 def qdump__QMetaProperty(d, value):
1248     d.putQMetaStuff(value, 'QMetaProperty')
1249 
1250 
1251 def qdump__QMetaClassInfo(d, value):
1252     d.putQMetaStuff(value, 'QMetaClassInfo')
1253 
1254 
1255 def qdump__QMetaObject(d, value):
1256     d.putEmptyValue()
1257     d.putNumChild(1)
1258     if d.isExpanded():
1259         with Children(d):
1260             d.putQObjectGutsHelper(0, 0, -1, value.address(), 'QMetaObject')
1261             d.putMembersItem(value)
1262 
1263 
1264 if False:
1265     def qdump__QObjectPrivate__ConnectionList(d, value):
1266         d.putNumChild(1)
1267         if d.isExpanded():
1268             i = 0
1269             with Children(d):
1270                 first, last = value.split('pp')
1271                 currentConnection = first
1272                 connectionType = d.createType('@QObjectPrivate::Connection')
1273                 while currentConnection and currentConnection != last:
1274                     sender, receiver, slotObj, nextConnectionList, nextp, prev = \
1275                         d.split('pppppp', currentConnection)
1276                     d.putSubItem(i, d.createValue(currentConnection, connectionType))
1277                     currentConnection = nextp
1278                     i += 1
1279                 d.putFields(value)
1280             d.putItemCount(i)
1281         else:
1282             d.putSpecialValue('minimumitemcount', 0)
1283 
1284 
1285 def qdump__QProcEnvKey(d, value):
1286     d.putByteArrayValue(value)
1287     d.putPlainChildren(value)
1288 
1289 
1290 def qdump__QPixmap(d, value):
1291     if d.qtVersion() < 0x050000:
1292         (vtbl, painters, dataPtr) = value.split('ppp')
1293     else:
1294         (vtbl, painters, reserved, dataPtr) = s = d.split('pppp', value)
1295     if dataPtr == 0:
1296         d.putValue('(invalid)')
1297     else:
1298         (dummy, width, height) = d.split('pii', dataPtr)
1299         d.putValue('(%dx%d)' % (width, height))
1300     d.putPlainChildren(value)
1301 
1302 
1303 def qdump__QMargins(d, value):
1304     d.putValue('left:%s, top:%s, right:%s, bottom:%s' % (value.split('iiii')))
1305     d.putPlainChildren(value)
1306 
1307 
1308 def qdump__QPoint(d, value):
1309     d.putValue('(%s, %s)' % (value.split('ii')))
1310     d.putPlainChildren(value)
1311 
1312 
1313 def qdump__QPointF(d, value):
1314     d.putValue('(%s, %s)' % (value.split('dd')))
1315     d.putPlainChildren(value)
1316 
1317 
1318 def qdump__QRect(d, value):
1319     def pp(l): return ('+' if l >= 0 else '') + str(l)
1320     (x1, y1, x2, y2) = d.split('iiii', value)
1321     d.putValue('%sx%s%s%s' % (x2 - x1 + 1, y2 - y1 + 1, pp(x1), pp(y1)))
1322     d.putPlainChildren(value)
1323 
1324 
1325 def qdump__QRectF(d, value):
1326     def pp(l): return ('+' if l >= 0 else '') + str(l)
1327     (x, y, w, h) = value.split('dddd')
1328     d.putValue('%sx%s%s%s' % (w, h, pp(x), pp(y)))
1329     d.putPlainChildren(value)
1330 
1331 
1332 def qdump__QRegExp(d, value):
1333     # value.priv.engineKey.pattern
1334     privAddress = d.extractPointer(value)
1335     (eng, pattern) = d.split('p{QString}', privAddress)
1336     d.putStringValue(pattern)
1337     d.putNumChild(1)
1338     if d.isExpanded():
1339         with Children(d):
1340             try:
1341                 d.call('void', value, 'capturedTexts')  # Warm up internal cache.
1342             except:
1343                 # Might fail (LLDB, Core files, ...), still cache might be warm.
1344                 pass
1345             (patternSyntax, caseSensitive, minimal, pad, t, captures) \
1346                 = d.split('{int}{int}B@{QString}{QStringList}', privAddress + 2 * d.ptrSize())
1347             d.putSubItem('syntax', patternSyntax.cast(d.qtNamespace() + 'QRegExp::PatternSyntax'))
1348             d.putSubItem('captures', captures)
1349 
1350 
1351 def qdump__QRegion(d, value):
1352     regionDataPtr = d.extractPointer(value)
1353     if regionDataPtr == 0:
1354         d.putSpecialValue('empty')
1355         d.putNumChild(0)
1356     else:
1357         if d.qtVersion() >= 0x050400:  # Padding removed in ee324e4ed
1358             (ref, pad, rgn) = d.split('i@p', regionDataPtr)
1359             (numRects, innerArea, rects, extents, innerRect) = \
1360                 d.split('iiP{QRect}{QRect}', rgn)
1361         elif d.qtVersion() >= 0x050000:
1362             (ref, pad, rgn) = d.split('i@p', regionDataPtr)
1363             (numRects, pad, rects, extents, innerRect, innerArea) = \
1364                 d.split('i@P{QRect}{QRect}i', rgn)
1365         else:
1366             if d.isWindowsTarget():
1367                 (ref, pad, rgn) = d.split('i@p', regionDataPtr)
1368             else:
1369                 (ref, pad, xrgn, xrectangles, rgn) = d.split('i@ppp', regionDataPtr)
1370             if rgn == 0:
1371                 numRects = 0
1372             else:
1373                 (numRects, pad, rects, extents, innerRect, innerArea) = \
1374                     d.split('i@P{QRect}{QRect}i', rgn)
1375 
1376         d.putItemCount(numRects)
1377         if d.isExpanded():
1378             with Children(d):
1379                 d.putIntItem('numRects', numRects)
1380                 d.putIntItem('innerArea', innerArea)
1381                 d.putSubItem('extents', extents)
1382                 d.putSubItem('innerRect', innerRect)
1383                 d.putSubItem('rects', d.createVectorItem(rects, d.qtNamespace() + 'QRect'))
1384 
1385 
1386 def qdump__QScopedPointer(d, value):
1387     if value.pointer() == 0:
1388         d.putValue('(null)')
1389         d.putNumChild(0)
1390     else:
1391         d.putItem(value['d'])
1392         d.putValue(d.currentValue.value, d.currentValue.encoding)
1393     typeName = value.type.name
1394     if value.type[1].name == d.qtNamespace() + 'QScopedPointerDeleter<%s>' % value.type[0].name:
1395         typeName = d.qtNamespace() + 'QScopedPointer<%s>' % value.type[0].name
1396     d.putBetterType(typeName)
1397 
1398 
1399 def qdump__QSet(d, value):
1400 
1401     def hashDataFirstNode():
1402         b = buckets
1403         n = numBuckets
1404         while n:
1405             n -= 1
1406             bb = d.extractPointer(b)
1407             if bb != dptr:
1408                 return bb
1409             b += ptrSize
1410         return dptr
1411 
1412     def hashDataNextNode(node):
1413         (nextp, h) = d.split('pI', node)
1414         if d.extractPointer(nextp):
1415             return nextp
1416         start = (h % numBuckets) + 1
1417         b = buckets + start * ptrSize
1418         n = numBuckets - start
1419         while n:
1420             n -= 1
1421             bb = d.extractPointer(b)
1422             if bb != nextp:
1423                 return bb
1424             b += ptrSize
1425         return nextp
1426 
1427     ptrSize = d.ptrSize()
1428     dptr = d.extractPointer(value)
1429     (fakeNext, buckets, ref, size, nodeSize, userNumBits, numBits, numBuckets) = \
1430         d.split('ppiiihhi', dptr)
1431 
1432     d.check(0 <= size and size <= 100 * 1000 * 1000)
1433     d.check(-1 <= ref and ref < 100000)
1434 
1435     d.putItemCount(size)
1436     if d.isExpanded():
1437         keyType = value.type[0]
1438         isShort = d.qtVersion() < 0x050000 and keyType.name == 'int'
1439         with Children(d, size, childType=keyType):
1440             node = hashDataFirstNode()
1441             for i in d.childRange():
1442                 if isShort:
1443                     typeCode = 'P{%s}' % keyType.name
1444                     (pnext, key) = d.split(typeCode, node)
1445                 else:
1446                     typeCode = 'Pi@{%s}' % keyType.name
1447                     (pnext, hashval, padding1, key) = d.split(typeCode, node)
1448                 with SubItem(d, i):
1449                     d.putItem(key)
1450                 node = hashDataNextNode(node)
1451 
1452 
1453 def qdump__QSharedData(d, value):
1454     d.putValue('ref: %s' % value.to('i'))
1455     d.putNumChild(0)
1456 
1457 
1458 def qdump__QSharedDataPointer(d, value):
1459     d_ptr = value['d']
1460     if d_ptr.pointer() == 0:
1461         d.putValue('(null)')
1462         d.putNumChild(0)
1463     else:
1464         # This replaces the pointer by the pointee, making the
1465         # pointer transparent.
1466         try:
1467             innerType = value.type[0]
1468         except:
1469             d.putValue(d_ptr)
1470             d.putPlainChildren(value)
1471             return
1472         d.putBetterType(d.currentType)
1473         d.putItem(d_ptr.dereference())
1474 
1475 
1476 def qdump__QSize(d, value):
1477     d.putValue('(%s, %s)' % value.split('ii'))
1478     d.putPlainChildren(value)
1479 
1480 
1481 def qdump__QSizeF(d, value):
1482     d.putValue('(%s, %s)' % value.split('dd'))
1483     d.putPlainChildren(value)
1484 
1485 
1486 def qdump__QSizePolicy__Policy(d, value):
1487     d.putEnumValue(value.integer(), {
1488         0:  'QSizePolicy::Fixed',
1489         1:  'QSizePolicy::GrowFlag',
1490         2:  'QSizePolicy::ExpandFlag',
1491         3:  'QSizePolicy::MinimumExpanding (GrowFlag|ExpandFlag)',
1492         4:  'QSizePolicy::ShrinkFlag',
1493         5:  'QSizePolicy::Preferred (GrowFlag|ShrinkFlag)',
1494         7:  'QSizePolicy::Expanding (GrowFlag|ShrinkFlag|ExpandFlag)',
1495         8:  'QSizePolicy::IgnoreFlag',
1496         13: 'QSizePolicy::Ignored (ShrinkFlag|GrowFlag|IgnoreFlag)',
1497     })
1498 
1499 
1500 def qdump__QSizePolicy(d, value):
1501     bits = value.integer()
1502     d.putEmptyValue(-99)
1503     d.putNumChild(1)
1504     if d.isExpanded():
1505         with Children(d):
1506             d.putIntItem('horStretch', (bits >> 0) & 0xff)
1507             d.putIntItem('verStretch', (bits >> 8) & 0xff)
1508             d.putEnumItem('horPolicy', (bits >> 16) & 0xf, "@QSizePolicy::Policy")
1509             d.putEnumItem('verPolicy', (bits >> 20) & 0xf, "@QSizePolicy::Policy")
1510 
1511 
1512 def qform__QStack():
1513     return [DisplayFormat.ArrayPlot]
1514 
1515 
1516 def qdump__QStack(d, value):
1517     qdump__QVector(d, value)
1518 
1519 
1520 def qdump__QPolygonF(d, value):
1521     data, size, alloc = d.vectorDataHelper(d.extractPointer(value))
1522     d.putItemCount(size)
1523     d.putPlotData(data, size, d.createType('QPointF'))
1524 
1525 
1526 def qdump__QPolygon(d, value):
1527     data, size, alloc = d.vectorDataHelper(d.extractPointer(value))
1528     d.putItemCount(size)
1529     d.putPlotData(data, size, d.createType('QPoint'))
1530 
1531 
1532 def qdump__QGraphicsPolygonItem(d, value):
1533     (vtbl, dptr) = value.split('pp')
1534     # Assume sizeof(QGraphicsPolygonItemPrivate) == 400
1535     if d.ptrSize() == 8:
1536         offset = 384
1537     elif d.isWindowsTarget():
1538         offset = 328 if d.isMsvcTarget() else 320
1539     else:
1540         offset = 308
1541     data, size, alloc = d.vectorDataHelper(d.extractPointer(dptr + offset))
1542     d.putItemCount(size)
1543     d.putPlotData(data, size, d.createType('QPointF'))
1544 
1545 
1546 def qedit__QString(d, value, data):
1547     d.call('void', value, 'resize', str(len(data)))
1548     (base, size, alloc) = d.stringData(value)
1549     d.setValues(base, 'short', [ord(c) for c in data])
1550 
1551 
1552 def qform__QString():
1553     return [DisplayFormat.Simple, DisplayFormat.Separate]
1554 
1555 
1556 def qdump__QString(d, value):
1557     d.putStringValue(value)
1558     (data, size, alloc) = d.stringData(value)
1559     d.putNumChild(size)
1560     displayFormat = d.currentItemFormat()
1561     if displayFormat == DisplayFormat.Separate:
1562         d.putDisplay('utf16:separate', d.encodeString(value, limit=100000))
1563     if d.isExpanded():
1564         d.putArrayData(data, size, d.createType('QChar'))
1565 
1566 
1567 def qdump__QStaticStringData(d, value):
1568     size = value.type[0]
1569     (ref, size, alloc, pad, offset, data) = value.split('iii@p%ss' % (2 * size))
1570     d.putValue(d.hexencode(data), 'utf16')
1571     d.putPlainChildren(value)
1572 
1573 
1574 def qdump__QTypedArrayData(d, value):
1575     if value.type[0].name == 'unsigned short':
1576         qdump__QStringData(d, value)
1577     else:
1578         qdump__QArrayData(d, value)
1579 
1580 
1581 def qdump__QStringData(d, value):
1582     (ref, size, alloc, pad, offset) = value.split('III@p')
1583     elided, shown = d.computeLimit(size, d.displayStringLimit)
1584     data = d.readMemory(value.address() + offset, shown * 2)
1585     d.putValue(data, 'utf16', elided=elided)
1586     d.putNumChild(1)
1587     d.putPlainChildren(value)
1588 
1589 
1590 def qdump__QHashedString(d, value):
1591     qdump__QString(d, value)
1592     d.putBetterType(value.type)
1593 
1594 
1595 def qdump__QQmlRefCount(d, value):
1596     d.putItem(value['refCount'])
1597     d.putBetterType(value.type)
1598 
1599 
1600 def qdump__QStringRef(d, value):
1601     (stringptr, pos, size) = value.split('pii')
1602     if stringptr == 0:
1603         d.putValue('(null)')
1604         d.putNumChild(0)
1605         return
1606     (data, ssize, alloc) = d.stringData(d.createValue(stringptr, 'QString'))
1607     d.putValue(d.readMemory(data + 2 * pos,  2 * size), 'utf16')
1608     d.putPlainChildren(value)
1609 
1610 
1611 def qdump__QStringList(d, value):
1612     qdumpHelper_QList(d, value, d.createType('QString'))
1613     d.putBetterType(value.type)
1614 
1615 
1616 def qdump__QTemporaryFile(d, value):
1617     qdump__QFile(d, value)
1618 
1619 
1620 def qdump__QTextCodec(d, value):
1621     name = d.call('const char *', value, 'name')
1622     d.putValue(d.encodeByteArray(name, limit=100), 6)
1623     d.putNumChild(2)
1624     if d.isExpanded():
1625         with Children(d):
1626             d.putCallItem('name', '@QByteArray', value, 'name')
1627             d.putCallItem('mibEnum', 'int', value, 'mibEnum')
1628             d.putFields(value)
1629 
1630 
1631 def qdump__QTextCursor(d, value):
1632     privAddress = d.extractPointer(value)
1633     if privAddress == 0:
1634         d.putValue('(invalid)')
1635         d.putNumChild(0)
1636     else:
1637         positionAddress = privAddress + 2 * d.ptrSize() + 8
1638         d.putValue(d.extractInt(positionAddress))
1639         d.putNumChild(1)
1640     if d.isExpanded():
1641         with Children(d):
1642             positionAddress = privAddress + 2 * d.ptrSize() + 8
1643             d.putIntItem('position', d.extractInt(positionAddress))
1644             d.putIntItem('anchor', d.extractInt(positionAddress + 4))
1645             d.putCallItem('selected', '@QString', value, 'selectedText')
1646             d.putFields(value)
1647 
1648 
1649 def qdump__QTextDocument(d, value):
1650     d.putEmptyValue()
1651     d.putNumChild(1)
1652     if d.isExpanded():
1653         with Children(d):
1654             d.putCallItem('blockCount', 'int', value, 'blockCount')
1655             d.putCallItem('characterCount', 'int', value, 'characterCount')
1656             d.putCallItem('lineCount', 'int', value, 'lineCount')
1657             d.putCallItem('revision', 'int', value, 'revision')
1658             d.putCallItem('toPlainText', '@QString', value, 'toPlainText')
1659             d.putFields(value)
1660 
1661 
1662 def qform__QUrl():
1663     return [DisplayFormat.Simple, DisplayFormat.Separate]
1664 
1665 
1666 def qdump__QUrl(d, value):
1667     privAddress = d.extractPointer(value)
1668     if not privAddress:
1669         # d == 0 if QUrl was constructed with default constructor
1670         d.putValue('<invalid>')
1671         d.putNumChild(0)
1672         return
1673 
1674     if d.qtVersion() < 0x050000:
1675         d.call('void', value, 'port')  # Warm up internal cache.
1676         d.call('void', value, 'path')
1677         st = '{QString}'
1678         ba = '{QByteArray}'
1679         (ref, dummy,
1680          scheme, userName, password, host, path,  # QString
1681          query,  # QByteArray
1682          fragment,  # QString
1683          encodedOriginal, encodedUserName, encodedPassword,
1684          encodedPath, encodedFragment,  # QByteArray
1685          port) \
1686             = d.split('i@' + st * 5 + ba + st + ba * 5 + 'i', privAddress)
1687     else:
1688         (ref, port, scheme, userName, password, host, path, query, fragment) \
1689             = d.split('ii' + '{QString}' * 7, privAddress)
1690 
1691     userNameEnc = d.encodeString(userName)
1692     hostEnc = d.encodeString(host)
1693     pathEnc = d.encodeString(path)
1694     url = d.encodeString(scheme)
1695     url += '3a002f002f00'  # '://'
1696     if len(userNameEnc):
1697         url += userNameEnc + '4000'  # '@'
1698     url += hostEnc
1699     if port >= 0:
1700         url += '3a00' + ''.join(['%02x00' % ord(c) for c in str(port)])
1701     url += pathEnc
1702     d.putValue(url, 'utf16')
1703 
1704     displayFormat = d.currentItemFormat()
1705     if displayFormat == DisplayFormat.Separate:
1706         d.putDisplay('utf16:separate', url)
1707 
1708     d.putNumChild(1)
1709     if d.isExpanded():
1710         with Children(d):
1711             d.putIntItem('port', port)
1712             d.putSubItem('scheme', scheme)
1713             d.putSubItem('userName', userName)
1714             d.putSubItem('password', password)
1715             d.putSubItem('host', host)
1716             d.putSubItem('path', path)
1717             d.putSubItem('query', query)
1718             d.putSubItem('fragment', fragment)
1719             d.putFields(value)
1720 
1721 
1722 def qdump__QUuid(d, value):
1723     r = value.split('IHHBBBBBBBB')
1724     d.putValue('{%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x}' % r)
1725     d.putNumChild(1)
1726     d.putPlainChildren(value)
1727 
1728 
1729 def qdumpHelper_QVariant_0(d, value):
1730     # QVariant::Invalid
1731     d.putBetterType('%sQVariant (invalid)' % d.qtNamespace())
1732     d.putValue('(invalid)')
1733 
1734 
1735 def qdumpHelper_QVariant_1(d, value):
1736     # QVariant::Bool
1737     d.putBetterType('%sQVariant (bool)' % d.qtNamespace())
1738     d.putValue('true' if value.to('b') else 'false')
1739 
1740 
1741 def qdumpHelper_QVariant_2(d, value):
1742     # QVariant::Int
1743     d.putBetterType('%sQVariant (int)' % d.qtNamespace())
1744     d.putValue(value.to('i'))
1745 
1746 
1747 def qdumpHelper_QVariant_3(d, value):
1748     # uint
1749     d.putBetterType('%sQVariant (uint)' % d.qtNamespace())
1750     d.putValue(value.to('I'))
1751 
1752 
1753 def qdumpHelper_QVariant_4(d, value):
1754     # qlonglong
1755     d.putBetterType('%sQVariant (qlonglong)' % d.qtNamespace())
1756     d.putValue(value.to('q'))
1757 
1758 
1759 def qdumpHelper_QVariant_5(d, value):
1760     # qulonglong
1761     d.putBetterType('%sQVariant (qulonglong)' % d.qtNamespace())
1762     d.putValue(value.to('Q'))
1763 
1764 
1765 def qdumpHelper_QVariant_6(d, value):
1766     # QVariant::Double
1767     d.putBetterType('%sQVariant (double)' % d.qtNamespace())
1768     d.putValue(value.to('d'))
1769 
1770 
1771 qdumpHelper_QVariants_A = [
1772     qdumpHelper_QVariant_0,
1773     qdumpHelper_QVariant_1,
1774     qdumpHelper_QVariant_2,
1775     qdumpHelper_QVariant_3,
1776     qdumpHelper_QVariant_4,
1777     qdumpHelper_QVariant_5,
1778     qdumpHelper_QVariant_6
1779 ]
1780 
1781 
1782 qdumpHelper_QVariants_B = [
1783     'QChar',         # 7
1784     'QVariantMap',   # 8
1785     'QVariantList',  # 9
1786     'QString',       # 10
1787     'QStringList',   # 11
1788     'QByteArray',    # 12
1789     'QBitArray',     # 13
1790     'QDate',         # 14
1791     'QTime',         # 15
1792     'QDateTime',     # 16
1793     'QUrl',          # 17
1794     'QLocale',       # 18
1795     'QRect',         # 19
1796     'QRectF',        # 20
1797     'QSize',         # 21
1798     'QSizeF',        # 22
1799     'QLine',         # 23
1800     'QLineF',        # 24
1801     'QPoint',        # 25
1802     'QPointF',       # 26
1803     'QRegExp',       # 27
1804     'QVariantHash',  # 28
1805 ]
1806 
1807 
1808 def qdumpHelper_QVariant_31(d, value):
1809     # QVariant::VoidStar
1810     d.putBetterType('%sQVariant (void *)' % d.qtNamespace())
1811     d.putValue('0x%x' % d.extractPointer(value))
1812 
1813 
1814 def qdumpHelper_QVariant_32(d, value):
1815     # QVariant::Long
1816     d.putBetterType('%sQVariant (long)' % d.qtNamespace())
1817     if d.ptrSize() == 4:
1818         d.putValue('%s' % d.extractInt(value))
1819     else:
1820         d.putValue('%s' % d.extractInt64(value))  # sic!
1821 
1822 
1823 def qdumpHelper_QVariant_33(d, value):
1824     # QVariant::Short
1825     d.putBetterType('%sQVariant (short)' % d.qtNamespace())
1826     d.putValue('%s' % d.extractShort(value))
1827 
1828 
1829 def qdumpHelper_QVariant_34(d, value):
1830     # QVariant::Char
1831     d.putBetterType('%sQVariant (char)' % d.qtNamespace())
1832     d.putValue('%s' % d.extractByte(value))
1833 
1834 
1835 def qdumpHelper_QVariant_35(d, value):
1836     # QVariant::ULong
1837     d.putBetterType('%sQVariant (unsigned long)' % d.qtNamespace())
1838     if d.ptrSize() == 4:
1839         d.putValue('%s' % d.extractUInt(value))
1840     else:
1841         d.putValue('%s' % d.extractUInt64(value))  # sic!
1842 
1843 
1844 def qdumpHelper_QVariant_36(d, value):
1845     # QVariant::UShort
1846     d.putBetterType('%sQVariant (unsigned short)' % d.qtNamespace())
1847     d.putValue('%s' % d.extractUShort(value))
1848 
1849 
1850 def qdumpHelper_QVariant_37(d, value):
1851     # QVariant::UChar
1852     d.putBetterType('%sQVariant (unsigned char)' % d.qtNamespace())
1853     d.putValue('%s' % d.extractByte(value))
1854 
1855 
1856 def qdumpHelper_QVariant_38(d, value):
1857     # QVariant::Float
1858     d.putBetterType('%sQVariant (float)' % d.qtNamespace())
1859     d.putValue(value.to('f'))
1860 
1861 
1862 qdumpHelper_QVariants_D = [
1863     qdumpHelper_QVariant_31,
1864     qdumpHelper_QVariant_32,
1865     qdumpHelper_QVariant_33,
1866     qdumpHelper_QVariant_34,
1867     qdumpHelper_QVariant_35,
1868     qdumpHelper_QVariant_36,
1869     qdumpHelper_QVariant_37,
1870     qdumpHelper_QVariant_38
1871 ]
1872 
1873 qdumpHelper_QVariants_E = [
1874     'QFont',       # 64
1875     'QPixmap',     # 65
1876     'QBrush',      # 66
1877     'QColor',      # 67
1878     'QPalette',    # 68
1879     'QIcon',       # 69
1880     'QImage',      # 70
1881     'QPolygon',    # 71
1882     'QRegion',     # 72
1883     'QBitmap',     # 73
1884     'QCursor',     # 74
1885 ]
1886 
1887 qdumpHelper_QVariants_F = [
1888     # Qt 5. In Qt 4 add one.
1889     'QKeySequence',  # 75
1890     'QPen',          # 76
1891     'QTextLength',   # 77
1892     'QTextFormat',   # 78
1893     'X',
1894     'QTransform',    # 80
1895     'QMatrix4x4',    # 81
1896     'QVector2D',     # 82
1897     'QVector3D',     # 83
1898     'QVector4D',     # 84
1899     'QQuaternion',   # 85
1900     'QPolygonF'      # 86
1901 ]
1902 
1903 
1904 def qdump__QVariant(d, value):
1905     (data, typeStuff) = d.split('8sI', value)
1906     variantType = typeStuff & 0x3fffffff
1907     isShared = bool(typeStuff & 0x40000000)
1908 
1909     # Well-known simple type.
1910     if variantType <= 6:
1911         qdumpHelper_QVariants_A[variantType](d, value)
1912         d.putNumChild(0)
1913         return None
1914 
1915     # Extended Core type (Qt 5)
1916     if variantType >= 31 and variantType <= 38 and d.qtVersion() >= 0x050000:
1917         qdumpHelper_QVariants_D[variantType - 31](d, value)
1918         d.putNumChild(0)
1919         return None
1920 
1921     # Extended Core type (Qt 4)
1922     if variantType >= 128 and variantType <= 135 and d.qtVersion() < 0x050000:
1923         if variantType == 128:
1924             d.putBetterType('%sQVariant (void *)' % d.qtNamespace())
1925             d.putValue('0x%x' % value.extractPointer())
1926         else:
1927             if variantType == 135:  # Float
1928                 blob = value
1929             else:
1930                 p = d.extractPointer(value)
1931                 blob = d.extractUInt64(p)
1932             qdumpHelper_QVariants_D[variantType - 128](d, blob)
1933         d.putNumChild(0)
1934         return None
1935 
1936     #DumperBase.warn('TYPE: %s' % variantType)
1937 
1938     if variantType <= 86:
1939         # Known Core or Gui type.
1940         if variantType <= 28:
1941             innert = qdumpHelper_QVariants_B[variantType - 7]
1942         elif variantType <= 74:
1943             innert = qdumpHelper_QVariants_E[variantType - 64]
1944         elif d.qtVersion() < 0x050000:
1945             innert = qdumpHelper_QVariants_F[variantType - 76]
1946         else:
1947             innert = qdumpHelper_QVariants_F[variantType - 75]
1948 
1949         #data = value['d']['data']
1950         innerType = d.qtNamespace() + innert
1951 
1952         #DumperBase.warn('SHARED: %s' % isShared)
1953         if isShared:
1954             base1 = d.extractPointer(value)
1955             #DumperBase.warn('BASE 1: %s %s' % (base1, innert))
1956             base = d.extractPointer(base1)
1957             #DumperBase.warn('SIZE 1: %s' % size)
1958             val = d.createValue(base, innerType)
1959         else:
1960             #DumperBase.warn('DIRECT ITEM 1: %s' % innerType)
1961             val = d.createValue(data, innerType)
1962             val.laddress = value.laddress
1963 
1964         d.putEmptyValue(-99)
1965         d.putItem(val)
1966         d.putBetterType('%sQVariant (%s)' % (d.qtNamespace(), innert))
1967 
1968         return innert
1969 
1970     # User types.
1971     ns = d.qtNamespace()
1972     d.putEmptyValue(-99)
1973     d.putType('%sQVariant (%s)' % (ns, variantType))
1974     d.putNumChild(1)
1975     if d.isExpanded():
1976         innerType = None
1977         with Children(d):
1978             ev = d.parseAndEvaluate
1979             p = None
1980             if p is None:
1981                 # Without debug info.
1982                 symbol = d.mangleName(d.qtNamespace() + 'QMetaType::typeName') + 'i'
1983                 p = ev('((const char *(*)(int))%s)(%d)' % (symbol, variantType))
1984             #if p is None:
1985             #    p = ev('((const char *(*)(int))%sQMetaType::typeName)(%d)' % (ns, variantType))
1986             if p is None:
1987                 # LLDB on Linux
1988                 p = ev('((const char *(*)(int))QMetaType::typeName)(%d)' % variantType)
1989             if p is None:
1990                 d.putSpecialValue('notcallable')
1991                 return None
1992             ptr = p.pointer()
1993             (elided, blob) = d.encodeCArray(ptr, 1, 100)
1994             innerType = d.hexdecode(blob)
1995 
1996             # Prefer namespaced version.
1997             if len(ns) > 0:
1998                 if not d.lookupNativeType(ns + innerType) is None:
1999                     innerType = ns + innerType
2000 
2001             if isShared:
2002                 base1 = d.extractPointer(value)
2003                 base = d.extractPointer(base1)
2004                 val = d.createValue(base, innerType)
2005             else:
2006                 val = d.createValue(data, innerType)
2007                 val.laddress = value.laddress
2008             d.putSubItem('data', val)
2009 
2010         if innerType is not None:
2011             d.putBetterType('%sQVariant (%s)' % (ns, innerType))
2012     return None
2013 
2014 
2015 def qedit__QVector(d, value, data):
2016     values = data.split(',')
2017     d.call('void', value, 'resize', str(len(values)))
2018     base, vsize, valloc = d.vectorDataHelper(d.extractPointer(value))
2019     d.setValues(base, value.type[0].name, values)
2020 
2021 
2022 def qform__QVector():
2023     return [DisplayFormat.ArrayPlot]
2024 
2025 
2026 def qdump__QVector(d, value):
2027     dd = d.extractPointer(value)
2028     data, size, alloc = d.vectorDataHelper(dd)
2029     d.check(0 <= size and size <= alloc and alloc <= 1000 * 1000 * 1000)
2030     d.putItemCount(size)
2031     d.putPlotData(data, size, value.type[0])
2032 
2033 
2034 if False:
2035     def qdump__QObjectConnectionList(d, value):
2036         dd = d.extractPointer(value)
2037         data, size, alloc = d.vectorDataHelper(dd)
2038         d.check(0 <= size and size <= alloc and alloc <= 1000 * 1000 * 1000)
2039         d.putItemCount(size)
2040         d.putPlotData(data, size, d.createType('@QObjectPrivate::ConnectionList'))
2041 
2042 
2043 def qdump__QVarLengthArray(d, value):
2044     (cap, size, data) = value.split('iip')
2045     d.check(0 <= size)
2046     d.putItemCount(size)
2047     d.putPlotData(data, size, value.type[0])
2048 
2049 
2050 def qdump__QSharedPointer(d, value):
2051     qdump_QWeakPointerHelper(d, value, False)
2052 
2053 
2054 def qdump__QWeakPointer(d, value):
2055     qdump_QWeakPointerHelper(d, value, True)
2056 
2057 
2058 def qdump__QPointer(d, value):
2059     # actually, we'd use value['wp'] instead of value, but since we
2060     # only split() on the result and the (sub-)object address is the
2061     # same it does not matter but saves some cycles.
2062     qdump_QWeakPointerHelper(d, value, True, value.type[0])
2063 
2064 
2065 def qdump_QWeakPointerHelper(d, value, isWeak, innerType=None):
2066     if isWeak:
2067         (d_ptr, val) = value.split('pp')
2068     else:
2069         (val, d_ptr) = value.split('pp')
2070     if d_ptr == 0 and val == 0:
2071         d.putValue('(null)')
2072         d.putNumChild(0)
2073         return
2074     if d_ptr == 0 or val == 0:
2075         d.putValue('<invalid>')
2076         d.putNumChild(0)
2077         return
2078 
2079     if d.qtVersion() >= 0x050000:
2080         (weakref, strongref) = d.split('ii', d_ptr)
2081     else:
2082         (vptr, weakref, strongref) = d.split('pii', d_ptr)
2083     d.check(strongref >= -1)
2084     d.check(strongref <= weakref)
2085     d.check(weakref <= 10 * 1000 * 1000)
2086 
2087     if innerType is None:
2088         innerType = value.type[0]
2089     with Children(d):
2090         short = d.putSubItem('data', d.createValue(val, innerType))
2091         d.putIntItem('weakref', weakref)
2092         d.putIntItem('strongref', strongref)
2093     d.putValue(short.value, short.encoding)
2094 
2095 
2096 def qdump__QXmlAttributes__Attribute(d, value):
2097     d.putEmptyValue()
2098     d.putNumChild(1)
2099     if d.isExpanded():
2100         with Children(d):
2101             (qname, uri, localname, val) = value.split('{QString}' * 4)
2102             d.putSubItem('qname', qname)
2103             d.putSubItem('uri', uri)
2104             d.putSubItem('localname', localname)
2105             d.putSubItem('value', val)
2106 
2107 
2108 def qdump__QXmlAttributes(d, value):
2109     (vptr, atts) = value.split('pP')
2110     innerType = d.createType(d.qtNamespace() + 'QXmlAttributes::Attribute', 4 * d.ptrSize())
2111     val = d.createListItem(atts, innerType)
2112     qdumpHelper_QList(d, val, innerType)
2113 
2114 
2115 def qdump__QXmlStreamStringRef(d, value):
2116     s = value['m_string']
2117     (data, size, alloc) = d.stringData(s)
2118     data += 2 * int(value['m_position'])
2119     size = int(value['m_size'])
2120     s = d.readMemory(data, 2 * size)
2121     d.putValue(s, 'utf16')
2122     d.putPlainChildren(value)
2123 
2124 
2125 def qdump__QXmlStreamAttribute(d, value):
2126     s = value['m_name']['m_string']
2127     (data, size, alloc) = d.stringData(s)
2128     data += 2 * int(value['m_name']['m_position'])
2129     size = int(value['m_name']['m_size'])
2130     s = d.readMemory(data, 2 * size)
2131     d.putValue(s, 'utf16')
2132     d.putPlainChildren(value)
2133 
2134 
2135 #######################################################################
2136 #
2137 # V4
2138 #
2139 #######################################################################
2140 
2141 def extractQmlData(d, value):
2142     #if value.type.code == TypeCode.Pointer:
2143     #    value = value.dereference()
2144     base = value.split('p')[0]
2145     #mmdata = d.split('Q', base)[0]
2146     #PointerMask = 0xfffffffffffffffd
2147     #vtable = mmdata & PointerMask
2148     #DumperBase.warn('QML DATA: %s' % value.stringify())
2149     #data = value['data']
2150     #return #data.cast(d.lookupType(value.type.name.replace('QV4::', 'QV4::Heap::')))
2151     typeName = value.type.name.replace('QV4::', 'QV4::Heap::')
2152     #DumperBase.warn('TYOE DATA: %s' % typeName)
2153     return d.createValue(base, typeName)
2154 
2155 
2156 def qdump__QV4__Heap__Base(d, value):
2157     mm_data = value.extractPointer()
2158     d.putValue('[%s]' % mm_data)
2159     if d.isExpanded():
2160         with Children(d):
2161             with SubItem(d, 'vtable'):
2162                 d.putItem(d.createValue(mm_data & (~3), d.qtNamespace() + 'QV4::VTable'))
2163             d.putBoolItem('isMarked', mm_data & 1)
2164             d.putBoolItem('inUse', (mm_data & 2) == 0)
2165             with SubItem(d, 'nextFree'):
2166                 d.putItem(d.createValue(mm_data & (~3), value.type))
2167 
2168 
2169 def qdump__QV4__Heap__String(d, value):
2170     # Note: There's also the 'Identifier' case. And the largestSubLength != 0 case.
2171     (baseClass, textOrLeft, idOrRight, subtype, stringHash, largestSub, length, mm) \
2172         = value.split('QppIIIIp')
2173     textPtr = d.split('{QStringDataPtr}', textOrLeft)[0]
2174     qdump__QStringData(d, d.createValue(textOrLeft, d.qtNamespace() + 'QStringData'))
2175     if d.isExpanded():
2176         with Children(d):
2177             d.putFields(value)
2178 
2179 
2180 def qmlPutHeapChildren(d, value):
2181     d.putItem(extractQmlData(d, value))
2182 
2183 
2184 def qdump__QV4__Object(d, value):
2185     qmlPutHeapChildren(d, value)
2186 
2187 
2188 def qdump__QV4__FunctionObject(d, value):
2189     #qmlPutHeapChildren(d, value)
2190     d.putEmptyValue()
2191     if d.isExpanded():
2192         with Children(d):
2193             d.putFields(value)
2194             d.putSubItem('heap', extractQmlData(d, value))
2195             d.putCallItem('sourceLocation', '@QQmlSourceLocation',
2196                           value, 'sourceLocation')
2197 
2198 
2199 def qdump__QV4__CompilationUnit(d, value):
2200     qmlPutHeapChildren(d, value)
2201 
2202 
2203 def qdump__QV4__CallContext(d, value):
2204     qmlPutHeapChildren(d, value)
2205 
2206 
2207 def qdump__QV4__ScriptFunction(d, value):
2208     qmlPutHeapChildren(d, value)
2209 
2210 
2211 def qdump__QV4__SimpleScriptFunction(d, value):
2212     qdump__QV4__FunctionObject(d, value)
2213 
2214 
2215 def qdump__QV4__ExecutionContext(d, value):
2216     qmlPutHeapChildren(d, value)
2217 
2218 
2219 def qdump__QQmlSourceLocation(d, value):
2220     (sourceFile, line, col) = value.split('pHH')
2221     (data, size, alloc) = d.stringData(value)
2222     d.putValue(d.readMemory(data, 2 * size), 'utf16')
2223     d.putField('valuesuffix', ':%s:%s' % (line, col))
2224     d.putPlainChildren(value)
2225 
2226 
2227 #def qdump__QV4__CallData(d, value):
2228 #    argc = value['argc'].integer()
2229 #    d.putItemCount(argc)
2230 #    if d.isExpanded():
2231 #        with Children(d):
2232 #            d.putSubItem('[this]', value['thisObject'])
2233 #            for i in range(0, argc):
2234 #                d.putSubItem(i, value['args'][i])
2235 #
2236 
2237 def qdump__QV4__String(d, value):
2238     qmlPutHeapChildren(d, value)
2239 
2240 
2241 def qdump__QV4__Identifier(d, value):
2242     d.putStringValue(value)
2243     d.putPlainChildren(value)
2244 
2245 
2246 def qdump__QV4__PropertyHash(d, value):
2247     data = value.extractPointer()
2248     (ref, alloc, size, numBits, entries) = d.split('iiiip', data)
2249     n = 0
2250     innerType = d.qtNamespace() + 'QV4::Identifier'
2251     with Children(d):
2252         for i in range(alloc):
2253             (identifier, index) = d.split('pI', entries + i * 2 * d.ptrSize())
2254             if identifier != 0:
2255                 n += 1
2256                 with SubItem(d):
2257                     d.putItem(d, d.createValue(identifier, innerType))
2258                     d.put('keysuffix', ' %d' % index)
2259     d.putItemCount(n)
2260     d.putPlainChildren(value)
2261 
2262 
2263 def qdump__QV4__InternalClass__Transition(d, value):
2264     identifier = d.createValue(value.extractPointer(), d.qtNamespace() + 'QV4::Identifier')
2265     d.putStringValue(identifier)
2266     d.putPlainChildren(value)
2267 
2268 
2269 def qdump__QV4__InternalClassTransition(d, value):
2270     qdump__QV4__InternalClass__Transition(d, value)
2271 
2272 
2273 def qdump__QV4__SharedInternalClassData(d, value):
2274     (ref, alloc, size, pad, data) = value.split('iIIip')
2275     val = d.createValue(data, value.type[0])
2276     with Children(d):
2277         with SubItem(d, 'data'):
2278             d.putItem(val)
2279             short = d.currentValue
2280         d.putIntItem('size', size)
2281         d.putIntItem('alloc', alloc)
2282         d.putIntItem('refcount', ref)
2283     d.putValue(short.value, short.encoding)
2284 
2285 
2286 def qdump__QV4__IdentifierTable(d, value):
2287     (engine, alloc, size, numBits, pad, entries) = value.split('piiiip')
2288     n = 0
2289     innerType = d.qtNamespace() + 'QV4::Heap::String'
2290     with Children(d):
2291         for i in range(alloc):
2292             identifierPtr = d.extractPointer(entries + i * d.ptrSize())
2293             if identifierPtr != 0:
2294                 n += 1
2295                 with SubItem(d, None):
2296                     d.putItem(d.createValue(identifierPtr, innerType))
2297     d.putItemCount(n)
2298     d.putPlainChildren(value)
2299 
2300 
2301 if False:
2302     # 32 bit.
2303     QV4_Masks_SilentNaNBit =           0x00040000
2304     QV4_Masks_NaN_Mask =               0x7ff80000
2305     QV4_Masks_NotDouble_Mask =         0x7ffa0000
2306     QV4_Masks_Type_Mask =              0xffffc000
2307     QV4_Masks_Immediate_Mask =         QV4_Masks_NotDouble_Mask | 0x00004000 | QV4_Masks_SilentNaNBit
2308     QV4_Masks_IsNullOrUndefined_Mask = QV4_Masks_Immediate_Mask | 0x08000
2309     QV4_Masks_Tag_Shift = 32
2310 
2311     QV4_ValueType_Undefined_Type =     QV4_Masks_Immediate_Mask | 0x00000
2312     QV4_ValueType_Null_Type =          QV4_Masks_Immediate_Mask | 0x10000
2313     QV4_ValueType_Boolean_Type =       QV4_Masks_Immediate_Mask | 0x08000
2314     QV4_ValueType_Integer_Type =       QV4_Masks_Immediate_Mask | 0x18000
2315     QV4_ValueType_Managed_Type =       QV4_Masks_NotDouble_Mask | 0x00000 | QV4_Masks_SilentNaNBit
2316     QV4_ValueType_Empty_Type =         QV4_Masks_NotDouble_Mask | 0x18000 | QV4_Masks_SilentNaNBit
2317 
2318     QV4_ConvertibleToInt =             QV4_Masks_Immediate_Mask | 0x1
2319 
2320     QV4_ValueTypeInternal_Null_Type_Internal =    QV4_ValueType_Null_Type | QV4_ConvertibleToInt
2321     QV4_ValueTypeInternal_Boolean_Type_Internal = QV4_ValueType_Boolean_Type | QV4_ConvertibleToInt
2322     QV4_ValueTypeInternal_Integer_Type_Internal = QV4_ValueType_Integer_Type | QV4_ConvertibleToInt
2323 
2324 
2325 def QV4_getValue(d, jsval):  # (Dumper, QJSValue *jsval) -> QV4::Value *
2326     dd = d.split('Q', jsval)[0]
2327     if dd & 3:
2328         return 0
2329     return dd
2330 
2331 
2332 def QV4_getVariant(d, jsval):  # (Dumper, QJSValue *jsval) -> QVariant *
2333     dd = d.split('Q', jsval)[0]
2334     if dd & 1:
2335         return dd & ~3
2336     return 0
2337 
2338 
2339 def QV4_valueForData(d, jsval):  # (Dumper, QJSValue *jsval) -> QV4::Value *
2340     v = QV4_getValue(d, jsval)
2341     if v:
2342         return v
2343     d.warn('Not implemented: VARIANT')
2344     return 0
2345 
2346 
2347 def QV4_putObjectValue(d, objectPtr):
2348     ns = d.qtNamespace()
2349     base = d.extractPointer(objectPtr)
2350     (inlineMemberOffset, inlineMemberSize, internalClass, prototype,
2351      memberData, arrayData) = d.split('IIpppp', base)
2352     d.putValue('PTR: 0x%x' % objectPtr)
2353     if d.isExpanded():
2354         with Children(d):
2355             with SubItem(d, '[raw]'):
2356                 d.putValue('[0x%x]' % objectPtr)
2357                 d.putType(' ')
2358                 d.putNumChild(0)
2359             d.putIntItem('inlineMemberOffset', inlineMemberOffset)
2360             d.putIntItem('inlineMemberSize', inlineMemberSize)
2361             d.putIntItem('internalClass', internalClass)
2362             d.putIntItem('prototype', prototype)
2363             d.putPtrItem('memberData', memberData)
2364             d.putPtrItem('arrayData', arrayData)
2365             d.putSubItem('OBJ', d.createValue(objectPtr, ns + 'QV4::Object'))
2366             #d.putFields(value)
2367 
2368 
2369 def qdump__QV4_Object(d, value):
2370     ns = d.qtNamespace()
2371     d.putEmptyValue()
2372     if d.isExpanded():
2373         with Children(d):
2374             with SubItem(d, '[raw]'):
2375                 base = d.extractPointer(objectPtr)
2376                 (inlineMemberOffset, inlineMemberSize, internalClass, prototype,
2377                  memberData, arrayData) = d.split('IIpppp', base)
2378                 d.putValue('PTR: 0x%x' % objectPtr)
2379 
2380 
2381 def qdump__QV4__Value(d, value):
2382     if d.ptrSize() == 4:
2383         qdump_32__QV4__Value(d, value)
2384     else:
2385         qdump_64__QV4__Value(d, value)
2386 
2387 
2388 def qdump_32__QV4__Value(d, value):
2389     # QV4_Masks_SilentNaNBit           = 0x00040000
2390     # QV4_Masks_NaN_Mask               = 0x7ff80000
2391     # QV4_Masks_NotDouble_Mask         = 0x7ffa0000
2392     # QV4_Masks_Type_Mask              = 0xffffc000
2393     ns = d.qtNamespace()
2394     v = value.split('Q')[0]
2395     tag = v >> 32
2396     val = v & 0xffffffff
2397     if (tag & 0x7fff2000) == 0x7fff2000:  # Int
2398         d.putValue(val)
2399         d.putBetterType('%sQV4::Value (int32)' % ns)
2400     elif (tag & 0x7fff4000) == 0x7fff4000:  # Bool
2401         d.putValue(val)
2402         d.putBetterType('%sQV4::Value (bool)' % ns)
2403     elif (tag & 0x7fff0000) == 0x7fff0000:  # Null
2404         d.putValue(val)
2405         d.putBetterType('%sQV4::Value (null)' % ns)
2406     elif (tag & 0x7ffa0000) != 0x7ffa0000:  # Double
2407         d.putValue(value.split('d')[0])
2408         d.putBetterType('%sQV4::Value (double)' % ns)
2409     elif tag == 0x7ffa0000:
2410         if val == 0:
2411             d.putValue('(undefined)')
2412             d.putBetterType('%sQV4::Value (undefined)' % ns)
2413         else:
2414             managed = d.createValue(val, ns + 'QV4::Heap::Base')
2415             qdump__QV4__Heap__Base(d, managed)
2416             #d.putValue('[0x%x]' % v)
2417     #d.putPlainChildren(value)
2418     if d.isExpanded():
2419         with Children(d):
2420             with SubItem(d, '[raw]'):
2421                 d.putValue('[0x%x]' % v)
2422                 d.putType(' ')
2423                 d.putNumChild(0)
2424             with SubItem(d, '[val]'):
2425                 d.putValue('[0x%x]' % val)
2426                 d.putType(' ')
2427                 d.putNumChild(0)
2428             with SubItem(d, '[tag]'):
2429                 d.putValue('[0x%x]' % tag)
2430                 d.putType(' ')
2431                 d.putNumChild(0)
2432             #with SubItem(d, '[vtable]'):
2433             #    d.putItem(d.createValue(vtable, ns + 'QV4::VTable'))
2434             #    d.putType(' ');
2435             #    d.putNumChild(0)
2436             d.putFields(value)
2437 
2438 
2439 def qdump_64__QV4__Value(d, value):
2440     dti = d.qtDeclarativeTypeInfoVersion()
2441     new = dti is not None and dti >= 2
2442     if new:
2443         QV4_NaNEncodeMask =         0xfffc000000000000
2444         QV4_Masks_Immediate_Mask =  0x00020000  # bit 49
2445 
2446         QV4_ValueTypeInternal_Empty_Type_Internal =     QV4_Masks_Immediate_Mask | 0
2447         QV4_ConvertibleToInt =                          QV4_Masks_Immediate_Mask | 0x10000  # bit 48
2448         QV4_ValueTypeInternal_Null_Type_Internal =      QV4_ConvertibleToInt | 0x08000
2449         QV4_ValueTypeInternal_Boolean_Type_Internal =   QV4_ConvertibleToInt | 0x04000
2450         QV4_ValueTypeInternal_Integer_Type_Internal =   QV4_ConvertibleToInt | 0x02000
2451 
2452         QV4_ValueType_Undefined_Type = 0  # Dummy to make generic code below pass.
2453 
2454     else:
2455         QV4_NaNEncodeMask =         0xffff800000000000
2456         QV4_Masks_Immediate_Mask =  0x00018000
2457 
2458         QV4_IsInt32Mask =           0x0002000000000000
2459         QV4_IsDoubleMask =          0xfffc000000000000
2460         QV4_IsNumberMask =          QV4_IsInt32Mask | QV4_IsDoubleMask
2461         QV4_IsNullOrUndefinedMask = 0x0000800000000000
2462         QV4_IsNullOrBooleanMask =   0x0001000000000000
2463 
2464         QV4_Masks_NaN_Mask =                0x7ff80000
2465         QV4_Masks_Type_Mask =               0xffff8000
2466         QV4_Masks_IsDouble_Mask =           0xfffc0000
2467         QV4_Masks_IsNullOrUndefined_Mask =  0x00008000
2468         QV4_Masks_IsNullOrBoolean_Mask =    0x00010000
2469 
2470         QV4_ValueType_Undefined_Type =  QV4_Masks_IsNullOrUndefined_Mask
2471         QV4_ValueType_Null_Type =       QV4_Masks_IsNullOrUndefined_Mask \
2472             | QV4_Masks_IsNullOrBoolean_Mask
2473         QV4_ValueType_Boolean_Type =    QV4_Masks_IsNullOrBoolean_Mask
2474         QV4_ValueType_Integer_Type =    0x20000 | QV4_Masks_IsNullOrBoolean_Mask
2475         QV4_ValueType_Managed_Type =    0
2476         QV4_ValueType_Empty_Type =      QV4_ValueType_Undefined_Type | 0x4000
2477 
2478         QV4_ValueTypeInternal_Null_Type_Internal =      QV4_ValueType_Null_Type
2479         QV4_ValueTypeInternal_Boolean_Type_Internal =   QV4_ValueType_Boolean_Type
2480         QV4_ValueTypeInternal_Integer_Type_Internal =   QV4_ValueType_Integer_Type
2481 
2482     QV4_PointerMask = 0xfffffffffffffffd
2483 
2484     QV4_Masks_Tag_Shift =           32
2485     QV4_IsDouble_Shift =            64 - 14
2486     QV4_IsNumber_Shift =            64 - 15
2487     QV4_IsConvertibleToInt_Shift =  64 - 16
2488     QV4_IsManaged_Shift =           64 - 17
2489 
2490     v = value.split('Q')[0]
2491     tag = v >> QV4_Masks_Tag_Shift
2492     vtable = v & QV4_PointerMask
2493     ns = d.qtNamespace()
2494     if (v >> QV4_IsNumber_Shift) == 1:
2495         d.putBetterType('%sQV4::Value (int32)' % ns)
2496         vv = v & 0xffffffff
2497         vv = vv if vv < 0x80000000 else -(0x100000000 - vv)
2498         d.putBetterType('%sQV4::Value (int32)' % ns)
2499         d.putValue('%d' % vv)
2500     elif (v >> QV4_IsDouble_Shift):
2501         d.putBetterType('%sQV4::Value (double)' % ns)
2502         d.putValue('%x' % (v ^ QV4_NaNEncodeMask), 'float:8')
2503     elif tag == QV4_ValueType_Undefined_Type and not new:
2504         d.putBetterType('%sQV4::Value (undefined)' % ns)
2505         d.putValue('(undefined)')
2506     elif tag == QV4_ValueTypeInternal_Null_Type_Internal:
2507         d.putBetterType('%sQV4::Value (null?)' % ns)
2508         d.putValue('(null?)')
2509     elif v == 0:
2510         if new:
2511             d.putBetterType('%sQV4::Value (undefined)' % ns)
2512             d.putValue('(undefined)')
2513         else:
2514             d.putBetterType('%sQV4::Value (null)' % ns)
2515             d.putValue('(null)')
2516     #elif ((v >> QV4_IsManaged_Shift) & ~1) == 1:
2517     #    d.putBetterType('%sQV4::Value (null/undef)' % ns)
2518     #    d.putValue('(null/undef)')
2519     #elif v & QV4_IsNullOrBooleanMask:
2520     #    d.putBetterType('%sQV4::Value (null/bool)' % ns)
2521     #    d.putValue('(null/bool)')
2522     #    d.putValue(v & 1)
2523     else:
2524         (parentv, flags, pad, className) = d.split('pIIp', vtable)
2525         #vtable = value['m']['vtable']
2526         if flags & 2:  # isString'
2527             d.putBetterType('%sQV4::Value (string)' % ns)
2528             qdump__QV4__Heap__String(d, d.createValue(v, ns + 'QV4::Heap::String'))
2529             #d.putStringValue(d.extractPointer(value) + 2 * d.ptrSize())
2530             #d.putValue('ptr: 0x%x' % d.extractPointer(value))
2531             return
2532         elif flags & 4:  # isObject
2533             d.putBetterType('%sQV4::Value (object)' % ns)
2534             #QV4_putObjectValue(d, d.extractPointer(value) + 2 * d.ptrSize())
2535             arrayVTable = d.symbolAddress(ns + 'QV4::ArrayObject::static_vtbl')
2536             #DumperBase.warn('ARRAY VTABLE: 0x%x' % arrayVTable)
2537             d.putNumChild(1)
2538             d.putItem(d.createValue(d.extractPointer(value) + 2 * d.ptrSize(), ns + 'QV4::Object'))
2539             return
2540         elif flags & 8:  # isFunction
2541             d.putBetterType('%sQV4::Value (function)' % ns)
2542             d.putEmptyValue()
2543         else:
2544             d.putBetterType('%sQV4::Value (unknown)' % ns)
2545             #d.putValue('[0x%x]' % v)
2546             d.putValue('[0x%x : flag 0x%x : tag 0x%x]' % (v, flags, tag))
2547     if d.isExpanded():
2548         with Children(d):
2549             with SubItem(d, '[raw]'):
2550                 d.putValue('[0x%x]' % v)
2551                 d.putType(' ')
2552                 d.putNumChild(0)
2553             with SubItem(d, '[vtable]'):
2554                 d.putItem(d.createValue(vtable, ns + 'QV4::VTable'))
2555                 d.putType(' ')
2556                 d.putNumChild(0)
2557             d.putFields(value)
2558 
2559 
2560 def qdump__QV__PropertyHashData(d, value):
2561     (ref, alloc, size, numBits, entries) = value.split('IIIIp')
2562     d.putItemCount(size)
2563     if d.isExpanded():
2564         with Children(d):
2565             d.putFields(value)
2566 
2567 
2568 def qdump__QV__PropertyHash(d, value):
2569     qdump__QV__PropertyHashData(d, d.createValue(d.extractPointer(), value.type.name + 'Data'))
2570 
2571 
2572 def qdump__QV4__Scoped(d, value):
2573     innerType = value.type[0]
2574     d.putItem(d.createValue(value.extractPointer(), innerType))
2575     #d.putEmptyValue()
2576     #if d.isExpanded():
2577     #    with Children(d):
2578     #        d.putSubItem('[]', d.createValue(value.extractPointer(), innerType))
2579     #        d.putFields(value)
2580 
2581 
2582 def qdump__QV4__ScopedString(d, value):
2583     innerType = value.type[0]
2584     qdump__QV4__String(d, d.createValue(value.extractPointer(), innerType))
2585 
2586 
2587 def qdump__QJSValue(d, value):
2588     if d.ptrSize() == 4:
2589         qdump_32__QJSValue(d, value)
2590     else:
2591         qdump_64__QJSValue(d, value)
2592 
2593 
2594 def qdump_32__QJSValue(d, value):
2595     ns = d.qtNamespace()
2596     dd = value.split('I')[0]
2597     d.putValue('[0x%x]' % dd)
2598     if dd == 0:
2599         d.putValue('(null)')
2600         d.putType(value.type.name + ' (null)')
2601     elif dd & 1:
2602         variant = d.createValue(dd & ~3, ns + 'QVariant')
2603         qdump__QVariant(d, variant)
2604         d.putBetterType(d.currentType.value.replace('QVariant', 'QJSValue', 1))
2605     elif dd & 3 == 0:
2606         v4value = d.createValue(dd, ns + 'QV4::Value')
2607         qdump_32__QV4__Value(d, v4value)
2608         d.putBetterType(d.currentType.value.replace('QV4::Value', 'QJSValue', 1))
2609         return
2610     if d.isExpanded():
2611         with Children(d):
2612             with SubItem(d, '[raw]'):
2613                 d.putValue('[0x%x]' % dd)
2614                 d.putType(' ')
2615                 d.putNumChild(0)
2616             d.putFields(value)
2617 
2618 
2619 def qdump_64__QJSValue(d, value):
2620     ns = d.qtNamespace()
2621     dd = value.split('Q')[0]
2622     if dd == 0:
2623         d.putValue('(null)')
2624         d.putType(value.type.name + ' (null)')
2625     elif dd & 1:
2626         variant = d.createValue(dd & ~3, ns + 'QVariant')
2627         qdump__QVariant(d, variant)
2628         d.putBetterType(d.currentType.value.replace('QVariant', 'QJSValue', 1))
2629     else:
2630         d.putEmptyValue()
2631         #qdump__QV4__Value(d, d.createValue(dd, ns + 'QV4::Value'))
2632         #return
2633     if d.isExpanded():
2634         with Children(d):
2635             with SubItem(d, '[raw]'):
2636                 d.putValue('[0x%x]' % dd)
2637                 d.putType(' ')
2638                 d.putNumChild(0)
2639             d.putFields(value)
2640 
2641 
2642 def qdump__QQmlBinding(d, value):
2643     d.putEmptyValue()
2644     if d.isExpanded():
2645         with Children(d):
2646             d.putCallItem('expressionIdentifier', '@QString',
2647                           value, 'expressionIdentifier')
2648             d.putFields(value)
2649 
2650 
2651 #######################################################################
2652 #
2653 # Webkit
2654 #
2655 #######################################################################
2656 
2657 
2658 def jstagAsString(tag):
2659     # enum { Int32Tag =        0xffffffff };
2660     # enum { CellTag =         0xfffffffe };
2661     # enum { TrueTag =         0xfffffffd };
2662     # enum { FalseTag =        0xfffffffc };
2663     # enum { NullTag =         0xfffffffb };
2664     # enum { UndefinedTag =    0xfffffffa };
2665     # enum { EmptyValueTag =   0xfffffff9 };
2666     # enum { DeletedValueTag = 0xfffffff8 };
2667     if tag == -1:
2668         return 'Int32'
2669     if tag == -2:
2670         return 'Cell'
2671     if tag == -3:
2672         return 'True'
2673     if tag == -4:
2674         return 'Null'
2675     if tag == -5:
2676         return 'Undefined'
2677     if tag == -6:
2678         return 'Empty'
2679     if tag == -7:
2680         return 'Deleted'
2681     return 'Unknown'
2682 
2683 
2684 def qdump__QTJSC__JSValue(d, value):
2685     d.putEmptyValue()
2686     d.putNumChild(1)
2687     if d.isExpanded():
2688         with Children(d):
2689             tag = value['u']['asBits']['tag']
2690             payload = value['u']['asBits']['payload']
2691             #d.putIntItem('tag', tag)
2692             with SubItem(d, 'tag'):
2693                 d.putValue(jstagAsString(int(tag)))
2694                 d.putNoType()
2695                 d.putNumChild(0)
2696 
2697             d.putIntItem('payload', int(payload))
2698             d.putFields(value['u'])
2699 
2700             if tag == -2:
2701                 cellType = d.lookupType('QTJSC::JSCell').pointer()
2702                 d.putSubItem('cell', payload.cast(cellType))
2703 
2704             try:
2705                 # FIXME: This might not always be a variant.
2706                 delegateType = d.lookupType(d.qtNamespace() + 'QScript::QVariantDelegate').pointer()
2707                 delegate = scriptObject['d']['delegate'].cast(delegateType)
2708                 #d.putSubItem('delegate', delegate)
2709                 variant = delegate['m_value']
2710                 d.putSubItem('variant', variant)
2711             except:
2712                 pass
2713 
2714 
2715 def qdump__QScriptValue(d, value):
2716     # structure:
2717     #  engine        QScriptEnginePrivate
2718     #  jscValue      QTJSC::JSValue
2719     #  next          QScriptValuePrivate *
2720     #  numberValue   5.5987310416280426e-270 myns::qsreal
2721     #  prev          QScriptValuePrivate *
2722     #  ref           QBasicAtomicInt
2723     #  stringValue   QString
2724     #  type          QScriptValuePrivate::Type: { JavaScriptCore, Number, String }
2725     #d.putEmptyValue()
2726     dd = value['d_ptr']['d']
2727     ns = d.qtNamespace()
2728     if dd.pointer() == 0:
2729         d.putValue('(invalid)')
2730         d.putNumChild(0)
2731         return
2732     if int(dd['type']) == 1:  # Number
2733         d.putValue(dd['numberValue'])
2734         d.putType('%sQScriptValue (Number)' % ns)
2735         d.putNumChild(0)
2736         return
2737     if int(dd['type']) == 2:  # String
2738         d.putStringValue(dd['stringValue'])
2739         d.putType('%sQScriptValue (String)' % ns)
2740         return
2741 
2742     d.putType('%sQScriptValue (JSCoreValue)' % ns)
2743     x = dd['jscValue']['u']
2744     tag = x['asBits']['tag']
2745     payload = x['asBits']['payload']
2746     #isValid = int(x['asBits']['tag']) != -6   # Empty
2747     #isCell = int(x['asBits']['tag']) == -2
2748     #DumperBase.warn('IS CELL: %s ' % isCell)
2749     #isObject = False
2750     #className = 'UNKNOWN NAME'
2751     #if isCell:
2752     #    # isCell() && asCell()->isObject();
2753     #    # in cell: m_structure->typeInfo().type() == ObjectType;
2754     #    cellType = d.lookupType('QTJSC::JSCell').pointer()
2755     #    cell = payload.cast(cellType).dereference()
2756     #    dtype = 'NO DYNAMIC TYPE'
2757     #    try:
2758     #        dtype = cell.dynamic_type
2759     #    except:
2760     #        pass
2761     #    warn('DYNAMIC TYPE: %s' % dtype)
2762     #    warn('STATUC  %s' % cell.type)
2763     #    type = cell['m_structure']['m_typeInfo']['m_type']
2764     #    isObject = int(type) == 7 # ObjectType;
2765     #    className = 'UNKNOWN NAME'
2766     #DumperBase.warn('IS OBJECT: %s ' % isObject)
2767 
2768     #inline bool JSCell::inherits(const ClassInfo* info) const
2769     #for (const ClassInfo* ci = classInfo(); ci; ci = ci->parentClass) {
2770     #    if (ci == info)
2771     #        return true;
2772     #return false;
2773 
2774     try:
2775         # This might already fail for 'native' payloads.
2776         scriptObjectType = d.lookupType(ns + 'QScriptObject').pointer()
2777         scriptObject = payload.cast(scriptObjectType)
2778 
2779         # FIXME: This might not always be a variant.
2780         delegateType = d.lookupType(ns + 'QScript::QVariantDelegate').pointer()
2781         delegate = scriptObject['d']['delegate'].cast(delegateType)
2782         #d.putSubItem('delegate', delegate)
2783 
2784         variant = delegate['m_value']
2785         #d.putSubItem('variant', variant)
2786         t = qdump__QVariant(d, variant)
2787         # Override the 'QVariant (foo)' output
2788         d.putBetterType('%sQScriptValue (%s)' % (ns, t))
2789         if t != 'JSCoreValue':
2790             return
2791     except:
2792         pass
2793 
2794     # This is a 'native' JSCore type for e.g. QDateTime.
2795     d.putValue('<native>')
2796     d.putNumChild(1)
2797     if d.isExpanded():
2798         with Children(d):
2799             d.putSubItem('jscValue', dd['jscValue'])
2800 
2801 
2802 def qdump__QQmlAccessorProperties__Properties(d, value):
2803     size = int(value['count'])
2804     d.putItemCount(size)
2805     if d.isExpanded():
2806         d.putArrayData(value['properties'], size)
2807 
2808 
2809 #
2810 # QJson
2811 #
2812 
2813 def qdumpHelper_qle_cutBits(value, offset, length):
2814     return (value >> offset) & ((1 << length) - 1)
2815 
2816 
2817 def qdump__QJsonPrivate__qle_bitfield(d, value):
2818     offset = value.type[0]
2819     length = value.type[1]
2820     val = value['val'].integer()
2821     d.putValue('%s' % qdumpHelper_qle_cutBits(val, offset, length))
2822     d.putNumChild(0)
2823 
2824 
2825 def qdumpHelper_qle_signedbitfield_value(d, value):
2826     offset = value.type[0]
2827     length = value.type[1]
2828     val = value['val'].integer()
2829     val = (val >> offset) & ((1 << length) - 1)
2830     if val >= (1 << (length - 1)):
2831         val -= (1 << (length - 1))
2832     return val
2833 
2834 
2835 def qdump__QJsonPrivate__qle_signedbitfield(d, value):
2836     d.putValue('%s' % qdumpHelper_qle_signedbitfield_value(d, value))
2837     d.putNumChild(0)
2838 
2839 
2840 def qdump__QJsonPrivate__q_littleendian(d, value):
2841     d.putValue('%s' % value['val'].integer())
2842     d.putNumChild(0)
2843 
2844 
2845 def qdumpHelper_QJsonValue(d, data, base, pv):
2846     """
2847     Parameters are the parameters to the
2848     QJsonValue(QJsonPrivate::Data *data, QJsonPrivate::Base *base,
2849                const QJsonPrivate::Value& pv)
2850     constructor. We 'inline' the construction here.
2851 
2852     data is passed as pointer integer
2853     base is passed as pointer integer
2854     pv is passed as 32 bit integer.
2855     """
2856     d.checkIntType(data)
2857     d.checkIntType(base)
2858     d.checkIntType(pv)
2859 
2860     t = qdumpHelper_qle_cutBits(pv, 0, 3)
2861     v = qdumpHelper_qle_cutBits(pv, 5, 27)
2862     latinOrIntValue = qdumpHelper_qle_cutBits(pv, 3, 1)
2863 
2864     if t == 0:
2865         d.putType('QJsonValue (Null)')
2866         d.putValue('Null')
2867         d.putNumChild(0)
2868         return
2869     if t == 1:
2870         d.putType('QJsonValue (Bool)')
2871         d.putValue('true' if v else 'false')
2872         d.putNumChild(0)
2873         return
2874     if t == 2:
2875         d.putType('QJsonValue (Number)')
2876         if latinOrIntValue:
2877             w = toInteger(v)
2878             if w >= 0x4000000:
2879                 w -= 0x8000000
2880             d.putValue(w)
2881         else:
2882             data = base + v
2883             f = d.split('d', data)[0]
2884             d.putValue(str(f))
2885         d.putNumChild(0)
2886         return
2887     if t == 3:
2888         d.putType('QJsonValue (String)')
2889         data = base + v
2890         if latinOrIntValue:
2891             length = d.extractUShort(data)
2892             d.putValue(d.readMemory(data + 2, length), 'latin1')
2893         else:
2894             length = d.extractUInt(data)
2895             d.putValue(d.readMemory(data + 4, length * 2), 'utf16')
2896         d.putNumChild(0)
2897         return
2898     if t == 4:
2899         d.putType('QJsonValue (Array)')
2900         qdumpHelper_QJsonArray(d, data, base + v)
2901         return
2902     if t == 5:
2903         d.putType('QJsonValue (Object)')
2904         qdumpHelper_QJsonObject(d, data, base + v)
2905         d.putNumChild(0)
2906 
2907 
2908 def qdumpHelper_QJsonArray(d, data, array):
2909     """
2910     Parameters are the parameters to the
2911     QJsonArray(QJsonPrivate::Data *data, QJsonPrivate::Array *array)
2912     constructor. We 'inline' the construction here.
2913 
2914     array is passed as integer pointer to the QJsonPrivate::Base object.
2915     """
2916 
2917     if data:
2918         # The 'length' part of the _dummy member:
2919         n = qdumpHelper_qle_cutBits(d.extractUInt(array + 4), 1, 31)
2920     else:
2921         n = 0
2922 
2923     d.putItemCount(n)
2924     if d.isExpanded():
2925         with Children(d, maxNumChild=1000):
2926             table = array + d.extractUInt(array + 8)
2927             for i in range(n):
2928                 with SubItem(d, i):
2929                     qdumpHelper_QJsonValue(d, data, array, d.extractUInt(table + 4 * i))
2930 
2931 
2932 def qdumpHelper_QJsonObject(d, data, obj):
2933     """
2934     Parameters are the parameters to the
2935     QJsonObject(QJsonPrivate::Data *data, QJsonPrivate::Object *object);
2936     constructor. We "inline" the construction here.
2937 
2938     obj is passed as integer pointer to the QJsonPrivate::Base object.
2939     """
2940 
2941     if data:
2942         # The 'length' part of the _dummy member:
2943         n = qdumpHelper_qle_cutBits(d.extractUInt(obj + 4), 1, 31)
2944     else:
2945         n = 0
2946 
2947     d.putItemCount(n)
2948     if d.isExpanded():
2949         with Children(d, maxNumChild=1000):
2950             table = obj + d.extractUInt(obj + 8)
2951             for i in range(n):
2952                 with SubItem(d, i):
2953                     entryPtr = table + 4 * i  # entryAt(i)
2954                     entryStart = obj + d.extractUInt(entryPtr)  # Entry::value
2955                     keyStart = entryStart + 4  # sizeof(QJsonPrivate::Entry) == 4
2956                     val = d.extractInt(entryStart)
2957                     key = d.extractInt(keyStart)
2958                     isLatinKey = qdumpHelper_qle_cutBits(val, 4, 1)
2959                     if isLatinKey:
2960                         keyLength = d.extractUShort(keyStart)
2961                         d.putField('key', d.readMemory(keyStart + 2, keyLength))
2962                         d.putField('keyencoded', 'latin1')
2963                     else:
2964                         keyLength = d.extractUInt(keyStart)
2965                         d.putField('key', d.readMemory(keyStart + 4, keyLength))
2966                         d.putField('keyencoded', 'utf16')
2967 
2968                     qdumpHelper_QJsonValue(d, data, obj, val)
2969 
2970 
2971 def qdump__QJsonValue(d, value):
2972     (data, dd, t) = value.split('QpI')
2973     if t == 0:
2974         d.putType('QJsonValue (Null)')
2975         d.putValue('Null')
2976         d.putNumChild(0)
2977         return
2978     if t == 1:
2979         d.putType('QJsonValue (Bool)')
2980         v = value.split('b')
2981         d.putValue('true' if v else 'false')
2982         d.putNumChild(0)
2983         return
2984     if t == 2:
2985         d.putType('QJsonValue (Number)')
2986         d.putValue(value.split('d'))
2987         d.putNumChild(0)
2988         return
2989     if t == 3:
2990         d.putType('QJsonValue (String)')
2991         elided, base = d.encodeStringHelper(data, d.displayStringLimit)
2992         d.putValue(base, 'utf16', elided=elided)
2993         d.putNumChild(0)
2994         return
2995     if t == 4:
2996         d.putType('QJsonValue (Array)')
2997         qdumpHelper_QJsonArray(d, dd, data)
2998         return
2999     if t == 5:
3000         d.putType('QJsonValue (Object)')
3001         qdumpHelper_QJsonObject(d, dd, data)
3002         return
3003     d.putType('QJsonValue (Undefined)')
3004     d.putEmptyValue()
3005     d.putNumChild(0)
3006 
3007 
3008 def qdump__QJsonArray(d, value):
3009     qdumpHelper_QJsonArray(d, value['d'].pointer(), value['a'].pointer())
3010 
3011 
3012 def qdump__QJsonObject(d, value):
3013     qdumpHelper_QJsonObject(d, value['d'].pointer(), value['o'].pointer())
3014 
3015 
3016 def qdump__QSqlResultPrivate(d, value):
3017     # QSqlResult *q_ptr;
3018     # QPointer<QSqlDriver> sqldriver;
3019     # int idx;
3020     # QString sql;
3021     # bool active;
3022     # bool isSel;
3023     # QSqlError error;
3024     # bool forwardOnly;
3025     # QSql::NumericalPrecisionPolicy precisionPolicy;
3026     # int bindCount;
3027     # QSqlResult::BindingSyntax binds;
3028     # QString executedQuery;
3029     # QHash<int, QSql::ParamType> types;
3030     # QVector<QVariant> values;
3031     # QHash<QString, QList<int> > indexes;
3032     # QVector<QHolder> holders
3033     vptr, qptr, sqldriver1, sqldriver2, idx, pad, sql, active, isSel, pad, \
3034         error1, error2, error3, \
3035         forwardOnly, pad, precisionPolicy, bindCount, \
3036         binds, executedQuery, types, values, indexes, holders = \
3037         value.split('ppppi@{QString}bb@pppb@iiii{QString}ppp')
3038 
3039     d.putStringValue(sql)
3040     d.putPlainChildren(value)
3041 
3042 
3043 def qdump__QSqlField(d, value):
3044     val, dptr = value.split('{QVariant}p')
3045     d.putNumChild(1)
3046     qdump__QVariant(d, val)
3047     d.putBetterType(d.currentType.value.replace('QVariant', 'QSqlField'))
3048     d.putPlainChildren(value)
3049 
3050 
3051 def qdump__QLazilyAllocated(d, value):
3052     p = value.extractPointer()
3053     if p == 0:
3054         d.putValue("(null)")
3055         d.putNumChild(0)
3056     else:
3057         d.putItem(d.createValue(p, value.type[0]))
3058         d.putBetterType(value.type)
3059 
3060 
3061 def qdump__qfloat16(d, value):
3062     h = value.split('H')[0]
3063     # Stole^H^H^HHeavily inspired by J.F. Sebastian at
3064     # http://math.stackexchange.com/questions/1128204/how-to-convert-
3065     # from-floating-point-binary-to-decimal-in-half-precision16-bits
3066     sign = h >> 15
3067     exp = (h >> 10) & 0b011111
3068     fraction = h & (2**10 - 1)
3069     if exp == 0:
3070         if fraction == 0:
3071             res = -0.0 if sign else 0.0
3072         else:
3073             res = (-1)**sign * fraction / 2**10 * 2**(-14)  # subnormal
3074     elif exp == 0b11111:
3075         res = ('-inf' if sign else 'inf') if fraction == 0 else 'nan'
3076     else:
3077         res = (-1)**sign * (1 + 1. * fraction / 2**10) * 2**(exp - 15)
3078     d.putValue(res)
3079     d.putNumChild(1)
3080     d.putPlainChildren(value)
