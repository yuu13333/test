Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
2 #    not use this file except in compliance with the License. You may obtain
3 #    a copy of the License at
4 #
5 #         http://www.apache.org/licenses/LICENSE-2.0
6 #
7 #    Unless required by applicable law or agreed to in writing, software
8 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
9 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
10 #    License for the specific language governing permissions and limitations
11 #    under the License.
12 
13 import fixtures
14 import mock
15 from oslo_utils.fixture import uuidsentinel as uuids
16 from oslo_utils import timeutils
17 
18 from nova.api.openstack.compute import admin_password
19 from nova.compute import vm_states
20 from nova.tests.unit.api.openstack import fakes
21 from nova.tests.unit import fake_instance
22 from nova.tests.unit.policies import base
23 
24 
25 class AdminPasswordPolicyTest(base.BasePolicyTest):
26     """Test Admin Password APIs policies with all possible context.
27     This class defines the set of context with different roles
28     which are allowed and not allowed to pass the policy checks.
29     With those set of context, it will call the API operation and
30     verify the expected behaviour.
31     """
32 
33     def setUp(self):
34         super(AdminPasswordPolicyTest, self).setUp()
35         self.controller = admin_password.AdminPasswordController()
36         self.req = fakes.HTTPRequest.blank('')
37         self.mock_get = self.useFixture(
38             fixtures.MockPatch('nova.api.openstack.common.get_instance')).mock
39         uuid = uuids.fake_id
40         self.instance = fake_instance.fake_instance_obj(
41                 self.project_member_context,
42                 id=1, uuid=uuid, project_id=self.project_id,
43                 vm_state=vm_states.ACTIVE,
44                 task_state=None, launched_at=timeutils.utcnow())
45         self.mock_get.return_value = self.instance
46         # Check that admin or and server owner is able to change the password
47         self.admin_authorized_contexts = [
48             self.legacy_admin_context, self.system_admin_context,
49             self.project_admin_context, self.project_member_context,
50             self.project_reader_context, self.project_foo_context]
51         # Check that non-admin is not able to change the password
52         self.admin_unauthorized_contexts = [
53             self.system_member_context, self.system_reader_context,
54             self.system_foo_context,
55             self.other_project_member_context
56         ]
57 
58     @mock.patch('nova.compute.api.API.set_admin_password')
59     def test_change_paassword_policy(self, mock_password):
60         rule_name = "os_compute_api:os-admin-password"
61         self.common_policy_check(self.admin_authorized_contexts,
62                                  self.admin_unauthorized_contexts,
63                                  rule_name, self.controller.change_password,
64                                  self.req, self.instance.uuid,
65                                  body={'changePassword': {
66                                        'adminPass': '1234pass'}})
67 
68 
69 class AdminPasswordScopeTypePolicyTest(AdminPasswordPolicyTest):
70     """Test Admin Password APIs policies with system scope enabled.
71     This class set the nova.conf [oslo_policy] enforce_scope to True
72     so that we can switch on the scope checking on oslo policy side.
73     It defines the set of context with scopped token
74     which are allowed and not allowed to pass the policy checks.
75     With those set of context, it will run the API operation and
76     verify the expected behaviour.
77     """
78 
79     def setUp(self):
80         super(AdminPasswordScopeTypePolicyTest, self).setUp()
81         self.flags(enforce_scope=True, group="oslo_policy")
