Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 # Copyright (c) 2014 Cisco Systems, Inc.
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 
16 """The Server Group API Extension."""
17 
18 from oslo_log import log as logging
19 import webob
20 from webob import exc
21 
22 from nova.api.openstack import api_version_request
23 from nova.api.openstack import common
24 from nova.api.openstack.compute.schemas import server_groups as schema
25 from nova.api.openstack import extensions
26 from nova.api.openstack import wsgi
27 from nova.api import validation
28 import nova.exception
29 from nova.i18n import _
30 from nova import objects
31 from nova.policies import server_groups as sg_policies
32 
33 LOG = logging.getLogger(__name__)
34 
35 ALIAS = "os-server-groups"
36 
37 
38 def _authorize_context(req, action):
39     context = req.environ['nova.context']
40     context.can(sg_policies.POLICY_ROOT % action)
41     return context
42 
43 
44 class ServerGroupController(wsgi.Controller):
45     """The Server group API controller for the OpenStack API."""
46 
47     def _format_server_group(self, context, group, req):
48         # the id field has its value as the uuid of the server group
49         # There is no 'uuid' key in server_group seen by clients.
50         # In addition, clients see policies as a ["policy-name"] list;
51         # and they see members as a ["server-id"] list.
52         server_group = {}
53         server_group['id'] = group.uuid
54         server_group['name'] = group.name
55         server_group['policies'] = group.policies or []
56         # NOTE(danms): This has been exposed to the user, but never used.
57         # Since we can't remove it, just make sure it's always empty.
58         server_group['metadata'] = {}
59         members = []
60         if group.members:
61             # Display the instances that are not deleted.
62             filters = {'uuid': group.members, 'deleted': False}
63             instances = objects.InstanceList.get_by_filters(
64                 context, filters=filters)
65             members = [instance.uuid for instance in instances]
66         server_group['members'] = members
67         # Add project id information to the response data for
68         # API version v2.13
69         if api_version_request.is_supported(req, min_version="2.13"):
70             server_group['project_id'] = group.project_id
71             server_group['user_id'] = group.user_id
72         return server_group
73 
74     @extensions.expected_errors(404)
75     def show(self, req, id):
76         """Return data about the given server group."""
77         context = _authorize_context(req, 'show')
78         try:
79             sg = objects.InstanceGroup.get_by_uuid(context, id)
80         except nova.exception.InstanceGroupNotFound as e:
81             raise webob.exc.HTTPNotFound(explanation=e.format_message())
82         return {'server_group': self._format_server_group(context, sg, req)}
83 
84     @wsgi.response(204)
85     @extensions.expected_errors(404)
86     def delete(self, req, id):
87         """Delete an server group."""
88         context = _authorize_context(req, 'delete')
89         try:
90             sg = objects.InstanceGroup.get_by_uuid(context, id)
91         except nova.exception.InstanceGroupNotFound as e:
92             raise webob.exc.HTTPNotFound(explanation=e.format_message())
93         try:
94             sg.destroy()
95         except nova.exception.InstanceGroupNotFound as e:
96             raise webob.exc.HTTPNotFound(explanation=e.format_message())
97 
98     @extensions.expected_errors(())
99     def index(self, req):
100         """Returns a list of server groups."""
101         context = _authorize_context(req, 'index')
102         project_id = context.project_id
103         if 'all_projects' in req.GET and context.is_admin:
104             sgs = objects.InstanceGroupList.get_all(context)
105         else:
106             sgs = objects.InstanceGroupList.get_by_project_id(
107                     context, project_id)
108         limited_list = common.limited(sgs.objects, req)
109         result = [self._format_server_group(context, group, req)
110                   for group in limited_list]
111         return {'server_groups': result}
112 
113     @wsgi.Controller.api_version("2.1")
114     @extensions.expected_errors((400, 403))
115     @validation.schema(schema.create, "2.1", "2.14")
116     @validation.schema(schema.create_v215, "2.15")
117     def create(self, req, body):
118         """Creates a new server group."""
119         context = _authorize_context(req, 'create')
120 
121         count = objects.Quotas.count(context, 'server_groups',
122                                      context.project_id, context.user_id)
123         try:
124             objects.Quotas.limit_check(context, server_groups=count + 1)
125         except nova.exception.OverQuota:
126             msg = _("Quota exceeded, too many server groups.")
127             raise exc.HTTPForbidden(explanation=msg)
128 
129         vals = body['server_group']
130         sg = objects.InstanceGroup(context)
131         sg.project_id = context.project_id
132         sg.user_id = context.user_id
133         try:
134             sg.name = vals.get('name')
135             sg.policies = vals.get('policies')
136             sg.create()
137         except ValueError as e:
138             raise exc.HTTPBadRequest(explanation=e)
139 
140         return {'server_group': self._format_server_group(context, sg, req)}
141 
142 
143 class ServerGroups(extensions.V21APIExtensionBase):
144     """Server group support."""
145     name = "ServerGroups"
146     alias = ALIAS
147     version = 1
148 
149     def get_resources(self):
150         res = extensions.ResourceExtension(
151                  ALIAS, controller=ServerGroupController(),
152                  member_actions={"action": "POST", })
153         return [res]
154 
155     def get_controller_extensions(self):
156         return []
