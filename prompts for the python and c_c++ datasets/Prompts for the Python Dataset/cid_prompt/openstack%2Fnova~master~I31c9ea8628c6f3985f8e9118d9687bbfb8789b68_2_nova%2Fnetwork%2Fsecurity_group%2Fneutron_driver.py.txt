Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 # Copyright 2013 Nicira, Inc.
2 # All Rights Reserved
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 
16 import sys
17 
18 import netaddr
19 from neutronclient.common import exceptions as n_exc
20 from neutronclient.neutron import v2_0 as neutronv20
21 from oslo_log import log as logging
22 from oslo_utils import excutils
23 from oslo_utils import uuidutils
24 import six
25 from webob import exc
26 
27 from nova import exception
28 from nova.i18n import _
29 from nova.network.neutronv2 import api as neutronapi
30 from nova.network.security_group import security_group_base
31 from nova import utils
32 
33 
34 LOG = logging.getLogger(__name__)
35 
36 # NOTE: Neutron client has a max URL length of 8192, so we have
37 # to limit the number of IDs we include in any single search.  Really
38 # doesn't seem to be any point in making this a config value.
39 MAX_SEARCH_IDS = 150
40 
41 
42 class SecurityGroupAPI(security_group_base.SecurityGroupBase):
43 
44     id_is_uuid = True
45 
46     def create_security_group(self, context, name, description):
47         neutron = neutronapi.get_client(context)
48         body = self._make_neutron_security_group_dict(name, description)
49         try:
50             security_group = neutron.create_security_group(
51                 body).get('security_group')
52         except n_exc.BadRequest as e:
53             raise exception.Invalid(six.text_type(e))
54         except n_exc.NeutronClientException as e:
55             exc_info = sys.exc_info()
56             LOG.exception("Neutron Error creating security group %s", name)
57             if e.status_code == 401:
58                 # TODO(arosen) Cannot raise generic response from neutron here
59                 # as this error code could be related to bad input or over
60                 # quota
61                 raise exc.HTTPBadRequest()
62             elif e.status_code == 409:
63                 self.raise_over_quota(six.text_type(e))
64             six.reraise(*exc_info)
65         return self._convert_to_nova_security_group_format(security_group)
66 
67     def update_security_group(self, context, security_group,
68                               name, description):
69         neutron = neutronapi.get_client(context)
70         body = self._make_neutron_security_group_dict(name, description)
71         try:
72             security_group = neutron.update_security_group(
73                 security_group['id'], body).get('security_group')
74         except n_exc.NeutronClientException as e:
75             exc_info = sys.exc_info()
76             LOG.exception("Neutron Error updating security group %s", name)
77             if e.status_code == 401:
78                 # TODO(arosen) Cannot raise generic response from neutron here
79                 # as this error code could be related to bad input or over
80                 # quota
81                 raise exc.HTTPBadRequest()
82             six.reraise(*exc_info)
83         return self._convert_to_nova_security_group_format(security_group)
84 
85     def validate_property(self, value, property, allowed):
86         """Validate given security group property.
87 
88         :param value:    the value to validate, as a string or unicode
89         :param property: the property, either 'name' or 'description'
90         :param allowed:  the range of characters allowed, but not used because
91                          Neutron is allowing any characters.
92         """
93 
94         # NOTE: If using nova-network as the backend, min_length is 1. However
95         # if using Neutron, Nova has allowed empty string as its history.
96         # So this min_length should be 0 for passing the existing requests.
97         utils.check_string_length(value, name=property, min_length=0,
98                                   max_length=255)
99 
100     def _convert_to_nova_security_group_format(self, security_group):
101         nova_group = {}
102         nova_group['id'] = security_group['id']
103         nova_group['description'] = security_group['description']
104         nova_group['name'] = security_group['name']
105         nova_group['project_id'] = security_group['tenant_id']
106         nova_group['rules'] = []
107         for rule in security_group.get('security_group_rules', []):
108             if rule['direction'] == 'ingress':
109                 nova_group['rules'].append(
110                     self._convert_to_nova_security_group_rule_format(rule))
111 
112         return nova_group
113 
114     def _convert_to_nova_security_group_rule_format(self, rule):
115         nova_rule = {}
116         nova_rule['id'] = rule['id']
117         nova_rule['parent_group_id'] = rule['security_group_id']
118         nova_rule['protocol'] = rule['protocol']
119         if (nova_rule['protocol'] and rule.get('port_range_min') is None and
120                 rule.get('port_range_max') is None):
121             if rule['protocol'].upper() in ['TCP', 'UDP']:
122                 nova_rule['from_port'] = 1
123                 nova_rule['to_port'] = 65535
124             else:
125                 nova_rule['from_port'] = -1
126                 nova_rule['to_port'] = -1
127         else:
128             nova_rule['from_port'] = rule.get('port_range_min')
129             nova_rule['to_port'] = rule.get('port_range_max')
130         nova_rule['group_id'] = rule['remote_group_id']
131         nova_rule['cidr'] = self.parse_cidr(rule.get('remote_ip_prefix'))
132         return nova_rule
133 
134     def get(self, context, name=None, id=None, map_exception=False):
135         neutron = neutronapi.get_client(context)
136         try:
137             if not id and name:
138                 # NOTE(flwang): The project id should be honoured so as to get
139                 # the correct security group id when user(with admin role but
140                 # non-admin project) try to query by name, so as to avoid
141                 # getting more than duplicated records with the same name.
142                 id = neutronv20.find_resourceid_by_name_or_id(
143                     neutron, 'security_group', name, context.project_id)
144             group = neutron.show_security_group(id).get('security_group')
145             return self._convert_to_nova_security_group_format(group)
146         except n_exc.NeutronClientNoUniqueMatch as e:
147             raise exception.NoUniqueMatch(six.text_type(e))
148         except n_exc.NeutronClientException as e:
149             exc_info = sys.exc_info()
150             if e.status_code == 404:
151                 LOG.debug("Neutron security group %s not found", name)
152                 raise exception.SecurityGroupNotFound(six.text_type(e))
153             else:
154                 LOG.error("Neutron Error: %s", e)
155                 six.reraise(*exc_info)
156         except TypeError as e:
157             LOG.error("Neutron Error: %s", e)
158             msg = _("Invalid security group name: %(name)s.") % {"name": name}
159             raise exception.SecurityGroupNotFound(six.text_type(msg))
160 
161     def list(self, context, names=None, ids=None, project=None,
162              search_opts=None):
163         """Returns list of security group rules owned by tenant."""
164         neutron = neutronapi.get_client(context)
165         params = {}
166         search_opts = search_opts if search_opts else {}
167         if names:
168             params['name'] = names
169         if ids:
170             params['id'] = ids
171 
172         # NOTE(jeffrey4l): list all the security groups when following
173         # conditions are met
174         #   * names and ids don't exist.
175         #   * it is admin context and all_tenants exist in search_opts.
176         #   * project is not specified.
177         list_all_tenants = (context.is_admin
178                             and 'all_tenants' in search_opts
179                             and not any([names, ids]))
180         # NOTE(jeffrey4l): The neutron doesn't have `all-tenants` concept.
181         # All the security group will be returned if the project/tenant
182         # id is not passed.
183         if project and not list_all_tenants:
184             params['tenant_id'] = project
185         try:
186             security_groups = neutron.list_security_groups(**params).get(
187                 'security_groups')
188         except n_exc.NeutronClientException:
189             with excutils.save_and_reraise_exception():
190                 LOG.exception("Neutron Error getting security groups")
191         converted_rules = []
192         for security_group in security_groups:
193             converted_rules.append(
194                 self._convert_to_nova_security_group_format(security_group))
195         return converted_rules
196 
197     def validate_id(self, id):
198         if not uuidutils.is_uuid_like(id):
199             msg = _("Security group id should be uuid")
200             self.raise_invalid_property(msg)
201         return id
202 
203     def destroy(self, context, security_group):
204         """This function deletes a security group."""
205 
206         neutron = neutronapi.get_client(context)
207         try:
208             neutron.delete_security_group(security_group['id'])
209         except n_exc.NeutronClientException as e:
210             exc_info = sys.exc_info()
211             if e.status_code == 404:
212                 self.raise_not_found(six.text_type(e))
213             elif e.status_code == 409:
214                 self.raise_invalid_property(six.text_type(e))
215             else:
216                 LOG.error("Neutron Error: %s", e)
217                 six.reraise(*exc_info)
218 
219     def add_rules(self, context, id, name, vals):
220         """Add security group rule(s) to security group.
221 
222         Note: the Nova security group API doesn't support adding multiple
223         security group rules at once but the EC2 one does. Therefore,
224         this function is written to support both. Multiple rules are
225         installed to a security group in neutron using bulk support.
226         """
227 
228         neutron = neutronapi.get_client(context)
229         body = self._make_neutron_security_group_rules_list(vals)
230         try:
231             rules = neutron.create_security_group_rule(
232                 body).get('security_group_rules')
233         except n_exc.NeutronClientException as e:
234             exc_info = sys.exc_info()
235             if e.status_code == 404:
236                 LOG.exception("Neutron Error getting security group %s", name)
237                 self.raise_not_found(six.text_type(e))
238             elif e.status_code == 409:
239                 LOG.exception("Neutron Error adding rules to security "
240                               "group %s", name)
241                 self.raise_over_quota(six.text_type(e))
242             elif e.status_code == 400:
243                 LOG.exception("Neutron Error: %s", e)
244                 self.raise_invalid_property(six.text_type(e))
245             else:
246                 six.reraise(*exc_info)
247         converted_rules = []
248         for rule in rules:
249             converted_rules.append(
250                 self._convert_to_nova_security_group_rule_format(rule))
251         return converted_rules
252 
253     def _make_neutron_security_group_dict(self, name, description):
254         return {'security_group': {'name': name,
255                                    'description': description}}
256 
257     def _make_neutron_security_group_rules_list(self, rules):
258         new_rules = []
259         for rule in rules:
260             new_rule = {}
261             # nova only supports ingress rules so all rules are ingress.
262             new_rule['direction'] = "ingress"
263             new_rule['protocol'] = rule.get('protocol')
264 
265             # FIXME(arosen) Nova does not expose ethertype on security group
266             # rules. Therefore, in the case of self referential rules we
267             # should probably assume they want to allow both IPv4 and IPv6.
268             # Unfortunately, this would require adding two rules in neutron.
269             # The reason we do not do this is because when the user using the
270             # nova api wants to remove the rule we'd have to have some way to
271             # know that we should delete both of these rules in neutron.
272             # For now, self referential rules only support IPv4.
273             if not rule.get('cidr'):
274                 new_rule['ethertype'] = 'IPv4'
275             else:
276                 version = netaddr.IPNetwork(rule.get('cidr')).version
277                 new_rule['ethertype'] = 'IPv6' if version == 6 else 'IPv4'
278             new_rule['remote_ip_prefix'] = rule.get('cidr')
279             new_rule['security_group_id'] = rule.get('parent_group_id')
280             new_rule['remote_group_id'] = rule.get('group_id')
281             if 'from_port' in rule and rule['from_port'] != -1:
282                 new_rule['port_range_min'] = rule['from_port']
283             if 'to_port' in rule and rule['to_port'] != -1:
284                 new_rule['port_range_max'] = rule['to_port']
285             new_rules.append(new_rule)
286         return {'security_group_rules': new_rules}
287 
288     def remove_rules(self, context, security_group, rule_ids):
289         neutron = neutronapi.get_client(context)
290         rule_ids = set(rule_ids)
291         try:
292             # The ec2 api allows one to delete multiple security group rules
293             # at once. Since there is no bulk delete for neutron the best
294             # thing we can do is delete the rules one by one and hope this
295             # works.... :/
296             for rule_id in range(0, len(rule_ids)):
297                 neutron.delete_security_group_rule(rule_ids.pop())
298         except n_exc.NeutronClientException:
299             with excutils.save_and_reraise_exception():
300                 LOG.exception("Neutron Error unable to delete %s", rule_ids)
301 
302     def get_rule(self, context, id):
303         neutron = neutronapi.get_client(context)
304         try:
305             rule = neutron.show_security_group_rule(
306                 id).get('security_group_rule')
307         except n_exc.NeutronClientException as e:
308             exc_info = sys.exc_info()
309             if e.status_code == 404:
310                 LOG.debug("Neutron security group rule %s not found", id)
311                 self.raise_not_found(six.text_type(e))
312             else:
313                 LOG.error("Neutron Error: %s", e)
314                 six.reraise(*exc_info)
315         return self._convert_to_nova_security_group_rule_format(rule)
316 
317     def _get_ports_from_server_list(self, servers, neutron):
318         """Returns a list of ports used by the servers."""
319 
320         def _chunk_by_ids(servers, limit):
321             ids = []
322             for server in servers:
323                 ids.append(server['id'])
324                 if len(ids) >= limit:
325                     yield ids
326                     ids = []
327             if ids:
328                 yield ids
329 
330         # Note: Have to split the query up as the search criteria
331         # form part of the URL, which has a fixed max size
332         ports = []
333         for ids in _chunk_by_ids(servers, MAX_SEARCH_IDS):
334             search_opts = {'device_id': ids}
335             try:
336                 ports.extend(neutron.list_ports(**search_opts).get('ports'))
337             except n_exc.PortNotFoundClient:
338                 # There could be a race between deleting an instance and
339                 # retrieving its port groups from Neutron. In this case
340                 # PortNotFoundClient is raised and it can be safely ignored
341                 LOG.debug("Port not found for device with id %s", ids)
342 
343         return ports
344 
345     def _get_secgroups_from_port_list(self, ports, neutron):
346         """Returns a dict of security groups keyed by their ids."""
347 
348         def _chunk_by_ids(sg_ids, limit):
349             sg_id_list = []
350             for sg_id in sg_ids:
351                 sg_id_list.append(sg_id)
352                 if len(sg_id_list) >= limit:
353                     yield sg_id_list
354                     sg_id_list = []
355             if sg_id_list:
356                 yield sg_id_list
357 
358         # Find the set of unique SecGroup IDs to search for
359         sg_ids = set()
360         for port in ports:
361             sg_ids.update(port.get('security_groups', []))
362 
363         # Note: Have to split the query up as the search criteria
364         # form part of the URL, which has a fixed max size
365         security_groups = {}
366         for sg_id_list in _chunk_by_ids(sg_ids, MAX_SEARCH_IDS):
367             sg_search_opts = {'id': sg_id_list}
368             search_results = neutron.list_security_groups(**sg_search_opts)
369             for sg in search_results.get('security_groups'):
370                 security_groups[sg['id']] = sg
371 
372         return security_groups
373 
374     def get_instances_security_groups_bindings(self, context, servers,
375                                                detailed=False):
376         """Returns a dict(instance_id, [security_groups]) to allow obtaining
377         all of the instances and their security groups in one shot.
378         """
379 
380         neutron = neutronapi.get_client(context)
381 
382         ports = self._get_ports_from_server_list(servers, neutron)
383 
384         security_groups = self._get_secgroups_from_port_list(ports, neutron)
385 
386         instances_security_group_bindings = {}
387         for port in ports:
388             for port_sg_id in port.get('security_groups', []):
389 
390                 # Note:  have to check we found port_sg as its possible
391                 # the port has an SG that this user doesn't have access to
392                 port_sg = security_groups.get(port_sg_id)
393                 if port_sg:
394                     if detailed:
395                         sg_entry = self._convert_to_nova_security_group_format(
396                                  port_sg)
397                         instances_security_group_bindings.setdefault(
398                             port['device_id'], []).append(sg_entry)
399                     else:
400                         # name is optional in neutron so if not specified
401                         # return id
402                         name = port_sg.get('name')
403                         if not name:
404                             name = port_sg.get('id')
405                         sg_entry = {'name': name}
406                         instances_security_group_bindings.setdefault(
407                             port['device_id'], []).append(sg_entry)
408 
409         return instances_security_group_bindings
410 
411     def get_instance_security_groups(self, context, instance, detailed=False):
412         """Returns the security groups that are associated with an instance.
413         If detailed is True then it also returns the full details of the
414         security groups associated with an instance.
415         """
416         servers = [{'id': instance.uuid}]
417         sg_bindings = self.get_instances_security_groups_bindings(
418                                   context, servers, detailed)
419         return sg_bindings.get(instance.uuid, [])
420 
421     def _has_security_group_requirements(self, port):
422         port_security_enabled = port.get('port_security_enabled', True)
423         has_ip = port.get('fixed_ips')
424         deferred_ip = port.get('ip_allocation') == 'deferred'
425         if has_ip or deferred_ip:
426             return port_security_enabled
427         return False
428 
429     def add_to_instance(self, context, instance, security_group_name):
430         """Add security group to the instance."""
431 
432         neutron = neutronapi.get_client(context)
433         try:
434             security_group_id = neutronv20.find_resourceid_by_name_or_id(
435                 neutron, 'security_group',
436                 security_group_name,
437                 context.project_id)
438         except n_exc.NeutronClientNoUniqueMatch as e:
439             raise exception.NoUniqueMatch(six.text_type(e))
440         except n_exc.NeutronClientException as e:
441             exc_info = sys.exc_info()
442             if e.status_code == 404:
443                 msg = (_("Security group %(name)s is not found for "
444                          "project %(project)s") %
445                        {'name': security_group_name,
446                         'project': context.project_id})
447                 self.raise_not_found(msg)
448             else:
449                 six.reraise(*exc_info)
450         params = {'device_id': instance.uuid}
451         try:
452             ports = neutron.list_ports(**params).get('ports')
453         except n_exc.NeutronClientException:
454             with excutils.save_and_reraise_exception():
455                 LOG.exception("Neutron Error:")
456 
457         if not ports:
458             msg = (_("instance_id %s could not be found as device id on"
459                    " any ports") % instance.uuid)
460             self.raise_not_found(msg)
461 
462         for port in ports:
463             if not self._has_security_group_requirements(port):
464                 LOG.warning("Cannot add security group %(name)s to "
465                             "%(instance)s since the port %(port_id)s "
466                             "does not meet security requirements",
467                             {'name': security_group_name,
468                              'instance': instance.uuid,
469                              'port_id': port['id']})
470                 raise exception.SecurityGroupCannotBeApplied()
471             if 'security_groups' not in port:
472                 port['security_groups'] = []
473             port['security_groups'].append(security_group_id)
474             updated_port = {'security_groups': port['security_groups']}
475             try:
476                 LOG.info("Adding security group %(security_group_id)s to "
477                          "port %(port_id)s",
478                          {'security_group_id': security_group_id,
479                           'port_id': port['id']})
480                 neutron.update_port(port['id'], {'port': updated_port})
481             except n_exc.NeutronClientException as e:
482                 exc_info = sys.exc_info()
483                 if e.status_code == 400:
484                     raise exception.SecurityGroupCannotBeApplied(
485                         six.text_type(e))
486                 else:
487                     six.reraise(*exc_info)
488             except Exception:
489                 with excutils.save_and_reraise_exception():
490                     LOG.exception("Neutron Error:")
491 
492     def remove_from_instance(self, context, instance, security_group_name):
493         """Remove the security group associated with the instance."""
494         neutron = neutronapi.get_client(context)
495         try:
496             security_group_id = neutronv20.find_resourceid_by_name_or_id(
497                 neutron, 'security_group',
498                 security_group_name,
499                 context.project_id)
500         except n_exc.NeutronClientException as e:
501             exc_info = sys.exc_info()
502             if e.status_code == 404:
503                 msg = (_("Security group %(name)s is not found for "
504                          "project %(project)s") %
505                        {'name': security_group_name,
506                         'project': context.project_id})
507                 self.raise_not_found(msg)
508             else:
509                 six.reraise(*exc_info)
510         params = {'device_id': instance.uuid}
511         try:
512             ports = neutron.list_ports(**params).get('ports')
513         except n_exc.NeutronClientException:
514             with excutils.save_and_reraise_exception():
515                 LOG.exception("Neutron Error:")
516 
517         if not ports:
518             msg = (_("instance_id %s could not be found as device id on"
519                    " any ports") % instance.uuid)
520             self.raise_not_found(msg)
521 
522         found_security_group = False
523         for port in ports:
524             try:
525                 port.get('security_groups', []).remove(security_group_id)
526             except ValueError:
527                 # When removing a security group from an instance the security
528                 # group should be on both ports since it was added this way if
529                 # done through the nova api. In case it is not a 404 is only
530                 # raised if the security group is not found on any of the
531                 # ports on the instance.
532                 continue
533 
534             updated_port = {'security_groups': port['security_groups']}
535             try:
536                 LOG.info("Removing security group %(security_group_id)s from "
537                          "port %(port_id)s",
538                          {'security_group_id': security_group_id,
539                           'port_id': port['id']})
540                 neutron.update_port(port['id'], {'port': updated_port})
541                 found_security_group = True
542             except Exception:
543                 with excutils.save_and_reraise_exception():
544                     LOG.exception("Neutron Error:")
545         if not found_security_group:
546             msg = (_("Security group %(security_group_name)s not associated "
547                      "with the instance %(instance)s") %
548                    {'security_group_name': security_group_name,
549                     'instance': instance.uuid})
550             self.raise_not_found(msg)
551 
552     def get_default_rule(self, context, id):
553         msg = _("Network driver does not support this function.")
554         raise exc.HTTPNotImplemented(explanation=msg)
555 
556     def get_all_default_rules(self, context):
557         msg = _("Network driver does not support this function.")
558         raise exc.HTTPNotImplemented(explanation=msg)
559 
560     def add_default_rules(self, context, vals):
561         msg = _("Network driver does not support this function.")
562         raise exc.HTTPNotImplemented(explanation=msg)
563 
564     def remove_default_rules(self, context, rule_ids):
565         msg = _("Network driver does not support this function.")
566         raise exc.HTTPNotImplemented(explanation=msg)
567 
568     def default_rule_exists(self, context, values):
569         msg = _("Network driver does not support this function.")
570         raise exc.HTTPNotImplemented(explanation=msg)
