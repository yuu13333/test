Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 # Copyright (c) 2014 Cisco Systems, Inc.
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 
16 """The Server Group API Extension."""
17 
18 import collections
19 
20 from oslo_log import log as logging
21 import webob
22 from webob import exc
23 
24 from nova.api.openstack import api_version_request
25 from nova.api.openstack import common
26 from nova.api.openstack.compute.schemas import server_groups as schema
27 from nova.api.openstack import wsgi
28 from nova.api import validation
29 import nova.conf
30 from nova import context as nova_context
31 import nova.exception
32 from nova.i18n import _
33 from nova.limits import local as local_limit
34 from nova import objects
35 from nova.objects import service
36 from nova.policies import server_groups as sg_policies
37 
38 LOG = logging.getLogger(__name__)
39 
40 CONF = nova.conf.CONF
41 
42 
43 GROUP_POLICY_OBJ_MICROVERSION = "2.64"
44 
45 
46 def _authorize_context(req, action):
47     context = req.environ['nova.context']
48     context.can(sg_policies.POLICY_ROOT % action)
49     return context
50 
51 
52 def _get_not_deleted(context, uuids):
53     mappings = objects.InstanceMappingList.get_by_instance_uuids(
54         context, uuids)
55     inst_by_cell = collections.defaultdict(list)
56     cell_mappings = {}
57     found_inst_uuids = []
58 
59     # Get a master list of cell mappings, and a list of instance
60     # uuids organized by cell
61     for im in mappings:
62         if not im.cell_mapping:
63             # Not scheduled yet, so just throw it in the final list
64             # and move on
65             found_inst_uuids.append(im.instance_uuid)
66             continue
67         if im.cell_mapping.uuid not in cell_mappings:
68             cell_mappings[im.cell_mapping.uuid] = im.cell_mapping
69         inst_by_cell[im.cell_mapping.uuid].append(im.instance_uuid)
70 
71     # Query each cell for the instances that are inside, building
72     # a list of non-deleted instance uuids.
73     for cell_uuid, cell_mapping in cell_mappings.items():
74         inst_uuids = inst_by_cell[cell_uuid]
75         LOG.debug('Querying cell %(cell)s for %(num)i instances',
76                   {'cell': cell_mapping.identity, 'num': len(uuids)})
77         filters = {'uuid': inst_uuids, 'deleted': False}
78         with nova_context.target_cell(context, cell_mapping) as ctx:
79             found_inst_uuids.extend([
80                 inst.uuid for inst in objects.InstanceList.get_by_filters(
81                     ctx, filters=filters)])
82 
83     return found_inst_uuids
84 
85 
86 def _should_enable_custom_max_server_rules(context, rules):
87     if rules and int(rules.get('max_server_per_host', 1)) > 1:
88         minver = service.get_minimum_version_all_cells(
89             context, ['nova-compute'])
90         if minver < 33:
91             return False
92     return True
93 
94 
95 class ServerGroupController(wsgi.Controller):
96     """The Server group API controller for the OpenStack API."""
97 
98     def _format_server_group(self, context, group, req):
99         # the id field has its value as the uuid of the server group
100         # There is no 'uuid' key in server_group seen by clients.
101         # In addition, clients see policies as a ["policy-name"] list;
102         # and they see members as a ["server-id"] list.
103         server_group = {}
104         server_group['id'] = group.uuid
105         server_group['name'] = group.name
106         if api_version_request.is_supported(
107                 req, min_version=GROUP_POLICY_OBJ_MICROVERSION):
108             server_group['policy'] = group.policy
109             server_group['rules'] = group.rules
110         else:
111             server_group['policies'] = group.policies or []
112             # NOTE(yikun): Before v2.64, a empty metadata is exposed to the
113             # user, and it is removed since v2.64.
114             server_group['metadata'] = {}
115         members = []
116         if group.members:
117             # Display the instances that are not deleted.
118             members = _get_not_deleted(context, group.members)
119         server_group['members'] = members
120         # Add project id information to the response data for
121         # API version v2.13
122         if api_version_request.is_supported(req, min_version="2.13"):
123             server_group['project_id'] = group.project_id
124             server_group['user_id'] = group.user_id
125         return server_group
126 
127     @wsgi.expected_errors(404)
128     def show(self, req, id):
129         """Return data about the given server group."""
130         context = _authorize_context(req, 'show')
131         try:
132             sg = objects.InstanceGroup.get_by_uuid(context, id)
133         except nova.exception.InstanceGroupNotFound as e:
134             raise webob.exc.HTTPNotFound(explanation=e.format_message())
135         return {'server_group': self._format_server_group(context, sg, req)}
136 
137     @wsgi.response(204)
138     @wsgi.expected_errors(404)
139     def delete(self, req, id):
140         """Delete a server group."""
141         context = _authorize_context(req, 'delete')
142         try:
143             sg = objects.InstanceGroup.get_by_uuid(context, id)
144         except nova.exception.InstanceGroupNotFound as e:
145             raise webob.exc.HTTPNotFound(explanation=e.format_message())
146         try:
147             sg.destroy()
148         except nova.exception.InstanceGroupNotFound as e:
149             raise webob.exc.HTTPNotFound(explanation=e.format_message())
150 
151     @wsgi.expected_errors(())
152     @validation.query_schema(schema.server_groups_query_param_275, '2.75')
153     @validation.query_schema(schema.server_groups_query_param, '2.0', '2.74')
154     def index(self, req):
155         """Returns a list of server groups."""
156         context = _authorize_context(req, 'index')
157         project_id = context.project_id
158         if 'all_projects' in req.GET and context.is_admin:
159             sgs = objects.InstanceGroupList.get_all(context)
160         else:
161             sgs = objects.InstanceGroupList.get_by_project_id(
162                     context, project_id)
163         limited_list = common.limited(sgs.objects, req)
164         result = [self._format_server_group(context, group, req)
165                   for group in limited_list]
166         return {'server_groups': result}
167 
168     @wsgi.Controller.api_version("2.1")
169     @wsgi.expected_errors((400, 403, 409))
170     @validation.schema(schema.create, "2.0", "2.14")
171     @validation.schema(schema.create_v215, "2.15", "2.63")
172     @validation.schema(schema.create_v264, GROUP_POLICY_OBJ_MICROVERSION)
173     def create(self, req, body):
174         """Creates a new server group."""
175         context = _authorize_context(req, 'create')
176 
177         try:
178             objects.Quotas.check_deltas(context, {'server_groups': 1},
179                                         context.project_id, context.user_id)
180             local_limit.check_delta(context, local_limit.SERVER_GROUPS,
181                                     context.project_id, delta=1)
182         except nova.exception.OverQuota:
183             msg = _("Quota exceeded, too many server groups.")
184             raise exc.HTTPForbidden(explanation=msg)
185 
186         vals = body['server_group']
187 
188         if api_version_request.is_supported(
189                 req, GROUP_POLICY_OBJ_MICROVERSION):
190             policy = vals['policy']
191             rules = vals.get('rules', {})
192             if policy != 'anti-affinity' and rules:
193                 msg = _("Only anti-affinity policy supports rules.")
194                 raise exc.HTTPBadRequest(explanation=msg)
195             # NOTE(yikun): This should be removed in Stein version.
196             if not _should_enable_custom_max_server_rules(context, rules):
197                 msg = _("Creating an anti-affinity group with rule "
198                         "max_server_per_host > 1 is not yet supported.")
199                 raise exc.HTTPConflict(explanation=msg)
200             sg = objects.InstanceGroup(context, policy=policy,
201                                        rules=rules)
202         else:
203             policies = vals.get('policies')
204             sg = objects.InstanceGroup(context, policy=policies[0])
205         try:
206             sg.name = vals.get('name')
207             sg.project_id = context.project_id
208             sg.user_id = context.user_id
209             sg.create()
210         except ValueError as e:
211             raise exc.HTTPBadRequest(explanation=e)
212 
213         # NOTE(melwitt): We recheck the quota after creating the object to
214         # prevent users from allocating more resources than their allowed quota
215         # in the event of a race. This is configurable because it can be
216         # expensive if strict quota limits are not required in a deployment.
217         if CONF.quota.recheck_quota:
218             try:
219                 objects.Quotas.check_deltas(context, {'server_groups': 0},
220                                             context.project_id,
221                                             context.user_id)
222                 # NOTE(johngarbutt): no recheck in unified limits
223             except nova.exception.OverQuota:
224                 sg.destroy()
225                 msg = _("Quota exceeded, too many server groups.")
226                 raise exc.HTTPForbidden(explanation=msg)
227 
228         return {'server_group': self._format_server_group(context, sg, req)}
