Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 # Copyright (c) 2014 OpenStack Foundation.
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 
16 import os
17 
18 import eventlet
19 from oslo_log import log as logging
20 from oslo_utils import fileutils
21 from oslo_utils import timeutils
22 import webob
23 
24 from neutron._i18n import _LE, _LI, _LW
25 from neutron.agent.l3 import router_processing_queue as queue
26 from neutron.agent.linux import utils as agent_utils
27 from neutron.common import constants
28 from neutron.notifiers import batch_notifier
29 
30 LOG = logging.getLogger(__name__)
31 
32 KEEPALIVED_STATE_CHANGE_SERVER_BACKLOG = 4096
33 
34 TRANSLATION_MAP = {'master': constants.HA_ROUTER_STATE_ACTIVE,
35                    'backup': constants.HA_ROUTER_STATE_STANDBY,
36                    'fault': constants.HA_ROUTER_STATE_STANDBY}
37 
38 
39 class KeepalivedStateChangeHandler(object):
40     def __init__(self, agent):
41         self.agent = agent
42 
43     @webob.dec.wsgify(RequestClass=webob.Request)
44     def __call__(self, req):
45         router_id = req.headers['X-Neutron-Router-Id']
46         state = req.headers['X-Neutron-State']
47         self.enqueue(router_id, state)
48 
49     def enqueue(self, router_id, state):
50         LOG.debug('Handling notification for router '
51                   '%(router_id)s, state %(state)s', {'router_id': router_id,
52                                                      'state': state})
53         self.agent.enqueue_state_change(router_id, state)
54 
55 
56 class L3AgentKeepalivedStateChangeServer(object):
57     def __init__(self, agent, conf):
58         self.agent = agent
59         self.conf = conf
60 
61         agent_utils.ensure_directory_exists_without_file(
62             self.get_keepalived_state_change_socket_path(self.conf))
63 
64     @classmethod
65     def get_keepalived_state_change_socket_path(cls, conf):
66         return os.path.join(conf.state_path, 'keepalived-state-change')
67 
68     def run(self):
69         server = agent_utils.UnixDomainWSGIServer(
70             'neutron-keepalived-state-change',
71             num_threads=self.conf.ha_keepalived_state_change_server_threads)
72         server.start(KeepalivedStateChangeHandler(self.agent),
73                      self.get_keepalived_state_change_socket_path(self.conf),
74                      workers=0,
75                      backlog=KEEPALIVED_STATE_CHANGE_SERVER_BACKLOG)
76         server.wait()
77 
78 
79 class AgentMixin(object):
80     def __init__(self, host):
81         self._init_ha_conf_path()
82         super(AgentMixin, self).__init__(host)
83         self.state_change_notifier = batch_notifier.BatchNotifier(
84             self._calculate_batch_duration(), self.notify_server)
85         eventlet.spawn(self._start_keepalived_notifications_server)
86 
87     def _get_router_info(self, router_id):
88         try:
89             return self.router_info[router_id]
90         except KeyError:
91             LOG.info(_LI('Router %s is not managed by this agent. It was '
92                          'possibly deleted concurrently.'), router_id)
93 
94     def check_ha_state_for_router(self, router_id, current_state):
95         ri = self._get_router_info(router_id)
96         if ri and current_state != TRANSLATION_MAP[ri.ha_state]:
97             LOG.debug("Updating server with state %(state)s for router "
98                       "%(router_id)s", {'router_id': router_id,
99                                         'state': ri.ha_state})
100             self.state_change_notifier.queue_event((router_id, ri.ha_state))
101 
102     def _start_keepalived_notifications_server(self):
103         state_change_server = (
104             L3AgentKeepalivedStateChangeServer(self, self.conf))
105         state_change_server.run()
106 
107     def _calculate_batch_duration(self):
108         # Slave becomes the master after not hearing from it 3 times
109         detection_time = self.conf.ha_vrrp_advert_int * 3
110 
111         # Keepalived takes a couple of seconds to configure the VIPs
112         configuration_time = 2
113 
114         # Give it enough slack to batch all events due to the same failure
115         return (detection_time + configuration_time) * 2
116 
117     def _get_router(self, router_id):
118         try:
119             routers = self.plugin_rpc.get_routers(self.context,
120                                                   [router_id])
121             if routers:
122                 return routers[0]
123         except Exception:
124             msg = _LE("Failed to fetch router information for '%s'")
125             LOG.exception(msg, router_id)
126 
127     def enqueue_state_change(self, router_id, state):
128         timestamp = timeutils.utcnow()
129         router = self._get_router(router_id)
130 
131         if not router:
132             LOG.warning(
133                 _LW("Will not do master state change actions "
134                     "for HA router %s, unable to ensure that "
135                     "the HA router still exists."), router_id)
136             return
137 
138         router['ha_router_state'] = state
139         update = queue.RouterUpdate(
140             router_id,
141             queue.PRIORITY_SYNC_ROUTERS_TASK,
142             action=queue.HA_ROUTER_STATE_CHANGE,
143             router=router,
144             timestamp=timestamp)
145         self._queue.add(update)
146 
147     def _ha_router_state_change_actions(self, router):
148         router_id = router['id']
149         state = router.get('ha_router_state', 'backup')
150         LOG.info(_LI('Router %(router_id)s transitioned to %(state)s'),
151                  {'router_id': router_id,
152                   'state': state})
153 
154         ri = self._get_router_info(router_id)
155         if ri is None:
156             return
157 
158         self._configure_ipv6_ra_on_ext_gw_port_if_necessary(ri, state)
159         if self.conf.enable_metadata_proxy:
160             self._update_metadata_proxy(ri, router_id, state)
161         self._update_radvd_daemon(ri, state)
162         self.state_change_notifier.queue_event((router_id, state))
163 
164     def _configure_ipv6_ra_on_ext_gw_port_if_necessary(self, ri, state):
165         # If ipv6 is enabled on the platform, ipv6_gateway config flag is
166         # not set and external_network associated to the router does not
167         # include any IPv6 subnet, enable the gateway interface to accept
168         # Router Advts from upstream router for default route.
169         ex_gw_port_id = ri.ex_gw_port and ri.ex_gw_port['id']
170         if state == 'master' and ex_gw_port_id:
171             interface_name = ri.get_external_device_name(ex_gw_port_id)
172             if ri.router.get('distributed', False):
173                 namespace = ri.ha_namespace
174             else:
175                 namespace = ri.ns_name
176             ri._enable_ra_on_gw(ri.ex_gw_port, namespace, interface_name)
177 
178     def _update_metadata_proxy(self, ri, router_id, state):
179         if state == 'master':
180             LOG.debug('Spawning metadata proxy for router %s', router_id)
181             self.metadata_driver.spawn_monitored_metadata_proxy(
182                 self.process_monitor, ri.ns_name, self.conf.metadata_port,
183                 self.conf, router_id=ri.router_id)
184         else:
185             LOG.debug('Closing metadata proxy for router %s', router_id)
186             self.metadata_driver.destroy_monitored_metadata_proxy(
187                 self.process_monitor, ri.router_id, self.conf)
188 
189     def _update_radvd_daemon(self, ri, state):
190         # Radvd has to be spawned only on the Master HA Router. If there are
191         # any state transitions, we enable/disable radvd accordingly.
192         if state == 'master':
193             ri.enable_radvd()
194         else:
195             ri.disable_radvd()
196 
197     def notify_server(self, batched_events):
198         translated_states = dict((router_id, TRANSLATION_MAP[state]) for
199                                  router_id, state in batched_events)
200         LOG.debug('Updating server with HA routers states %s',
201                   translated_states)
202         self.plugin_rpc.update_ha_routers_states(
203             self.context, translated_states)
204 
205     def _init_ha_conf_path(self):
206         ha_full_path = os.path.dirname("/%s/" % self.conf.ha_confs_path)
207         fileutils.ensure_tree(ha_full_path, mode=0o755)
