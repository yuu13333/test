Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 # Copyright 2012 OpenStack Foundation
2 #
3 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
4 #    not use this file except in compliance with the License. You may obtain
5 #    a copy of the License at
6 #
7 #         http://www.apache.org/licenses/LICENSE-2.0
8 #
9 #    Unless required by applicable law or agreed to in writing, software
10 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 #    License for the specific language governing permissions and limitations
13 #    under the License.
14 
15 from oslo_log import log as logging
16 import webob
17 
18 from nova.api.openstack import common
19 from nova.api.openstack.compute.schemas import remote_consoles
20 from nova.api.openstack import wsgi
21 from nova.api import validation
22 from nova.compute import api as compute
23 from nova import exception
24 from nova.policies import remote_consoles as rc_policies
25 
26 LOG = logging.getLogger(__name__)
27 
28 
29 class RemoteConsolesController(wsgi.Controller):
30     def __init__(self):
31         super(RemoteConsolesController, self).__init__()
32         self.compute_api = compute.API()
33         self.handlers = {'vnc': self.compute_api.get_vnc_console,
34                          'spice': self.compute_api.get_spice_console,
35                          'rdp': self.compute_api.get_rdp_console,
36                          'serial': self.compute_api.get_serial_console,
37                          'mks': self.compute_api.get_mks_console}
38 
39     @wsgi.Controller.api_version("2.1", "2.5")
40     @wsgi.expected_errors((400, 404, 409, 501))
41     @wsgi.action('os-getVNCConsole')
42     @validation.schema(remote_consoles.get_vnc_console)
43     def get_vnc_console(self, req, id, body):
44         """Get text console output."""
45         context = req.environ['nova.context']
46         context.can(rc_policies.BASE_POLICY_NAME)
47 
48         # If type is not supplied or unknown, get_vnc_console below will cope
49         console_type = body['os-getVNCConsole'].get('type')
50 
51         instance = common.get_instance(self.compute_api, context, id)
52         try:
53             output = self.compute_api.get_vnc_console(context,
54                                                       instance,
55                                                       console_type)
56         except exception.ConsoleTypeUnavailable as e:
57             raise webob.exc.HTTPBadRequest(explanation=e.format_message())
58         except exception.InstanceNotFound as e:
59             raise webob.exc.HTTPNotFound(explanation=e.format_message())
60         except exception.InstanceNotReady as e:
61             raise webob.exc.HTTPConflict(explanation=e.format_message())
62         except NotImplementedError:
63             common.raise_feature_not_supported()
64 
65         return {'console': {'type': console_type, 'url': output['url']}}
66 
67     @wsgi.Controller.api_version("2.1", "2.5")
68     @wsgi.expected_errors((400, 404, 409, 501))
69     @wsgi.action('os-getSPICEConsole')
70     @validation.schema(remote_consoles.get_spice_console)
71     def get_spice_console(self, req, id, body):
72         """Get text console output."""
73         context = req.environ['nova.context']
74         context.can(rc_policies.BASE_POLICY_NAME)
75 
76         # If type is not supplied or unknown, get_spice_console below will cope
77         console_type = body['os-getSPICEConsole'].get('type')
78 
79         instance = common.get_instance(self.compute_api, context, id)
80         try:
81             output = self.compute_api.get_spice_console(context,
82                                                         instance,
83                                                         console_type)
84         except exception.ConsoleTypeUnavailable as e:
85             raise webob.exc.HTTPBadRequest(explanation=e.format_message())
86         except exception.InstanceNotFound as e:
87             raise webob.exc.HTTPNotFound(explanation=e.format_message())
88         except exception.InstanceNotReady as e:
89             raise webob.exc.HTTPConflict(explanation=e.format_message())
90         except NotImplementedError:
91             common.raise_feature_not_supported()
92 
93         return {'console': {'type': console_type, 'url': output['url']}}
94 
95     @wsgi.Controller.api_version("2.1", "2.5")
96     @wsgi.expected_errors((400, 404, 409, 501))
97     @wsgi.action('os-getRDPConsole')
98     @validation.schema(remote_consoles.get_rdp_console)
99     def get_rdp_console(self, req, id, body):
100         """Get text console output."""
101         context = req.environ['nova.context']
102         context.can(rc_policies.BASE_POLICY_NAME)
103 
104         # If type is not supplied or unknown, get_rdp_console below will cope
105         console_type = body['os-getRDPConsole'].get('type')
106 
107         instance = common.get_instance(self.compute_api, context, id)
108         try:
109             # NOTE(mikal): get_rdp_console() can raise InstanceNotFound, so
110             # we still need to catch it here.
111             output = self.compute_api.get_rdp_console(context,
112                                                       instance,
113                                                       console_type)
114         except exception.ConsoleTypeUnavailable as e:
115             raise webob.exc.HTTPBadRequest(explanation=e.format_message())
116         except exception.InstanceNotFound as e:
117             raise webob.exc.HTTPNotFound(explanation=e.format_message())
118         except exception.InstanceNotReady as e:
119             raise webob.exc.HTTPConflict(explanation=e.format_message())
120         except NotImplementedError:
121             common.raise_feature_not_supported()
122 
123         return {'console': {'type': console_type, 'url': output['url']}}
124 
125     @wsgi.Controller.api_version("2.1", "2.5")
126     @wsgi.expected_errors((400, 404, 409, 501))
127     @wsgi.action('os-getSerialConsole')
128     @validation.schema(remote_consoles.get_serial_console)
129     def get_serial_console(self, req, id, body):
130         """Get connection to a serial console."""
131         context = req.environ['nova.context']
132         context.can(rc_policies.BASE_POLICY_NAME)
133 
134         # If type is not supplied or unknown get_serial_console below will cope
135         console_type = body['os-getSerialConsole'].get('type')
136         instance = common.get_instance(self.compute_api, context, id)
137         try:
138             output = self.compute_api.get_serial_console(context,
139                                                          instance,
140                                                          console_type)
141         except exception.InstanceNotFound as e:
142             raise webob.exc.HTTPNotFound(explanation=e.format_message())
143         except exception.InstanceNotReady as e:
144             raise webob.exc.HTTPConflict(explanation=e.format_message())
145         except (exception.ConsoleTypeUnavailable,
146                 exception.ImageSerialPortNumberInvalid,
147                 exception.ImageSerialPortNumberExceedFlavorValue,
148                 exception.SocketPortRangeExhaustedException) as e:
149             raise webob.exc.HTTPBadRequest(explanation=e.format_message())
150         except NotImplementedError:
151             common.raise_feature_not_supported()
152 
153         return {'console': {'type': console_type, 'url': output['url']}}
154 
155     def _check_proto_support_passwd(self, protocol):
156         # NOTE(pandatt): if `protocol` type graphics do not support
157         # setting password, UnsupportedResetVNCPassword will raise. Please see
158         # https://libvirt.org/formatdomain.html#elementsGraphics, vnc/spice
159         # graphics both support `passwd` option, however, the latter is not
160         # fully tested for now, we will support it in future.
161         if protocol not in ['vnc']:
162             LOG.warning("Setting or re-setting password is not supported for "
163                 "the %s protocol", protocol)
164             raise exception.UnsupportedResetVNCPassword(protocol=protocol)
165 
166     @wsgi.Controller.api_version("2.6")
167     @wsgi.expected_errors((400, 404, 409, 501))
168     @validation.schema(remote_consoles.create_v26, "2.6", "2.7")
169     @validation.schema(remote_consoles.create_v28, "2.8", "2.87")
170     @validation.schema(remote_consoles.create_v289, "2.89")
171     def create(self, req, server_id, body):
172         context = req.environ['nova.context']
173         instance = common.get_instance(self.compute_api, context, server_id)
174         context.can(rc_policies.BASE_POLICY_NAME,
175                     target={'project_id': instance.project_id})
176         protocol = body['remote_console']['protocol']
177         console_type = body['remote_console']['type']
178         password = body['remote_console'].get('password')
179 
180         try:
181             if password:
182                 self._check_proto_support_passwd(protocol)
183                 instance.metadata['console_passwd'] = password
184             handler = self.handlers.get(protocol)
185             output = handler(context, instance, console_type)
186             return {'remote_console': {'protocol': protocol,
187                                        'type': console_type,
188                                        'url': output['url']}}
189 
190         except exception.InstanceNotFound as e:
191             raise webob.exc.HTTPNotFound(explanation=e.format_message())
192         except exception.InstanceNotReady as e:
193             raise webob.exc.HTTPConflict(explanation=e.format_message())
194         except exception.InstanceInvalidState as state_error:
195             common.raise_http_conflict_for_instance_invalid_state(
196                 state_error, 'reset_vnc_password', id)
197         except (exception.ConsoleTypeInvalid,
198                 exception.ConsoleTypeUnavailable,
199                 exception.ImageSerialPortNumberInvalid,
200                 exception.ImageSerialPortNumberExceedFlavorValue,
201                 exception.SocketPortRangeExhaustedException,
202                 exception.UnsupportedResetVNCPassword) as e:
203             raise webob.exc.HTTPBadRequest(explanation=e.format_message())
204         except NotImplementedError:
205             common.raise_feature_not_supported()
