Please review the code below for security defects. You can consider defect types in terms of:
1.CWE-284 (Improper Access Control)
2.CWE-435 (Improper Interaction Between Multiple Entities)
3.CWE-664 (Improper Control of a Resource Through its Lifetime)
4.CWE-682 (Incorrect Calculation)
5.CWE-691 (Insufficient Control Flow Management)
6.CWE-693 (Protection Mechanism Failure)
7.CWE-697 (Incorrect Comparison)
8.CWE-703 (Improper Check or Handling of Exceptional Conditions)
9.CWE-707 (Improper Neutralization)
10.CWE-710 (Improper Adherence to Coding Standards)
If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, states: 'No security defects are detected in the code'.

1 # Copyright (c) 2013 OpenStack Foundation
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 import abc
16 
17 from neutron.common import exceptions as exc
18 from neutron.common import topics
19 from neutron.i18n import _LI, _LW
20 from neutron.openstack.common import log
21 from neutron.plugins.common import utils as plugin_utils
22 from neutron.plugins.ml2 import driver_api as api
23 from neutron.plugins.ml2.drivers import helpers
24 
25 LOG = log.getLogger(__name__)
26 
27 TUNNEL = 'tunnel'
28 
29 
30 class TunnelTypeDriver(helpers.TypeDriverHelper):
31     """Define stable abstract interface for ML2 type drivers.
32 
33     tunnel type networks rely on tunnel endpoints. This class defines abstract
34     methods to manage these endpoints.
35     """
36 
37     def __init__(self, model):
38         super(TunnelTypeDriver, self).__init__(model)
39         self.segmentation_key = iter(self.primary_keys).next()
40 
41     @abc.abstractmethod
42     def sync_allocations(self):
43         """Synchronize type_driver allocation table with configured ranges."""
44 
45     @abc.abstractmethod
46     def add_endpoint(self, ip, host, udp_port=None):
47         """Register the endpoint in the type_driver database.
48 
49         param ip: the IP address of the endpoint
50         param host: the Host name of the endpoint
51         param udp_port: udp port number for vxlan endpoint
52         """
53         pass
54 
55     @abc.abstractmethod
56     def get_endpoints(self):
57         """Get every endpoint managed by the type_driver
58 
59         :returns a list of dict [{ip_address:endpoint_ip, host:endpoint_host},
60         ..]
61         """
62         pass
63 
64     @abc.abstractmethod
65     def get_endpoint_by_host(self, host):
66         """Get endpoint for a given host managed by the type_driver
67 
68         param host: the Host name of the endpoint
69 
70         if host found in type_driver database
71            :returns db object for that particular host
72         else
73            :returns None
74         """
75         pass
76 
77     @abc.abstractmethod
78     def get_endpoint_by_ip(self, ip):
79         """Get endpoint for a given tunnel ip managed by the type_driver
80 
81         param ip: the IP address of the endpoint
82 
83         if ip found in type_driver database
84            :returns db object for that particular ip
85         else
86            :returns None
87         """
88         pass
89 
90     @abc.abstractmethod
91     def delete_endpoint(self, ip):
92         """Delete the endpoint in the type_driver database.
93 
94         param ip: the IP address of the endpoint
95         """
96         pass
97 
98     def _initialize(self, raw_tunnel_ranges):
99         self.tunnel_ranges = []
100         self._parse_tunnel_ranges(raw_tunnel_ranges, self.tunnel_ranges)
101         self.sync_allocations()
102 
103     def _parse_tunnel_ranges(self, tunnel_ranges, current_range):
104         for entry in tunnel_ranges:
105             entry = entry.strip()
106             try:
107                 tun_min, tun_max = entry.split(':')
108                 tun_min = tun_min.strip()
109                 tun_max = tun_max.strip()
110                 tunnel_range = int(tun_min), int(tun_max)
111             except ValueError as ex:
112                 raise exc.NetworkTunnelRangeError(tunnel_range=entry, error=ex)
113             plugin_utils.verify_tunnel_range(tunnel_range, self.get_type())
114             current_range.append(tunnel_range)
115         LOG.info(_LI("%(type)s ID ranges: %(range)s"),
116                  {'type': self.get_type(), 'range': current_range})
117 
118     def is_partial_segment(self, segment):
119         return segment.get(api.SEGMENTATION_ID) is None
120 
121     def validate_provider_segment(self, segment):
122         physical_network = segment.get(api.PHYSICAL_NETWORK)
123         if physical_network:
124             msg = _("provider:physical_network specified for %s "
125                     "network") % segment.get(api.NETWORK_TYPE)
126             raise exc.InvalidInput(error_message=msg)
127 
128         for key, value in segment.items():
129             if value and key not in [api.NETWORK_TYPE,
130                                      api.SEGMENTATION_ID]:
131                 msg = (_("%(key)s prohibited for %(tunnel)s provider network"),
132                        {'key': key, 'tunnel': segment.get(api.NETWORK_TYPE)})
133                 raise exc.InvalidInput(error_message=msg)
134 
135     def reserve_provider_segment(self, session, segment):
136         if self.is_partial_segment(segment):
137             alloc = self.allocate_partially_specified_segment(session)
138             if not alloc:
139                 raise exc.NoNetworkAvailable()
140         else:
141             segmentation_id = segment.get(api.SEGMENTATION_ID)
142             alloc = self.allocate_fully_specified_segment(
143                 session, **{self.segmentation_key: segmentation_id})
144             if not alloc:
145                 raise exc.TunnelIdInUse(tunnel_id=segmentation_id)
146         return {api.NETWORK_TYPE: self.get_type(),
147                 api.PHYSICAL_NETWORK: None,
148                 api.SEGMENTATION_ID: getattr(alloc, self.segmentation_key)}
149 
150     def allocate_tenant_segment(self, session):
151         alloc = self.allocate_partially_specified_segment(session)
152         if not alloc:
153             return
154         return {api.NETWORK_TYPE: self.get_type(),
155                 api.PHYSICAL_NETWORK: None,
156                 api.SEGMENTATION_ID: getattr(alloc, self.segmentation_key)}
157 
158     def release_segment(self, session, segment):
159         tunnel_id = segment[api.SEGMENTATION_ID]
160 
161         inside = any(lo <= tunnel_id <= hi for lo, hi in self.tunnel_ranges)
162 
163         info = {'type': self.get_type(), 'id': tunnel_id}
164         with session.begin(subtransactions=True):
165             query = (session.query(self.model).
166                      filter_by(**{self.segmentation_key: tunnel_id}))
167             if inside:
168                 count = query.update({"allocated": False})
169                 if count:
170                     LOG.debug("Releasing %(type)s tunnel %(id)s to pool",
171                               info)
172             else:
173                 count = query.delete()
174                 if count:
175                     LOG.debug("Releasing %(type)s tunnel %(id)s outside pool",
176                               info)
177 
178         if not count:
179             LOG.warning(_LW("%(type)s tunnel %(id)s not found"), info)
180 
181     def get_allocation(self, session, tunnel_id):
182         return (session.query(self.model).
183                 filter_by(**{self.segmentation_key: tunnel_id}).
184                 first())
185 
186 
187 class TunnelRpcCallbackMixin(object):
188 
189     def setup_tunnel_callback_mixin(self, notifier, type_manager):
190         self._notifier = notifier
191         self._type_manager = type_manager
192 
193     def tunnel_sync(self, rpc_context, **kwargs):
194         """Update new tunnel.
195 
196         Updates the database with the tunnel IP. All listening agents will also
197         be notified about the new tunnel IP.
198         """
199         tunnel_ip = kwargs.get('tunnel_ip')
200         if not tunnel_ip:
201             msg = _("Tunnel IP value needed by the ML2 plugin")
202             raise exc.InvalidInput(error_message=msg)
203 
204         tunnel_type = kwargs.get('tunnel_type')
205         if not tunnel_type:
206             msg = _("Network type value needed by the ML2 plugin")
207             raise exc.InvalidInput(error_message=msg)
208 
209         udp_port = kwargs.get('udp_port')
210         host = kwargs.get('host')
211         driver = self._type_manager.drivers.get(tunnel_type)
212         if driver:
213             # The given conditional statements will verify the following
214             # things:
215             # 1. If host is not passed from an agent, it is a legacy mode.
216             # 2. If passed host and tunnel_ip are not found in the DB,
217             #    it is a new endpoint.
218             # 3. If host is passed from an agent and it is not found in DB
219             #    but the passed tunnel_ip is found, delete the endpoint
220             #    from DB and add the endpoint with (tunnel_ip, host),
221             #    it is an upgrade case.
222             # 4. If passed host is found in DB and passed tunnel ip is not
223             #    found, delete the endpoint belonging to that host and
224             #    add endpoint with latest (tunnel_ip, host), it is a case
225             #    where local_ip of an agent got changed.
226             if host:
227                 host_endpoint = driver.obj.get_endpoint_by_host(host)
228                 ip_endpoint = driver.obj.get_endpoint_by_ip(tunnel_ip)
229 
230                 if (ip_endpoint and ip_endpoint.host is None
231                     and host_endpoint is None):
232                     driver.obj.delete_endpoint(ip_endpoint.ip_address)
233                 elif (ip_endpoint and ip_endpoint.host != host):
234                     msg = (_("Tunnel IP %(ip)s in use with host %(host)s"),
235                            {'ip': ip_endpoint.ip_address,
236                             'host': ip_endpoint.host})
237                     raise exc.InvalidInput(error_message=msg)
238                 elif (host_endpoint and host_endpoint.ip_address != tunnel_ip):
239                     # Notify all other listening agents to delete stale tunnels
240                     self._notifier.tunnel_delete(rpc_context,
241                         host_endpoint.ip_address, tunnel_type)
242                     driver.obj.delete_endpoint(host_endpoint.ip_address)
243             # If udp_port is not passed from an agent it is a legacy mode.
244             # If udp_port is passed for VXLAN tunnel type, check if there is
245             # change in UDP port value and delete the endpoint from DB and
246             # add the endpoint with updated UDP port value.
247             if udp_port:
248                 ip_endpoint = driver.obj.get_endpoint_by_ip(tunnel_ip)
249                 if ip_endpoint and ip_endpoint.udp_port != udp_port:
250                     driver.obj.delete_endpoint(tunnel_ip)
251                 tunnel = driver.obj.add_endpoint(tunnel_ip, host, udp_port)
252             else:
253                 tunnel = driver.obj.add_endpoint(tunnel_ip, host)
254             tunnels = driver.obj.get_endpoints()
255             entry = {'tunnels': tunnels}
256             # Notify all other listening agents
257             self._notifier.tunnel_update(rpc_context, tunnel.ip_address,
258                                          tunnel_type)
259             # Return the list of tunnels IP's to the agent
260             return entry
261         else:
262             msg = _("Network type value '%s' not supported") % tunnel_type
263             raise exc.InvalidInput(error_message=msg)
264 
265 
266 class TunnelAgentRpcApiMixin(object):
267 
268     def _get_tunnel_update_topic(self):
269         return topics.get_topic_name(self.topic,
270                                      TUNNEL,
271                                      topics.UPDATE)
272 
273     def tunnel_update(self, context, tunnel_ip, tunnel_type):
274         cctxt = self.client.prepare(topic=self._get_tunnel_update_topic(),
275                                     fanout=True)
276         cctxt.cast(context, 'tunnel_update', tunnel_ip=tunnel_ip,
277                    tunnel_type=tunnel_type)
278 
279     def _get_tunnel_delete_topic(self):
280         return topics.get_topic_name(self.topic,
281                                      TUNNEL,
282                                      topics.DELETE)
283 
284     def tunnel_delete(self, context, tunnel_ip, tunnel_type):
285         cctxt = self.client.prepare(topic=self._get_tunnel_delete_topic(),
286                                     fanout=True)
287         cctxt.cast(context, 'tunnel_delete', tunnel_ip=tunnel_ip,
288                    tunnel_type=tunnel_type)
