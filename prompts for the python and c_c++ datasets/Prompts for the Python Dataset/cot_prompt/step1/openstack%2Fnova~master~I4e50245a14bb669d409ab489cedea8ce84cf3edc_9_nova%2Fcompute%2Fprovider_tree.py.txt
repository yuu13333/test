Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
placement: adds ProviderTree for nested resources

We need a way of representing the hierarchical relationship between resource
providers. This representation needs to be able to work with either UUID
identifiers or unique string name identifiers due to the way that NUMA cell and
topology objects are constructed in the virt layer. It also needs to provide a
way of updating the inventory of any of the providers in a tree and returning
whether or not the inventory for the tree has changed.

Following patches show how the ProviderTree interface introduced here is used.
The scheduler reporting client will build a ProviderTree containing a resource
provider for each hypervisor or baremetal node it knows about. The information
provided to it by the resource tracker will be used to set inventory
information and understand the nesting relationships between providers.  This
ProviderTree is used within the reporting client to set inventory against
resource providers contained in the ProviderTree and determine whether
inventory has changed. Essentially, this ProviderTree object becomes a
nova-compute-side cache of provider and inventory information.

Change-Id: I4e50245a14bb669d409ab489cedea8ce84cf3edc
blueprint: nested-resource-providers

####code 
1 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
2 #    not use this file except in compliance with the License. You may obtain
3 #    a copy of the License at
4 #
5 #         http://www.apache.org/licenses/LICENSE-2.0
6 #
7 #    Unless required by applicable law or agreed to in writing, software
8 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
9 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
10 #    License for the specific language governing permissions and limitations
11 #    under the License.
12 
13 """An object describing a tree of resource providers and their inventories.
14 
15 This object is not stored in the Nova API or cell databases; rather, this
16 object is constructed by and used by the scheduler report client to track state
17 changes for resources on the hypervisor or baremetal node. As such, there are
18 no remoteable methods nor is there any interaction with the nova.db modules.
19 """
20 
21 import copy
22 
23 from oslo_concurrency import lockutils
24 from oslo_log import log as logging
25 from oslo_utils import uuidutils
26 
27 LOG = logging.getLogger(__name__)
28 _LOCK_NAME = 'provider-tree-lock'
29 
30 
31 def _inventory_has_changed(cur, new):
32     if sorted(cur.keys()) != sorted(new.keys()):
33         return True
34     for key, cur_rec in cur.items():
35 
36         new_rec = new[key]
37         for rec_key, cur_val in cur_rec.items():
38             if rec_key not in new_rec:
39                 # Deliberately don't want to compare missing keys in the
40                 # inventory record. For instance, we will be passing in fields
41                 # like allocation_ratio in the current dict but the resource
42                 # tracker may only pass in the total field. We want to return
43                 # that inventory didn't change when the total field values are
44                 # the same even if the allocation_ratio field is missing from
45                 # the new record.
46                 continue
47             if new_rec[rec_key] != cur_val:
48                 return True
49     return False
50 
51 
52 class _Provider(object):
53     def __init__(self, tree, name,
54                  uuid=None, generation=None, parent_uuid=None):
55         self.tree = tree
56         if uuid is None:
57             uuid = uuidutils.generate_uuid()
58         self.uuid = uuid
59         self.name = name
60         self.generation = generation
61         self.parent_uuid = parent_uuid
62         self.children = {}
63         self.children_name_map = {}
64         # dict of inventory records, keyed by resource class
65         self.inventory = {}
66 
67     def set_generation(self, generation):
68         with self.tree.lock:
69             self.generation = generation
70 
71     def find_by_uuid(self, uuid):
72         with self.tree.lock:
73             if self.uuid == uuid:
74                 return self
75             if uuid in self.children:
76                 return self.children[uuid]
77         if self.children:
78             for child in self.children.values():
79                 subchild = child.find_by_uuid(uuid)
80                 if subchild:
81                     return subchild
82         return None
83 
84     def find_by_name(self, name):
85         with self.tree.lock:
86             if self.name == name:
87                 return self
88             if name in self.children_name_map:
89                 return self.children_name_map[name]
90         if self.children:
91             for child in self.children.values():
92                 subchild = child.find_by_name(name)
93                 if subchild:
94                     return subchild
95         return None
96 
97     def add_child(self, provider):
98         with self.tree.lock:
99             self.children[provider.uuid] = provider
100             self.children_name_map[provider.name] = provider
101 
102     def remove_child(self, provider):
103         with self.tree.lock:
104             if provider.uuid in self.children:
105                 del self.children_name_map[provider.name]
106                 del self.children[provider.uuid]
107 
108     def inventory_changed(self, inventory):
109         """Update the stored inventory for the provider and return whether the
110         inventory has changed.
111         """
112         with self.tree.lock:
113             return _inventory_has_changed(self.inventory, inventory)
114 
115     def update_inventory(self, inventory):
116         """Update the stored inventory for the provider and return whether the
117         inventory has changed.
118         """
119         with self.tree.lock:
120             if _inventory_has_changed(self.inventory, inventory):
121                 self.inventory = copy.deepcopy(inventory)
122                 return True
123             return False
124 
125 
126 class ProviderTree(object):
127 
128     def __init__(self, cns=None):
129         """Create a provider tree from an `objects.ComputeNodeList` object."""
130         self.lock = lockutils.internal_lock(_LOCK_NAME)
131         self.roots = []
132 
133         if cns:
134             for cn in cns:
135                 # By definition, all compute nodes are root providers...
136                 p = _Provider(self, cn.hypervisor_hostname, cn.uuid)
137                 self.roots.append(p)
138 
139     def remove(self, name_or_uuid):
140         """Safely removes the provider identified by the supplied name_or_uuid
141         parameter and all of its children from the tree.
142         """
143         found = self.find(name_or_uuid)
144         if not found:
145             raise ValueError("No such provider %s" % name_or_uuid)
146 
147         if found.parent_uuid:
148             parent = self.find(found.parent_uuid)
149             parent.remove_child(found)
150         else:
151             with self.lock:
152                 self.roots.remove(found)
153 
154     def new_root(self, name, uuid, generation):
155         """Adds a new root provider to the tree."""
156         if self.exists(uuid):
157             raise ValueError("Provider %s already exists as a root." % uuid)
158 
159         p = _Provider(self, name, uuid, generation)
160         with self.lock:
161             self.roots.append(p)
162         return p
163 
164     def find(self, name_or_uuid):
165         if uuidutils.is_uuid_like(name_or_uuid):
166             getter = 'find_by_uuid'
167         else:
168             getter = 'find_by_name'
169         for root in self.roots:
170             fn = getattr(root, getter)
171             found = fn(name_or_uuid)
172             if found:
173                 return found
174         return None
175 
176     def exists(self, name_or_uuid):
177         """Given either a name or a UUID, return True if the tree contains the
178         child provider, False otherwise.
179         """
180         return self.find(name_or_uuid) is not None
181 
182     def new_child(self, name, parent_uuid, uuid=None, generation=None):
183         """Creates a new child provider with the given name and uuid under the
184         given parent.
185 
186         :returns: the new provider
187 
188         :raises ValueError if parent_uuid points to a non-existing provider.
189         """
190         parent = self.find(parent_uuid)
191         if not parent:
192             raise ValueError("No such parent %s" % parent_uuid)
193 
194         p = _Provider(self, name, uuid, generation, parent_uuid)
195         parent.add_child(p)
196         return p
197 
198     def inventory_changed(self, name_or_uuid, inventory):
199         """Returns True if the supplied inventory is different for the provider
200         with the supplied name or UUID.
201 
202         :raises: ValueError if a provider with uuid was not found in the tree.
203         :param name_or_uuid: Either name or UUID of the resource provider to
204                              update inventory for.
205         :param inventory: dict, keyed by resource class, of inventory
206                           information.
207         """
208         p = self.find(name_or_uuid)
209         if not p:
210             raise ValueError("No such provider %s" % name_or_uuid)
211 
212         return p.inventory_changed(inventory)
213 
214     def update_inventory(self, name_or_uuid, inventory):
215         """Given a name or UUID of a provider and a dict of inventory resource
216         records, update the provider's inventory and return True if the
217         inventory has changed.
218 
219         :raises: ValueError if a provider with uuid was not found in the tree.
220         :param name_or_uuid: Either name or UUID of the resource provider to
221                              update inventory for.
222         :param inventory: dict, keyed by resource class, of inventory
223                           information.
224         """
225         p = self.find(name_or_uuid)
226         if not p:
227             raise ValueError("No such provider %s" % name_or_uuid)
228 
229         return p.update_inventory(inventory)
