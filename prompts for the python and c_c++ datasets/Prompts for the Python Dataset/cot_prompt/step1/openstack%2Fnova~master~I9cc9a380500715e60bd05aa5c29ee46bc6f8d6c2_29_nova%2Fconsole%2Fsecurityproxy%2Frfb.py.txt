Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
console: provide an RFB security proxy implementation

Instead of doing straight passthrough of the RFB protocol from the
tenant sock to the compute socket, insert an RFB security proxy. This
will MITM the initial RFB protocol handshake in order to negotiate an
authentication scheme with the compute node that is distinct from that
used by the tenant.

Based on earlier work by Solly Ross <sross@redhat.com>

Change-Id: I9cc9a380500715e60bd05aa5c29ee46bc6f8d6c2
Co-authored-by: Stephen Finucane <sfinucan@redhat.com>
Implements: bp websocket-proxy-to-host-security

####code 
1 # Copyright (c) 2014-2016 Red Hat, Inc
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 
16 import struct
17 
18 from oslo_config import cfg
19 from oslo_log import log as logging
20 import six
21 
22 from nova.console.rfb import auth
23 from nova.console.rfb import auths
24 from nova.console.securityproxy import base
25 from nova import exception
26 from nova.i18n import _, _LI
27 
28 LOG = logging.getLogger(__name__)
29 
30 CONF = cfg.CONF
31 
32 
33 class RFBSecurityProxy(base.SecurityProxy):
34     """RFB Security Proxy Negotiation Helper.
35 
36     This class proxies the initial setup of the RFB connection between the
37     client and the server. Then, when the RFB security negotiation step
38     arrives, it intercepts the communication, posing as a server with the
39     "None" authentication type to the client, and acting as a client (via
40     the methods below) to the server. After security negotiation, normal
41     proxying can be used.
42 
43     Note: this code mandates RFB version 3.8, since this is supported by any
44     client and server impl written in the past 10+ years.
45 
46     See the general RFB specification at:
47 
48       https://tools.ietf.org/html/rfc6143
49     """
50 
51     def __init__(self):
52         self.auth_schemes = auths.RFBAuthSchemeList()
53 
54     def _make_var_str(self, message):
55         message_str = six.text_type(message)
56         message_bytes = message_str.encode('utf-8')
57         message_len = struct.pack("!I", len(message_bytes))
58         return message_len + message_bytes
59 
60     def _fail(self, tenant_sock, compute_sock, message):
61         # Tell the client there's been a problem
62         result_code = struct.pack("!I", 1)
63         tenant_sock.sendall(result_code + self._make_var_str(message))
64 
65         if compute_sock is not None:
66             # Tell the server that there's been a problem
67             # by sending the "Invalid" security type
68             compute_sock.sendall(auth.AUTH_STATUS_FAIL)
69 
70     def _parse_version(self, version_str):
71         maj_str = version_str[4:7]
72         min_str = version_str[8:11]
73 
74         return float("%d.%d" % (int(maj_str), int(min_str)))
75 
76     def connect(self, tenant_sock, compute_sock):
77         """Initiate the RFB connection process.
78 
79         This method performs the initial ProtocolVersion
80         and Security messaging, and returns the socket-like
81         object to use to communicate with the server securely.
82         If an error occurs SecurityProxyNegotiationFailed
83         will be raised.
84         """
85 
86         def recv(sock, num):
87             b = sock.recv(num)
88             if len(b) != num:
89                 reason = _("Incorrect read from socket, wanted %(wanted)d "
90                            "bytes but got %(got)d. Socket returned "
91                            "%(result)r") % {'wanted': num, 'got': len(b),
92                                             'result': b}
93                 raise exception.RFBAuthHandshakeFailed(reason=reason)
94             return b
95 
96         # Negotiate version with compute server
97         compute_version = recv(compute_sock, auth.VERSION_LENGTH)
98         LOG.debug("Got version string '%s' from compute node",
99                   compute_version[:-1])
100 
101         if self._parse_version(compute_version) != 3.8:
102             reason = _("Security proxying requires RFB protocol "
103                        "version 3.8, but server sent %s"), compute_version[:-1]
104             raise exception.SecurityProxyNegotiationFailed(reason=reason)
105         compute_sock.sendall(compute_version)
106 
107         # Negotiate version with tenant
108         tenant_sock.sendall(compute_version)
109         tenant_version = recv(tenant_sock, auth.VERSION_LENGTH)
110         LOG.debug("Got version string '%s' from tenant",
111                   tenant_version[:-1])
112 
113         if self._parse_version(tenant_version) != 3.8:
114             reason = _("Security proxying requires RFB protocol version "
115                        "3.8, but tenant asked for %s"), tenant_version[:-1]
116             raise exception.SecurityProxyNegotiationFailed(reason=reason)
117 
118         # Negotiate security with server
119         permitted_auth_types_cnt = six.byte2int(recv(compute_sock, 1))
120 
121         if permitted_auth_types_cnt == 0:
122             reason_len_raw = recv(compute_sock, 4)
123             reason_len = struct.unpack('!I', reason_len_raw)[0]
124             reason = recv(compute_sock, reason_len)
125 
126             tenant_sock.sendall(auth.AUTH_STATUS_FAIL +
127                                 reason_len_raw + reason)
128 
129             raise exception.SecurityProxyNegotiationFailed(reason=reason)
130 
131         f = recv(compute_sock, permitted_auth_types_cnt)
132         permitted_auth_types = []
133         for auth_type in f:
134             if isinstance(auth_type, six.string_types):
135                 auth_type = ord(auth_type)
136             permitted_auth_types.append(auth_type)
137 
138         LOG.debug("The server sent security types %s", permitted_auth_types)
139 
140         # Negotiate security with client before we say "ok" to the server
141         # send 1:[None]
142         tenant_sock.sendall(auth.AUTH_STATUS_PASS +
143                             six.int2byte(auth.AuthType.NONE))
144         client_auth = six.byte2int(recv(tenant_sock, 1))
145 
146         if client_auth != auth.AuthType.NONE:
147             self._fail(tenant_sock, compute_sock,
148                        _("Only the security type None (%d) is supported") %
149                        auth.AuthType.NONE)
150 
151             reason = _("Client requested a security type other than "
152                        " None (%(none_code)d): "
153                        "%(auth_type)s") % {
154                            'auth_type': client_auth,
155                            'none_code': auth.AuthType.NONE}
156             raise exception.SecurityProxyNegotiationFailed(reason=reason)
157 
158         try:
159             scheme = self.auth_schemes.find_scheme(permitted_auth_types)
160         except exception.RFBAuthNoAvailableScheme as e:
161             # Intentionally don't tell client what really failed
162             # as that's information leakage
163             self._fail(tenant_sock, compute_sock,
164                        _("Unable to negotiate security with server"))
165             raise exception.SecurityProxyNegotiationFailed(
166                 reason=_("No compute auth available: %s") % six.text_type(e))
167 
168         compute_sock.sendall(six.int2byte(scheme.security_type()))
169 
170         LOG.debug("Using security type %d with server, None with client",
171                   scheme.security_type())
172 
173         try:
174             compute_sock = scheme.security_handshake(compute_sock)
175         except exception.RFBAuthHandshakeFailed as e:
176             # Intentionally don't tell client what really failed
177             # as that's information leakage
178             self._fail(tenant_sock, None,
179                        _("Unable to negotiate security with server"))
180             LOG.debug("Auth failed %s", six.text_type(e))
181             raise exception.SecurityProxyNegotiationFailed(
182                 reason="Auth handshake failed")
183 
184         LOG.info(_LI("Finished security handshake, resuming normal proxy "
185                      "mode using secured socket"))
186 
187         # we can just proxy the security result -- if the server security
188         # negotiation fails, we want the client to think it has failed
189 
190         return compute_sock
