Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
locale_database: Use context manager interface to update source files

Use context manager interface (with statement) to atomically update source
files. This ensures that all files are properly closed and the temporary
file is removed even in case of errors.

Task-number: QTBUG-83488
Pick-to: 6.2
Change-Id: I18cd96f1d03e467dea6212f6576a41e65f414ce1

####code 
1 #############################################################################
2 ##
3 ## Copyright (C) 2020 The Qt Company Ltd.
4 ## Contact: https://www.qt.io/licensing/
5 ##
6 ## This file is part of the test suite of the Qt Toolkit.
7 ##
8 ## $QT_BEGIN_LICENSE:GPL-EXCEPT$
9 ## Commercial License Usage
10 ## Licensees holding valid commercial Qt licenses may use this file in
11 ## accordance with the commercial license agreement provided with the
12 ## Software or, alternatively, in accordance with the terms contained in
13 ## a written agreement between you and The Qt Company. For licensing terms
14 ## and conditions see https://www.qt.io/terms-conditions. For further
15 ## information use the contact form at https://www.qt.io/contact-us.
16 ##
17 ## GNU General Public License Usage
18 ## Alternatively, this file may be used under the terms of the GNU
19 ## General Public License version 3 as published by the Free Software
20 ## Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
21 ## included in the packaging of this file. Please review the following
22 ## information to ensure the GNU General Public License requirements will
23 ## be met: https://www.gnu.org/licenses/gpl-3.0.html.
24 ##
25 ## $QT_END_LICENSE$
26 ##
27 #############################################################################
28 """Utilities shared among the CLDR extraction tools.
29 
30 Functions:
31   unicode2hex() -- converts unicode text to UCS-2 in hex form.
32   wrap_list() -- map list to comma-separated string, 20 entries per line.
33 
34 Classes:
35   Error -- A shared error class.
36   Transcriber -- edit a file by writing a temporary file, then renaming.
37   SourceFileEditor -- adds standard prelude and tail handling to Transcriber.
38 """
39 
40 from contextlib import ExitStack, contextmanager
41 from pathlib import Path
42 from tempfile import NamedTemporaryFile
43 from typing import TextIO
44 
45 class Error (Exception):
46     def __init__(self, msg, *args):
47         super().__init__(msg, *args)
48         self.message = msg
49     def __str__(self):
50         return self.message
51 
52 def unicode2hex(s):
53     lst = []
54     for x in s:
55         v = ord(x)
56         if v > 0xFFFF:
57             # make a surrogate pair
58             # copied from qchar.h
59             high = (v >> 10) + 0xd7c0
60             low = (v % 0x400 + 0xdc00)
61             lst.append(hex(high))
62             lst.append(hex(low))
63         else:
64             lst.append(hex(v))
65     return lst
66 
67 def wrap_list(lst):
68     def split(lst, size):
69         while lst:
70             head, lst = lst[:size], lst[size:]
71             yield head
72     return ",\n".join(", ".join(x) for x in split(lst, 20))
73 
74 
75 @contextmanager
76 def AtomicRenameTemporaryFile(originalFile: TextIO, *, prefix: str, dir: Path):
77     """
78     Context manager that returns a temporary file that replaces the original
79     file on successful exit.
80 
81     Accepts a file object that should be created from a named file and have
82     name property. Yields a temporary file to the user code open for writing.
83 
84     On success closes both file objects and moves the content of the temporary
85     file to the original location. On error, removes the temporary file keeping
86     the original.
87     """
88     tempFile = NamedTemporaryFile('w', prefix=prefix, dir=dir, delete=False)
89     try:
90         yield tempFile
91         tempFile.close()
92         originalFile.close()
93         # Move the modified file to the original location
94         Path(tempFile.name).rename(originalFile.name)
95     except Exception:
96         # delete the temporary file in case of error
97         tempFile.close()
98         Path(tempFile.name).unlink()
99         raise
100 
101 
102 class Transcriber:
103     """Helper class to facilitate rewriting source files.
104 
105     This class takes care of the temporary file manipulation. Derived
106     classes need to implement transcribing of the content, with
107     whatever modifications they may want.  Members reader and writer
108     are exposed; use writer.write() to output to the new file; use
109     reader.readline() or iterate reader to read the original.
110 
111     This class is intended to be used as context manager only (inside a
112     `with` statement).
113     """
114     def __init__(self, path: Path, temp_dir: Path):
115         self.path = path
116         self.tempDir = temp_dir
117 
118     def onEnter(self) -> None:
119         """
120         Called before transferring control to user code.
121 
122         This function can be overridden in derived classes to perform actions
123         before transferring control to the user code.
124 
125         The default implementation does nothing.
126         """
127         pass
128 
129     def onExit(self) -> None:
130         """
131         Called after return from user code.
132 
133         This function can be overridden in derived classes to perform actions
134         after successful return from user code.
135 
136         The default implementation does nothing.
137         """
138         pass
139 
140     def __enter__(self):
141         with ExitStack() as resources:
142             # Open the old file
143             self.reader = resources.enter_context(open(self.path))
144             self.writer = resources.enter_context(
145                 AtomicRenameTemporaryFile(self.reader, prefix=self.path.name, dir=self.tempDir))
146 
147             self.onEnter()
148 
149             # prevent resources to be closed on normal exit and make them available
150             # inside __exit__()
151             self._resources = resources.pop_all()
152             return self
153 
154     def __exit__(self, exc_type, exc_value, traceback):
155         if exc_type is None:
156             with self._resources:
157                self.onExit()
158         else:
159             self._resources.__exit__(exc_type, exc_value, traceback)
160 
161         return False
162 
163 
164 class SourceFileEditor (Transcriber):
165     """Transcriber with transcription of code around a gnerated block.
166 
167     We have a common pattern of source files with a generated part
168     embedded in a context that's not touched by the regeneration
169     scripts. The generated part is, in each case, marked with a common
170     pair of start and end markers. We transcribe the old file to a new
171     temporary file; on success, we then remove the original and move
172     the new version to replace it.
173 
174     This class takes care of transcribing the parts before and after
175     the generated content; on creation, an instance will copy the
176     preamble up to the start marker; its close() will skip over the
177     original's generated content and resume transcribing with the end
178     marker. Derived classes need only implement the generation of the
179     content in between.
180 
181     Callers should call close() on success or cleanup() on failure (to
182     clear away the temporary file); see Transcriber.
183     """
184     def onEnter(self) -> None:
185         self.__copyPrelude()
186 
187     def onExit(self) -> None:
188         self.__copyTail()
189 
190     # Implementation details:
191     GENERATED_BLOCK_START = '// GENERATED PART STARTS HERE'
192     GENERATED_BLOCK_END = '// GENERATED PART ENDS HERE'
193 
194     def __copyPrelude(self):
195         # Copy over the first non-generated section to the new file
196         for line in self.reader:
197             self.writer.write(line)
198             if line.strip() == self.GENERATED_BLOCK_START:
199                 break
200 
201     def __copyTail(self):
202         # Skip through the old generated data in the old file
203         for line in self.reader:
204             if line.strip() == self.GENERATED_BLOCK_END:
205                 self.writer.write(line)
206                 break
207         # Transcribe the remainder:
208         for line in self.reader:
209             self.writer.write(line)
