Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Initialize global data separately and run_once in WSGI app init

We have discovered that if an exception is raised at any point during
the running of the init_application WSGI script in an apache/mod_wsgi
Daemon Mode environment, it will prompt apache/mod_wsgi to re-run the
script without starting a fresh python process. Because we initialize
global data structures during app init, subsequent runs of the script
blow up as some global data do *not* support re-initialization. It is
anyway not safe to assume that init of global data is safe to run
multiple times.

This mod_wsgi behavior appears to be a special situation that does not
behave the same as a normal reload in Daemon Mode as the script file is
being reloaded upon failure instead of the daemon process being
shutdown and restarted as described in the documentation [1].

In order to handle this situation, we can move the initialization of
global data structures to a helper method that is decorated to run only
once per python interpreter instance. This way, we will not attempt to
re-initialize global data that are not safe to init more than once.

Co-Authored-By: Michele Baldessari <michele@redhat.com>
Co-Authored-By: melanie witt <melwittt@gmail.com>

Closes-Bug: #1882094

[1] https://modwsgi.readthedocs.io/en/develop/user-guides/reloading-source-code.html#reloading-in-daemon-mode

Change-Id: I2bd360dcc6501feea7baf02d4510b282205fc061

####code 
1 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
2 #    not use this file except in compliance with the License. You may obtain
3 #    a copy of the License at
4 #
5 #         http://www.apache.org/licenses/LICENSE-2.0
6 #
7 #    Unless required by applicable law or agreed to in writing, software
8 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
9 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
10 #    License for the specific language governing permissions and limitations
11 #    under the License.
12 
13 import tempfile
14 
15 import fixtures
16 import mock
17 from oslo_config import fixture as config_fixture
18 from oslotest import base
19 
20 from nova.api.openstack import wsgi_app
21 from nova import test
22 from nova.tests import fixtures as nova_fixtures
23 
24 
25 class WSGIAppTest(base.BaseTestCase):
26 
27     _paste_config = """
28 [app:nova-api]
29 use = egg:Paste#static
30 document_root = /tmp
31     """
32 
33     def setUp(self):
34         # Ensure BaseTestCase's ConfigureLogging fixture is disabled since
35         # we're using our own (StandardLogging).
36         with fixtures.EnvironmentVariable('OS_LOG_CAPTURE', '0'):
37             super(WSGIAppTest, self).setUp()
38         self.stdlog = self.useFixture(nova_fixtures.StandardLogging())
39         self.conf = tempfile.NamedTemporaryFile(mode='w+t')
40         self.conf.write(self._paste_config.lstrip())
41         self.conf.seek(0)
42         self.conf.flush()
43         # Use of this fixture takes care of isolating registration of config
44         # options from other tests running in parallel.
45         self.useFixture(config_fixture.Config())
46 
47     def tearDown(self):
48         self.conf.close()
49         super(WSGIAppTest, self).tearDown()
50 
51     @mock.patch('nova.db.sqlalchemy.api.configure')
52     @mock.patch('nova.api.openstack.wsgi_app._setup_service')
53     @mock.patch('nova.api.openstack.wsgi_app._get_config_files')
54     def test_init_application_called_twice(self, mock_get_files, mock_setup,
55                                            mock_db_configure):
56         """Test that init_application can tolerate being called twice in a
57         single python interpreter instance.
58 
59         When nova-api is run via mod_wsgi, if any exception is raised during
60         init_application, mod_wsgi will re-run the WSGI script without
61         restarting the daemon process even when configured for Daemon Mode.
62 
63         We access the database as part of init_application, so if nova-api
64         starts up before the database is up, we'll get, for example, a
65         DBConnectionError raised during init_application and our WSGI script
66         will get reloaded/re-run by mod_wsgi.
67         """
68         mock_get_files.return_value = [self.conf.name]
69         mock_setup.side_effect = [test.TestingException, None]
70         # We need to mock the global database configure() method, else we will
71         # be affected by global database state altered by other tests running
72         # in parallel, causing this test to fail with
73         # oslo_db.sqlalchemy.enginefacade.AlreadyStartedError. We can instead
74         # mock the method to raise an exception if it's called a second time in
75         # this test to simulate the fact that the database does not tolerate
76         # re-init [after a database query has been made].
77         mock_db_configure.side_effect = [None, test.TestingException]
78         # Run init_application the first time, simulating an exception being
79         # raised during it.
80         self.assertRaises(test.TestingException, wsgi_app.init_application,
81                           'nova-api')
82         # Now run init_application a second time, it should succeed since no
83         # exception is being raised (the init of global data should not be
84         # re-attempted).
85         wsgi_app.init_application('nova-api')
86         self.assertIn('Global data already initialized, not re-initializing.',
87                       self.stdlog.logger.output)
