Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Metering to OVO

This patch introduces and implements OVO for metering

Change-Id: I168e113de6651b3a91183ed148338a26bef663cb
Partially-Implements: blueprint adopt-oslo-versioned-objects-for-db
Co-Authored-By: Eli Qiao <liyong.qiao@intel.com>

####code 
1 # Copyright (C) 2013 eNovance SAS <licensing@enovance.com>
2 #
3 # Licensed under the Apache License, Version 2.0 (the "License"); you may
4 # not use this file except in compliance with the License. You may obtain
5 # a copy of the License at
6 #
7 #      http://www.apache.org/licenses/LICENSE-2.0
8 #
9 # Unless required by applicable law or agreed to in writing, software
10 # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 # License for the specific language governing permissions and limitations
13 # under the License.
14 
15 import netaddr
16 from oslo_db import exception as db_exc
17 from oslo_utils import uuidutils
18 
19 from neutron.api.rpc.agentnotifiers import metering_rpc_agent_api
20 from neutron.common import constants
21 from neutron.db import _utils as db_utils
22 from neutron.db import api as db_api
23 from neutron.db import common_db_mixin as base_db
24 from neutron.db import l3_dvr_db
25 from neutron.db.models import l3 as l3_models
26 from neutron.db.models import metering as metering_models
27 from neutron.extensions import metering
28 from neutron.objects import base as base_obj
29 from neutron.objects import metering as metering_objs
30 
31 
32 class MeteringDbMixin(metering.MeteringPluginBase,
33                       base_db.CommonDbMixin):
34 
35     def __init__(self):
36         self.meter_rpc = metering_rpc_agent_api.MeteringAgentNotifyAPI()
37 
38     @staticmethod
39     def _make_metering_label_dict(metering_label, fields=None):
40         res = {'id': metering_label['id'],
41                'name': metering_label['name'],
42                'description': metering_label['description'],
43                'shared': metering_label['shared'],
44                'tenant_id': metering_label['tenant_id']}
45         return db_utils.resource_fields(res, fields)
46 
47     def create_metering_label(self, context, metering_label):
48         m = metering_label['metering_label']
49 
50         with db_api.context_manager.writer.using(context):
51             metering_obj = metering_objs.MeteringLabel(
52                 context, id=uuidutils.generate_uuid(),
53                 description=m['description'], project_id=m['tenant_id'],
54                 name=m['name'], shared=m['shared'])
55             metering_obj.create()
56 
57         return self._make_metering_label_dict(metering_obj)
58 
59     def _get_metering_label(self, context, label_id):
60         metering_label = metering_objs.MeteringLabel.get_object(context,
61                                                                 id=label_id)
62         if not metering_label:
63             raise metering.MeteringLabelNotFound(label_id=label_id)
64         return metering_label
65 
66     def delete_metering_label(self, context, label_id):
67         with db_api.context_manager.writer.using(context):
68             self._get_metering_label(context, label_id).delete()
69 
70     def get_metering_label(self, context, label_id, fields=None):
71         return self._make_metering_label_dict(
72             self._get_metering_label(context, label_id), fields)
73 
74     def get_metering_labels(self, context, filters=None, fields=None,
75                             sorts=None, limit=None, marker=None,
76                             page_reverse=False):
77         pager = base_obj.Pager(sorts, limit, page_reverse, marker)
78         metering_labels = metering_objs.MeteringLabel.get_objects(context,
79                                                                   _pager=pager,
80                                                                   **filters)
81         return [self._make_metering_label_dict(ml) for ml in metering_labels]
82 
83     @staticmethod
84     def _make_metering_label_rule_dict(metering_label_rule, fields=None):
85         res = {'id': metering_label_rule['id'],
86                'metering_label_id': metering_label_rule['metering_label_id'],
87                'direction': metering_label_rule['direction'],
88                'remote_ip_prefix': metering_label_rule['remote_ip_prefix'],
89                'excluded': metering_label_rule['excluded']}
90         return db_utils.resource_fields(res, fields)
91 
92     def get_metering_label_rules(self, context, filters=None, fields=None,
93                                  sorts=None, limit=None, marker=None,
94                                  page_reverse=False):
95         pager = base_obj.Pager(sorts, limit, page_reverse, marker)
96         metering_label_rules = metering_objs.MeteringLabelRule.get_objects(
97             context, _pager=pager, **filters)
98         return [self._make_metering_label_rule_dict(mlr)
99                 for mlr in metering_label_rules]
100 
101     def _get_metering_label_rule(self, context, rule_id):
102         metering_label_rule = metering_objs.MeteringLabelRule.get_object(
103             context, id=rule_id)
104         if not metering_label_rule:
105             raise metering.MeteringLabelRuleNotFound(rule_id=rule_id)
106         return metering_label_rule
107 
108     def get_metering_label_rule(self, context, rule_id, fields=None):
109         return self._make_metering_label_rule_dict(
110             self._get_metering_label_rule(context, rule_id), fields)
111 
112     def _validate_cidr(self, context, label_id, remote_ip_prefix,
113                        direction, excluded):
114         r_ips = self.get_metering_label_rules(context,
115                                               filters={'metering_label_id':
116                                                        [label_id],
117                                                        'direction':
118                                                        [direction],
119                                                        'excluded':
120                                                        [excluded]},
121                                               fields=['remote_ip_prefix'])
122 
123         cidrs = [r['remote_ip_prefix'] for r in r_ips]
124         new_cidr_ipset = netaddr.IPSet([remote_ip_prefix])
125         if (netaddr.IPSet(cidrs) & new_cidr_ipset):
126             raise metering.MeteringLabelRuleOverlaps(
127                 remote_ip_prefix=remote_ip_prefix)
128 
129     def create_metering_label_rule(self, context, metering_label_rule):
130         m = metering_label_rule['metering_label_rule']
131         try:
132             with db_api.context_manager.writer.using(context):
133                 label_id = m['metering_label_id']
134                 ip_prefix = m['remote_ip_prefix']
135                 direction = m['direction']
136                 excluded = m['excluded']
137 
138                 self._validate_cidr(context, label_id, ip_prefix, direction,
139                                     excluded)
140                 obj = metering_objs.MeteringLabelRule(
141                     context, id=uuidutils.generate_uuid(),
142                     metering_label_id=label_id, direction=direction,
143                     excluded=m['excluded'], remote_ip_prefix=ip_prefix)
144                 obj.create()
145         except db_exc.DBReferenceError:
146             raise metering.MeteringLabelNotFound(label_id=label_id)
147 
148         return self._make_metering_label_rule_dict(obj)
149 
150     def delete_metering_label_rule(self, context, rule_id):
151         with db_api.context_manager.writer.using(context):
152             rule = self._get_metering_label_rule(context, rule_id)
153             rule.delete()
154 
155         return self._make_metering_label_rule_dict(rule)
156 
157     def _get_metering_rules_dict(self, metering_label):
158         rules = []
159         for rule in metering_label.rules:
160             rule_dict = self._make_metering_label_rule_dict(rule)
161             rules.append(rule_dict)
162 
163         return rules
164 
165     def _make_router_dict(self, router):
166         distributed = l3_dvr_db.is_distributed_router(router)
167         res = {'id': router['id'],
168                'name': router['name'],
169                'tenant_id': router['tenant_id'],
170                'admin_state_up': router['admin_state_up'],
171                'status': router['status'],
172                'gw_port_id': router['gw_port_id'],
173                'distributed': distributed,
174                constants.METERING_LABEL_KEY: []}
175 
176         return res
177 
178     def _process_sync_metering_data(self, context, labels):
179         all_routers = None
180 
181         routers_dict = {}
182         for label in labels:
183             if label.shared:
184                 if not all_routers:
185                     all_routers = self._get_collection_query(context,
186                                                              l3_models.Router)
187                 routers = all_routers
188             else:
189                 routers = label.routers
190 
191             for router in routers:
192                 if not router['admin_state_up']:
193                     continue
194                 router_dict = routers_dict.get(
195                     router['id'],
196                     self._make_router_dict(router))
197 
198                 rules = self._get_metering_rules_dict(label)
199 
200                 data = {'id': label['id'], 'rules': rules}
201                 router_dict[constants.METERING_LABEL_KEY].append(data)
202 
203                 routers_dict[router['id']] = router_dict
204 
205         return list(routers_dict.values())
206 
207     def get_sync_data_for_rule(self, context, rule):
208         label = context.session.query(
209             metering_models.MeteringLabel).get(
210                 rule['metering_label_id'])
211 
212         # TODO(electrocucaracha) This depends on the Router OVO implementation
213         if label.shared:
214             routers = self._get_collection_query(context, l3_models.Router)
215         else:
216             routers = label.routers
217 
218         routers_dict = {}
219         for router in routers:
220             router_dict = routers_dict.get(router['id'],
221                                            self._make_router_dict(router))
222             data = {'id': label['id'], 'rule': rule}
223             router_dict[constants.METERING_LABEL_KEY].append(data)
224             routers_dict[router['id']] = router_dict
225 
226         return list(routers_dict.values())
227 
228     def get_sync_data_metering(self, context, label_id=None):
229         labels = context.session.query(metering_models.MeteringLabel)
230 
231         if label_id:
232             labels = labels.filter(
233                 metering_models.MeteringLabel.id == label_id)
234 
235         return self._process_sync_metering_data(context, labels)
