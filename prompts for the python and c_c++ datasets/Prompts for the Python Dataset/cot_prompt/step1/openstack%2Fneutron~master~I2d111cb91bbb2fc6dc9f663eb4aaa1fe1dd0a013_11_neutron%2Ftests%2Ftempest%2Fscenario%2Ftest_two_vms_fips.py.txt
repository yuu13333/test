Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Add new test and enhance base functions

* Added a scenario test that verify
  valid connection between two
  instances on a single compute
  node, this scenario was a bug:
  https://bugzilla.redhat.com/show_bug.cgi?id=1464061

* Changed 'base.py' to enable booting
  an instance with admin privileges.

* Added two clients to 'clients.py'
  in order to fetch information
  regarding hypervisors and
  availability zones.

Change-Id: I2d111cb91bbb2fc6dc9f663eb4aaa1fe1dd0a013

####code 
1 # Copyright 2017 Red Hat, Inc.
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 from tempest.common import waiters
16 from tempest.lib.common.utils import data_utils
17 from tempest.lib import decorators
18 
19 from neutron.tests.tempest.common import ssh
20 from neutron.tests.tempest import config
21 from neutron.tests.tempest.scenario import base
22 from neutron.tests.tempest.scenario import constants as const
23 
24 CONF = config.CONF
25 
26 
27 class TestTwoVmsFips(base.BaseTempestTestCase):
28     credentials = ['primary', 'admin']
29 
30     @classmethod
31     def resource_setup(cls):
32         super(TestTwoVmsFips, cls).resource_setup()
33         cls.network = cls.create_network()
34         cls.subnet = cls.create_subnet(cls.network)
35         router = cls.create_router_by_client()
36         cls.create_router_interface(router['id'], cls.subnet['id'])
37         # Create keypair with admin privileges
38         cls.keypair = cls.create_keypair(client=cls.os_admin.keypairs_client)
39         # Create security group with admin privileges
40         cls.secgroup = cls.os_admin.network_client.create_security_group(
41             name=data_utils.rand_name('secgroup-'))['security_group']
42         # Execute funcs to achieve ssh and ICMP capabilities
43         funcs = [cls.create_loginable_secgroup_rule,
44                  cls.create_pingable_secgroup_rule]
45         for func in funcs:
46             func(secgroup_id=cls.secgroup['id'], is_admin=True)
47 
48     @classmethod
49     def resource_cleanup(cls):
50         super(TestTwoVmsFips, cls).resource_cleanup()
51         # Cleanup for keypair and security group
52         cls.os_admin.keypairs_client.delete_keypair(
53             keypair_name=cls.keypair['name'])
54         cls.os_admin.network_client.delete_security_group(
55             security_group_id=cls.secgroup['id'])
56 
57     def _list_hypervisors(self):
58         # List of hypervisors
59         return self.os_admin.hv_client.list_hypervisors()['hypervisors']
60 
61     def _list_availability_zones(self):
62         # List of availability zones
63         return self.os_admin.az_client.list_availability_zones()
64 
65     def create_vms(self, hyper, avail_zone, num_servers=2):
66         servers, fips, server_ssh_clients = ([], [], [])
67         # Create the availability zone with default zone and
68         # a specific mentioned hypervisor.
69         az = avail_zone + ':' + hyper
70         for i in range(num_servers):
71             servers.append(self.create_server(
72                 flavor_ref=CONF.compute.flavor_ref,
73                 image_ref=CONF.compute.image_ref,
74                 key_name=self.keypair['name'],
75                 networks=[{'uuid': self.network['id']}],
76                 security_groups=[{'name': self.secgroup['name']}],
77                 availability_zone=az,
78                 is_admin=True))
79         for i, server in enumerate(servers):
80             waiters.wait_for_server_status(
81                 self.os_admin.servers_client, server['server']['id'],
82                 const.SERVER_STATUS_ACTIVE)
83             port = self.client.list_ports(
84                 network_id=self.network['id'],
85                 device_id=server['server']['id']
86             )['ports'][0]
87             fips.append(self.create_and_associate_floatingip(
88                 port['id'], is_admin=True))
89             server_ssh_clients.append(ssh.Client(
90                 fips[i]['floating_ip_address'], CONF.validation.image_ssh_user,
91                 pkey=self.keypair['private_key']))
92         # Add created fips to resource cleanup
93         for fip in fips:
94             self.addCleanup(self.os_admin.network_client.delete_floatingip,
95                             fip['id'])
96         return server_ssh_clients, fips
97 
98     @decorators.idempotent_id('6bba729b-3fb6-494b-9e1e-82bbd89a1045')
99     def test_two_vms_fips(self):
100         # Get hypervisor list to pass it for vm creation
101         hyper = self._list_hypervisors()[0]['hypervisor_hostname']
102         # Get availability zone list to pass it for vm creation
103         az_func = self._list_availability_zones
104         avail_zone = \
105             az_func()['availabilityZoneInfo'][0]['zoneName']
106         server_ssh_clients, fips = self.create_vms(hyper, avail_zone)
107         self.check_remote_connectivity(
108             server_ssh_clients[0], fips[1]['floating_ip_address'])
