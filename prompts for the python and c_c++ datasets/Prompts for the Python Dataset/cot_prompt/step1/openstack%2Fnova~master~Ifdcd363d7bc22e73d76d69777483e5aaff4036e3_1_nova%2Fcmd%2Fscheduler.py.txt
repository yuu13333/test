Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Scheduler multiple workers support

Multiple process workers support for nova-scheduler.

Change-Id: Ifdcd363d7bc22e73d76d69777483e5aaff4036e3
DocImpact: Adds scheduler_workers to [DEFAULT] group of nova.conf
Implements: blueprint scheduler-multiple-workers-support

####code 
1 # Copyright 2010 United States Government as represented by the
2 # Administrator of the National Aeronautics and Space Administration.
3 # All Rights Reserved.
4 #
5 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
6 #    not use this file except in compliance with the License. You may obtain
7 #    a copy of the License at
8 #
9 #         http://www.apache.org/licenses/LICENSE-2.0
10 #
11 #    Unless required by applicable law or agreed to in writing, software
12 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
13 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
14 #    License for the specific language governing permissions and limitations
15 #    under the License.
16 
17 """Starter script for Nova Scheduler."""
18 
19 import sys
20 
21 from oslo_concurrency import processutils
22 from oslo_config import cfg
23 from oslo_log import log as logging
24 
25 from nova import config
26 from nova import objects
27 from nova.openstack.common.report import guru_meditation_report as gmr
28 from nova import service
29 from nova import utils
30 from nova import version
31 
32 CONF = cfg.CONF
33 CONF.import_opt('scheduler_topic', 'nova.scheduler.rpcapi')
34 
35 
36 def main():
37     config.parse_args(sys.argv)
38     logging.setup(CONF, "nova")
39     utils.monkey_patch()
40     objects.register_all()
41 
42     gmr.TextGuruMeditation.setup_autorun(version)
43 
44     server = service.Service.create(binary='nova-scheduler',
45                                     topic=CONF.scheduler_topic)
46     workers = CONF.scheduler_workers or processutils.get_worker_count()
47     service.serve(server, workers=workers)
48     service.wait()
