Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
[placement] Add /reshaper handler for POST

/reshaper provides a way to atomically modify some allocations and
inventory in a single transaction, allowing operations like migrating
some inventory from a parent provider to a new child.

A fair amount of code is reused from handler/inventory.py, some
refactoring is in order before things get too far with that.

In handler/allocation.py some code is extracted to its own methods
so it can be reused from reshaper.py.

This is done as microversion 1.30.

A suite of gabbi tests is provided which attempt to cover various
failures including schema violations, generation conflicts, and
data conflicts.

api-ref, release notes and rest history are updated

Change-Id: I5b33ac3572bc3789878174ffc86ca42ae8035cfa
Partially-Implements: blueprint reshape-provider-tree

####code 
1 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
2 #    not use this file except in compliance with the License. You may obtain
3 #    a copy of the License at
4 #
5 #         http://www.apache.org/licenses/LICENSE-2.0
6 #
7 #    Unless required by applicable law or agreed to in writing, software
8 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
9 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
10 #    License for the specific language governing permissions and limitations
11 #    under the License.
12 """Placement API handler for the reshaper.
13 
14 The reshaper provides for atomically migrating resource provider inventories
15 and associated allocations when some of the inventory moves from one resource
16 provider to another, such as when a class of inventory moves from a parent
17 provider to a new child provider.
18 """
19 
20 import copy
21 
22 from oslo_utils import excutils
23 import webob
24 
25 from nova.api.openstack.placement import errors
26 from nova.api.openstack.placement import exception
27 # TODO(cdent): That we are doing this suggests that there's stuff to be
28 # extracted from the handler to a shared module.
29 from nova.api.openstack.placement.handlers import allocation
30 from nova.api.openstack.placement.handlers import inventory
31 from nova.api.openstack.placement import microversion
32 from nova.api.openstack.placement.objects import resource_provider as rp_obj
33 from nova.api.openstack.placement.schemas import reshaper as schema
34 from nova.api.openstack.placement import util
35 from nova.api.openstack.placement import wsgi_wrapper
36 # TODO(cdent): placement needs its own version of this
37 from nova.i18n import _
38 
39 
40 @wsgi_wrapper.PlacementWsgify
41 @microversion.version_handler('1.30')
42 @util.require_content('application/json')
43 def reshape(req):
44     context = req.environ['placement.context']
45     want_version = req.environ[microversion.MICROVERSION_ENVIRON]
46     # TODO(cdent): Just leaving this here as a reminder for now.
47     # With this commented, the default "admin only" handling for
48     # policy is enforced.
49     # context.can(policies.CREATE)
50     data = util.extract_json(req.body, schema.POST_RESHAPER_SCHEMA)
51     inventories = data['inventories']
52     allocations = data['allocations']
53     # We're going to create several InventoryList, by rp.
54     inventory_by_rp = {}
55 
56     # TODO(cdent): this has overlaps with inventory:set_inventories
57     # and is a mess of bad names and lack of method extraction.
58     for rp_uuid, inventory_data in inventories.items():
59         try:
60             resource_provider = rp_obj.ResourceProvider.get_by_uuid(
61                 context, rp_uuid)
62         except exception.NotFound as exc:
63             raise webob.exc.HTTPBadRequest(
64                 _('Unfound resource provider %(rp_uuid)s in inventories: '
65                   '%(error)s') % {'rp_uuid': rp_uuid, 'error': exc},
66                 comment=errors.RESOURCE_PROVIDER_NOT_FOUND)
67 
68         # Do an early generation check.
69         generation = inventory_data['resource_provider_generation']
70         if generation != resource_provider.generation:
71             raise webob.exc.HTTPConflict(
72                 _('resource provider generation conflict: '
73                   'actual: %s, given: %s') % (resource_provider.generation,
74                                               generation),
75                 comment=errors.CONCURRENT_UPDATE)
76 
77         inv_list = []
78         for res_class, raw_inventory in inventory_data['inventories'].items():
79             inv_data = copy.copy(inventory.INVENTORY_DEFAULTS)
80             inv_data.update(raw_inventory)
81             inv_obj = inventory.make_inventory_object(
82                 resource_provider, res_class, **inv_data)
83             inv_list.append(inv_obj)
84         inventory_by_rp[rp_uuid] = rp_obj.InventoryList(objects=inv_list)
85 
86     # Make the consumer objects associated with the allocations.
87     consumers, new_consumers_created = allocation.inspect_consumers(
88         context, allocations, want_version)
89 
90     # When these allocations are created they get resource provider objects
91     # which are different instances (usually with the same data) from those
92     # loaded above when creating inventory objects. The reshape method below is
93     # responsible for ensuring that the resource providers and their
94     # generations do not conflict.
95     allocation_objects = allocation.create_allocation_list(
96         context, allocations, consumers)
97 
98     try:
99         try:
100             rp_obj.reshape(context, inventory_by_rp, allocation_objects)
101         except Exception:
102             with excutils.save_and_reraise_exception():
103                 allocation.delete_consumers(new_consumers_created)
104     # Distinguish inventory in use (has allocations on it)...
105     except exception.InventoryInUse as exc:
106         raise webob.exc.HTTPConflict(
107             _('update conflict: %(error)s') % {'error': exc},
108             comment=errors.INVENTORY_INUSE)
109     # ...from allocations which won't fit for a variety of reasons.
110     except exception.InvalidInventory as exc:
111         raise webob.exc.HTTPConflict(
112             _('Unable to allocate inventory: %(error)s') % {'error': exc})
113 
114     req.response.status = 204
115     req.response.content_type = None
116     return req.response
