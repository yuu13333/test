Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Icons: Adapt export.py to Inkscape 1.0 (+cleanup)

The "--shell" mode changed in Inkscape from version 0.9 to 1.0, so that
the export.py had to be adapted.

While doing that, it was also time to split up this Spaghetti pile
into functions.

Change-Id: I6346a6eb9b4be546333ee60fa1d34c2ba8e1a347

####code 
1 #!/usr/bin/env python
2 
3 ############################################################################
4 #
5 # Copyright (C) 2016 The Qt Company Ltd.
6 # Contact: https://www.qt.io/licensing/
7 #
8 # This file is part of Qt Creator.
9 #
10 # Commercial License Usage
11 # Licensees holding valid commercial Qt licenses may use this file in
12 # accordance with the commercial license agreement provided with the
13 # Software or, alternatively, in accordance with the terms contained in
14 # a written agreement between you and The Qt Company. For licensing terms
15 # and conditions see https://www.qt.io/terms-conditions. For further
16 # information use the contact form at https://www.qt.io/contact-us.
17 #
18 # GNU General Public License Usage
19 # Alternatively, this file may be used under the terms of the GNU
20 # General Public License version 3 as published by the Free Software
21 # Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
22 # included in the packaging of this file. Please review the following
23 # information to ensure the GNU General Public License requirements will
24 # be met: https://www.gnu.org/licenses/gpl-3.0.html.
25 #
26 ############################################################################
27 
28 # This script calls Inkscape to rasterize several images into png files.
29 # The images end up in the final position of the source tree.
30 # Each image is generated as normal and high resolution variant.
31 # Each png file is afterwards optimized with optipng.
32 
33 import argparse
34 import os
35 import re
36 import subprocess
37 import sys
38 import xml.etree.ElementTree as ET
39 
40 from distutils import spawn
41 
42 
43 def qtcRoot():
44     # Either by QTC_SRC or by path relative to this script
45     scriptDir = os.path.dirname(os.path.abspath(sys.argv[0])) + '/'
46     return os.getenv('QTC_SRC', os.path.abspath(scriptDir + '../../..')) \
47         .replace('\\', '/') + '/'
48 
49 
50 def svgIDs(svgFile, svgElementFilter):
51     # The svg element IDs of images to export. They correspond to the
52     # path and base name of each image in the Qt Creator sources.
53     svgIDs = []
54     svgTree = ET.ElementTree()
55     svgTree.parse(qtcRoot() + svgFile)
56     svgTreeRoot = svgTree.getroot()
57     pattern = re.compile(svgElementFilter)
58     for svgElement in svgTreeRoot.iter():
59         try:
60             svgElementID = svgElement.attrib['id']
61             if (svgElementID.count('/') > 0 and pattern.match(svgElementID)):
62                 svgIDs.append(svgElementID)
63         except Exception:
64             pass
65 
66     print("\n==== {} elements found which match {}"
67           .format(len(svgIDs), svgElementFilter))
68     return svgIDs
69 
70 
71 def pngName(svgID, scale):
72     # File name is relative to qtcRoot()
73     return svgID + ("" if scale == 1 else "@{}x".format(scale)) + ".png"
74 
75 
76 def printOutUnexported(svgIDs, scaleFactors):
77     unexported = []
78     partiallyExported = []
79     for id in svgIDs:
80         exportedCount = 0
81         for scaleFactor in scaleFactors:
82             if os.path.isfile(qtcRoot() + pngName(id, scaleFactor)):
83                 exportedCount += 1
84         if exportedCount == 0:
85             unexported.append(id)
86         elif (exportedCount < len(scaleFactors)):
87             partiallyExported.append(id)
88 
89     if partiallyExported:
90         print("\n==== {} IDs for which not each .png is exported:"
91               .format(len(partiallyExported)))
92         print("\n".join(partiallyExported))
93     if unexported:
94         print("\n==== {} IDs for which all .pngs are missing:"
95               .format(len(unexported)))
96         print("\n".join(unexported))
97     if partiallyExported or unexported:
98         input("\nPress Enter to continue...")
99 
100 
101 def exportPngs(svgIDs, svgFile, scaleFactors, inkscape):
102     inkscapeProcess = subprocess.Popen([inkscape, '--shell'],
103                                        stdin=subprocess.PIPE,
104                                        cwd=qtcRoot())
105     actions = ["file-open:" + svgFile]
106     for id in svgIDs:
107         for scale in scaleFactors:
108             actions += [
109                 "export-id:{}".format(id),
110                 "export-id-only",
111                 "export-dpi:{}".format(scale * 96),
112                 "export-filename:{}".format(pngName(id, scale)),
113                 "export-do"
114             ]
115     actions += ["quit-inkscape"]
116     actionLine = "; ".join(actions) + "\n"
117     print("Exporting pngs for {} Ids in {} scale factors."
118           .format(len(svgIDs), len(scaleFactors)))
119     inkscapeProcess.communicate(input=actionLine.encode())
120     inkscapeProcess.wait()
121 
122 
123 def optimizePngs(svgIDs, scaleFactors, optipng):
124     for id in svgIDs:
125         for scale in scaleFactors:
126             png = pngName(id, scale)
127             print("Optimizing: {}".format(png))
128             subprocess.run([optipng,
129                             "-o7",
130                             "-strip", "all",
131                             png],
132                            cwd=qtcRoot(),
133                            check=True,
134                            capture_output=True)
135 
136 
137 if __name__ == '__main__':
138     parser = argparse.ArgumentParser(description='Export svg elements to .png '
139                                      'files and optimize the png. '
140                                      'Requires Inkscape 1.x and optipng in Path.')
141     parser.add_argument('filter',
142                         help='a RegExp filter for svg element Ids, e.g.: .*device.*')
143     args = parser.parse_args()
144 
145     inkscape = spawn.find_executable("inkscape")
146     if inkscape is None:
147         sys.exit("Inkscape was not found in Path.")
148 
149     optipng = spawn.find_executable("optipng")
150     if optipng is None:
151         sys.exit("Optipng was not found in Path.")
152 
153     svgFile = "src/tools/icons/qtcreatoricons.svg"  # relative to qtcRoot()
154     ids = svgIDs(svgFile, args.filter)
155     if not ids:
156         sys.exit("{} does not match any Id.".format(args.filter))
157 
158     scaleFactors = [1, 2]
159 
160     printOutUnexported(ids, scaleFactors)
161     exportPngs(ids, svgFile, scaleFactors, inkscape)
162     optimizePngs(ids, scaleFactors, optipng)
