Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Add trusted_image_certificates to REST API

This change adds support for the trusted_image_certificates parameter,
which is used to define a list of trusted certificate IDs that can be
used during image signature verification and certificate validation. The
parameter may contain a list of strings, each string representing the ID
of a trusted certificate. The list is restricted to a maximum of 50 IDs,
each with a maximum length of 50 characters. The list of certificate IDs
will be stored in the trusted_certs field of the instance InstanceExtra
and will be used to verify the validity of the signing certificate of a
signed instance image.

The trusted_image_certificates request parameter can be passed to
the server create and rebuild APIs:

* POST /servers
* POST /servers/{server_id}/action (rebuild)

The trusted_image_certificates parameter will be in the response
body of the following APIs:

* GET /servers/detail
* GET /servers/{server_id}
* PUT /servers/{server_id}
* POST /servers/{server_id}/action (rebuild)

APIImpact

Implements blueprint: nova-validate-certificates
Change-Id: Iedd3fea0e86648fae364f075915555dcb2c4f199

####code 
1 # Copyright 2010-2011 OpenStack Foundation
2 # Copyright 2011 Piston Cloud Computing, Inc.
3 # All Rights Reserved.
4 #
5 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
6 #    not use this file except in compliance with the License. You may obtain
7 #    a copy of the License at
8 #
9 #         http://www.apache.org/licenses/LICENSE-2.0
10 #
11 #    Unless required by applicable law or agreed to in writing, software
12 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
13 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
14 #    License for the specific language governing permissions and limitations
15 #    under the License.
16 
17 import hashlib
18 
19 from oslo_log import log as logging
20 
21 from nova.api.openstack import api_version_request
22 from nova.api.openstack import common
23 from nova.api.openstack.compute.views import addresses as views_addresses
24 from nova.api.openstack.compute.views import flavors as views_flavors
25 from nova.api.openstack.compute.views import images as views_images
26 from nova import context as nova_context
27 from nova import exception
28 from nova import objects
29 from nova.policies import flavor_extra_specs as fes_policies
30 from nova import utils
31 
32 
33 LOG = logging.getLogger(__name__)
34 
35 
36 class ViewBuilder(common.ViewBuilder):
37     """Model a server API response as a python dictionary."""
38 
39     _collection_name = "servers"
40 
41     _progress_statuses = (
42         "ACTIVE",
43         "BUILD",
44         "REBUILD",
45         "RESIZE",
46         "VERIFY_RESIZE",
47         "MIGRATING",
48     )
49 
50     _fault_statuses = (
51         "ERROR", "DELETED"
52     )
53 
54     # These are the lazy-loadable instance attributes required for showing
55     # details about an instance. Add to this list as new things need to be
56     # shown.
57     _show_expected_attrs = ['flavor', 'info_cache', 'metadata']
58 
59     def __init__(self):
60         """Initialize view builder."""
61         super(ViewBuilder, self).__init__()
62         self._address_builder = views_addresses.ViewBuilder()
63         self._image_builder = views_images.ViewBuilder()
64         self._flavor_builder = views_flavors.ViewBuilder()
65 
66     def create(self, request, instance):
67         """View that should be returned when an instance is created."""
68         return {
69             "server": {
70                 "id": instance["uuid"],
71                 "links": self._get_links(request,
72                                          instance["uuid"],
73                                          self._collection_name),
74                 # NOTE(sdague): historically this was the
75                 # os-disk-config extension, but now that extensions
76                 # are gone, we merge these attributes here.
77                 "OS-DCF:diskConfig": (
78                     'AUTO' if instance.get('auto_disk_config') else 'MANUAL'),
79             },
80         }
81 
82     def basic(self, request, instance, show_extra_specs=False):
83         """Generic, non-detailed view of an instance."""
84         return {
85             "server": {
86                 "id": instance["uuid"],
87                 "name": instance["display_name"],
88                 "links": self._get_links(request,
89                                          instance["uuid"],
90                                          self._collection_name),
91             },
92         }
93 
94     def get_show_expected_attrs(self, expected_attrs=None):
95         """Returns a list of lazy-loadable expected attributes used by show
96 
97         This should be used when getting the instances from the database so
98         that the necessary attributes are pre-loaded before needing to build
99         the show response where lazy-loading can fail if an instance was
100         deleted.
101 
102         :param list expected_attrs: The list of expected attributes that will
103             be requested in addition to what this view builder requires. This
104             method will merge the two lists and return what should be
105             ultimately used when getting an instance from the database.
106         :returns: merged and sorted list of expected attributes
107         """
108         if expected_attrs is None:
109             expected_attrs = []
110         # NOTE(mriedem): We sort the list so we can have predictable test
111         # results.
112         return sorted(list(set(self._show_expected_attrs + expected_attrs)))
113 
114     def show(self, request, instance, extend_address=True,
115              show_extra_specs=None):
116         """Detailed view of a single instance."""
117         ip_v4 = instance.get('access_ip_v4')
118         ip_v6 = instance.get('access_ip_v6')
119 
120         if show_extra_specs is None:
121             # detail will pre-calculate this for us. If we're doing show,
122             # then figure it out here.
123             show_extra_specs = False
124             if api_version_request.is_supported(request, min_version='2.47'):
125                 context = request.environ['nova.context']
126                 show_extra_specs = context.can(
127                     fes_policies.POLICY_ROOT % 'index', fatal=False)
128 
129         server = {
130             "server": {
131                 "id": instance["uuid"],
132                 "name": instance["display_name"],
133                 "status": self._get_vm_status(instance),
134                 "tenant_id": instance.get("project_id") or "",
135                 "user_id": instance.get("user_id") or "",
136                 "metadata": self._get_metadata(instance),
137                 "hostId": self._get_host_id(instance) or "",
138                 "image": self._get_image(request, instance),
139                 "flavor": self._get_flavor(request, instance,
140                                            show_extra_specs),
141                 "created": utils.isotime(instance["created_at"]),
142                 "updated": utils.isotime(instance["updated_at"]),
143                 "addresses": self._get_addresses(request, instance,
144                                                  extend_address),
145                 "accessIPv4": str(ip_v4) if ip_v4 is not None else '',
146                 "accessIPv6": str(ip_v6) if ip_v6 is not None else '',
147                 "links": self._get_links(request,
148                                          instance["uuid"],
149                                          self._collection_name),
150                 # NOTE(sdague): historically this was the
151                 # os-disk-config extension, but now that extensions
152                 # are gone, we merge these attributes here.
153                 "OS-DCF:diskConfig": (
154                     'AUTO' if instance.get('auto_disk_config') else 'MANUAL'),
155             },
156         }
157         if server["server"]["status"] in self._fault_statuses:
158             _inst_fault = self._get_fault(request, instance)
159             if _inst_fault:
160                 server['server']['fault'] = _inst_fault
161 
162         if server["server"]["status"] in self._progress_statuses:
163             server["server"]["progress"] = instance.get("progress", 0)
164 
165         if api_version_request.is_supported(request, min_version="2.9"):
166             server["server"]["locked"] = (True if instance["locked_by"]
167                                           else False)
168 
169         if api_version_request.is_supported(request, min_version="2.19"):
170             server["server"]["description"] = instance.get(
171                                                 "display_description")
172 
173         if api_version_request.is_supported(request, min_version="2.26"):
174             server["server"]["tags"] = [t.tag for t in instance.tags]
175 
176         if api_version_request.is_supported(request, min_version="2.62"):
177             trusted_certs = None
178             try:
179                 if instance.trusted_certs:
180                     trusted_certs = instance.trusted_certs.ids
181             except AttributeError:
182                 # instance obj_load_attr failed, so leave certs empty
183                 pass
184             server["server"]["trusted_image_certificates"] = trusted_certs
185 
186         return server
187 
188     def index(self, request, instances):
189         """Show a list of servers without many details."""
190         coll_name = self._collection_name
191         return self._list_view(self.basic, request, instances, coll_name,
192                                False)
193 
194     def detail(self, request, instances):
195         """Detailed view of a list of instance."""
196         coll_name = self._collection_name + '/detail'
197 
198         if api_version_request.is_supported(request, min_version='2.47'):
199             # Determine if we should show extra_specs in the inlined flavor
200             # once before we iterate the list of instances
201             context = request.environ['nova.context']
202             show_extra_specs = context.can(fes_policies.POLICY_ROOT % 'index',
203                                            fatal=False)
204         else:
205             show_extra_specs = False
206 
207         return self._list_view(self.show, request, instances, coll_name,
208                                show_extra_specs)
209 
210     def _list_view(self, func, request, servers, coll_name, show_extra_specs):
211         """Provide a view for a list of servers.
212 
213         :param func: Function used to format the server data
214         :param request: API request
215         :param servers: List of servers in dictionary format
216         :param coll_name: Name of collection, used to generate the next link
217                           for a pagination query
218         :returns: Server data in dictionary format
219         """
220         server_list = [func(request, server,
221                             show_extra_specs=show_extra_specs)["server"]
222                        for server in servers]
223         servers_links = self._get_collection_links(request,
224                                                    servers,
225                                                    coll_name)
226         servers_dict = dict(servers=server_list)
227 
228         if servers_links:
229             servers_dict["servers_links"] = servers_links
230 
231         return servers_dict
232 
233     @staticmethod
234     def _get_metadata(instance):
235         return instance.metadata or {}
236 
237     @staticmethod
238     def _get_vm_status(instance):
239         # If the instance is deleted the vm and task states don't really matter
240         if instance.get("deleted"):
241             return "DELETED"
242         return common.status_from_state(instance.get("vm_state"),
243                                         instance.get("task_state"))
244 
245     @staticmethod
246     def _get_host_id(instance):
247         host = instance.get("host")
248         project = str(instance.get("project_id"))
249         if host:
250             data = (project + host).encode('utf-8')
251             sha_hash = hashlib.sha224(data)
252             return sha_hash.hexdigest()
253 
254     def _get_addresses(self, request, instance, extend_address=False):
255         context = request.environ["nova.context"]
256         networks = common.get_networks_for_instance(context, instance)
257         return self._address_builder.index(networks,
258                                            extend_address)["addresses"]
259 
260     def _get_image(self, request, instance):
261         image_ref = instance["image_ref"]
262         if image_ref:
263             image_id = str(common.get_id_from_href(image_ref))
264             bookmark = self._image_builder._get_bookmark_link(request,
265                                                               image_id,
266                                                               "images")
267             return {
268                 "id": image_id,
269                 "links": [{
270                     "rel": "bookmark",
271                     "href": bookmark,
272                 }],
273             }
274         else:
275             return ""
276 
277     def _get_flavor_dict(self, request, instance_type, show_extra_specs):
278         flavordict = {
279             "vcpus": instance_type.vcpus,
280             "ram": instance_type.memory_mb,
281             "disk": instance_type.root_gb,
282             "ephemeral": instance_type.ephemeral_gb,
283             "swap": instance_type.swap,
284             "original_name": instance_type.name
285         }
286         if show_extra_specs:
287             flavordict['extra_specs'] = instance_type.extra_specs
288         return flavordict
289 
290     def _get_flavor(self, request, instance, show_extra_specs):
291         instance_type = instance.get_flavor()
292         if not instance_type:
293             LOG.warning("Instance has had its instance_type removed "
294                         "from the DB", instance=instance)
295             return {}
296 
297         if api_version_request.is_supported(request, min_version="2.47"):
298             return self._get_flavor_dict(request, instance_type,
299                                          show_extra_specs)
300 
301         flavor_id = instance_type["flavorid"]
302         flavor_bookmark = self._flavor_builder._get_bookmark_link(request,
303                                                                   flavor_id,
304                                                                   "flavors")
305         return {
306             "id": str(flavor_id),
307             "links": [{
308                 "rel": "bookmark",
309                 "href": flavor_bookmark,
310             }],
311         }
312 
313     def _load_fault(self, request, instance):
314         try:
315             mapping = objects.InstanceMapping.get_by_instance_uuid(
316                 request.environ['nova.context'], instance.uuid)
317             if mapping.cell_mapping is not None:
318                 with nova_context.target_cell(instance._context,
319                                               mapping.cell_mapping):
320                     return instance.fault
321         except exception.InstanceMappingNotFound:
322             pass
323 
324         # NOTE(danms): No instance mapping at all, or a mapping with no cell,
325         # which means a legacy environment or instance.
326         return instance.fault
327 
328     def _get_fault(self, request, instance):
329         if 'fault' in instance:
330             fault = instance.fault
331         else:
332             fault = self._load_fault(request, instance)
333 
334         if not fault:
335             return None
336 
337         fault_dict = {
338             "code": fault["code"],
339             "created": utils.isotime(fault["created_at"]),
340             "message": fault["message"],
341         }
342 
343         if fault.get('details', None):
344             is_admin = False
345             context = request.environ["nova.context"]
346             if context:
347                 is_admin = getattr(context, 'is_admin', False)
348 
349             if is_admin or fault['code'] != 500:
350                 fault_dict['details'] = fault["details"]
351 
352         return fault_dict
