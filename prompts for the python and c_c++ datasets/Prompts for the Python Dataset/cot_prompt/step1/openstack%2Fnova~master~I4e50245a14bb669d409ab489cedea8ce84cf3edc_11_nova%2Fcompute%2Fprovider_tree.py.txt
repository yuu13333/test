Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
placement: adds ProviderTree for nested resources

We need a way of representing the hierarchical relationship between
resource providers. This representation needs to be able to work with
either UUIDs or unique string name identifiers due to the way that NUMA
cell and topology objects are constructed in the virt layer. It also
needs to provide a way of updating the inventory of any of the
providers in a tree and returning whether or not the inventory for the
tree has changed.

Following patches show how the ProviderTree interface introduced here
is used.  The scheduler reporting client will build a ProviderTree
containing a resource provider for each hypervisor or baremetal node it
knows about. The information provided to it by the resource tracker
will be used to set inventory information and understand the nesting
relationships between providers.  This ProviderTree is used within the
reporting client to set inventory against resource providers contained
in the ProviderTree and determine whether inventory has changed.
Essentially, this ProviderTree object becomes a nova-compute-side cache
of provider and inventory information.

Change-Id: I4e50245a14bb669d409ab489cedea8ce84cf3edc
blueprint: nested-resource-providers

####code 
1 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
2 #    not use this file except in compliance with the License. You may obtain
3 #    a copy of the License at
4 #
5 #         http://www.apache.org/licenses/LICENSE-2.0
6 #
7 #    Unless required by applicable law or agreed to in writing, software
8 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
9 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
10 #    License for the specific language governing permissions and limitations
11 #    under the License.
12 
13 """An object describing a tree of resource providers and their inventories.
14 
15 This object is not stored in the Nova API or cell databases; rather, this
16 object is constructed and used by the scheduler report client to track state
17 changes for resources on the hypervisor or baremetal node. As such, there are
18 no remoteable methods nor is there any interaction with the nova.db modules.
19 """
20 
21 import copy
22 
23 from oslo_concurrency import lockutils
24 from oslo_log import log as logging
25 from oslo_utils import uuidutils
26 
27 from nova.i18n import _
28 
29 LOG = logging.getLogger(__name__)
30 _LOCK_NAME = 'provider-tree-lock'
31 
32 
33 def _inventory_has_changed(cur, new):
34     if sorted(cur.keys()) != sorted(new.keys()):
35         return True
36     for key, cur_rec in cur.items():
37 
38         new_rec = new[key]
39         for rec_key, cur_val in cur_rec.items():
40             if rec_key not in new_rec:
41                 # Deliberately don't want to compare missing keys in the
42                 # inventory record. For instance, we will be passing in fields
43                 # like allocation_ratio in the current dict but the resource
44                 # tracker may only pass in the total field. We want to return
45                 # that inventory didn't change when the total field values are
46                 # the same even if the allocation_ratio field is missing from
47                 # the new record.
48                 continue
49             if new_rec[rec_key] != cur_val:
50                 return True
51     return False
52 
53 
54 class _Provider(object):
55     """Represents a resource provider in the tree. All operations against the
56     tree should be done using the ProviderTree interface, since it controls
57     thread-safety.
58     """
59     def __init__(self, name, uuid=None, generation=None, parent_uuid=None):
60         if uuid is None:
61             uuid = uuidutils.generate_uuid()
62         self.uuid = uuid
63         self.name = name
64         self.generation = generation
65         self.parent_uuid = parent_uuid
66         # Contains a dict, keyed by uuid of child resource providers having
67         # this provider as a parent
68         self.children = {}
69         # dict of inventory records, keyed by resource class
70         self.inventory = {}
71 
72     def set_generation(self, generation):
73         self.generation = generation
74 
75     def _find(self, search, search_key):
76         if getattr(self, search_key) == search:
77             return self
78         if search in self.children:
79             return self.children[search]
80         if self.children:
81             for child in self.children.values():
82                 # We already searched for the child by UUID above, so here we
83                 # just check for a child name match
84                 if child.name == search:
85                     return child
86                 subchild = child._find(search, search_key)
87                 if subchild:
88                     return subchild
89         return None
90 
91     def find_by_uuid(self, uuid):
92         return self._find(uuid, 'uuid')
93 
94     def find_by_name(self, name):
95         return self._find(name, 'name')
96 
97     def add_child(self, provider):
98         self.children[provider.uuid] = provider
99 
100     def remove_child(self, provider):
101         if provider.uuid in self.children:
102             del self.children[provider.uuid]
103 
104     def inventory_changed(self, inventory):
105         """Update the stored inventory for the provider and return whether the
106         inventory has changed.
107         """
108         return _inventory_has_changed(self.inventory, inventory)
109 
110     def update_inventory(self, inventory):
111         """Update the stored inventory for the provider and return whether the
112         inventory has changed.
113         """
114         if _inventory_has_changed(self.inventory, inventory):
115             self.inventory = copy.deepcopy(inventory)
116             return True
117         return False
118 
119 
120 class ProviderTree(object):
121 
122     def __init__(self, cns=None):
123         """Create a provider tree from an `objects.ComputeNodeList` object."""
124         self.lock = lockutils.internal_lock(_LOCK_NAME)
125         self.roots = []
126 
127         if cns:
128             for cn in cns:
129                 # By definition, all compute nodes are root providers...
130                 p = _Provider(cn.hypervisor_hostname, cn.uuid)
131                 self.roots.append(p)
132 
133     def remove(self, name_or_uuid):
134         """Safely removes the provider identified by the supplied name_or_uuid
135         parameter and all of its children from the tree.
136         """
137         with self.lock:
138             found = self._find_with_lock(name_or_uuid)
139             if not found:
140                 raise ValueError(_("No such provider %s") % name_or_uuid)
141 
142             if found.parent_uuid:
143                 parent = self._find_with_lock(found.parent_uuid)
144                 parent.remove_child(found)
145             else:
146                 self.roots.remove(found)
147 
148     def new_root(self, name, uuid, generation):
149         """Adds a new root provider to the tree."""
150         with self.lock:
151             if self._find_with_lock(uuid) is not None:
152                 raise ValueError(
153                     _("Provider %s already exists as a root.") % uuid
154                 )
155 
156             p = _Provider(name, uuid, generation)
157             self.roots.append(p)
158             return p
159 
160     def _find_with_lock(self, name_or_uuid):
161         if uuidutils.is_uuid_like(name_or_uuid):
162             getter = 'find_by_uuid'
163         else:
164             getter = 'find_by_name'
165         for root in self.roots:
166             fn = getattr(root, getter)
167             found = fn(name_or_uuid)
168             if found:
169                 return found
170         return None
171 
172     def find(self, name_or_uuid):
173         with self.lock:
174             return self._find_with_lock(name_or_uuid)
175 
176     def exists(self, name_or_uuid):
177         """Given either a name or a UUID, return True if the tree contains the
178         child provider, False otherwise.
179         """
180         with self.lock:
181             found = self._find_with_lock(name_or_uuid)
182         return found is not None
183 
184     def new_child(self, name, parent_uuid, uuid=None, generation=None):
185         """Creates a new child provider with the given name and uuid under the
186         given parent.
187 
188         :returns: the new provider
189 
190         :raises ValueError if parent_uuid points to a non-existing provider.
191         """
192         with self.lock:
193             parent = self._find_with_lock(parent_uuid)
194             if not parent:
195                 raise ValueError(_("No such parent %s") % parent_uuid)
196 
197             p = _Provider(name, uuid, generation, parent_uuid)
198             parent.add_child(p)
199             return p
200 
201     def inventory_changed(self, name_or_uuid, inventory):
202         """Returns True if the supplied inventory is different for the provider
203         with the supplied name or UUID.
204 
205         :raises: ValueError if a provider with uuid was not found in the tree.
206         :param name_or_uuid: Either name or UUID of the resource provider to
207                              update inventory for.
208         :param inventory: dict, keyed by resource class, of inventory
209                           information.
210         """
211         with self.lock:
212             p = self._find_with_lock(name_or_uuid)
213             if not p:
214                 raise ValueError(_("No such provider %s") % name_or_uuid)
215 
216             return p.inventory_changed(inventory)
217 
218     def update_inventory(self, name_or_uuid, inventory):
219         """Given a name or UUID of a provider and a dict of inventory resource
220         records, update the provider's inventory and return True if the
221         inventory has changed.
222 
223         :raises: ValueError if a provider with uuid was not found in the tree.
224         :param name_or_uuid: Either name or UUID of the resource provider to
225                              update inventory for.
226         :param inventory: dict, keyed by resource class, of inventory
227                           information.
228         """
229         with self.lock:
230             p = self._find_with_lock(name_or_uuid)
231             if not p:
232                 raise ValueError(_("No such provider %s") % name_or_uuid)
233 
234             return p.update_inventory(inventory)
