Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
l3 flavor: add more events notifications

After the addition of a new resource and related events with [1],
this patch adds the necessary notifications for l3 flavor,
resource(ROUTER_CONTROLLER) and events(PRECOMMIT_ADD_ASSOCIATION and
PRECOMMIT_DELETE_ASSOCIATIONS) so that l3 flavor driver can subscribe to
them. extra routes/l3_gwmode/l3_hamode need care because they are
updated via update_router but within different db transaction.
Since extra attributes by l3_* are populated by (ROUTER,
PRECOMMIT_CREATE/UPDATE) via ExtraAttributesMixin.set_extra_attr_value.
The method can't emit (ROUTER, PRECOMMIT_UPDATE) to avoid cyclic
callback. So it notify (ROUTER_CONTROLLER, PRECOMMIT_UPDATE) instead.

[1] I1e72ee843851004d26410a90da4030ab3b024741

Closes-Bug: #1745633

Co-Authored-By: Manjeet Singh Bhatia<manjeet.s.bhatia@intel.com>
Change-Id: If20b11f0587f1ed30db72d97c15b20d4c6e87543

####code 
1 # Copyright (c) 2014 OpenStack Foundation.  All rights reserved.
2 #
3 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
4 #    not use this file except in compliance with the License. You may obtain
5 #    a copy of the License at
6 #
7 #         http://www.apache.org/licenses/LICENSE-2.0
8 #
9 #    Unless required by applicable law or agreed to in writing, software
10 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 #    License for the specific language governing permissions and limitations
13 #    under the License.
14 
15 from neutron_lib.api.definitions import l3 as l3_apidef
16 from neutron_lib.api.validators import availability_zone as az_validator
17 from neutron_lib.callbacks import events
18 from neutron_lib.callbacks import registry
19 from neutron_lib.callbacks import resources
20 from oslo_config import cfg
21 
22 from neutron._i18n import _
23 from neutron.db import _resource_extend as resource_extend
24 from neutron.db import l3_db
25 from neutron.db.models import l3_attrs
26 
27 
28 def get_attr_info():
29     """Returns api visible attr names and their default values."""
30     return {'distributed': {'default': cfg.CONF.router_distributed},
31             'ha': {'default': cfg.CONF.l3_ha},
32             'ha_vr_id': {'default': 0},
33             'availability_zone_hints': {
34                 'default': '[]',
35                 'transform_to_db': az_validator.convert_az_list_to_string,
36                 'transform_from_db': az_validator.convert_az_string_to_list}
37             }
38 
39 
40 @resource_extend.has_resource_extenders
41 class ExtraAttributesMixin(object):
42     """Mixin class to enable router's extra attributes."""
43 
44     @staticmethod
45     @resource_extend.extends([l3_apidef.ROUTERS])
46     def _extend_extra_router_dict(router_res, router_db):
47         extra_attrs = router_db['extra_attributes'] or {}
48         for name, info in get_attr_info().items():
49             from_db = info.get('transform_from_db', lambda x: x)
50             router_res[name] = from_db(extra_attrs.get(name, info['default']))
51 
52     def _ensure_extra_attr_model(self, context, router_db):
53         if not router_db['extra_attributes']:
54             kwargs = {k: v['default'] for k, v in get_attr_info().items()}
55             kwargs['router_id'] = router_db['id']
56             new = l3_attrs.RouterExtraAttributes(**kwargs)
57             context.session.add(new)
58             router_db['extra_attributes'] = new
59 
60     def set_extra_attr_value(self, context, router_db, key, value):
61         # set a single value explicitly
62         with context.session.begin(subtransactions=True):
63             if key in get_attr_info():
64                 info = get_attr_info()[key]
65                 old_router = l3_db.L3_NAT_dbonly_mixin._make_router_dict(
66                     router_db)
67                 to_db = info.get('transform_to_db', lambda x: x)
68                 self._ensure_extra_attr_model(context, router_db)
69                 router_db['extra_attributes'].update({key: to_db(value)})
70                 # NOTE(yamahata): this method is called by callbacks
71                 # of (ROUTER, PRECOMMIT_UPDATE) l3_*_db.py and
72                 # availability_zone/router.py. To avoid cyclic callback,
73                 # ROUTER_CONTROLLER is used for l3 flavor.
74                 registry.notify(resources.ROUTER_CONTROLLER,
75                     events.PRECOMMIT_UPDATE,
76                     self, context=context, router_id=router_db['id'],
77                     router={l3_apidef.ROUTER: {key: value}},
78                     router_db=router_db, old_router=old_router)
79                 return
80             raise RuntimeError(_("Tried to set a key '%s' that doesn't exist "
81                                  "in the extra attributes table.") % key)
