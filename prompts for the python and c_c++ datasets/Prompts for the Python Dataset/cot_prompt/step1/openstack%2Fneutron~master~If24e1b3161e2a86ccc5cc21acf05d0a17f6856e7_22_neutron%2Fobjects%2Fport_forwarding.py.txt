Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
[1] Neutron server side Floating IP port forwarding

This patch implements the plugin and db layer code.
This patch introduces an new service plugin for port forwarding resources,
named 'pf_plugin', and supports create/update/delete port forwarding
operation towards a free Floating IP.

Implements: blueprint port-forwarding
This patch partially implements the following spec:
https://specs.openstack.org/openstack/neutron-specs/specs/rocky/port-forwarding.html

Partial-Bug: #1491317
Change-Id: If24e1b3161e2a86ccc5cc21acf05d0a17f6856e7

####code 
1 # Copyright (c) 2018 OpenStack Foundation
2 #
3 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
4 #    not use this file except in compliance with the License. You may obtain
5 #    a copy of the License at
6 #
7 #         http://www.apache.org/licenses/LICENSE-2.0
8 #
9 #    Unless required by applicable law or agreed to in writing, software
10 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 #    License for the specific language governing permissions and limitations
13 #    under the License.
14 
15 import itertools
16 
17 import netaddr
18 
19 from neutron.db.models import l3
20 from neutron.db.models import port_forwarding as models
21 from neutron.objects import base
22 from neutron.objects import common_types
23 from neutron.objects import router
24 from neutron_lib import constants as lib_const
25 from oslo_versionedobjects import fields as obj_fields
26 
27 FIELDS_NOT_SUPPORT_FILTER = ['internal_ip_address', 'internal_port']
28 
29 
30 @base.NeutronObjectRegistry.register
31 class PortForwarding(base.NeutronDbObject):
32     # Version 1.0: Initial version
33     VERSION = '1.0'
34 
35     db_model = models.PortForwarding
36 
37     primary_keys = ['id']
38     foreign_keys = {'FloatingIP': {'floatingip_id': 'id'},
39                     'Port': {'internal_port_id': 'id'}}
40 
41     fields_need_translation = {
42         'socket': 'socket',
43         'internal_port_id': 'internal_neutron_port_id'
44     }
45 
46     fields = {
47         'id': common_types.UUIDField(),
48         'floatingip_id': common_types.UUIDField(nullable=False),
49         'external_port': common_types.PortRangeField(nullable=False),
50         'protocol': common_types.IpProtocolEnumField(nullable=False),
51         'internal_port_id': common_types.UUIDField(nullable=False),
52         'internal_ip_address': obj_fields.IPV4AddressField(),
53         'internal_port': common_types.PortRangeField(nullable=False),
54         'floating_ip_address': obj_fields.IPV4AddressField(),
55         'router_id': common_types.UUIDField()
56     }
57 
58     synthetic_fields = ['floating_ip_address', 'router_id']
59     fields_no_update = {
60         'id', 'floatingip_id'
61     }
62 
63     FIP_OBJ = None
64 
65     def __eq__(self, other):
66         for attr in self.fields:
67             if getattr(self, attr) != getattr(other, attr):
68                 return False
69         return True
70 
71     def obj_load_attr(self, attrname):
72         if attrname == 'floating_ip_address' or attrname == 'router_id':
73             return self._load_attr_from_fip(attrname)
74         super(PortForwarding, self).obj_load_attr(attrname)
75 
76     def _get_fip_obj(self):
77         if not self.FIP_OBJ:
78             context = self.obj_context.elevated()
79             self.FIP_OBJ = router.FloatingIP.get_object(
80                 context, id=self.floatingip_id)
81         return self.FIP_OBJ
82 
83     def _load_attr_from_fip(self, attrname):
84         # get all necessary info from fip obj
85         fip_obj = self._get_fip_obj()
86         value = getattr(fip_obj, attrname)
87         setattr(self, attrname, value)
88         self.obj_reset_changes([attrname])
89 
90     def from_db_object(self, db_obj):
91         super(PortForwarding, self).from_db_object(db_obj)
92         self._load_attr_from_fip(attrname='router_id')
93         self._load_attr_from_fip(attrname='floating_ip_address')
94 
95     @classmethod
96     def modify_fields_from_db(cls, db_obj):
97         result = super(PortForwarding, cls).modify_fields_from_db(db_obj)
98         if 'socket' in result:
99             groups = result['socket'].split(":")
100             result['internal_ip_address'] = netaddr.IPAddress(
101                 groups[0], version=lib_const.IP_VERSION_4)
102             result['internal_port'] = int(groups[1])
103             del result['socket']
104         return result
105 
106     @classmethod
107     def modify_fields_to_db(cls, fields):
108         result = super(PortForwarding, cls).modify_fields_to_db(fields)
109         if 'internal_ip_address' in result and 'internal_port' in result:
110             result['socket'] = str(
111                 result['internal_ip_address']) + ":" + str(
112                 result['internal_port'])
113             del result['internal_ip_address']
114             del result['internal_port']
115         return result
116 
117     @classmethod
118     def get_port_forwarding_obj_by_routers(cls, context, router_ids):
119         query = context.session.query(cls.db_model, l3.FloatingIP)
120         query = query.join(l3.FloatingIP,
121                            cls.db_model.floatingip_id == l3.FloatingIP.id)
122         query = query.filter(l3.FloatingIP.router_id.in_(router_ids))
123 
124         return cls._unique_port_forwarding_iterator(query)
125 
126     @classmethod
127     def _unique_port_forwarding_iterator(cls, query):
128         q = query.order_by(l3.FloatingIP.router_id)
129         keyfunc = lambda row: row[1]
130         group_iterator = itertools.groupby(q, keyfunc)
131 
132         for key, value in group_iterator:
133             for row in value:
134                 yield (row[1]['router_id'], row[1]['floating_ip_address'],
135                        row[0]['id'], row[1]['id'])
