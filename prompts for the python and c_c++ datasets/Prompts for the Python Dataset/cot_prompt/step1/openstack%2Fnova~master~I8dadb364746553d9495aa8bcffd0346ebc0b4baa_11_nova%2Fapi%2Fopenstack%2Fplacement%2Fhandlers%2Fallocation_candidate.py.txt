Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
placement: support GET /allocation_candidates

A new 1.8 API microversion is added to return information that the
scheduler can use to select a particular set of resource providers to
claim resources for an instance.

The GET /allocation_candidates endpoint takes a "resources" querystring
parameter similar to the GET /resource_providers endpoint and returns a
dict with two top-level elements:

"allocation_requests" is a list of JSON objects that contain a
serialized HTTP body that the scheduler may subsequently use in a call
to PUT /allocations/{consumer_uuid} to claim resources against a
related set of resource providers.

"provider_summaries" is a JSON object, keyed by resource provider UUID,
of JSON objects of inventory/capacity information that the scheduler
can use to sort/weigh the results of the call when making its
destination host decisions.

Change-Id: I8dadb364746553d9495aa8bcffd0346ebc0b4baa
blueprint: placement-allocation-requests

####code 
1 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
2 #    not use this file except in compliance with the License. You may obtain
3 #    a copy of the License at
4 #
5 #         http://www.apache.org/licenses/LICENSE-2.0
6 #
7 #    Unless required by applicable law or agreed to in writing, software
8 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
9 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
10 #    License for the specific language governing permissions and limitations
11 #    under the License.
12 
13 """Placement API handlers for getting allocation candidates."""
14 
15 import collections
16 
17 import jsonschema
18 from oslo_log import log as logging
19 from oslo_serialization import jsonutils
20 from oslo_utils import encodeutils
21 import webob
22 
23 from nova.api.openstack.placement import util
24 from nova.api.openstack.placement import wsgi_wrapper
25 from nova import exception
26 from nova.i18n import _
27 from nova.objects import resource_provider as rp_obj
28 
29 
30 LOG = logging.getLogger(__name__)
31 
32 # Represents the allowed query string parameters to the GET
33 # /allocation_candidates API call
34 _GET_SCHEMA_1_8 = {
35     "type": "object",
36     "properties": {
37         "resources": {
38             "type": "string"
39         },
40     },
41     "required": [
42         "resources",
43     ],
44     "additionalProperties": False,
45 }
46 
47 
48 def _transform_allocation_requests(alloc_reqs):
49     """Turn supplied list of AllocationRequest objects into a list of dicts of
50     resources involved in the allocation request. The returned results is
51     intended to be able to be used as the body of a PUT
52     /allocations/{consumer_uuid} HTTP request, so therefore we return a list of
53     JSON objects that looks like the following:
54 
55     [
56         {
57             "allocations": [
58                 {
59                     "resource_provider": {
60                         "uuid": $rp_uuid,
61                     }
62                     "resources": {
63                         $resource_class: $requested_amount, ...
64                     },
65                 }, ...
66             ],
67         }, ...
68     ]
69     """
70     results = []
71     for ar in alloc_reqs:
72         provider_resources = collections.defaultdict(dict)
73         for rr in ar.resource_requests:
74             res_dict = provider_resources[rr.resource_provider.uuid]
75             res_dict[rr.resource_class] = rr.amount
76 
77         allocs = [
78             {
79                 "resource_provider": {
80                     "uuid": rp_uuid,
81                 },
82                 "resources": resources,
83             } for rp_uuid, resources in provider_resources.items()
84         ]
85         alloc = {
86             "allocations": allocs
87         }
88         results.append(alloc)
89     return results
90 
91 
92 def _transform_provider_summaries(p_sums):
93     """Turn supplied list of ProviderSummary objects into a dict, keyed by
94     resource provider UUID, of dicts of provider and inventory information.
95 
96     {
97        RP_UUID_1: {
98            'resources': {
99               'DISK_GB': 4,
100               'VCPU': 2
101            }
102        },
103        RP_UUID_2: {
104            'resources': {
105               'DISK_GB': 6,
106               'VCPU': 3
107            }
108        }
109     }
110     """
111     return {
112         ps.resource_provider.uuid: {
113             'resources': {
114                 psr.resource_class: {
115                     'capacity': psr.capacity,
116                     'used': psr.used,
117                 } for psr in ps.resources
118             }
119         } for ps in p_sums
120     }
121 
122 
123 def _transform_allocation_candidates(alloc_candidates):
124     """Turn supplied AllocationCandidates object into a dict containing
125     allocation requests and provider summaries.
126 
127     {
128         'allocation_requests': <ALLOC_REQUESTS>,
129         'provider_summaries': <PROVIDER_SUMMARIES>,
130     }
131     """
132     return {
133         'allocation_requests': _transform_allocation_requests(
134             alloc_candidates.allocation_requests,
135         ),
136         'provider_summaries': _transform_provider_summaries(
137             alloc_candidates.provider_summaries,
138         ),
139     }
140 
141 
142 @wsgi_wrapper.PlacementWsgify
143 @util.check_accept('application/json')
144 def list_allocation_candidates(req):
145     """GET a list of resource providers.
146 
147     On success return a 200 and an application/json body representing
148     a collection of resource providers.
149     """
150     context = req.environ['placement.context']
151     schema = _GET_SCHEMA_1_8
152     try:
153         jsonschema.validate(dict(req.GET), schema,
154                             format_checker=jsonschema.FormatChecker())
155     except jsonschema.ValidationError as exc:
156         raise webob.exc.HTTPBadRequest(
157             _('Invalid query string parameters: %(exc)s') %
158             {'exc': exc})
159 
160     resources = util.normalize_resources_qs_param(req.GET['resources'])
161     filters = {
162         'resources': resources,
163     }
164 
165     try:
166         candidates = rp_obj.AllocationCandidates.get_by_filters(
167             context, filters
168         )
169     except exception.ResourceClassNotFound as exc:
170         raise webob.exc.HTTPBadRequest(
171             _('Invalid resource class in resources parameter: %(error)s') %
172             {'error': exc})
173 
174     response = req.response
175     trx_cands = _transform_allocation_candidates(candidates)
176     json_data = jsonutils.dumps(trx_cands)
177     response.body = encodeutils.to_utf8(json_data)
178     response.content_type = 'application/json'
179     return response
