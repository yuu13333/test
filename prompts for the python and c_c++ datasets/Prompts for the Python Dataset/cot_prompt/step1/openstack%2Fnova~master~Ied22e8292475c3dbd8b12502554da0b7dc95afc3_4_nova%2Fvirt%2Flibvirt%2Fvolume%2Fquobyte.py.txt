Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Switch Nova Quobyte volume driver to mount via systemd-run

In order to prevent systemd from unmounting volumes mounted by the
Quobyte driver, the mount call is run in a different CGROUP on
systemd based systems. The process becomes a child of the systemd
daemon and not of the Nova Compute service.
This adds a validate_and_wait() method for checking mounts to
become available and corresponding unit tests, in order to
circumvent process encapsulation and race issues.

Closes-Bug: #1530860

Change-Id: Ied22e8292475c3dbd8b12502554da0b7dc95afc3

####code 
1 # Copyright (c) 2015 Quobyte Inc.
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 
16 import errno
17 import os
18 from time import sleep
19 
20 from oslo_concurrency import processutils
21 from oslo_log import log as logging
22 from oslo_utils import fileutils
23 import six
24 
25 import nova.conf
26 from nova import exception as nova_exception
27 from nova.i18n import _
28 from nova.i18n import _LE
29 from nova.i18n import _LI
30 from nova import utils
31 from nova.virt.libvirt import utils as libvirt_utils
32 from nova.virt.libvirt.volume import fs
33 
34 LOG = logging.getLogger(__name__)
35 
36 CONF = nova.conf.CONF
37 
38 SOURCE_PROTOCOL = 'quobyte'
39 SOURCE_TYPE = 'file'
40 DRIVER_CACHE = 'none'
41 DRIVER_IO = 'native'
42 
43 
44 def mount_volume(volume, mnt_base, configfile=None):
45     """Wraps execute calls for mounting a Quobyte volume"""
46     fileutils.ensure_tree(mnt_base)
47 
48     command = ['mount.quobyte', volume, mnt_base]
49     if os.path.exists(" /run/systemd/system"):
50         # Note(kaisers): with systemd this requires a separate CGROUP to
51         # prevent Nova service stop/restarts from killing the mount.
52         command = ['systemd-run', 'mount.quobyte', '-f', volume, mnt_base]
53     if configfile:
54         command.extend(['-c', configfile])
55 
56     LOG.debug('Mounting volume %s at mount point %s ...',
57               volume,
58               mnt_base)
59     # Run mount command but do not fail on already mounted exit code
60     utils.execute(*command, run_as_root=True)
61     if validate_and_wait(mnt_base):
62         LOG.info(_LI('Mounted volume: %s'), volume)
63 
64 
65 def umount_volume(mnt_base):
66     """Wraps execute calls for unmouting a Quobyte volume"""
67     try:
68         utils.execute('umount.quobyte', mnt_base, run_as_root=True)
69     except processutils.ProcessExecutionError as exc:
70         if 'Device or resource busy' in six.text_type(exc):
71             LOG.error(_LE("The Quobyte volume at %s is still in use."),
72                       mnt_base)
73         else:
74             LOG.exception(_LE("Couldn't unmount the Quobyte Volume at %s"),
75                           mnt_base)
76 
77 
78 def validate_and_wait(mnt_base, max_checks=30):
79     """Loops iterations of validate_volume with up to 30 0.1s interrupts"""
80     if max_checks > 30:
81         max_checks = 30
82     for x in range(0, max_checks):
83         if validate_volume(mnt_base):
84             return True
85         else:
86             sleep(0.1)
87 
88     return False
89 
90 
91 def validate_volume(mnt_base):
92     """Wraps execute calls for checking validity of a Quobyte volume"""
93     command = ['getfattr', "-n", "quobyte.info", mnt_base]
94     try:
95         utils.execute(*command)
96     except processutils.ProcessExecutionError as exc:
97         msg = (_("The mount %(mount_path)s is not a valid"
98                  " Quobyte volume. Error: %(exc)s")
99                % {'mount_path': mnt_base, 'exc': exc})
100         raise nova_exception.InternalError(msg)
101         return False
102 
103     if not os.access(mnt_base, os.W_OK | os.X_OK):
104         msg = (_LE("Volume is not writable. Please broaden the file"
105                    " permissions. Mount: %s") % mnt_base)
106         raise nova_exception.InternalError(msg)
107 
108     return True
109 
110 
111 class LibvirtQuobyteVolumeDriver(fs.LibvirtBaseFileSystemVolumeDriver):
112     """Class implements libvirt part of volume driver for Quobyte."""
113 
114     def _get_mount_point_base(self):
115         return CONF.libvirt.quobyte_mount_point_base
116 
117     def get_config(self, connection_info, disk_info):
118         conf = super(LibvirtQuobyteVolumeDriver,
119                      self).get_config(connection_info, disk_info)
120         data = connection_info['data']
121         conf.source_protocol = SOURCE_PROTOCOL
122         conf.source_type = SOURCE_TYPE
123         conf.driver_cache = DRIVER_CACHE
124         conf.driver_io = DRIVER_IO
125         conf.driver_format = data.get('format', 'raw')
126 
127         conf.source_path = self._get_device_path(connection_info)
128 
129         return conf
130 
131     @utils.synchronized('connect_volume')
132     def connect_volume(self, connection_info, disk_info):
133         """Connect the volume."""
134         data = connection_info['data']
135         quobyte_volume = self._normalize_export(data['export'])
136         mount_path = self._get_mount_path(connection_info)
137         mounted = libvirt_utils.is_mounted(mount_path,
138                                            SOURCE_PROTOCOL
139                                            + '@' + quobyte_volume)
140         if mounted:
141             try:
142                 os.stat(mount_path)
143             except OSError as exc:
144                 if exc.errno == errno.ENOTCONN:
145                     mounted = False
146                     LOG.info(_LI('Fixing previous mount %s which was not'
147                                  ' unmounted correctly.'), mount_path)
148                     umount_volume(mount_path)
149 
150         if not mounted:
151             mount_volume(quobyte_volume,
152                          mount_path,
153                          CONF.libvirt.quobyte_client_cfg)
154 
155         validate_and_wait(mount_path)
156 
157     @utils.synchronized('connect_volume')
158     def disconnect_volume(self, connection_info, disk_dev):
159         """Disconnect the volume."""
160 
161         quobyte_volume = self._normalize_export(
162                                         connection_info['data']['export'])
163         mount_path = self._get_mount_path(connection_info)
164 
165         if libvirt_utils.is_mounted(mount_path, 'quobyte@' + quobyte_volume):
166             umount_volume(mount_path)
167         else:
168             LOG.info(_LI("Trying to disconnected unmounted volume at %s"),
169                      mount_path)
170 
171     def _normalize_export(self, export):
172         protocol = SOURCE_PROTOCOL + "://"
173         if export.startswith(protocol):
174             export = export[len(protocol):]
175         return export
