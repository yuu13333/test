Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 # Copyright 2016 OVH SAS
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 
16 from oslo_log import helpers as log_helpers
17 from oslo_log import log as logging
18 
19 from neutron.api.rpc.callbacks import resources
20 from neutron.api.v2 import attributes as api_v2_attributes
21 from neutron.callbacks import events as callbacks_events
22 from neutron.callbacks import registry as callbacks_registry
23 from neutron.callbacks import resources as callbacks_resources
24 from neutron.extensions import portbindings
25 from neutron import manager
26 from neutron.plugins.ml2.drivers.linuxbridge.mech_driver import (
27     mech_linuxbridge)
28 from neutron.plugins.ml2.drivers.mech_sriov.mech_driver import (
29     mech_driver as mech_sriov)
30 from neutron.plugins.ml2.drivers.openvswitch.mech_driver import (
31     mech_openvswitch)
32 from neutron.services.qos.notification_drivers import message_queue
33 from neutron.services.qos.notification_drivers import qos_base
34 from neutron.services.qos import qos_consts
35 
36 LOG = logging.getLogger(__name__)
37 
38 RULE_VALIDATION_IGNORED_FIELDS = ['qos_policy_id', 'id', 'type']
39 
40 # TODO(slaweq/ajo): list of all mech_drivers and what VNIC/VIF type are
41 # supported by each of them should be provided by ml2 plugin in similar way
42 # like it is done for supported_qos_rule_types for example
43 VNIC_TYPE_TO_MECH_DRIVERS = {
44     portbindings.VNIC_NORMAL: [mech_openvswitch.OpenvswitchMechanismDriver,
45                                mech_linuxbridge.LinuxbridgeMechanismDriver],
46     portbindings.VNIC_DIRECT: [mech_sriov.SriovNicSwitchMechanismDriver]}
47 
48 VIF_TYPE_TO_MECH_DRIVERS = {
49     portbindings.VIF_TYPE_OVS: [mech_openvswitch.OpenvswitchMechanismDriver],
50     portbindings.VIF_TYPE_BRIDGE: [
51         mech_linuxbridge.LinuxbridgeMechanismDriver],
52 }
53 
54 
55 class Ml2QoSServiceNotificationDriver(
56     message_queue.RpcQosServiceNotificationDriver):
57     """RPC message queue service notification driver with policy validation
58 
59     This is service notification driver for QoS with support for validate if
60     policy can be applied on port(s) based on vif_type and/or vnic_type of
61     ports.
62     This driver is designed to work with ML2 core plugin.
63     """
64 
65     def __init__(self):
66         super(Ml2QoSServiceNotificationDriver, self).__init__()
67         callbacks_registry.subscribe(
68                 self._validate_create_port_callback,
69                 callbacks_resources.PORT,
70                 callbacks_events.BEFORE_CREATE)
71         callbacks_registry.subscribe(
72                 self._validate_update_port_callback,
73                 callbacks_resources.PORT,
74                 callbacks_events.BEFORE_UPDATE)
75         callbacks_registry.subscribe(
76                 self._validate_update_network_callback,
77                 api_v2_attributes.NETWORK,
78                 callbacks_events.BEFORE_UPDATE)
79 
80     @log_helpers.log_method_call
81     def validate_policy_for_port(self, context, policy, port):
82         vnic_type = port.get(portbindings.VNIC_TYPE)
83         vif_type = port.get(portbindings.VIF_TYPE)
84 
85         if vif_type and vif_type != portbindings.VIF_TYPE_UNBOUND:
86             mechdrivers = VIF_TYPE_TO_MECH_DRIVERS.get(vif_type)
87             check_by_vnic_type = False
88         else:
89             mechdrivers = VNIC_TYPE_TO_MECH_DRIVERS.get(vnic_type)
90             check_by_vnic_type = True
91 
92         if not mechdrivers:
93             raise qos_base.PolicyPortConflict(
94                 policy_id=policy['id'], port_id=port['id'])
95         self._validate_port_rules_for_mech_drivers(
96             port, policy.rules, mechdrivers, check_by_vnic_type)
97 
98     def _validate_create_port_callback(self, resource, event, trigger,
99                                        **kwargs):
100         context = kwargs.get('context')
101         port = kwargs.get('port')
102         policy_id = port.get(qos_consts.QOS_POLICY_ID)
103 
104         if policy_id is None:
105             return
106 
107         policy = message_queue._get_qos_policy_cb(
108             resources.QOS_POLICY, policy_id, context=context)
109         self.validate_policy_for_port(context, policy, port)
110 
111     def _validate_update_port_callback(self, resource, event, trigger,
112                                        **kwargs):
113         context = kwargs.get('context')
114         original_port = kwargs.get('original_port')
115         updated_port = kwargs.get('updated_port')
116         original_policy_id = original_port.get(qos_consts.QOS_POLICY_ID)
117         policy_id = updated_port.get(qos_consts.QOS_POLICY_ID)
118 
119         if policy_id is None or policy_id == original_policy_id:
120             return
121 
122         policy = message_queue._get_qos_policy_cb(
123             resources.QOS_POLICY, policy_id, context=context)
124         self.validate_policy_for_port(context, policy, updated_port)
125 
126     def _validate_update_network_callback(self, resource, event, trigger,
127                                           **kwargs):
128         context = kwargs.get('context')
129         original_network = kwargs.get('original_network')
130         updated_network = kwargs.get('updated_network')
131         original_policy_id = original_network.get(qos_consts.QOS_POLICY_ID)
132         policy_id = updated_network.get(qos_consts.QOS_POLICY_ID)
133 
134         if policy_id is None or policy_id == original_policy_id:
135             return
136 
137         policy = message_queue._get_qos_policy_cb(
138             resources.QOS_POLICY, policy_id, context=context)
139         self.validate_policy_for_network(context, policy, updated_network)
140 
141     def _validate_port_rules_for_mech_drivers(self, port, rules, mechdrivers,
142                                               check_by_vnic_type):
143         core_plugin = manager.NeutronManager.get_plugin()
144         validated_with_one_mech_driver = False
145 
146         for driver in core_plugin.mechanism_manager.ordered_mech_drivers:
147             for mechdriver in mechdrivers:
148                 if (isinstance(driver.obj, mechdriver) and
149                     driver.obj._supports_port_binding):
150 
151                     self._validate_port_rules_supported(
152                         port, rules, driver.obj.supported_qos_rule_types)
153                     validated_with_one_mech_driver = True
154 
155         if not validated_with_one_mech_driver and check_by_vnic_type:
156             for mechdriver in mechdrivers:
157                 self._validate_port_rules_supported(
158                     port, rules, mechdriver.supported_qos_rule_types)
159 
160     def _validate_port_rules_supported(self, port, rules, supported_rules):
161         # we expect the mechanism supportd_qos_rule_types to look like this
162         # {'DSCP_MARK': {'dscp_mark': None},
163         #  'BANDWIDTH_LIMIT': {'max_kbps' : qos_consts.ANY_VALUE,
164         #                      'direction': ['egress']}}
165         # in this example, BANDWIDTH_LIMIT does not support max_burst_kbps and
166         # directions others than egress
167         for rule in rules:
168             if rule.rule_type not in supported_rules.keys():
169                 raise qos_base.PolicyRuleNotSupportedForPort(
170                     rule_type=rule.rule_type,
171                     port_id=port.get("id"))
172             self._validate_rule_parameters(port, rule, supported_rules)
173 
174     def _validate_rule_parameters(self, port, rule, supported_rules):
175         for parameter, value in rule.to_dict().items():
176             if parameter in RULE_VALIDATION_IGNORED_FIELDS:
177                 continue
178 
179             supported_parameters = supported_rules[rule.rule_type]
180 
181             supported_values = supported_parameters.get(parameter)
182             if supported_values is None:
183                 # The parameter is not supported by the mech driver
184                 raise qos_base.PolicyRuleParameterNotSupportedForPort(
185                         rule_type=rule.rule_type,
186                         parameter=parameter,
187                         port_id=port['id'])
188 
189             if (supported_values != qos_consts.ANY_VALUE and
190                 value not in supported_values):
191                 raise qos_base.PolicyRuleParameterValueNotSupportedForPort(
192                         rule_type=rule.rule_type,
193                         parameter=parameter,
194                         value=value,
195                         port_id=port['id'])
