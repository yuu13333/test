Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 # Copyright 2016 Red Hat, Inc.
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 import subprocess
16 import time
17 
18 from neutron.tests.tempest.api import base as base_api
19 from neutron.tests.tempest import config
20 from neutron.tests.tempest.scenario import constants
21 from tempest.common import waiters
22 from tempest.lib.common.utils import data_utils
23 from tempest import test
24 
25 CONF = config.CONF
26 
27 
28 class RoutedNetworkTest(base_api.BaseAdminNetworkTest):
29 
30     @classmethod
31     def resource_setup(self):
32         super(base_api.BaseAdminNetworkTest, self).resource_setup()
33         self.servers = []
34         self.keypairs = []
35         self.security_rules = []
36 
37     @classmethod
38     def resource_cleanup(self):
39         for keypair in self.keypairs:
40             self.manager.keypairs_client.delete_keypair(
41                 keypair_name=keypair['name'])
42 
43         super(base_api.BaseAdminNetworkTest, self).resource_cleanup()
44 
45     def _server_cleanup(self, servers):
46         for server in servers:
47             self.manager.servers_client.delete_server(server)
48             waiters.wait_for_server_termination(self.manager.servers_client,
49                                                 server)
50 
51     def _create_keypair(self, client=None):
52         name = data_utils.rand_name('keypair-test')
53         client = client or self.manager.keypairs_client
54         body = client.create_keypair(name=name)
55         self.keypairs.append(body['keypair'])
56         return body['keypair']
57 
58     def _create_secgroup_rules(self, rule_list, secgroup_id=None):
59         client = self.manager.network_client
60         if not secgroup_id:
61             sgs = client.list_security_groups()['security_groups']
62             for sg in sgs:
63                 if sg['name'] == constants.DEFAULT_SECURITY_GROUP:
64                     secgroup_id = sg['id']
65                     break
66         for rule in rule_list:
67             direction = rule.pop('direction')
68             rule = client.create_security_group_rule(
69                 direction=direction,
70                 security_group_id=secgroup_id,
71                 **rule)
72             self.security_rules.append(rule)
73 
74     def _create_loginable_secgroup_rule(self, secgroup_id=None):
75         """This rule is intended to permit inbound ssh
76 
77         Allowing ssh traffic traffic from all sources, so no group_id is
78         provided.
79         Setting a group_id would only permit traffic from ports
80         belonging to the same security group.
81         """
82 
83         rule_list = [{'protocol': 'tcp',
84                       'direction': 'ingress',
85                       'port_range_min': 22,
86                       'port_range_max': 22,
87                       'remote_ip_prefix': '0.0.0.0/0',
88                       'description': "ssh test"},
89 
90                      ]
91         self._create_secgroup_rules(rule_list, secgroup_id=secgroup_id)
92 
93     def _create_server(self, flavor_ref, image_ref, key_name, networks,
94                        name=None):
95         name = name or data_utils.rand_name('server-test')
96         server = self.manager.servers_client.create_server(
97             name=name, flavorRef=flavor_ref,
98             imageRef=image_ref,
99             key_name=key_name,
100             networks=networks)
101         self.servers.append(server['server']['id'])
102         return server
103 
104     def _check_connectivity(self, port, namespace):
105         for fixed_ip in port['fixed_ips']:
106             ip = fixed_ip['ip_address']
107             self._ssh_check(CONF.validation.image_ssh_user,
108                             ip, namespace,
109                             self.keypair['private_key'])
110 
111     def _ssh_check(self, username, ip, namespace, private_key, retries=10):
112 
113         """Though the instance is up, the network maybe not ready to response
114          to any request. So we should wait for its ready
115         """
116         ret = 1
117         key_file_path = '/tmp/testkey.dat'
118         ssh_commands = 'ssh -o UserKnownHostsFile=/dev/null -o ' \
119                        'StrictHostKeyChecking=no -o ConnectTimeout=10 ' \
120                        '-i %s %s@%s id' % (key_file_path, username, ip)
121 
122         all_cmd = 'sudo ip net exec %s %s' % (namespace, ssh_commands)
123 
124         with open(key_file_path, "w") as private_key_file:
125             private_key_file.write(private_key)
126         for i in range(0, retries):
127             ret = subprocess.call(all_cmd, shell=True,
128                                   stdout=subprocess.PIPE,
129                                   stderr=subprocess.STDOUT)
130             if ret == 0:
131                 break
132             time.sleep(3)
133 
134         subprocess.call('rm -f %s' % key_file_path, shell=True,
135                         stdout=subprocess.PIPE)
136         self.assertEqual(0, ret, 'instance is down')
137 
138     def _create_routed_network(self, phy_network, network_type):
139 
140         segment_id = 2016
141         network_name = data_utils.rand_name("test-routed_network")
142         segments = [{"provider:segmentation_id": segment_id,
143                      "provider:physical_network": phy_network,
144                      "provider:network_type": network_type}]
145         kwargs = {'shared': True,
146                   'segments': segments,
147                   "router:external": "False"}
148         return self.create_shared_network(
149             network_name=network_name, **kwargs)
150 
151     def _create_routed_subnet(self, phy_network, network, ip_version=4):
152         kwargs_net = {'network_id': network['id'],
153                       'physical_network': phy_network
154                       }
155         ret_segment = self.list_segments(**kwargs_net)
156         kwargs_subnet = {
157             'name': data_utils.rand_name("test-routed_subnet"),
158             'segment_id': ret_segment['segments'][0]['id']
159         }
160         return self.create_subnet(
161             self.network, client=self.admin_client, ip_version=ip_version,
162             **kwargs_subnet)
163 
164     def _setup_network_and_server(self, phy_network="physnet1",
165                                   network_type='vlan', pre_port=False):
166 
167         if self.shared_networks:
168             self.network = self.shared_networks[0]
169         else:
170             self.network = self._create_routed_network(phy_network,
171                                                        network_type)
172         if self.subnets:
173             self.subnet = self.subnets[0]
174         else:
175             self.subnet = self._create_routed_subnet(phy_network, self.network)
176         if self.keypairs:
177             self.keypair = self.keypairs[0]
178         else:
179             self.keypair = self._create_keypair()
180         if not self.security_rules:
181             self._create_loginable_secgroup_rule()
182         if pre_port is True:
183             port = self.create_port(self.network)
184             server = self._create_server(
185                 flavor_ref=CONF.compute.flavor_ref,
186                 image_ref=CONF.compute.image_ref,
187                 key_name=self.keypair['name'],
188                 networks=[{'port': port['id']}])
189         else:
190             server = self._create_server(
191                 flavor_ref=CONF.compute.flavor_ref,
192                 image_ref=CONF.compute.image_ref,
193                 key_name=self.keypair['name'],
194                 networks=[{'uuid': self.network['id']}])
195 
196         waiters.wait_for_server_status(self.manager.servers_client,
197                                        server['server']['id'],
198                                        constants.SERVER_STATUS_ACTIVE)
199         namespace = 'qdhcp-' + self.network['id']
200         port = self.client.list_ports(
201             network_id=self.network['id'],
202             device_id=server['server']['id'])['ports'][0]
203         return server['server']['id'], port, namespace
204 
205     @test.idempotent_id('953d4048-0388-4fb5-beca-f85e07ba8b1e')
206     def test_routed_network(self):
207         (server, port, namespace) = self._setup_network_and_server(
208             pre_port=False)
209         self._check_connectivity(port, namespace)
210         servers = [server]
211         self._server_cleanup(servers)
212 
213     @test.idempotent_id('73aaeccb-82de-4cc7-81bc-a62a8cf440c0')
214     def test_routed_network_pre_allocate_port(self):
215         (server, port, namespace) = self._setup_network_and_server(
216             pre_port=True)
217         self._check_connectivity(port, namespace)
218         servers = [server]
219         self._server_cleanup(servers)
