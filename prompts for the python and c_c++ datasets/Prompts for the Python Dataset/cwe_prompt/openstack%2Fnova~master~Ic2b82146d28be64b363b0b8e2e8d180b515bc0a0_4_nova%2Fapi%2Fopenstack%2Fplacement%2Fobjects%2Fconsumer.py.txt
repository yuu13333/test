Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
2 #    not use this file except in compliance with the License. You may obtain
3 #    a copy of the License at
4 #
5 #         http://www.apache.org/licenses/LICENSE-2.0
6 #
7 #    Unless required by applicable law or agreed to in writing, software
8 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
9 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
10 #    License for the specific language governing permissions and limitations
11 #    under the License.
12 
13 from oslo_db import exception as db_exc
14 from oslo_log import log as logging
15 from oslo_versionedobjects import base
16 from oslo_versionedobjects import fields
17 import sqlalchemy as sa
18 
19 from nova.api.openstack.placement import db_api
20 from nova.api.openstack.placement import exception
21 from nova.api.openstack.placement.objects import project as project_obj
22 from nova.api.openstack.placement.objects import user as user_obj
23 from nova.db.sqlalchemy import api_models as models
24 
25 CONSUMER_TBL = models.Consumer.__table__
26 _ALLOC_TBL = models.Allocation.__table__
27 
28 LOG = logging.getLogger(__name__)
29 
30 
31 @db_api.placement_context_manager.writer
32 def create_incomplete_consumers(ctx, batch_size):
33     """Finds all the consumer records that are missing for allocations and
34     creates consumer records for them, using the "incomplete consumer" project
35     and user CONF options.
36 
37     Returns a tuple containing two identical elements with the number of
38     consumer records created, since this is the expected return format for data
39     migration routines.
40     """
41     # Create a record in the projects table for our incomplete project
42     incomplete_proj_id = project_obj.ensure_incomplete_project(ctx)
43 
44     # Create a record in the users table for our incomplete user
45     incomplete_user_id = user_obj.ensure_incomplete_user(ctx)
46 
47     # Create a consumer table record for all consumers where
48     # allocations.consumer_id doesn't exist in the consumers table. Use the
49     # incomplete consumer project and user ID.
50     alloc_to_consumer = sa.outerjoin(
51         _ALLOC_TBL, CONSUMER_TBL,
52         _ALLOC_TBL.c.consumer_id == CONSUMER_TBL.c.uuid)
53     cols = [
54         _ALLOC_TBL.c.consumer_id,
55         incomplete_proj_id,
56         incomplete_user_id,
57     ]
58     sel = sa.select(cols)
59     sel = sel.select_from(alloc_to_consumer)
60     sel = sel.where(CONSUMER_TBL.c.id.is_(None))
61     sel = sel.limit(batch_size)
62     target_cols = ['uuid', 'project_id', 'user_id']
63     ins_stmt = CONSUMER_TBL.insert().from_select(target_cols, sel)
64     res = ctx.session.execute(ins_stmt)
65     return res.rowcount, res.rowcount
66 
67 
68 @db_api.placement_context_manager.writer
69 def delete_consumer_if_no_allocations(ctx, consumer_uuid):
70     """Looks to see if the supplied consumer has any allocations and if not,
71     deletes the consumer record entirely.
72 
73     :param ctx: `nova.context.RequestContext` that contains an oslo_db Session
74     :param consumer_uuid: UUID of the consumer to check and maybe delete
75     """
76     # First, do a fast lookup to see if there are any allocation records for
77     # this consumer
78     sel = sa.select([_ALLOC_TBL.c.consumer_id])
79     sel = sel.where(_ALLOC_TBL.c.consumer_id == consumer_uuid)
80     sel = sel.limit(1)
81     res = ctx.session.execute(sel).fetchall()
82     if res:
83         return
84     # Delete the consumer since there's no allocation records
85     del_stmt = CONSUMER_TBL.delete()
86     del_stmt = del_stmt.where(CONSUMER_TBL.c.uuid == consumer_uuid)
87     LOG.debug("Deleting consumer record for consumer %s since there are no "
88               "more allocations for this consumer.", consumer_uuid)
89     ctx.session.execute(del_stmt)
90 
91 
92 @db_api.placement_context_manager.reader
93 def _get_consumer_by_uuid(ctx, uuid):
94     # The SQL for this looks like the following:
95     # SELECT
96     #   c.id, c.uuid,
97     #   p.id AS project_id, p.external_id AS project_external_id,
98     #   u.id AS user_id, u.external_id AS user_external_id,
99     #   c.updated_at, c.created_at
100     # FROM consumers c
101     # INNER JOIN projects p
102     #  ON c.project_id = p.id
103     # INNER JOIN users u
104     #  ON c.user_id = u.id
105     # WHERE c.uuid = $uuid
106     consumers = sa.alias(CONSUMER_TBL, name="c")
107     projects = sa.alias(project_obj.PROJECT_TBL, name="p")
108     users = sa.alias(user_obj.USER_TBL, name="u")
109     cols = [
110         consumers.c.id,
111         consumers.c.uuid,
112         projects.c.id.label("project_id"),
113         projects.c.external_id.label("project_external_id"),
114         users.c.id.label("user_id"),
115         users.c.external_id.label("user_external_id"),
116         consumers.c.generation,
117         consumers.c.updated_at,
118         consumers.c.created_at
119     ]
120     c_to_p_join = sa.join(
121         consumers, projects, consumers.c.project_id == projects.c.id)
122     c_to_u_join = sa.join(
123         c_to_p_join, users, consumers.c.user_id == users.c.id)
124     sel = sa.select(cols).select_from(c_to_u_join)
125     sel = sel.where(consumers.c.uuid == uuid)
126     res = ctx.session.execute(sel).fetchone()
127     if not res:
128         raise exception.ConsumerNotFound(uuid=uuid)
129 
130     return dict(res)
131 
132 
133 @db_api.placement_context_manager.writer
134 def _increment_consumer_generation(ctx, consumer):
135     """Increments the supplied consumer's generation value, supplying the
136     consumer object which contains the currently-known generation. Returns the
137     newly-incremented generation.
138 
139     :param ctx: `nova.context.RequestContext` that contains an oslo_db Session
140     :param consumer: `Consumer` whose generation should be updated.
141     :returns: The newly-incremented generation.
142     :raises nova.exception.ConcurrentUpdateDetected: if another thread updated
143             the same consumer's view of its allocations in between the time
144             when this object was originally read and the call which modified
145             the consumer's state (e.g. replacing allocations for a consumer)
146     """
147     consumer_gen = consumer.generation
148     new_generation = consumer_gen + 1
149     upd_stmt = CONSUMER_TBL.update().where(sa.and_(
150             CONSUMER_TBL.c.id == consumer.id,
151             CONSUMER_TBL.c.generation == consumer_gen)).values(
152                     generation=new_generation)
153 
154     res = ctx.session.execute(upd_stmt)
155     if res.rowcount != 1:
156         raise exception.ConcurrentUpdateDetected
157     return new_generation
158 
159 
160 @base.VersionedObjectRegistry.register_if(False)
161 class Consumer(base.VersionedObject, base.TimestampedObject):
162 
163     fields = {
164         'id': fields.IntegerField(read_only=True),
165         'uuid': fields.UUIDField(nullable=False),
166         'project': fields.ObjectField('Project', nullable=False),
167         'user': fields.ObjectField('User', nullable=False),
168         'generation': fields.IntegerField(nullable=False),
169     }
170 
171     @staticmethod
172     def _from_db_object(ctx, target, source):
173         target.id = source['id']
174         target.uuid = source['uuid']
175         target.generation = source['generation']
176         target.created_at = source['created_at']
177         target.updated_at = source['updated_at']
178 
179         target.project = project_obj.Project(
180             ctx, id=source['project_id'],
181             external_id=source['project_external_id'])
182         target.user = user_obj.User(
183             ctx, id=source['user_id'],
184             external_id=source['user_external_id'])
185 
186         target._context = ctx
187         target.obj_reset_changes()
188         return target
189 
190     @classmethod
191     def get_by_uuid(cls, ctx, uuid):
192         res = _get_consumer_by_uuid(ctx, uuid)
193         return cls._from_db_object(ctx, cls(ctx), res)
194 
195     def create(self):
196         @db_api.placement_context_manager.writer
197         def _create_in_db(ctx):
198             db_obj = models.Consumer(
199                 uuid=self.uuid, project_id=self.project.id,
200                 user_id=self.user.id)
201             try:
202                 db_obj.save(ctx.session)
203                 # NOTE(jaypipes): We don't do the normal _from_db_object()
204                 # thing here because models.Consumer doesn't have a
205                 # project_external_id or user_external_id attribute.
206                 self.id = db_obj.id
207                 self.generation = db_obj.generation
208             except db_exc.DBDuplicateEntry:
209                 raise exception.ConsumerExists(uuid=self.uuid)
210         _create_in_db(self._context)
211         self.obj_reset_changes()
212 
213     def increment_generation(self):
214         """Increments the consumer's generation.
215 
216         :raises nova.exception.ConcurrentUpdateDetected: if another thread
217             updated the same consumer's view of its allocations in between the
218             time when this object was originally read and the call which
219             modified the consumer's state (e.g. replacing allocations for a
220             consumer)
221         """
222         self.generation = _increment_consumer_generation(self._context, self)
