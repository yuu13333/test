Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 # Copyright 2015 Cloudbase Solutions.
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 
16 import os
17 
18 import eventlet
19 from eventlet import tpool
20 from neutron_lib.utils import helpers
21 from oslo_log import log as logging
22 from oslo_utils import encodeutils
23 
24 from neutron._i18n import _
25 from neutron.common import exceptions
26 
27 LOG = logging.getLogger(__name__)
28 
29 # subprocess.Popen will spawn two threads consuming stdout/stderr when passing
30 # data through stdin. We need to make sure that *native* threads will be used
31 # as pipes are blocking on Windows.
32 subprocess = eventlet.patcher.original('subprocess')
33 subprocess.threading = eventlet.patcher.original('threading')
34 
35 
36 def create_process(cmd, run_as_root=False, addl_env=None):
37     cmd = list(map(str, cmd))
38 
39     LOG.debug("Running command: %s", cmd)
40     env = os.environ.copy()
41     if addl_env:
42         env.update(addl_env)
43 
44     popen = subprocess.Popen
45     obj = popen(cmd, shell=False,
46                 stdin=subprocess.PIPE,
47                 stdout=subprocess.PIPE,
48                 stderr=subprocess.PIPE,
49                 env=env,
50                 preexec_fn=None,
51                 close_fds=False)
52 
53     return obj, cmd
54 
55 
56 def kill_process(pid, signal, run_as_root=False):
57     """Kill the process with the given pid using the given signal."""
58     try:
59         execute(['tskill', pid])
60     except exceptions.ProcessExecutionError:
61         if process_is_running(pid):
62             raise
63 
64 
65 def execute(cmd, process_input=None, addl_env=None,
66             check_exit_code=True, return_stderr=False, log_fail_as_error=True,
67             extra_ok_codes=None, run_as_root=False, do_decode=True):
68 
69     if process_input is not None:
70         _process_input = encodeutils.to_utf8(process_input)
71     else:
72         _process_input = None
73     obj, cmd = create_process(cmd, addl_env=addl_env)
74     _stdout, _stderr = avoid_blocking_call(obj.communicate, _process_input)
75     obj.stdin.close()
76     _stdout = helpers.safe_decode_utf8(_stdout)
77     _stderr = helpers.safe_decode_utf8(_stderr)
78 
79     m = _("\nCommand: %(cmd)s\nExit code: %(code)s\nStdin: %(stdin)s\n"
80           "Stdout: %(stdout)s\nStderr: %(stderr)s") % \
81         {'cmd': cmd,
82          'code': obj.returncode,
83          'stdin': process_input or '',
84          'stdout': _stdout,
85          'stderr': _stderr}
86 
87     extra_ok_codes = extra_ok_codes or []
88     if obj.returncode and obj.returncode in extra_ok_codes:
89         obj.returncode = None
90 
91     log_msg = m.strip().replace('\n', '; ')
92     if obj.returncode and log_fail_as_error:
93         LOG.error(log_msg)
94     else:
95         LOG.debug(log_msg)
96 
97     if obj.returncode and check_exit_code:
98         raise exceptions.ProcessExecutionError(m, returncode=obj.returncode)
99 
100     return (_stdout, _stderr) if return_stderr else _stdout
101 
102 
103 def avoid_blocking_call(f, *args, **kwargs):
104     """Ensure that the method "f" will not block other greenthreads.
105 
106     Performs the call to the function "f" received as parameter in a
107     different thread using tpool.execute when called from a greenthread.
108     This will ensure that the function "f" will not block other greenthreads.
109     If not called from a greenthread, it will invoke the function "f" directly.
110     The function "f" will receive as parameters the arguments "args" and
111     keyword arguments "kwargs".
112     """
113     # Note that eventlet.getcurrent will always return a greenlet object.
114     # In case of a greenthread, the parent greenlet will always be the hub
115     # loop greenlet.
116     if eventlet.getcurrent().parent:
117         return tpool.execute(f, *args, **kwargs)
118     else:
119         return f(*args, **kwargs)
120 
121 
122 def get_root_helper_child_pid(pid, expected_cmd, run_as_root=False):
123     return str(pid)
124 
125 
126 def process_is_running(pid):
127     """Find if the given PID is running in the system."""
128     if pid:
129         output = execute(['cmd', '/S', '/C', 'tasklist | findstr %s' % pid],
130                          check_exit_code=False, log_fail_as_error=False)
131         return output != ""
132     return False
133 
134 
135 def pid_invoked_with_cmdline(pid, expected_cmd):
136     return True
