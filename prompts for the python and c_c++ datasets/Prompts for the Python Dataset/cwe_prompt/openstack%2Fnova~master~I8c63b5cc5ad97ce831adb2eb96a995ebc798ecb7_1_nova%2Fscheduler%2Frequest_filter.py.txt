Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
2 #    not use this file except in compliance with the License. You may obtain
3 #    a copy of the License at
4 #
5 #         http://www.apache.org/licenses/LICENSE-2.0
6 #
7 #    Unless required by applicable law or agreed to in writing, software
8 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
9 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
10 #    License for the specific language governing permissions and limitations
11 #    under the License.
12 
13 import functools
14 
15 import os_traits
16 from oslo_log import log as logging
17 from oslo_utils import strutils
18 from oslo_utils import timeutils
19 
20 import nova.conf
21 from nova import exception
22 from nova.i18n import _
23 from nova import objects
24 
25 
26 CONF = nova.conf.CONF
27 LOG = logging.getLogger(__name__)
28 TENANT_METADATA_KEY = 'filter_tenant_id'
29 
30 
31 def trace_request_filter(fn):
32     @functools.wraps(fn)
33     def wrapper(ctxt, request_spec):
34         timer = timeutils.StopWatch()
35         ran = False
36         with timer:
37             try:
38                 ran = fn(ctxt, request_spec)
39             finally:
40                 if ran:
41                     # Only log info if the filter was enabled and not
42                     # excluded for some reason
43                     LOG.debug('Request filter %r took %.1f seconds',
44                         fn.__name__, timer.elapsed())
45         return ran
46     return wrapper
47 
48 
49 @trace_request_filter
50 def require_tenant_aggregate(ctxt, request_spec):
51     """Require hosts in an aggregate based on tenant id.
52 
53     This will modify request_spec to request hosts in an aggregate
54     defined specifically for the tenant making the request. We do that
55     by looking for a nova host aggregate with metadata indicating which
56     tenant it is for, and passing that aggregate uuid to placement to
57     limit results accordingly.
58     """
59 
60     enabled = CONF.scheduler.limit_tenants_to_placement_aggregate
61     agg_required = CONF.scheduler.placement_aggregate_required_for_tenants
62     if not enabled:
63         return False
64 
65     aggregates = objects.AggregateList.get_by_metadata(
66         ctxt, value=request_spec.project_id)
67     aggregate_uuids_for_tenant = set([])
68     for agg in aggregates:
69         for key, value in agg.metadata.items():
70             if key.startswith(TENANT_METADATA_KEY):
71                 aggregate_uuids_for_tenant.add(agg.uuid)
72                 break
73 
74     if aggregate_uuids_for_tenant:
75         if ('requested_destination' not in request_spec or
76                 request_spec.requested_destination is None):
77             request_spec.requested_destination = objects.Destination()
78         destination = request_spec.requested_destination
79         destination.require_aggregates(aggregate_uuids_for_tenant)
80         LOG.debug('require_tenant_aggregate request filter added '
81                   'aggregates %s for tenant %r',
82                   ','.join(aggregate_uuids_for_tenant),
83                   request_spec.project_id)
84     elif agg_required:
85         LOG.warning('Tenant %(tenant)s has no available aggregates',
86                     {'tenant': request_spec.project_id})
87         raise exception.RequestFilterFailed(
88             reason=_('No hosts available for tenant'))
89 
90     return True
91 
92 
93 @trace_request_filter
94 def map_az_to_placement_aggregate(ctxt, request_spec):
95     """Map requested nova availability zones to placement aggregates.
96 
97     This will modify request_spec to request hosts in an aggregate that
98     matches the desired AZ of the user's request.
99     """
100     if not CONF.scheduler.query_placement_for_availability_zone:
101         return False
102 
103     az_hint = request_spec.availability_zone
104     if not az_hint:
105         return False
106 
107     aggregates = objects.AggregateList.get_by_metadata(ctxt,
108                                                        key='availability_zone',
109                                                        value=az_hint)
110     if aggregates:
111         if ('requested_destination' not in request_spec or
112                 request_spec.requested_destination is None):
113             request_spec.requested_destination = objects.Destination()
114         agg_uuids = [agg.uuid for agg in aggregates]
115         request_spec.requested_destination.require_aggregates(agg_uuids)
116         LOG.debug('map_az_to_placement_aggregate request filter added '
117                   'aggregates %s for az %r',
118                   ','.join(agg_uuids),
119                   az_hint)
120 
121     return True
122 
123 
124 @trace_request_filter
125 def require_image_type_support(ctxt, request_spec):
126     """Request type-specific trait on candidates.
127 
128     This will modify the request_spec to request hosts that support the
129     disk_format of the image provided.
130     """
131     if not CONF.scheduler.query_placement_for_image_type_support:
132         return False
133 
134     if request_spec.is_bfv:
135         # We are booting from volume, and thus compute node image
136         # disk_format support does not matter.
137         return False
138 
139     disk_format = request_spec.image.disk_format
140     trait_name = 'COMPUTE_IMAGE_TYPE_%s' % disk_format.upper()
141     if not hasattr(os_traits, trait_name):
142         LOG.error(('Computed trait name %r is not valid; '
143                    'is os-traits up to date?'), trait_name)
144         return False
145 
146     # NOTE(danms): We are using the transient flavor in the request spec
147     # to add the trait that we need. We make sure that we reset the dirty-ness
148     # of this field to avoid persisting it.
149     request_spec.flavor.extra_specs['trait:%s' % trait_name] = 'required'
150     request_spec.obj_reset_changes(fields=['flavor'], recursive=True)
151 
152     LOG.debug('require_image_type_support request filter added required '
153               'trait %s', trait_name)
154 
155     return True
156 
157 
158 @trace_request_filter
159 def require_encrypted_memory_support(ctxt, request_spec):
160     """When the hw:mem_encryption extra spec or the hw_mem_encryption
161     image property are requested, require hosts which can support
162     encryption of the guest memory.
163 
164     Currently AMD SEV is the only technology providing this which nova
165     supports.
166     """
167     def _mem_encryption_extra_spec(request_spec):
168         if 'flavor' not in request_spec:
169             return False
170 
171         if 'extra_specs' not in request_spec.flavor:
172             return False
173 
174         return strutils.bool_from_string(
175             request_spec.flavor.extra_specs.get('hw:mem_encryption', False))
176 
177     def _mem_encryption_image_prop(request_spec):
178         if 'image' not in request_spec:
179             return False
180 
181         if 'properties' not in request_spec.image:
182             return False
183 
184         return strutils.bool_from_string(
185             request_spec.image.properties.get('hw_mem_encryption', False))
186 
187     if _mem_encryption_extra_spec(request_spec) or \
188        _mem_encryption_image_prop(request_spec):
189         request_spec.flavor.extra_specs[
190             'resources:MEM_ENCRYPTION_CONTEXT'] = '1'
191         return True
192 
193     return False
194 
195 
196 ALL_REQUEST_FILTERS = [
197     require_tenant_aggregate,
198     map_az_to_placement_aggregate,
199     require_image_type_support,
200     require_encrypted_memory_support,
201 ]
202 
203 
204 def process_reqspec(ctxt, request_spec):
205     """Process an objects.ReqestSpec before calling placement.
206 
207     :param ctxt: A RequestContext
208     :param request_spec: An objects.RequestSpec to be inspected/modified
209     """
210     for filter in ALL_REQUEST_FILTERS:
211         filter(ctxt, request_spec)
