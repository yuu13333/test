Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
2 #    not use this file except in compliance with the License. You may obtain
3 #    a copy of the License at
4 #
5 #         http://www.apache.org/licenses/LICENSE-2.0
6 #
7 #    Unless required by applicable law or agreed to in writing, software
8 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
9 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
10 #    License for the specific language governing permissions and limitations
11 #    under the License.
12 """WSGI application initialization for Nova APIs."""
13 
14 import os
15 
16 from oslo_config import cfg
17 from oslo_log import log as logging
18 from oslo_service import _options as service_opts
19 from paste import deploy
20 
21 from nova import config
22 from nova import context
23 from nova import exception
24 from nova import objects
25 from nova import service
26 
27 CONF = cfg.CONF
28 
29 CONFIG_FILES = ['api-paste.ini', 'nova.conf']
30 
31 objects.register_all()
32 
33 
34 def _get_config_files(env=None):
35     if env is None:
36         env = os.environ
37     dirname = env.get('OS_NOVA_CONFIG_DIR', '/etc/nova').strip()
38     return [os.path.join(dirname, config_file)
39             for config_file in CONFIG_FILES]
40 
41 
42 def _setup_service(host, name):
43     binary = name if name.startswith('nova-') else "nova-%s" % name
44 
45     ctxt = context.get_admin_context()
46     service_ref = objects.Service.get_by_host_and_binary(
47         ctxt, host, binary)
48     if service_ref:
49         service._update_service_ref(service_ref)
50     else:
51         try:
52             service_obj = objects.Service(ctxt)
53             service_obj.host = host
54             service_obj.binary = binary
55             service_obj.topic = None
56             service_obj.report_count = 0
57             service_obj.create()
58         except (exception.ServiceTopicExists,
59                 exception.ServiceBinaryExists):
60             # If we race to create a record with a sibling, don't
61             # fail here.
62             pass
63 
64 
65 def error_application(exc, name):
66     # TODO(cdent): make this something other than a stub
67     def application(environ, start_response):
68         start_response('500 Internal Server Error', [
69             ('Content-Type', 'text/plain; charset=UTF-8')])
70         return ['Out of date %s service %s\n' % (name, exc)]
71     return application
72 
73 
74 def init_application(name):
75     conf_files = _get_config_files()
76     # NOTE(hberaud): Call reset to ensure the ConfigOpts object doesn't
77     # already contain registered options if the app is reloaded.
78     CONF.reset()
79     config.parse_args([], default_config_files=conf_files)
80 
81     logging.setup(CONF, "nova")
82 
83     # dump conf at debug (log_options option comes from oslo.service)
84     # FIXME(mriedem): This is gross but we don't have a public hook into
85     # oslo.service to register these options, so we are doing it manually for
86     # now; remove this when we have a hook method into oslo.service.
87     CONF.register_opts(service_opts.service_opts)
88     if CONF.log_options:
89         CONF.log_opt_values(
90             logging.getLogger(__name__),
91             logging.DEBUG)
92 
93     try:
94         _setup_service(CONF.host, name)
95     except exception.ServiceTooOld as exc:
96         return error_application(exc, name)
97 
98     service.setup_profiler(name, CONF.host)
99 
100     conf = conf_files[0]
101 
102     return deploy.loadapp('config:%s' % conf, name=name)
