Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 # Copyright 2015 Red Hat, Inc.
2 #
3 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
4 #    not use this file except in compliance with the License. You may obtain
5 #    a copy of the License at
6 #
7 #         http://www.apache.org/licenses/LICENSE-2.0
8 #
9 #    Unless required by applicable law or agreed to in writing, software
10 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 #    License for the specific language governing permissions and limitations
13 #    under the License.
14 
15 import functools
16 import os
17 import random
18 import time
19 
20 import netaddr
21 from neutron_lib import constants
22 from neutronclient.common import exceptions
23 from oslo_log import log as logging
24 from oslo_utils import uuidutils
25 
26 from neutron.agent.l3 import ha_router
27 from neutron.agent.l3 import namespaces
28 from neutron.agent.linux import ip_lib
29 from neutron.common import utils as common_utils
30 from neutron.tests.common.exclusive_resources import ip_network
31 from neutron.tests.common import machine_fixtures
32 from neutron.tests.fullstack import base
33 from neutron.tests.fullstack.resources import environment
34 from neutron.tests.fullstack.resources import machine
35 from neutron.tests.unit import testlib_api
36 
37 load_tests = testlib_api.module_load_tests
38 LOG = logging.getLogger(__name__)
39 
40 
41 class TestL3Agent(base.BaseFullStackTestCase):
42 
43     def _create_external_network_and_subnet(self, tenant_id):
44         network = self.safe_client.create_network(
45             tenant_id, name='public', external=True)
46         cidr = self.useFixture(
47             ip_network.ExclusiveIPNetwork(
48                 "240.0.0.0", "240.255.255.255", "24")).network
49         subnet = self.safe_client.create_subnet(tenant_id, network['id'], cidr)
50         return network, subnet
51 
52     def block_until_port_status_active(self, port_id):
53         def is_port_status_active():
54             port = self.client.show_port(port_id)
55             return port['port']['status'] == 'ACTIVE'
56         common_utils.wait_until_true(lambda: is_port_status_active(), sleep=1)
57 
58     def _create_and_attach_subnet(
59             self, tenant_id, subnet_cidr, network_id, router_id):
60         subnet = self.safe_client.create_subnet(
61             tenant_id, network_id, subnet_cidr)
62 
63         router_interface_info = self.safe_client.add_router_interface(
64             router_id, subnet['id'])
65         self.block_until_port_status_active(
66             router_interface_info['port_id'])
67 
68     def _boot_fake_vm_in_network(self, host, tenant_id, network_id, wait=True):
69         vm = self.useFixture(
70             machine.FakeFullstackMachine(
71                 host, network_id, tenant_id, self.safe_client, use_dhcp=True))
72         if wait:
73             vm.block_until_boot()
74         return vm
75 
76     def _create_net_subnet_and_vm(self, tenant_id, subnet_cidrs, host, router):
77         network = self.safe_client.create_network(tenant_id)
78         for cidr in subnet_cidrs:
79             self._create_and_attach_subnet(
80                 tenant_id, cidr, network['id'], router['id'])
81 
82         return self._boot_fake_vm_in_network(host, tenant_id, network['id'])
83 
84     def _test_gateway_ip_changed(self):
85         tenant_id = uuidutils.generate_uuid()
86         ext_net, ext_sub = self._create_external_network_and_subnet(tenant_id)
87         external_vm = self.useFixture(
88             machine_fixtures.FakeMachine(
89                 self.environment.central_bridge,
90                 common_utils.ip_to_cidr(ext_sub['gateway_ip'], 24)))
91 
92         router = self.safe_client.create_router(tenant_id,
93                                                 external_network=ext_net['id'])
94 
95         vm = self._create_net_subnet_and_vm(
96             tenant_id, ['20.0.0.0/24', '2001:db8:aaaa::/64'],
97             self.environment.hosts[1], router)
98         # ping external vm to test snat
99         vm.block_until_ping(external_vm.ip)
100 
101         fip = self.safe_client.create_floatingip(
102             tenant_id, ext_net['id'], vm.ip, vm.neutron_port['id'])
103         # ping floating ip from external vm
104         external_vm.block_until_ping(fip['floating_ip_address'])
105 
106         # ping router gateway IP
107         old_gw_ip = router['external_gateway_info'][
108             'external_fixed_ips'][0]['ip_address']
109         external_vm.block_until_ping(old_gw_ip)
110 
111         gateway_port = self.safe_client.list_ports(
112             device_id=router['id'],
113             device_owner=constants.DEVICE_OWNER_ROUTER_GW)[0]
114         for attempt in (1, 2, 3):
115             step = random.randint(1, 50 * attempt)
116             ip_1 = str(netaddr.IPNetwork(
117                 ext_sub['gateway_ip']).next(step)).split('/')[0]
118             ip_2 = str(netaddr.IPNetwork(
119                 ext_sub['gateway_ip']).next(step + 1)).split('/')[0]
120             try:
121                 LOG.debug("Attempt (%s) to update port IP address", attempt)
122                 self.safe_client.update_port(gateway_port['id'], fixed_ips=[
123                     {'ip_address': ip_1},
124                     {'ip_address': ip_2}])
125                 break
126             except exceptions.IpAddressAlreadyAllocatedClient:
127                 LOG.debug("The IP address(es) are already allocated")
128         else:
129             self.fail("Cannot find IP addresses for updating the port")
130         # ping router gateway new IPs
131         external_vm.block_until_ping(ip_1)
132         external_vm.block_until_ping(ip_2)
133 
134         # ping router old gateway IP, should fail now
135         external_vm.block_until_no_ping(old_gw_ip)
136 
137 
138 class TestLegacyL3Agent(TestL3Agent):
139 
140     def setUp(self):
141         host_descriptions = [
142             environment.HostDescription(l3_agent=True, dhcp_agent=True),
143             environment.HostDescription()]
144         env = environment.Environment(
145             environment.EnvironmentDescription(
146                 network_type='vlan', l2_pop=False),
147             host_descriptions)
148         super(TestLegacyL3Agent, self).setUp(env)
149 
150     def _get_namespace(self, router_id):
151         return namespaces.build_ns_name(namespaces.NS_PREFIX, router_id)
152 
153     def _assert_namespace_exists(self, ns_name):
154         common_utils.wait_until_true(
155             lambda: ip_lib.network_namespace_exists(ns_name))
156 
157     def test_namespace_exists(self):
158         tenant_id = uuidutils.generate_uuid()
159 
160         router = self.safe_client.create_router(tenant_id)
161         network = self.safe_client.create_network(tenant_id)
162         subnet = self.safe_client.create_subnet(
163             tenant_id, network['id'], '20.0.0.0/24', gateway_ip='20.0.0.1')
164         self.safe_client.add_router_interface(router['id'], subnet['id'])
165 
166         namespace = "%s@%s" % (
167             self._get_namespace(router['id']),
168             self.environment.hosts[0].l3_agent.get_namespace_suffix(), )
169         self._assert_namespace_exists(namespace)
170 
171     def test_mtu_update(self):
172         tenant_id = uuidutils.generate_uuid()
173 
174         router = self.safe_client.create_router(tenant_id)
175         network = self.safe_client.create_network(tenant_id)
176         subnet = self.safe_client.create_subnet(
177             tenant_id, network['id'], '20.0.0.0/24', gateway_ip='20.0.0.1')
178         self.safe_client.add_router_interface(router['id'], subnet['id'])
179 
180         namespace = "%s@%s" % (
181             self._get_namespace(router['id']),
182             self.environment.hosts[0].l3_agent.get_namespace_suffix(), )
183         self._assert_namespace_exists(namespace)
184 
185         ip = ip_lib.IPWrapper(namespace)
186         common_utils.wait_until_true(lambda: ip.get_devices())
187 
188         devices = ip.get_devices()
189         self.assertEqual(1, len(devices))
190 
191         ri_dev = devices[0]
192         mtu = ri_dev.link.mtu
193         self.assertEqual(1500, mtu)
194 
195         mtu -= 1
196         network = self.safe_client.update_network(network['id'], mtu=mtu)
197         common_utils.wait_until_true(lambda: ri_dev.link.mtu == mtu)
198 
199     def test_east_west_traffic(self):
200         tenant_id = uuidutils.generate_uuid()
201         router = self.safe_client.create_router(tenant_id)
202 
203         vm1 = self._create_net_subnet_and_vm(
204             tenant_id, ['20.0.0.0/24', '2001:db8:aaaa::/64'],
205             self.environment.hosts[0], router)
206         vm2 = self._create_net_subnet_and_vm(
207             tenant_id, ['21.0.0.0/24', '2001:db8:bbbb::/64'],
208             self.environment.hosts[1], router)
209 
210         vm1.block_until_ping(vm2.ip)
211         # Verify ping6 from vm2 to vm1 IPv6 Address
212         vm2.block_until_ping(vm1.ipv6)
213 
214     def test_north_south_traffic(self):
215         # This function creates an external network which is connected to
216         # central_bridge and spawns an external_vm on it.
217         # The external_vm is configured with the gateway_ip (both v4 & v6
218         # addresses) of external subnet. Later, it creates a tenant router,
219         # a tenant network and two tenant subnets (v4 and v6). The tenant
220         # router is associated with tenant network and external network to
221         # provide north-south connectivity to the VMs.
222         # We validate the following in this testcase.
223         # 1. SNAT support: using ping from tenant VM to external_vm
224         # 2. Floating IP support: using ping from external_vm to VM floating ip
225         # 3. IPv6 ext connectivity: using ping6 from tenant vm to external_vm.
226         tenant_id = uuidutils.generate_uuid()
227         ext_net, ext_sub = self._create_external_network_and_subnet(tenant_id)
228         external_vm = self.useFixture(
229             machine_fixtures.FakeMachine(
230                 self.environment.central_bridge,
231                 common_utils.ip_to_cidr(ext_sub['gateway_ip'], 24)))
232         # Create an IPv6 subnet in the external network
233         v6network = self.useFixture(
234             ip_network.ExclusiveIPNetwork(
235                 "2001:db8:1234::1", "2001:db8:1234::10", "64")).network
236         ext_v6sub = self.safe_client.create_subnet(
237             tenant_id, ext_net['id'], v6network)
238 
239         router = self.safe_client.create_router(tenant_id,
240                                                 external_network=ext_net['id'])
241 
242         # Configure the gateway_ip of external v6subnet on the external_vm.
243         external_vm.ipv6_cidr = common_utils.ip_to_cidr(
244             ext_v6sub['gateway_ip'], 64)
245 
246         # Configure an IPv6 downstream route to the v6Address of router gw port
247         for fixed_ip in router['external_gateway_info']['external_fixed_ips']:
248             if netaddr.IPNetwork(fixed_ip['ip_address']).version == 6:
249                 external_vm.set_default_gateway(fixed_ip['ip_address'])
250 
251         vm = self._create_net_subnet_and_vm(
252             tenant_id, ['20.0.0.0/24', '2001:db8:aaaa::/64'],
253             self.environment.hosts[1], router)
254 
255         # ping external vm to test snat
256         vm.block_until_ping(external_vm.ip)
257 
258         fip = self.safe_client.create_floatingip(
259             tenant_id, ext_net['id'], vm.ip, vm.neutron_port['id'])
260 
261         # ping floating ip from external vm
262         external_vm.block_until_ping(fip['floating_ip_address'])
263 
264         # Verify VM is able to reach the router interface.
265         vm.block_until_ping(vm.gateway_ipv6)
266         # Verify north-south connectivity using ping6 to external_vm.
267         vm.block_until_ping(external_vm.ipv6)
268 
269         # Now let's remove and create again phys bridge and check connectivity
270         # once again
271         br_phys = self.environment.hosts[0].br_phys
272         br_phys.destroy()
273         br_phys.create()
274         self.environment.hosts[0].connect_to_central_network_via_vlans(
275             br_phys)
276 
277         # ping floating ip from external vm
278         external_vm.block_until_ping(fip['floating_ip_address'])
279 
280         # Verify VM is able to reach the router interface.
281         vm.block_until_ping(vm.gateway_ipv6)
282         # Verify north-south connectivity using ping6 to external_vm.
283         vm.block_until_ping(external_vm.ipv6)
284 
285     def test_gateway_ip_changed(self):
286         self._test_gateway_ip_changed()
287 
288 
289 class TestHAL3Agent(TestL3Agent):
290 
291     def setUp(self):
292         host_descriptions = [
293             environment.HostDescription(l3_agent=True, dhcp_agent=True)
294             for _ in range(2)]
295         env = environment.Environment(
296             environment.EnvironmentDescription(
297                 network_type='vxlan', l2_pop=True),
298             host_descriptions)
299         super(TestHAL3Agent, self).setUp(env)
300 
301     def _is_ha_router_active_on_one_agent(self, router_id):
302         agents = self.client.list_l3_agent_hosting_routers(router_id)
303         return (
304             agents['agents'][0]['ha_state'] != agents['agents'][1]['ha_state'])
305 
306     def test_ha_router(self):
307         # TODO(amuller): Test external connectivity before and after a
308         # failover, see: https://review.openstack.org/#/c/196393/
309 
310         tenant_id = uuidutils.generate_uuid()
311         router = self.safe_client.create_router(tenant_id, ha=True)
312 
313         common_utils.wait_until_true(
314             lambda:
315             len(self.client.list_l3_agent_hosting_routers(
316                 router['id'])['agents']) == 2,
317             timeout=90)
318 
319         common_utils.wait_until_true(
320             functools.partial(
321                 self._is_ha_router_active_on_one_agent,
322                 router['id']),
323             timeout=90)
324 
325     def _get_keepalived_state(self, keepalived_state_file):
326         with open(keepalived_state_file, "r") as fd:
327             return fd.read()
328 
329     def _get_state_file_for_master_agent(self, router_id):
330         for host in self.environment.hosts:
331             keepalived_state_file = os.path.join(
332                 host.neutron_config.state_path, "ha_confs", router_id, "state")
333 
334             if self._get_keepalived_state(keepalived_state_file) == "master":
335                 return keepalived_state_file
336 
337     def _get_l3_agents_with_ha_state(self, l3_agents, router_id, ha_state):
338         found_agents = []
339         agents_hosting_router = self.client.list_l3_agent_hosting_routers(
340             router_id)['agents']
341         for agent in l3_agents:
342             agent_host = agent.neutron_cfg_fixture.get_host()
343             for agent_hosting_router in agents_hosting_router:
344                 if (agent_hosting_router['host'] == agent_host and
345                         agent_hosting_router['ha_state'] == ha_state):
346                     found_agents.append(agent)
347                     break
348         return found_agents
349 
350     def test_keepalived_multiple_sighups_does_not_forfeit_mastership(self):
351         """Setup a complete "Neutron stack" - both an internal and an external
352            network+subnet, and a router connected to both.
353         """
354         tenant_id = uuidutils.generate_uuid()
355         ext_net, ext_sub = self._create_external_network_and_subnet(tenant_id)
356         router = self.safe_client.create_router(tenant_id, ha=True,
357                                                 external_network=ext_net['id'])
358         common_utils.wait_until_true(
359             lambda:
360             len(self.client.list_l3_agent_hosting_routers(
361                 router['id'])['agents']) == 2,
362             timeout=90)
363         common_utils.wait_until_true(
364             functools.partial(
365                 self._is_ha_router_active_on_one_agent,
366                 router['id']),
367             timeout=90)
368         keepalived_state_file = self._get_state_file_for_master_agent(
369             router['id'])
370         self.assertIsNotNone(keepalived_state_file)
371         network = self.safe_client.create_network(tenant_id)
372         self._create_and_attach_subnet(
373             tenant_id, '13.37.0.0/24', network['id'], router['id'])
374 
375         # Create 10 fake VMs, each with a floating ip. Each floating ip
376         # association should send a SIGHUP to the keepalived's parent process,
377         # unless the Throttler works.
378         host = self.environment.hosts[0]
379         vms = [self._boot_fake_vm_in_network(host, tenant_id, network['id'],
380                                              wait=False)
381                for i in range(10)]
382         for vm in vms:
383             self.safe_client.create_floatingip(
384                 tenant_id, ext_net['id'], vm.ip, vm.neutron_port['id'])
385 
386         # Check that the keepalived's state file has not changed and is still
387         # master. This will indicate that the Throttler works. We want to check
388         # for ha_vrrp_advert_int (the default is 2 seconds), plus a bit more.
389         time_to_stop = (time.time() +
390                         (common_utils.DEFAULT_THROTTLER_VALUE *
391                          ha_router.THROTTLER_MULTIPLIER * 1.3))
392         while True:
393             if time.time() > time_to_stop:
394                 break
395             self.assertEqual(
396                 "master",
397                 self._get_keepalived_state(keepalived_state_file))
398 
399     def test_ha_router_restart_agents_no_packet_lost(self):
400         tenant_id = uuidutils.generate_uuid()
401         ext_net, ext_sub = self._create_external_network_and_subnet(tenant_id)
402         router = self.safe_client.create_router(tenant_id, ha=True,
403                                                 external_network=ext_net['id'])
404 
405         external_vm = self.useFixture(
406             machine_fixtures.FakeMachine(
407                 self.environment.central_bridge,
408                 common_utils.ip_to_cidr(ext_sub['gateway_ip'], 24)))
409 
410         common_utils.wait_until_true(
411             lambda:
412             len(self.client.list_l3_agent_hosting_routers(
413                 router['id'])['agents']) == 2,
414             timeout=90)
415 
416         common_utils.wait_until_true(
417             functools.partial(
418                 self._is_ha_router_active_on_one_agent,
419                 router['id']),
420             timeout=90)
421 
422         router_ip = router['external_gateway_info'][
423             'external_fixed_ips'][0]['ip_address']
424         # Let's check first if connectivity from external_vm to router's
425         # external gateway IP is possible before we restart agents
426         external_vm.block_until_ping(router_ip)
427 
428         l3_agents = [host.agents['l3'] for host in self.environment.hosts]
429         l3_standby_agents = self._get_l3_agents_with_ha_state(
430             l3_agents, router['id'], 'standby')
431         l3_active_agents = self._get_l3_agents_with_ha_state(
432             l3_agents, router['id'], 'active')
433 
434         self._assert_ping_during_agents_restart(
435             l3_standby_agents, external_vm.namespace, [router_ip], count=60)
436 
437         self._assert_ping_during_agents_restart(
438             l3_active_agents, external_vm.namespace, [router_ip], count=60)
439 
440     def test_gateway_ip_changed(self):
441         self._test_gateway_ip_changed()
