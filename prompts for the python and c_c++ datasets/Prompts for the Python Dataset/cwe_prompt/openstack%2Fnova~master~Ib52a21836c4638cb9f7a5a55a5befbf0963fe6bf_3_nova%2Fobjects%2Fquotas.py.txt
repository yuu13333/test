Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 #    Copyright 2013 Rackspace Hosting.
2 #
3 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
4 #    not use this file except in compliance with the License. You may obtain
5 #    a copy of the License at
6 #
7 #         http://www.apache.org/licenses/LICENSE-2.0
8 #
9 #    Unless required by applicable law or agreed to in writing, software
10 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 #    License for the specific language governing permissions and limitations
13 #    under the License.
14 
15 from collections import defaultdict
16 
17 from nova import db
18 from nova import exception
19 from nova.objects import base
20 from nova.objects import fields
21 from nova import quota
22 
23 
24 def ids_from_instance(context, instance):
25     if (context.is_admin and
26             context.project_id != instance['project_id']):
27         project_id = instance['project_id']
28     else:
29         project_id = context.project_id
30     if context.user_id != instance['user_id']:
31         user_id = instance['user_id']
32     else:
33         user_id = context.user_id
34     return project_id, user_id
35 
36 
37 # TODO(lyj): This method needs to be cleaned up once the
38 # ids_from_instance helper method is renamed or some common
39 # method is added for objects.quotas.
40 def ids_from_security_group(context, security_group):
41     return ids_from_instance(context, security_group)
42 
43 
44 # TODO(PhilD): This method needs to be cleaned up once the
45 # ids_from_instance helper method is renamed or some common
46 # method is added for objects.quotas.
47 def ids_from_server_group(context, server_group):
48     return ids_from_instance(context, server_group)
49 
50 
51 @base.NovaObjectRegistry.register
52 class Quotas(base.NovaObject):
53     # Version 1.0: initial version
54     # Version 1.1: Added create_limit() and update_limit()
55     # Version 1.2: Added limit_check() and count()
56     # Version 1.3: Added check_deltas() and limit_check_project_and_user()
57     VERSION = '1.3'
58 
59     fields = {
60         'reservations': fields.ListOfStringsField(nullable=True),
61         'project_id': fields.StringField(nullable=True),
62         'user_id': fields.StringField(nullable=True),
63     }
64 
65     def __init__(self, *args, **kwargs):
66         super(Quotas, self).__init__(*args, **kwargs)
67         # Set up defaults.
68         self.reservations = []
69         self.project_id = None
70         self.user_id = None
71         self.obj_reset_changes()
72 
73     @classmethod
74     def from_reservations(cls, context, reservations, instance=None):
75         """Transitional for compatibility."""
76         if instance is None:
77             project_id = None
78             user_id = None
79         else:
80             project_id, user_id = ids_from_instance(context, instance)
81         quotas = cls()
82         quotas._context = context
83         quotas.reservations = reservations
84         quotas.project_id = project_id
85         quotas.user_id = user_id
86         quotas.obj_reset_changes()
87         return quotas
88 
89     @base.remotable
90     def reserve(self, expire=None, project_id=None, user_id=None,
91                 **deltas):
92         reservations = quota.QUOTAS.reserve(self._context, expire=expire,
93                                             project_id=project_id,
94                                             user_id=user_id,
95                                             **deltas)
96         self.reservations = reservations
97         self.project_id = project_id
98         self.user_id = user_id
99         self.obj_reset_changes()
100 
101     @base.remotable
102     def commit(self):
103         if not self.reservations:
104             return
105         quota.QUOTAS.commit(self._context, self.reservations,
106                             project_id=self.project_id,
107                             user_id=self.user_id)
108         self.reservations = None
109         self.obj_reset_changes()
110 
111     @base.remotable
112     def rollback(self):
113         """Rollback quotas."""
114         if not self.reservations:
115             return
116         quota.QUOTAS.rollback(self._context, self.reservations,
117                               project_id=self.project_id,
118                               user_id=self.user_id)
119         self.reservations = None
120         self.obj_reset_changes()
121 
122     @base.remotable_classmethod
123     def limit_check(cls, context, project_id=None, user_id=None, **values):
124         """Check quota limits."""
125         return quota.QUOTAS.limit_check(
126             context, project_id=project_id, user_id=user_id, **values)
127 
128     @base.remotable_classmethod
129     def limit_check_project_and_user(cls, context, proj_values=None,
130                                      user_values=None, project_id=None,
131                                      user_id=None):
132         """Check values against quota limits."""
133         return quota.QUOTAS.limit_check_project_and_user(context,
134             proj_values=proj_values, user_values=user_values,
135             project_id=project_id, user_id=user_id)
136 
137     @base.remotable_classmethod
138     def count(cls, context, resource, *args, **kwargs):
139         """Count a resource."""
140         return quota.QUOTAS.count(
141             context, resource, *args, **kwargs)
142 
143     @base.remotable_classmethod
144     def check_deltas(cls, context, resource, deltas, *count_args,
145                      **count_kwargs):
146         """Check usage deltas against quota limits.
147 
148         This does a Quotas.count followed by a
149         Quotas.limit_check_project_and_user using the provided deltas.
150 
151         :param context: The request context, for access checks
152         :param resource: The resource to count. Must be one of: 'instances',
153                          'cores', 'ram', 'security_groups', 'server_groups',
154                          'fixed_ips', 'floating_ips', 'networks'
155         :param deltas: A dictionary {resource: delta} to check against
156                        the quota limits
157         :param count_args: Positional arguments to pass to count()
158         :param count_kwargs: Keyword arguments to pass to count()
159         :param check_project_id: The project_id for scoping the limit check,
160                                  e.g. admin acting upon a resource owned by a
161                                  different project
162         :param check_user_id: The user_id for scoping the limit check, e.g.
163                               admin acting upon a resource owned by a different
164                               user
165         :raises: exception.OverQuota if the limit check exceeds the quota
166                  limits
167         """
168         # We can't do f(*args, kw=None, **kwargs) in python 2.x
169         check_project_id = count_kwargs.pop('check_project_id', None)
170         check_user_id = count_kwargs.pop('check_user_id', None)
171 
172         count = cls.count(context, resource, *count_args, **count_kwargs)
173         check_kwargs = defaultdict(dict)
174         for k, v in deltas.items():
175             if isinstance(count, dict):
176                 check_kwargs['proj_values'][k] = count['project'][k] + v
177                 check_kwargs['user_values'][k] = count['user'][k] + v
178             else:
179                 check_kwargs['user_values'][k] = count + v
180         if check_project_id is not None:
181             check_kwargs['project_id'] = check_project_id
182         if check_user_id is not None:
183             check_kwargs['user_id'] = check_user_id
184         try:
185             cls.limit_check_project_and_user(context, **check_kwargs)
186         except exception.OverQuota as exc:
187             if isinstance(count, dict):
188                 exc.kwargs['usages'] = count['user']
189             else:
190                 exc.kwargs['usages'] = count
191             raise exc
192 
193     @base.remotable_classmethod
194     def create_limit(cls, context, project_id, resource, limit, user_id=None):
195         # NOTE(danms,comstud): Quotas likely needs an overhaul and currently
196         # doesn't map very well to objects. Since there is quite a bit of
197         # logic in the db api layer for this, just pass this through for now.
198         db.quota_create(context, project_id, resource, limit, user_id=user_id)
199 
200     @base.remotable_classmethod
201     def update_limit(cls, context, project_id, resource, limit, user_id=None):
202         # NOTE(danms,comstud): Quotas likely needs an overhaul and currently
203         # doesn't map very well to objects. Since there is quite a bit of
204         # logic in the db api layer for this, just pass this through for now.
205         db.quota_update(context, project_id, resource, limit, user_id=user_id)
206 
207 
208 @base.NovaObjectRegistry.register
209 class QuotasNoOp(Quotas):
210     def reserve(context, expire=None, project_id=None, user_id=None,
211                 **deltas):
212         pass
213 
214     def commit(self, context=None):
215         pass
216 
217     def rollback(self, context=None):
218         pass
