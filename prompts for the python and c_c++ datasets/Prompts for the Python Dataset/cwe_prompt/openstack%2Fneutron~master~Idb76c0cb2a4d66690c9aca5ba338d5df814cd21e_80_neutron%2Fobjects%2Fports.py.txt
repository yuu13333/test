Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 # All Rights Reserved.
2 #
3 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
4 #    not use this file except in compliance with the License. You may obtain
5 #    a copy of the License at
6 #
7 #         http://www.apache.org/licenses/LICENSE-2.0
8 #
9 #    Unless required by applicable law or agreed to in writing, software
10 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
11 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
12 #    License for the specific language governing permissions and limitations
13 #    under the License.
14 
15 import netaddr
16 from neutron_lib import constants
17 from oslo_utils import versionutils
18 from oslo_versionedobjects import base as obj_base
19 from oslo_versionedobjects import fields as obj_fields
20 
21 from neutron.common import utils
22 from neutron.db import api as db_api
23 from neutron.db.models import dns as dns_models
24 from neutron.db.models import l3
25 from neutron.db.models import securitygroup as sg_models
26 from neutron.db import models_v2
27 from neutron.objects import base
28 from neutron.objects import common_types
29 from neutron.objects.db import api as obj_db_api
30 from neutron.objects.qos import binding
31 from neutron.plugins.ml2 import models as ml2_models
32 
33 
34 class PortBindingBase(base.NeutronDbObject):
35 
36     foreign_keys = {
37         'Port': {'port_id': 'id'},
38     }
39 
40     def update(self):
41         """
42         Overwrite to handle host update in Port Binding.
43         Delete old Port Binding entry, update the hostname and create new
44         Port Binding with all values saved in DB.
45         This is done due to host being a primary key, and OVO is not able
46         to update primary key fields.
47         """
48         if getattr(self, 'new_host', None) is not None:
49             self.delete()
50             self.host = self['new_host']
51             self['new_host'] = None
52             self._changed_fields = set(self.fields.keys())
53             self.create()
54         else:
55             super(PortBindingBase, self).update()
56 
57     @classmethod
58     def modify_fields_to_db(cls, fields):
59         result = super(PortBindingBase, cls).modify_fields_to_db(fields)
60         for field in ['profile', 'vif_details']:
61             if field in result:
62                 # dump field into string, set '' if empty '{}' or None
63                 result[field] = (
64                     cls.filter_to_json_str(result[field], default=''))
65         return result
66 
67     @classmethod
68     def modify_fields_from_db(cls, db_obj):
69         fields = super(PortBindingBase, cls).modify_fields_from_db(db_obj)
70         if 'vif_details' in fields:
71             # load string from DB into dict, set None if vif_details is ''
72             fields['vif_details'] = (
73                 cls.load_json_from_str(fields['vif_details']))
74         if 'profile' in fields:
75             # load string from DB into dict, set {} if profile is ''
76             fields['profile'] = (
77                 cls.load_json_from_str(fields['profile'], default={}))
78         return fields
79 
80 
81 @obj_base.VersionedObjectRegistry.register
82 class PortBinding(PortBindingBase):
83     # Version 1.0: Initial version
84     VERSION = '1.0'
85 
86     db_model = ml2_models.PortBinding
87 
88     fields = {
89         'port_id': common_types.UUIDField(),
90         'host': obj_fields.StringField(default=''),
91         'profile': common_types.DictOfMiscValuesField(),
92         'vif_type': obj_fields.StringField(),
93         'vif_details': common_types.DictOfMiscValuesField(nullable=True),
94         'vnic_type': obj_fields.StringField(),
95         'status': common_types.PortBindingStatusEnumField(
96             default=constants.ACTIVE),
97     }
98 
99     primary_keys = ['port_id', 'host']
100 
101 
102 @obj_base.VersionedObjectRegistry.register
103 class DistributedPortBinding(PortBindingBase):
104     # Version 1.0: Initial version
105     VERSION = '1.0'
106 
107     db_model = ml2_models.DistributedPortBinding
108 
109     fields = {
110         'port_id': common_types.UUIDField(),
111         'host': obj_fields.StringField(),
112         'profile': common_types.DictOfMiscValuesField(),
113         'vif_type': obj_fields.StringField(),
114         'vif_details': common_types.DictOfMiscValuesField(nullable=True),
115         'vnic_type': obj_fields.StringField(),
116         # NOTE(ihrachys): Fields below are specific to this type of binding. In
117         # the future, we could think of converging different types of bindings
118         # into a single field
119         'status': obj_fields.StringField(),
120         'router_id': obj_fields.StringField(nullable=True),
121     }
122 
123     primary_keys = ['host', 'port_id']
124 
125 
126 @obj_base.VersionedObjectRegistry.register
127 class PortBindingLevel(base.NeutronDbObject):
128     # Version 1.0: Initial version
129     VERSION = '1.0'
130 
131     db_model = ml2_models.PortBindingLevel
132 
133     primary_keys = ['port_id', 'host', 'level']
134 
135     fields = {
136         'port_id': common_types.UUIDField(),
137         'host': obj_fields.StringField(),
138         'level': obj_fields.IntegerField(),
139         'driver': obj_fields.StringField(nullable=True),
140         'segment': obj_fields.ObjectField(
141             'NetworkSegment', nullable=True
142         ),
143     }
144 
145     synthetic_fields = ['segment']
146 
147     foreign_keys = {
148         'Port': {'port_id': 'id'},
149     }
150 
151     @classmethod
152     def get_objects(cls, context, _pager=None, validate_filters=True,
153                     **kwargs):
154         if not _pager:
155             _pager = base.Pager()
156         if not _pager.sorts:
157             # (NOTE) True means ASC, False is DESC
158             _pager.sorts = [('port_id', True), ('level', True)]
159         return super(PortBindingLevel, cls).get_objects(
160             context, _pager, validate_filters, **kwargs)
161 
162 
163 @obj_base.VersionedObjectRegistry.register
164 class IPAllocation(base.NeutronDbObject):
165     # Version 1.0: Initial version
166     VERSION = '1.0'
167 
168     db_model = models_v2.IPAllocation
169 
170     fields = {
171         'port_id': common_types.UUIDField(nullable=True),
172         'subnet_id': common_types.UUIDField(),
173         'network_id': common_types.UUIDField(),
174         'ip_address': obj_fields.IPAddressField(),
175     }
176 
177     fields_no_update = fields.keys()
178 
179     primary_keys = ['subnet_id', 'network_id', 'ip_address']
180 
181     foreign_keys = {
182         'Port': {'port_id': 'id'},
183     }
184 
185     # TODO(rossella_s): get rid of it once we switch the db model to using
186     # custom types.
187     @classmethod
188     def modify_fields_to_db(cls, fields):
189         result = super(IPAllocation, cls).modify_fields_to_db(fields)
190         if 'ip_address' in result:
191             result['ip_address'] = cls.filter_to_str(result['ip_address'])
192         return result
193 
194     # TODO(rossella_s): get rid of it once we switch the db model to using
195     # custom types.
196     @classmethod
197     def modify_fields_from_db(cls, db_obj):
198         fields = super(IPAllocation, cls).modify_fields_from_db(db_obj)
199         if 'ip_address' in fields:
200             fields['ip_address'] = netaddr.IPAddress(fields['ip_address'])
201         return fields
202 
203     @classmethod
204     def get_alloc_by_subnet_id(cls, context, subnet_id, device_owner,
205                                exclude=True):
206         # need to join with ports table as IPAllocation's port
207         # is not joined eagerly and thus producing query which yields
208         # incorrect results
209         if exclude:
210             alloc_db = (context.session.query(models_v2.IPAllocation).
211                        filter_by(subnet_id=subnet_id).join(models_v2.Port).
212                        filter(~models_v2.Port.device_owner.
213                        in_(device_owner)).first())
214         else:
215             alloc_db = (context.session.query(models_v2.IPAllocation).
216                        filter_by(subnet_id=subnet_id).join(models_v2.Port).
217                        filter(models_v2.Port.device_owner.
218                        in_(device_owner)).first())
219         if exclude and alloc_db:
220             return super(IPAllocation, cls)._load_object(context, alloc_db)
221         if alloc_db:
222             return True
223 
224 
225 @obj_base.VersionedObjectRegistry.register
226 class PortDNS(base.NeutronDbObject):
227     # Version 1.0: Initial version
228     # Version 1.1: Add dns_domain attribute
229     VERSION = '1.1'
230 
231     db_model = dns_models.PortDNS
232 
233     primary_keys = ['port_id']
234 
235     foreign_keys = {
236         'Port': {'port_id': 'id'},
237     }
238 
239     fields = {
240         'port_id': common_types.UUIDField(),
241         'current_dns_name': common_types.DomainNameField(),
242         'current_dns_domain': common_types.DomainNameField(),
243         'previous_dns_name': common_types.DomainNameField(),
244         'previous_dns_domain': common_types.DomainNameField(),
245         'dns_name': common_types.DomainNameField(),
246         'dns_domain': common_types.DomainNameField(),
247     }
248 
249     def obj_make_compatible(self, primitive, target_version):
250         _target_version = versionutils.convert_version_to_tuple(target_version)
251         if _target_version < (1, 1):
252             primitive.pop('dns_domain', None)
253 
254 
255 @obj_base.VersionedObjectRegistry.register
256 class Port(base.NeutronDbObject):
257     # Version 1.0: Initial version
258     # Version 1.1: Add data_plane_status field
259     VERSION = '1.1'
260 
261     db_model = models_v2.Port
262 
263     fields = {
264         'id': common_types.UUIDField(),
265         'project_id': obj_fields.StringField(nullable=True),
266         'name': obj_fields.StringField(nullable=True),
267         'network_id': common_types.UUIDField(),
268         'mac_address': common_types.MACAddressField(),
269         'admin_state_up': obj_fields.BooleanField(),
270         'device_id': obj_fields.StringField(),
271         'device_owner': obj_fields.StringField(),
272         'status': obj_fields.StringField(),
273 
274         'allowed_address_pairs': obj_fields.ListOfObjectsField(
275             'AllowedAddressPair', nullable=True
276         ),
277         'binding': obj_fields.ObjectField(
278             'PortBinding', nullable=True
279         ),
280         'data_plane_status': obj_fields.ObjectField(
281             'PortDataPlaneStatus', nullable=True
282         ),
283         'dhcp_options': obj_fields.ListOfObjectsField(
284             'ExtraDhcpOpt', nullable=True
285         ),
286         'distributed_binding': obj_fields.ObjectField(
287             'DistributedPortBinding', nullable=True
288         ),
289         'dns': obj_fields.ObjectField('PortDNS', nullable=True),
290         'fixed_ips': obj_fields.ListOfObjectsField(
291             'IPAllocation', nullable=True
292         ),
293         # TODO(ihrachys): consider converting to boolean
294         'security': obj_fields.ObjectField(
295             'PortSecurity', nullable=True
296         ),
297         'security_group_ids': common_types.SetOfUUIDsField(
298             nullable=True,
299             # TODO(ihrachys): how do we safely pass a mutable default?
300             default=None,
301         ),
302         'qos_policy_id': common_types.UUIDField(nullable=True, default=None),
303 
304         'binding_levels': obj_fields.ListOfObjectsField(
305             'PortBindingLevel', nullable=True
306         ),
307 
308         # TODO(ihrachys): consider adding a 'dns_assignment' fully synthetic
309         # field in later object iterations
310     }
311 
312     extra_filter_names = {'security_group_ids'}
313 
314     fields_no_update = ['project_id', 'network_id']
315 
316     synthetic_fields = [
317         'allowed_address_pairs',
318         'binding',
319         'binding_levels',
320         'data_plane_status',
321         'dhcp_options',
322         'distributed_binding',
323         'dns',
324         'fixed_ips',
325         'qos_policy_id',
326         'security',
327         'security_group_ids',
328     ]
329 
330     fields_need_translation = {
331         'binding': 'port_binding',
332         'dhcp_options': 'dhcp_opts',
333         'distributed_binding': 'distributed_port_binding',
334         'security': 'port_security',
335     }
336 
337     def create(self):
338         fields = self.obj_get_changes()
339         with db_api.autonested_transaction(self.obj_context.session):
340             sg_ids = self.security_group_ids
341             if sg_ids is None:
342                 sg_ids = set()
343             qos_policy_id = self.qos_policy_id
344             super(Port, self).create()
345             if 'security_group_ids' in fields:
346                 self._attach_security_groups(sg_ids)
347             if 'qos_policy_id' in fields:
348                 self._attach_qos_policy(qos_policy_id)
349 
350     def update(self):
351         fields = self.obj_get_changes()
352         with db_api.autonested_transaction(self.obj_context.session):
353             super(Port, self).update()
354             if 'security_group_ids' in fields:
355                 self._attach_security_groups(fields['security_group_ids'])
356             if 'qos_policy_id' in fields:
357                 self._attach_qos_policy(fields['qos_policy_id'])
358 
359     def _attach_qos_policy(self, qos_policy_id):
360         binding.QosPolicyPortBinding.delete_objects(
361             self.obj_context, port_id=self.id)
362         if qos_policy_id:
363             port_binding_obj = binding.QosPolicyPortBinding(
364                 self.obj_context, policy_id=qos_policy_id, port_id=self.id)
365             port_binding_obj.create()
366 
367         self.qos_policy_id = qos_policy_id
368         self.obj_reset_changes(['qos_policy_id'])
369 
370     def _attach_security_groups(self, sg_ids):
371         # TODO(ihrachys): consider introducing an (internal) object for the
372         # binding to decouple database operations a bit more
373         obj_db_api.delete_objects(
374             self.obj_context, sg_models.SecurityGroupPortBinding,
375             port_id=self.id,
376         )
377         if sg_ids:
378             for sg_id in sg_ids:
379                 self._attach_security_group(sg_id)
380         self.security_group_ids = sg_ids
381         self.obj_reset_changes(['security_group_ids'])
382 
383     def _attach_security_group(self, sg_id):
384         obj_db_api.create_object(
385             self.obj_context, sg_models.SecurityGroupPortBinding,
386             {'port_id': self.id, 'security_group_id': sg_id}
387         )
388 
389     # TODO(rossella_s): get rid of it once we switch the db model to using
390     # custom types.
391     @classmethod
392     def modify_fields_to_db(cls, fields):
393         result = super(Port, cls).modify_fields_to_db(fields)
394         if 'mac_address' in result:
395             result['mac_address'] = cls.filter_to_str(result['mac_address'])
396         return result
397 
398     # TODO(rossella_s): get rid of it once we switch the db model to using
399     # custom types.
400     @classmethod
401     def modify_fields_from_db(cls, db_obj):
402         fields = super(Port, cls).modify_fields_from_db(db_obj)
403         if 'mac_address' in fields:
404             fields['mac_address'] = utils.AuthenticEUI(fields['mac_address'])
405         distributed_port_binding = fields.get('distributed_binding')
406         if distributed_port_binding:
407             fields['distributed_binding'] = fields['distributed_binding'][0]
408         else:
409             fields['distributed_binding'] = None
410         return fields
411 
412     def from_db_object(self, db_obj):
413         super(Port, self).from_db_object(db_obj)
414         # extract security group bindings
415         if db_obj.get('security_groups', []):
416             self.security_group_ids = {
417                 sg.security_group_id
418                 for sg in db_obj.security_groups
419             }
420         else:
421             self.security_group_ids = set()
422         self.obj_reset_changes(['security_group_ids'])
423 
424         # extract qos policy binding
425         if db_obj.get('qos_policy_binding'):
426             self.qos_policy_id = (
427                 db_obj.qos_policy_binding.policy_id
428             )
429         else:
430             self.qos_policy_id = None
431         self.obj_reset_changes(['qos_policy_id'])
432 
433     def obj_make_compatible(self, primitive, target_version):
434         _target_version = versionutils.convert_version_to_tuple(target_version)
435 
436         if _target_version < (1, 1):
437             primitive.pop('data_plane_status', None)
438 
439     @classmethod
440     def get_ports_by_router(cls, context, router_id, owner, subnet):
441         rport_qry = context.session.query(models_v2.Port).join(
442             l3.RouterPort)
443         ports = rport_qry.filter(
444             l3.RouterPort.router_id == router_id,
445             l3.RouterPort.port_type == owner,
446             models_v2.Port.network_id == subnet['network_id']
447         )
448         return [cls._load_object(context, db_obj) for db_obj in ports.all()]
