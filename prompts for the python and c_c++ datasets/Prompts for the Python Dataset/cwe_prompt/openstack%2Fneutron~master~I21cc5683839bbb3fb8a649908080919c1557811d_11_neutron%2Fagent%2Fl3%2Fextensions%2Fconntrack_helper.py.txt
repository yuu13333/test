Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 # Copyright (c) 2019 Red Hat Inc.
2 # All rights reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 
16 import collections
17 
18 from neutron_lib.agent import l3_extension
19 from neutron_lib import constants
20 from neutron_lib import rpc as n_rpc
21 from oslo_concurrency import lockutils
22 from oslo_log import log as logging
23 
24 from neutron.api.rpc.callbacks.consumer import registry
25 from neutron.api.rpc.callbacks import events
26 from neutron.api.rpc.callbacks import resources
27 from neutron.api.rpc.handlers import resources_rpc
28 
29 
30 LOG = logging.getLogger(__name__)
31 DEFAULT_CONNTRACK_HELPER_CHAIN = 'cth'
32 CONNTRACK_HELPER_PREFIX = 'cthelper-'
33 CONNTRACK_HELPER_CHAIN_PREFIX = DEFAULT_CONNTRACK_HELPER_CHAIN + '-'
34 
35 
36 class ConntrackHelperMapping(object):
37 
38     def __init__(self):
39         self._managed_conntrack_helpers = {}
40         """
41         router_conntrack_helper_mapping = {
42            router_id_1: set(cth_id_1, cth_id_2),
43            router_id_2: set(cth_id_3, cth_id_4)
44         }
45         """
46         self._router_conntrack_helper_mapping = collections.defaultdict(set)
47 
48     def set_conntrack_helpers(self, conntrack_helpers):
49         for cth in conntrack_helpers:
50             self._router_conntrack_helper_mapping[cth.router_id].add(cth.id)
51             self._managed_conntrack_helpers[cth.id] = cth
52 
53     def update_conntrack_helpers(self, conntrack_helpers):
54         for cth in conntrack_helpers:
55             if (cth.id not in
56                     self._router_conntrack_helper_mapping[cth.router_id]):
57                 self._router_conntrack_helper_mapping[cth.router_id].add(
58                     cth.id)
59             self._managed_conntrack_helpers[cth.id] = cth
60 
61     def get_conntack_helper(self, conntrack_helper_id):
62         return self._managed_conntrack_helpers.get(conntrack_helper_id)
63 
64     def get_managed_conntrack_helpers(self):
65         return self._managed_conntrack_helpers
66 
67     def del_conntrack_helpers(self, conntrack_helpers):
68         for cth in conntrack_helpers:
69             if not self.get_conntack_helper(cth.id):
70                 continue
71             del self._managed_conntrack_helpers[cth.id]
72             self._router_conntrack_helper_mapping[cth.router_id].remove(
73                 cth.id)
74             if not self._router_conntrack_helper_mapping[cth.router_id]:
75                 del self._router_conntrack_helper_mapping[cth.router_id]
76 
77     def clear_by_router_id(self, router_id):
78         router_cth_ids = self._router_conntrack_helper_mapping.get(router_id)
79         if not router_cth_ids:
80             return
81         for cth_id in router_cth_ids:
82             del self._managed_conntrack_helpers[cth_id]
83         del self._router_conntrack_helper_mapping[router_id]
84 
85     def check_conntrack_helper_changes(self, new_cth):
86         old_cth = self.get_conntack_helper(new_cth.id)
87         return old_cth != new_cth
88 
89 
90 class ConntrackHelperAgentExtension(l3_extension.L3AgentExtension):
91     SUPPORTED_RESOURCE_TYPES = [resources.CONNTRACKHELPER]
92 
93     def initialize(self, connection, driver_type):
94         self.resource_rpc = resources_rpc.ResourcesPullRpcApi()
95         self._register_rpc_consumers()
96         self.mapping = ConntrackHelperMapping()
97 
98     def _register_rpc_consumers(self):
99         registry.register(self._handle_notification, resources.CONNTRACKHELPER)
100 
101         self._connection = n_rpc.Connection()
102         endpoints = [resources_rpc.ResourcesPushRpcCallback()]
103         topic = resources_rpc.resource_type_versioned_topic(
104             resources.CONNTRACKHELPER)
105         self._connection.create_consumer(topic, endpoints, fanout=True)
106         self._connection.consume_in_threads()
107 
108     def consume_api(self, agent_api):
109         self.agent_api = agent_api
110 
111     @lockutils.synchronized('conntrack-helpers')
112     def _handle_notification(self, context, resource_type, conntrack_helpers,
113                              event_type):
114         for conntrack_helper in conntrack_helpers:
115             router_info = self.agent_api.get_router_info(
116                 conntrack_helper.router_id)
117             if not router_info:
118                 return
119 
120             iptables_manager = self._get_iptables_manager(router_info)
121 
122             if event_type == events.CREATED:
123                 self._process_create([conntrack_helper], iptables_manager)
124             elif event_type == events.UPDATED:
125                 self._process_update([conntrack_helper], iptables_manager)
126             elif event_type == events.DELETED:
127                 self._process_delete([conntrack_helper], iptables_manager)
128 
129     def _get_chain_name(self, id):
130         return (CONNTRACK_HELPER_CHAIN_PREFIX + id)[
131                :constants.MAX_IPTABLES_CHAIN_LEN_WRAP]
132 
133     def _install_default_rules(self, iptables_manager, version):
134         default_rule = '-j %s-%s' % (iptables_manager.wrap_name,
135                                      DEFAULT_CONNTRACK_HELPER_CHAIN)
136         if version == constants.IPv4:
137             iptables_manager.ipv4['raw'].add_chain(
138                 DEFAULT_CONNTRACK_HELPER_CHAIN)
139             iptables_manager.ipv4['raw'].add_rule('PREROUTING', default_rule)
140         elif version == constants.IPv6:
141             iptables_manager.ipv6['raw'].add_chain(
142                 DEFAULT_CONNTRACK_HELPER_CHAIN)
143             iptables_manager.ipv6['raw'].add_rule('PREROUTING', default_rule)
144         iptables_manager.apply()
145 
146     def _get_chain_rules_list(self, conntrack_helper, wrap_name):
147         chain_name = self._get_chain_name(conntrack_helper.id)
148         chain_rule_list = [(DEFAULT_CONNTRACK_HELPER_CHAIN,
149                             '-j %s-%s' % (wrap_name, chain_name))]
150         chain_rule_list.append((chain_name,
151                                 '-p %(proto)s --dport %(dport)s -j CT '
152                                 '--helper %(helper)s' %
153                                 {'proto': conntrack_helper.protocol,
154                                  'dport': conntrack_helper.port,
155                                  'helper': conntrack_helper.helper}))
156 
157         return chain_rule_list
158 
159     def _rule_apply(self, iptables_manager, conntrack_helper):
160         tag = CONNTRACK_HELPER_PREFIX + conntrack_helper.id
161         iptables_manager.ipv4['raw'].clear_rules_by_tag(tag)
162         iptables_manager.ipv6['raw'].clear_rules_by_tag(tag)
163         for chain, rule in self._get_chain_rules_list(
164                 conntrack_helper, iptables_manager.wrap_name):
165             if chain not in iptables_manager.ipv4['raw'].chains:
166                 iptables_manager.ipv4['raw'].add_chain(chain)
167             if chain not in iptables_manager.ipv6['raw'].chains:
168                 iptables_manager.ipv6['raw'].add_chain(chain)
169 
170             iptables_manager.ipv4['raw'].add_rule(chain, rule, tag=tag)
171             iptables_manager.ipv6['raw'].add_rule(chain, rule, tag=tag)
172 
173     def _process_create(self, conntrack_helpers, iptables_manager):
174         if not conntrack_helpers:
175             return
176 
177         if (DEFAULT_CONNTRACK_HELPER_CHAIN not in
178                 iptables_manager.ipv4['raw'].chains):
179             self._install_default_rules(iptables_manager, constants.IPv4)
180         if (DEFAULT_CONNTRACK_HELPER_CHAIN not in
181                 iptables_manager.ipv6['raw'].chains):
182             self._install_default_rules(iptables_manager, constants.IPv6)
183 
184         for conntrack_helper in conntrack_helpers:
185             self._rule_apply(iptables_manager, conntrack_helper)
186 
187         iptables_manager.apply()
188         self.mapping.set_conntrack_helpers(conntrack_helpers)
189 
190     def _process_update(self, conntrack_helpers, iptables_manager):
191         if not conntrack_helpers:
192             return
193 
194         for conntrack_helper in conntrack_helpers:
195             if not self.mapping.check_conntrack_helper_changes(
196                     conntrack_helper):
197                 LOG.debug("Skip conntrack helper %s for update, as there is "
198                           "no difference between the memory managed by agent",
199                           conntrack_helper.id)
200                 continue
201 
202             current_chain = self._get_chain_name(conntrack_helper.id)
203             iptables_manager.ipv4['raw'].remove_chain(current_chain)
204             iptables_manager.ipv6['raw'].remove_chain(current_chain)
205 
206             self._rule_apply(iptables_manager, conntrack_helper)
207 
208         iptables_manager.apply()
209         self.mapping.update_conntrack_helpers(conntrack_helpers)
210 
211     def _process_delete(self, conntrack_helpers, iptables_manager):
212         if not conntrack_helpers:
213             return
214 
215         for conntrack_helper in conntrack_helpers:
216             chain_name = self._get_chain_name(conntrack_helper.id)
217             iptables_manager.ipv4['raw'].remove_chain(chain_name)
218             iptables_manager.ipv6['raw'].remove_chain(chain_name)
219 
220         iptables_manager.apply()
221         self.mapping.del_conntrack_helpers(conntrack_helpers)
222 
223     def _get_iptables_manager(self, router_info):
224         if router_info.router.get('distributed'):
225             return router_info.snat_iptables_manager
226 
227         return router_info.iptables_manager
228 
229     def check_local_conntrack_helpers(self, context, router_info):
230         local_ct_helpers = set(self.mapping.get_managed_conntrack_helpers()
231                                .keys())
232         new_ct_helpers = []
233         updated_cth_helpers = []
234         current_ct_helpers = set()
235 
236         ct_helpers = self.resource_rpc.bulk_pull(
237             context, resources.CONNTRACKHELPER, filter_kwargs={
238                 'router_id': router_info.router['id']})
239 
240         for cth in ct_helpers:
241             # Split request conntrack helpers into update, new and current
242             if (cth.id in self.mapping.get_managed_conntrack_helpers() and
243                     self.mapping.check_conntrack_helper_changes(cth)):
244                 updated_cth_helpers.append(cth)
245             elif cth.id not in self.mapping.get_managed_conntrack_helpers():
246                 new_ct_helpers.append(cth)
247             current_ct_helpers.add(cth.id)
248 
249         remove_ct_helpers = [
250             self.mapping.get_managed_conntrack_helpers().get(cth_id) for cth_id
251             in local_ct_helpers.difference(current_ct_helpers)]
252 
253         iptables_manager = self._get_iptables_manager(router_info)
254 
255         self._process_update(updated_cth_helpers, iptables_manager)
256         self._process_create(new_ct_helpers, iptables_manager)
257         self._process_delete(remove_ct_helpers, iptables_manager)
258 
259     def process_conntrack_helper(self, context, data):
260         router_info = self.agent_api.get_router_info(data['id'])
261         if not router_info:
262             LOG.debug("Router %s is not managed by this agent. "
263                       "It was possibly deleted concurrently.", data['id'])
264             return
265 
266         self.check_local_conntrack_helpers(context, router_info)
267 
268     def add_router(self, context, data):
269         self.process_conntrack_helper(context, data)
270 
271     def update_router(self, context, data):
272         self.process_conntrack_helper(context, data)
273 
274     def delete_router(self, context, data):
275         self.mapping.clear_by_router_id(data['id'])
276 
277     def ha_state_change(self, context, data):
278         pass
