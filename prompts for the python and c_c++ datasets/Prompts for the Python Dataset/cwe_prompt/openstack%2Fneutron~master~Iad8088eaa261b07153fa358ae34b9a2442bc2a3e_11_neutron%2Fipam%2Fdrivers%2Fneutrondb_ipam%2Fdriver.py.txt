Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 # Copyright 2015 OpenStack LLC.
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 
16 import itertools
17 import random
18 
19 import netaddr
20 from neutron_lib import exceptions as n_exc
21 from neutron_lib.plugins import directory
22 from oslo_db import exception as db_exc
23 from oslo_log import log
24 from oslo_utils import uuidutils
25 
26 from neutron._i18n import _
27 from neutron.ipam import driver as ipam_base
28 from neutron.ipam.drivers.neutrondb_ipam import db_api as ipam_db_api
29 from neutron.ipam import exceptions as ipam_exc
30 from neutron.ipam import requests as ipam_req
31 from neutron.ipam import subnet_alloc
32 from neutron.ipam import utils as ipam_utils
33 
34 
35 LOG = log.getLogger(__name__)
36 MAX_WIN = 1000
37 MULTIPLIER = 100
38 MAX_WIN_MULTI = MAX_WIN * MULTIPLIER
39 
40 
41 class NeutronDbSubnet(ipam_base.Subnet):
42     """Manage IP addresses for Neutron DB IPAM driver.
43 
44     This class implements the strategy for IP address allocation and
45     deallocation for the Neutron DB IPAM driver.
46     """
47 
48     @classmethod
49     def create_allocation_pools(cls, subnet_manager, context, pools, cidr):
50         for pool in pools:
51             # IPv6 addresses that start '::1', '::2', etc cause IP version
52             # ambiguity when converted to integers by pool.first and pool.last.
53             # Infer the IP version from the subnet cidr.
54             ip_version = cidr.version
55             subnet_manager.create_pool(
56                 context,
57                 netaddr.IPAddress(pool.first, ip_version).format(),
58                 netaddr.IPAddress(pool.last, ip_version).format())
59 
60     @classmethod
61     def create_from_subnet_request(cls, subnet_request, ctx):
62         ipam_subnet_id = uuidutils.generate_uuid()
63         subnet_manager = ipam_db_api.IpamSubnetManager(
64             ipam_subnet_id,
65             subnet_request.subnet_id)
66         # Create subnet resource
67         subnet_manager.create(ctx)
68         # If allocation pools are not specified, define them around
69         # the subnet's gateway IP
70         if not subnet_request.allocation_pools:
71             pools = ipam_utils.generate_pools(subnet_request.subnet_cidr,
72                                               subnet_request.gateway_ip)
73         else:
74             pools = subnet_request.allocation_pools
75         # Create IPAM allocation pools
76         cls.create_allocation_pools(subnet_manager, ctx, pools,
77                                     subnet_request.subnet_cidr)
78 
79         return cls(ipam_subnet_id,
80                    ctx,
81                    cidr=subnet_request.subnet_cidr,
82                    allocation_pools=pools,
83                    gateway_ip=subnet_request.gateway_ip,
84                    tenant_id=subnet_request.tenant_id,
85                    subnet_id=subnet_request.subnet_id)
86 
87     @classmethod
88     def load(cls, neutron_subnet_id, ctx):
89         """Load an IPAM subnet from the database given its neutron ID.
90 
91         :param neutron_subnet_id: neutron subnet identifier.
92         """
93         ipam_subnet = ipam_db_api.IpamSubnetManager.load_by_neutron_subnet_id(
94             ctx, neutron_subnet_id)
95         if not ipam_subnet:
96             LOG.error("IPAM subnet referenced to "
97                       "Neutron subnet %s does not exist", neutron_subnet_id)
98             raise n_exc.SubnetNotFound(subnet_id=neutron_subnet_id)
99         pools = []
100         for pool in ipam_subnet.allocation_pools:
101             pools.append(netaddr.IPRange(pool['first_ip'], pool['last_ip']))
102 
103         neutron_subnet_obj = cls._fetch_subnet(ctx, neutron_subnet_id)
104 
105         return cls(ipam_subnet['id'],
106                    ctx,
107                    cidr=neutron_subnet_obj.cidr,
108                    allocation_pools=pools,
109                    gateway_ip=neutron_subnet_obj.gateway_ip,
110                    tenant_id=neutron_subnet_obj.tenant_id,
111                    subnet_id=neutron_subnet_id)
112 
113     @classmethod
114     def _fetch_subnet(cls, context, id):
115         plugin = directory.get_plugin()
116         return plugin._get_subnet_object(context, id)
117 
118     def __init__(self, internal_id, ctx, cidr=None,
119                  allocation_pools=None, gateway_ip=None, tenant_id=None,
120                  subnet_id=None):
121         # NOTE: In theory it could have been possible to grant the IPAM
122         # driver direct access to the database. While this is possible,
123         # it would have led to duplicate code and/or non-trivial
124         # refactorings in neutron.db.db_base_plugin_v2.
125         # This is because in the Neutron V2 plugin logic DB management is
126         # encapsulated within the plugin.
127         self._cidr = cidr
128         self._pools = allocation_pools
129         self._gateway_ip = gateway_ip
130         self._tenant_id = tenant_id
131         self._subnet_id = subnet_id
132         self.subnet_manager = ipam_db_api.IpamSubnetManager(internal_id,
133                                                             self._subnet_id)
134         self._context = ctx
135 
136     def _verify_ip(self, context, ip_address):
137         """Verify whether IP address can be allocated on subnet.
138 
139         :param context: neutron api request context
140         :param ip_address: String representing the IP address to verify
141         :raises: InvalidInput, IpAddressAlreadyAllocated
142         """
143         # Ensure that the IP's are unique
144         if not self.subnet_manager.check_unique_allocation(context,
145                                                            ip_address):
146             raise ipam_exc.IpAddressAlreadyAllocated(
147                 subnet_id=self.subnet_manager.neutron_id,
148                 ip=ip_address)
149 
150         # Ensure that the IP is valid on the subnet
151         if not ipam_utils.check_subnet_ip(self._cidr, ip_address):
152             raise ipam_exc.InvalidIpForSubnet(
153                 subnet_id=self.subnet_manager.neutron_id,
154                 ip=ip_address)
155 
156     def _generate_ip(self, context, prefer_next=False):
157         """Generate an IP address from the set of available addresses."""
158         generated_ips = self._generate_ips(context, prefer_next, 1)
159         return generated_ips[0]
160 
161     def _generate_ips(self, context, prefer_next=False, num_addresses=1):
162         """Generate a set of IPs from the set of available addresses."""
163         ip_allocations = netaddr.IPSet()
164         allocated_ip_pool = []
165         for ipallocation in self.subnet_manager.list_allocations(context):
166             ip_allocations.add(ipallocation.ip_address)
167 
168         for ip_pool in self.subnet_manager.list_pools(context):
169             ip_set = netaddr.IPSet()
170             ip_set.add(netaddr.IPRange(ip_pool.first_ip, ip_pool.last_ip))
171             av_set = ip_set.difference(ip_allocations)
172             if av_set.size == 0:
173                 continue
174 
175             if av_set.size < num_addresses:
176                 # Not enough addresses in pool to perform validation
177                 # TODO(njohnston): How to handle when there are enough IPs but
178                 # not enough in a single pool to satisfy the request?
179                 continue
180 
181             window = min(av_set.size, MAX_WIN)
182 
183             # NOTE(gryf): If there is more than one address, make the window
184             # bigger, so that are chances to fulfill demanded amount of IPs.
185             if num_addresses > 1:
186                 window = min(av_set.size, num_addresses * MULTIPLIER)
187                 if window > MAX_WIN_MULTI:
188                     window = MAX_WIN_MULTI
189 
190             if window < num_addresses:
191                 continue
192 
193             if prefer_next:
194                 allocated_ip_pool = list(itertools.islice(av_set, 1))
195             else:
196                 # Use the random module's built in functions for random
197                 # sampling and shuffling to maximize randomness.
198                 av_ips = list(itertools.islice(av_set, 0, window))
199                 allocated_ip_pool = random.sample(av_ips, num_addresses)
200             return [str(allocated_ip) for allocated_ip in allocated_ip_pool]
201 
202         raise ipam_exc.IpAddressGenerationFailure(
203                   subnet_id=self.subnet_manager.neutron_id)
204 
205     def allocate(self, address_request):
206         # NOTE(pbondar): Ipam driver is always called in context of already
207         # running transaction, which is started on create_port or upper level.
208         # To be able to do rollback/retry actions correctly ipam driver
209         # should not create new nested transaction blocks.
210         # NOTE(salv-orlando): It would probably better to have a simpler
211         # model for address requests and just check whether there is a
212         # specific IP address specified in address_request
213         if isinstance(address_request, ipam_req.SpecificAddressRequest):
214             # This handles both specific and automatic address requests
215             # Check availability of requested IP
216             ip_address = str(address_request.address)
217             self._verify_ip(self._context, ip_address)
218         else:
219             prefer_next = isinstance(address_request,
220                                      ipam_req.PreferNextAddressRequest)
221             ip_address = self._generate_ip(self._context,
222                                            prefer_next)
223 
224         # Create IP allocation request object
225         # The only defined status at this stage is 'ALLOCATED'.
226         # More states will be available in the future - e.g.: RECYCLABLE
227         try:
228             # TODO(ataraday): revisit this after objects switched to
229             # new enginefacade
230             with self._context.session.begin(subtransactions=True):
231                 # NOTE(kevinbenton): we use a subtransaction to force
232                 # a flush here so we can capture DBReferenceErrors due
233                 # to concurrent subnet deletions. (galera would deadlock
234                 # later on final commit)
235                 self.subnet_manager.create_allocation(self._context,
236                                                       ip_address)
237         except db_exc.DBReferenceError:
238             raise n_exc.SubnetNotFound(
239                 subnet_id=self.subnet_manager.neutron_id)
240         return ip_address
241 
242     def bulk_allocate(self, address_request):
243         # The signature of this function differs from allocate only in that it
244         # returns a list of addresses, as opposed to a single address.
245         if not isinstance(address_request, ipam_req.BulkAddressRequest):
246             return [self.allocate(address_request)]
247         num_addrs = address_request.num_addresses
248         allocated_ip_pool = self._generate_ips(self._context,
249                                                False,
250                                                num_addrs)
251         # Create IP allocation request objects
252         try:
253             with self._context.session.begin(subtransactions=True):
254                 for ip_address in allocated_ip_pool:
255                     self.subnet_manager.create_allocation(self._context,
256                                                           ip_address)
257         except db_exc.DBReferenceError:
258             raise n_exc.SubnetNotFound(
259                 subnet_id=self.subnet_manager.neutron_id)
260         return allocated_ip_pool
261 
262     def deallocate(self, address):
263         # This is almost a no-op because the Neutron DB IPAM driver does not
264         # delete IPAllocation objects at every deallocation. The only
265         # operation it performs is to delete an IPRequest entry.
266         count = self.subnet_manager.delete_allocation(
267             self._context, address)
268         # count can hardly be greater than 1, but it can be 0...
269         if not count:
270             raise ipam_exc.IpAddressAllocationNotFound(
271                 subnet_id=self.subnet_manager.neutron_id,
272                 ip_address=address)
273 
274     def _no_pool_changes(self, context, pools):
275         """Check if pool updates in db are required."""
276         db_pools = self.subnet_manager.list_pools(context)
277         iprange_pools = [netaddr.IPRange(pool.first_ip, pool.last_ip)
278                          for pool in db_pools]
279         return pools == iprange_pools
280 
281     def update_allocation_pools(self, pools, cidr):
282         # Pools have already been validated in the subnet request object which
283         # was sent to the subnet pool driver. Further validation should not be
284         # required.
285         if self._no_pool_changes(self._context, pools):
286             return
287         self.subnet_manager.delete_allocation_pools(self._context)
288         self.create_allocation_pools(self.subnet_manager, self._context, pools,
289                                      cidr)
290         self._pools = pools
291 
292     def get_details(self):
293         """Return subnet data as a SpecificSubnetRequest"""
294         return ipam_req.SpecificSubnetRequest(
295             self._tenant_id, self.subnet_manager.neutron_id,
296             self._cidr, self._gateway_ip, self._pools)
297 
298 
299 class NeutronDbPool(subnet_alloc.SubnetAllocator):
300     """Subnet pools backed by Neutron Database.
301 
302     As this driver does not implement yet the subnet pool concept, most
303     operations are either trivial or no-ops.
304     """
305 
306     def get_subnet(self, subnet_id):
307         """Retrieve an IPAM subnet.
308 
309         :param subnet_id: Neutron subnet identifier
310         :returns: a NeutronDbSubnet instance
311         """
312         return NeutronDbSubnet.load(subnet_id, self._context)
313 
314     def allocate_subnet(self, subnet_request):
315         """Create an IPAMSubnet object for the provided cidr.
316 
317         This method does not actually do any operation in the driver, given
318         its simplified nature.
319 
320         :param cidr: subnet's CIDR
321         :returns: a NeutronDbSubnet instance
322         """
323         if self._subnetpool:
324             subnet = super(NeutronDbPool, self).allocate_subnet(subnet_request)
325             subnet_request = subnet.get_details()
326 
327         # SubnetRequest must be an instance of SpecificSubnet
328         if not isinstance(subnet_request, ipam_req.SpecificSubnetRequest):
329             raise ipam_exc.InvalidSubnetRequestType(
330                 subnet_type=type(subnet_request))
331         return NeutronDbSubnet.create_from_subnet_request(subnet_request,
332                                                           self._context)
333 
334     def update_subnet(self, subnet_request):
335         """Update subnet info the in the IPAM driver.
336 
337         The only update subnet information the driver needs to be aware of
338         are allocation pools.
339         """
340         if not subnet_request.subnet_id:
341             raise ipam_exc.InvalidSubnetRequest(
342                 reason=_("An identifier must be specified when updating "
343                          "a subnet"))
344         if subnet_request.allocation_pools is None:
345             LOG.debug("Update subnet request for subnet %s did not specify "
346                       "new allocation pools, there is nothing to do",
347                       subnet_request.subnet_id)
348             return
349         subnet = NeutronDbSubnet.load(subnet_request.subnet_id, self._context)
350         cidr = netaddr.IPNetwork(subnet._cidr)
351         subnet.update_allocation_pools(subnet_request.allocation_pools, cidr)
352         return subnet
353 
354     def remove_subnet(self, subnet_id):
355         """Remove data structures for a given subnet.
356 
357         IPAM-related data has no foreign key relationships to neutron subnet,
358         so removing ipam subnet manually
359         """
360         count = ipam_db_api.IpamSubnetManager.delete(self._context,
361                                                      subnet_id)
362         if count < 1:
363             LOG.error("IPAM subnet referenced to "
364                       "Neutron subnet %s does not exist", subnet_id)
365             raise n_exc.SubnetNotFound(subnet_id=subnet_id)
366 
367     def needs_rollback(self):
368         return False
