Please review the code below for security defects using the CWE (Common Weakness Enumeration) as a reference standard. If any are found, please describe the security defect in detail and indicate the corresponding line number of code and solution. If none are detected, state: 'No security defects are detected in the code'.

1 # Copyright 2016 Red Hat, Inc.
2 # All Rights Reserved.
3 #
4 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
5 #    not use this file except in compliance with the License. You may obtain
6 #    a copy of the License at
7 #
8 #         http://www.apache.org/licenses/LICENSE-2.0
9 #
10 #    Unless required by applicable law or agreed to in writing, software
11 #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
12 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
13 #    License for the specific language governing permissions and limitations
14 #    under the License.
15 from tempest import test
16 
17 from neutron.tests.tempest import config
18 from neutron.tests.tempest.scenario import base
19 from neutron_lib import constants
20 
21 CONF = config.CONF
22 
23 
24 class NetworkDvrTest(base.BaseTempestTestCase):
25     credentials = ['primary', 'admin']
26     force_tenant_isolation = False
27 
28     @classmethod
29     @test.requires_ext(extension="dvr", service="network")
30     def skip_checks(cls):
31         super(NetworkDvrTest, cls).skip_checks()
32 
33     def check_connectivity_snat_down(self, network_id, fip, keypair):
34         port_id = self.client.list_ports(
35             network_id=network_id,
36             device_owner=constants.DEVICE_OWNER_ROUTER_SNAT)['ports'][0]['id']
37         port_status = {'admin_state_up': False}
38         self.admin_manager.network_client.update_port(port_id, **port_status)
39         self.check_connectivity(fip, CONF.validation.image_ssh_user, keypair)
40 
41     @test.idempotent_id('3d73ec1a-2ec6-45a9-b0f8-04a283d9d344')
42     def test_vm_reachable_through_compute(self):
43         """Check that the VM is reachable through compute node.
44 
45         The test is done by putting the SNAT port down on controller node.
46         """
47         self.setup_network_and_server()
48         self.check_connectivity(self.fip['floating_ip_address'],
49                                 CONF.validation.image_ssh_user,
50                                 self.keypair['private_key'])
51         self.check_connectivity_snat_down(
52             self.network['id'], self.fip['floating_ip_address'],
53             self.keypair['private_key'])
54 
55     @test.idempotent_id('23724222-483a-4129-bc15-7a9278f3828b')
56     def test_update_centr_router_to_dvr(self):
57         """Check that updating centralized router to be distributed works.
58         """
59         # Created a centralized router on a DVR setup
60         tenant_id = self.client.tenant_id
61         router = self.create_router_by_client(
62             distributed=False, tenant_id=tenant_id, is_admin=True)
63         self.setup_network_and_server(router=router)
64         self.check_connectivity(self.fip['floating_ip_address'],
65                                 CONF.validation.image_ssh_user,
66                                 self.keypair['private_key'])
67 
68         # Update router to be distributed
69         router_id = self.client.list_routers()['routers'][0]['id']
70         self.admin_manager.network_client.update_router(
71             router_id=router_id,
72             admin_state_up=False, distributed=True)
73         self.admin_manager.network_client.update_router(
74             router_id=router_id, admin_state_up=True)
75         self.check_connectivity(self.fip['floating_ip_address'],
76                                 CONF.validation.image_ssh_user,
77                                 self.keypair['private_key'])
78 
79         # Put the Router_SNAT port down, so the traffic flows through Compute
80         self.check_connectivity_snat_down(
81             self.network['id'], self.fip['floating_ip_address'],
82             self.keypair['private_key'])
